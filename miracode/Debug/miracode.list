
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ee0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080130a0  080130a0  000230a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135e0  080135e0  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080135e0  080135e0  000235e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135e8  080135e8  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135e8  080135e8  000235e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135ec  080135ec  000235ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080135f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002594  20000354  08013944  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200028e8  08013944  000328e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc9e  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057fe  00000000  00000000  0005c022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002258  00000000  00000000  00061820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002010  00000000  00000000  00063a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031eb5  00000000  00000000  00065a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c633  00000000  00000000  0009793d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121072  00000000  00000000  000c3f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e4fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a49c  00000000  00000000  001e5034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ef4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ef59c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013088 	.word	0x08013088

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08013088 	.word	0x08013088

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000edc:	b4b0      	push	{r4, r5, r7}
 8000ede:	b08f      	sub	sp, #60	; 0x3c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000ee4:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000eea:	2307      	movs	r3, #7
 8000eec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000efc:	23ff      	movs	r3, #255	; 0xff
 8000efe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	461d      	mov	r5, r3
 8000f10:	f107 040c 	add.w	r4, r7, #12
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	373c      	adds	r7, #60	; 0x3c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bcb0      	pop	{r4, r5, r7}
 8000f2c:	4770      	bx	lr

08000f2e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6898      	ldr	r0, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	899b      	ldrh	r3, [r3, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	f001 ff8b 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f001 fbee 	bl	8002728 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	899b      	ldrh	r3, [r3, #12]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f001 ff80 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f001 fbe3 	bl	8002728 <HAL_Delay>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000f74:	2101      	movs	r1, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f99f 	bl	80012ba <LoRa_read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d107      	bne.n	8000f9a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f023 0307 	bic.w	r3, r3, #7
 8000f90:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
 8000f98:	e03e      	b.n	8001018 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10c      	bne.n	8000fba <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa4:	f023 0307 	bic.w	r3, r3, #7
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
 8000fb8:	e02e      	b.n	8001018 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d10c      	bne.n	8000fda <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fc4:	f023 0307 	bic.w	r3, r3, #7
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f043 0303 	orr.w	r3, r3, #3
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	61da      	str	r2, [r3, #28]
 8000fd8:	e01e      	b.n	8001018 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d10c      	bne.n	8000ffa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fe4:	f023 0307 	bic.w	r3, r3, #7
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	f043 0305 	orr.w	r3, r3, #5
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	61da      	str	r2, [r3, #28]
 8000ff8:	e00e      	b.n	8001018 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d10b      	bne.n	8001018 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001004:	f023 0307 	bic.w	r3, r3, #7
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f043 0306 	orr.w	r3, r3, #6
 800100e:	b25b      	sxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2206      	movs	r2, #6
 8001016:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	461a      	mov	r2, r3
 800101c:	2101      	movs	r1, #1
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f965 	bl	80012ee <LoRa_write>
	//HAL_Delay(10);
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f001 ff08 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6998      	ldr	r0, [r3, #24]
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	f007 fc38 	bl	80088cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800105c:	bf00      	nop
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4618      	mov	r0, r3
 8001064:	f008 f8e3 	bl	800922e <HAL_SPI_GetState>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d1f7      	bne.n	800105e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6998      	ldr	r0, [r3, #24]
 8001072:	8b3a      	ldrh	r2, [r7, #24]
 8001074:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	f007 fd95 	bl	8008ba8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800107e:	bf00      	nop
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4618      	mov	r0, r3
 8001086:	f008 f8d2 	bl	800922e <HAL_SPI_GetState>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d1f7      	bne.n	8001080 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	889b      	ldrh	r3, [r3, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	f001 fede 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	f001 feca 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6998      	ldr	r0, [r3, #24]
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	f007 fbfa 	bl	80088cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010d8:	bf00      	nop
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 f8a5 	bl	800922e <HAL_SPI_GetState>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1f7      	bne.n	80010da <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6998      	ldr	r0, [r3, #24]
 80010ee:	8b3a      	ldrh	r2, [r7, #24]
 80010f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	f007 fbe9 	bl	80088cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010fa:	bf00      	nop
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4618      	mov	r0, r3
 8001102:	f008 f894 	bl	800922e <HAL_SPI_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1f7      	bne.n	80010fc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	889b      	ldrh	r3, [r3, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f001 fea0 	bl	8002e5c <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	04db      	lsls	r3, r3, #19
 8001132:	115b      	asrs	r3, r3, #5
 8001134:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	0c1b      	lsrs	r3, r3, #16
 800113a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	461a      	mov	r2, r3
 8001140:	2106      	movs	r1, #6
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f8d3 	bl	80012ee <LoRa_write>
	HAL_Delay(5);
 8001148:	2005      	movs	r0, #5
 800114a:	f001 faed 	bl	8002728 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	461a      	mov	r2, r3
 8001158:	2107      	movs	r1, #7
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8c7 	bl	80012ee <LoRa_write>
	HAL_Delay(5);
 8001160:	2005      	movs	r0, #5
 8001162:	f001 fae1 	bl	8002728 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	461a      	mov	r2, r3
 800116e:	2108      	movs	r1, #8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f8bc 	bl	80012ee <LoRa_write>
	HAL_Delay(5);
 8001176:	2005      	movs	r0, #5
 8001178:	f001 fad6 	bl	8002728 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b0c      	cmp	r3, #12
 8001192:	dd01      	ble.n	8001198 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001194:	230c      	movs	r3, #12
 8001196:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2b06      	cmp	r3, #6
 800119c:	dc01      	bgt.n	80011a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800119e:	2307      	movs	r3, #7
 80011a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011a2:	211e      	movs	r1, #30
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f888 	bl	80012ba <LoRa_read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f001 faba 	bl	8002728 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	461a      	mov	r2, r3
 80011cc:	211e      	movs	r1, #30
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f88d 	bl	80012ee <LoRa_write>
	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f001 faa7 	bl	8002728 <HAL_Delay>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2109      	movs	r1, #9
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f87a 	bl	80012ee <LoRa_write>
	HAL_Delay(10);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f001 fa94 	bl	8002728 <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b2c      	cmp	r3, #44	; 0x2c
 800121c:	d801      	bhi.n	8001222 <LoRa_setOCP+0x1a>
		current = 45;
 800121e:	232d      	movs	r3, #45	; 0x2d
 8001220:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2bf0      	cmp	r3, #240	; 0xf0
 8001226:	d901      	bls.n	800122c <LoRa_setOCP+0x24>
		current = 240;
 8001228:	23f0      	movs	r3, #240	; 0xf0
 800122a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b78      	cmp	r3, #120	; 0x78
 8001230:	d809      	bhi.n	8001246 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	3b2d      	subs	r3, #45	; 0x2d
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <LoRa_setOCP+0x78>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1052      	asrs	r2, r2, #1
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e00b      	b.n	800125e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2bf0      	cmp	r3, #240	; 0xf0
 800124a:	d808      	bhi.n	800125e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	331e      	adds	r3, #30
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LoRa_setOCP+0x78>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1092      	asrs	r2, r2, #2
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	3320      	adds	r3, #32
 8001262:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	461a      	mov	r2, r3
 8001268:	210b      	movs	r1, #11
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f83f 	bl	80012ee <LoRa_write>
	HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f001 fa59 	bl	8002728 <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	66666667 	.word	0x66666667

08001284 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800128c:	211e      	movs	r1, #30
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f813 	bl	80012ba <LoRa_read>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	f043 0307 	orr.w	r3, r3, #7
 800129e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	461a      	mov	r2, r3
 80012a4:	211e      	movs	r1, #30
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f821 	bl	80012ee <LoRa_write>
	HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f001 fa3b 	bl	8002728 <HAL_Delay>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af02      	add	r7, sp, #8
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80012d0:	f107 030f 	add.w	r3, r7, #15
 80012d4:	f107 010e 	add.w	r1, r7, #14
 80012d8:	2201      	movs	r2, #1
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fea4 	bl	800102c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af02      	add	r7, sp, #8
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
 80012fa:	4613      	mov	r3, r2
 80012fc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001308:	78bb      	ldrb	r3, [r7, #2]
 800130a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800130c:	f107 030f 	add.w	r3, r7, #15
 8001310:	f107 010e 	add.w	r1, r7, #14
 8001314:	2201      	movs	r2, #1
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fec4 	bl	80010a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	72fb      	strb	r3, [r7, #11]
 8001338:	4613      	mov	r3, r2
 800133a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	f001 fd83 	bl	8002e5c <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6998      	ldr	r0, [r3, #24]
 800135a:	f107 0117 	add.w	r1, r7, #23
 800135e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001362:	2201      	movs	r2, #1
 8001364:	f007 fab2 	bl	80088cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001368:	bf00      	nop
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4618      	mov	r0, r3
 8001370:	f007 ff5d 	bl	800922e <HAL_SPI_GetState>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d1f7      	bne.n	800136a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6998      	ldr	r0, [r3, #24]
 800137e:	7abb      	ldrb	r3, [r7, #10]
 8001380:	b29a      	uxth	r2, r3
 8001382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f007 faa0 	bl	80088cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800138c:	bf00      	nop
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4618      	mov	r0, r3
 8001394:	f007 ff4b 	bl	800922e <HAL_SPI_GetState>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d1f7      	bne.n	800138e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	889b      	ldrh	r3, [r3, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f001 fd57 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]

	return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	460b      	mov	r3, r1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	4613      	mov	r3, r2
 80013e0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80013e8:	2101      	movs	r1, #1
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fdbd 	bl	8000f6a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80013f0:	210e      	movs	r1, #14
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff ff61 	bl	80012ba <LoRa_read>
 80013f8:	4603      	mov	r3, r0
 80013fa:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	461a      	mov	r2, r3
 8001400:	210d      	movs	r1, #13
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7ff ff73 	bl	80012ee <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	461a      	mov	r2, r3
 800140c:	2122      	movs	r1, #34	; 0x22
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff ff6d 	bl	80012ee <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	2100      	movs	r1, #0
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff ff84 	bl	8001328 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001420:	2103      	movs	r1, #3
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fda1 	bl	8000f6a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001428:	2112      	movs	r1, #18
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff ff45 	bl	80012ba <LoRa_read>
 8001430:	4603      	mov	r3, r0
 8001432:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	2112      	movs	r1, #18
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ff53 	bl	80012ee <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001448:	6979      	ldr	r1, [r7, #20]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fd8d 	bl	8000f6a <LoRa_gotoMode>
			return 1;
 8001450:	2301      	movs	r3, #1
 8001452:	e00f      	b.n	8001474 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	88bb      	ldrh	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fd81 	bl	8000f6a <LoRa_gotoMode>
				return 0;
 8001468:	2300      	movs	r3, #0
 800146a:	e003      	b.n	8001474 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f001 f95b 	bl	8002728 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001472:	e7d9      	b.n	8001428 <LoRa_transmit+0x5c>
	}
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff96 	bl	80013b6 <LoRa_isvalid>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8093 	beq.w	80015b8 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fd68 	bl	8000f6a <LoRa_gotoMode>
			HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f001 f944 	bl	8002728 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80014a0:	2101      	movs	r1, #1
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff09 	bl	80012ba <LoRa_read>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80014ac:	200a      	movs	r0, #10
 80014ae:	f001 f93b 	bl	8002728 <HAL_Delay>
			data = read | 0x80;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	461a      	mov	r2, r3
 80014be:	2101      	movs	r1, #1
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff14 	bl	80012ee <LoRa_write>
			HAL_Delay(100);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f001 f92e 	bl	8002728 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fe26 	bl	8001124 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe7e 	bl	80011e2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fe8a 	bl	8001208 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80014f4:	2223      	movs	r2, #35	; 0x23
 80014f6:	210c      	movs	r1, #12
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fef8 	bl	80012ee <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fec0 	bl	8001284 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fe39 	bl	8001184 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	211f      	movs	r1, #31
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fee9 	bl	80012ee <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	b2da      	uxtb	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	461a      	mov	r2, r3
 800153c:	211d      	movs	r1, #29
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fed5 	bl	80012ee <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	2120      	movs	r1, #32
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fecb 	bl	80012ee <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	2121      	movs	r1, #33	; 0x21
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fea5 	bl	80012ba <LoRa_read>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800157a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	461a      	mov	r2, r3
 8001580:	2140      	movs	r1, #64	; 0x40
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff feb3 	bl	80012ee <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fced 	bl	8000f6a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f001 f8c6 	bl	8002728 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800159c:	2142      	movs	r1, #66	; 0x42
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fe8b 	bl	80012ba <LoRa_read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x0)//if(read == 0x12)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <LoRa_init+0x136>
				return LORA_OK;
 80015ae:	23c8      	movs	r3, #200	; 0xc8
 80015b0:	e004      	b.n	80015bc <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80015b2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80015b6:	e001      	b.n	80015bc <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80015b8:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <BSP_I2C2_Init+0x70>)
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <BSP_I2C2_Init+0x74>)
 80015d2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <BSP_I2C2_Init+0x78>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	4918      	ldr	r1, [pc, #96]	; (800163c <BSP_I2C2_Init+0x78>)
 80015dc:	600a      	str	r2, [r1, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d122      	bne.n	8001628 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80015e2:	4814      	ldr	r0, [pc, #80]	; (8001634 <BSP_I2C2_Init+0x70>)
 80015e4:	f001 fcfb 	bl	8002fde <HAL_I2C_GetState>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11c      	bne.n	8001628 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 80015ee:	4811      	ldr	r0, [pc, #68]	; (8001634 <BSP_I2C2_Init+0x70>)
 80015f0:	f000 f86a 	bl	80016c8 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <BSP_I2C2_Init+0x70>)
 80015fc:	f000 f820 	bl	8001640 <MX_I2C2_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001606:	f06f 0307 	mvn.w	r3, #7
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	e00c      	b.n	8001628 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800160e:	2100      	movs	r1, #0
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <BSP_I2C2_Init+0x70>)
 8001612:	f001 fcf2 	bl	8002ffa <HAL_I2CEx_ConfigAnalogFilter>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800161c:	f06f 0307 	mvn.w	r3, #7
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	e001      	b.n	8001628 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000370 	.word	0x20000370
 8001638:	40005800 	.word	0x40005800
 800163c:	200003c4 	.word	0x200003c4

08001640 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_I2C2_Init+0x80>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_I2C2_Init+0x84>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f001 fc1c 	bl	8002ec0 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 fcb0 	bl	8002ffa <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f001 fcf2 	bl	8003090 <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005800 	.word	0x40005800
 80016c4:	307075b1 	.word	0x307075b1

080016c8 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ae      	sub	sp, #184	; 0xb8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2294      	movs	r2, #148	; 0x94
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f00e fd7f 	bl	80101dc <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fec0 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <I2C2_MspInit+0xb8>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <I2C2_MspInit+0xb8>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <I2C2_MspInit+0xb8>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001722:	2304      	movs	r3, #4
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001728:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172c:	4619      	mov	r1, r3
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <I2C2_MspInit+0xbc>)
 8001730:	f001 f9ea 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	2312      	movs	r3, #18
 800173e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800174e:	2304      	movs	r3, #4
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001754:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001758:	4619      	mov	r1, r3
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <I2C2_MspInit+0xbc>)
 800175c:	f001 f9d4 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <I2C2_MspInit+0xb8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <I2C2_MspInit+0xb8>)
 8001766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800176a:	6593      	str	r3, [r2, #88]	; 0x58
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <I2C2_MspInit+0xb8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	37b8      	adds	r7, #184	; 0xb8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8001790:	4bac      	ldr	r3, [pc, #688]	; (8001a44 <main+0x2bc>)
 8001792:	f607 343c 	addw	r4, r7, #2876	; 0xb3c
 8001796:	461d      	mov	r5, r3
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017a0:	c403      	stmia	r4!, {r0, r1}
 80017a2:	7022      	strb	r2, [r4, #0]
 80017a4:	f607 3355 	addw	r3, r7, #2901	; 0xb55
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 80017b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80017bc:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80017c0:	461a      	mov	r2, r3
 80017c2:	2300      	movs	r3, #0
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	6053      	str	r3, [r2, #4]
 80017c8:	6093      	str	r3, [r2, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 80017cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80017d0:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80017de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80017e2:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 80017ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80017f2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	3304      	adds	r3, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 800180a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800180e:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	3304      	adds	r3, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8001826:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800182a:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	3304      	adds	r3, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8001842:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001846:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 800184a:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <main+0x2c0>)
 800184c:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800184e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001852:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	3304      	adds	r3, #4
 800185c:	2224      	movs	r2, #36	; 0x24
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f00e fcbb 	bl	80101dc <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 8001866:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800186a:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	3304      	adds	r3, #4
 8001874:	2224      	movs	r2, #36	; 0x24
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00e fcaf 	bl	80101dc <memset>
	//uint8_t GyroErrBuff[25] = {0};

	//LoRa
	LoRa Radio;
	char send_data[200];
	memset(send_data,NULL,200);
 800187e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001882:	22c8      	movs	r2, #200	; 0xc8
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f00e fca8 	bl	80101dc <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8001898:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 800189c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80018a0:	f6a3 3354 	subw	r3, r3, #2900	; 0xb54
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b8:	f000 fec1 	bl	800263e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018bc:	f000 f8d4 	bl	8001a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 faec 	bl	8001e9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80018c4:	f000 f936 	bl	8001b34 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 80018c8:	f000 f974 	bl	8001bb4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80018cc:	f000 f994 	bl	8001bf8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018d0:	f000 fa46 	bl	8001d60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018d4:	f000 fa92 	bl	8001dfc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80018d8:	f00c f828 	bl	800d92c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80018dc:	f00d fe80 	bl	800f5e0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 80018e0:	f000 f9c8 	bl	8001c74 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80018e4:	f000 f912 	bl	8001b0c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 80018e8:	f000 fbb2 	bl	8002050 <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 80018ec:	f7ff fe6a 	bl	80015c4 <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 80018f0:	4856      	ldr	r0, [pc, #344]	; (8001a4c <main+0x2c4>)
 80018f2:	f000 fd15 	bl	8002320 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 80018f6:	4856      	ldr	r0, [pc, #344]	; (8001a50 <main+0x2c8>)
 80018f8:	f000 fd12 	bl	8002320 <HAL_UART_MspInit>
//	else {
//		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
//	}


  Radio = newLoRa();
 80018fc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001900:	f5a3 6427 	sub.w	r4, r3, #2672	; 0xa70
 8001904:	463b      	mov	r3, r7
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fae8 	bl	8000edc <newLoRa>
 800190c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001910:	f6a3 3388 	subw	r3, r3, #2952	; 0xb88
 8001914:	461d      	mov	r5, r3
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001922:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  Radio.CS_port         = LORA0_NSS_GPIO_Port;
 8001926:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800192a:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 800192e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001932:	601a      	str	r2, [r3, #0]
  Radio.CS_pin          = LORA0_NSS_Pin;
 8001934:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001938:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 800193c:	2210      	movs	r2, #16
 800193e:	809a      	strh	r2, [r3, #4]
  Radio.reset_port      = LORA_RST_GPIO_Port;
 8001940:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001944:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <main+0x2cc>)
 800194a:	609a      	str	r2, [r3, #8]
  Radio.reset_pin       = LORA_RST_Pin;
 800194c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001950:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8001954:	2210      	movs	r2, #16
 8001956:	819a      	strh	r2, [r3, #12]
  Radio.DIO0_port       = LORA_DIG0_GPIO_Port;
 8001958:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800195c:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8001960:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001964:	611a      	str	r2, [r3, #16]
  Radio.DIO0_pin        = LORA_DIG0_Pin;
 8001966:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800196a:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 800196e:	2202      	movs	r2, #2
 8001970:	829a      	strh	r2, [r3, #20]
  Radio.hSPIx           = &hspi1;
 8001972:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001976:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 800197a:	4a37      	ldr	r2, [pc, #220]	; (8001a58 <main+0x2d0>)
 800197c:	619a      	str	r2, [r3, #24]

  // Setting radio parameters
  Radio.frequency             = 433;             // default = 433 MHz
 800197e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001982:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8001986:	f240 12b1 	movw	r2, #433	; 0x1b1
 800198a:	621a      	str	r2, [r3, #32]
  Radio.spredingFactor        = SF_7;            // default = SF_7
 800198c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001990:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8001994:	2207      	movs	r2, #7
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  Radio.bandWidth             = BW_125KHz;       // default = BW_125KHz
 800199a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800199e:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 80019a2:	2207      	movs	r2, #7
 80019a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  Radio.crcRate               = CR_4_5;          // default = CR_4_5
 80019a8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80019ac:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  Radio.power                 = POWER_20db;      // default = 20db
 80019b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80019ba:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 80019be:	22ff      	movs	r2, #255	; 0xff
 80019c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  Radio.overCurrentProtection = 100;             // default = 100 mA
 80019c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80019c8:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 80019cc:	2264      	movs	r2, #100	; 0x64
 80019ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  Radio.preamble              = 8;               // default = 8;
 80019d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80019d6:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 80019da:	2208      	movs	r2, #8
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28

  // Initializing radio
  LoRa_reset(&Radio);
 80019de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff faa3 	bl	8000f2e <LoRa_reset>
  uint16_t LoRa_status = LoRa_init(&Radio);
 80019e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fd45 	bl	800147c <LoRa_init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8a7 3b86 	strh.w	r3, [r7, #2950]	; 0xb86
   * The maximum current must be a multiple of 5 if it is less than 120, and a multiple of 10 if it is greater than 120.
   * The minimum value is 45 mA and the maximum is 240 mA.
   */

  // Checking radio status
  if (LoRa_status==LORA_OK){
 80019f8:	f8b7 3b86 	ldrh.w	r3, [r7, #2950]	; 0xb86
 80019fc:	2bc8      	cmp	r3, #200	; 0xc8
 80019fe:	d113      	bne.n	8001a28 <main+0x2a0>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001a00:	2108      	movs	r1, #8
 8001a02:	4816      	ldr	r0, [pc, #88]	; (8001a5c <main+0x2d4>)
 8001a04:	f001 fa42 	bl	8002e8c <HAL_GPIO_TogglePin>
	  snprintf(send_data,sizeof(send_data),"\n\r LoRa is running... :) \n\r");
 8001a08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <main+0x2d8>)
 8001a0e:	21c8      	movs	r1, #200	; 0xc8
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00f f95d 	bl	8010cd0 <sniprintf>
	  LoRa_transmit(&Radio, (uint8_t*)send_data, 120, 100);
 8001a16:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a1a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001a1e:	2364      	movs	r3, #100	; 0x64
 8001a20:	2278      	movs	r2, #120	; 0x78
 8001a22:	f7ff fcd3 	bl	80013cc <LoRa_transmit>
 8001a26:	e00b      	b.n	8001a40 <main+0x2b8>
	  // HAL_UART_Transmit(&debugUART, (uint8_t*)send_data, 200, 200);
  }
  else{
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <main+0x2d4>)
 8001a2c:	f001 fa2e 	bl	8002e8c <HAL_GPIO_TogglePin>
	  snprintf(send_data,sizeof(send_data),"\n\r LoRa failed :( \n\r Error code: %d \n\r", LoRa_status);
 8001a30:	f8b7 3b86 	ldrh.w	r3, [r7, #2950]	; 0xb86
 8001a34:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <main+0x2dc>)
 8001a3a:	21c8      	movs	r1, #200	; 0xc8
 8001a3c:	f00f f948 	bl	8010cd0 <sniprintf>
	  // HAL_UART_Transmit(&debugUART, (uint8_t*)send_data, 200, 200);
  }

  while(1);
 8001a40:	e7fe      	b.n	8001a40 <main+0x2b8>
 8001a42:	bf00      	nop
 8001a44:	080130e4 	.word	0x080130e4
 8001a48:	00202d20 	.word	0x00202d20
 8001a4c:	2000054c 	.word	0x2000054c
 8001a50:	200005dc 	.word	0x200005dc
 8001a54:	48000800 	.word	0x48000800
 8001a58:	2000049c 	.word	0x2000049c
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	080130a0 	.word	0x080130a0
 8001a64:	080130bc 	.word	0x080130bc

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b096      	sub	sp, #88	; 0x58
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	2244      	movs	r2, #68	; 0x44
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00e fbb0 	bl	80101dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f002 fd38 	bl	8004500 <HAL_PWREx_ControlVoltageScaling>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001a96:	f000 fad1 	bl	800203c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001a9a:	2321      	movs	r3, #33	; 0x21
 8001a9c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aac:	2303      	movs	r3, #3
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001ab4:	231e      	movs	r3, #30
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fdcd 	bl	8004668 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001ad4:	f000 fab2 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2303      	movs	r3, #3
 8001ade:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	2105      	movs	r1, #5
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 f9d3 	bl	8004e9c <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001afc:	f000 fa9e 	bl	800203c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001b00:	f003 fbca 	bl	8005298 <HAL_RCC_EnableCSS>
}
 8001b04:	bf00      	nop
 8001b06:	3758      	adds	r7, #88	; 0x58
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	201a      	movs	r0, #26
 8001b16:	f000 ff06 	bl	8002926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b1a:	201a      	movs	r0, #26
 8001b1c:	f000 ff1f 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2026      	movs	r0, #38	; 0x26
 8001b26:	f000 fefe 	bl	8002926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b2a:	2026      	movs	r0, #38	; 0x26
 8001b2c:	f000 ff17 	bl	800295e <HAL_NVIC_EnableIRQ>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <MX_I2C1_Init+0x78>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <MX_I2C1_Init+0x7c>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6e:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b70:	f001 f9a6 	bl	8002ec0 <HAL_I2C_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b7a:	f000 fa5f 	bl	800203c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b82:	f001 fa3a 	bl	8002ffa <HAL_I2CEx_ConfigAnalogFilter>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b8c:	f000 fa56 	bl	800203c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b94:	f001 fa7c 	bl	8003090 <HAL_I2CEx_ConfigDigitalFilter>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f000 fa4d 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003c8 	.word	0x200003c8
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	307075b1 	.word	0x307075b1

08001bb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <MX_SDMMC1_SD_Init+0x40>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <MX_SDMMC1_SD_Init+0x3c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000041c 	.word	0x2000041c
 8001bf4:	50062400 	.word	0x50062400

08001bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <MX_SPI1_Init+0x78>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c2e:	2228      	movs	r2, #40	; 0x28
 8001c30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c46:	2207      	movs	r2, #7
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c52:	2208      	movs	r2, #8
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_SPI1_Init+0x74>)
 8001c58:	f006 fd95 	bl	8008786 <HAL_SPI_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c62:	f000 f9eb 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000049c 	.word	0x2000049c
 8001c70:	40013000 	.word	0x40013000

08001c74 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b092      	sub	sp, #72	; 0x48
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c8e:	463b      	mov	r3, r7
 8001c90:	222c      	movs	r2, #44	; 0x2c
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00e faa1 	bl	80101dc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001c9c:	4a2f      	ldr	r2, [pc, #188]	; (8001d5c <MX_TIM17_Init+0xe8>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cb0:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001cb4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cca:	f007 fc7b 	bl	80095c4 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001cd4:	f000 f9b2 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001cd8:	481f      	ldr	r0, [pc, #124]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001cda:	f007 fcca 	bl	8009672 <HAL_TIM_OC_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001ce4:	f000 f9aa 	bl	800203c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4812      	ldr	r0, [pc, #72]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001d0e:	f007 fe31 	bl	8009974 <HAL_TIM_OC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001d18:	f000 f990 	bl	800203c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM17_Init+0xe4>)
 8001d40:	f008 fa34 	bl	800a1ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001d4a:	f000 f977 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3748      	adds	r7, #72	; 0x48
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000500 	.word	0x20000500
 8001d5c:	40014800 	.word	0x40014800

08001d60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <MX_USART1_UART_Init+0x98>)
 8001d6e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d84:	220c      	movs	r2, #12
 8001d86:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da6:	4812      	ldr	r0, [pc, #72]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001da8:	f008 fa9c 	bl	800a2e4 <HAL_UART_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001db2:	f000 f943 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db6:	2100      	movs	r1, #0
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001dba:	f009 fbca 	bl	800b552 <HAL_UARTEx_SetTxFifoThreshold>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001dc4:	f000 f93a 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001dcc:	f009 fbff 	bl	800b5ce <HAL_UARTEx_SetRxFifoThreshold>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001dd6:	f000 f931 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_USART1_UART_Init+0x90>)
 8001ddc:	f009 fb80 	bl	800b4e0 <HAL_UARTEx_DisableFifoMode>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001de6:	f000 f929 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000054c 	.word	0x2000054c
 8001df4:	40013800 	.word	0x40013800
 8001df8:	0001c138 	.word	0x0001c138

08001dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e02:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <MX_USART2_UART_Init+0x9c>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e40:	2210      	movs	r2, #16
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4c:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e4e:	f008 fa49 	bl	800a2e4 <HAL_UART_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001e58:	f000 f8f0 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e60:	f009 fb77 	bl	800b552 <HAL_UARTEx_SetTxFifoThreshold>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001e6a:	f000 f8e7 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e72:	f009 fbac 	bl	800b5ce <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001e7c:	f000 f8de 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_USART2_UART_Init+0x98>)
 8001e82:	f009 fb2d 	bl	800b4e0 <HAL_UARTEx_DisableFifoMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001e8c:	f000 f8d6 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200005dc 	.word	0x200005dc
 8001e98:	40004400 	.word	0x40004400

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	4b57      	ldr	r3, [pc, #348]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a56      	ldr	r2, [pc, #344]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee2:	4b51      	ldr	r3, [pc, #324]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a50      	ldr	r2, [pc, #320]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b4e      	ldr	r3, [pc, #312]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b45      	ldr	r3, [pc, #276]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a44      	ldr	r2, [pc, #272]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b42      	ldr	r3, [pc, #264]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_GPIO_Init+0x18c>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001f42:	2200      	movs	r2, #0
 8001f44:	f641 013c 	movw	r1, #6204	; 0x183c
 8001f48:	4838      	ldr	r0, [pc, #224]	; (800202c <MX_GPIO_Init+0x190>)
 8001f4a:	f000 ff87 	bl	8002e5c <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2130      	movs	r1, #48	; 0x30
 8001f52:	4837      	ldr	r0, [pc, #220]	; (8002030 <MX_GPIO_Init+0x194>)
 8001f54:	f000 ff82 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2178      	movs	r1, #120	; 0x78
 8001f5c:	4835      	ldr	r0, [pc, #212]	; (8002034 <MX_GPIO_Init+0x198>)
 8001f5e:	f000 ff7d 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001f62:	f641 033c 	movw	r3, #6204	; 0x183c
 8001f66:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	482c      	ldr	r0, [pc, #176]	; (800202c <MX_GPIO_Init+0x190>)
 8001f7c:	f000 fdc4 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8001f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4826      	ldr	r0, [pc, #152]	; (8002030 <MX_GPIO_Init+0x194>)
 8001f96:	f000 fdb7 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8001f9a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f000 fda9 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001fb6:	2330      	movs	r3, #48	; 0x30
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4818      	ldr	r0, [pc, #96]	; (8002030 <MX_GPIO_Init+0x194>)
 8001fce:	f000 fd9b 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4811      	ldr	r0, [pc, #68]	; (800202c <MX_GPIO_Init+0x190>)
 8001fe8:	f000 fd8e 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001fec:	2378      	movs	r3, #120	; 0x78
 8001fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <MX_GPIO_Init+0x198>)
 8002004:	f000 fd80 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8002008:	2320      	movs	r3, #32
 800200a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <MX_GPIO_Init+0x19c>)
 800201c:	f000 fd74 	bl	8002b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002020:	bf00      	nop
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	48001000 	.word	0x48001000
 8002030:	48000800 	.word	0x48000800
 8002034:	48000c00 	.word	0x48000c00
 8002038:	48000400 	.word	0x48000400

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8002044:	4801      	ldr	r0, [pc, #4]	; (800204c <Error_Handler+0x10>)
 8002046:	f00e fe1b 	bl	8010c80 <iprintf>
  while (1)
 800204a:	e7fe      	b.n	800204a <Error_Handler+0xe>
 800204c:	08013118 	.word	0x08013118

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_MspInit+0x44>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_MspInit+0x44>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6613      	str	r3, [r2, #96]	; 0x60
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_MspInit+0x44>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_MspInit+0x44>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_MspInit+0x44>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_MspInit+0x44>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0ae      	sub	sp, #184	; 0xb8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2294      	movs	r2, #148	; 0x94
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00e f88f 	bl	80101dc <memset>
  if(hi2c->Instance==I2C1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_I2C_MspInit+0xb0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d13a      	bne.n	800213e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020c8:	2340      	movs	r3, #64	; 0x40
 80020ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f9cb 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020e0:	f7ff ffac 	bl	800203c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_I2C_MspInit+0xb4>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_I2C_MspInit+0xb4>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_I2C_MspInit+0xb4>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fc:	23c0      	movs	r3, #192	; 0xc0
 80020fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002102:	2312      	movs	r3, #18
 8002104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002114:	2304      	movs	r3, #4
 8002116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800211e:	4619      	mov	r1, r3
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <HAL_I2C_MspInit+0xb8>)
 8002122:	f000 fcf1 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_I2C_MspInit+0xb4>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_I2C_MspInit+0xb4>)
 800212c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_I2C_MspInit+0xb4>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	37b8      	adds	r7, #184	; 0xb8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40005400 	.word	0x40005400
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400

08002154 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0b0      	sub	sp, #192	; 0xc0
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	2294      	movs	r2, #148	; 0x94
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f00e f831 	bl	80101dc <memset>
  if(hsd->Instance==SDMMC1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_SD_MspInit+0xf8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d15e      	bne.n	8002242 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002188:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	4618      	mov	r0, r3
 8002196:	f003 f96b 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80021a0:	f7ff ff4c 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	4a29      	ldr	r2, [pc, #164]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	4a23      	ldr	r2, [pc, #140]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_SD_MspInit+0xfc>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002206:	230c      	movs	r3, #12
 8002208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002210:	4619      	mov	r1, r3
 8002212:	4810      	ldr	r0, [pc, #64]	; (8002254 <HAL_SD_MspInit+0x100>)
 8002214:	f000 fc78 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002218:	2304      	movs	r3, #4
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002230:	230c      	movs	r3, #12
 8002232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002236:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800223a:	4619      	mov	r1, r3
 800223c:	4806      	ldr	r0, [pc, #24]	; (8002258 <HAL_SD_MspInit+0x104>)
 800223e:	f000 fc63 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	37c0      	adds	r7, #192	; 0xc0
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	50062400 	.word	0x50062400
 8002250:	40021000 	.word	0x40021000
 8002254:	48000800 	.word	0x48000800
 8002258:	48000c00 	.word	0x48000c00

0800225c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_SPI_MspInit+0x7c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d128      	bne.n	80022d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_SPI_MspInit+0x80>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_SPI_MspInit+0x80>)
 8002284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002288:	6613      	str	r3, [r2, #96]	; 0x60
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_SPI_MspInit+0x80>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_SPI_MspInit+0x80>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_SPI_MspInit+0x80>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_SPI_MspInit+0x80>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA0_NSS_Pin|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 80022ae:	23f0      	movs	r3, #240	; 0xf0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022be:	2305      	movs	r3, #5
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f000 fc1c 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40013000 	.word	0x40013000
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_TIM_Base_MspInit+0x38>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10b      	bne.n	800230a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6613      	str	r3, [r2, #96]	; 0x60
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_TIM_Base_MspInit+0x3c>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40014800 	.word	0x40014800
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0b0      	sub	sp, #192	; 0xc0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	2294      	movs	r2, #148	; 0x94
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f00d ff4b 	bl	80101dc <memset>
  if(huart->Instance==USART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_UART_MspInit+0x138>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d13d      	bne.n	80023cc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	4618      	mov	r0, r3
 800235e:	f003 f887 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002368:	f7ff fe68 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_UART_MspInit+0x13c>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002376:	6613      	str	r3, [r2, #96]	; 0x60
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_UART_MspInit+0x13c>)
 800237a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_UART_MspInit+0x13c>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800239c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b6:	2307      	movs	r3, #7
 80023b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f000 fb9f 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ca:	e040      	b.n	800244e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a23      	ldr	r2, [pc, #140]	; (8002460 <HAL_UART_MspInit+0x140>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d13b      	bne.n	800244e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023da:	2300      	movs	r3, #0
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023de:	f107 0318 	add.w	r3, r7, #24
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f844 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80023ee:	f7ff fe25 	bl	800203c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_UART_MspInit+0x13c>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_UART_MspInit+0x13c>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_UART_MspInit+0x13c>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_UART_MspInit+0x13c>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002422:	230c      	movs	r3, #12
 8002424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800243a:	2307      	movs	r3, #7
 800243c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244a:	f000 fb5d 	bl	8002b08 <HAL_GPIO_Init>
}
 800244e:	bf00      	nop
 8002450:	37c0      	adds	r7, #192	; 0xc0
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40013800 	.word	0x40013800
 800245c:	40021000 	.word	0x40021000
 8002460:	40004400 	.word	0x40004400

08002464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002468:	f002 ff26 	bl	80052b8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800246c:	e7fe      	b.n	800246c <NMI_Handler+0x8>

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <HardFault_Handler+0x4>

08002474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <MemManage_Handler+0x4>

0800247a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <UsageFault_Handler+0x4>

08002486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b4:	f000 f918 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80024d6:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80024ee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 80024f2:	f007 f91f 	bl	8009734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000cb8 	.word	0x20000cb8
 8002500:	20000cb9 	.word	0x20000cb9
 8002504:	20000500 	.word	0x20000500

08002508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <USART2_IRQHandler+0x90>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002514:	b29b      	uxth	r3, r3
 8002516:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <USART2_IRQHandler+0x94>)
 800251a:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <USART2_IRQHandler+0x98>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <USART2_IRQHandler+0x94>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	b2c8      	uxtb	r0, r1
 800252a:	491c      	ldr	r1, [pc, #112]	; (800259c <USART2_IRQHandler+0x94>)
 800252c:	7008      	strb	r0, [r1, #0]
 800252e:	4413      	add	r3, r2
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b0a      	cmp	r3, #10
 8002538:	d126      	bne.n	8002588 <USART2_IRQHandler+0x80>
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <USART2_IRQHandler+0x9c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d022      	beq.n	8002588 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <USART2_IRQHandler+0x98>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <USART2_IRQHandler+0x94>)
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4413      	add	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <USART2_IRQHandler+0xa0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <USART2_IRQHandler+0xa0>)
 800255c:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <USART2_IRQHandler+0x9c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <USART2_IRQHandler+0x9c>)
 8002568:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <USART2_IRQHandler+0x94>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <USART2_IRQHandler+0x98>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <USART2_IRQHandler+0xa4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d103      	bne.n	8002582 <USART2_IRQHandler+0x7a>
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <USART2_IRQHandler+0x98>)
 800257c:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <USART2_IRQHandler+0xa8>)
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e002      	b.n	8002588 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <USART2_IRQHandler+0x98>)
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <USART2_IRQHandler+0xa4>)
 8002586:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <USART2_IRQHandler+0x90>)
 800258a:	f007 fefb 	bl	800a384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200005dc 	.word	0x200005dc
 800259c:	20000cb0 	.word	0x20000cb0
 80025a0:	20000cac 	.word	0x20000cac
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000cb4 	.word	0x20000cb4
 80025ac:	2000066c 	.word	0x2000066c
 80025b0:	2000098c 	.word	0x2000098c

080025b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <OTG_FS_IRQHandler+0x10>)
 80025ba:	f000 ff08 	bl	80033ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200021a8 	.word	0x200021a8

080025c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <SystemInit+0x20>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <SystemInit+0x20>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f0:	f7ff ffea 	bl	80025c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <LoopForever+0xe>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <LoopForever+0x16>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f00d fda5 	bl	8010168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261e:	f7ff f8b3 	bl	8001788 <main>

08002622 <LoopForever>:

LoopForever:
    b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002624:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8002630:	080135f0 	.word	0x080135f0
  ldr r2, =_sbss
 8002634:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8002638:	200028e8 	.word	0x200028e8

0800263c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC1_IRQHandler>

0800263e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 f961 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264e:	200f      	movs	r0, #15
 8002650:	f000 f80e 	bl	8002670 <HAL_InitTick>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	e001      	b.n	8002664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002660:	f7ff fcf6 	bl	8002050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002664:	79fb      	ldrb	r3, [r7, #7]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_InitTick+0x6c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d023      	beq.n	80026cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_InitTick+0x70>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_InitTick+0x6c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f96d 	bl	800297a <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d809      	bhi.n	80026c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b4:	f000 f937 	bl	8002926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_InitTick+0x74>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e007      	b.n	80026d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e004      	b.n	80026d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e001      	b.n	80026d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000000c 	.word	0x2000000c
 80026e0:	20000004 	.word	0x20000004
 80026e4:	20000008 	.word	0x20000008

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	2000000c 	.word	0x2000000c
 800270c:	20000cbc 	.word	0x20000cbc

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000cbc 	.word	0x20000cbc

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000000c 	.word	0x2000000c

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <__NVIC_EnableIRQ+0x38>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	; (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff29 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff3e 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff8e 	bl	8002864 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff31 	bl	80027d4 <__NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffa2 	bl	80028cc <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d008      	beq.n	80029bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e040      	b.n	8002a3e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020e 	bic.w	r2, r2, #14
 80029ca:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029da:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f003 021c 	and.w	r2, r3, #28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a2a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d005      	beq.n	8002a6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e047      	b.n	8002afe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020e 	bic.w	r2, r2, #14
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 021c 	and.w	r2, r3, #28
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aba:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002adc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
    }
  }
  return status;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	e166      	b.n	8002de6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8158 	beq.w	8002de0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_Init+0x40>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d130      	bne.n	8002baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0201 	and.w	r2, r3, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d017      	beq.n	8002be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d123      	bne.n	8002c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80b2 	beq.w	8002de0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6613      	str	r3, [r2, #96]	; 0x60
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c94:	4a5c      	ldr	r2, [pc, #368]	; (8002e08 <HAL_GPIO_Init+0x300>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cbe:	d02b      	beq.n	8002d18 <HAL_GPIO_Init+0x210>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_GPIO_Init+0x304>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d025      	beq.n	8002d14 <HAL_GPIO_Init+0x20c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_GPIO_Init+0x308>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01f      	beq.n	8002d10 <HAL_GPIO_Init+0x208>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_GPIO_Init+0x30c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_GPIO_Init+0x204>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <HAL_GPIO_Init+0x310>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x200>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_GPIO_Init+0x314>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1fc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_GPIO_Init+0x318>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1f8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_GPIO_Init+0x31c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1f4>
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	e00e      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	e00c      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d00:	2306      	movs	r3, #6
 8002d02:	e00a      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d04:	2305      	movs	r3, #5
 8002d06:	e008      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e004      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e002      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_GPIO_Init+0x212>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4093      	lsls	r3, r2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d2a:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_GPIO_Init+0x300>)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002db0:	4a1d      	ldr	r2, [pc, #116]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f ae91 	bne.w	8002b18 <HAL_GPIO_Init+0x10>
  }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	48000400 	.word	0x48000400
 8002e10:	48000800 	.word	0x48000800
 8002e14:	48000c00 	.word	0x48000c00
 8002e18:	48001000 	.word	0x48001000
 8002e1c:	48001400 	.word	0x48001400
 8002e20:	48001800 	.word	0x48001800
 8002e24:	48001c00 	.word	0x48001c00
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	041a      	lsls	r2, r3, #16
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43d9      	mvns	r1, r3
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	400b      	ands	r3, r1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e081      	b.n	8002fd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f8d6 	bl	8002098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e006      	b.n	8002f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d104      	bne.n	8002f5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	d138      	bne.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800301a:	2302      	movs	r3, #2
 800301c:	e032      	b.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2224      	movs	r2, #36	; 0x24
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800304c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d139      	bne.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e033      	b.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	b08f      	sub	sp, #60	; 0x3c
 800312c:	af0a      	add	r7, sp, #40	; 0x28
 800312e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e116      	b.n	8003368 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f00c fc23 	bl	800f9a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f009 f974 	bl	800c466 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	687e      	ldr	r6, [r7, #4]
 8003186:	466d      	mov	r5, sp
 8003188:	f106 0410 	add.w	r4, r6, #16
 800318c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003198:	e885 0003 	stmia.w	r5, {r0, r1}
 800319c:	1d33      	adds	r3, r6, #4
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	f009 f887 	bl	800c2b4 <USB_CoreInit>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d7      	b.n	8003368 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f009 f962 	bl	800c488 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e04a      	b.n	8003260 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	333d      	adds	r3, #61	; 0x3d
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	333c      	adds	r3, #60	; 0x3c
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	b298      	uxth	r0, r3
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3344      	adds	r3, #68	; 0x44
 8003206:	4602      	mov	r2, r0
 8003208:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3348      	adds	r3, #72	; 0x48
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334c      	adds	r3, #76	; 0x4c
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	3354      	adds	r3, #84	; 0x54
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3301      	adds	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3af      	bcc.n	80031ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e044      	b.n	80032fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	3301      	adds	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	d3b5      	bcc.n	8003270 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	687e      	ldr	r6, [r7, #4]
 800330c:	466d      	mov	r5, sp
 800330e:	f106 0410 	add.w	r4, r6, #16
 8003312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003322:	1d33      	adds	r3, r6, #4
 8003324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	f009 f8fa 	bl	800c520 <USB_DevInit>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e014      	b.n	8003368 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f001 f882 	bl	8004460 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f00a f982 	bl	800d66a <USB_DevDisconnect>

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003370 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_PCD_Start+0x1c>
 8003388:	2302      	movs	r3, #2
 800338a:	e01c      	b.n	80033c6 <HAL_PCD_Start+0x56>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f009 f849 	bl	800c444 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00a f936 	bl	800d628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033ce:	b590      	push	{r4, r7, lr}
 80033d0:	b08d      	sub	sp, #52	; 0x34
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f00a f9f4 	bl	800d7d2 <USB_GetMode>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 847e 	bne.w	8003cee <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00a f958 	bl	800d6ac <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8474 	beq.w	8003cec <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f00a f945 	bl	800d6ac <USB_ReadInterrupts>
 8003422:	4603      	mov	r3, r0
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d107      	bne.n	800343c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 0202 	and.w	r2, r2, #2
 800343a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f00a f933 	bl	800d6ac <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d161      	bne.n	8003514 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0210 	bic.w	r2, r2, #16
 800345e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	0c5b      	lsrs	r3, r3, #17
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	2b02      	cmp	r3, #2
 800348a:	d124      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d035      	beq.n	8003504 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	6a38      	ldr	r0, [r7, #32]
 80034ac:	f009 ff6a 	bl	800d384 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034bc:	441a      	add	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	441a      	add	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
 80034d4:	e016      	b.n	8003504 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	0c5b      	lsrs	r3, r3, #17
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d110      	bne.n	8003504 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	2208      	movs	r2, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6a38      	ldr	r0, [r7, #32]
 80034ee:	f009 ff49 	bl	800d384 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fe:	441a      	add	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0210 	orr.w	r2, r2, #16
 8003512:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f00a f8c7 	bl	800d6ac <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003524:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003528:	f040 80a7 	bne.w	800367a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f00a f8cc 	bl	800d6d2 <USB_ReadDevAllOutEpInterrupt>
 800353a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800353c:	e099      	b.n	8003672 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 808e 	beq.w	8003666 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f00a f8f0 	bl	800d73a <USB_ReadDevOutEPInterrupt>
 800355a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2301      	movs	r3, #1
 8003576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fe96 	bl	80042ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	2308      	movs	r3, #8
 800359a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fed2 	bl	8004348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	2310      	movs	r3, #16
 80035be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d030      	beq.n	800362c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d109      	bne.n	80035ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f00c fb07 	bl	800fc28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2302      	movs	r3, #2
 800362a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2320      	movs	r3, #32
 8003646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003664:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	3301      	adds	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f af62 	bne.w	800353e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f00a f814 	bl	800d6ac <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368e:	f040 80a4 	bne.w	80037da <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f00a f835 	bl	800d706 <USB_ReadDevAllInEpInterrupt>
 800369c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036a2:	e096      	b.n	80037d2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 808b 	beq.w	80037c6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00a f85b 	bl	800d776 <USB_ReadDevInEPInterrupt>
 80036c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69f9      	ldr	r1, [r7, #28]
 80036e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ec:	4013      	ands	r3, r2
 80036ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	b2db      	uxtb	r3, r3
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f00c f9f8 	bl	800fafe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	2308      	movs	r3, #8
 8003728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	2310      	movs	r3, #16
 8003744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2340      	movs	r3, #64	; 0x40
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376e:	6a38      	ldr	r0, [r7, #32]
 8003770:	f009 f822 	bl	800c7b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3338      	adds	r3, #56	; 0x38
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	78db      	ldrb	r3, [r3, #3]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f00c fa55 	bl	800fc4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	461a      	mov	r2, r3
 80037b0:	2302      	movs	r3, #2
 80037b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fcea 	bl	800419a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af65 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f009 ff64 	bl	800d6ac <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ee:	d122      	bne.n	8003836 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003816:	2100      	movs	r1, #0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fe45 	bl	80044a8 <HAL_PCDEx_LPM_Callback>
 800381e:	e002      	b.n	8003826 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f00c f9d9 	bl	800fbd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f009 ff36 	bl	800d6ac <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d112      	bne.n	8003872 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f00c f995 	bl	800fb8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003870:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f009 ff18 	bl	800d6ac <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003886:	d121      	bne.n	80038cc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003896:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d111      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038bc:	2101      	movs	r1, #1
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fdf2 	bl	80044a8 <HAL_PCDEx_LPM_Callback>
 80038c4:	e002      	b.n	80038cc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f00c f960 	bl	800fb8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f009 feeb 	bl	800d6ac <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	f040 80b5 	bne.w	8003a4e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2110      	movs	r1, #16
 80038fe:	4618      	mov	r0, r3
 8003900:	f008 ff5a 	bl	800c7b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003908:	e046      	b.n	8003998 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	461a      	mov	r2, r3
 8003918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800391c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800393c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003950:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	440a      	add	r2, r1
 8003968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003990:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	3301      	adds	r3, #1
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d3b3      	bcc.n	800390a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ce:	f043 030b 	orr.w	r3, r3, #11
 80039d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e4:	f043 030b 	orr.w	r3, r3, #11
 80039e8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ea:	e015      	b.n	8003a18 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a12:	f043 030b 	orr.w	r3, r3, #11
 8003a16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f009 fefb 	bl	800d834 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f009 fe2a 	bl	800d6ac <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d124      	bne.n	8003aae <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f009 fec0 	bl	800d7ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f008 ff1d 	bl	800c8b2 <USB_GetDevSpeed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681c      	ldr	r4, [r3, #0]
 8003a84:	f001 fbd0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	4620      	mov	r0, r4
 8003a94:	f008 fc3a 	bl	800c30c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f00c f858 	bl	800fb4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f009 fdfa 	bl	800d6ac <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f00c f835 	bl	800fb32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f002 0208 	and.w	r2, r2, #8
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f009 fde5 	bl	800d6ac <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d122      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af8:	2301      	movs	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e014      	b.n	8003b28 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb0b 	bl	8004138 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d3e5      	bcc.n	8003afe <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f009 fdb8 	bl	800d6ac <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d13b      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b48:	2301      	movs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	e02b      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3340      	adds	r3, #64	; 0x40
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d115      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da12      	bge.n	8003ba0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	333f      	adds	r3, #63	; 0x3f
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 facc 	bl	8004138 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d3ce      	bcc.n	8003b4e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f009 fd71 	bl	800d6ac <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd4:	d155      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e045      	b.n	8003c68 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d12e      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da2b      	bge.n	8003c62 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d121      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c5e:	6053      	str	r3, [r2, #4]
            break;
 8003c60:	e007      	b.n	8003c72 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d3b4      	bcc.n	8003bdc <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f009 fd10 	bl	800d6ac <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d10a      	bne.n	8003cae <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f00b ffe9 	bl	800fc70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f009 fcfa 	bl	800d6ac <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d115      	bne.n	8003cee <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f00b ffd9 	bl	800fc8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e000      	b.n	8003cee <HAL_PCD_IRQHandler+0x920>
      return;
 8003cec:	bf00      	nop
    }
  }
}
 8003cee:	3734      	adds	r7, #52	; 0x34
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd90      	pop	{r4, r7, pc}

08003cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_PCD_SetAddress+0x1a>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e013      	b.n	8003d36 <HAL_PCD_SetAddress+0x42>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f009 fc58 	bl	800d5dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	70fb      	strb	r3, [r7, #3]
 8003d50:	460b      	mov	r3, r1
 8003d52:	803b      	strh	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da0f      	bge.n	8003d84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 020f 	and.w	r2, r3, #15
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3338      	adds	r3, #56	; 0x38
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	705a      	strb	r2, [r3, #1]
 8003d82:	e00f      	b.n	8003da4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003db0:	883a      	ldrh	r2, [r7, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	78ba      	ldrb	r2, [r7, #2]
 8003dba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dce:	78bb      	ldrb	r3, [r7, #2]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d102      	bne.n	8003dda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_PCD_EP_Open+0xaa>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e00e      	b.n	8003e06 <HAL_PCD_EP_Open+0xc8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f008 fd7a 	bl	800c8f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e04:	7afb      	ldrb	r3, [r7, #11]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da0f      	bge.n	8003e42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	3338      	adds	r3, #56	; 0x38
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	3304      	adds	r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	705a      	strb	r2, [r3, #1]
 8003e40:	e00f      	b.n	8003e62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_PCD_EP_Close+0x6e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e00e      	b.n	8003e9a <HAL_PCD_EP_Close+0x8c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f008 fdb8 	bl	800ca00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	7afb      	ldrb	r3, [r7, #11]
 8003eb4:	f003 020f 	and.w	r2, r3, #15
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6979      	ldr	r1, [r7, #20]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f009 f839 	bl	800cf78 <USB_EP0StartXfer>
 8003f06:	e005      	b.n	8003f14 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f008 fe52 	bl	800cbb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f40:	681b      	ldr	r3, [r3, #0]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3338      	adds	r3, #56	; 0x38
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f008 ffe4 	bl	800cf78 <USB_EP0StartXfer>
 8003fb0:	e005      	b.n	8003fbe <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f008 fdfd 	bl	800cbb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d901      	bls.n	8003fe6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e04e      	b.n	8004084 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da0f      	bge.n	800400e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	3338      	adds	r3, #56	; 0x38
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	3304      	adds	r3, #4
 8004004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	705a      	strb	r2, [r3, #1]
 800400c:	e00d      	b.n	800402a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_PCD_EP_SetStall+0x82>
 8004046:	2302      	movs	r3, #2
 8004048:	e01c      	b.n	8004084 <HAL_PCD_EP_SetStall+0xbc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f009 f9eb 	bl	800d434 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f009 fbdd 	bl	800d834 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d901      	bls.n	80040aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e042      	b.n	8004130 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da0f      	bge.n	80040d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	3338      	adds	r3, #56	; 0x38
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	705a      	strb	r2, [r3, #1]
 80040d0:	e00f      	b.n	80040f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_PCD_EP_ClrStall+0x86>
 800410e:	2302      	movs	r3, #2
 8004110:	e00e      	b.n	8004130 <HAL_PCD_EP_ClrStall+0xa4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	4618      	mov	r0, r3
 8004122:	f009 f9f5 	bl	800d510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da0c      	bge.n	8004166 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3338      	adds	r3, #56	; 0x38
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e00c      	b.n	8004180 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	4618      	mov	r0, r3
 8004188:	f009 f818 	bl	800d1bc <USB_EPStopXfer>
 800418c:	4603      	mov	r3, r0
 800418e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004190:	7afb      	ldrb	r3, [r7, #11]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3338      	adds	r3, #56	; 0x38
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d901      	bls.n	80041d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e067      	b.n	80042a2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d902      	bls.n	80041ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3303      	adds	r3, #3
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f6:	e026      	b.n	8004246 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	429a      	cmp	r2, r3
 800420c:	d902      	bls.n	8004214 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3303      	adds	r3, #3
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6919      	ldr	r1, [r3, #16]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	b29b      	uxth	r3, r3
 8004228:	6978      	ldr	r0, [r7, #20]
 800422a:	f009 f871 	bl	800d310 <USB_WritePacket>

    ep->xfer_buff  += len;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	441a      	add	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	b29b      	uxth	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d809      	bhi.n	8004270 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004264:	429a      	cmp	r2, r3
 8004266:	d203      	bcs.n	8004270 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1c3      	bne.n	80041f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	429a      	cmp	r2, r3
 800427a:	d811      	bhi.n	80042a0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	2201      	movs	r2, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	43db      	mvns	r3, r3
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800429c:	4013      	ands	r3, r2
 800429e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	333c      	adds	r3, #60	; 0x3c
 80042c4:	3304      	adds	r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <PCD_EP_OutXfrComplete_int+0x98>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d124      	bne.n	800432c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	461a      	mov	r2, r3
 80042fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fe:	6093      	str	r3, [r2, #8]
 8004300:	e01a      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	2320      	movs	r3, #32
 800431c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f00b fbcf 	bl	800fac8 <HAL_PCD_DataOutStageCallback>
 800432a:	e005      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f00b fbc8 	bl	800fac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	4f54310a 	.word	0x4f54310a

08004348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	333c      	adds	r3, #60	; 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <PCD_EP_OutSetupPacket_int+0x64>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d90e      	bls.n	800439c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f00b fb81 	bl	800faa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	4f54300a 	.word	0x4f54300a

080043b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
 80043bc:	4613      	mov	r3, r2
 80043be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ce:	883b      	ldrh	r3, [r7, #0]
 80043d0:	0419      	lsls	r1, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	430a      	orrs	r2, r1
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
 80043dc:	e028      	b.n	8004430 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e00d      	b.n	800440e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3340      	adds	r3, #64	; 0x40
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4413      	add	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	3301      	adds	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	3b01      	subs	r3, #1
 8004414:	429a      	cmp	r2, r3
 8004416:	d3ec      	bcc.n	80043f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004418:	883b      	ldrh	r3, [r7, #0]
 800441a:	0418      	lsls	r0, r3, #16
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	3b01      	subs	r3, #1
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4302      	orrs	r2, r0
 8004428:	3340      	adds	r3, #64	; 0x40
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	f043 0303 	orr.w	r3, r3, #3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d102      	bne.n	80044d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80044d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d6:	e00b      	b.n	80044f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80044da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d102      	bne.n	80044ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80044e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ec:	e000      	b.n	80044f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80044ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40007000 	.word	0x40007000

08004500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d141      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800450e:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d131      	bne.n	8004580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800451c:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004522:	4a46      	ldr	r2, [pc, #280]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800452c:	4b43      	ldr	r3, [pc, #268]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004534:	4a41      	ldr	r2, [pc, #260]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800453c:	4b40      	ldr	r3, [pc, #256]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2232      	movs	r2, #50	; 0x32
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004552:	e002      	b.n	800455a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b01      	subs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d102      	bne.n	800456e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f2      	bne.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457a:	d158      	bne.n	800462e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e057      	b.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004590:	e04d      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d141      	bne.n	800461e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800459a:	4b28      	ldr	r3, [pc, #160]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d131      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2232      	movs	r2, #50	; 0x32
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	0c9b      	lsrs	r3, r3, #18
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045de:	e002      	b.n	80045e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f2:	d102      	bne.n	80045fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f2      	bne.n	80045e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d112      	bne.n	800462e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e011      	b.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800461c:	e007      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40007000 	.word	0x40007000
 8004640:	20000004 	.word	0x20000004
 8004644:	431bde83 	.word	0x431bde83

08004648 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_PWREx_EnableVddUSB+0x1c>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004656:	6053      	str	r3, [r2, #4]
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40007000 	.word	0x40007000

08004668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f000 bc08 	b.w	8004e8c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467c:	4b96      	ldr	r3, [pc, #600]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004686:	4b94      	ldr	r3, [pc, #592]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80e4 	beq.w	8004866 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4c>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	f040 808b 	bne.w	80047c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 8087 	bne.w	80047c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b4:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_OscConfig+0x64>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e3df      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_RCC_OscConfig+0x7e>
 80046dc:	4b7e      	ldr	r3, [pc, #504]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e4:	e005      	b.n	80046f2 <HAL_RCC_OscConfig+0x8a>
 80046e6:	4b7c      	ldr	r3, [pc, #496]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d223      	bcs.n	800473e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fdf8 	bl	80052f0 <RCC_SetFlashLatencyFromMSIRange>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e3c0      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800470a:	4b73      	ldr	r3, [pc, #460]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a72      	ldr	r2, [pc, #456]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004710:	f043 0308 	orr.w	r3, r3, #8
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	496d      	ldr	r1, [pc, #436]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004728:	4b6b      	ldr	r3, [pc, #428]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	4968      	ldr	r1, [pc, #416]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	e025      	b.n	800478a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800473e:	4b66      	ldr	r3, [pc, #408]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a65      	ldr	r2, [pc, #404]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	4960      	ldr	r1, [pc, #384]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475c:	4b5e      	ldr	r3, [pc, #376]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	495b      	ldr	r1, [pc, #364]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fdb8 	bl	80052f0 <RCC_SetFlashLatencyFromMSIRange>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e380      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800478a:	f000 fcc1 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	4950      	ldr	r1, [pc, #320]	; (80048dc <HAL_RCC_OscConfig+0x274>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a4e      	ldr	r2, [pc, #312]	; (80048e0 <HAL_RCC_OscConfig+0x278>)
 80047a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047aa:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <HAL_RCC_OscConfig+0x27c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd ff5e 	bl	8002670 <HAL_InitTick>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d052      	beq.n	8004864 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	e364      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d032      	beq.n	8004830 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047ca:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a42      	ldr	r2, [pc, #264]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d6:	f7fd ff9b 	bl	8002710 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047de:	f7fd ff97 	bl	8002710 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e34d      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047f0:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047fc:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004802:	f043 0308 	orr.w	r3, r3, #8
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4930      	ldr	r1, [pc, #192]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	492b      	ldr	r1, [pc, #172]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
 800482e:	e01a      	b.n	8004866 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004830:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800483c:	f7fd ff68 	bl	8002710 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004844:	f7fd ff64 	bl	8002710 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e31a      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x1dc>
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004864:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d073      	beq.n	800495a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d005      	beq.n	8004884 <HAL_RCC_OscConfig+0x21c>
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d10e      	bne.n	800489c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d10b      	bne.n	800489c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d063      	beq.n	8004958 <HAL_RCC_OscConfig+0x2f0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d15f      	bne.n	8004958 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e2f7      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_OscConfig+0x24c>
 80048a6:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e025      	b.n	8004900 <HAL_RCC_OscConfig+0x298>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048bc:	d114      	bne.n	80048e8 <HAL_RCC_OscConfig+0x280>
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a02      	ldr	r2, [pc, #8]	; (80048d8 <HAL_RCC_OscConfig+0x270>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e013      	b.n	8004900 <HAL_RCC_OscConfig+0x298>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	08013178 	.word	0x08013178
 80048e0:	20000004 	.word	0x20000004
 80048e4:	20000008 	.word	0x20000008
 80048e8:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a9f      	ldr	r2, [pc, #636]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b9d      	ldr	r3, [pc, #628]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a9c      	ldr	r2, [pc, #624]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80048fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd ff02 	bl	8002710 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004910:	f7fd fefe 	bl	8002710 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e2b4      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004922:	4b92      	ldr	r3, [pc, #584]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x2a8>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd feee 	bl	8002710 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7fd feea 	bl	8002710 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e2a0      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x2d0>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d060      	beq.n	8004a28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d005      	beq.n	8004978 <HAL_RCC_OscConfig+0x310>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d119      	bne.n	80049a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d116      	bne.n	80049a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004978:	4b7c      	ldr	r3, [pc, #496]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_OscConfig+0x328>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e27d      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	4973      	ldr	r1, [pc, #460]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a4:	e040      	b.n	8004a28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d023      	beq.n	80049f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ae:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6e      	ldr	r2, [pc, #440]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fd fea9 	bl	8002710 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fd fea5 	bl	8002710 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e25b      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d4:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	495f      	ldr	r1, [pc, #380]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
 80049f4:	e018      	b.n	8004a28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f6:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a5c      	ldr	r2, [pc, #368]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 80049fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd fe85 	bl	8002710 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fd fe81 	bl	8002710 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e237      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d03c      	beq.n	8004aae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01c      	beq.n	8004a76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3c:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	4a4a      	ldr	r2, [pc, #296]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fe60 	bl	8002710 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd fe5c 	bl	8002710 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e212      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ef      	beq.n	8004a54 <HAL_RCC_OscConfig+0x3ec>
 8004a74:	e01b      	b.n	8004aae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a76:	4b3d      	ldr	r3, [pc, #244]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7c:	4a3b      	ldr	r2, [pc, #236]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7fd fe43 	bl	8002710 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fe3f 	bl	8002710 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e1f5      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa0:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ef      	bne.n	8004a8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a6 	beq.w	8004c08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ac0:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad8:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <HAL_RCC_OscConfig+0x508>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af4:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <HAL_RCC_OscConfig+0x508>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_RCC_OscConfig+0x508>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b00:	f7fd fe06 	bl	8002710 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fd fe02 	bl	8002710 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1b8      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <HAL_RCC_OscConfig+0x508>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d108      	bne.n	8004b40 <HAL_RCC_OscConfig+0x4d8>
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b3e:	e029      	b.n	8004b94 <HAL_RCC_OscConfig+0x52c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d115      	bne.n	8004b74 <HAL_RCC_OscConfig+0x50c>
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	4a03      	ldr	r2, [pc, #12]	; (8004b6c <HAL_RCC_OscConfig+0x504>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b68:	e014      	b.n	8004b94 <HAL_RCC_OscConfig+0x52c>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
 8004b74:	4b9d      	ldr	r3, [pc, #628]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a9c      	ldr	r2, [pc, #624]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b84:	4b99      	ldr	r3, [pc, #612]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a98      	ldr	r2, [pc, #608]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fd fdb8 	bl	8002710 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fdb4 	bl	8002710 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e168      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ed      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x53c>
 8004bc8:	e015      	b.n	8004bf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd fda1 	bl	8002710 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fd fd9d 	bl	8002710 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e151      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be8:	4b80      	ldr	r3, [pc, #512]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ed      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	4a7a      	ldr	r2, [pc, #488]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1c:	4b73      	ldr	r3, [pc, #460]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c22:	4a72      	ldr	r2, [pc, #456]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fd70 	bl	8002710 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c34:	f7fd fd6c 	bl	8002710 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e122      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c46:	4b69      	ldr	r3, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCC_OscConfig+0x5cc>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c56:	4b65      	ldr	r3, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5c:	4a63      	ldr	r2, [pc, #396]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fd fd53 	bl	8002710 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6e:	f7fd fd4f 	bl	8002710 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e105      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c80:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80f9 	beq.w	8004e8a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f040 80cf 	bne.w	8004e40 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ca2:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0203 	and.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d12c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d123      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d11b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d113      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d109      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d071      	beq.n	8004df4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d068      	beq.n	8004de8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d16:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0ac      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d32:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d3e:	f7fd fce7 	bl	8002710 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fd fce3 	bl	8002710 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e099      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <HAL_RCC_OscConfig+0x788>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0112      	lsls	r2, r2, #4
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d7e:	0212      	lsls	r2, r2, #8
 8004d80:	4311      	orrs	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d86:	0852      	lsrs	r2, r2, #1
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	0552      	lsls	r2, r2, #21
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d92:	0852      	lsrs	r2, r2, #1
 8004d94:	3a01      	subs	r2, #1
 8004d96:	0652      	lsls	r2, r2, #25
 8004d98:	4311      	orrs	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d9e:	06d2      	lsls	r2, r2, #27
 8004da0:	430a      	orrs	r2, r1
 8004da2:	4912      	ldr	r1, [pc, #72]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0f      	ldr	r2, [pc, #60]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc0:	f7fd fca6 	bl	8002710 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd fca2 	bl	8002710 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e058      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	4b04      	ldr	r3, [pc, #16]	; (8004dec <HAL_RCC_OscConfig+0x784>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de6:	e050      	b.n	8004e8a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e04f      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d144      	bne.n	8004e8a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e00:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e18:	f7fd fc7a 	bl	8002710 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fc76 	bl	8002710 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e02c      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x7b8>
 8004e3e:	e024      	b.n	8004e8a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d01f      	beq.n	8004e86 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd fc5d 	bl	8002710 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd fc59 	bl	8002710 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e00f      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	4905      	ldr	r1, [pc, #20]	; (8004e94 <HAL_RCC_OscConfig+0x82c>)
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCC_OscConfig+0x830>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60cb      	str	r3, [r1, #12]
 8004e84:	e001      	b.n	8004e8a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000
 8004e98:	feeefffc 	.word	0xfeeefffc

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e11d      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b90      	ldr	r3, [pc, #576]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d910      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 020f 	bic.w	r2, r3, #15
 8004eca:	498b      	ldr	r1, [pc, #556]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b89      	ldr	r3, [pc, #548]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e105      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d908      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	497b      	ldr	r1, [pc, #492]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d079      	beq.n	8005012 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d11e      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f26:	4b75      	ldr	r3, [pc, #468]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e0dc      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004f36:	f000 fa35 	bl	80053a4 <RCC_GetSysClockFreqFromPLLSource>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4a70      	ldr	r2, [pc, #448]	; (8005100 <HAL_RCC_ClockConfig+0x264>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d946      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f42:	4b6e      	ldr	r3, [pc, #440]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d140      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f4e:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	4a69      	ldr	r2, [pc, #420]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e035      	b.n	8004fd0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f6c:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d115      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0b9      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f84:	4b5d      	ldr	r3, [pc, #372]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0ad      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0a5      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004fa4:	f000 f8b4 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4a55      	ldr	r2, [pc, #340]	; (8005100 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d90f      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fb0:	4b52      	ldr	r3, [pc, #328]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fbc:	4b4f      	ldr	r3, [pc, #316]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc4:	4a4d      	ldr	r2, [pc, #308]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 0203 	bic.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4947      	ldr	r1, [pc, #284]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fd fb95 	bl	8002710 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fea:	f7fd fb91 	bl	8002710 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e077      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005000:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 020c 	and.w	r2, r3, #12
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	429a      	cmp	r2, r3
 8005010:	d1eb      	bne.n	8004fea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d105      	bne.n	8005024 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005018:	4b38      	ldr	r3, [pc, #224]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a37      	ldr	r2, [pc, #220]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 800501e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005022:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d010      	beq.n	8005052 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	4b31      	ldr	r3, [pc, #196]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503c:	429a      	cmp	r2, r3
 800503e:	d208      	bcs.n	8005052 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005040:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	492b      	ldr	r1, [pc, #172]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d210      	bcs.n	8005082 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 020f 	bic.w	r2, r3, #15
 8005068:	4923      	ldr	r1, [pc, #140]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <HAL_RCC_ClockConfig+0x25c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d001      	beq.n	8005082 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e036      	b.n	80050f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508e:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4918      	ldr	r1, [pc, #96]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 800509c:	4313      	orrs	r3, r2
 800509e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4910      	ldr	r1, [pc, #64]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c0:	f000 f826 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCC_ClockConfig+0x260>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	490c      	ldr	r1, [pc, #48]	; (8005104 <HAL_RCC_ClockConfig+0x268>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x26c>)
 80050de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x270>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd fac3 	bl	8002670 <HAL_InitTick>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40022000 	.word	0x40022000
 80050fc:	40021000 	.word	0x40021000
 8005100:	04c4b400 	.word	0x04c4b400
 8005104:	08013178 	.word	0x08013178
 8005108:	20000004 	.word	0x20000004
 800510c:	20000008 	.word	0x20000008

08005110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x34>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d121      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11e      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005144:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e005      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d102      	bne.n	800518e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e004      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d101      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 8005196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d134      	bne.n	8005208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d003      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0xac>
 80051b4:	e005      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b8:	617b      	str	r3, [r7, #20]
      break;
 80051ba:	e005      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 80051be:	617b      	str	r3, [r7, #20]
      break;
 80051c0:	e002      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	617b      	str	r3, [r7, #20]
      break;
 80051c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3301      	adds	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	fb03 f202 	mul.w	r2, r3, r2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	0e5b      	lsrs	r3, r3, #25
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	3301      	adds	r3, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005208:	69bb      	ldr	r3, [r7, #24]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	08013190 	.word	0x08013190
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_GetHCLKFreq+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000004 	.word	0x20000004

08005240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005244:	f7ff fff0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	08013188 	.word	0x08013188

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005270:	f7ff ffda 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0adb      	lsrs	r3, r3, #11
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	08013188 	.word	0x08013188

08005298 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_EnableCSS+0x1c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HAL_RCC_EnableCSS+0x1c>)
 80052a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_RCC_NMI_IRQHandler+0x24>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d105      	bne.n	80052d6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80052ca:	f000 f809 	bl	80052e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80052ce:	4b03      	ldr	r3, [pc, #12]	; (80052dc <HAL_RCC_NMI_IRQHandler+0x24>)
 80052d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d4:	621a      	str	r2, [r3, #32]
  }
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000

080052e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052fc:	4b27      	ldr	r3, [pc, #156]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005308:	f7ff f8da 	bl	80044c0 <HAL_PWREx_GetVoltageRange>
 800530c:	6178      	str	r0, [r7, #20]
 800530e:	e014      	b.n	800533a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
 800531c:	4b1f      	ldr	r3, [pc, #124]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005328:	f7ff f8ca 	bl	80044c0 <HAL_PWREx_GetVoltageRange>
 800532c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b1b      	ldr	r3, [pc, #108]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	4a1a      	ldr	r2, [pc, #104]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005340:	d10b      	bne.n	800535a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d913      	bls.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2ba0      	cmp	r3, #160	; 0xa0
 800534c:	d902      	bls.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800534e:	2302      	movs	r3, #2
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e00d      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005354:	2301      	movs	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	e00a      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b7f      	cmp	r3, #127	; 0x7f
 800535e:	d902      	bls.n	8005366 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005360:	2302      	movs	r3, #2
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e004      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b70      	cmp	r3, #112	; 0x70
 800536a:	d101      	bne.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800536c:	2301      	movs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 020f 	bic.w	r2, r3, #15
 8005378:	4909      	ldr	r1, [pc, #36]	; (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	429a      	cmp	r2, r3
 800538c:	d001      	beq.n	8005392 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	40022000 	.word	0x40022000

080053a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053aa:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d00b      	beq.n	80053d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d825      	bhi.n	800540c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d008      	beq.n	80053d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d11f      	bne.n	800540c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80053cc:	4b25      	ldr	r3, [pc, #148]	; (8005464 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053ce:	613b      	str	r3, [r7, #16]
    break;
 80053d0:	e01f      	b.n	8005412 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80053d4:	613b      	str	r3, [r7, #16]
    break;
 80053d6:	e01c      	b.n	8005412 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053e4:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e005      	b.n	8005400 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005400:	4a1a      	ldr	r2, [pc, #104]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	613b      	str	r3, [r7, #16]
    break;
 800540a:	e002      	b.n	8005412 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
    break;
 8005410:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	3301      	adds	r3, #1
 800541e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	fb03 f202 	mul.w	r2, r3, r2
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	0e5b      	lsrs	r3, r3, #25
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005452:	683b      	ldr	r3, [r7, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40021000 	.word	0x40021000
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200
 800546c:	08013190 	.word	0x08013190

08005470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005478:	2300      	movs	r3, #0
 800547a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800547c:	2300      	movs	r3, #0
 800547e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005488:	2b00      	cmp	r3, #0
 800548a:	d040      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d02a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d825      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d026      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d821      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d006      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d81d      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d010      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80054b0:	e018      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4a88      	ldr	r2, [pc, #544]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054be:	e015      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fa24 	bl	8006914 <RCCEx_PLLSAI1_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d0:	e00c      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3320      	adds	r3, #32
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fb0f 	bl	8006afc <RCCEx_PLLSAI2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	74fb      	strb	r3, [r7, #19]
      break;
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80054ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f2:	4b79      	ldr	r3, [pc, #484]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005500:	4975      	ldr	r1, [pc, #468]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005508:	e001      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d047      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	d030      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d82a      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800552a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552e:	d02a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005534:	d824      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553a:	d008      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005540:	d81e      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d010      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800554c:	e018      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800554e:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4a61      	ldr	r2, [pc, #388]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800555a:	e015      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f9d6 	bl	8006914 <RCCEx_PLLSAI1_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800556c:	e00c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3320      	adds	r3, #32
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f001 fac1 	bl	8006afc <RCCEx_PLLSAI2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800557e:	e003      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	74fb      	strb	r3, [r7, #19]
      break;
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800558e:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	494e      	ldr	r1, [pc, #312]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055a4:	e001      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a6:	7cfb      	ldrb	r3, [r7, #19]
 80055a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 809f 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b8:	2300      	movs	r3, #0
 80055ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055bc:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	4a40      	ldr	r2, [pc, #256]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
 80055de:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ea:	2301      	movs	r3, #1
 80055ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ee:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055fa:	f7fd f889 	bl	8002710 <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005600:	e009      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fd f885 	bl	8002710 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d902      	bls.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	74fb      	strb	r3, [r7, #19]
        break;
 8005614:	e005      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005616:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ef      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15b      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01f      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	429a      	cmp	r2, r3
 8005644:	d019      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005652:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800565a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005672:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d016      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd f844 	bl	8002710 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568a:	e00b      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568c:	f7fd f840 	bl	8002710 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	; 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d902      	bls.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	74fb      	strb	r3, [r7, #19]
            break;
 80056a2:	e006      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ec      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10c      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	4903      	ldr	r1, [pc, #12]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	74bb      	strb	r3, [r7, #18]
 80056d6:	e005      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e4:	7c7b      	ldrb	r3, [r7, #17]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4ba0      	ldr	r3, [pc, #640]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ee:	4a9f      	ldr	r2, [pc, #636]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005702:	4b9a      	ldr	r3, [pc, #616]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f023 0203 	bic.w	r2, r3, #3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	4996      	ldr	r1, [pc, #600]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005724:	4b91      	ldr	r3, [pc, #580]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f023 020c 	bic.w	r2, r3, #12
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	498e      	ldr	r1, [pc, #568]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005746:	4b89      	ldr	r3, [pc, #548]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	4985      	ldr	r1, [pc, #532]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005768:	4b80      	ldr	r3, [pc, #512]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005776:	497d      	ldr	r1, [pc, #500]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800578a:	4b78      	ldr	r3, [pc, #480]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005798:	4974      	ldr	r1, [pc, #464]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ac:	4b6f      	ldr	r3, [pc, #444]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	496c      	ldr	r1, [pc, #432]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ce:	4b67      	ldr	r3, [pc, #412]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057dc:	4963      	ldr	r1, [pc, #396]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057f0:	4b5e      	ldr	r3, [pc, #376]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fe:	495b      	ldr	r1, [pc, #364]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005812:	4b56      	ldr	r3, [pc, #344]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	4952      	ldr	r1, [pc, #328]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005834:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	494a      	ldr	r1, [pc, #296]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005856:	4b45      	ldr	r3, [pc, #276]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005864:	4941      	ldr	r1, [pc, #260]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005878:	4b3c      	ldr	r3, [pc, #240]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	4939      	ldr	r1, [pc, #228]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d028      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800589a:	4b34      	ldr	r3, [pc, #208]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	4930      	ldr	r1, [pc, #192]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b8:	d106      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4a2b      	ldr	r2, [pc, #172]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c4:	60d3      	str	r3, [r2, #12]
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058d0:	d10c      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	2101      	movs	r1, #1
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f81b 	bl	8006914 <RCCEx_PLLSAI1_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d04d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005900:	d108      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800590e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005912:	e012      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005914:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005924:	4b11      	ldr	r3, [pc, #68]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005932:	490e      	ldr	r1, [pc, #56]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005942:	d106      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594e:	60d3      	str	r3, [r2, #12]
 8005950:	e020      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800595a:	d109      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a02      	ldr	r2, [pc, #8]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005966:	60d3      	str	r3, [r2, #12]
 8005968:	e014      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005978:	d10c      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2101      	movs	r1, #1
 8005980:	4618      	mov	r0, r3
 8005982:	f000 ffc7 	bl	8006914 <RCCEx_PLLSAI1_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800598a:	7cfb      	ldrb	r3, [r7, #19]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d028      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a0:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ae:	4947      	ldr	r1, [pc, #284]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a41      	ldr	r2, [pc, #260]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ca:	60d3      	str	r3, [r2, #12]
 80059cc:	e011      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	2101      	movs	r1, #1
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 ff98 	bl	8006914 <RCCEx_PLLSAI1_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01e      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059fe:	4b33      	ldr	r3, [pc, #204]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0e:	492f      	ldr	r1, [pc, #188]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	2102      	movs	r1, #2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 ff73 	bl	8006914 <RCCEx_PLLSAI1_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a32:	7cfb      	ldrb	r3, [r7, #19]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4e:	f023 0204 	bic.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a58:	491c      	ldr	r1, [pc, #112]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a72:	f023 0218 	bic.w	r2, r3, #24
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	4913      	ldr	r1, [pc, #76]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae2:	d13e      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ae4:	4bb6      	ldr	r3, [pc, #728]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af6:	d028      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005afe:	f200 86f4 	bhi.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b08:	d005      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d00e      	beq.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005b12:	f000 beea 	b.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b16:	4baa      	ldr	r3, [pc, #680]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	f040 86e4 	bne.w	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2a:	61fb      	str	r3, [r7, #28]
      break;
 8005b2c:	f000 bedf 	b.w	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005b30:	4ba3      	ldr	r3, [pc, #652]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f040 86d9 	bne.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005b40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b44:	61fb      	str	r3, [r7, #28]
      break;
 8005b46:	f000 bed4 	b.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b4a:	4b9d      	ldr	r3, [pc, #628]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b56:	f040 86ce 	bne.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005b5a:	4b9a      	ldr	r3, [pc, #616]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b5c:	61fb      	str	r3, [r7, #28]
      break;
 8005b5e:	f000 beca 	b.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b62:	4b97      	ldr	r3, [pc, #604]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d036      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d840      	bhi.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d003      	beq.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d020      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005b84:	e039      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b86:	4b8e      	ldr	r3, [pc, #568]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d116      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b92:	4b8b      	ldr	r3, [pc, #556]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005b9e:	4b88      	ldr	r3, [pc, #544]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005baa:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	4a84      	ldr	r2, [pc, #528]	; (8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bbe:	e01f      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
      break;
 8005bc4:	e01c      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc6:	4b7e      	ldr	r3, [pc, #504]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d102      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005bd4:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005bd6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bd8:	e012      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
      break;
 8005bde:	e00f      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005be0:	4b77      	ldr	r3, [pc, #476]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bec:	d102      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005bee:	4b78      	ldr	r3, [pc, #480]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005bf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bf2:	e005      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
      break;
 8005bf8:	e002      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
      break;
 8005bfe:	bf00      	nop
    }

    switch(PeriphClk)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c06:	f000 8606 	beq.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c10:	f200 8673 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1a:	f000 8469 	beq.w	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c24:	f200 8669 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2e:	f000 8531 	beq.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c38:	f200 865f 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c42:	f000 8187 	beq.w	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c4c:	f200 8655 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c56:	f000 80cd 	beq.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c60:	f200 864b 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6a:	f000 8430 	beq.w	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	f200 8641 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7e:	f000 83e4 	beq.w	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	f200 8637 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	f000 80af 	beq.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9c:	f200 862d 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	f000 809d 	beq.w	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	f200 8623 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cba:	f000 808b 	beq.w	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc4:	f200 8619 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cce:	f000 8554 	beq.w	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	f200 860f 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce2:	f000 8500 	beq.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	f200 8605 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf6:	f000 84a1 	beq.w	800663c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	f200 85fb 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	f000 846c 	beq.w	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	f200 85f3 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d84c      	bhi.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 85ec 	beq.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	2b1f      	cmp	r3, #31
 8005d28:	f200 85e7 	bhi.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08006149 	.word	0x08006149
 8005d38:	080061b7 	.word	0x080061b7
 8005d3c:	080068fb 	.word	0x080068fb
 8005d40:	0800624b 	.word	0x0800624b
 8005d44:	080068fb 	.word	0x080068fb
 8005d48:	080068fb 	.word	0x080068fb
 8005d4c:	080068fb 	.word	0x080068fb
 8005d50:	080062c3 	.word	0x080062c3
 8005d54:	080068fb 	.word	0x080068fb
 8005d58:	080068fb 	.word	0x080068fb
 8005d5c:	080068fb 	.word	0x080068fb
 8005d60:	080068fb 	.word	0x080068fb
 8005d64:	080068fb 	.word	0x080068fb
 8005d68:	080068fb 	.word	0x080068fb
 8005d6c:	080068fb 	.word	0x080068fb
 8005d70:	08006347 	.word	0x08006347
 8005d74:	080068fb 	.word	0x080068fb
 8005d78:	080068fb 	.word	0x080068fb
 8005d7c:	080068fb 	.word	0x080068fb
 8005d80:	080068fb 	.word	0x080068fb
 8005d84:	080068fb 	.word	0x080068fb
 8005d88:	080068fb 	.word	0x080068fb
 8005d8c:	080068fb 	.word	0x080068fb
 8005d90:	080068fb 	.word	0x080068fb
 8005d94:	080068fb 	.word	0x080068fb
 8005d98:	080068fb 	.word	0x080068fb
 8005d9c:	080068fb 	.word	0x080068fb
 8005da0:	080068fb 	.word	0x080068fb
 8005da4:	080068fb 	.word	0x080068fb
 8005da8:	080068fb 	.word	0x080068fb
 8005dac:	080068fb 	.word	0x080068fb
 8005db0:	080063c9 	.word	0x080063c9
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	f000 83e8 	beq.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005dbc:	f000 bd9d 	b.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	0003d090 	.word	0x0003d090
 8005dc8:	08013190 	.word	0x08013190
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dda:	f000 ff83 	bl	8006ce4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005dde:	61f8      	str	r0, [r7, #28]
      break;
 8005de0:	f000 bd8e 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005dea:	f000 ff7b 	bl	8006ce4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005dee:	61f8      	str	r0, [r7, #28]
      break;
 8005df0:	f000 bd86 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005df4:	4b9a      	ldr	r3, [pc, #616]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e06:	d015      	beq.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e0e:	f200 8092 	bhi.w	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e18:	d029      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e20:	f200 8089 	bhi.w	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d07b      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e30:	d04a      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005e32:	e080      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e34:	4b8a      	ldr	r3, [pc, #552]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d17d      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e40:	4b87      	ldr	r3, [pc, #540]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005e4c:	4b84      	ldr	r3, [pc, #528]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	e005      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005e58:	4b81      	ldr	r3, [pc, #516]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6a:	61fb      	str	r3, [r7, #28]
          break;
 8005e6c:	e066      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e6e:	4b7c      	ldr	r3, [pc, #496]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e7a:	d162      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e7c:	4b78      	ldr	r3, [pc, #480]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e88:	d15b      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e8a:	4b75      	ldr	r3, [pc, #468]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e94:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	fb03 f202 	mul.w	r2, r3, r2
 8005e9e:	4b70      	ldr	r3, [pc, #448]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	091b      	lsrs	r3, r3, #4
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005eb0:	4b6b      	ldr	r3, [pc, #428]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	0d5b      	lsrs	r3, r3, #21
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	61fb      	str	r3, [r7, #28]
          break;
 8005ec6:	e03c      	b.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005ec8:	4b65      	ldr	r3, [pc, #404]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed4:	d138      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005ed6:	4b62      	ldr	r3, [pc, #392]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee2:	d131      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ee4:	4b5e      	ldr	r3, [pc, #376]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	fb03 f202 	mul.w	r2, r3, r2
 8005ef8:	4b59      	ldr	r3, [pc, #356]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	3301      	adds	r3, #1
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005f0a:	4b55      	ldr	r3, [pc, #340]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	0d5b      	lsrs	r3, r3, #21
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	3301      	adds	r3, #1
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	61fb      	str	r3, [r7, #28]
          break;
 8005f20:	e012      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005f22:	4b4f      	ldr	r3, [pc, #316]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d10e      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005f30:	4b4d      	ldr	r3, [pc, #308]	; (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f32:	61fb      	str	r3, [r7, #28]
          break;
 8005f34:	e00b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005f36:	bf00      	nop
 8005f38:	f000 bce2 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f3c:	bf00      	nop
 8005f3e:	f000 bcdf 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f42:	bf00      	nop
 8005f44:	f000 bcdc 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f48:	bf00      	nop
 8005f4a:	f000 bcd9 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f4e:	bf00      	nop
        break;
 8005f50:	f000 bcd6 	b.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005f54:	4b42      	ldr	r3, [pc, #264]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f62:	d13d      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f64:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f70:	f040 84c5 	bne.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005f74:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	f040 84bd 	bne.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f84:	4b36      	ldr	r3, [pc, #216]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	fb03 f202 	mul.w	r2, r3, r2
 8005f98:	4b31      	ldr	r3, [pc, #196]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005faa:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	0edb      	lsrs	r3, r3, #27
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005fbc:	4b28      	ldr	r3, [pc, #160]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005fc8:	2311      	movs	r3, #17
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e001      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005fce:	2307      	movs	r3, #7
 8005fd0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	61fb      	str	r3, [r7, #28]
      break;
 8005fdc:	f000 bc8f 	b.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005fe0:	4b1f      	ldr	r3, [pc, #124]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ff2:	d016      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ffa:	f200 809b 	bhi.w	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006004:	d032      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600c:	f200 8092 	bhi.w	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8084 	beq.w	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800601e:	d052      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006020:	e088      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006022:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	f040 8084 	bne.w	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	e005      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800604a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605a:	61fb      	str	r3, [r7, #28]
          break;
 800605c:	e06c      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000
 8006064:	08013190 	.word	0x08013190
 8006068:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800606c:	4ba5      	ldr	r3, [pc, #660]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006078:	d160      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800607a:	4ba2      	ldr	r3, [pc, #648]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006086:	d159      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006088:	4b9e      	ldr	r3, [pc, #632]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006092:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	fb03 f202 	mul.w	r2, r3, r2
 800609c:	4b99      	ldr	r3, [pc, #612]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	3301      	adds	r3, #1
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060ae:	4b95      	ldr	r3, [pc, #596]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	0d5b      	lsrs	r3, r3, #21
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	3301      	adds	r3, #1
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c2:	61fb      	str	r3, [r7, #28]
          break;
 80060c4:	e03a      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80060c6:	4b8f      	ldr	r3, [pc, #572]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d2:	d135      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80060d4:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e0:	d12e      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060e2:	4b88      	ldr	r3, [pc, #544]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	fb03 f202 	mul.w	r2, r3, r2
 80060f6:	4b83      	ldr	r3, [pc, #524]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	3301      	adds	r3, #1
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006108:	4b7e      	ldr	r3, [pc, #504]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	0d5b      	lsrs	r3, r3, #21
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	3301      	adds	r3, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	61fb      	str	r3, [r7, #28]
          break;
 800611e:	e00f      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006120:	4b78      	ldr	r3, [pc, #480]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800612e:	4b76      	ldr	r3, [pc, #472]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006130:	61fb      	str	r3, [r7, #28]
          break;
 8006132:	e007      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006134:	bf00      	nop
 8006136:	e3e2      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006138:	bf00      	nop
 800613a:	e3e0      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800613c:	bf00      	nop
 800613e:	e3de      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006140:	bf00      	nop
 8006142:	e3dc      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006144:	bf00      	nop
      break;
 8006146:	e3da      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006148:	4b6e      	ldr	r3, [pc, #440]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d827      	bhi.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006171 	.word	0x08006171
 8006164:	08006179 	.word	0x08006179
 8006168:	08006181 	.word	0x08006181
 800616c:	08006195 	.word	0x08006195
          frequency = HAL_RCC_GetPCLK2Freq();
 8006170:	f7ff f87c 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8006174:	61f8      	str	r0, [r7, #28]
          break;
 8006176:	e01d      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006178:	f7fe ffca 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800617c:	61f8      	str	r0, [r7, #28]
          break;
 800617e:	e019      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006180:	4b60      	ldr	r3, [pc, #384]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618c:	d10f      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800618e:	4b5f      	ldr	r3, [pc, #380]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006190:	61fb      	str	r3, [r7, #28]
          break;
 8006192:	e00c      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006194:	4b5b      	ldr	r3, [pc, #364]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d107      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	61fb      	str	r3, [r7, #28]
          break;
 80061a8:	e003      	b.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80061aa:	bf00      	nop
 80061ac:	e3a8      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061ae:	bf00      	nop
 80061b0:	e3a6      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061b2:	bf00      	nop
        break;
 80061b4:	e3a4      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061b6:	4b53      	ldr	r3, [pc, #332]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d83a      	bhi.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006205 	.word	0x08006205
 80061d4:	0800623f 	.word	0x0800623f
 80061d8:	0800623f 	.word	0x0800623f
 80061dc:	0800623f 	.word	0x0800623f
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	0800623f 	.word	0x0800623f
 80061e8:	0800623f 	.word	0x0800623f
 80061ec:	0800623f 	.word	0x0800623f
 80061f0:	08006215 	.word	0x08006215
 80061f4:	0800623f 	.word	0x0800623f
 80061f8:	0800623f 	.word	0x0800623f
 80061fc:	0800623f 	.word	0x0800623f
 8006200:	08006229 	.word	0x08006229
          frequency = HAL_RCC_GetPCLK1Freq();
 8006204:	f7ff f81c 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006208:	61f8      	str	r0, [r7, #28]
          break;
 800620a:	e01d      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800620c:	f7fe ff80 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006210:	61f8      	str	r0, [r7, #28]
          break;
 8006212:	e019      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006214:	4b3b      	ldr	r3, [pc, #236]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006220:	d10f      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006222:	4b3a      	ldr	r3, [pc, #232]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006224:	61fb      	str	r3, [r7, #28]
          break;
 8006226:	e00c      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006228:	4b36      	ldr	r3, [pc, #216]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d107      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623a:	61fb      	str	r3, [r7, #28]
          break;
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800623e:	bf00      	nop
 8006240:	e35e      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006242:	bf00      	nop
 8006244:	e35c      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006246:	bf00      	nop
        break;
 8006248:	e35a      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	d021      	beq.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d829      	bhi.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b20      	cmp	r3, #32
 8006266:	d011      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b20      	cmp	r3, #32
 800626c:	d823      	bhi.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b10      	cmp	r3, #16
 8006278:	d004      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800627a:	e01c      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800627c:	f7fe ffe0 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006280:	61f8      	str	r0, [r7, #28]
          break;
 8006282:	e01d      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006284:	f7fe ff44 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006288:	61f8      	str	r0, [r7, #28]
          break;
 800628a:	e019      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800628c:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006298:	d10f      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800629a:	4b1c      	ldr	r3, [pc, #112]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800629c:	61fb      	str	r3, [r7, #28]
          break;
 800629e:	e00c      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062a0:	4b18      	ldr	r3, [pc, #96]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d107      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	61fb      	str	r3, [r7, #28]
          break;
 80062b4:	e003      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80062b6:	bf00      	nop
 80062b8:	e322      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ba:	bf00      	nop
 80062bc:	e320      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062be:	bf00      	nop
        break;
 80062c0:	e31e      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062c2:	4b10      	ldr	r3, [pc, #64]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2bc0      	cmp	r3, #192	; 0xc0
 80062d2:	d027      	beq.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2bc0      	cmp	r3, #192	; 0xc0
 80062d8:	d82f      	bhi.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d017      	beq.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d829      	bhi.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d004      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80062f2:	e022      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fe ffa4 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80062f8:	61f8      	str	r0, [r7, #28]
          break;
 80062fa:	e023      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80062fc:	f7fe ff08 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006300:	61f8      	str	r0, [r7, #28]
          break;
 8006302:	e01f      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006304:	40021000 	.word	0x40021000
 8006308:	02dc6c00 	.word	0x02dc6c00
 800630c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006310:	4b9b      	ldr	r3, [pc, #620]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631c:	d10f      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800631e:	4b99      	ldr	r3, [pc, #612]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006320:	61fb      	str	r3, [r7, #28]
          break;
 8006322:	e00c      	b.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006324:	4b96      	ldr	r3, [pc, #600]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d107      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006336:	61fb      	str	r3, [r7, #28]
          break;
 8006338:	e003      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800633a:	bf00      	nop
 800633c:	e2e0      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800633e:	bf00      	nop
 8006340:	e2de      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006342:	bf00      	nop
        break;
 8006344:	e2dc      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006346:	4b8e      	ldr	r3, [pc, #568]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006358:	d025      	beq.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006360:	d82c      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d013      	beq.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d824      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637e:	d004      	beq.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006380:	e01c      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fe ff5d 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006386:	61f8      	str	r0, [r7, #28]
          break;
 8006388:	e01d      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800638a:	f7fe fec1 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800638e:	61f8      	str	r0, [r7, #28]
          break;
 8006390:	e019      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d10f      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80063a0:	4b78      	ldr	r3, [pc, #480]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80063a2:	61fb      	str	r3, [r7, #28]
          break;
 80063a4:	e00c      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063a6:	4b76      	ldr	r3, [pc, #472]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d107      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80063b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b8:	61fb      	str	r3, [r7, #28]
          break;
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80063bc:	bf00      	nop
 80063be:	e29f      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063c0:	bf00      	nop
 80063c2:	e29d      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063c4:	bf00      	nop
        break;
 80063c6:	e29b      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063c8:	4b6d      	ldr	r3, [pc, #436]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063da:	d025      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063e2:	d82c      	bhi.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ea:	d013      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f2:	d824      	bhi.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d004      	beq.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006402:	e01c      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006404:	f7fe ff1c 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006408:	61f8      	str	r0, [r7, #28]
          break;
 800640a:	e01d      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800640c:	f7fe fe80 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006410:	61f8      	str	r0, [r7, #28]
          break;
 8006412:	e019      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006414:	4b5a      	ldr	r3, [pc, #360]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d10f      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006422:	4b58      	ldr	r3, [pc, #352]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006424:	61fb      	str	r3, [r7, #28]
          break;
 8006426:	e00c      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006428:	4b55      	ldr	r3, [pc, #340]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d107      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643a:	61fb      	str	r3, [r7, #28]
          break;
 800643c:	e003      	b.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800643e:	bf00      	nop
 8006440:	e25e      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006442:	bf00      	nop
 8006444:	e25c      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006446:	bf00      	nop
        break;
 8006448:	e25a      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800644a:	4b4d      	ldr	r3, [pc, #308]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800645c:	d007      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006464:	d12f      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006466:	f7fe fe53 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800646a:	61f8      	str	r0, [r7, #28]
          break;
 800646c:	e02e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800646e:	4b44      	ldr	r3, [pc, #272]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800647a:	d126      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800647c:	4b40      	ldr	r3, [pc, #256]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d020      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006488:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	fb03 f202 	mul.w	r2, r3, r2
 800649c:	4b38      	ldr	r3, [pc, #224]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	3301      	adds	r3, #1
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80064ae:	4b34      	ldr	r3, [pc, #208]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	0e5b      	lsrs	r3, r3, #25
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	3301      	adds	r3, #1
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	61fb      	str	r3, [r7, #28]
          break;
 80064c4:	e001      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80064c6:	bf00      	nop
 80064c8:	e21a      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ca:	bf00      	nop
        break;
 80064cc:	e218      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80064e0:	f7fe fec4 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 80064e4:	61f8      	str	r0, [r7, #28]
        break;
 80064e6:	e20b      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80064e8:	f7fe fe12 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e207      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80064f0:	4b23      	ldr	r3, [pc, #140]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064f6:	f003 0318 	and.w	r3, r3, #24
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d010      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b10      	cmp	r3, #16
 8006506:	d834      	bhi.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d024      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006514:	e02d      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006516:	69b9      	ldr	r1, [r7, #24]
 8006518:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800651c:	f000 fbe2 	bl	8006ce4 <RCCEx_GetSAIxPeriphCLKFreq>
 8006520:	61f8      	str	r0, [r7, #28]
          break;
 8006522:	e02b      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006524:	4b16      	ldr	r3, [pc, #88]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d122      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	e005      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800654a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	4a0c      	ldr	r2, [pc, #48]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655a:	61fb      	str	r3, [r7, #28]
          break;
 800655c:	e00b      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800655e:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656a:	d106      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800656e:	61fb      	str	r3, [r7, #28]
          break;
 8006570:	e003      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006572:	bf00      	nop
 8006574:	e1c4      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006576:	bf00      	nop
 8006578:	e1c2      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800657a:	bf00      	nop
        break;
 800657c:	e1c0      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800657e:	bf00      	nop
 8006580:	40021000 	.word	0x40021000
 8006584:	00f42400 	.word	0x00f42400
 8006588:	08013190 	.word	0x08013190
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800658c:	4b96      	ldr	r3, [pc, #600]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	d013      	beq.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	d819      	bhi.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d004      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80065b6:	e011      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe fe42 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80065bc:	61f8      	str	r0, [r7, #28]
          break;
 80065be:	e010      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80065c0:	f7fe fda6 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80065c4:	61f8      	str	r0, [r7, #28]
          break;
 80065c6:	e00c      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c8:	4b87      	ldr	r3, [pc, #540]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d4:	d104      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80065d6:	4b85      	ldr	r3, [pc, #532]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80065d8:	61fb      	str	r3, [r7, #28]
          break;
 80065da:	e001      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80065dc:	bf00      	nop
 80065de:	e18f      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065e0:	bf00      	nop
        break;
 80065e2:	e18d      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80065e4:	4b80      	ldr	r3, [pc, #512]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f6:	d013      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fe:	d819      	bhi.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800660c:	d004      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800660e:	e011      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006610:	f7fe fe16 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006614:	61f8      	str	r0, [r7, #28]
          break;
 8006616:	e010      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006618:	f7fe fd7a 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800661c:	61f8      	str	r0, [r7, #28]
          break;
 800661e:	e00c      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006620:	4b71      	ldr	r3, [pc, #452]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d104      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800662e:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006630:	61fb      	str	r3, [r7, #28]
          break;
 8006632:	e001      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006634:	bf00      	nop
 8006636:	e163      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006638:	bf00      	nop
        break;
 800663a:	e161      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800663c:	4b6a      	ldr	r3, [pc, #424]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800664e:	d013      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006656:	d819      	bhi.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d004      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006666:	e011      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe fdea 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 800666c:	61f8      	str	r0, [r7, #28]
          break;
 800666e:	e010      	b.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006670:	f7fe fd4e 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006674:	61f8      	str	r0, [r7, #28]
          break;
 8006676:	e00c      	b.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006678:	4b5b      	ldr	r3, [pc, #364]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d104      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006686:	4b59      	ldr	r3, [pc, #356]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006688:	61fb      	str	r3, [r7, #28]
          break;
 800668a:	e001      	b.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800668c:	bf00      	nop
 800668e:	e137      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006690:	bf00      	nop
        break;
 8006692:	e135      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006694:	4b54      	ldr	r3, [pc, #336]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d011      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d818      	bhi.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d004      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80066b8:	e011      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7fe fdc1 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80066be:	61f8      	str	r0, [r7, #28]
          break;
 80066c0:	e010      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c2:	f7fe fd25 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80066c6:	61f8      	str	r0, [r7, #28]
          break;
 80066c8:	e00c      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066ca:	4b47      	ldr	r3, [pc, #284]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d6:	d104      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80066d8:	4b44      	ldr	r3, [pc, #272]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80066da:	61fb      	str	r3, [r7, #28]
          break;
 80066dc:	e001      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80066de:	bf00      	nop
 80066e0:	e10e      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066e2:	bf00      	nop
        break;
 80066e4:	e10c      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066e6:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066f8:	d02c      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006700:	d833      	bhi.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006708:	d01a      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006710:	d82b      	bhi.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800671e:	d004      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006720:	e023      	b.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006722:	f7fe fd8d 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8006726:	61f8      	str	r0, [r7, #28]
          break;
 8006728:	e026      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800672a:	4b2f      	ldr	r3, [pc, #188]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800672c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b02      	cmp	r3, #2
 8006736:	d11a      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006738:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800673c:	61fb      	str	r3, [r7, #28]
          break;
 800673e:	e016      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006740:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d111      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800674e:	4b27      	ldr	r3, [pc, #156]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006750:	61fb      	str	r3, [r7, #28]
          break;
 8006752:	e00e      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d109      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006766:	61fb      	str	r3, [r7, #28]
          break;
 8006768:	e005      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800676a:	bf00      	nop
 800676c:	e0c8      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800676e:	bf00      	nop
 8006770:	e0c6      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006772:	bf00      	nop
 8006774:	e0c4      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006776:	bf00      	nop
        break;
 8006778:	e0c2      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678c:	d030      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006794:	d837      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	d01a      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a4:	d82f      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b2:	d004      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80067b4:	e027      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b6:	f7fe fd43 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 80067ba:	61f8      	str	r0, [r7, #28]
          break;
 80067bc:	e02a      	b.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d11e      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80067cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067d0:	61fb      	str	r3, [r7, #28]
          break;
 80067d2:	e01a      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e0:	d115      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80067e2:	4b02      	ldr	r3, [pc, #8]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067e4:	61fb      	str	r3, [r7, #28]
          break;
 80067e6:	e012      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80067e8:	40021000 	.word	0x40021000
 80067ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067f0:	4b46      	ldr	r3, [pc, #280]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d109      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006802:	61fb      	str	r3, [r7, #28]
          break;
 8006804:	e005      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006806:	bf00      	nop
 8006808:	e07a      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800680a:	bf00      	nop
 800680c:	e078      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800680e:	bf00      	nop
 8006810:	e076      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006812:	bf00      	nop
        break;
 8006814:	e074      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006816:	4b3d      	ldr	r3, [pc, #244]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800681c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006828:	d02c      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006830:	d855      	bhi.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683e:	d004      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006840:	e04d      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe fc65 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8006846:	61f8      	str	r0, [r7, #28]
          break;
 8006848:	e04e      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800684a:	4b30      	ldr	r3, [pc, #192]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d145      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006856:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	e005      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006874:	0a1b      	lsrs	r3, r3, #8
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	4a25      	ldr	r2, [pc, #148]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	61fb      	str	r3, [r7, #28]
          break;
 8006882:	e02e      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006884:	4b21      	ldr	r3, [pc, #132]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006890:	d129      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689e:	d122      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	0a1b      	lsrs	r3, r3, #8
 80068a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	fb03 f202 	mul.w	r2, r3, r2
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	3301      	adds	r3, #1
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	0d5b      	lsrs	r3, r3, #21
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	3301      	adds	r3, #1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	61fb      	str	r3, [r7, #28]
          break;
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80068de:	bf00      	nop
 80068e0:	e00e      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068e2:	bf00      	nop
 80068e4:	e00c      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068e6:	bf00      	nop
        break;
 80068e8:	e00a      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ea:	bf00      	nop
 80068ec:	e008      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ee:	bf00      	nop
 80068f0:	e006      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068f2:	bf00      	nop
 80068f4:	e004      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068fe:	bf00      	nop
    }
  }

  return(frequency);
 8006900:	69fb      	ldr	r3, [r7, #28]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000
 8006910:	08013190 	.word	0x08013190

08006914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006922:	4b72      	ldr	r3, [pc, #456]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800692e:	4b6f      	ldr	r3, [pc, #444]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f003 0203 	and.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d103      	bne.n	8006946 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
       ||
 8006942:	2b00      	cmp	r3, #0
 8006944:	d142      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	e03f      	b.n	80069cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d018      	beq.n	8006986 <RCCEx_PLLSAI1_Config+0x72>
 8006954:	2b03      	cmp	r3, #3
 8006956:	d825      	bhi.n	80069a4 <RCCEx_PLLSAI1_Config+0x90>
 8006958:	2b01      	cmp	r3, #1
 800695a:	d002      	beq.n	8006962 <RCCEx_PLLSAI1_Config+0x4e>
 800695c:	2b02      	cmp	r3, #2
 800695e:	d009      	beq.n	8006974 <RCCEx_PLLSAI1_Config+0x60>
 8006960:	e020      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006962:	4b62      	ldr	r3, [pc, #392]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11d      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006972:	e01a      	b.n	80069aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006974:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697c:	2b00      	cmp	r3, #0
 800697e:	d116      	bne.n	80069ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006984:	e013      	b.n	80069ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006986:	4b59      	ldr	r3, [pc, #356]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006992:	4b56      	ldr	r3, [pc, #344]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069a2:	e006      	b.n	80069b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
      break;
 80069a8:	e004      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069aa:	bf00      	nop
 80069ac:	e002      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069ae:	bf00      	nop
 80069b0:	e000      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80069ba:	4b4c      	ldr	r3, [pc, #304]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f023 0203 	bic.w	r2, r3, #3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4949      	ldr	r1, [pc, #292]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 8086 	bne.w	8006ae0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069d4:	4b45      	ldr	r3, [pc, #276]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a44      	ldr	r2, [pc, #272]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80069da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e0:	f7fb fe96 	bl	8002710 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069e6:	e009      	b.n	80069fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e8:	f7fb fe92 	bl	8002710 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d902      	bls.n	80069fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
        break;
 80069fa:	e005      	b.n	8006a08 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069fc:	4b3b      	ldr	r3, [pc, #236]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ef      	bne.n	80069e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d168      	bne.n	8006ae0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d113      	bne.n	8006a3c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a14:	4b35      	ldr	r3, [pc, #212]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	4b35      	ldr	r3, [pc, #212]	; (8006af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6892      	ldr	r2, [r2, #8]
 8006a20:	0211      	lsls	r1, r2, #8
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68d2      	ldr	r2, [r2, #12]
 8006a26:	06d2      	lsls	r2, r2, #27
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6852      	ldr	r2, [r2, #4]
 8006a2e:	3a01      	subs	r2, #1
 8006a30:	0112      	lsls	r2, r2, #4
 8006a32:	430a      	orrs	r2, r1
 8006a34:	492d      	ldr	r1, [pc, #180]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	610b      	str	r3, [r1, #16]
 8006a3a:	e02d      	b.n	8006a98 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d115      	bne.n	8006a6e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a42:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6892      	ldr	r2, [r2, #8]
 8006a4e:	0211      	lsls	r1, r2, #8
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6912      	ldr	r2, [r2, #16]
 8006a54:	0852      	lsrs	r2, r2, #1
 8006a56:	3a01      	subs	r2, #1
 8006a58:	0552      	lsls	r2, r2, #21
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	3a01      	subs	r2, #1
 8006a62:	0112      	lsls	r2, r2, #4
 8006a64:	430a      	orrs	r2, r1
 8006a66:	4921      	ldr	r1, [pc, #132]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]
 8006a6c:	e014      	b.n	8006a98 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a6e:	4b1f      	ldr	r3, [pc, #124]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6892      	ldr	r2, [r2, #8]
 8006a7a:	0211      	lsls	r1, r2, #8
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6952      	ldr	r2, [r2, #20]
 8006a80:	0852      	lsrs	r2, r2, #1
 8006a82:	3a01      	subs	r2, #1
 8006a84:	0652      	lsls	r2, r2, #25
 8006a86:	4311      	orrs	r1, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6852      	ldr	r2, [r2, #4]
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	0112      	lsls	r2, r2, #4
 8006a90:	430a      	orrs	r2, r1
 8006a92:	4916      	ldr	r1, [pc, #88]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a13      	ldr	r2, [pc, #76]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa4:	f7fb fe34 	bl	8002710 <HAL_GetTick>
 8006aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aaa:	e009      	b.n	8006ac0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aac:	f7fb fe30 	bl	8002710 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d902      	bls.n	8006ac0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	73fb      	strb	r3, [r7, #15]
          break;
 8006abe:	e005      	b.n	8006acc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0ef      	beq.n	8006aac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ad2:	4b06      	ldr	r3, [pc, #24]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	4904      	ldr	r1, [pc, #16]	; (8006aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000
 8006af0:	07ff800f 	.word	0x07ff800f
 8006af4:	ff9f800f 	.word	0xff9f800f
 8006af8:	f9ff800f 	.word	0xf9ff800f

08006afc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b0a:	4b72      	ldr	r3, [pc, #456]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b16:	4b6f      	ldr	r3, [pc, #444]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f003 0203 	and.w	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d103      	bne.n	8006b2e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
       ||
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d142      	bne.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	e03f      	b.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d018      	beq.n	8006b6e <RCCEx_PLLSAI2_Config+0x72>
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d825      	bhi.n	8006b8c <RCCEx_PLLSAI2_Config+0x90>
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d002      	beq.n	8006b4a <RCCEx_PLLSAI2_Config+0x4e>
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d009      	beq.n	8006b5c <RCCEx_PLLSAI2_Config+0x60>
 8006b48:	e020      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b4a:	4b62      	ldr	r3, [pc, #392]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d11d      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b5a:	e01a      	b.n	8006b92 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b5c:	4b5d      	ldr	r3, [pc, #372]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d116      	bne.n	8006b96 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b6c:	e013      	b.n	8006b96 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b6e:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b7a:	4b56      	ldr	r3, [pc, #344]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b8a:	e006      	b.n	8006b9a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	e004      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b92:	bf00      	nop
 8006b94:	e002      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b96:	bf00      	nop
 8006b98:	e000      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f023 0203 	bic.w	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4949      	ldr	r1, [pc, #292]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8086 	bne.w	8006cc8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bbc:	4b45      	ldr	r3, [pc, #276]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a44      	ldr	r2, [pc, #272]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fb fda2 	bl	8002710 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bce:	e009      	b.n	8006be4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bd0:	f7fb fd9e 	bl	8002710 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d902      	bls.n	8006be4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	73fb      	strb	r3, [r7, #15]
        break;
 8006be2:	e005      	b.n	8006bf0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006be4:	4b3b      	ldr	r3, [pc, #236]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ef      	bne.n	8006bd0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d168      	bne.n	8006cc8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d113      	bne.n	8006c24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	4b35      	ldr	r3, [pc, #212]	; (8006cd8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6892      	ldr	r2, [r2, #8]
 8006c08:	0211      	lsls	r1, r2, #8
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68d2      	ldr	r2, [r2, #12]
 8006c0e:	06d2      	lsls	r2, r2, #27
 8006c10:	4311      	orrs	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6852      	ldr	r2, [r2, #4]
 8006c16:	3a01      	subs	r2, #1
 8006c18:	0112      	lsls	r2, r2, #4
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	492d      	ldr	r1, [pc, #180]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	614b      	str	r3, [r1, #20]
 8006c22:	e02d      	b.n	8006c80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d115      	bne.n	8006c56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c2a:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6892      	ldr	r2, [r2, #8]
 8006c36:	0211      	lsls	r1, r2, #8
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6912      	ldr	r2, [r2, #16]
 8006c3c:	0852      	lsrs	r2, r2, #1
 8006c3e:	3a01      	subs	r2, #1
 8006c40:	0552      	lsls	r2, r2, #21
 8006c42:	4311      	orrs	r1, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6852      	ldr	r2, [r2, #4]
 8006c48:	3a01      	subs	r2, #1
 8006c4a:	0112      	lsls	r2, r2, #4
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	4921      	ldr	r1, [pc, #132]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	614b      	str	r3, [r1, #20]
 8006c54:	e014      	b.n	8006c80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6892      	ldr	r2, [r2, #8]
 8006c62:	0211      	lsls	r1, r2, #8
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6952      	ldr	r2, [r2, #20]
 8006c68:	0852      	lsrs	r2, r2, #1
 8006c6a:	3a01      	subs	r2, #1
 8006c6c:	0652      	lsls	r2, r2, #25
 8006c6e:	4311      	orrs	r1, r2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6852      	ldr	r2, [r2, #4]
 8006c74:	3a01      	subs	r2, #1
 8006c76:	0112      	lsls	r2, r2, #4
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	4916      	ldr	r1, [pc, #88]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8c:	f7fb fd40 	bl	8002710 <HAL_GetTick>
 8006c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c92:	e009      	b.n	8006ca8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c94:	f7fb fd3c 	bl	8002710 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d902      	bls.n	8006ca8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8006ca6:	e005      	b.n	8006cb4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ef      	beq.n	8006c94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4904      	ldr	r1, [pc, #16]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	07ff800f 	.word	0x07ff800f
 8006cdc:	ff9f800f 	.word	0xff9f800f
 8006ce0:	f9ff800f 	.word	0xf9ff800f

08006ce4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b089      	sub	sp, #36	; 0x24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d00:	d10b      	bne.n	8006d1a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d02:	4b7e      	ldr	r3, [pc, #504]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d0c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b60      	cmp	r3, #96	; 0x60
 8006d12:	d112      	bne.n	8006d3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d14:	4b7a      	ldr	r3, [pc, #488]	; (8006f00 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e00f      	b.n	8006d3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d10b      	bne.n	8006d3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d22:	4b76      	ldr	r3, [pc, #472]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d2c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d101      	bne.n	8006d3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006d36:	4b72      	ldr	r3, [pc, #456]	; (8006f00 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d38:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 80d6 	bne.w	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d003      	beq.n	8006d54 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d13b      	bne.n	8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006d54:	4b69      	ldr	r3, [pc, #420]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d60:	f040 80c4 	bne.w	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006d64:	4b65      	ldr	r3, [pc, #404]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80bd 	beq.w	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d72:	4b62      	ldr	r3, [pc, #392]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	091b      	lsrs	r3, r3, #4
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d84:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006d86:	4b5d      	ldr	r3, [pc, #372]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d90:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006d92:	4b5a      	ldr	r3, [pc, #360]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	0edb      	lsrs	r3, r3, #27
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006da4:	4b55      	ldr	r3, [pc, #340]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006db0:	2311      	movs	r3, #17
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e001      	b.n	8006dba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006db6:	2307      	movs	r3, #7
 8006db8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	fb03 f202 	mul.w	r2, r3, r2
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006dca:	e08f      	b.n	8006eec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d13a      	bne.n	8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006dd2:	4b4a      	ldr	r3, [pc, #296]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dde:	f040 8086 	bne.w	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006de2:	4b46      	ldr	r3, [pc, #280]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d07f      	beq.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006dee:	4b43      	ldr	r3, [pc, #268]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	3301      	adds	r3, #1
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e00:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e02:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	0edb      	lsrs	r3, r3, #27
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006e2c:	2311      	movs	r3, #17
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e001      	b.n	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006e32:	2307      	movs	r3, #7
 8006e34:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	fb03 f202 	mul.w	r2, r3, r2
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e052      	b.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b80      	cmp	r3, #128	; 0x80
 8006e4c:	d003      	beq.n	8006e56 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e54:	d109      	bne.n	8006e6a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d144      	bne.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006e66:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e68:	e041      	b.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d003      	beq.n	8006e78 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	d13a      	bne.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006e78:	4b20      	ldr	r3, [pc, #128]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e84:	d133      	bne.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006e86:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d02d      	beq.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006e92:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006eb2:	4b12      	ldr	r3, [pc, #72]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	0edb      	lsrs	r3, r3, #27
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006ed0:	2311      	movs	r3, #17
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e001      	b.n	8006eda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006ed6:	2307      	movs	r3, #7
 8006ed8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	fb03 f202 	mul.w	r2, r3, r2
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	e000      	b.n	8006eee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006eec:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006eee:	69fb      	ldr	r3, [r7, #28]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3724      	adds	r7, #36	; 0x24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40021000 	.word	0x40021000
 8006f00:	001fff68 	.word	0x001fff68
 8006f04:	00f42400 	.word	0x00f42400

08006f08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e078      	b.n	800700c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fb f911 	bl	8002154 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2203      	movs	r2, #3
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f86a 	bl	8007014 <HAL_SD_InitCard>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e060      	b.n	800700c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fdcd 	bl	8007af0 <HAL_SD_GetCardStatus>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e055      	b.n	800700c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006f60:	7e3b      	ldrb	r3, [r7, #24]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006f66:	7e7b      	ldrb	r3, [r7, #25]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d10a      	bne.n	8006f8a <HAL_SD_Init+0x82>
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <HAL_SD_Init+0x78>
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f88:	e00b      	b.n	8006fa2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d104      	bne.n	8006f9c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f9a:	e002      	b.n	8006fa2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fe83 	bl	8007cb4 <HAL_SD_ConfigWideBusOperation>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e029      	b.n	800700c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006fb8:	f7fb fbaa 	bl	8002710 <HAL_GetTick>
 8006fbc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006fbe:	e014      	b.n	8006fea <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006fc0:	f7fb fba6 	bl	8002710 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fce:	d10c      	bne.n	8006fea <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e010      	b.n	800700c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ff76 	bl	8007edc <HAL_SD_GetCardState>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d1e4      	bne.n	8006fc0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b08e      	sub	sp, #56	; 0x38
 8007018:	af04      	add	r7, sp, #16
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800701c:	2300      	movs	r3, #0
 800701e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800702c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007030:	f7fe fd4e 	bl	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007034:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e079      	b.n	8007144 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	4a3d      	ldr	r2, [pc, #244]	; (800714c <HAL_SD_InitCard+0x138>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	091b      	lsrs	r3, r3, #4
 800705c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d107      	bne.n	800707c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0210 	orr.w	r2, r2, #16
 800707a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681d      	ldr	r5, [r3, #0]
 8007080:	466c      	mov	r4, sp
 8007082:	f107 0314 	add.w	r3, r7, #20
 8007086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800708a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800708e:	f107 0308 	add.w	r3, r7, #8
 8007092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007094:	4628      	mov	r0, r5
 8007096:	f004 fb27 	bl	800b6e8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f004 fb6a 	bl	800b778 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <HAL_SD_InitCard+0x13c>)
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	3301      	adds	r3, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fb fb34 	bl	8002728 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 ffeb 	bl	800809c <SD_PowerON>
 80070c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e02e      	b.n	8007144 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 ff18 	bl	8007f1c <SD_InitCard>
 80070ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e01b      	b.n	8007144 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007114:	4618      	mov	r0, r3
 8007116:	f004 fbc5 	bl	800b8a4 <SDMMC_CmdBlockLength>
 800711a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00f      	beq.n	8007142 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a0b      	ldr	r2, [pc, #44]	; (8007154 <HAL_SD_InitCard+0x140>)
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3728      	adds	r7, #40	; 0x28
 8007148:	46bd      	mov	sp, r7
 800714a:	bdb0      	pop	{r4, r5, r7, pc}
 800714c:	014f8b59 	.word	0x014f8b59
 8007150:	00012110 	.word	0x00012110
 8007154:	1fe00fff 	.word	0x1fe00fff

08007158 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	; 0x48
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007166:	f7fb fad3 	bl	8002710 <HAL_GetTick>
 800716a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d107      	bne.n	800718a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e170      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	f040 8163 	bne.w	800745e <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800719e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d907      	bls.n	80071bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e157      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d002      	beq.n	80071da <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	025b      	lsls	r3, r3, #9
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071de:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	025b      	lsls	r3, r3, #9
 80071e4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80071e6:	2390      	movs	r3, #144	; 0x90
 80071e8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071ea:	2302      	movs	r3, #2
 80071ec:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f107 0214 	add.w	r2, r7, #20
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f004 fb23 	bl	800b84c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007214:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d90a      	bls.n	8007232 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007228:	4618      	mov	r0, r3
 800722a:	f004 fb81 	bl	800b930 <SDMMC_CmdReadMultiBlock>
 800722e:	6478      	str	r0, [r7, #68]	; 0x44
 8007230:	e009      	b.n	8007246 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800723e:	4618      	mov	r0, r3
 8007240:	f004 fb53 	bl	800b8ea <SDMMC_CmdReadSingleBlock>
 8007244:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007248:	2b00      	cmp	r3, #0
 800724a:	d012      	beq.n	8007272 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a88      	ldr	r2, [pc, #544]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725a:	431a      	orrs	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0fc      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007276:	e061      	b.n	800733c <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d03c      	beq.n	8007300 <HAL_SD_ReadBlocks+0x1a8>
 8007286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d039      	beq.n	8007300 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800728c:	2300      	movs	r3, #0
 800728e:	643b      	str	r3, [r7, #64]	; 0x40
 8007290:	e033      	b.n	80072fa <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f004 fa50 	bl	800b73c <SDMMC_ReadFIFO>
 800729c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	3301      	adds	r3, #1
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	3b01      	subs	r3, #1
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	3301      	adds	r3, #1
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	3b01      	subs	r3, #1
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	3301      	adds	r3, #1
 80072d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072da:	3b01      	subs	r3, #1
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ea:	3301      	adds	r3, #1
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	3b01      	subs	r3, #1
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	3301      	adds	r3, #1
 80072f8:	643b      	str	r3, [r7, #64]	; 0x40
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d9c8      	bls.n	8007292 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007300:	f7fb fa06 	bl	8002710 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800730c:	429a      	cmp	r2, r3
 800730e:	d902      	bls.n	8007316 <HAL_SD_ReadBlocks+0x1be>
 8007310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007312:	2b00      	cmp	r3, #0
 8007314:	d112      	bne.n	800733c <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a56      	ldr	r2, [pc, #344]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e097      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007346:	2b00      	cmp	r3, #0
 8007348:	d096      	beq.n	8007278 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007358:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d022      	beq.n	80073ae <HAL_SD_ReadBlocks+0x256>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d91f      	bls.n	80073ae <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	2b03      	cmp	r3, #3
 8007374:	d01b      	beq.n	80073ae <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f004 fb42 	bl	800ba04 <SDMMC_CmdStopTransfer>
 8007380:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007384:	2b00      	cmp	r3, #0
 8007386:	d012      	beq.n	80073ae <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a39      	ldr	r2, [pc, #228]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007396:	431a      	orrs	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e05e      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2c      	ldr	r2, [pc, #176]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	f043 0208 	orr.w	r2, r3, #8
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e044      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d012      	beq.n	8007416 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	f043 0202 	orr.w	r2, r3, #2
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e02a      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a12      	ldr	r2, [pc, #72]	; (8007474 <HAL_SD_ReadBlocks+0x31c>)
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e010      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <HAL_SD_ReadBlocks+0x320>)
 8007450:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e006      	b.n	800746c <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3748      	adds	r7, #72	; 0x48
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	1fe00fff 	.word	0x1fe00fff
 8007478:	18000f3a 	.word	0x18000f3a

0800747c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b092      	sub	sp, #72	; 0x48
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800748a:	f7fb f941 	bl	8002710 <HAL_GetTick>
 800748e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d107      	bne.n	80074ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e174      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	f040 8167 	bne.w	800778a <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80074c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	441a      	add	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d907      	bls.n	80074e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e15b      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2203      	movs	r2, #3
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2200      	movs	r2, #0
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d002      	beq.n	80074fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	025b      	lsls	r3, r3, #9
 80074fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007502:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	025b      	lsls	r3, r3, #9
 8007508:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800750a:	2390      	movs	r3, #144	; 0x90
 800750c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007512:	2300      	movs	r3, #0
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007516:	2300      	movs	r3, #0
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f107 0218 	add.w	r2, r7, #24
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f004 f991 	bl	800b84c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007538:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d90a      	bls.n	8007556 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800754c:	4618      	mov	r0, r3
 800754e:	f004 fa35 	bl	800b9bc <SDMMC_CmdWriteMultiBlock>
 8007552:	6478      	str	r0, [r7, #68]	; 0x44
 8007554:	e009      	b.n	800756a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2210      	movs	r2, #16
 800755a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007562:	4618      	mov	r0, r3
 8007564:	f004 fa07 	bl	800b976 <SDMMC_CmdWriteSingleBlock>
 8007568:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	2b00      	cmp	r3, #0
 800756e:	d012      	beq.n	8007596 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a8a      	ldr	r2, [pc, #552]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757e:	431a      	orrs	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e100      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800759a:	e065      	b.n	8007668 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d040      	beq.n	800762c <HAL_SD_WriteBlocks+0x1b0>
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d03d      	beq.n	800762c <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80075b0:	2300      	movs	r3, #0
 80075b2:	643b      	str	r3, [r7, #64]	; 0x40
 80075b4:	e037      	b.n	8007626 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	3301      	adds	r3, #1
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	3b01      	subs	r3, #1
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	021a      	lsls	r2, r3, #8
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	3301      	adds	r3, #1
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075dc:	3b01      	subs	r3, #1
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ee:	3301      	adds	r3, #1
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f4:	3b01      	subs	r3, #1
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	061a      	lsls	r2, r3, #24
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	3301      	adds	r3, #1
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760c:	3b01      	subs	r3, #1
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f107 0214 	add.w	r2, r7, #20
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f004 f89b 	bl	800b756 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007622:	3301      	adds	r3, #1
 8007624:	643b      	str	r3, [r7, #64]	; 0x40
 8007626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007628:	2b07      	cmp	r3, #7
 800762a:	d9c4      	bls.n	80075b6 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800762c:	f7fb f870 	bl	8002710 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007638:	429a      	cmp	r2, r3
 800763a:	d902      	bls.n	8007642 <HAL_SD_WriteBlocks+0x1c6>
 800763c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763e:	2b00      	cmp	r3, #0
 8007640:	d112      	bne.n	8007668 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a56      	ldr	r2, [pc, #344]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e097      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007672:	2b00      	cmp	r3, #0
 8007674:	d092      	beq.n	800759c <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007684:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d022      	beq.n	80076da <HAL_SD_WriteBlocks+0x25e>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d91f      	bls.n	80076da <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d01b      	beq.n	80076da <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f004 f9ac 	bl	800ba04 <SDMMC_CmdStopTransfer>
 80076ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d012      	beq.n	80076da <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a39      	ldr	r2, [pc, #228]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e05e      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d012      	beq.n	800770e <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	f043 0208 	orr.w	r2, r3, #8
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e044      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d012      	beq.n	8007742 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	f043 0202 	orr.w	r2, r3, #2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e02a      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a12      	ldr	r2, [pc, #72]	; (80077a0 <HAL_SD_WriteBlocks+0x324>)
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	f043 0210 	orr.w	r2, r3, #16
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e010      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a0a      	ldr	r2, [pc, #40]	; (80077a4 <HAL_SD_WriteBlocks+0x328>)
 800777c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e006      	b.n	8007798 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3748      	adds	r7, #72	; 0x48
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	1fe00fff 	.word	0x1fe00fff
 80077a4:	18000f3a 	.word	0x18000f3a

080077a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b6:	0f9b      	lsrs	r3, r3, #30
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c2:	0e9b      	lsrs	r3, r3, #26
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	0e1b      	lsrs	r3, r3, #24
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007808:	0d1b      	lsrs	r3, r3, #20
 800780a:	b29a      	uxth	r2, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007814:	0c1b      	lsrs	r3, r3, #16
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	b2da      	uxtb	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007826:	0bdb      	lsrs	r3, r3, #15
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007838:	0b9b      	lsrs	r3, r3, #14
 800783a:	b2db      	uxtb	r3, r3
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800784a:	0b5b      	lsrs	r3, r3, #13
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	b2da      	uxtb	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785c:	0b1b      	lsrs	r3, r3, #12
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2200      	movs	r2, #0
 800786e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d163      	bne.n	8007940 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787c:	009a      	lsls	r2, r3, #2
 800787e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007882:	4013      	ands	r3, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007888:	0f92      	lsrs	r2, r2, #30
 800788a:	431a      	orrs	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007894:	0edb      	lsrs	r3, r3, #27
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	b2da      	uxtb	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a6:	0e1b      	lsrs	r3, r3, #24
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b8:	0d5b      	lsrs	r3, r3, #21
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ca:	0c9b      	lsrs	r3, r3, #18
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078dc:	0bdb      	lsrs	r3, r3, #15
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	7e1b      	ldrb	r3, [r3, #24]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	3302      	adds	r3, #2
 8007900:	2201      	movs	r2, #1
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800790a:	fb03 f202 	mul.w	r2, r3, r2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	7a1b      	ldrb	r3, [r3, #8]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800792c:	0a52      	lsrs	r2, r2, #9
 800792e:	fb03 f202 	mul.w	r2, r3, r2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800793c:	659a      	str	r2, [r3, #88]	; 0x58
 800793e:	e031      	b.n	80079a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d11d      	bne.n	8007984 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	431a      	orrs	r2, r3
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	3301      	adds	r3, #1
 8007964:	029a      	lsls	r2, r3, #10
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007978:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	659a      	str	r2, [r3, #88]	; 0x58
 8007982:	e00f      	b.n	80079a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a58      	ldr	r2, [pc, #352]	; (8007aec <HAL_SD_GetCardCSD+0x344>)
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e09d      	b.n	8007ae0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a8:	0b9b      	lsrs	r3, r3, #14
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ba:	09db      	lsrs	r3, r3, #7
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079dc:	0fdb      	lsrs	r3, r3, #31
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e8:	0f5b      	lsrs	r3, r3, #29
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fa:	0e9b      	lsrs	r3, r3, #26
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0c:	0d9b      	lsrs	r3, r3, #22
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1e:	0d5b      	lsrs	r3, r3, #21
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3a:	0c1b      	lsrs	r3, r3, #16
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4e:	0bdb      	lsrs	r3, r3, #15
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a62:	0b9b      	lsrs	r3, r3, #14
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	0b5b      	lsrs	r3, r3, #13
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8a:	0b1b      	lsrs	r3, r3, #12
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9e:	0a9b      	lsrs	r3, r3, #10
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	1fe00fff 	.word	0x1fe00fff

08007af0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b094      	sub	sp, #80	; 0x50
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007b00:	f107 0308 	add.w	r3, r7, #8
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fbd4 	bl	80082b4 <SD_SendSDStatus>
 8007b0c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d011      	beq.n	8007b38 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a4f      	ldr	r2, [pc, #316]	; (8007c58 <HAL_SD_GetCardStatus+0x168>)
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007b36:	e070      	b.n	8007c1a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	0e1b      	lsrs	r3, r3, #24
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	061a      	lsls	r2, r3, #24
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	0a1b      	lsrs	r3, r3, #8
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	0d1b      	lsrs	r3, r3, #20
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	0a9b      	lsrs	r3, r3, #10
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	0e1b      	lsrs	r3, r3, #24
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c22:	4618      	mov	r0, r3
 8007c24:	f003 fe3e 	bl	800b8a4 <SDMMC_CmdBlockLength>
 8007c28:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a08      	ldr	r2, [pc, #32]	; (8007c58 <HAL_SD_GetCardStatus+0x168>)
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3750      	adds	r7, #80	; 0x50
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	1fe00fff 	.word	0x1fe00fff

08007c5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007cb4:	b5b0      	push	{r4, r5, r7, lr}
 8007cb6:	b090      	sub	sp, #64	; 0x40
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d02e      	beq.n	8007d32 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cda:	d106      	bne.n	8007cea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8007ce8:	e029      	b.n	8007d3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf0:	d10a      	bne.n	8007d08 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fbd6 	bl	80084a4 <SD_WideBus_Enable>
 8007cf8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
 8007d06:	e01a      	b.n	8007d3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc13 	bl	800853a <SD_WideBus_Disable>
 8007d14:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
 8007d22:	e00c      	b.n	8007d3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8007d30:	e005      	b.n	8007d3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a60      	ldr	r2, [pc, #384]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d54:	e097      	b.n	8007e86 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007d56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d5a:	f7fd feb9 	bl	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d5e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8086 	beq.w	8007e74 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695a      	ldr	r2, [r3, #20]
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	4952      	ldr	r1, [pc, #328]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007d86:	fba1 1303 	umull	r1, r3, r1, r3
 8007d8a:	0e1b      	lsrs	r3, r3, #24
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d303      	bcc.n	8007d98 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	e05a      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da0:	d103      	bne.n	8007daa <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e051      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	d126      	bne.n	8007e02 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10e      	bne.n	8007dda <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	4a45      	ldr	r2, [pc, #276]	; (8007ed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d906      	bls.n	8007dd2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	4a42      	ldr	r2, [pc, #264]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	0e5b      	lsrs	r3, r3, #25
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e03d      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e039      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	4a3b      	ldr	r2, [pc, #236]	; (8007ed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d906      	bls.n	8007dfa <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	4a38      	ldr	r2, [pc, #224]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	0e5b      	lsrs	r3, r3, #25
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	e029      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e025      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10e      	bne.n	8007e28 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	4a32      	ldr	r2, [pc, #200]	; (8007ed8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d906      	bls.n	8007e20 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	4a2e      	ldr	r2, [pc, #184]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	0e1b      	lsrs	r3, r3, #24
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e016      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e012      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e34:	4a28      	ldr	r2, [pc, #160]	; (8007ed8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d906      	bls.n	8007e48 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	e002      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681d      	ldr	r5, [r3, #0]
 8007e58:	466c      	mov	r4, sp
 8007e5a:	f107 0318 	add.w	r3, r7, #24
 8007e5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f003 fc3b 	bl	800b6e8 <SDMMC_Init>
 8007e72:	e008      	b.n	8007e86 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f003 fd08 	bl	800b8a4 <SDMMC_CmdBlockLength>
 8007e94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3730      	adds	r7, #48	; 0x30
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	1fe00fff 	.word	0x1fe00fff
 8007ed0:	55e63b89 	.word	0x55e63b89
 8007ed4:	02faf080 	.word	0x02faf080
 8007ed8:	017d7840 	.word	0x017d7840

08007edc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fab0 	bl	8008454 <SD_SendStatus>
 8007ef4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	0a5b      	lsrs	r3, r3, #9
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f12:	693b      	ldr	r3, [r7, #16]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f1c:	b5b0      	push	{r4, r5, r7, lr}
 8007f1e:	b090      	sub	sp, #64	; 0x40
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f24:	2301      	movs	r3, #1
 8007f26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f003 fc35 	bl	800b79c <SDMMC_GetPowerState>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f3c:	e0a9      	b.n	8008092 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d02e      	beq.n	8007fa4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f003 fe7a 	bl	800bc44 <SDMMC_CmdSendCID>
 8007f50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <SD_InitCard+0x40>
    {
      return errorstate;
 8007f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5a:	e09a      	b.n	8008092 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f003 fc5f 	bl	800b826 <SDMMC_GetResponse>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2104      	movs	r1, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f003 fc56 	bl	800b826 <SDMMC_GetResponse>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2108      	movs	r1, #8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f003 fc4d 	bl	800b826 <SDMMC_GetResponse>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	210c      	movs	r1, #12
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f003 fc44 	bl	800b826 <SDMMC_GetResponse>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d00d      	beq.n	8007fc8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f107 020e 	add.w	r2, r7, #14
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f003 fe83 	bl	800bcc2 <SDMMC_CmdSetRelAdd>
 8007fbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <SD_InitCard+0xac>
    {
      return errorstate;
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	e064      	b.n	8008092 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d036      	beq.n	800803e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f003 fe4c 	bl	800bc82 <SDMMC_CmdSendCSD>
 8007fea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <SD_InitCard+0xda>
    {
      return errorstate;
 8007ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff4:	e04d      	b.n	8008092 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f003 fc12 	bl	800b826 <SDMMC_GetResponse>
 8008002:	4602      	mov	r2, r0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2104      	movs	r1, #4
 800800e:	4618      	mov	r0, r3
 8008010:	f003 fc09 	bl	800b826 <SDMMC_GetResponse>
 8008014:	4602      	mov	r2, r0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2108      	movs	r1, #8
 8008020:	4618      	mov	r0, r3
 8008022:	f003 fc00 	bl	800b826 <SDMMC_GetResponse>
 8008026:	4602      	mov	r2, r0
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	210c      	movs	r1, #12
 8008032:	4618      	mov	r0, r3
 8008034:	f003 fbf7 	bl	800b826 <SDMMC_GetResponse>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2104      	movs	r1, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f003 fbee 	bl	800b826 <SDMMC_GetResponse>
 800804a:	4603      	mov	r3, r0
 800804c:	0d1a      	lsrs	r2, r3, #20
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008052:	f107 0310 	add.w	r3, r7, #16
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fba5 	bl	80077a8 <HAL_SD_GetCardCSD>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008068:	e013      	b.n	8008092 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	2200      	movs	r2, #0
 8008076:	461c      	mov	r4, r3
 8008078:	4615      	mov	r5, r2
 800807a:	4622      	mov	r2, r4
 800807c:	462b      	mov	r3, r5
 800807e:	4608      	mov	r0, r1
 8008080:	f003 fcf6 	bl	800ba70 <SDMMC_CmdSelDesel>
 8008084:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <SD_InitCard+0x174>
  {
    return errorstate;
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	e000      	b.n	8008092 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3740      	adds	r7, #64	; 0x40
 8008096:	46bd      	mov	sp, r7
 8008098:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800809c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80080b0:	f7fa fb2e 	bl	8002710 <HAL_GetTick>
 80080b4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f003 fcfc 	bl	800bab8 <SDMMC_CmdGoIdleState>
 80080c0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <SD_PowerON+0x30>
  {
    return errorstate;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	e0ed      	b.n	80082a8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f003 fd0f 	bl	800baf4 <SDMMC_CmdOperCond>
 80080d6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f003 fce5 	bl	800bab8 <SDMMC_CmdGoIdleState>
 80080ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <SD_PowerON+0x64>
    {
      return errorstate;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	e0d6      	b.n	80082a8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	2b01      	cmp	r3, #1
 8008106:	d137      	bne.n	8008178 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f003 fd10 	bl	800bb34 <SDMMC_CmdAppCommand>
 8008114:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d02d      	beq.n	8008178 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800811c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008120:	e0c2      	b.n	80082a8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f003 fd03 	bl	800bb34 <SDMMC_CmdAppCommand>
 800812e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <SD_PowerON+0x9e>
    {
      return errorstate;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	e0b6      	b.n	80082a8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	495c      	ldr	r1, [pc, #368]	; (80082b0 <SD_PowerON+0x214>)
 8008140:	4618      	mov	r0, r3
 8008142:	f003 fd1a 	bl	800bb7a <SDMMC_CmdAppOperCommand>
 8008146:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800814e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008152:	e0a9      	b.n	80082a8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f003 fb63 	bl	800b826 <SDMMC_GetResponse>
 8008160:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	0fdb      	lsrs	r3, r3, #31
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <SD_PowerON+0xd2>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <SD_PowerON+0xd4>
 800816e:	2300      	movs	r3, #0
 8008170:	61bb      	str	r3, [r7, #24]

    count++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800817e:	4293      	cmp	r3, r2
 8008180:	d802      	bhi.n	8008188 <SD_PowerON+0xec>
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0cc      	beq.n	8008122 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800818e:	4293      	cmp	r3, r2
 8008190:	d902      	bls.n	8008198 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008196:	e087      	b.n	80082a8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d07e      	beq.n	80082a0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d17a      	bne.n	80082a6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d075      	beq.n	80082a6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0208 	orr.w	r2, r2, #8
 80081d0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f003 fdda 	bl	800bd90 <SDMMC_CmdVoltageSwitch>
 80081dc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00c      	beq.n	80081fe <SD_PowerON+0x162>
        {
          return errorstate;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	e05f      	b.n	80082a8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081e8:	f7fa fa92 	bl	8002710 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f6:	d102      	bne.n	80081fe <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80081f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081fc:	e054      	b.n	80082a8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800820c:	d1ec      	bne.n	80081e8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008216:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008226:	d002      	beq.n	800822e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008228:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800822c:	e03c      	b.n	80082a8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800822e:	2001      	movs	r0, #1
 8008230:	f000 fa9e 	bl	8008770 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0204 	orr.w	r2, r2, #4
 8008242:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008244:	e00a      	b.n	800825c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008246:	f7fa fa63 	bl	8002710 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008254:	d102      	bne.n	800825c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800825a:	e025      	b.n	80082a8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800826a:	d1ec      	bne.n	8008246 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008284:	d102      	bne.n	800828c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800828a:	e00d      	b.n	80082a8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2213      	movs	r2, #19
 8008292:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
 800829e:	e002      	b.n	80082a6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	c1100000 	.word	0xc1100000

080082b4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08c      	sub	sp, #48	; 0x30
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082be:	f7fa fa27 	bl	8002710 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f003 faa9 	bl	800b826 <SDMMC_GetResponse>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082de:	d102      	bne.n	80082e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80082e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082e4:	e0b0      	b.n	8008448 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2140      	movs	r1, #64	; 0x40
 80082ec:	4618      	mov	r0, r3
 80082ee:	f003 fad9 	bl	800b8a4 <SDMMC_CmdBlockLength>
 80082f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d005      	beq.n	8008306 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	e0a0      	b.n	8008448 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f003 fc0e 	bl	800bb34 <SDMMC_CmdAppCommand>
 8008318:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	e08d      	b.n	8008448 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008330:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008336:	2360      	movs	r3, #96	; 0x60
 8008338:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800833a:	2302      	movs	r3, #2
 800833c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008342:	2301      	movs	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f107 0208 	add.w	r2, r7, #8
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f003 fa7b 	bl	800b84c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f003 fcf6 	bl	800bd4c <SDMMC_CmdStatusRegister>
 8008360:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d02b      	beq.n	80083c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	e069      	b.n	8008448 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d013      	beq.n	80083aa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008382:	2300      	movs	r3, #0
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008386:	e00d      	b.n	80083a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f003 f9d5 	bl	800b73c <SDMMC_ReadFIFO>
 8008392:	4602      	mov	r2, r0
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	601a      	str	r2, [r3, #0]
        pData++;
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	3304      	adds	r3, #4
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	3301      	adds	r3, #1
 80083a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	2b07      	cmp	r3, #7
 80083a8:	d9ee      	bls.n	8008388 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083aa:	f7fa f9b1 	bl	8002710 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b8:	d102      	bne.n	80083c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80083ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083be:	e043      	b.n	8008448 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0d2      	beq.n	8008374 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083dc:	2308      	movs	r3, #8
 80083de:	e033      	b.n	8008448 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	e02a      	b.n	8008448 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d017      	beq.n	8008430 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008400:	2320      	movs	r3, #32
 8008402:	e021      	b.n	8008448 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f003 f997 	bl	800b73c <SDMMC_ReadFIFO>
 800840e:	4602      	mov	r2, r0
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	601a      	str	r2, [r3, #0]
    pData++;
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	3304      	adds	r3, #4
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800841a:	f7fa f979 	bl	8002710 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008428:	d102      	bne.n	8008430 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800842a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800842e:	e00b      	b.n	8008448 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e2      	bne.n	8008404 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a03      	ldr	r2, [pc, #12]	; (8008450 <SD_SendSDStatus+0x19c>)
 8008444:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	18000f3a 	.word	0x18000f3a

08008454 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008468:	e018      	b.n	800849c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f003 fc45 	bl	800bd06 <SDMMC_CmdSendStatus>
 800847c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	e009      	b.n	800849c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f003 f9c9 	bl	800b826 <SDMMC_GetResponse>
 8008494:	4602      	mov	r2, r0
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f003 f9b3 	bl	800b826 <SDMMC_GetResponse>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ca:	d102      	bne.n	80084d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084d0:	e02f      	b.n	8008532 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f879 	bl	80085d0 <SD_FindSCR>
 80084de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	e023      	b.n	8008532 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01c      	beq.n	800852e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	4619      	mov	r1, r3
 8008500:	4610      	mov	r0, r2
 8008502:	f003 fb17 	bl	800bb34 <SDMMC_CmdAppCommand>
 8008506:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	e00f      	b.n	8008532 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f003 fb4e 	bl	800bbba <SDMMC_CmdBusWidth>
 800851e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	e003      	b.n	8008532 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800852a:	2300      	movs	r3, #0
 800852c:	e001      	b.n	8008532 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800852e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	2300      	movs	r3, #0
 8008548:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f003 f968 	bl	800b826 <SDMMC_GetResponse>
 8008556:	4603      	mov	r3, r0
 8008558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008560:	d102      	bne.n	8008568 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008566:	e02f      	b.n	80085c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f82e 	bl	80085d0 <SD_FindSCR>
 8008574:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	e023      	b.n	80085c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01c      	beq.n	80085c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008592:	041b      	lsls	r3, r3, #16
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f003 facc 	bl	800bb34 <SDMMC_CmdAppCommand>
 800859c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	e00f      	b.n	80085c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f003 fb03 	bl	800bbba <SDMMC_CmdBusWidth>
 80085b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	e003      	b.n	80085c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e001      	b.n	80085c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	; 0x38
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085da:	f7fa f899 	bl	8002710 <HAL_GetTick>
 80085de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80085e4:	2300      	movs	r3, #0
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2108      	movs	r1, #8
 80085f6:	4618      	mov	r0, r3
 80085f8:	f003 f954 	bl	800b8a4 <SDMMC_CmdBlockLength>
 80085fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	e0ad      	b.n	8008764 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f003 fa8d 	bl	800bb34 <SDMMC_CmdAppCommand>
 800861a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	e09e      	b.n	8008764 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800862a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800862c:	2308      	movs	r3, #8
 800862e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008630:	2330      	movs	r3, #48	; 0x30
 8008632:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008634:	2302      	movs	r3, #2
 8008636:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008638:	2300      	movs	r3, #0
 800863a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800863c:	2301      	movs	r3, #1
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f107 0210 	add.w	r2, r7, #16
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f003 f8fe 	bl	800b84c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f003 fad3 	bl	800bc00 <SDMMC_CmdSendSCR>
 800865a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	d027      	beq.n	80086b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	e07e      	b.n	8008764 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d113      	bne.n	800869c <SD_FindSCR+0xcc>
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	2b00      	cmp	r3, #0
 8008678:	d110      	bne.n	800869c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f003 f85c 	bl	800b73c <SDMMC_ReadFIFO>
 8008684:	4603      	mov	r3, r0
 8008686:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f003 f855 	bl	800b73c <SDMMC_ReadFIFO>
 8008692:	4603      	mov	r3, r0
 8008694:	60fb      	str	r3, [r7, #12]
      index++;
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	3301      	adds	r3, #1
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800869c:	f7fa f838 	bl	8002710 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086aa:	d102      	bne.n	80086b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086b0:	e058      	b.n	8008764 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b8:	f240 532a 	movw	r3, #1322	; 0x52a
 80086bc:	4013      	ands	r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0d1      	beq.n	8008666 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	f003 0308 	and.w	r3, r3, #8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2208      	movs	r2, #8
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80086d8:	2308      	movs	r3, #8
 80086da:	e043      	b.n	8008764 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2202      	movs	r2, #2
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086f2:	2302      	movs	r3, #2
 80086f4:	e036      	b.n	8008764 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2220      	movs	r2, #32
 800870a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800870c:	2320      	movs	r3, #32
 800870e:	e029      	b.n	8008764 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a15      	ldr	r2, [pc, #84]	; (800876c <SD_FindSCR+0x19c>)
 8008716:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	061a      	lsls	r2, r3, #24
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008724:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800872e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	0e1b      	lsrs	r3, r3, #24
 8008734:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	601a      	str	r2, [r3, #0]
    scr++;
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	3304      	adds	r3, #4
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	061a      	lsls	r2, r3, #24
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800874c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008756:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	0e1b      	lsrs	r3, r3, #24
 800875c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3738      	adds	r7, #56	; 0x38
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	18000f3a 	.word	0x18000f3a

08008770 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e095      	b.n	80088c4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a8:	d009      	beq.n	80087be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	61da      	str	r2, [r3, #28]
 80087b0:	e005      	b.n	80087be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7f9 fd3f 	bl	800225c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087fe:	d902      	bls.n	8008806 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	e002      	b.n	800880c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008814:	d007      	beq.n	8008826 <HAL_SPI_Init+0xa0>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800881e:	d002      	beq.n	8008826 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	ea42 0103 	orr.w	r1, r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	0c1b      	lsrs	r3, r3, #16
 8008882:	f003 0204 	and.w	r2, r3, #4
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80088a2:	ea42 0103 	orr.w	r1, r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_SPI_Transmit+0x22>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e158      	b.n	8008ba0 <HAL_SPI_Transmit+0x2d4>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088f6:	f7f9 ff0b 	bl	8002710 <HAL_GetTick>
 80088fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d002      	beq.n	8008912 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800890c:	2302      	movs	r3, #2
 800890e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008910:	e13d      	b.n	8008b8e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_SPI_Transmit+0x52>
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008922:	e134      	b.n	8008b8e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2203      	movs	r2, #3
 8008928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896e:	d10f      	bne.n	8008990 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800898e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d007      	beq.n	80089ae <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089b6:	d94b      	bls.n	8008a50 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <HAL_SPI_Transmit+0xfa>
 80089c0:	8afb      	ldrh	r3, [r7, #22]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d13e      	bne.n	8008a44 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	881a      	ldrh	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	1c9a      	adds	r2, r3, #2
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089ea:	e02b      	b.n	8008a44 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d112      	bne.n	8008a20 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	881a      	ldrh	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	1c9a      	adds	r2, r3, #2
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a1e:	e011      	b.n	8008a44 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a20:	f7f9 fe76 	bl	8002710 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d803      	bhi.n	8008a38 <HAL_SPI_Transmit+0x16c>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a36:	d102      	bne.n	8008a3e <HAL_SPI_Transmit+0x172>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a42:	e0a4      	b.n	8008b8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1ce      	bne.n	80089ec <HAL_SPI_Transmit+0x120>
 8008a4e:	e07c      	b.n	8008b4a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_SPI_Transmit+0x192>
 8008a58:	8afb      	ldrh	r3, [r7, #22]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d170      	bne.n	8008b40 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d912      	bls.n	8008a8e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	881a      	ldrh	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b02      	subs	r3, #2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a8c:	e058      	b.n	8008b40 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	7812      	ldrb	r2, [r2, #0]
 8008a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	3b01      	subs	r3, #1
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ab4:	e044      	b.n	8008b40 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d12b      	bne.n	8008b1c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d912      	bls.n	8008af4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	881a      	ldrh	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	1c9a      	adds	r2, r3, #2
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b02      	subs	r3, #2
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008af2:	e025      	b.n	8008b40 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b1a:	e011      	b.n	8008b40 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1c:	f7f9 fdf8 	bl	8002710 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d803      	bhi.n	8008b34 <HAL_SPI_Transmit+0x268>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b32:	d102      	bne.n	8008b3a <HAL_SPI_Transmit+0x26e>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b3e:	e026      	b.n	8008b8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1b5      	bne.n	8008ab6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fcf2 	bl	8009538 <SPI_EndRxTxTransaction>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	77fb      	strb	r3, [r7, #31]
 8008b8a:	e000      	b.n	8008b8e <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bc4:	d112      	bne.n	8008bec <HAL_SPI_Receive+0x44>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10e      	bne.n	8008bec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f910 	bl	8008e08 <HAL_SPI_TransmitReceive>
 8008be8:	4603      	mov	r3, r0
 8008bea:	e109      	b.n	8008e00 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_SPI_Receive+0x52>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e102      	b.n	8008e00 <HAL_SPI_Receive+0x258>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c02:	f7f9 fd85 	bl	8002710 <HAL_GetTick>
 8008c06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d002      	beq.n	8008c1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008c14:	2302      	movs	r3, #2
 8008c16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c18:	e0e9      	b.n	8008dee <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_SPI_Receive+0x7e>
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d102      	bne.n	8008c2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c2a:	e0e0      	b.n	8008dee <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2204      	movs	r2, #4
 8008c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	88fa      	ldrh	r2, [r7, #6]
 8008c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c76:	d908      	bls.n	8008c8a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c86:	605a      	str	r2, [r3, #4]
 8008c88:	e007      	b.n	8008c9a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c98:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d007      	beq.n	8008ce2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ce0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cea:	d867      	bhi.n	8008dbc <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cec:	e030      	b.n	8008d50 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d117      	bne.n	8008d2c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f103 020c 	add.w	r2, r3, #12
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d2a:	e011      	b.n	8008d50 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d2c:	f7f9 fcf0 	bl	8002710 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d803      	bhi.n	8008d44 <HAL_SPI_Receive+0x19c>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d42:	d102      	bne.n	8008d4a <HAL_SPI_Receive+0x1a2>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d102      	bne.n	8008d50 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d4e:	e04e      	b.n	8008dee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1c8      	bne.n	8008cee <HAL_SPI_Receive+0x146>
 8008d5c:	e034      	b.n	8008dc8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d115      	bne.n	8008d98 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	b292      	uxth	r2, r2
 8008d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	1c9a      	adds	r2, r3, #2
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d96:	e011      	b.n	8008dbc <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d98:	f7f9 fcba 	bl	8002710 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d803      	bhi.n	8008db0 <HAL_SPI_Receive+0x208>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dae:	d102      	bne.n	8008db6 <HAL_SPI_Receive+0x20e>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008dba:	e018      	b.n	8008dee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1ca      	bne.n	8008d5e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fb5b 	bl	8009488 <SPI_EndRxTransaction>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
 8008dea:	e000      	b.n	8008dee <HAL_SPI_Receive+0x246>
  }

error :
 8008dec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e16:	2301      	movs	r3, #1
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_SPI_TransmitReceive+0x26>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e1fb      	b.n	8009226 <HAL_SPI_TransmitReceive+0x41e>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e36:	f7f9 fc6b 	bl	8002710 <HAL_GetTick>
 8008e3a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e52:	7efb      	ldrb	r3, [r7, #27]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d00e      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x6e>
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e5e:	d106      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x66>
 8008e68:	7efb      	ldrb	r3, [r7, #27]
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d003      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e74:	e1cd      	b.n	8009212 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <HAL_SPI_TransmitReceive+0x80>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <HAL_SPI_TransmitReceive+0x80>
 8008e82:	887b      	ldrh	r3, [r7, #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e8e:	e1c0      	b.n	8009212 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d003      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	887a      	ldrh	r2, [r7, #2]
 8008eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	887a      	ldrh	r2, [r7, #2]
 8008ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	887a      	ldrh	r2, [r7, #2]
 8008eca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	887a      	ldrh	r2, [r7, #2]
 8008ed0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ee6:	d802      	bhi.n	8008eee <HAL_SPI_TransmitReceive+0xe6>
 8008ee8:	8a3b      	ldrh	r3, [r7, #16]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d908      	bls.n	8008f00 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008efc:	605a      	str	r2, [r3, #4]
 8008efe:	e007      	b.n	8008f10 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d007      	beq.n	8008f2e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f36:	d97c      	bls.n	8009032 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x13e>
 8008f40:	8a7b      	ldrh	r3, [r7, #18]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d169      	bne.n	800901a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4a:	881a      	ldrh	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	1c9a      	adds	r2, r3, #2
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6a:	e056      	b.n	800901a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d11b      	bne.n	8008fb2 <HAL_SPI_TransmitReceive+0x1aa>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d016      	beq.n	8008fb2 <HAL_SPI_TransmitReceive+0x1aa>
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d113      	bne.n	8008fb2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d11c      	bne.n	8008ffa <HAL_SPI_TransmitReceive+0x1f2>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d016      	beq.n	8008ffa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	1c9a      	adds	r2, r3, #2
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ffa:	f7f9 fb89 	bl	8002710 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009006:	429a      	cmp	r2, r3
 8009008:	d807      	bhi.n	800901a <HAL_SPI_TransmitReceive+0x212>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009010:	d003      	beq.n	800901a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009018:	e0fb      	b.n	8009212 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1a3      	bne.n	8008f6c <HAL_SPI_TransmitReceive+0x164>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d19d      	bne.n	8008f6c <HAL_SPI_TransmitReceive+0x164>
 8009030:	e0df      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x23a>
 800903a:	8a7b      	ldrh	r3, [r7, #18]
 800903c:	2b01      	cmp	r3, #1
 800903e:	f040 80cb 	bne.w	80091d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	d912      	bls.n	8009072 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	881a      	ldrh	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b02      	subs	r3, #2
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009070:	e0b2      	b.n	80091d8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	7812      	ldrb	r2, [r2, #0]
 800907e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009098:	e09e      	b.n	80091d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d134      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x30a>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d02f      	beq.n	8009112 <HAL_SPI_TransmitReceive+0x30a>
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d12c      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d912      	bls.n	80090e8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	881a      	ldrh	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	1c9a      	adds	r2, r3, #2
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	3b02      	subs	r3, #2
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090e6:	e012      	b.n	800910e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b01      	cmp	r3, #1
 800911e:	d148      	bne.n	80091b2 <HAL_SPI_TransmitReceive+0x3aa>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d042      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b01      	cmp	r3, #1
 8009136:	d923      	bls.n	8009180 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	b292      	uxth	r2, r2
 8009144:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	1c9a      	adds	r2, r3, #2
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b02      	subs	r3, #2
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009168:	b29b      	uxth	r3, r3
 800916a:	2b01      	cmp	r3, #1
 800916c:	d81f      	bhi.n	80091ae <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	e016      	b.n	80091ae <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f103 020c 	add.w	r2, r3, #12
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	7812      	ldrb	r2, [r2, #0]
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091ae:	2301      	movs	r3, #1
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091b2:	f7f9 faad 	bl	8002710 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091be:	429a      	cmp	r2, r3
 80091c0:	d803      	bhi.n	80091ca <HAL_SPI_TransmitReceive+0x3c2>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c8:	d102      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x3c8>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80091d6:	e01c      	b.n	8009212 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f47f af5b 	bne.w	800909a <HAL_SPI_TransmitReceive+0x292>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f47f af54 	bne.w	800909a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f99e 	bl	8009538 <SPI_EndRxTxTransaction>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	661a      	str	r2, [r3, #96]	; 0x60
 800920e:	e000      	b.n	8009212 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009226:	4618      	mov	r0, r3
 8009228:	3728      	adds	r7, #40	; 0x28
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800923c:	b2db      	uxtb	r3, r3
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800925c:	f7f9 fa58 	bl	8002710 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4413      	add	r3, r2
 800926a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800926c:	f7f9 fa50 	bl	8002710 <HAL_GetTick>
 8009270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009272:	4b39      	ldr	r3, [pc, #228]	; (8009358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	015b      	lsls	r3, r3, #5
 8009278:	0d1b      	lsrs	r3, r3, #20
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	fb02 f303 	mul.w	r3, r2, r3
 8009280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009282:	e054      	b.n	800932e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928a:	d050      	beq.n	800932e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800928c:	f7f9 fa40 	bl	8002710 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	429a      	cmp	r2, r3
 800929a:	d902      	bls.n	80092a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d13d      	bne.n	800931e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ba:	d111      	bne.n	80092e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c4:	d004      	beq.n	80092d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ce:	d107      	bne.n	80092e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e8:	d10f      	bne.n	800930a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e017      	b.n	800934e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	3b01      	subs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4013      	ands	r3, r2
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	bf0c      	ite	eq
 800933e:	2301      	moveq	r3, #1
 8009340:	2300      	movne	r3, #0
 8009342:	b2db      	uxtb	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	429a      	cmp	r2, r3
 800934a:	d19b      	bne.n	8009284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000004 	.word	0x20000004

0800935c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	; 0x28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800936e:	f7f9 f9cf 	bl	8002710 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	4413      	add	r3, r2
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800937e:	f7f9 f9c7 	bl	8002710 <HAL_GetTick>
 8009382:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	330c      	adds	r3, #12
 800938a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800938c:	4b3d      	ldr	r3, [pc, #244]	; (8009484 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	00da      	lsls	r2, r3, #3
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	0d1b      	lsrs	r3, r3, #20
 800939c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093a4:	e060      	b.n	8009468 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093ac:	d107      	bne.n	80093be <SPI_WaitFifoStateUntilTimeout+0x62>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c4:	d050      	beq.n	8009468 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093c6:	f7f9 f9a3 	bl	8002710 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d902      	bls.n	80093dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d13d      	bne.n	8009458 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093f4:	d111      	bne.n	800941a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093fe:	d004      	beq.n	800940a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009408:	d107      	bne.n	800941a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009422:	d10f      	bne.n	8009444 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009442:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e010      	b.n	800947a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	3b01      	subs	r3, #1
 8009466:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4013      	ands	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d196      	bne.n	80093a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3728      	adds	r7, #40	; 0x28
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000004 	.word	0x20000004

08009488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af02      	add	r7, sp, #8
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800949c:	d111      	bne.n	80094c2 <SPI_EndRxTransaction+0x3a>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a6:	d004      	beq.n	80094b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b0:	d107      	bne.n	80094c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2200      	movs	r2, #0
 80094ca:	2180      	movs	r1, #128	; 0x80
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff febd 	bl	800924c <SPI_WaitFlagStateUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d007      	beq.n	80094e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094dc:	f043 0220 	orr.w	r2, r3, #32
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e023      	b.n	8009530 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094f0:	d11d      	bne.n	800952e <SPI_EndRxTransaction+0xa6>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094fa:	d004      	beq.n	8009506 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009504:	d113      	bne.n	800952e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2200      	movs	r2, #0
 800950e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff ff22 	bl	800935c <SPI_WaitFifoStateUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009522:	f043 0220 	orr.w	r2, r3, #32
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e000      	b.n	8009530 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2200      	movs	r2, #0
 800954c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff ff03 	bl	800935c <SPI_WaitFifoStateUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009560:	f043 0220 	orr.w	r2, r3, #32
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e027      	b.n	80095bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2200      	movs	r2, #0
 8009574:	2180      	movs	r1, #128	; 0x80
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff fe68 	bl	800924c <SPI_WaitFlagStateUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d007      	beq.n	8009592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009586:	f043 0220 	orr.w	r2, r3, #32
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e014      	b.n	80095bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2200      	movs	r2, #0
 800959a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fedc 	bl	800935c <SPI_WaitFifoStateUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ae:	f043 0220 	orr.w	r2, r3, #32
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e000      	b.n	80095bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e049      	b.n	800966a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7f8 fe78 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f000 fa62 	bl	8009acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e049      	b.n	8009718 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f841 	bl	8009720 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2202      	movs	r2, #2
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f000 fa0b 	bl	8009acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b02      	cmp	r3, #2
 8009748:	d122      	bne.n	8009790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b02      	cmp	r3, #2
 8009756:	d11b      	bne.n	8009790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0202 	mvn.w	r2, #2
 8009760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f98a 	bl	8009a90 <HAL_TIM_IC_CaptureCallback>
 800977c:	e005      	b.n	800978a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f97c 	bl	8009a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f98d 	bl	8009aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b04      	cmp	r3, #4
 800979c:	d122      	bne.n	80097e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d11b      	bne.n	80097e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0204 	mvn.w	r2, #4
 80097b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f960 	bl	8009a90 <HAL_TIM_IC_CaptureCallback>
 80097d0:	e005      	b.n	80097de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f952 	bl	8009a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f963 	bl	8009aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b08      	cmp	r3, #8
 80097f0:	d122      	bne.n	8009838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d11b      	bne.n	8009838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0208 	mvn.w	r2, #8
 8009808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2204      	movs	r2, #4
 800980e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f936 	bl	8009a90 <HAL_TIM_IC_CaptureCallback>
 8009824:	e005      	b.n	8009832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f928 	bl	8009a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f939 	bl	8009aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f003 0310 	and.w	r3, r3, #16
 8009842:	2b10      	cmp	r3, #16
 8009844:	d122      	bne.n	800988c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b10      	cmp	r3, #16
 8009852:	d11b      	bne.n	800988c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0210 	mvn.w	r2, #16
 800985c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2208      	movs	r2, #8
 8009862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f90c 	bl	8009a90 <HAL_TIM_IC_CaptureCallback>
 8009878:	e005      	b.n	8009886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f8fe 	bl	8009a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f90f 	bl	8009aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b01      	cmp	r3, #1
 8009898:	d10e      	bne.n	80098b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d107      	bne.n	80098b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0201 	mvn.w	r2, #1
 80098b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f8d8 	bl	8009a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c2:	2b80      	cmp	r3, #128	; 0x80
 80098c4:	d10e      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d0:	2b80      	cmp	r3, #128	; 0x80
 80098d2:	d107      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fcec 	bl	800a2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f2:	d10e      	bne.n	8009912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fe:	2b80      	cmp	r3, #128	; 0x80
 8009900:	d107      	bne.n	8009912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800990a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fcdf 	bl	800a2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b40      	cmp	r3, #64	; 0x40
 800991e:	d10e      	bne.n	800993e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992a:	2b40      	cmp	r3, #64	; 0x40
 800992c:	d107      	bne.n	800993e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f8bd 	bl	8009ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b20      	cmp	r3, #32
 800994a:	d10e      	bne.n	800996a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b20      	cmp	r3, #32
 8009958:	d107      	bne.n	800996a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f06f 0220 	mvn.w	r2, #32
 8009962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc9f 	bl	800a2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800996a:	bf00      	nop
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_TIM_OC_ConfigChannel+0x1e>
 800998e:	2302      	movs	r3, #2
 8009990:	e066      	b.n	8009a60 <HAL_TIM_OC_ConfigChannel+0xec>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b14      	cmp	r3, #20
 800999e:	d857      	bhi.n	8009a50 <HAL_TIM_OC_ConfigChannel+0xdc>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099fd 	.word	0x080099fd
 80099ac:	08009a51 	.word	0x08009a51
 80099b0:	08009a51 	.word	0x08009a51
 80099b4:	08009a51 	.word	0x08009a51
 80099b8:	08009a0b 	.word	0x08009a0b
 80099bc:	08009a51 	.word	0x08009a51
 80099c0:	08009a51 	.word	0x08009a51
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a19 	.word	0x08009a19
 80099cc:	08009a51 	.word	0x08009a51
 80099d0:	08009a51 	.word	0x08009a51
 80099d4:	08009a51 	.word	0x08009a51
 80099d8:	08009a27 	.word	0x08009a27
 80099dc:	08009a51 	.word	0x08009a51
 80099e0:	08009a51 	.word	0x08009a51
 80099e4:	08009a51 	.word	0x08009a51
 80099e8:	08009a35 	.word	0x08009a35
 80099ec:	08009a51 	.word	0x08009a51
 80099f0:	08009a51 	.word	0x08009a51
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a43 	.word	0x08009a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f8fc 	bl	8009c00 <TIM_OC1_SetConfig>
      break;
 8009a08:	e025      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 f985 	bl	8009d20 <TIM_OC2_SetConfig>
      break;
 8009a16:	e01e      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fa08 	bl	8009e34 <TIM_OC3_SetConfig>
      break;
 8009a24:	e017      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 fa89 	bl	8009f44 <TIM_OC4_SetConfig>
      break;
 8009a32:	e010      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 faec 	bl	800a018 <TIM_OC5_SetConfig>
      break;
 8009a40:	e009      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fb49 	bl	800a0e0 <TIM_OC6_SetConfig>
      break;
 8009a4e:	e002      	b.n	8009a56 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
      break;
 8009a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a40      	ldr	r2, [pc, #256]	; (8009be0 <TIM_Base_SetConfig+0x114>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d013      	beq.n	8009b0c <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aea:	d00f      	beq.n	8009b0c <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3d      	ldr	r2, [pc, #244]	; (8009be4 <TIM_Base_SetConfig+0x118>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00b      	beq.n	8009b0c <TIM_Base_SetConfig+0x40>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3c      	ldr	r2, [pc, #240]	; (8009be8 <TIM_Base_SetConfig+0x11c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d007      	beq.n	8009b0c <TIM_Base_SetConfig+0x40>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a3b      	ldr	r2, [pc, #236]	; (8009bec <TIM_Base_SetConfig+0x120>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d003      	beq.n	8009b0c <TIM_Base_SetConfig+0x40>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a3a      	ldr	r2, [pc, #232]	; (8009bf0 <TIM_Base_SetConfig+0x124>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d108      	bne.n	8009b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a2f      	ldr	r2, [pc, #188]	; (8009be0 <TIM_Base_SetConfig+0x114>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d01f      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2c:	d01b      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a2c      	ldr	r2, [pc, #176]	; (8009be4 <TIM_Base_SetConfig+0x118>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d017      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a2b      	ldr	r2, [pc, #172]	; (8009be8 <TIM_Base_SetConfig+0x11c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d013      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a2a      	ldr	r2, [pc, #168]	; (8009bec <TIM_Base_SetConfig+0x120>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00f      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a29      	ldr	r2, [pc, #164]	; (8009bf0 <TIM_Base_SetConfig+0x124>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00b      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a28      	ldr	r2, [pc, #160]	; (8009bf4 <TIM_Base_SetConfig+0x128>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d007      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a27      	ldr	r2, [pc, #156]	; (8009bf8 <TIM_Base_SetConfig+0x12c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_Base_SetConfig+0x9a>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a26      	ldr	r2, [pc, #152]	; (8009bfc <TIM_Base_SetConfig+0x130>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d108      	bne.n	8009b78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a10      	ldr	r2, [pc, #64]	; (8009be0 <TIM_Base_SetConfig+0x114>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00f      	beq.n	8009bc4 <TIM_Base_SetConfig+0xf8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a12      	ldr	r2, [pc, #72]	; (8009bf0 <TIM_Base_SetConfig+0x124>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00b      	beq.n	8009bc4 <TIM_Base_SetConfig+0xf8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a11      	ldr	r2, [pc, #68]	; (8009bf4 <TIM_Base_SetConfig+0x128>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d007      	beq.n	8009bc4 <TIM_Base_SetConfig+0xf8>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a10      	ldr	r2, [pc, #64]	; (8009bf8 <TIM_Base_SetConfig+0x12c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d003      	beq.n	8009bc4 <TIM_Base_SetConfig+0xf8>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a0f      	ldr	r2, [pc, #60]	; (8009bfc <TIM_Base_SetConfig+0x130>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d103      	bne.n	8009bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	615a      	str	r2, [r3, #20]
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40012c00 	.word	0x40012c00
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40013400 	.word	0x40013400
 8009bf4:	40014000 	.word	0x40014000
 8009bf8:	40014400 	.word	0x40014400
 8009bfc:	40014800 	.word	0x40014800

08009c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	f023 0201 	bic.w	r2, r3, #1
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f023 0302 	bic.w	r3, r3, #2
 8009c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a2c      	ldr	r2, [pc, #176]	; (8009d0c <TIM_OC1_SetConfig+0x10c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00f      	beq.n	8009c80 <TIM_OC1_SetConfig+0x80>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a2b      	ldr	r2, [pc, #172]	; (8009d10 <TIM_OC1_SetConfig+0x110>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d00b      	beq.n	8009c80 <TIM_OC1_SetConfig+0x80>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <TIM_OC1_SetConfig+0x114>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d007      	beq.n	8009c80 <TIM_OC1_SetConfig+0x80>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a29      	ldr	r2, [pc, #164]	; (8009d18 <TIM_OC1_SetConfig+0x118>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d003      	beq.n	8009c80 <TIM_OC1_SetConfig+0x80>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a28      	ldr	r2, [pc, #160]	; (8009d1c <TIM_OC1_SetConfig+0x11c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d10c      	bne.n	8009c9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f023 0308 	bic.w	r3, r3, #8
 8009c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f023 0304 	bic.w	r3, r3, #4
 8009c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a1b      	ldr	r2, [pc, #108]	; (8009d0c <TIM_OC1_SetConfig+0x10c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_OC1_SetConfig+0xc2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a1a      	ldr	r2, [pc, #104]	; (8009d10 <TIM_OC1_SetConfig+0x110>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_OC1_SetConfig+0xc2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a19      	ldr	r2, [pc, #100]	; (8009d14 <TIM_OC1_SetConfig+0x114>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <TIM_OC1_SetConfig+0xc2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a18      	ldr	r2, [pc, #96]	; (8009d18 <TIM_OC1_SetConfig+0x118>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_OC1_SetConfig+0xc2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <TIM_OC1_SetConfig+0x11c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d111      	bne.n	8009ce6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	621a      	str	r2, [r3, #32]
}
 8009d00:	bf00      	nop
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	40012c00 	.word	0x40012c00
 8009d10:	40013400 	.word	0x40013400
 8009d14:	40014000 	.word	0x40014000
 8009d18:	40014400 	.word	0x40014400
 8009d1c:	40014800 	.word	0x40014800

08009d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f023 0210 	bic.w	r2, r3, #16
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	021b      	lsls	r3, r3, #8
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f023 0320 	bic.w	r3, r3, #32
 8009d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a28      	ldr	r2, [pc, #160]	; (8009e20 <TIM_OC2_SetConfig+0x100>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_OC2_SetConfig+0x6c>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a27      	ldr	r2, [pc, #156]	; (8009e24 <TIM_OC2_SetConfig+0x104>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d10d      	bne.n	8009da8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1d      	ldr	r2, [pc, #116]	; (8009e20 <TIM_OC2_SetConfig+0x100>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00f      	beq.n	8009dd0 <TIM_OC2_SetConfig+0xb0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <TIM_OC2_SetConfig+0x104>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_OC2_SetConfig+0xb0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <TIM_OC2_SetConfig+0x108>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_OC2_SetConfig+0xb0>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a1a      	ldr	r2, [pc, #104]	; (8009e2c <TIM_OC2_SetConfig+0x10c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC2_SetConfig+0xb0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <TIM_OC2_SetConfig+0x110>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d113      	bne.n	8009df8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	621a      	str	r2, [r3, #32]
}
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40014400 	.word	0x40014400
 8009e30:	40014800 	.word	0x40014800

08009e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a27      	ldr	r2, [pc, #156]	; (8009f30 <TIM_OC3_SetConfig+0xfc>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d003      	beq.n	8009e9e <TIM_OC3_SetConfig+0x6a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a26      	ldr	r2, [pc, #152]	; (8009f34 <TIM_OC3_SetConfig+0x100>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d10d      	bne.n	8009eba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a1c      	ldr	r2, [pc, #112]	; (8009f30 <TIM_OC3_SetConfig+0xfc>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00f      	beq.n	8009ee2 <TIM_OC3_SetConfig+0xae>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a1b      	ldr	r2, [pc, #108]	; (8009f34 <TIM_OC3_SetConfig+0x100>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00b      	beq.n	8009ee2 <TIM_OC3_SetConfig+0xae>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a1a      	ldr	r2, [pc, #104]	; (8009f38 <TIM_OC3_SetConfig+0x104>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d007      	beq.n	8009ee2 <TIM_OC3_SetConfig+0xae>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <TIM_OC3_SetConfig+0x108>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC3_SetConfig+0xae>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a18      	ldr	r2, [pc, #96]	; (8009f40 <TIM_OC3_SetConfig+0x10c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d113      	bne.n	8009f0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	621a      	str	r2, [r3, #32]
}
 8009f24:	bf00      	nop
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	40012c00 	.word	0x40012c00
 8009f34:	40013400 	.word	0x40013400
 8009f38:	40014000 	.word	0x40014000
 8009f3c:	40014400 	.word	0x40014400
 8009f40:	40014800 	.word	0x40014800

08009f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	031b      	lsls	r3, r3, #12
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a18      	ldr	r2, [pc, #96]	; (800a004 <TIM_OC4_SetConfig+0xc0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00f      	beq.n	8009fc8 <TIM_OC4_SetConfig+0x84>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a17      	ldr	r2, [pc, #92]	; (800a008 <TIM_OC4_SetConfig+0xc4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00b      	beq.n	8009fc8 <TIM_OC4_SetConfig+0x84>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a16      	ldr	r2, [pc, #88]	; (800a00c <TIM_OC4_SetConfig+0xc8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d007      	beq.n	8009fc8 <TIM_OC4_SetConfig+0x84>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a15      	ldr	r2, [pc, #84]	; (800a010 <TIM_OC4_SetConfig+0xcc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_OC4_SetConfig+0x84>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a14      	ldr	r2, [pc, #80]	; (800a014 <TIM_OC4_SetConfig+0xd0>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d109      	bne.n	8009fdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	019b      	lsls	r3, r3, #6
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40012c00 	.word	0x40012c00
 800a008:	40013400 	.word	0x40013400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40014400 	.word	0x40014400
 800a014:	40014800 	.word	0x40014800

0800a018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a05c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <TIM_OC5_SetConfig+0xb4>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00f      	beq.n	800a092 <TIM_OC5_SetConfig+0x7a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <TIM_OC5_SetConfig+0xb8>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00b      	beq.n	800a092 <TIM_OC5_SetConfig+0x7a>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <TIM_OC5_SetConfig+0xbc>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <TIM_OC5_SetConfig+0x7a>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a14      	ldr	r2, [pc, #80]	; (800a0d8 <TIM_OC5_SetConfig+0xc0>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d003      	beq.n	800a092 <TIM_OC5_SetConfig+0x7a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a13      	ldr	r2, [pc, #76]	; (800a0dc <TIM_OC5_SetConfig+0xc4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d109      	bne.n	800a0a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a098:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	621a      	str	r2, [r3, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	371c      	adds	r7, #28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	40012c00 	.word	0x40012c00
 800a0d0:	40013400 	.word	0x40013400
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40014400 	.word	0x40014400
 800a0dc:	40014800 	.word	0x40014800

0800a0e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	051b      	lsls	r3, r3, #20
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a18      	ldr	r2, [pc, #96]	; (800a198 <TIM_OC6_SetConfig+0xb8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00f      	beq.n	800a15c <TIM_OC6_SetConfig+0x7c>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a17      	ldr	r2, [pc, #92]	; (800a19c <TIM_OC6_SetConfig+0xbc>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00b      	beq.n	800a15c <TIM_OC6_SetConfig+0x7c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a16      	ldr	r2, [pc, #88]	; (800a1a0 <TIM_OC6_SetConfig+0xc0>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d007      	beq.n	800a15c <TIM_OC6_SetConfig+0x7c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a15      	ldr	r2, [pc, #84]	; (800a1a4 <TIM_OC6_SetConfig+0xc4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC6_SetConfig+0x7c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <TIM_OC6_SetConfig+0xc8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d109      	bne.n	800a170 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	029b      	lsls	r3, r3, #10
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	621a      	str	r2, [r3, #32]
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40012c00 	.word	0x40012c00
 800a19c:	40013400 	.word	0x40013400
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40014400 	.word	0x40014400
 800a1a8:	40014800 	.word	0x40014800

0800a1ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e065      	b.n	800a294 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a16      	ldr	r2, [pc, #88]	; (800a2a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d004      	beq.n	800a256 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a14      	ldr	r2, [pc, #80]	; (800a2a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d115      	bne.n	800a282 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	051b      	lsls	r3, r3, #20
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	4313      	orrs	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	40012c00 	.word	0x40012c00
 800a2a4:	40013400 	.word	0x40013400

0800a2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e042      	b.n	800a37c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7f8 f809 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2224      	movs	r2, #36	; 0x24
 800a312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f022 0201 	bic.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fb64 	bl	800a9f4 <UART_SetConfig>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e022      	b.n	800a37c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fe54 	bl	800afec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fedb 	bl	800b130 <UART_CheckIdleState>
 800a37a:	4603      	mov	r3, r0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b0ba      	sub	sp, #232	; 0xe8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a3ae:	f640 030f 	movw	r3, #2063	; 0x80f
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11b      	bne.n	800a3f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d015      	beq.n	800a3f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3d0:	f003 0320 	and.w	r3, r3, #32
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 82d6 	beq.w	800a99a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
      }
      return;
 800a3f6:	e2d0      	b.n	800a99a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 811f 	beq.w	800a640 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a402:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a406:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <HAL_UART_IRQHandler+0x2b0>)
 800a408:	4013      	ands	r3, r2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a40e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a412:	4b89      	ldr	r3, [pc, #548]	; (800a638 <HAL_UART_IRQHandler+0x2b4>)
 800a414:	4013      	ands	r3, r2
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8112 	beq.w	800a640 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d011      	beq.n	800a44c <HAL_UART_IRQHandler+0xc8>
 800a428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00b      	beq.n	800a44c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2201      	movs	r2, #1
 800a43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a442:	f043 0201 	orr.w	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d011      	beq.n	800a47c <HAL_UART_IRQHandler+0xf8>
 800a458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2202      	movs	r2, #2
 800a46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a472:	f043 0204 	orr.w	r2, r3, #4
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d011      	beq.n	800a4ac <HAL_UART_IRQHandler+0x128>
 800a488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2204      	movs	r2, #4
 800a49a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a2:	f043 0202 	orr.w	r2, r3, #2
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b0:	f003 0308 	and.w	r3, r3, #8
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d017      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a4c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a4c8:	4b5a      	ldr	r3, [pc, #360]	; (800a634 <HAL_UART_IRQHandler+0x2b0>)
 800a4ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4de:	f043 0208 	orr.w	r2, r3, #8
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d012      	beq.n	800a51a <HAL_UART_IRQHandler+0x196>
 800a4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00c      	beq.n	800a51a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a510:	f043 0220 	orr.w	r2, r3, #32
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 823c 	beq.w	800a99e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d013      	beq.n	800a55a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a536:	f003 0320 	and.w	r3, r3, #32
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56e:	2b40      	cmp	r3, #64	; 0x40
 800a570:	d005      	beq.n	800a57e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d04f      	beq.n	800a61e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fee9 	bl	800b356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58e:	2b40      	cmp	r3, #64	; 0x40
 800a590:	d141      	bne.n	800a616 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3308      	adds	r3, #8
 800a598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a5be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a5c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a5ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1d9      	bne.n	800a592 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d013      	beq.n	800a60e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ea:	4a14      	ldr	r2, [pc, #80]	; (800a63c <HAL_UART_IRQHandler+0x2b8>)
 800a5ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f8 fa29 	bl	8002a4a <HAL_DMA_Abort_IT>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d017      	beq.n	800a62e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a608:	4610      	mov	r0, r2
 800a60a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a60c:	e00f      	b.n	800a62e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9da 	bl	800a9c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a614:	e00b      	b.n	800a62e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f9d6 	bl	800a9c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a61c:	e007      	b.n	800a62e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f9d2 	bl	800a9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a62c:	e1b7      	b.n	800a99e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62e:	bf00      	nop
    return;
 800a630:	e1b5      	b.n	800a99e <HAL_UART_IRQHandler+0x61a>
 800a632:	bf00      	nop
 800a634:	10000001 	.word	0x10000001
 800a638:	04000120 	.word	0x04000120
 800a63c:	0800b423 	.word	0x0800b423

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a644:	2b01      	cmp	r3, #1
 800a646:	f040 814a 	bne.w	800a8de <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8143 	beq.w	800a8de <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 813c 	beq.w	800a8de <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2210      	movs	r2, #16
 800a66c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a678:	2b40      	cmp	r3, #64	; 0x40
 800a67a:	f040 80b5 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a68a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 8187 	beq.w	800a9a2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a69a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	f080 817f 	bcs.w	800a9a2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 8086 	bne.w	800a7cc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6cc:	e853 3f00 	ldrex	r3, [r3]
 800a6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a6d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a6ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1da      	bne.n	800a6c0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a71a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a71c:	f023 0301 	bic.w	r3, r3, #1
 800a720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3308      	adds	r3, #8
 800a72a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a72e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e1      	bne.n	800a70a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a75c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	3308      	adds	r3, #8
 800a766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a76a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a76c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e3      	bne.n	800a746 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a79c:	f023 0310 	bic.w	r3, r3, #16
 800a7a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e4      	bne.n	800a78c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f8 f8e3 	bl	8002992 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f8fb 	bl	800a9dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7e6:	e0dc      	b.n	800a9a2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a802:	b29b      	uxth	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 80ce 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a80a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80c9 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a836:	647b      	str	r3, [r7, #68]	; 0x44
 800a838:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a83c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e4      	bne.n	800a814 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	623b      	str	r3, [r7, #32]
   return(result);
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a872:	633a      	str	r2, [r7, #48]	; 0x30
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e1      	bne.n	800a84a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0310 	bic.w	r3, r3, #16
 800a8ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8bc:	61fb      	str	r3, [r7, #28]
 800a8be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e4      	bne.n	800a89a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f880 	bl	800a9dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8dc:	e063      	b.n	800a9a6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00e      	beq.n	800a908 <HAL_UART_IRQHandler+0x584>
 800a8ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a8fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fdcf 	bl	800b4a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a906:	e051      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a910:	2b00      	cmp	r3, #0
 800a912:	d014      	beq.n	800a93e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d105      	bne.n	800a92c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a930:	2b00      	cmp	r3, #0
 800a932:	d03a      	beq.n	800a9aa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
    }
    return;
 800a93c:	e035      	b.n	800a9aa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <HAL_UART_IRQHandler+0x5da>
 800a94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fd79 	bl	800b44e <UART_EndTransmit_IT>
    return;
 800a95c:	e026      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d009      	beq.n	800a97e <HAL_UART_IRQHandler+0x5fa>
 800a96a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a96e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fda8 	bl	800b4cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a97c:	e016      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d010      	beq.n	800a9ac <HAL_UART_IRQHandler+0x628>
 800a98a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da0c      	bge.n	800a9ac <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fd90 	bl	800b4b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a998:	e008      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
      return;
 800a99a:	bf00      	nop
 800a99c:	e006      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
    return;
 800a99e:	bf00      	nop
 800a9a0:	e004      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
      return;
 800a9a2:	bf00      	nop
 800a9a4:	e002      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
      return;
 800a9a6:	bf00      	nop
 800a9a8:	e000      	b.n	800a9ac <HAL_UART_IRQHandler+0x628>
    return;
 800a9aa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a9ac:	37e8      	adds	r7, #232	; 0xe8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop

0800a9b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9f8:	b08c      	sub	sp, #48	; 0x30
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4baa      	ldr	r3, [pc, #680]	; (800accc <UART_SetConfig+0x2d8>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a9f      	ldr	r2, [pc, #636]	; (800acd0 <UART_SetConfig+0x2dc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aa6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	f023 010f 	bic.w	r1, r3, #15
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a90      	ldr	r2, [pc, #576]	; (800acd4 <UART_SetConfig+0x2e0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d125      	bne.n	800aae4 <UART_SetConfig+0xf0>
 800aa98:	4b8f      	ldr	r3, [pc, #572]	; (800acd8 <UART_SetConfig+0x2e4>)
 800aa9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d81a      	bhi.n	800aadc <UART_SetConfig+0xe8>
 800aaa6:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <UART_SetConfig+0xb8>)
 800aaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaac:	0800aabd 	.word	0x0800aabd
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	0800aac5 	.word	0x0800aac5
 800aab8:	0800aad5 	.word	0x0800aad5
 800aabc:	2301      	movs	r3, #1
 800aabe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac2:	e116      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aac4:	2302      	movs	r3, #2
 800aac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaca:	e112      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aacc:	2304      	movs	r3, #4
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad2:	e10e      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aad4:	2308      	movs	r3, #8
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aada:	e10a      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aadc:	2310      	movs	r3, #16
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae2:	e106      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a7c      	ldr	r2, [pc, #496]	; (800acdc <UART_SetConfig+0x2e8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d138      	bne.n	800ab60 <UART_SetConfig+0x16c>
 800aaee:	4b7a      	ldr	r3, [pc, #488]	; (800acd8 <UART_SetConfig+0x2e4>)
 800aaf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf4:	f003 030c 	and.w	r3, r3, #12
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	d82d      	bhi.n	800ab58 <UART_SetConfig+0x164>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <UART_SetConfig+0x110>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800ab59 	.word	0x0800ab59
 800ab0c:	0800ab59 	.word	0x0800ab59
 800ab10:	0800ab59 	.word	0x0800ab59
 800ab14:	0800ab49 	.word	0x0800ab49
 800ab18:	0800ab59 	.word	0x0800ab59
 800ab1c:	0800ab59 	.word	0x0800ab59
 800ab20:	0800ab59 	.word	0x0800ab59
 800ab24:	0800ab41 	.word	0x0800ab41
 800ab28:	0800ab59 	.word	0x0800ab59
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	0800ab59 	.word	0x0800ab59
 800ab34:	0800ab51 	.word	0x0800ab51
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	e0d8      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab40:	2302      	movs	r3, #2
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e0d4      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4e:	e0d0      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab50:	2308      	movs	r3, #8
 800ab52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab56:	e0cc      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5e:	e0c8      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a5e      	ldr	r2, [pc, #376]	; (800ace0 <UART_SetConfig+0x2ec>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d125      	bne.n	800abb6 <UART_SetConfig+0x1c2>
 800ab6a:	4b5b      	ldr	r3, [pc, #364]	; (800acd8 <UART_SetConfig+0x2e4>)
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab74:	2b30      	cmp	r3, #48	; 0x30
 800ab76:	d016      	beq.n	800aba6 <UART_SetConfig+0x1b2>
 800ab78:	2b30      	cmp	r3, #48	; 0x30
 800ab7a:	d818      	bhi.n	800abae <UART_SetConfig+0x1ba>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d00a      	beq.n	800ab96 <UART_SetConfig+0x1a2>
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d814      	bhi.n	800abae <UART_SetConfig+0x1ba>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <UART_SetConfig+0x19a>
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d008      	beq.n	800ab9e <UART_SetConfig+0x1aa>
 800ab8c:	e00f      	b.n	800abae <UART_SetConfig+0x1ba>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab94:	e0ad      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab96:	2302      	movs	r3, #2
 800ab98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9c:	e0a9      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ab9e:	2304      	movs	r3, #4
 800aba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aba4:	e0a5      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800aba6:	2308      	movs	r3, #8
 800aba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abac:	e0a1      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800abae:	2310      	movs	r3, #16
 800abb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb4:	e09d      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a4a      	ldr	r2, [pc, #296]	; (800ace4 <UART_SetConfig+0x2f0>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d125      	bne.n	800ac0c <UART_SetConfig+0x218>
 800abc0:	4b45      	ldr	r3, [pc, #276]	; (800acd8 <UART_SetConfig+0x2e4>)
 800abc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800abca:	2bc0      	cmp	r3, #192	; 0xc0
 800abcc:	d016      	beq.n	800abfc <UART_SetConfig+0x208>
 800abce:	2bc0      	cmp	r3, #192	; 0xc0
 800abd0:	d818      	bhi.n	800ac04 <UART_SetConfig+0x210>
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d00a      	beq.n	800abec <UART_SetConfig+0x1f8>
 800abd6:	2b80      	cmp	r3, #128	; 0x80
 800abd8:	d814      	bhi.n	800ac04 <UART_SetConfig+0x210>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <UART_SetConfig+0x1f0>
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d008      	beq.n	800abf4 <UART_SetConfig+0x200>
 800abe2:	e00f      	b.n	800ac04 <UART_SetConfig+0x210>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abea:	e082      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800abec:	2302      	movs	r3, #2
 800abee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abf2:	e07e      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800abf4:	2304      	movs	r3, #4
 800abf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abfa:	e07a      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800abfc:	2308      	movs	r3, #8
 800abfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac02:	e076      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac04:	2310      	movs	r3, #16
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac0a:	e072      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a35      	ldr	r2, [pc, #212]	; (800ace8 <UART_SetConfig+0x2f4>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d12a      	bne.n	800ac6c <UART_SetConfig+0x278>
 800ac16:	4b30      	ldr	r3, [pc, #192]	; (800acd8 <UART_SetConfig+0x2e4>)
 800ac18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac24:	d01a      	beq.n	800ac5c <UART_SetConfig+0x268>
 800ac26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac2a:	d81b      	bhi.n	800ac64 <UART_SetConfig+0x270>
 800ac2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac30:	d00c      	beq.n	800ac4c <UART_SetConfig+0x258>
 800ac32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac36:	d815      	bhi.n	800ac64 <UART_SetConfig+0x270>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <UART_SetConfig+0x250>
 800ac3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac40:	d008      	beq.n	800ac54 <UART_SetConfig+0x260>
 800ac42:	e00f      	b.n	800ac64 <UART_SetConfig+0x270>
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac4a:	e052      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac52:	e04e      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac54:	2304      	movs	r3, #4
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5a:	e04a      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac62:	e046      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac64:	2310      	movs	r3, #16
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6a:	e042      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a17      	ldr	r2, [pc, #92]	; (800acd0 <UART_SetConfig+0x2dc>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d13a      	bne.n	800acec <UART_SetConfig+0x2f8>
 800ac76:	4b18      	ldr	r3, [pc, #96]	; (800acd8 <UART_SetConfig+0x2e4>)
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac84:	d01a      	beq.n	800acbc <UART_SetConfig+0x2c8>
 800ac86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac8a:	d81b      	bhi.n	800acc4 <UART_SetConfig+0x2d0>
 800ac8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac90:	d00c      	beq.n	800acac <UART_SetConfig+0x2b8>
 800ac92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac96:	d815      	bhi.n	800acc4 <UART_SetConfig+0x2d0>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <UART_SetConfig+0x2b0>
 800ac9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aca0:	d008      	beq.n	800acb4 <UART_SetConfig+0x2c0>
 800aca2:	e00f      	b.n	800acc4 <UART_SetConfig+0x2d0>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acaa:	e022      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800acac:	2302      	movs	r3, #2
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acb2:	e01e      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800acb4:	2304      	movs	r3, #4
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acba:	e01a      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800acbc:	2308      	movs	r3, #8
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acc2:	e016      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800acc4:	2310      	movs	r3, #16
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acca:	e012      	b.n	800acf2 <UART_SetConfig+0x2fe>
 800accc:	cfff69f3 	.word	0xcfff69f3
 800acd0:	40008000 	.word	0x40008000
 800acd4:	40013800 	.word	0x40013800
 800acd8:	40021000 	.word	0x40021000
 800acdc:	40004400 	.word	0x40004400
 800ace0:	40004800 	.word	0x40004800
 800ace4:	40004c00 	.word	0x40004c00
 800ace8:	40005000 	.word	0x40005000
 800acec:	2310      	movs	r3, #16
 800acee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4aae      	ldr	r2, [pc, #696]	; (800afb0 <UART_SetConfig+0x5bc>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	f040 8097 	bne.w	800ae2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad02:	2b08      	cmp	r3, #8
 800ad04:	d823      	bhi.n	800ad4e <UART_SetConfig+0x35a>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <UART_SetConfig+0x318>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad4f 	.word	0x0800ad4f
 800ad14:	0800ad39 	.word	0x0800ad39
 800ad18:	0800ad4f 	.word	0x0800ad4f
 800ad1c:	0800ad3f 	.word	0x0800ad3f
 800ad20:	0800ad4f 	.word	0x0800ad4f
 800ad24:	0800ad4f 	.word	0x0800ad4f
 800ad28:	0800ad4f 	.word	0x0800ad4f
 800ad2c:	0800ad47 	.word	0x0800ad47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad30:	f7fa fa86 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 800ad34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad36:	e010      	b.n	800ad5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad38:	4b9e      	ldr	r3, [pc, #632]	; (800afb4 <UART_SetConfig+0x5c0>)
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad3c:	e00d      	b.n	800ad5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad3e:	f7fa f9e7 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800ad42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad44:	e009      	b.n	800ad5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad4c:	e005      	b.n	800ad5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 8130 	beq.w	800afc2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	4a94      	ldr	r2, [pc, #592]	; (800afb8 <UART_SetConfig+0x5c4>)
 800ad68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	4413      	add	r3, r2
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d305      	bcc.n	800ad92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d903      	bls.n	800ad9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad98:	e113      	b.n	800afc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	60bb      	str	r3, [r7, #8]
 800ada0:	60fa      	str	r2, [r7, #12]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	4a84      	ldr	r2, [pc, #528]	; (800afb8 <UART_SetConfig+0x5c4>)
 800ada8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adac:	b29b      	uxth	r3, r3
 800adae:	2200      	movs	r2, #0
 800adb0:	603b      	str	r3, [r7, #0]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adbc:	f7f5 ff0c 	bl	8000bd8 <__aeabi_uldivmod>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4610      	mov	r0, r2
 800adc6:	4619      	mov	r1, r3
 800adc8:	f04f 0200 	mov.w	r2, #0
 800adcc:	f04f 0300 	mov.w	r3, #0
 800add0:	020b      	lsls	r3, r1, #8
 800add2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800add6:	0202      	lsls	r2, r0, #8
 800add8:	6979      	ldr	r1, [r7, #20]
 800adda:	6849      	ldr	r1, [r1, #4]
 800addc:	0849      	lsrs	r1, r1, #1
 800adde:	2000      	movs	r0, #0
 800ade0:	460c      	mov	r4, r1
 800ade2:	4605      	mov	r5, r0
 800ade4:	eb12 0804 	adds.w	r8, r2, r4
 800ade8:	eb43 0905 	adc.w	r9, r3, r5
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	469a      	mov	sl, r3
 800adf4:	4693      	mov	fp, r2
 800adf6:	4652      	mov	r2, sl
 800adf8:	465b      	mov	r3, fp
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 feeb 	bl	8000bd8 <__aeabi_uldivmod>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4613      	mov	r3, r2
 800ae08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae10:	d308      	bcc.n	800ae24 <UART_SetConfig+0x430>
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae18:	d204      	bcs.n	800ae24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6a3a      	ldr	r2, [r7, #32]
 800ae20:	60da      	str	r2, [r3, #12]
 800ae22:	e0ce      	b.n	800afc2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae2a:	e0ca      	b.n	800afc2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae34:	d166      	bne.n	800af04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ae36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d827      	bhi.n	800ae8e <UART_SetConfig+0x49a>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x450>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae71 	.word	0x0800ae71
 800ae4c:	0800ae79 	.word	0x0800ae79
 800ae50:	0800ae8f 	.word	0x0800ae8f
 800ae54:	0800ae7f 	.word	0x0800ae7f
 800ae58:	0800ae8f 	.word	0x0800ae8f
 800ae5c:	0800ae8f 	.word	0x0800ae8f
 800ae60:	0800ae8f 	.word	0x0800ae8f
 800ae64:	0800ae87 	.word	0x0800ae87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae68:	f7fa f9ea 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 800ae6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae6e:	e014      	b.n	800ae9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae70:	f7fa f9fc 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 800ae74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae76:	e010      	b.n	800ae9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae78:	4b4e      	ldr	r3, [pc, #312]	; (800afb4 <UART_SetConfig+0x5c0>)
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae7c:	e00d      	b.n	800ae9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae7e:	f7fa f947 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800ae82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae84:	e009      	b.n	800ae9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae8c:	e005      	b.n	800ae9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 8090 	beq.w	800afc2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	4a44      	ldr	r2, [pc, #272]	; (800afb8 <UART_SetConfig+0x5c4>)
 800aea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeac:	461a      	mov	r2, r3
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeb4:	005a      	lsls	r2, r3, #1
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	441a      	add	r2, r3
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	2b0f      	cmp	r3, #15
 800aecc:	d916      	bls.n	800aefc <UART_SetConfig+0x508>
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed4:	d212      	bcs.n	800aefc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f023 030f 	bic.w	r3, r3, #15
 800aede:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	8bfa      	ldrh	r2, [r7, #30]
 800aef8:	60da      	str	r2, [r3, #12]
 800aefa:	e062      	b.n	800afc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af02:	e05e      	b.n	800afc2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d828      	bhi.n	800af5e <UART_SetConfig+0x56a>
 800af0c:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <UART_SetConfig+0x520>)
 800af0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af12:	bf00      	nop
 800af14:	0800af39 	.word	0x0800af39
 800af18:	0800af41 	.word	0x0800af41
 800af1c:	0800af49 	.word	0x0800af49
 800af20:	0800af5f 	.word	0x0800af5f
 800af24:	0800af4f 	.word	0x0800af4f
 800af28:	0800af5f 	.word	0x0800af5f
 800af2c:	0800af5f 	.word	0x0800af5f
 800af30:	0800af5f 	.word	0x0800af5f
 800af34:	0800af57 	.word	0x0800af57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af38:	f7fa f982 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 800af3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af3e:	e014      	b.n	800af6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af40:	f7fa f994 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 800af44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af46:	e010      	b.n	800af6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af48:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <UART_SetConfig+0x5c0>)
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af4c:	e00d      	b.n	800af6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af4e:	f7fa f8df 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800af52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af54:	e009      	b.n	800af6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af5c:	e005      	b.n	800af6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af68:	bf00      	nop
    }

    if (pclk != 0U)
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d028      	beq.n	800afc2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	4a10      	ldr	r2, [pc, #64]	; (800afb8 <UART_SetConfig+0x5c4>)
 800af76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	441a      	add	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d910      	bls.n	800afbc <UART_SetConfig+0x5c8>
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa0:	d20c      	bcs.n	800afbc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60da      	str	r2, [r3, #12]
 800afac:	e009      	b.n	800afc2 <UART_SetConfig+0x5ce>
 800afae:	bf00      	nop
 800afb0:	40008000 	.word	0x40008000
 800afb4:	00f42400 	.word	0x00f42400
 800afb8:	080131c0 	.word	0x080131c0
      }
      else
      {
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2200      	movs	r2, #0
 800afd6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2200      	movs	r2, #0
 800afdc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800afde:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3730      	adds	r7, #48	; 0x30
 800afe6:	46bd      	mov	sp, r7
 800afe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800afec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01a      	beq.n	800b102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ea:	d10a      	bne.n	800b102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	605a      	str	r2, [r3, #4]
  }
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af02      	add	r7, sp, #8
 800b136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b140:	f7f7 fae6 	bl	8002710 <HAL_GetTick>
 800b144:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b08      	cmp	r3, #8
 800b152:	d10e      	bne.n	800b172 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f82f 	bl	800b1c6 <UART_WaitOnFlagUntilTimeout>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e025      	b.n	800b1be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d10e      	bne.n	800b19e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f819 	bl	800b1c6 <UART_WaitOnFlagUntilTimeout>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e00f      	b.n	800b1be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b09c      	sub	sp, #112	; 0x70
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	603b      	str	r3, [r7, #0]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1d6:	e0a9      	b.n	800b32c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1de:	f000 80a5 	beq.w	800b32c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1e2:	f7f7 fa95 	bl	8002710 <HAL_GetTick>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d302      	bcc.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d140      	bne.n	800b27a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b20c:	667b      	str	r3, [r7, #100]	; 0x64
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b218:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b21c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e6      	bne.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3308      	adds	r3, #8
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f023 0301 	bic.w	r3, r3, #1
 800b240:	663b      	str	r3, [r7, #96]	; 0x60
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b24a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b24c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e5      	bne.n	800b22a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2220      	movs	r2, #32
 800b262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e069      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	d051      	beq.n	800b32c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b296:	d149      	bne.n	800b32c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	e853 3f00 	ldrex	r3, [r3]
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e6      	bne.n	800b2a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2f4:	623a      	str	r2, [r7, #32]
 800b2f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	6a3a      	ldr	r2, [r7, #32]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	61bb      	str	r3, [r7, #24]
   return(result);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2220      	movs	r2, #32
 800b30c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e010      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69da      	ldr	r2, [r3, #28]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	4013      	ands	r3, r2
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	429a      	cmp	r2, r3
 800b33a:	bf0c      	ite	eq
 800b33c:	2301      	moveq	r3, #1
 800b33e:	2300      	movne	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	461a      	mov	r2, r3
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	429a      	cmp	r2, r3
 800b348:	f43f af46 	beq.w	800b1d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3770      	adds	r7, #112	; 0x70
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b356:	b480      	push	{r7}
 800b358:	b095      	sub	sp, #84	; 0x54
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37c:	643b      	str	r3, [r7, #64]	; 0x40
 800b37e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3a6:	f023 0301 	bic.w	r3, r3, #1
 800b3aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e3      	bne.n	800b390 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d118      	bne.n	800b402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f023 0310 	bic.w	r3, r3, #16
 800b3e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e6      	bne.n	800b3d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b416:	bf00      	nop
 800b418:	3754      	adds	r7, #84	; 0x54
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff fac1 	bl	800a9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b088      	sub	sp, #32
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	60bb      	str	r3, [r7, #8]
   return(result);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b46a:	61fb      	str	r3, [r7, #28]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	461a      	mov	r2, r3
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6979      	ldr	r1, [r7, #20]
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	613b      	str	r3, [r7, #16]
   return(result);
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e6      	bne.n	800b456 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fa8c 	bl	800a9b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49c:	bf00      	nop
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d101      	bne.n	800b4f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e027      	b.n	800b546 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2224      	movs	r2, #36	; 0x24
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f022 0201 	bic.w	r2, r2, #1
 800b51c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b524:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b562:	2b01      	cmp	r3, #1
 800b564:	d101      	bne.n	800b56a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b566:	2302      	movs	r3, #2
 800b568:	e02d      	b.n	800b5c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2224      	movs	r2, #36	; 0x24
 800b576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f022 0201 	bic.w	r2, r2, #1
 800b590:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f850 	bl	800b64c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d101      	bne.n	800b5e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	e02d      	b.n	800b642 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2224      	movs	r2, #36	; 0x24
 800b5f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f022 0201 	bic.w	r2, r2, #1
 800b60c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f812 	bl	800b64c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2220      	movs	r2, #32
 800b634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d108      	bne.n	800b66e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b66c:	e031      	b.n	800b6d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b66e:	2308      	movs	r3, #8
 800b670:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b672:	2308      	movs	r3, #8
 800b674:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	0e5b      	lsrs	r3, r3, #25
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	f003 0307 	and.w	r3, r3, #7
 800b684:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	0f5b      	lsrs	r3, r3, #29
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	7b3a      	ldrb	r2, [r7, #12]
 800b69a:	4911      	ldr	r1, [pc, #68]	; (800b6e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b69c:	5c8a      	ldrb	r2, [r1, r2]
 800b69e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6a2:	7b3a      	ldrb	r2, [r7, #12]
 800b6a4:	490f      	ldr	r1, [pc, #60]	; (800b6e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b6a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	7b7a      	ldrb	r2, [r7, #13]
 800b6b8:	4909      	ldr	r1, [pc, #36]	; (800b6e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b6ba:	5c8a      	ldrb	r2, [r1, r2]
 800b6bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6c0:	7b7a      	ldrb	r2, [r7, #13]
 800b6c2:	4908      	ldr	r1, [pc, #32]	; (800b6e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b6c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	080131d8 	.word	0x080131d8
 800b6e4:	080131e0 	.word	0x080131e0

0800b6e8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	f107 001c 	add.w	r0, r7, #28
 800b6f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b6fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b700:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b702:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b706:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b70a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b70e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	4b07      	ldr	r3, [pc, #28]	; (800b738 <SDMMC_Init+0x50>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	431a      	orrs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	b004      	add	sp, #16
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	ffc02c00 	.word	0xffc02c00

0800b73c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f043 0203 	orr.w	r2, r3, #3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b78c:	2002      	movs	r0, #2
 800b78e:	f7f6 ffcb 	bl	8002728 <HAL_Delay>

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0303 	and.w	r3, r3, #3
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b7dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b7e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <SDMMC_SendCommand+0x50>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	fffee0c0 	.word	0xfffee0c0

0800b80c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	b2db      	uxtb	r3, r3
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b826:	b480      	push	{r7}
 800b828:	b085      	sub	sp, #20
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3314      	adds	r3, #20
 800b834:	461a      	mov	r2, r3
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b872:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b878:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b87e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	431a      	orrs	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b896:	2300      	movs	r3, #0

}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b8b2:	2310      	movs	r3, #16
 800b8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8c6:	f107 0308 	add.w	r3, r7, #8
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff ff73 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b8d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d6:	2110      	movs	r1, #16
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa7b 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800b8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3720      	adds	r7, #32
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b088      	sub	sp, #32
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b8f8:	2311      	movs	r3, #17
 800b8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b90a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b90c:	f107 0308 	add.w	r3, r7, #8
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff ff50 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b918:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91c:	2111      	movs	r1, #17
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa58 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800b924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b926:	69fb      	ldr	r3, [r7, #28]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3720      	adds	r7, #32
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b93e:	2312      	movs	r3, #18
 800b940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b942:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b948:	2300      	movs	r3, #0
 800b94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b952:	f107 0308 	add.w	r3, r7, #8
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff ff2d 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b962:	2112      	movs	r1, #18
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fa35 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800b96a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96c:	69fb      	ldr	r3, [r7, #28]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b088      	sub	sp, #32
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b984:	2318      	movs	r3, #24
 800b986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b998:	f107 0308 	add.w	r3, r7, #8
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff ff0a 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a8:	2118      	movs	r1, #24
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa12 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800b9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b2:	69fb      	ldr	r3, [r7, #28]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b9ca:	2319      	movs	r3, #25
 800b9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9de:	f107 0308 	add.w	r3, r7, #8
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff fee7 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b9ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ee:	2119      	movs	r1, #25
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f9ef 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800b9f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ba10:	230c      	movs	r3, #12
 800ba12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba22:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff feb8 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ba48:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <SDMMC_CmdStopTransfer+0x68>)
 800ba4a:	210c      	movs	r1, #12
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f9c1 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800ba52:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800ba60:	69fb      	ldr	r3, [r7, #28]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	05f5e100 	.word	0x05f5e100

0800ba70 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba80:	2307      	movs	r3, #7
 800ba82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba88:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba92:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba94:	f107 0310 	add.w	r3, r7, #16
 800ba98:	4619      	mov	r1, r3
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fe8c 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800baa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa4:	2107      	movs	r1, #7
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f994 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800baac:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3728      	adds	r7, #40	; 0x28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bac4:	2300      	movs	r3, #0
 800bac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bac8:	2300      	movs	r3, #0
 800baca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bad4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fe6b 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fbb8 	bl	800c258 <SDMMC_GetCmdError>
 800bae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baea:	69fb      	ldr	r3, [r7, #28]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3720      	adds	r7, #32
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bafc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bb00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bb02:	2308      	movs	r3, #8
 800bb04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb16:	f107 0308 	add.w	r3, r7, #8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fe4b 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fb4a 	bl	800c1bc <SDMMC_GetCmdResp7>
 800bb28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3720      	adds	r7, #32
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bb42:	2337      	movs	r3, #55	; 0x37
 800bb44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fe2b 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb66:	2137      	movs	r1, #55	; 0x37
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f933 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bb6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb70:	69fb      	ldr	r3, [r7, #28]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3720      	adds	r7, #32
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b088      	sub	sp, #32
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb88:	2329      	movs	r3, #41	; 0x29
 800bb8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fe08 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fa4f 	bl	800c04c <SDMMC_GetCmdResp3>
 800bbae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b088      	sub	sp, #32
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bbc8:	2306      	movs	r3, #6
 800bbca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbdc:	f107 0308 	add.w	r3, r7, #8
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff fde8 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bbe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbec:	2106      	movs	r1, #6
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f8f0 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bbf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf6:	69fb      	ldr	r3, [r7, #28]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3720      	adds	r7, #32
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bc0c:	2333      	movs	r3, #51	; 0x33
 800bc0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc20:	f107 0308 	add.w	r3, r7, #8
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fdc6 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bc2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc30:	2133      	movs	r1, #51	; 0x33
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f8ce 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bc38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bc50:	2302      	movs	r3, #2
 800bc52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc54:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc64:	f107 0308 	add.w	r3, r7, #8
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff fda4 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f9a1 	bl	800bfb8 <SDMMC_GetCmdResp2>
 800bc76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc78:	69fb      	ldr	r3, [r7, #28]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3720      	adds	r7, #32
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b088      	sub	sp, #32
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc90:	2309      	movs	r3, #9
 800bc92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc94:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca4:	f107 0308 	add.w	r3, r7, #8
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7ff fd84 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f981 	bl	800bfb8 <SDMMC_GetCmdResp2>
 800bcb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3720      	adds	r7, #32
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b088      	sub	sp, #32
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fd64 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	2103      	movs	r1, #3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f9e9 	bl	800c0cc <SDMMC_GetCmdResp6>
 800bcfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3720      	adds	r7, #32
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b088      	sub	sp, #32
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bd14:	230d      	movs	r3, #13
 800bd16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd28:	f107 0308 	add.w	r3, r7, #8
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fd42 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd38:	210d      	movs	r1, #13
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f84a 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bd58:	230d      	movs	r3, #13
 800bd5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd6c:	f107 0308 	add.w	r3, r7, #8
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff fd20 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bd78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7c:	210d      	movs	r1, #13
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f828 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bd84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd86:	69fb      	ldr	r3, [r7, #28]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bd9c:	230b      	movs	r3, #11
 800bd9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bda4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdb0:	f107 0308 	add.w	r3, r7, #8
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fcfe 	bl	800b7b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc0:	210b      	movs	r1, #11
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f806 	bl	800bdd4 <SDMMC_GetCmdResp1>
 800bdc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdca:	69fb      	ldr	r3, [r7, #28]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3720      	adds	r7, #32
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	460b      	mov	r3, r1
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bde2:	4b70      	ldr	r3, [pc, #448]	; (800bfa4 <SDMMC_GetCmdResp1+0x1d0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a70      	ldr	r2, [pc, #448]	; (800bfa8 <SDMMC_GetCmdResp1+0x1d4>)
 800bde8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdec:	0a5a      	lsrs	r2, r3, #9
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	fb02 f303 	mul.w	r3, r2, r3
 800bdf4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	1e5a      	subs	r2, r3, #1
 800bdfa:	61fa      	str	r2, [r7, #28]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be04:	e0c9      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	4b67      	ldr	r3, [pc, #412]	; (800bfac <SDMMC_GetCmdResp1+0x1d8>)
 800be10:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0ef      	beq.n	800bdf6 <SDMMC_GetCmdResp1+0x22>
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1ea      	bne.n	800bdf6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d004      	beq.n	800be36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2204      	movs	r2, #4
 800be30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be32:	2304      	movs	r3, #4
 800be34:	e0b1      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d004      	beq.n	800be4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be48:	2301      	movs	r3, #1
 800be4a:	e0a6      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4a58      	ldr	r2, [pc, #352]	; (800bfb0 <SDMMC_GetCmdResp1+0x1dc>)
 800be50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff fcda 	bl	800b80c <SDMMC_GetCommandResponse>
 800be58:	4603      	mov	r3, r0
 800be5a:	461a      	mov	r2, r3
 800be5c:	7afb      	ldrb	r3, [r7, #11]
 800be5e:	4293      	cmp	r3, r2
 800be60:	d001      	beq.n	800be66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be62:	2301      	movs	r3, #1
 800be64:	e099      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be66:	2100      	movs	r1, #0
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff fcdc 	bl	800b826 <SDMMC_GetResponse>
 800be6e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	4b50      	ldr	r3, [pc, #320]	; (800bfb4 <SDMMC_GetCmdResp1+0x1e0>)
 800be74:	4013      	ands	r3, r2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e08d      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	da02      	bge.n	800be8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be88:	e087      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be94:	2340      	movs	r3, #64	; 0x40
 800be96:	e080      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bea2:	2380      	movs	r3, #128	; 0x80
 800bea4:	e079      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800beb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beb4:	e071      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec4:	e069      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed4:	e061      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bee4:	e059      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef4:	e051      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800befc:	2b00      	cmp	r3, #0
 800befe:	d002      	beq.n	800bf06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf04:	e049      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf14:	e041      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bf20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf24:	e039      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf34:	e031      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bf40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bf44:	e029      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf54:	e021      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf64:	e019      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf74:	e011      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bf80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf84:	e009      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f003 0308 	and.w	r3, r3, #8
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bf90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf94:	e001      	b.n	800bf9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000004 	.word	0x20000004
 800bfa8:	10624dd3 	.word	0x10624dd3
 800bfac:	00200045 	.word	0x00200045
 800bfb0:	002000c5 	.word	0x002000c5
 800bfb4:	fdffe008 	.word	0xfdffe008

0800bfb8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfc0:	4b1f      	ldr	r3, [pc, #124]	; (800c040 <SDMMC_GetCmdResp2+0x88>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a1f      	ldr	r2, [pc, #124]	; (800c044 <SDMMC_GetCmdResp2+0x8c>)
 800bfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfca:	0a5b      	lsrs	r3, r3, #9
 800bfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd0:	fb02 f303 	mul.w	r3, r2, r3
 800bfd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	1e5a      	subs	r2, r3, #1
 800bfda:	60fa      	str	r2, [r7, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfe4:	e026      	b.n	800c034 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d0ef      	beq.n	800bfd6 <SDMMC_GetCmdResp2+0x1e>
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1ea      	bne.n	800bfd6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2204      	movs	r2, #4
 800c010:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c012:	2304      	movs	r3, #4
 800c014:	e00e      	b.n	800c034 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d004      	beq.n	800c02c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c028:	2301      	movs	r3, #1
 800c02a:	e003      	b.n	800c034 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a06      	ldr	r2, [pc, #24]	; (800c048 <SDMMC_GetCmdResp2+0x90>)
 800c030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	20000004 	.word	0x20000004
 800c044:	10624dd3 	.word	0x10624dd3
 800c048:	002000c5 	.word	0x002000c5

0800c04c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <SDMMC_GetCmdResp3+0x74>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a1a      	ldr	r2, [pc, #104]	; (800c0c4 <SDMMC_GetCmdResp3+0x78>)
 800c05a:	fba2 2303 	umull	r2, r3, r2, r3
 800c05e:	0a5b      	lsrs	r3, r3, #9
 800c060:	f241 3288 	movw	r2, #5000	; 0x1388
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	60fa      	str	r2, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c078:	e01b      	b.n	800c0b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0ef      	beq.n	800c06a <SDMMC_GetCmdResp3+0x1e>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1ea      	bne.n	800c06a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d004      	beq.n	800c0aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2204      	movs	r2, #4
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	e003      	b.n	800c0b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a06      	ldr	r2, [pc, #24]	; (800c0c8 <SDMMC_GetCmdResp3+0x7c>)
 800c0ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	20000004 	.word	0x20000004
 800c0c4:	10624dd3 	.word	0x10624dd3
 800c0c8:	002000c5 	.word	0x002000c5

0800c0cc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0da:	4b35      	ldr	r3, [pc, #212]	; (800c1b0 <SDMMC_GetCmdResp6+0xe4>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a35      	ldr	r2, [pc, #212]	; (800c1b4 <SDMMC_GetCmdResp6+0xe8>)
 800c0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e4:	0a5b      	lsrs	r3, r3, #9
 800c0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0ea:	fb02 f303 	mul.w	r3, r2, r3
 800c0ee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	1e5a      	subs	r2, r3, #1
 800c0f4:	61fa      	str	r2, [r7, #28]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0fe:	e052      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c104:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0ef      	beq.n	800c0f0 <SDMMC_GetCmdResp6+0x24>
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1ea      	bne.n	800c0f0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2204      	movs	r2, #4
 800c12a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c12c:	2304      	movs	r3, #4
 800c12e:	e03a      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d004      	beq.n	800c146 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c142:	2301      	movs	r3, #1
 800c144:	e02f      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fb60 	bl	800b80c <SDMMC_GetCommandResponse>
 800c14c:	4603      	mov	r3, r0
 800c14e:	461a      	mov	r2, r3
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	4293      	cmp	r3, r2
 800c154:	d001      	beq.n	800c15a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c156:	2301      	movs	r3, #1
 800c158:	e025      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4a16      	ldr	r2, [pc, #88]	; (800c1b8 <SDMMC_GetCmdResp6+0xec>)
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c160:	2100      	movs	r1, #0
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff fb5f 	bl	800b826 <SDMMC_GetResponse>
 800c168:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d106      	bne.n	800c182 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	0c1b      	lsrs	r3, r3, #16
 800c178:	b29a      	uxth	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c17e:	2300      	movs	r3, #0
 800c180:	e011      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c18c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c190:	e009      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1a0:	e001      	b.n	800c1a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000004 	.word	0x20000004
 800c1b4:	10624dd3 	.word	0x10624dd3
 800c1b8:	002000c5 	.word	0x002000c5

0800c1bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1c4:	4b22      	ldr	r3, [pc, #136]	; (800c250 <SDMMC_GetCmdResp7+0x94>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a22      	ldr	r2, [pc, #136]	; (800c254 <SDMMC_GetCmdResp7+0x98>)
 800c1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ce:	0a5b      	lsrs	r3, r3, #9
 800c1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1d4:	fb02 f303 	mul.w	r3, r2, r3
 800c1d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	1e5a      	subs	r2, r3, #1
 800c1de:	60fa      	str	r2, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1e8:	e02c      	b.n	800c244 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d0ef      	beq.n	800c1da <SDMMC_GetCmdResp7+0x1e>
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1ea      	bne.n	800c1da <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d004      	beq.n	800c21a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2204      	movs	r2, #4
 800c214:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c216:	2304      	movs	r3, #4
 800c218:	e014      	b.n	800c244 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	d004      	beq.n	800c230 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e009      	b.n	800c244 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2240      	movs	r2, #64	; 0x40
 800c240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c242:	2300      	movs	r3, #0

}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20000004 	.word	0x20000004
 800c254:	10624dd3 	.word	0x10624dd3

0800c258 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c260:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <SDMMC_GetCmdError+0x50>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a11      	ldr	r2, [pc, #68]	; (800c2ac <SDMMC_GetCmdError+0x54>)
 800c266:	fba2 2303 	umull	r2, r3, r2, r3
 800c26a:	0a5b      	lsrs	r3, r3, #9
 800c26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c270:	fb02 f303 	mul.w	r3, r2, r3
 800c274:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	1e5a      	subs	r2, r3, #1
 800c27a:	60fa      	str	r2, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c284:	e009      	b.n	800c29a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0f1      	beq.n	800c276 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <SDMMC_GetCmdError+0x58>)
 800c296:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000004 	.word	0x20000004
 800c2ac:	10624dd3 	.word	0x10624dd3
 800c2b0:	002000c5 	.word	0x002000c5

0800c2b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	f107 001c 	add.w	r0, r7, #28
 800c2c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 faf6 	bl	800d8c4 <USB_CoreReset>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	639a      	str	r2, [r3, #56]	; 0x38
 800c2ee:	e005      	b.n	800c2fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c308:	b004      	add	sp, #16
 800c30a:	4770      	bx	lr

0800c30c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d165      	bne.n	800c3ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	4a3e      	ldr	r2, [pc, #248]	; (800c41c <USB_SetTurnaroundTime+0x110>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d906      	bls.n	800c336 <USB_SetTurnaroundTime+0x2a>
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	4a3d      	ldr	r2, [pc, #244]	; (800c420 <USB_SetTurnaroundTime+0x114>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d202      	bcs.n	800c336 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c330:	230f      	movs	r3, #15
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	e05c      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4a39      	ldr	r2, [pc, #228]	; (800c420 <USB_SetTurnaroundTime+0x114>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d306      	bcc.n	800c34c <USB_SetTurnaroundTime+0x40>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	4a38      	ldr	r2, [pc, #224]	; (800c424 <USB_SetTurnaroundTime+0x118>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d202      	bcs.n	800c34c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c346:	230e      	movs	r3, #14
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	e051      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	4a35      	ldr	r2, [pc, #212]	; (800c424 <USB_SetTurnaroundTime+0x118>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d306      	bcc.n	800c362 <USB_SetTurnaroundTime+0x56>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	4a34      	ldr	r2, [pc, #208]	; (800c428 <USB_SetTurnaroundTime+0x11c>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d202      	bcs.n	800c362 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c35c:	230d      	movs	r3, #13
 800c35e:	617b      	str	r3, [r7, #20]
 800c360:	e046      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	4a30      	ldr	r2, [pc, #192]	; (800c428 <USB_SetTurnaroundTime+0x11c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d306      	bcc.n	800c378 <USB_SetTurnaroundTime+0x6c>
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	4a2f      	ldr	r2, [pc, #188]	; (800c42c <USB_SetTurnaroundTime+0x120>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d802      	bhi.n	800c378 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c372:	230c      	movs	r3, #12
 800c374:	617b      	str	r3, [r7, #20]
 800c376:	e03b      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	4a2c      	ldr	r2, [pc, #176]	; (800c42c <USB_SetTurnaroundTime+0x120>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d906      	bls.n	800c38e <USB_SetTurnaroundTime+0x82>
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	4a2b      	ldr	r2, [pc, #172]	; (800c430 <USB_SetTurnaroundTime+0x124>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d802      	bhi.n	800c38e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c388:	230b      	movs	r3, #11
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	e030      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	4a27      	ldr	r2, [pc, #156]	; (800c430 <USB_SetTurnaroundTime+0x124>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d906      	bls.n	800c3a4 <USB_SetTurnaroundTime+0x98>
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	4a26      	ldr	r2, [pc, #152]	; (800c434 <USB_SetTurnaroundTime+0x128>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d802      	bhi.n	800c3a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c39e:	230a      	movs	r3, #10
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	e025      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	4a23      	ldr	r2, [pc, #140]	; (800c434 <USB_SetTurnaroundTime+0x128>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d906      	bls.n	800c3ba <USB_SetTurnaroundTime+0xae>
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	4a22      	ldr	r2, [pc, #136]	; (800c438 <USB_SetTurnaroundTime+0x12c>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d202      	bcs.n	800c3ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c3b4:	2309      	movs	r3, #9
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e01a      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <USB_SetTurnaroundTime+0x12c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d306      	bcc.n	800c3d0 <USB_SetTurnaroundTime+0xc4>
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	4a1d      	ldr	r2, [pc, #116]	; (800c43c <USB_SetTurnaroundTime+0x130>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d802      	bhi.n	800c3d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	617b      	str	r3, [r7, #20]
 800c3ce:	e00f      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4a1a      	ldr	r2, [pc, #104]	; (800c43c <USB_SetTurnaroundTime+0x130>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d906      	bls.n	800c3e6 <USB_SetTurnaroundTime+0xda>
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4a19      	ldr	r2, [pc, #100]	; (800c440 <USB_SetTurnaroundTime+0x134>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d202      	bcs.n	800c3e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c3e0:	2307      	movs	r3, #7
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e004      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c3e6:	2306      	movs	r3, #6
 800c3e8:	617b      	str	r3, [r7, #20]
 800c3ea:	e001      	b.n	800c3f0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c3ec:	2309      	movs	r3, #9
 800c3ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	029b      	lsls	r3, r3, #10
 800c404:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c408:	431a      	orrs	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	371c      	adds	r7, #28
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	00d8acbf 	.word	0x00d8acbf
 800c420:	00e4e1c0 	.word	0x00e4e1c0
 800c424:	00f42400 	.word	0x00f42400
 800c428:	01067380 	.word	0x01067380
 800c42c:	011a499f 	.word	0x011a499f
 800c430:	01312cff 	.word	0x01312cff
 800c434:	014ca43f 	.word	0x014ca43f
 800c438:	016e3600 	.word	0x016e3600
 800c43c:	01a6ab1f 	.word	0x01a6ab1f
 800c440:	01e84800 	.word	0x01e84800

0800c444 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f043 0201 	orr.w	r2, r3, #1
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f023 0201 	bic.w	r2, r3, #1
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d115      	bne.n	800c4d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	f7f6 f936 	bl	8002728 <HAL_Delay>
      ms++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 f985 	bl	800d7d2 <USB_GetMode>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d01e      	beq.n	800c50c <USB_SetCurrentMode+0x84>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b31      	cmp	r3, #49	; 0x31
 800c4d2:	d9f0      	bls.n	800c4b6 <USB_SetCurrentMode+0x2e>
 800c4d4:	e01a      	b.n	800c50c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d115      	bne.n	800c508 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f7f6 f91d 	bl	8002728 <HAL_Delay>
      ms++;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 f96c 	bl	800d7d2 <USB_GetMode>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d005      	beq.n	800c50c <USB_SetCurrentMode+0x84>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b31      	cmp	r3, #49	; 0x31
 800c504:	d9f0      	bls.n	800c4e8 <USB_SetCurrentMode+0x60>
 800c506:	e001      	b.n	800c50c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e005      	b.n	800c518 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b32      	cmp	r3, #50	; 0x32
 800c510:	d101      	bne.n	800c516 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e000      	b.n	800c518 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c520:	b084      	sub	sp, #16
 800c522:	b580      	push	{r7, lr}
 800c524:	b086      	sub	sp, #24
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c52e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c53a:	2300      	movs	r3, #0
 800c53c:	613b      	str	r3, [r7, #16]
 800c53e:	e009      	b.n	800c554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	3340      	adds	r3, #64	; 0x40
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	2200      	movs	r2, #0
 800c54c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b0e      	cmp	r3, #14
 800c558:	d9f2      	bls.n	800c540 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11c      	bne.n	800c59a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c56e:	f043 0302 	orr.w	r3, r3, #2
 800c572:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c578:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	e005      	b.n	800c5a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	680b      	ldr	r3, [r1, #0]
 800c5c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c5c6:	2103      	movs	r1, #3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f959 	bl	800c880 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c5ce:	2110      	movs	r1, #16
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f8f1 	bl	800c7b8 <USB_FlushTxFifo>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f91d 	bl	800c820 <USB_FlushRxFifo>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c602:	461a      	mov	r2, r3
 800c604:	2300      	movs	r3, #0
 800c606:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c60e:	461a      	mov	r2, r3
 800c610:	2300      	movs	r3, #0
 800c612:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c614:	2300      	movs	r3, #0
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	e043      	b.n	800c6a2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	015a      	lsls	r2, r3, #5
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4413      	add	r3, r2
 800c622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c62c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c630:	d118      	bne.n	800c664 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c644:	461a      	mov	r2, r3
 800c646:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e013      	b.n	800c676 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4413      	add	r3, r2
 800c656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65a:	461a      	mov	r2, r3
 800c65c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	e008      	b.n	800c676 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c670:	461a      	mov	r2, r3
 800c672:	2300      	movs	r3, #0
 800c674:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c682:	461a      	mov	r2, r3
 800c684:	2300      	movs	r3, #0
 800c686:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c694:	461a      	mov	r2, r3
 800c696:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c69a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	613b      	str	r3, [r7, #16]
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d3b7      	bcc.n	800c61a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]
 800c6ae:	e043      	b.n	800c738 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6c6:	d118      	bne.n	800c6fa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	e013      	b.n	800c70c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	e008      	b.n	800c70c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c706:	461a      	mov	r2, r3
 800c708:	2300      	movs	r3, #0
 800c70a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	015a      	lsls	r2, r3, #5
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c718:	461a      	mov	r2, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72a:	461a      	mov	r2, r3
 800c72c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c730:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3301      	adds	r3, #1
 800c736:	613b      	str	r3, [r7, #16]
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d3b7      	bcc.n	800c6b0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c74e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c752:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c760:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	f043 0210 	orr.w	r2, r3, #16
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	699a      	ldr	r2, [r3, #24]
 800c772:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <USB_DevInit+0x294>)
 800c774:	4313      	orrs	r3, r2
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	f043 0208 	orr.w	r2, r3, #8
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d107      	bne.n	800c7a2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c79a:	f043 0304 	orr.w	r3, r3, #4
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7ae:	b004      	add	sp, #16
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	803c3800 	.word	0x803c3800

0800c7b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4a13      	ldr	r2, [pc, #76]	; (800c81c <USB_FlushTxFifo+0x64>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d901      	bls.n	800c7d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	e01b      	b.n	800c810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	daf2      	bge.n	800c7c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	019b      	lsls	r3, r3, #6
 800c7e8:	f043 0220 	orr.w	r2, r3, #32
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	4a08      	ldr	r2, [pc, #32]	; (800c81c <USB_FlushTxFifo+0x64>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d901      	bls.n	800c802 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e006      	b.n	800c810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0320 	and.w	r3, r3, #32
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	d0f0      	beq.n	800c7f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	00030d40 	.word	0x00030d40

0800c820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3301      	adds	r3, #1
 800c830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	4a11      	ldr	r2, [pc, #68]	; (800c87c <USB_FlushRxFifo+0x5c>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d901      	bls.n	800c83e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c83a:	2303      	movs	r3, #3
 800c83c:	e018      	b.n	800c870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	daf2      	bge.n	800c82c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2210      	movs	r2, #16
 800c84e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3301      	adds	r3, #1
 800c854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	4a08      	ldr	r2, [pc, #32]	; (800c87c <USB_FlushRxFifo+0x5c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d901      	bls.n	800c862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c85e:	2303      	movs	r3, #3
 800c860:	e006      	b.n	800c870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f003 0310 	and.w	r3, r3, #16
 800c86a:	2b10      	cmp	r3, #16
 800c86c:	d0f0      	beq.n	800c850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	00030d40 	.word	0x00030d40

0800c880 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	78fb      	ldrb	r3, [r7, #3]
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b087      	sub	sp, #28
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f003 0306 	and.w	r3, r3, #6
 800c8ca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d002      	beq.n	800c8d8 <USB_GetDevSpeed+0x26>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b06      	cmp	r3, #6
 800c8d6:	d102      	bne.n	800c8de <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	75fb      	strb	r3, [r7, #23]
 800c8dc:	e001      	b.n	800c8e2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c8de:	230f      	movs	r3, #15
 800c8e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d13a      	bne.n	800c982 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c912:	69da      	ldr	r2, [r3, #28]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 030f 	and.w	r3, r3, #15
 800c91c:	2101      	movs	r1, #1
 800c91e:	fa01 f303 	lsl.w	r3, r1, r3
 800c922:	b29b      	uxth	r3, r3
 800c924:	68f9      	ldr	r1, [r7, #12]
 800c926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c92a:	4313      	orrs	r3, r2
 800c92c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d155      	bne.n	800c9f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	791b      	ldrb	r3, [r3, #4]
 800c95e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c960:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	059b      	lsls	r3, r3, #22
 800c966:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c968:	4313      	orrs	r3, r2
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	440a      	add	r2, r1
 800c972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c97a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	e036      	b.n	800c9f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c988:	69da      	ldr	r2, [r3, #28]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	f003 030f 	and.w	r3, r3, #15
 800c992:	2101      	movs	r1, #1
 800c994:	fa01 f303 	lsl.w	r3, r1, r3
 800c998:	041b      	lsls	r3, r3, #16
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	015a      	lsls	r2, r3, #5
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d11a      	bne.n	800c9f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	791b      	ldrb	r3, [r3, #4]
 800c9d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	0151      	lsls	r1, r2, #5
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	440a      	add	r2, r1
 800c9e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d161      	bne.n	800cae0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca32:	d11f      	bne.n	800ca74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	015a      	lsls	r2, r3, #5
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	0151      	lsls	r1, r2, #5
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	440a      	add	r2, r1
 800ca6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	f003 030f 	and.w	r3, r3, #15
 800ca84:	2101      	movs	r1, #1
 800ca86:	fa01 f303 	lsl.w	r3, r1, r3
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	43db      	mvns	r3, r3
 800ca8e:	68f9      	ldr	r1, [r7, #12]
 800ca90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca94:	4013      	ands	r3, r2
 800ca96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9e:	69da      	ldr	r2, [r3, #28]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	f003 030f 	and.w	r3, r3, #15
 800caa8:	2101      	movs	r1, #1
 800caaa:	fa01 f303 	lsl.w	r3, r1, r3
 800caae:	b29b      	uxth	r3, r3
 800cab0:	43db      	mvns	r3, r3
 800cab2:	68f9      	ldr	r1, [r7, #12]
 800cab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cab8:	4013      	ands	r3, r2
 800caba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	0159      	lsls	r1, r3, #5
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	440b      	add	r3, r1
 800cad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad6:	4619      	mov	r1, r3
 800cad8:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <USB_DeactivateEndpoint+0x1b0>)
 800cada:	4013      	ands	r3, r2
 800cadc:	600b      	str	r3, [r1, #0]
 800cade:	e060      	b.n	800cba2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caf6:	d11f      	bne.n	800cb38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	015a      	lsls	r2, r3, #5
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4413      	add	r3, r2
 800cb00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	0151      	lsls	r1, r2, #5
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	440a      	add	r2, r1
 800cb0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	015a      	lsls	r2, r3, #5
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	0151      	lsls	r1, r2, #5
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	440a      	add	r2, r1
 800cb2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	f003 030f 	and.w	r3, r3, #15
 800cb48:	2101      	movs	r1, #1
 800cb4a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb4e:	041b      	lsls	r3, r3, #16
 800cb50:	43db      	mvns	r3, r3
 800cb52:	68f9      	ldr	r1, [r7, #12]
 800cb54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb58:	4013      	ands	r3, r2
 800cb5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb62:	69da      	ldr	r2, [r3, #28]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	f003 030f 	and.w	r3, r3, #15
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb72:	041b      	lsls	r3, r3, #16
 800cb74:	43db      	mvns	r3, r3
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	0159      	lsls	r1, r3, #5
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	440b      	add	r3, r1
 800cb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <USB_DeactivateEndpoint+0x1b4>)
 800cb9e:	4013      	ands	r3, r2
 800cba0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3714      	adds	r7, #20
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	ec337800 	.word	0xec337800
 800cbb4:	eff37800 	.word	0xeff37800

0800cbb8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	f040 810a 	bne.w	800cdea <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	699b      	ldr	r3, [r3, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d132      	bne.n	800cc44 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	0151      	lsls	r1, r2, #5
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	440a      	add	r2, r1
 800cbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	015a      	lsls	r2, r3, #5
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	4413      	add	r3, r2
 800cc0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	0151      	lsls	r1, r2, #5
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	440a      	add	r2, r1
 800cc18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	0151      	lsls	r1, r2, #5
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	440a      	add	r2, r1
 800cc38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc3c:	0cdb      	lsrs	r3, r3, #19
 800cc3e:	04db      	lsls	r3, r3, #19
 800cc40:	6113      	str	r3, [r2, #16]
 800cc42:	e074      	b.n	800cd2e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	0151      	lsls	r1, r2, #5
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	440a      	add	r2, r1
 800cc5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc5e:	0cdb      	lsrs	r3, r3, #19
 800cc60:	04db      	lsls	r3, r3, #19
 800cc62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	0151      	lsls	r1, r2, #5
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	440a      	add	r2, r1
 800cc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6999      	ldr	r1, [r3, #24]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	440b      	add	r3, r1
 800cca0:	1e59      	subs	r1, r3, #1
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ccaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ccac:	4b9e      	ldr	r3, [pc, #632]	; (800cf28 <USB_EPStartXfer+0x370>)
 800ccae:	400b      	ands	r3, r1
 800ccb0:	6939      	ldr	r1, [r7, #16]
 800ccb2:	0148      	lsls	r0, r1, #5
 800ccb4:	6979      	ldr	r1, [r7, #20]
 800ccb6:	4401      	add	r1, r0
 800ccb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cccc:	691a      	ldr	r2, [r3, #16]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccd6:	6939      	ldr	r1, [r7, #16]
 800ccd8:	0148      	lsls	r0, r1, #5
 800ccda:	6979      	ldr	r1, [r7, #20]
 800ccdc:	4401      	add	r1, r0
 800ccde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cce2:	4313      	orrs	r3, r2
 800cce4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	791b      	ldrb	r3, [r3, #4]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d11f      	bne.n	800cd2e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	0151      	lsls	r1, r2, #5
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	440a      	add	r2, r1
 800cd04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cd0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	0151      	lsls	r1, r2, #5
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	440a      	add	r2, r1
 800cd24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd2c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	015a      	lsls	r2, r3, #5
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	4413      	add	r3, r2
 800cd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	693a      	ldr	r2, [r7, #16]
 800cd3e:	0151      	lsls	r1, r2, #5
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	440a      	add	r2, r1
 800cd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd4c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	791b      	ldrb	r3, [r3, #4]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d015      	beq.n	800cd82 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 8106 	beq.w	800cf6c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 030f 	and.w	r3, r3, #15
 800cd70:	2101      	movs	r1, #1
 800cd72:	fa01 f303 	lsl.w	r3, r1, r3
 800cd76:	6979      	ldr	r1, [r7, #20]
 800cd78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	634b      	str	r3, [r1, #52]	; 0x34
 800cd80:	e0f4      	b.n	800cf6c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d110      	bne.n	800cdb4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	015a      	lsls	r2, r3, #5
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	4413      	add	r3, r2
 800cd9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	0151      	lsls	r1, r2, #5
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	440a      	add	r2, r1
 800cda8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	e00f      	b.n	800cdd4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	015a      	lsls	r2, r3, #5
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	0151      	lsls	r1, r2, #5
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	440a      	add	r2, r1
 800cdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdd2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	6919      	ldr	r1, [r3, #16]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	781a      	ldrb	r2, [r3, #0]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fa94 	bl	800d310 <USB_WritePacket>
 800cde8:	e0c0      	b.n	800cf6c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	0151      	lsls	r1, r2, #5
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	440a      	add	r2, r1
 800ce00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce04:	0cdb      	lsrs	r3, r3, #19
 800ce06:	04db      	lsls	r3, r3, #19
 800ce08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	015a      	lsls	r2, r3, #5
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	4413      	add	r3, r2
 800ce12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	0151      	lsls	r1, r2, #5
 800ce1c:	697a      	ldr	r2, [r7, #20]
 800ce1e:	440a      	add	r2, r1
 800ce20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d123      	bne.n	800ce7e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	015a      	lsls	r2, r3, #5
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce42:	691a      	ldr	r2, [r3, #16]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce4c:	6939      	ldr	r1, [r7, #16]
 800ce4e:	0148      	lsls	r0, r1, #5
 800ce50:	6979      	ldr	r1, [r7, #20]
 800ce52:	4401      	add	r1, r0
 800ce54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	0151      	lsls	r1, r2, #5
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	440a      	add	r2, r1
 800ce72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce7a:	6113      	str	r3, [r2, #16]
 800ce7c:	e037      	b.n	800ceee <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	1e5a      	subs	r2, r3, #1
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce92:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	89fa      	ldrh	r2, [r7, #14]
 800ce9a:	fb03 f202 	mul.w	r2, r3, r2
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	89fb      	ldrh	r3, [r7, #14]
 800ceb2:	04d9      	lsls	r1, r3, #19
 800ceb4:	4b1c      	ldr	r3, [pc, #112]	; (800cf28 <USB_EPStartXfer+0x370>)
 800ceb6:	400b      	ands	r3, r1
 800ceb8:	6939      	ldr	r1, [r7, #16]
 800ceba:	0148      	lsls	r0, r1, #5
 800cebc:	6979      	ldr	r1, [r7, #20]
 800cebe:	4401      	add	r1, r0
 800cec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cec4:	4313      	orrs	r3, r2
 800cec6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced4:	691a      	ldr	r2, [r3, #16]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cede:	6939      	ldr	r1, [r7, #16]
 800cee0:	0148      	lsls	r0, r1, #5
 800cee2:	6979      	ldr	r1, [r7, #20]
 800cee4:	4401      	add	r1, r0
 800cee6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ceea:	4313      	orrs	r3, r2
 800ceec:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	791b      	ldrb	r3, [r3, #4]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d12a      	bne.n	800cf4c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d112      	bne.n	800cf2c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	015a      	lsls	r2, r3, #5
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	0151      	lsls	r1, r2, #5
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	440a      	add	r2, r1
 800cf1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	e011      	b.n	800cf4c <USB_EPStartXfer+0x394>
 800cf28:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	015a      	lsls	r2, r3, #5
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	4413      	add	r3, r2
 800cf34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	0151      	lsls	r1, r2, #5
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	440a      	add	r2, r1
 800cf42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	0151      	lsls	r1, r2, #5
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	440a      	add	r2, r1
 800cf62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3718      	adds	r7, #24
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop

0800cf78 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	785b      	ldrb	r3, [r3, #1]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	f040 80ab 	bne.w	800d0ec <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	699b      	ldr	r3, [r3, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d132      	bne.n	800d004 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	0151      	lsls	r1, r2, #5
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	015a      	lsls	r2, r3, #5
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	4413      	add	r3, r2
 800cfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	0151      	lsls	r1, r2, #5
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	440a      	add	r2, r1
 800cfd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	015a      	lsls	r2, r3, #5
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	0151      	lsls	r1, r2, #5
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	440a      	add	r2, r1
 800cff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cffc:	0cdb      	lsrs	r3, r3, #19
 800cffe:	04db      	lsls	r3, r3, #19
 800d000:	6113      	str	r3, [r2, #16]
 800d002:	e04e      	b.n	800d0a2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	015a      	lsls	r2, r3, #5
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	0151      	lsls	r1, r2, #5
 800d016:	68fa      	ldr	r2, [r7, #12]
 800d018:	440a      	add	r2, r1
 800d01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d01e:	0cdb      	lsrs	r3, r3, #19
 800d020:	04db      	lsls	r3, r3, #19
 800d022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	0151      	lsls	r1, r2, #5
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	440a      	add	r2, r1
 800d03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d03e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d046:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	699a      	ldr	r2, [r3, #24]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	429a      	cmp	r2, r3
 800d052:	d903      	bls.n	800d05c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	015a      	lsls	r2, r3, #5
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4413      	add	r3, r2
 800d064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	0151      	lsls	r1, r2, #5
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	440a      	add	r2, r1
 800d072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4413      	add	r3, r2
 800d084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d088:	691a      	ldr	r2, [r3, #16]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	0148      	lsls	r0, r1, #5
 800d096:	68f9      	ldr	r1, [r7, #12]
 800d098:	4401      	add	r1, r0
 800d09a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	015a      	lsls	r2, r3, #5
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	0151      	lsls	r1, r2, #5
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	440a      	add	r2, r1
 800d0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0c0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	699b      	ldr	r3, [r3, #24]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d071      	beq.n	800d1ae <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	f003 030f 	and.w	r3, r3, #15
 800d0da:	2101      	movs	r1, #1
 800d0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d0e0:	68f9      	ldr	r1, [r7, #12]
 800d0e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	634b      	str	r3, [r1, #52]	; 0x34
 800d0ea:	e060      	b.n	800d1ae <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	015a      	lsls	r2, r3, #5
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	0151      	lsls	r1, r2, #5
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	440a      	add	r2, r1
 800d102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d106:	0cdb      	lsrs	r3, r3, #19
 800d108:	04db      	lsls	r3, r3, #19
 800d10a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	015a      	lsls	r2, r3, #5
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4413      	add	r3, r2
 800d114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	0151      	lsls	r1, r2, #5
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	440a      	add	r2, r1
 800d122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d126:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d12a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d12e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	015a      	lsls	r2, r3, #5
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	0151      	lsls	r1, r2, #5
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	440a      	add	r2, r1
 800d15e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d174:	691a      	ldr	r2, [r3, #16]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	69db      	ldr	r3, [r3, #28]
 800d17a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	0148      	lsls	r0, r1, #5
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	4401      	add	r1, r0
 800d186:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d18a:	4313      	orrs	r3, r2
 800d18c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	015a      	lsls	r2, r3, #5
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	0151      	lsls	r1, r2, #5
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	440a      	add	r2, r1
 800d1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	785b      	ldrb	r3, [r3, #1]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d14a      	bne.n	800d270 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1f2:	f040 8086 	bne.w	800d302 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	7812      	ldrb	r2, [r2, #0]
 800d20a:	0151      	lsls	r1, r2, #5
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	440a      	add	r2, r1
 800d210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d214:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d218:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	015a      	lsls	r2, r3, #5
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	4413      	add	r3, r2
 800d224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	7812      	ldrb	r2, [r2, #0]
 800d22e:	0151      	lsls	r1, r2, #5
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	440a      	add	r2, r1
 800d234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d23c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f242 7210 	movw	r2, #10000	; 0x2710
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d902      	bls.n	800d254 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	75fb      	strb	r3, [r7, #23]
          break;
 800d252:	e056      	b.n	800d302 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	015a      	lsls	r2, r3, #5
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	4413      	add	r3, r2
 800d25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d26c:	d0e7      	beq.n	800d23e <USB_EPStopXfer+0x82>
 800d26e:	e048      	b.n	800d302 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	015a      	lsls	r2, r3, #5
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	4413      	add	r3, r2
 800d27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d288:	d13b      	bne.n	800d302 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	0151      	lsls	r1, r2, #5
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	440a      	add	r2, r1
 800d2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	7812      	ldrb	r2, [r2, #0]
 800d2c2:	0151      	lsls	r1, r2, #5
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	440a      	add	r2, r1
 800d2c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f242 7210 	movw	r2, #10000	; 0x2710
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d902      	bls.n	800d2e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2e6:	e00c      	b.n	800d302 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	015a      	lsls	r2, r3, #5
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d300:	d0e7      	beq.n	800d2d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	371c      	adds	r7, #28
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d310:	b480      	push	{r7}
 800d312:	b089      	sub	sp, #36	; 0x24
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	4611      	mov	r1, r2
 800d31c:	461a      	mov	r2, r3
 800d31e:	460b      	mov	r3, r1
 800d320:	71fb      	strb	r3, [r7, #7]
 800d322:	4613      	mov	r3, r2
 800d324:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d32e:	88bb      	ldrh	r3, [r7, #4]
 800d330:	3303      	adds	r3, #3
 800d332:	089b      	lsrs	r3, r3, #2
 800d334:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d336:	2300      	movs	r3, #0
 800d338:	61bb      	str	r3, [r7, #24]
 800d33a:	e018      	b.n	800d36e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	031a      	lsls	r2, r3, #12
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	4413      	add	r3, r2
 800d344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d348:	461a      	mov	r2, r3
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	3301      	adds	r3, #1
 800d354:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	3301      	adds	r3, #1
 800d35a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	3301      	adds	r3, #1
 800d360:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	3301      	adds	r3, #1
 800d366:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	3301      	adds	r3, #1
 800d36c:	61bb      	str	r3, [r7, #24]
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	429a      	cmp	r2, r3
 800d374:	d3e2      	bcc.n	800d33c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3724      	adds	r7, #36	; 0x24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d384:	b480      	push	{r7}
 800d386:	b08b      	sub	sp, #44	; 0x2c
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4613      	mov	r3, r2
 800d390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	089b      	lsrs	r3, r3, #2
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d3a2:	88fb      	ldrh	r3, [r7, #6]
 800d3a4:	f003 0303 	and.w	r3, r3, #3
 800d3a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	623b      	str	r3, [r7, #32]
 800d3ae:	e014      	b.n	800d3da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	3301      	adds	r3, #1
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	623b      	str	r3, [r7, #32]
 800d3da:	6a3a      	ldr	r2, [r7, #32]
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d3e6      	bcc.n	800d3b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d3e2:	8bfb      	ldrh	r3, [r7, #30]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d01e      	beq.n	800d426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f107 0310 	add.w	r3, r7, #16
 800d3f8:	6812      	ldr	r2, [r2, #0]
 800d3fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	fa22 f303 	lsr.w	r3, r2, r3
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	701a      	strb	r2, [r3, #0]
      i++;
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	3301      	adds	r3, #1
 800d412:	623b      	str	r3, [r7, #32]
      pDest++;
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	3301      	adds	r3, #1
 800d418:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d41a:	8bfb      	ldrh	r3, [r7, #30]
 800d41c:	3b01      	subs	r3, #1
 800d41e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d420:	8bfb      	ldrh	r3, [r7, #30]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1ea      	bne.n	800d3fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d428:	4618      	mov	r0, r3
 800d42a:	372c      	adds	r7, #44	; 0x2c
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	785b      	ldrb	r3, [r3, #1]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d12c      	bne.n	800d4aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	db12      	blt.n	800d488 <USB_EPSetStall+0x54>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00f      	beq.n	800d488 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	0151      	lsls	r1, r2, #5
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	440a      	add	r2, r1
 800d47e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d486:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	0151      	lsls	r1, r2, #5
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	440a      	add	r2, r1
 800d49e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	e02b      	b.n	800d502 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	db12      	blt.n	800d4e2 <USB_EPSetStall+0xae>
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00f      	beq.n	800d4e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	0151      	lsls	r1, r2, #5
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	440a      	add	r2, r1
 800d4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	015a      	lsls	r2, r3, #5
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	0151      	lsls	r1, r2, #5
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	440a      	add	r2, r1
 800d4f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d500:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	785b      	ldrb	r3, [r3, #1]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d128      	bne.n	800d57e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	015a      	lsls	r2, r3, #5
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	0151      	lsls	r1, r2, #5
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	440a      	add	r2, r1
 800d542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d54a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	791b      	ldrb	r3, [r3, #4]
 800d550:	2b03      	cmp	r3, #3
 800d552:	d003      	beq.n	800d55c <USB_EPClearStall+0x4c>
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	791b      	ldrb	r3, [r3, #4]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d138      	bne.n	800d5ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	440a      	add	r2, r1
 800d572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	e027      	b.n	800d5ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	015a      	lsls	r2, r3, #5
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4413      	add	r3, r2
 800d586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	0151      	lsls	r1, r2, #5
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	440a      	add	r2, r1
 800d594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d59c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	791b      	ldrb	r3, [r3, #4]
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d003      	beq.n	800d5ae <USB_EPClearStall+0x9e>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	791b      	ldrb	r3, [r3, #4]
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d10f      	bne.n	800d5ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	015a      	lsls	r2, r3, #5
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	0151      	lsls	r1, r2, #5
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	440a      	add	r2, r1
 800d5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d5fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	78fb      	ldrb	r3, [r7, #3]
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d610:	68f9      	ldr	r1, [r7, #12]
 800d612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d616:	4313      	orrs	r3, r2
 800d618:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d642:	f023 0303 	bic.w	r3, r3, #3
 800d646:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d656:	f023 0302 	bic.w	r3, r3, #2
 800d65a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr

0800d66a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b085      	sub	sp, #20
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d684:	f023 0303 	bic.w	r3, r3, #3
 800d688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d698:	f043 0302 	orr.w	r3, r3, #2
 800d69c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	695b      	ldr	r3, [r3, #20]
 800d6b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b085      	sub	sp, #20
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ee:	69db      	ldr	r3, [r3, #28]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	0c1b      	lsrs	r3, r3, #16
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d706:	b480      	push	{r7}
 800d708:	b085      	sub	sp, #20
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d722:	69db      	ldr	r3, [r3, #28]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	4013      	ands	r3, r2
 800d728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	b29b      	uxth	r3, r3
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b085      	sub	sp, #20
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	460b      	mov	r3, r1
 800d744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d74a:	78fb      	ldrb	r3, [r7, #3]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	4013      	ands	r3, r2
 800d766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d768:	68bb      	ldr	r3, [r7, #8]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d776:	b480      	push	{r7}
 800d778:	b087      	sub	sp, #28
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d798:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d79a:	78fb      	ldrb	r3, [r7, #3]
 800d79c:	f003 030f 	and.w	r3, r3, #15
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7a6:	01db      	lsls	r3, r3, #7
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d7b0:	78fb      	ldrb	r3, [r7, #3]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7c4:	68bb      	ldr	r3, [r7, #8]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	371c      	adds	r7, #28
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b083      	sub	sp, #12
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	f003 0301 	and.w	r3, r3, #1
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ee:	b480      	push	{r7}
 800d7f0:	b085      	sub	sp, #20
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d80c:	f023 0307 	bic.w	r3, r3, #7
 800d810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	333c      	adds	r3, #60	; 0x3c
 800d846:	3304      	adds	r3, #4
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4a1c      	ldr	r2, [pc, #112]	; (800d8c0 <USB_EP0_OutStart+0x8c>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d90a      	bls.n	800d86a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d864:	d101      	bne.n	800d86a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d866:	2300      	movs	r3, #0
 800d868:	e024      	b.n	800d8b4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d870:	461a      	mov	r2, r3
 800d872:	2300      	movs	r3, #0
 800d874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d898:	f043 0318 	orr.w	r3, r3, #24
 800d89c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d8b0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3714      	adds	r7, #20
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	4f54300a 	.word	0x4f54300a

0800d8c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4a13      	ldr	r2, [pc, #76]	; (800d928 <USB_CoreReset+0x64>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d901      	bls.n	800d8e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e01b      	b.n	800d91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	daf2      	bge.n	800d8d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	f043 0201 	orr.w	r2, r3, #1
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	4a09      	ldr	r2, [pc, #36]	; (800d928 <USB_CoreReset+0x64>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d901      	bls.n	800d90c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d908:	2303      	movs	r3, #3
 800d90a:	e006      	b.n	800d91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b01      	cmp	r3, #1
 800d916:	d0f0      	beq.n	800d8fa <USB_CoreReset+0x36>

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	00030d40 	.word	0x00030d40

0800d92c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d930:	4904      	ldr	r1, [pc, #16]	; (800d944 <MX_FATFS_Init+0x18>)
 800d932:	4805      	ldr	r0, [pc, #20]	; (800d948 <MX_FATFS_Init+0x1c>)
 800d934:	f001 fe44 	bl	800f5c0 <FATFS_LinkDriver>
 800d938:	4603      	mov	r3, r0
 800d93a:	461a      	mov	r2, r3
 800d93c:	4b03      	ldr	r3, [pc, #12]	; (800d94c <MX_FATFS_Init+0x20>)
 800d93e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d940:	bf00      	nop
 800d942:	bd80      	pop	{r7, pc}
 800d944:	20000cc4 	.word	0x20000cc4
 800d948:	080131e8 	.word	0x080131e8
 800d94c:	20000cc0 	.word	0x20000cc0

0800d950 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d95a:	f000 f879 	bl	800da50 <BSP_SD_IsDetected>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b01      	cmp	r3, #1
 800d962:	d001      	beq.n	800d968 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d964:	2302      	movs	r3, #2
 800d966:	e012      	b.n	800d98e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d968:	480b      	ldr	r0, [pc, #44]	; (800d998 <BSP_SD_Init+0x48>)
 800d96a:	f7f9 facd 	bl	8006f08 <HAL_SD_Init>
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d109      	bne.n	800d98c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d97c:	4806      	ldr	r0, [pc, #24]	; (800d998 <BSP_SD_Init+0x48>)
 800d97e:	f7fa f999 	bl	8007cb4 <HAL_SD_ConfigWideBusOperation>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d98c:	79fb      	ldrb	r3, [r7, #7]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	2000041c 	.word	0x2000041c

0800d99c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af02      	add	r7, sp, #8
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	4806      	ldr	r0, [pc, #24]	; (800d9d4 <BSP_SD_ReadBlocks+0x38>)
 800d9ba:	f7f9 fbcd 	bl	8007158 <HAL_SD_ReadBlocks>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	2000041c 	.word	0x2000041c

0800d9d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b088      	sub	sp, #32
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	68f9      	ldr	r1, [r7, #12]
 800d9f4:	4806      	ldr	r0, [pc, #24]	; (800da10 <BSP_SD_WriteBlocks+0x38>)
 800d9f6:	f7f9 fd41 	bl	800747c <HAL_SD_WriteBlocks>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da04:	7dfb      	ldrb	r3, [r7, #23]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	2000041c 	.word	0x2000041c

0800da14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800da18:	4805      	ldr	r0, [pc, #20]	; (800da30 <BSP_SD_GetCardState+0x1c>)
 800da1a:	f7fa fa5f 	bl	8007edc <HAL_SD_GetCardState>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b04      	cmp	r3, #4
 800da22:	bf14      	ite	ne
 800da24:	2301      	movne	r3, #1
 800da26:	2300      	moveq	r3, #0
 800da28:	b2db      	uxtb	r3, r3
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	2000041c 	.word	0x2000041c

0800da34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	4803      	ldr	r0, [pc, #12]	; (800da4c <BSP_SD_GetCardInfo+0x18>)
 800da40:	f7fa f90c 	bl	8007c5c <HAL_SD_GetCardInfo>
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	2000041c 	.word	0x2000041c

0800da50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da56:	2301      	movs	r3, #1
 800da58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800da5a:	f000 f80b 	bl	800da74 <BSP_PlatformIsDetected>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800da64:	2300      	movs	r3, #0
 800da66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800da68:	79fb      	ldrb	r3, [r7, #7]
 800da6a:	b2db      	uxtb	r3, r3
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800da7a:	2301      	movs	r3, #1
 800da7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800da7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800da86:	f7f5 f9d1 	bl	8002e2c <HAL_GPIO_ReadPin>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800da90:	2300      	movs	r3, #0
 800da92:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800da94:	79fb      	ldrb	r3, [r7, #7]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
	...

0800daa0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800daaa:	4b0b      	ldr	r3, [pc, #44]	; (800dad8 <SD_CheckStatus+0x38>)
 800daac:	2201      	movs	r2, #1
 800daae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dab0:	f7ff ffb0 	bl	800da14 <BSP_SD_GetCardState>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d107      	bne.n	800daca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800daba:	4b07      	ldr	r3, [pc, #28]	; (800dad8 <SD_CheckStatus+0x38>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f023 0301 	bic.w	r3, r3, #1
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	4b04      	ldr	r3, [pc, #16]	; (800dad8 <SD_CheckStatus+0x38>)
 800dac8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800daca:	4b03      	ldr	r3, [pc, #12]	; (800dad8 <SD_CheckStatus+0x38>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b2db      	uxtb	r3, r3
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	2000000d 	.word	0x2000000d

0800dadc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	4603      	mov	r3, r0
 800dae4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <SD_initialize+0x38>)
 800dae8:	2201      	movs	r2, #1
 800daea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800daec:	f7ff ff30 	bl	800d950 <BSP_SD_Init>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d107      	bne.n	800db06 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7ff ffd1 	bl	800daa0 <SD_CheckStatus>
 800dafe:	4603      	mov	r3, r0
 800db00:	461a      	mov	r2, r3
 800db02:	4b04      	ldr	r3, [pc, #16]	; (800db14 <SD_initialize+0x38>)
 800db04:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800db06:	4b03      	ldr	r3, [pc, #12]	; (800db14 <SD_initialize+0x38>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b2db      	uxtb	r3, r3
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	2000000d 	.word	0x2000000d

0800db18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	4603      	mov	r3, r0
 800db20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800db22:	79fb      	ldrb	r3, [r7, #7]
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff ffbb 	bl	800daa0 <SD_CheckStatus>
 800db2a:	4603      	mov	r3, r0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	607a      	str	r2, [r7, #4]
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	4603      	mov	r3, r0
 800db42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800db48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	6879      	ldr	r1, [r7, #4]
 800db50:	68b8      	ldr	r0, [r7, #8]
 800db52:	f7ff ff23 	bl	800d99c <BSP_SD_ReadBlocks>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d107      	bne.n	800db6c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800db5c:	bf00      	nop
 800db5e:	f7ff ff59 	bl	800da14 <BSP_SD_GetCardState>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1fa      	bne.n	800db5e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800db8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	68b8      	ldr	r0, [r7, #8]
 800db94:	f7ff ff20 	bl	800d9d8 <BSP_SD_WriteBlocks>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d107      	bne.n	800dbae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800db9e:	bf00      	nop
 800dba0:	f7ff ff38 	bl	800da14 <BSP_SD_GetCardState>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1fa      	bne.n	800dba0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	603a      	str	r2, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dbce:	4b25      	ldr	r3, [pc, #148]	; (800dc64 <SD_ioctl+0xac>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <SD_ioctl+0x28>
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e03c      	b.n	800dc5a <SD_ioctl+0xa2>

  switch (cmd)
 800dbe0:	79bb      	ldrb	r3, [r7, #6]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d834      	bhi.n	800dc50 <SD_ioctl+0x98>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <SD_ioctl+0x34>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc05 	.word	0x0800dc05
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc37 	.word	0x0800dc37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc02:	e028      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc04:	f107 0308 	add.w	r3, r7, #8
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff ff13 	bl	800da34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dc0e:	6a3a      	ldr	r2, [r7, #32]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc1a:	e01c      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc1c:	f107 0308 	add.w	r3, r7, #8
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff ff07 	bl	800da34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc34:	e00f      	b.n	800dc56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc36:	f107 0308 	add.w	r3, r7, #8
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fefa 	bl	800da34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	0a5a      	lsrs	r2, r3, #9
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc4e:	e002      	b.n	800dc56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dc50:	2304      	movs	r3, #4
 800dc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3730      	adds	r7, #48	; 0x30
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	2000000d 	.word	0x2000000d

0800dc68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dc74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dc78:	f002 fa58 	bl	801012c <USBD_static_malloc>
 800dc7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d105      	bne.n	800dc90 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e066      	b.n	800dd5e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	7c1b      	ldrb	r3, [r3, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d119      	bne.n	800dcd4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dca4:	2202      	movs	r2, #2
 800dca6:	2181      	movs	r1, #129	; 0x81
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f002 f879 	bl	800fda0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dcb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcb8:	2202      	movs	r2, #2
 800dcba:	2101      	movs	r1, #1
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f002 f86f 	bl	800fda0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2210      	movs	r2, #16
 800dcce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dcd2:	e016      	b.n	800dd02 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dcd4:	2340      	movs	r3, #64	; 0x40
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	2181      	movs	r1, #129	; 0x81
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f002 f860 	bl	800fda0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	2202      	movs	r2, #2
 800dcea:	2101      	movs	r1, #1
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f002 f857 	bl	800fda0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2210      	movs	r2, #16
 800dcfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dd02:	2308      	movs	r3, #8
 800dd04:	2203      	movs	r2, #3
 800dd06:	2182      	movs	r1, #130	; 0x82
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f002 f849 	bl	800fda0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7c1b      	ldrb	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d109      	bne.n	800dd4c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd42:	2101      	movs	r1, #1
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f002 f9a5 	bl	8010094 <USBD_LL_PrepareReceive>
 800dd4a:	e007      	b.n	800dd5c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd52:	2340      	movs	r3, #64	; 0x40
 800dd54:	2101      	movs	r1, #1
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f002 f99c 	bl	8010094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b082      	sub	sp, #8
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	460b      	mov	r3, r1
 800dd70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dd72:	2181      	movs	r1, #129	; 0x81
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f002 f851 	bl	800fe1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dd80:	2101      	movs	r1, #1
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f002 f84a 	bl	800fe1c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dd90:	2182      	movs	r1, #130	; 0x82
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f002 f842 	bl	800fe1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00e      	beq.n	800ddd0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f002 f9c0 	bl	8010148 <USBD_static_free>
    pdev->pClassData = NULL;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
	...

0800dddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800de00:	2303      	movs	r3, #3
 800de02:	e0af      	b.n	800df64 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d03f      	beq.n	800de90 <USBD_CDC_Setup+0xb4>
 800de10:	2b20      	cmp	r3, #32
 800de12:	f040 809f 	bne.w	800df54 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	88db      	ldrh	r3, [r3, #6]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d02e      	beq.n	800de7c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b25b      	sxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	da16      	bge.n	800de56 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800de34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	88d2      	ldrh	r2, [r2, #6]
 800de3a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	88db      	ldrh	r3, [r3, #6]
 800de40:	2b07      	cmp	r3, #7
 800de42:	bf28      	it	cs
 800de44:	2307      	movcs	r3, #7
 800de46:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	89fa      	ldrh	r2, [r7, #14]
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 fae9 	bl	800f426 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800de54:	e085      	b.n	800df62 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	785a      	ldrb	r2, [r3, #1]
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	88db      	ldrh	r3, [r3, #6]
 800de64:	b2da      	uxtb	r2, r3
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800de6c:	6939      	ldr	r1, [r7, #16]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	461a      	mov	r2, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f001 fb02 	bl	800f47e <USBD_CtlPrepareRx>
      break;
 800de7a:	e072      	b.n	800df62 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	683a      	ldr	r2, [r7, #0]
 800de86:	7850      	ldrb	r0, [r2, #1]
 800de88:	2200      	movs	r2, #0
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	4798      	blx	r3
      break;
 800de8e:	e068      	b.n	800df62 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	785b      	ldrb	r3, [r3, #1]
 800de94:	2b0b      	cmp	r3, #11
 800de96:	d852      	bhi.n	800df3e <USBD_CDC_Setup+0x162>
 800de98:	a201      	add	r2, pc, #4	; (adr r2, 800dea0 <USBD_CDC_Setup+0xc4>)
 800de9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9e:	bf00      	nop
 800dea0:	0800ded1 	.word	0x0800ded1
 800dea4:	0800df4d 	.word	0x0800df4d
 800dea8:	0800df3f 	.word	0x0800df3f
 800deac:	0800df3f 	.word	0x0800df3f
 800deb0:	0800df3f 	.word	0x0800df3f
 800deb4:	0800df3f 	.word	0x0800df3f
 800deb8:	0800df3f 	.word	0x0800df3f
 800debc:	0800df3f 	.word	0x0800df3f
 800dec0:	0800df3f 	.word	0x0800df3f
 800dec4:	0800df3f 	.word	0x0800df3f
 800dec8:	0800defb 	.word	0x0800defb
 800decc:	0800df25 	.word	0x0800df25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d107      	bne.n	800deec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dedc:	f107 030a 	add.w	r3, r7, #10
 800dee0:	2202      	movs	r2, #2
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 fa9e 	bl	800f426 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800deea:	e032      	b.n	800df52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f001 fa28 	bl	800f344 <USBD_CtlError>
            ret = USBD_FAIL;
 800def4:	2303      	movs	r3, #3
 800def6:	75fb      	strb	r3, [r7, #23]
          break;
 800def8:	e02b      	b.n	800df52 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df00:	b2db      	uxtb	r3, r3
 800df02:	2b03      	cmp	r3, #3
 800df04:	d107      	bne.n	800df16 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df06:	f107 030d 	add.w	r3, r7, #13
 800df0a:	2201      	movs	r2, #1
 800df0c:	4619      	mov	r1, r3
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f001 fa89 	bl	800f426 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df14:	e01d      	b.n	800df52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 fa13 	bl	800f344 <USBD_CtlError>
            ret = USBD_FAIL;
 800df1e:	2303      	movs	r3, #3
 800df20:	75fb      	strb	r3, [r7, #23]
          break;
 800df22:	e016      	b.n	800df52 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d00f      	beq.n	800df50 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 fa06 	bl	800f344 <USBD_CtlError>
            ret = USBD_FAIL;
 800df38:	2303      	movs	r3, #3
 800df3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df3c:	e008      	b.n	800df50 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f001 f9ff 	bl	800f344 <USBD_CtlError>
          ret = USBD_FAIL;
 800df46:	2303      	movs	r3, #3
 800df48:	75fb      	strb	r3, [r7, #23]
          break;
 800df4a:	e002      	b.n	800df52 <USBD_CDC_Setup+0x176>
          break;
 800df4c:	bf00      	nop
 800df4e:	e008      	b.n	800df62 <USBD_CDC_Setup+0x186>
          break;
 800df50:	bf00      	nop
      }
      break;
 800df52:	e006      	b.n	800df62 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f001 f9f4 	bl	800f344 <USBD_CtlError>
      ret = USBD_FAIL;
 800df5c:	2303      	movs	r3, #3
 800df5e:	75fb      	strb	r3, [r7, #23]
      break;
 800df60:	bf00      	nop
  }

  return (uint8_t)ret;
 800df62:	7dfb      	ldrb	r3, [r7, #23]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3718      	adds	r7, #24
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e04f      	b.n	800e02e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800df96:	78fa      	ldrb	r2, [r7, #3]
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3318      	adds	r3, #24
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d029      	beq.n	800e000 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dfac:	78fa      	ldrb	r2, [r7, #3]
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	440b      	add	r3, r1
 800dfba:	3318      	adds	r3, #24
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	78f9      	ldrb	r1, [r7, #3]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	440b      	add	r3, r1
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4403      	add	r3, r0
 800dfcc:	3348      	adds	r3, #72	; 0x48
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	fbb2 f1f3 	udiv	r1, r2, r3
 800dfd4:	fb01 f303 	mul.w	r3, r1, r3
 800dfd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d110      	bne.n	800e000 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dfde:	78fa      	ldrb	r2, [r7, #3]
 800dfe0:	6879      	ldr	r1, [r7, #4]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	440b      	add	r3, r1
 800dfec:	3318      	adds	r3, #24
 800dfee:	2200      	movs	r2, #0
 800dff0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dff2:	78f9      	ldrb	r1, [r7, #3]
 800dff4:	2300      	movs	r3, #0
 800dff6:	2200      	movs	r2, #0
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f002 f813 	bl	8010024 <USBD_LL_Transmit>
 800dffe:	e015      	b.n	800e02c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2200      	movs	r2, #0
 800e004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00b      	beq.n	800e02c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	460b      	mov	r3, r1
 800e040:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e054:	2303      	movs	r3, #3
 800e056:	e015      	b.n	800e084 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e058:	78fb      	ldrb	r3, [r7, #3]
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f002 f851 	bl	8010104 <USBD_LL_GetRxDataSize>
 800e062:	4602      	mov	r2, r0
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e07e:	4611      	mov	r1, r2
 800e080:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e09a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e01b      	b.n	800e0de <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d015      	beq.n	800e0dc <USBD_CDC_EP0_RxReady+0x50>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e0b6:	2bff      	cmp	r3, #255	; 0xff
 800e0b8:	d010      	beq.n	800e0dc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e0c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e0d0:	b292      	uxth	r2, r2
 800e0d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	22ff      	movs	r2, #255	; 0xff
 800e0d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2243      	movs	r2, #67	; 0x43
 800e0f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e0f6:	4b03      	ldr	r3, [pc, #12]	; (800e104 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	20000098 	.word	0x20000098

0800e108 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2243      	movs	r2, #67	; 0x43
 800e114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e116:	4b03      	ldr	r3, [pc, #12]	; (800e124 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	20000054 	.word	0x20000054

0800e128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2243      	movs	r2, #67	; 0x43
 800e134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e136:	4b03      	ldr	r3, [pc, #12]	; (800e144 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	200000dc 	.word	0x200000dc

0800e148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	220a      	movs	r2, #10
 800e154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e156:	4b03      	ldr	r3, [pc, #12]	; (800e164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	20000010 	.word	0x20000010

0800e168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e178:	2303      	movs	r3, #3
 800e17a:	e004      	b.n	800e186 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e192:	b480      	push	{r7}
 800e194:	b087      	sub	sp, #28
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	60b9      	str	r1, [r7, #8]
 800e19c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e008      	b.n	800e1c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	371c      	adds	r7, #28
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e1ce:	b480      	push	{r7}
 800e1d0:	b085      	sub	sp, #20
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e004      	b.n	800e1f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3714      	adds	r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e20e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e216:	2b00      	cmp	r3, #0
 800e218:	d101      	bne.n	800e21e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e21a:	2303      	movs	r3, #3
 800e21c:	e016      	b.n	800e24c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	7c1b      	ldrb	r3, [r3, #16]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d109      	bne.n	800e23a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e230:	2101      	movs	r1, #1
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f001 ff2e 	bl	8010094 <USBD_LL_PrepareReceive>
 800e238:	e007      	b.n	800e24a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e240:	2340      	movs	r3, #64	; 0x40
 800e242:	2101      	movs	r1, #1
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f001 ff25 	bl	8010094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	4613      	mov	r3, r2
 800e260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e268:	2303      	movs	r3, #3
 800e26a:	e01f      	b.n	800e2ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d003      	beq.n	800e292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	79fa      	ldrb	r2, [r7, #7]
 800e29e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f001 fd01 	bl	800fca8 <USBD_LL_Init>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e016      	b.n	800e2fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00b      	beq.n	800e2f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e8:	f107 020e 	add.w	r2, r7, #14
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b082      	sub	sp, #8
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 fd16 	bl	800fd3c <USBD_LL_Start>
 800e310:	4603      	mov	r3, r0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e31a:	b480      	push	{r7}
 800e31c:	b083      	sub	sp, #12
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e33c:	2303      	movs	r3, #3
 800e33e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e346:	2b00      	cmp	r3, #0
 800e348:	d009      	beq.n	800e35e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	78fa      	ldrb	r2, [r7, #3]
 800e354:	4611      	mov	r1, r2
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	4798      	blx	r3
 800e35a:	4603      	mov	r3, r0
 800e35c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	460b      	mov	r3, r1
 800e372:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	78fa      	ldrb	r2, [r7, #3]
 800e388:	4611      	mov	r1, r2
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	4798      	blx	r3
  }

  return USBD_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f000 ff90 	bl	800f2d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e3be:	461a      	mov	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e3cc:	f003 031f 	and.w	r3, r3, #31
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d01a      	beq.n	800e40a <USBD_LL_SetupStage+0x72>
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d822      	bhi.n	800e41e <USBD_LL_SetupStage+0x86>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <USBD_LL_SetupStage+0x4a>
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d00a      	beq.n	800e3f6 <USBD_LL_SetupStage+0x5e>
 800e3e0:	e01d      	b.n	800e41e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fa62 	bl	800e8b4 <USBD_StdDevReq>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3f4:	e020      	b.n	800e438 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fac6 	bl	800e990 <USBD_StdItfReq>
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]
      break;
 800e408:	e016      	b.n	800e438 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e410:	4619      	mov	r1, r3
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fb05 	bl	800ea22 <USBD_StdEPReq>
 800e418:	4603      	mov	r3, r0
 800e41a:	73fb      	strb	r3, [r7, #15]
      break;
 800e41c:	e00c      	b.n	800e438 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f001 fd2b 	bl	800fe88 <USBD_LL_StallEP>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
      break;
 800e436:	bf00      	nop
  }

  return ret;
 800e438:	7bfb      	ldrb	r3, [r7, #15]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b086      	sub	sp, #24
 800e446:	af00      	add	r7, sp, #0
 800e448:	60f8      	str	r0, [r7, #12]
 800e44a:	460b      	mov	r3, r1
 800e44c:	607a      	str	r2, [r7, #4]
 800e44e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d138      	bne.n	800e4c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e45c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e464:	2b03      	cmp	r3, #3
 800e466:	d14a      	bne.n	800e4fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	689a      	ldr	r2, [r3, #8]
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	429a      	cmp	r2, r3
 800e472:	d913      	bls.n	800e49c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	689a      	ldr	r2, [r3, #8]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	1ad2      	subs	r2, r2, r3
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	68da      	ldr	r2, [r3, #12]
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	4293      	cmp	r3, r2
 800e48c:	bf28      	it	cs
 800e48e:	4613      	movcs	r3, r2
 800e490:	461a      	mov	r2, r3
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f001 f80f 	bl	800f4b8 <USBD_CtlContinueRx>
 800e49a:	e030      	b.n	800e4fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b03      	cmp	r3, #3
 800e4a6:	d10b      	bne.n	800e4c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f001 f80a 	bl	800f4da <USBD_CtlSendStatus>
 800e4c6:	e01a      	b.n	800e4fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b03      	cmp	r3, #3
 800e4d2:	d114      	bne.n	800e4fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00e      	beq.n	800e4fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	7afa      	ldrb	r2, [r7, #11]
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	4798      	blx	r3
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	e000      	b.n	800e500 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	460b      	mov	r3, r1
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e516:	7afb      	ldrb	r3, [r7, #11]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d16b      	bne.n	800e5f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3314      	adds	r3, #20
 800e520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d156      	bne.n	800e5da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	429a      	cmp	r2, r3
 800e536:	d914      	bls.n	800e562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	689a      	ldr	r2, [r3, #8]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	1ad2      	subs	r2, r2, r3
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	461a      	mov	r2, r3
 800e54c:	6879      	ldr	r1, [r7, #4]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 ff84 	bl	800f45c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e554:	2300      	movs	r3, #0
 800e556:	2200      	movs	r2, #0
 800e558:	2100      	movs	r1, #0
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f001 fd9a 	bl	8010094 <USBD_LL_PrepareReceive>
 800e560:	e03b      	b.n	800e5da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	68da      	ldr	r2, [r3, #12]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d11c      	bne.n	800e5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	685a      	ldr	r2, [r3, #4]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e576:	429a      	cmp	r2, r3
 800e578:	d316      	bcc.n	800e5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e584:	429a      	cmp	r2, r3
 800e586:	d20f      	bcs.n	800e5a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e588:	2200      	movs	r2, #0
 800e58a:	2100      	movs	r1, #0
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 ff65 	bl	800f45c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e59a:	2300      	movs	r3, #0
 800e59c:	2200      	movs	r2, #0
 800e59e:	2100      	movs	r1, #0
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f001 fd77 	bl	8010094 <USBD_LL_PrepareReceive>
 800e5a6:	e018      	b.n	800e5da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d10b      	bne.n	800e5cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d005      	beq.n	800e5cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5cc:	2180      	movs	r1, #128	; 0x80
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f001 fc5a 	bl	800fe88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f000 ff93 	bl	800f500 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d122      	bne.n	800e62a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff fe98 	bl	800e31a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e5f2:	e01a      	b.n	800e62a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b03      	cmp	r3, #3
 800e5fe:	d114      	bne.n	800e62a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00e      	beq.n	800e62a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e612:	695b      	ldr	r3, [r3, #20]
 800e614:	7afa      	ldrb	r2, [r7, #11]
 800e616:	4611      	mov	r1, r2
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	4798      	blx	r3
 800e61c:	4603      	mov	r3, r0
 800e61e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e620:	7dfb      	ldrb	r3, [r7, #23]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	e000      	b.n	800e62c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	e02f      	b.n	800e6c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00f      	beq.n	800e692 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d009      	beq.n	800e692 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	6852      	ldr	r2, [r2, #4]
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	4611      	mov	r1, r2
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e692:	2340      	movs	r3, #64	; 0x40
 800e694:	2200      	movs	r2, #0
 800e696:	2100      	movs	r1, #0
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f001 fb81 	bl	800fda0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2240      	movs	r2, #64	; 0x40
 800e6aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6ae:	2340      	movs	r3, #64	; 0x40
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2180      	movs	r1, #128	; 0x80
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f001 fb73 	bl	800fda0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2240      	movs	r2, #64	; 0x40
 800e6c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	78fa      	ldrb	r2, [r7, #3]
 800e6e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2204      	movs	r2, #4
 800e70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b04      	cmp	r3, #4
 800e72e:	d106      	bne.n	800e73e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e736:	b2da      	uxtb	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e75e:	2303      	movs	r3, #3
 800e760:	e012      	b.n	800e788 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	d10b      	bne.n	800e786 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d005      	beq.n	800e786 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e780:	69db      	ldr	r3, [r3, #28]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e014      	b.n	800e7d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d10d      	bne.n	800e7d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d007      	beq.n	800e7d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	78fa      	ldrb	r2, [r7, #3]
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	e014      	b.n	800e820 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2b03      	cmp	r3, #3
 800e800:	d10d      	bne.n	800e81e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d007      	beq.n	800e81e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e816:	78fa      	ldrb	r2, [r7, #3]
 800e818:	4611      	mov	r1, r2
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e830:	2300      	movs	r3, #0
}
 800e832:	4618      	mov	r0, r3
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e854:	2b00      	cmp	r3, #0
 800e856:	d009      	beq.n	800e86c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	6852      	ldr	r2, [r2, #4]
 800e864:	b2d2      	uxtb	r2, r2
 800e866:	4611      	mov	r1, r2
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	4798      	blx	r3
  }

  return USBD_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e876:	b480      	push	{r7}
 800e878:	b087      	sub	sp, #28
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	3301      	adds	r3, #1
 800e88c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e894:	8a3b      	ldrh	r3, [r7, #16]
 800e896:	021b      	lsls	r3, r3, #8
 800e898:	b21a      	sxth	r2, r3
 800e89a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	b21b      	sxth	r3, r3
 800e8a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e8a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8ca:	2b40      	cmp	r3, #64	; 0x40
 800e8cc:	d005      	beq.n	800e8da <USBD_StdDevReq+0x26>
 800e8ce:	2b40      	cmp	r3, #64	; 0x40
 800e8d0:	d853      	bhi.n	800e97a <USBD_StdDevReq+0xc6>
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00b      	beq.n	800e8ee <USBD_StdDevReq+0x3a>
 800e8d6:	2b20      	cmp	r3, #32
 800e8d8:	d14f      	bne.n	800e97a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	4798      	blx	r3
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ec:	e04a      	b.n	800e984 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	785b      	ldrb	r3, [r3, #1]
 800e8f2:	2b09      	cmp	r3, #9
 800e8f4:	d83b      	bhi.n	800e96e <USBD_StdDevReq+0xba>
 800e8f6:	a201      	add	r2, pc, #4	; (adr r2, 800e8fc <USBD_StdDevReq+0x48>)
 800e8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fc:	0800e951 	.word	0x0800e951
 800e900:	0800e965 	.word	0x0800e965
 800e904:	0800e96f 	.word	0x0800e96f
 800e908:	0800e95b 	.word	0x0800e95b
 800e90c:	0800e96f 	.word	0x0800e96f
 800e910:	0800e92f 	.word	0x0800e92f
 800e914:	0800e925 	.word	0x0800e925
 800e918:	0800e96f 	.word	0x0800e96f
 800e91c:	0800e947 	.word	0x0800e947
 800e920:	0800e939 	.word	0x0800e939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f9de 	bl	800ece8 <USBD_GetDescriptor>
          break;
 800e92c:	e024      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e92e:	6839      	ldr	r1, [r7, #0]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 fb43 	bl	800efbc <USBD_SetAddress>
          break;
 800e936:	e01f      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fb82 	bl	800f044 <USBD_SetConfig>
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
          break;
 800e944:	e018      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fc21 	bl	800f190 <USBD_GetConfig>
          break;
 800e94e:	e013      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fc52 	bl	800f1fc <USBD_GetStatus>
          break;
 800e958:	e00e      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fc81 	bl	800f264 <USBD_SetFeature>
          break;
 800e962:	e009      	b.n	800e978 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fc90 	bl	800f28c <USBD_ClrFeature>
          break;
 800e96c:	e004      	b.n	800e978 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fce7 	bl	800f344 <USBD_CtlError>
          break;
 800e976:	bf00      	nop
      }
      break;
 800e978:	e004      	b.n	800e984 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fce1 	bl	800f344 <USBD_CtlError>
      break;
 800e982:	bf00      	nop
  }

  return ret;
 800e984:	7bfb      	ldrb	r3, [r7, #15]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop

0800e990 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9a6:	2b40      	cmp	r3, #64	; 0x40
 800e9a8:	d005      	beq.n	800e9b6 <USBD_StdItfReq+0x26>
 800e9aa:	2b40      	cmp	r3, #64	; 0x40
 800e9ac:	d82f      	bhi.n	800ea0e <USBD_StdItfReq+0x7e>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <USBD_StdItfReq+0x26>
 800e9b2:	2b20      	cmp	r3, #32
 800e9b4:	d12b      	bne.n	800ea0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d81d      	bhi.n	800ea00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	889b      	ldrh	r3, [r3, #4]
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d813      	bhi.n	800e9f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	4798      	blx	r3
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	88db      	ldrh	r3, [r3, #6]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d110      	bne.n	800ea0a <USBD_StdItfReq+0x7a>
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10d      	bne.n	800ea0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fd73 	bl	800f4da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e9f4:	e009      	b.n	800ea0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 fca3 	bl	800f344 <USBD_CtlError>
          break;
 800e9fe:	e004      	b.n	800ea0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ea00:	6839      	ldr	r1, [r7, #0]
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 fc9e 	bl	800f344 <USBD_CtlError>
          break;
 800ea08:	e000      	b.n	800ea0c <USBD_StdItfReq+0x7c>
          break;
 800ea0a:	bf00      	nop
      }
      break;
 800ea0c:	e004      	b.n	800ea18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f000 fc97 	bl	800f344 <USBD_CtlError>
      break;
 800ea16:	bf00      	nop
  }

  return ret;
 800ea18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b084      	sub	sp, #16
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	889b      	ldrh	r3, [r3, #4]
 800ea34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea3e:	2b40      	cmp	r3, #64	; 0x40
 800ea40:	d007      	beq.n	800ea52 <USBD_StdEPReq+0x30>
 800ea42:	2b40      	cmp	r3, #64	; 0x40
 800ea44:	f200 8145 	bhi.w	800ecd2 <USBD_StdEPReq+0x2b0>
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00c      	beq.n	800ea66 <USBD_StdEPReq+0x44>
 800ea4c:	2b20      	cmp	r3, #32
 800ea4e:	f040 8140 	bne.w	800ecd2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	4798      	blx	r3
 800ea60:	4603      	mov	r3, r0
 800ea62:	73fb      	strb	r3, [r7, #15]
      break;
 800ea64:	e13a      	b.n	800ecdc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	785b      	ldrb	r3, [r3, #1]
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	d007      	beq.n	800ea7e <USBD_StdEPReq+0x5c>
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	f300 8129 	bgt.w	800ecc6 <USBD_StdEPReq+0x2a4>
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d07f      	beq.n	800eb78 <USBD_StdEPReq+0x156>
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d03c      	beq.n	800eaf6 <USBD_StdEPReq+0xd4>
 800ea7c:	e123      	b.n	800ecc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d002      	beq.n	800ea90 <USBD_StdEPReq+0x6e>
 800ea8a:	2b03      	cmp	r3, #3
 800ea8c:	d016      	beq.n	800eabc <USBD_StdEPReq+0x9a>
 800ea8e:	e02c      	b.n	800eaea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea90:	7bbb      	ldrb	r3, [r7, #14]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00d      	beq.n	800eab2 <USBD_StdEPReq+0x90>
 800ea96:	7bbb      	ldrb	r3, [r7, #14]
 800ea98:	2b80      	cmp	r3, #128	; 0x80
 800ea9a:	d00a      	beq.n	800eab2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f001 f9f1 	bl	800fe88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaa6:	2180      	movs	r1, #128	; 0x80
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f001 f9ed 	bl	800fe88 <USBD_LL_StallEP>
 800eaae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eab0:	e020      	b.n	800eaf4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fc45 	bl	800f344 <USBD_CtlError>
              break;
 800eaba:	e01b      	b.n	800eaf4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	885b      	ldrh	r3, [r3, #2]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10e      	bne.n	800eae2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00b      	beq.n	800eae2 <USBD_StdEPReq+0xc0>
 800eaca:	7bbb      	ldrb	r3, [r7, #14]
 800eacc:	2b80      	cmp	r3, #128	; 0x80
 800eace:	d008      	beq.n	800eae2 <USBD_StdEPReq+0xc0>
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	88db      	ldrh	r3, [r3, #6]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d104      	bne.n	800eae2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ead8:	7bbb      	ldrb	r3, [r7, #14]
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f001 f9d3 	bl	800fe88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 fcf9 	bl	800f4da <USBD_CtlSendStatus>

              break;
 800eae8:	e004      	b.n	800eaf4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 fc29 	bl	800f344 <USBD_CtlError>
              break;
 800eaf2:	bf00      	nop
          }
          break;
 800eaf4:	e0ec      	b.n	800ecd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	d002      	beq.n	800eb08 <USBD_StdEPReq+0xe6>
 800eb02:	2b03      	cmp	r3, #3
 800eb04:	d016      	beq.n	800eb34 <USBD_StdEPReq+0x112>
 800eb06:	e030      	b.n	800eb6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00d      	beq.n	800eb2a <USBD_StdEPReq+0x108>
 800eb0e:	7bbb      	ldrb	r3, [r7, #14]
 800eb10:	2b80      	cmp	r3, #128	; 0x80
 800eb12:	d00a      	beq.n	800eb2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb14:	7bbb      	ldrb	r3, [r7, #14]
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f001 f9b5 	bl	800fe88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb1e:	2180      	movs	r1, #128	; 0x80
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f001 f9b1 	bl	800fe88 <USBD_LL_StallEP>
 800eb26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb28:	e025      	b.n	800eb76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800eb2a:	6839      	ldr	r1, [r7, #0]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fc09 	bl	800f344 <USBD_CtlError>
              break;
 800eb32:	e020      	b.n	800eb76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	885b      	ldrh	r3, [r3, #2]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11b      	bne.n	800eb74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eb3c:	7bbb      	ldrb	r3, [r7, #14]
 800eb3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d004      	beq.n	800eb50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 f9d2 	bl	800fef4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fcc2 	bl	800f4da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	4798      	blx	r3
 800eb64:	4603      	mov	r3, r0
 800eb66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800eb68:	e004      	b.n	800eb74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800eb6a:	6839      	ldr	r1, [r7, #0]
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 fbe9 	bl	800f344 <USBD_CtlError>
              break;
 800eb72:	e000      	b.n	800eb76 <USBD_StdEPReq+0x154>
              break;
 800eb74:	bf00      	nop
          }
          break;
 800eb76:	e0ab      	b.n	800ecd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d002      	beq.n	800eb8a <USBD_StdEPReq+0x168>
 800eb84:	2b03      	cmp	r3, #3
 800eb86:	d032      	beq.n	800ebee <USBD_StdEPReq+0x1cc>
 800eb88:	e097      	b.n	800ecba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb8a:	7bbb      	ldrb	r3, [r7, #14]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d007      	beq.n	800eba0 <USBD_StdEPReq+0x17e>
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	2b80      	cmp	r3, #128	; 0x80
 800eb94:	d004      	beq.n	800eba0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 fbd3 	bl	800f344 <USBD_CtlError>
                break;
 800eb9e:	e091      	b.n	800ecc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	da0b      	bge.n	800ebc0 <USBD_StdEPReq+0x19e>
 800eba8:	7bbb      	ldrb	r3, [r7, #14]
 800ebaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	3310      	adds	r3, #16
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	4413      	add	r3, r2
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	e00b      	b.n	800ebd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
 800ebc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fc1d 	bl	800f426 <USBD_CtlSendData>
              break;
 800ebec:	e06a      	b.n	800ecc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ebee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	da11      	bge.n	800ec1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ebf6:	7bbb      	ldrb	r3, [r7, #14]
 800ebf8:	f003 020f 	and.w	r2, r3, #15
 800ebfc:	6879      	ldr	r1, [r7, #4]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4413      	add	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	440b      	add	r3, r1
 800ec08:	3324      	adds	r3, #36	; 0x24
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d117      	bne.n	800ec40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fb96 	bl	800f344 <USBD_CtlError>
                  break;
 800ec18:	e054      	b.n	800ecc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ec1a:	7bbb      	ldrb	r3, [r7, #14]
 800ec1c:	f003 020f 	and.w	r2, r3, #15
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4613      	mov	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	440b      	add	r3, r1
 800ec2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d104      	bne.n	800ec40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fb83 	bl	800f344 <USBD_CtlError>
                  break;
 800ec3e:	e041      	b.n	800ecc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	da0b      	bge.n	800ec60 <USBD_StdEPReq+0x23e>
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
 800ec4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec4e:	4613      	mov	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	4413      	add	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	3310      	adds	r3, #16
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	e00b      	b.n	800ec78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec60:	7bbb      	ldrb	r3, [r7, #14]
 800ec62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec66:	4613      	mov	r3, r2
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	4413      	add	r3, r2
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	4413      	add	r3, r2
 800ec76:	3304      	adds	r3, #4
 800ec78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ec7a:	7bbb      	ldrb	r3, [r7, #14]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <USBD_StdEPReq+0x264>
 800ec80:	7bbb      	ldrb	r3, [r7, #14]
 800ec82:	2b80      	cmp	r3, #128	; 0x80
 800ec84:	d103      	bne.n	800ec8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	e00e      	b.n	800ecac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
 800ec90:	4619      	mov	r1, r3
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f001 f964 	bl	800ff60 <USBD_LL_IsStallEP>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d003      	beq.n	800eca6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2201      	movs	r2, #1
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	e002      	b.n	800ecac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 fbb7 	bl	800f426 <USBD_CtlSendData>
              break;
 800ecb8:	e004      	b.n	800ecc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ecba:	6839      	ldr	r1, [r7, #0]
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 fb41 	bl	800f344 <USBD_CtlError>
              break;
 800ecc2:	bf00      	nop
          }
          break;
 800ecc4:	e004      	b.n	800ecd0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fb3b 	bl	800f344 <USBD_CtlError>
          break;
 800ecce:	bf00      	nop
      }
      break;
 800ecd0:	e004      	b.n	800ecdc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fb35 	bl	800f344 <USBD_CtlError>
      break;
 800ecda:	bf00      	nop
  }

  return ret;
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
	...

0800ece8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	885b      	ldrh	r3, [r3, #2]
 800ed02:	0a1b      	lsrs	r3, r3, #8
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	3b01      	subs	r3, #1
 800ed08:	2b06      	cmp	r3, #6
 800ed0a:	f200 8128 	bhi.w	800ef5e <USBD_GetDescriptor+0x276>
 800ed0e:	a201      	add	r2, pc, #4	; (adr r2, 800ed14 <USBD_GetDescriptor+0x2c>)
 800ed10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed14:	0800ed31 	.word	0x0800ed31
 800ed18:	0800ed49 	.word	0x0800ed49
 800ed1c:	0800ed89 	.word	0x0800ed89
 800ed20:	0800ef5f 	.word	0x0800ef5f
 800ed24:	0800ef5f 	.word	0x0800ef5f
 800ed28:	0800eeff 	.word	0x0800eeff
 800ed2c:	0800ef2b 	.word	0x0800ef2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	7c12      	ldrb	r2, [r2, #16]
 800ed3c:	f107 0108 	add.w	r1, r7, #8
 800ed40:	4610      	mov	r0, r2
 800ed42:	4798      	blx	r3
 800ed44:	60f8      	str	r0, [r7, #12]
      break;
 800ed46:	e112      	b.n	800ef6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7c1b      	ldrb	r3, [r3, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10d      	bne.n	800ed6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed58:	f107 0208 	add.w	r2, r7, #8
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	4798      	blx	r3
 800ed60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3301      	adds	r3, #1
 800ed66:	2202      	movs	r2, #2
 800ed68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ed6a:	e100      	b.n	800ef6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed74:	f107 0208 	add.w	r2, r7, #8
 800ed78:	4610      	mov	r0, r2
 800ed7a:	4798      	blx	r3
 800ed7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3301      	adds	r3, #1
 800ed82:	2202      	movs	r2, #2
 800ed84:	701a      	strb	r2, [r3, #0]
      break;
 800ed86:	e0f2      	b.n	800ef6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	885b      	ldrh	r3, [r3, #2]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b05      	cmp	r3, #5
 800ed90:	f200 80ac 	bhi.w	800eeec <USBD_GetDescriptor+0x204>
 800ed94:	a201      	add	r2, pc, #4	; (adr r2, 800ed9c <USBD_GetDescriptor+0xb4>)
 800ed96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9a:	bf00      	nop
 800ed9c:	0800edb5 	.word	0x0800edb5
 800eda0:	0800ede9 	.word	0x0800ede9
 800eda4:	0800ee1d 	.word	0x0800ee1d
 800eda8:	0800ee51 	.word	0x0800ee51
 800edac:	0800ee85 	.word	0x0800ee85
 800edb0:	0800eeb9 	.word	0x0800eeb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00b      	beq.n	800edd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	7c12      	ldrb	r2, [r2, #16]
 800edcc:	f107 0108 	add.w	r1, r7, #8
 800edd0:	4610      	mov	r0, r2
 800edd2:	4798      	blx	r3
 800edd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edd6:	e091      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fab2 	bl	800f344 <USBD_CtlError>
            err++;
 800ede0:	7afb      	ldrb	r3, [r7, #11]
 800ede2:	3301      	adds	r3, #1
 800ede4:	72fb      	strb	r3, [r7, #11]
          break;
 800ede6:	e089      	b.n	800eefc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00b      	beq.n	800ee0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	7c12      	ldrb	r2, [r2, #16]
 800ee00:	f107 0108 	add.w	r1, r7, #8
 800ee04:	4610      	mov	r0, r2
 800ee06:	4798      	blx	r3
 800ee08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee0a:	e077      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee0c:	6839      	ldr	r1, [r7, #0]
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 fa98 	bl	800f344 <USBD_CtlError>
            err++;
 800ee14:	7afb      	ldrb	r3, [r7, #11]
 800ee16:	3301      	adds	r3, #1
 800ee18:	72fb      	strb	r3, [r7, #11]
          break;
 800ee1a:	e06f      	b.n	800eefc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00b      	beq.n	800ee40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	7c12      	ldrb	r2, [r2, #16]
 800ee34:	f107 0108 	add.w	r1, r7, #8
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
 800ee3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee3e:	e05d      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fa7e 	bl	800f344 <USBD_CtlError>
            err++;
 800ee48:	7afb      	ldrb	r3, [r7, #11]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ee4e:	e055      	b.n	800eefc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00b      	beq.n	800ee74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	7c12      	ldrb	r2, [r2, #16]
 800ee68:	f107 0108 	add.w	r1, r7, #8
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	4798      	blx	r3
 800ee70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee72:	e043      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee74:	6839      	ldr	r1, [r7, #0]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fa64 	bl	800f344 <USBD_CtlError>
            err++;
 800ee7c:	7afb      	ldrb	r3, [r7, #11]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	72fb      	strb	r3, [r7, #11]
          break;
 800ee82:	e03b      	b.n	800eefc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00b      	beq.n	800eea8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	7c12      	ldrb	r2, [r2, #16]
 800ee9c:	f107 0108 	add.w	r1, r7, #8
 800eea0:	4610      	mov	r0, r2
 800eea2:	4798      	blx	r3
 800eea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eea6:	e029      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fa4a 	bl	800f344 <USBD_CtlError>
            err++;
 800eeb0:	7afb      	ldrb	r3, [r7, #11]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	72fb      	strb	r3, [r7, #11]
          break;
 800eeb6:	e021      	b.n	800eefc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eebe:	699b      	ldr	r3, [r3, #24]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00b      	beq.n	800eedc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeca:	699b      	ldr	r3, [r3, #24]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	7c12      	ldrb	r2, [r2, #16]
 800eed0:	f107 0108 	add.w	r1, r7, #8
 800eed4:	4610      	mov	r0, r2
 800eed6:	4798      	blx	r3
 800eed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eeda:	e00f      	b.n	800eefc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fa30 	bl	800f344 <USBD_CtlError>
            err++;
 800eee4:	7afb      	ldrb	r3, [r7, #11]
 800eee6:	3301      	adds	r3, #1
 800eee8:	72fb      	strb	r3, [r7, #11]
          break;
 800eeea:	e007      	b.n	800eefc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fa28 	bl	800f344 <USBD_CtlError>
          err++;
 800eef4:	7afb      	ldrb	r3, [r7, #11]
 800eef6:	3301      	adds	r3, #1
 800eef8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800eefa:	bf00      	nop
      }
      break;
 800eefc:	e037      	b.n	800ef6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	7c1b      	ldrb	r3, [r3, #16]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d109      	bne.n	800ef1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef0e:	f107 0208 	add.w	r2, r7, #8
 800ef12:	4610      	mov	r0, r2
 800ef14:	4798      	blx	r3
 800ef16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef18:	e029      	b.n	800ef6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fa11 	bl	800f344 <USBD_CtlError>
        err++;
 800ef22:	7afb      	ldrb	r3, [r7, #11]
 800ef24:	3301      	adds	r3, #1
 800ef26:	72fb      	strb	r3, [r7, #11]
      break;
 800ef28:	e021      	b.n	800ef6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	7c1b      	ldrb	r3, [r3, #16]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10d      	bne.n	800ef4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3a:	f107 0208 	add.w	r2, r7, #8
 800ef3e:	4610      	mov	r0, r2
 800ef40:	4798      	blx	r3
 800ef42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	3301      	adds	r3, #1
 800ef48:	2207      	movs	r2, #7
 800ef4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef4c:	e00f      	b.n	800ef6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ef4e:	6839      	ldr	r1, [r7, #0]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f9f7 	bl	800f344 <USBD_CtlError>
        err++;
 800ef56:	7afb      	ldrb	r3, [r7, #11]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ef5c:	e007      	b.n	800ef6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ef5e:	6839      	ldr	r1, [r7, #0]
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 f9ef 	bl	800f344 <USBD_CtlError>
      err++;
 800ef66:	7afb      	ldrb	r3, [r7, #11]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ef6c:	bf00      	nop
  }

  if (err != 0U)
 800ef6e:	7afb      	ldrb	r3, [r7, #11]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d11e      	bne.n	800efb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	88db      	ldrh	r3, [r3, #6]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d016      	beq.n	800efaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ef7c:	893b      	ldrh	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00e      	beq.n	800efa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	88da      	ldrh	r2, [r3, #6]
 800ef86:	893b      	ldrh	r3, [r7, #8]
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	bf28      	it	cs
 800ef8c:	4613      	movcs	r3, r2
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef92:	893b      	ldrh	r3, [r7, #8]
 800ef94:	461a      	mov	r2, r3
 800ef96:	68f9      	ldr	r1, [r7, #12]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fa44 	bl	800f426 <USBD_CtlSendData>
 800ef9e:	e009      	b.n	800efb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f9ce 	bl	800f344 <USBD_CtlError>
 800efa8:	e004      	b.n	800efb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fa95 	bl	800f4da <USBD_CtlSendStatus>
 800efb0:	e000      	b.n	800efb4 <USBD_GetDescriptor+0x2cc>
    return;
 800efb2:	bf00      	nop
  }
}
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop

0800efbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	889b      	ldrh	r3, [r3, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d131      	bne.n	800f032 <USBD_SetAddress+0x76>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	88db      	ldrh	r3, [r3, #6]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d12d      	bne.n	800f032 <USBD_SetAddress+0x76>
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	885b      	ldrh	r3, [r3, #2]
 800efda:	2b7f      	cmp	r3, #127	; 0x7f
 800efdc:	d829      	bhi.n	800f032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	885b      	ldrh	r3, [r3, #2]
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d104      	bne.n	800f000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f9a3 	bl	800f344 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800effe:	e01d      	b.n	800f03c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	7bfa      	ldrb	r2, [r7, #15]
 800f004:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 ffd3 	bl	800ffb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fa61 	bl	800f4da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f018:	7bfb      	ldrb	r3, [r7, #15]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2202      	movs	r2, #2
 800f022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f026:	e009      	b.n	800f03c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f030:	e004      	b.n	800f03c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f985 	bl	800f344 <USBD_CtlError>
  }
}
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f04e:	2300      	movs	r3, #0
 800f050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	885b      	ldrh	r3, [r3, #2]
 800f056:	b2da      	uxtb	r2, r3
 800f058:	4b4c      	ldr	r3, [pc, #304]	; (800f18c <USBD_SetConfig+0x148>)
 800f05a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f05c:	4b4b      	ldr	r3, [pc, #300]	; (800f18c <USBD_SetConfig+0x148>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d905      	bls.n	800f070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f96c 	bl	800f344 <USBD_CtlError>
    return USBD_FAIL;
 800f06c:	2303      	movs	r3, #3
 800f06e:	e088      	b.n	800f182 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d002      	beq.n	800f082 <USBD_SetConfig+0x3e>
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	d025      	beq.n	800f0cc <USBD_SetConfig+0x88>
 800f080:	e071      	b.n	800f166 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f082:	4b42      	ldr	r3, [pc, #264]	; (800f18c <USBD_SetConfig+0x148>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d01c      	beq.n	800f0c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f08a:	4b40      	ldr	r3, [pc, #256]	; (800f18c <USBD_SetConfig+0x148>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f094:	4b3d      	ldr	r3, [pc, #244]	; (800f18c <USBD_SetConfig+0x148>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	4619      	mov	r1, r3
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7ff f948 	bl	800e330 <USBD_SetClassConfig>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d004      	beq.n	800f0b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f949 	bl	800f344 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f0b2:	e065      	b.n	800f180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fa10 	bl	800f4da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2203      	movs	r2, #3
 800f0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f0c2:	e05d      	b.n	800f180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 fa08 	bl	800f4da <USBD_CtlSendStatus>
      break;
 800f0ca:	e059      	b.n	800f180 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f0cc:	4b2f      	ldr	r3, [pc, #188]	; (800f18c <USBD_SetConfig+0x148>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d112      	bne.n	800f0fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2202      	movs	r2, #2
 800f0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f0dc:	4b2b      	ldr	r3, [pc, #172]	; (800f18c <USBD_SetConfig+0x148>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f0e6:	4b29      	ldr	r3, [pc, #164]	; (800f18c <USBD_SetConfig+0x148>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff f93b 	bl	800e368 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f9f1 	bl	800f4da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f0f8:	e042      	b.n	800f180 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f0fa:	4b24      	ldr	r3, [pc, #144]	; (800f18c <USBD_SetConfig+0x148>)
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	429a      	cmp	r2, r3
 800f106:	d02a      	beq.n	800f15e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	4619      	mov	r1, r3
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f7ff f929 	bl	800e368 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f116:	4b1d      	ldr	r3, [pc, #116]	; (800f18c <USBD_SetConfig+0x148>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	461a      	mov	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f120:	4b1a      	ldr	r3, [pc, #104]	; (800f18c <USBD_SetConfig+0x148>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7ff f902 	bl	800e330 <USBD_SetClassConfig>
 800f12c:	4603      	mov	r3, r0
 800f12e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f130:	7bfb      	ldrb	r3, [r7, #15]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00f      	beq.n	800f156 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f903 	bl	800f344 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	b2db      	uxtb	r3, r3
 800f144:	4619      	mov	r1, r3
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff f90e 	bl	800e368 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2202      	movs	r2, #2
 800f150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f154:	e014      	b.n	800f180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f9bf 	bl	800f4da <USBD_CtlSendStatus>
      break;
 800f15c:	e010      	b.n	800f180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f9bb 	bl	800f4da <USBD_CtlSendStatus>
      break;
 800f164:	e00c      	b.n	800f180 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f166:	6839      	ldr	r1, [r7, #0]
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 f8eb 	bl	800f344 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f16e:	4b07      	ldr	r3, [pc, #28]	; (800f18c <USBD_SetConfig+0x148>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff f8f7 	bl	800e368 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f17a:	2303      	movs	r3, #3
 800f17c:	73fb      	strb	r3, [r7, #15]
      break;
 800f17e:	bf00      	nop
  }

  return ret;
 800f180:	7bfb      	ldrb	r3, [r7, #15]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20000cc8 	.word	0x20000cc8

0800f190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	88db      	ldrh	r3, [r3, #6]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d004      	beq.n	800f1ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 f8cd 	bl	800f344 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f1aa:	e023      	b.n	800f1f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	dc02      	bgt.n	800f1be <USBD_GetConfig+0x2e>
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dc03      	bgt.n	800f1c4 <USBD_GetConfig+0x34>
 800f1bc:	e015      	b.n	800f1ea <USBD_GetConfig+0x5a>
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	d00b      	beq.n	800f1da <USBD_GetConfig+0x4a>
 800f1c2:	e012      	b.n	800f1ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	3308      	adds	r3, #8
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f927 	bl	800f426 <USBD_CtlSendData>
        break;
 800f1d8:	e00c      	b.n	800f1f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	2201      	movs	r2, #1
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 f91f 	bl	800f426 <USBD_CtlSendData>
        break;
 800f1e8:	e004      	b.n	800f1f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f8a9 	bl	800f344 <USBD_CtlError>
        break;
 800f1f2:	bf00      	nop
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	3b01      	subs	r3, #1
 800f210:	2b02      	cmp	r3, #2
 800f212:	d81e      	bhi.n	800f252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	88db      	ldrh	r3, [r3, #6]
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d004      	beq.n	800f226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f890 	bl	800f344 <USBD_CtlError>
        break;
 800f224:	e01a      	b.n	800f25c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f232:	2b00      	cmp	r3, #0
 800f234:	d005      	beq.n	800f242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	f043 0202 	orr.w	r2, r3, #2
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	330c      	adds	r3, #12
 800f246:	2202      	movs	r2, #2
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f8eb 	bl	800f426 <USBD_CtlSendData>
      break;
 800f250:	e004      	b.n	800f25c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 f875 	bl	800f344 <USBD_CtlError>
      break;
 800f25a:	bf00      	nop
  }
}
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	885b      	ldrh	r3, [r3, #2]
 800f272:	2b01      	cmp	r3, #1
 800f274:	d106      	bne.n	800f284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2201      	movs	r2, #1
 800f27a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f92b 	bl	800f4da <USBD_CtlSendStatus>
  }
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	2b02      	cmp	r3, #2
 800f2a2:	d80b      	bhi.n	800f2bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	885b      	ldrh	r3, [r3, #2]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d10c      	bne.n	800f2c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f910 	bl	800f4da <USBD_CtlSendStatus>
      }
      break;
 800f2ba:	e004      	b.n	800f2c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f840 	bl	800f344 <USBD_CtlError>
      break;
 800f2c4:	e000      	b.n	800f2c8 <USBD_ClrFeature+0x3c>
      break;
 800f2c6:	bf00      	nop
  }
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	781a      	ldrb	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f7ff fabb 	bl	800e876 <SWAPBYTE>
 800f300:	4603      	mov	r3, r0
 800f302:	461a      	mov	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3301      	adds	r3, #1
 800f30c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3301      	adds	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7ff faae 	bl	800e876 <SWAPBYTE>
 800f31a:	4603      	mov	r3, r0
 800f31c:	461a      	mov	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3301      	adds	r3, #1
 800f326:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3301      	adds	r3, #1
 800f32c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7ff faa1 	bl	800e876 <SWAPBYTE>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	80da      	strh	r2, [r3, #6]
}
 800f33c:	bf00      	nop
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f34e:	2180      	movs	r1, #128	; 0x80
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fd99 	bl	800fe88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f356:	2100      	movs	r1, #0
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fd95 	bl	800fe88 <USBD_LL_StallEP>
}
 800f35e:	bf00      	nop
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b086      	sub	sp, #24
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	60f8      	str	r0, [r7, #12]
 800f36e:	60b9      	str	r1, [r7, #8]
 800f370:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d036      	beq.n	800f3ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f380:	6938      	ldr	r0, [r7, #16]
 800f382:	f000 f836 	bl	800f3f2 <USBD_GetLen>
 800f386:	4603      	mov	r3, r0
 800f388:	3301      	adds	r3, #1
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	b29a      	uxth	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	4413      	add	r3, r2
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	7812      	ldrb	r2, [r2, #0]
 800f39e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3a0:	7dfb      	ldrb	r3, [r7, #23]
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	2203      	movs	r2, #3
 800f3ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f3b6:	e013      	b.n	800f3e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	4413      	add	r3, r2
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	7812      	ldrb	r2, [r2, #0]
 800f3c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	613b      	str	r3, [r7, #16]
    idx++;
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1e7      	bne.n	800f3b8 <USBD_GetString+0x52>
 800f3e8:	e000      	b.n	800f3ec <USBD_GetString+0x86>
    return;
 800f3ea:	bf00      	nop
  }
}
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f3f2:	b480      	push	{r7}
 800f3f4:	b085      	sub	sp, #20
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f402:	e005      	b.n	800f410 <USBD_GetLen+0x1e>
  {
    len++;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	3301      	adds	r3, #1
 800f408:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	3301      	adds	r3, #1
 800f40e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1f5      	bne.n	800f404 <USBD_GetLen+0x12>
  }

  return len;
 800f418:	7bfb      	ldrb	r3, [r7, #15]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2202      	movs	r2, #2
 800f436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	2100      	movs	r1, #0
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f000 fde9 	bl	8010024 <USBD_LL_Transmit>

  return USBD_OK;
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	2100      	movs	r1, #0
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 fdd8 	bl	8010024 <USBD_LL_Transmit>

  return USBD_OK;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	60f8      	str	r0, [r7, #12]
 800f486:	60b9      	str	r1, [r7, #8]
 800f488:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2203      	movs	r2, #3
 800f48e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f000 fdf3 	bl	8010094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	2100      	movs	r1, #0
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f000 fde2 	bl	8010094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b082      	sub	sp, #8
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2204      	movs	r2, #4
 800f4e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fd97 	bl	8010024 <USBD_LL_Transmit>

  return USBD_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2205      	movs	r2, #5
 800f50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f510:	2300      	movs	r3, #0
 800f512:	2200      	movs	r2, #0
 800f514:	2100      	movs	r1, #0
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fdbc 	bl	8010094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f51c:	2300      	movs	r3, #0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
	...

0800f528 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f528:	b480      	push	{r7}
 800f52a:	b087      	sub	sp, #28
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	4613      	mov	r3, r2
 800f534:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f536:	2301      	movs	r3, #1
 800f538:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f53e:	4b1f      	ldr	r3, [pc, #124]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f540:	7a5b      	ldrb	r3, [r3, #9]
 800f542:	b2db      	uxtb	r3, r3
 800f544:	2b00      	cmp	r3, #0
 800f546:	d131      	bne.n	800f5ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f548:	4b1c      	ldr	r3, [pc, #112]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f54a:	7a5b      	ldrb	r3, [r3, #9]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	461a      	mov	r2, r3
 800f550:	4b1a      	ldr	r3, [pc, #104]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f552:	2100      	movs	r1, #0
 800f554:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f556:	4b19      	ldr	r3, [pc, #100]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f558:	7a5b      	ldrb	r3, [r3, #9]
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	4a17      	ldr	r2, [pc, #92]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	4413      	add	r3, r2
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f566:	4b15      	ldr	r3, [pc, #84]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f568:	7a5b      	ldrb	r3, [r3, #9]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	461a      	mov	r2, r3
 800f56e:	4b13      	ldr	r3, [pc, #76]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f570:	4413      	add	r3, r2
 800f572:	79fa      	ldrb	r2, [r7, #7]
 800f574:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f576:	4b11      	ldr	r3, [pc, #68]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f578:	7a5b      	ldrb	r3, [r3, #9]
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	1c5a      	adds	r2, r3, #1
 800f57e:	b2d1      	uxtb	r1, r2
 800f580:	4a0e      	ldr	r2, [pc, #56]	; (800f5bc <FATFS_LinkDriverEx+0x94>)
 800f582:	7251      	strb	r1, [r2, #9]
 800f584:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f586:	7dbb      	ldrb	r3, [r7, #22]
 800f588:	3330      	adds	r3, #48	; 0x30
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	3301      	adds	r3, #1
 800f594:	223a      	movs	r2, #58	; 0x3a
 800f596:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	3302      	adds	r3, #2
 800f59c:	222f      	movs	r2, #47	; 0x2f
 800f59e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	3303      	adds	r3, #3
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	20000ccc 	.word	0x20000ccc

0800f5c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff ffaa 	bl	800f528 <FATFS_LinkDriverEx>
 800f5d4:	4603      	mov	r3, r0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
	...

0800f5e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	4912      	ldr	r1, [pc, #72]	; (800f630 <MX_USB_DEVICE_Init+0x50>)
 800f5e8:	4812      	ldr	r0, [pc, #72]	; (800f634 <MX_USB_DEVICE_Init+0x54>)
 800f5ea:	f7fe fe33 	bl	800e254 <USBD_Init>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d001      	beq.n	800f5f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f5f4:	f7f2 fd22 	bl	800203c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f5f8:	490f      	ldr	r1, [pc, #60]	; (800f638 <MX_USB_DEVICE_Init+0x58>)
 800f5fa:	480e      	ldr	r0, [pc, #56]	; (800f634 <MX_USB_DEVICE_Init+0x54>)
 800f5fc:	f7fe fe5a 	bl	800e2b4 <USBD_RegisterClass>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f606:	f7f2 fd19 	bl	800203c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f60a:	490c      	ldr	r1, [pc, #48]	; (800f63c <MX_USB_DEVICE_Init+0x5c>)
 800f60c:	4809      	ldr	r0, [pc, #36]	; (800f634 <MX_USB_DEVICE_Init+0x54>)
 800f60e:	f7fe fdab 	bl	800e168 <USBD_CDC_RegisterInterface>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d001      	beq.n	800f61c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f618:	f7f2 fd10 	bl	800203c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f61c:	4805      	ldr	r0, [pc, #20]	; (800f634 <MX_USB_DEVICE_Init+0x54>)
 800f61e:	f7fe fe70 	bl	800e302 <USBD_Start>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f628:	f7f2 fd08 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f62c:	bf00      	nop
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	20000134 	.word	0x20000134
 800f634:	20000cd8 	.word	0x20000cd8
 800f638:	2000001c 	.word	0x2000001c
 800f63c:	20000120 	.word	0x20000120

0800f640 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f644:	2200      	movs	r2, #0
 800f646:	4905      	ldr	r1, [pc, #20]	; (800f65c <CDC_Init_FS+0x1c>)
 800f648:	4805      	ldr	r0, [pc, #20]	; (800f660 <CDC_Init_FS+0x20>)
 800f64a:	f7fe fda2 	bl	800e192 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f64e:	4905      	ldr	r1, [pc, #20]	; (800f664 <CDC_Init_FS+0x24>)
 800f650:	4803      	ldr	r0, [pc, #12]	; (800f660 <CDC_Init_FS+0x20>)
 800f652:	f7fe fdbc 	bl	800e1ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f656:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f658:	4618      	mov	r0, r3
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	200017a8 	.word	0x200017a8
 800f660:	20000cd8 	.word	0x20000cd8
 800f664:	20000fa8 	.word	0x20000fa8

0800f668 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f668:	b480      	push	{r7}
 800f66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f66c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f66e:	4618      	mov	r0, r3
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	6039      	str	r1, [r7, #0]
 800f682:	71fb      	strb	r3, [r7, #7]
 800f684:	4613      	mov	r3, r2
 800f686:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f688:	79fb      	ldrb	r3, [r7, #7]
 800f68a:	2b23      	cmp	r3, #35	; 0x23
 800f68c:	d84a      	bhi.n	800f724 <CDC_Control_FS+0xac>
 800f68e:	a201      	add	r2, pc, #4	; (adr r2, 800f694 <CDC_Control_FS+0x1c>)
 800f690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f694:	0800f725 	.word	0x0800f725
 800f698:	0800f725 	.word	0x0800f725
 800f69c:	0800f725 	.word	0x0800f725
 800f6a0:	0800f725 	.word	0x0800f725
 800f6a4:	0800f725 	.word	0x0800f725
 800f6a8:	0800f725 	.word	0x0800f725
 800f6ac:	0800f725 	.word	0x0800f725
 800f6b0:	0800f725 	.word	0x0800f725
 800f6b4:	0800f725 	.word	0x0800f725
 800f6b8:	0800f725 	.word	0x0800f725
 800f6bc:	0800f725 	.word	0x0800f725
 800f6c0:	0800f725 	.word	0x0800f725
 800f6c4:	0800f725 	.word	0x0800f725
 800f6c8:	0800f725 	.word	0x0800f725
 800f6cc:	0800f725 	.word	0x0800f725
 800f6d0:	0800f725 	.word	0x0800f725
 800f6d4:	0800f725 	.word	0x0800f725
 800f6d8:	0800f725 	.word	0x0800f725
 800f6dc:	0800f725 	.word	0x0800f725
 800f6e0:	0800f725 	.word	0x0800f725
 800f6e4:	0800f725 	.word	0x0800f725
 800f6e8:	0800f725 	.word	0x0800f725
 800f6ec:	0800f725 	.word	0x0800f725
 800f6f0:	0800f725 	.word	0x0800f725
 800f6f4:	0800f725 	.word	0x0800f725
 800f6f8:	0800f725 	.word	0x0800f725
 800f6fc:	0800f725 	.word	0x0800f725
 800f700:	0800f725 	.word	0x0800f725
 800f704:	0800f725 	.word	0x0800f725
 800f708:	0800f725 	.word	0x0800f725
 800f70c:	0800f725 	.word	0x0800f725
 800f710:	0800f725 	.word	0x0800f725
 800f714:	0800f725 	.word	0x0800f725
 800f718:	0800f725 	.word	0x0800f725
 800f71c:	0800f725 	.word	0x0800f725
 800f720:	0800f725 	.word	0x0800f725
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f724:	bf00      	nop
  }

  return (USBD_OK);
 800f726:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f728:	4618      	mov	r0, r3
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f73e:	6879      	ldr	r1, [r7, #4]
 800f740:	4805      	ldr	r0, [pc, #20]	; (800f758 <CDC_Receive_FS+0x24>)
 800f742:	f7fe fd44 	bl	800e1ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f746:	4804      	ldr	r0, [pc, #16]	; (800f758 <CDC_Receive_FS+0x24>)
 800f748:	f7fe fd5a 	bl	800e200 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f74c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20000cd8 	.word	0x20000cd8

0800f75c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	4613      	mov	r3, r2
 800f768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	371c      	adds	r7, #28
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr
	...

0800f780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	2212      	movs	r2, #18
 800f790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f792:	4b03      	ldr	r3, [pc, #12]	; (800f7a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f794:	4618      	mov	r0, r3
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	20000150 	.word	0x20000150

0800f7a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	6039      	str	r1, [r7, #0]
 800f7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2204      	movs	r2, #4
 800f7b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f7b6:	4b03      	ldr	r3, [pc, #12]	; (800f7c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	20000164 	.word	0x20000164

0800f7c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	6039      	str	r1, [r7, #0]
 800f7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7d4:	79fb      	ldrb	r3, [r7, #7]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d105      	bne.n	800f7e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4907      	ldr	r1, [pc, #28]	; (800f7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800f7de:	4808      	ldr	r0, [pc, #32]	; (800f800 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7e0:	f7ff fdc1 	bl	800f366 <USBD_GetString>
 800f7e4:	e004      	b.n	800f7f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7e6:	683a      	ldr	r2, [r7, #0]
 800f7e8:	4904      	ldr	r1, [pc, #16]	; (800f7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800f7ea:	4805      	ldr	r0, [pc, #20]	; (800f800 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7ec:	f7ff fdbb 	bl	800f366 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7f0:	4b02      	ldr	r3, [pc, #8]	; (800f7fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20001fa8 	.word	0x20001fa8
 800f800:	08013130 	.word	0x08013130

0800f804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	6039      	str	r1, [r7, #0]
 800f80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f810:	683a      	ldr	r2, [r7, #0]
 800f812:	4904      	ldr	r1, [pc, #16]	; (800f824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f814:	4804      	ldr	r0, [pc, #16]	; (800f828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f816:	f7ff fda6 	bl	800f366 <USBD_GetString>
  return USBD_StrDesc;
 800f81a:	4b02      	ldr	r3, [pc, #8]	; (800f824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20001fa8 	.word	0x20001fa8
 800f828:	08013148 	.word	0x08013148

0800f82c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	221a      	movs	r2, #26
 800f83c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f83e:	f000 f843 	bl	800f8c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f842:	4b02      	ldr	r3, [pc, #8]	; (800f84c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20000168 	.word	0x20000168

0800f850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d105      	bne.n	800f86e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4907      	ldr	r1, [pc, #28]	; (800f884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f866:	4808      	ldr	r0, [pc, #32]	; (800f888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f868:	f7ff fd7d 	bl	800f366 <USBD_GetString>
 800f86c:	e004      	b.n	800f878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	4904      	ldr	r1, [pc, #16]	; (800f884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f872:	4805      	ldr	r0, [pc, #20]	; (800f888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f874:	f7ff fd77 	bl	800f366 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f878:	4b02      	ldr	r3, [pc, #8]	; (800f884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20001fa8 	.word	0x20001fa8
 800f888:	0801315c 	.word	0x0801315c

0800f88c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f898:	79fb      	ldrb	r3, [r7, #7]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	4907      	ldr	r1, [pc, #28]	; (800f8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f8a2:	4808      	ldr	r0, [pc, #32]	; (800f8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f8a4:	f7ff fd5f 	bl	800f366 <USBD_GetString>
 800f8a8:	e004      	b.n	800f8b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	4904      	ldr	r1, [pc, #16]	; (800f8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f8ae:	4805      	ldr	r0, [pc, #20]	; (800f8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f8b0:	f7ff fd59 	bl	800f366 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8b4:	4b02      	ldr	r3, [pc, #8]	; (800f8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20001fa8 	.word	0x20001fa8
 800f8c4:	08013168 	.word	0x08013168

0800f8c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f8ce:	4b0f      	ldr	r3, [pc, #60]	; (800f90c <Get_SerialNum+0x44>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f8d4:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <Get_SerialNum+0x48>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f8da:	4b0e      	ldr	r3, [pc, #56]	; (800f914 <Get_SerialNum+0x4c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f8ee:	2208      	movs	r2, #8
 800f8f0:	4909      	ldr	r1, [pc, #36]	; (800f918 <Get_SerialNum+0x50>)
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 f814 	bl	800f920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f8f8:	2204      	movs	r2, #4
 800f8fa:	4908      	ldr	r1, [pc, #32]	; (800f91c <Get_SerialNum+0x54>)
 800f8fc:	68b8      	ldr	r0, [r7, #8]
 800f8fe:	f000 f80f 	bl	800f920 <IntToUnicode>
  }
}
 800f902:	bf00      	nop
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	1fff7590 	.word	0x1fff7590
 800f910:	1fff7594 	.word	0x1fff7594
 800f914:	1fff7598 	.word	0x1fff7598
 800f918:	2000016a 	.word	0x2000016a
 800f91c:	2000017a 	.word	0x2000017a

0800f920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f920:	b480      	push	{r7}
 800f922:	b087      	sub	sp, #28
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f92e:	2300      	movs	r3, #0
 800f930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f932:	2300      	movs	r3, #0
 800f934:	75fb      	strb	r3, [r7, #23]
 800f936:	e027      	b.n	800f988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	0f1b      	lsrs	r3, r3, #28
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	d80b      	bhi.n	800f958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	0f1b      	lsrs	r3, r3, #28
 800f944:	b2da      	uxtb	r2, r3
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	4619      	mov	r1, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	440b      	add	r3, r1
 800f950:	3230      	adds	r2, #48	; 0x30
 800f952:	b2d2      	uxtb	r2, r2
 800f954:	701a      	strb	r2, [r3, #0]
 800f956:	e00a      	b.n	800f96e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	0f1b      	lsrs	r3, r3, #28
 800f95c:	b2da      	uxtb	r2, r3
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	4619      	mov	r1, r3
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	440b      	add	r3, r1
 800f968:	3237      	adds	r2, #55	; 0x37
 800f96a:	b2d2      	uxtb	r2, r2
 800f96c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	011b      	lsls	r3, r3, #4
 800f972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f974:	7dfb      	ldrb	r3, [r7, #23]
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	3301      	adds	r3, #1
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	4413      	add	r3, r2
 800f97e:	2200      	movs	r2, #0
 800f980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	3301      	adds	r3, #1
 800f986:	75fb      	strb	r3, [r7, #23]
 800f988:	7dfa      	ldrb	r2, [r7, #23]
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d3d3      	bcc.n	800f938 <IntToUnicode+0x18>
  }
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	371c      	adds	r7, #28
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
	...

0800f9a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b0b0      	sub	sp, #192	; 0xc0
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	605a      	str	r2, [r3, #4]
 800f9b2:	609a      	str	r2, [r3, #8]
 800f9b4:	60da      	str	r2, [r3, #12]
 800f9b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f9b8:	f107 0318 	add.w	r3, r7, #24
 800f9bc:	2294      	movs	r2, #148	; 0x94
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 fc0b 	bl	80101dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f9ce:	d163      	bne.n	800fa98 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f9d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f9dc:	f107 0318 	add.w	r3, r7, #24
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7f5 fd45 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f9ec:	f7f2 fb26 	bl	800203c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9f0:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800f9f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9f4:	4a2a      	ldr	r2, [pc, #168]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800f9f6:	f043 0301 	orr.w	r3, r3, #1
 800f9fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f9fc:	4b28      	ldr	r3, [pc, #160]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800f9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fa08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fa0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa10:	2302      	movs	r3, #2
 800fa12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fa22:	230a      	movs	r3, #10
 800fa24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fa32:	f7f3 f869 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fa36:	4b1a      	ldr	r3, [pc, #104]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa3a:	4a19      	ldr	r2, [pc, #100]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fa40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fa42:	4b17      	ldr	r3, [pc, #92]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa4a:	613b      	str	r3, [r7, #16]
 800fa4c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fa4e:	4b14      	ldr	r3, [pc, #80]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d114      	bne.n	800fa84 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fa5a:	4b11      	ldr	r3, [pc, #68]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa5e:	4a10      	ldr	r2, [pc, #64]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa64:	6593      	str	r3, [r2, #88]	; 0x58
 800fa66:	4b0e      	ldr	r3, [pc, #56]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa6e:	60fb      	str	r3, [r7, #12]
 800fa70:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800fa72:	f7f4 fde9 	bl	8004648 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa76:	4b0a      	ldr	r3, [pc, #40]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa7a:	4a09      	ldr	r2, [pc, #36]	; (800faa0 <HAL_PCD_MspInit+0x100>)
 800fa7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa80:	6593      	str	r3, [r2, #88]	; 0x58
 800fa82:	e001      	b.n	800fa88 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800fa84:	f7f4 fde0 	bl	8004648 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	2043      	movs	r0, #67	; 0x43
 800fa8e:	f7f2 ff4a 	bl	8002926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fa92:	2043      	movs	r0, #67	; 0x43
 800fa94:	f7f2 ff63 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fa98:	bf00      	nop
 800fa9a:	37c0      	adds	r7, #192	; 0xc0
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	40021000 	.word	0x40021000

0800faa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fab8:	4619      	mov	r1, r3
 800faba:	4610      	mov	r0, r2
 800fabc:	f7fe fc6c 	bl	800e398 <USBD_LL_SetupStage>
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fada:	78fa      	ldrb	r2, [r7, #3]
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	4613      	mov	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	440b      	add	r3, r1
 800fae8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	78fb      	ldrb	r3, [r7, #3]
 800faf0:	4619      	mov	r1, r3
 800faf2:	f7fe fca6 	bl	800e442 <USBD_LL_DataOutStage>
}
 800faf6:	bf00      	nop
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b082      	sub	sp, #8
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	460b      	mov	r3, r1
 800fb08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fb10:	78fa      	ldrb	r2, [r7, #3]
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	4613      	mov	r3, r2
 800fb16:	00db      	lsls	r3, r3, #3
 800fb18:	4413      	add	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	440b      	add	r3, r1
 800fb1e:	334c      	adds	r3, #76	; 0x4c
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	78fb      	ldrb	r3, [r7, #3]
 800fb24:	4619      	mov	r1, r3
 800fb26:	f7fe fcef 	bl	800e508 <USBD_LL_DataInStage>
}
 800fb2a:	bf00      	nop
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b082      	sub	sp, #8
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe fe03 	bl	800e74c <USBD_LL_SOF>
}
 800fb46:	bf00      	nop
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b084      	sub	sp, #16
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb56:	2301      	movs	r3, #1
 800fb58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d001      	beq.n	800fb66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fb62:	f7f2 fa6b 	bl	800203c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb6c:	7bfa      	ldrb	r2, [r7, #15]
 800fb6e:	4611      	mov	r1, r2
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fe fdad 	bl	800e6d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fe fd59 	bl	800e634 <USBD_LL_Reset>
}
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
	...

0800fb8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	6812      	ldr	r2, [r2, #0]
 800fba2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fba6:	f043 0301 	orr.w	r3, r3, #1
 800fbaa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fd9c 	bl	800e6f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d005      	beq.n	800fbcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbc0:	4b04      	ldr	r3, [pc, #16]	; (800fbd4 <HAL_PCD_SuspendCallback+0x48>)
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	4a03      	ldr	r2, [pc, #12]	; (800fbd4 <HAL_PCD_SuspendCallback+0x48>)
 800fbc6:	f043 0306 	orr.w	r3, r3, #6
 800fbca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fbcc:	bf00      	nop
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	e000ed00 	.word	0xe000ed00

0800fbd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	6812      	ldr	r2, [r2, #0]
 800fbee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fbf2:	f023 0301 	bic.w	r3, r3, #1
 800fbf6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a1b      	ldr	r3, [r3, #32]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d007      	beq.n	800fc10 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc00:	4b08      	ldr	r3, [pc, #32]	; (800fc24 <HAL_PCD_ResumeCallback+0x4c>)
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	4a07      	ldr	r2, [pc, #28]	; (800fc24 <HAL_PCD_ResumeCallback+0x4c>)
 800fc06:	f023 0306 	bic.w	r3, r3, #6
 800fc0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fc0c:	f000 faa6 	bl	801015c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe fd80 	bl	800e71c <USBD_LL_Resume>
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	e000ed00 	.word	0xe000ed00

0800fc28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc3a:	78fa      	ldrb	r2, [r7, #3]
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fe fdcc 	bl	800e7dc <USBD_LL_IsoOUTIncomplete>
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	460b      	mov	r3, r1
 800fc56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc5e:	78fa      	ldrb	r2, [r7, #3]
 800fc60:	4611      	mov	r1, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fd94 	bl	800e790 <USBD_LL_IsoINIncomplete>
}
 800fc68:	bf00      	nop
 800fc6a:	3708      	adds	r7, #8
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe fdd2 	bl	800e828 <USBD_LL_DevConnected>
}
 800fc84:	bf00      	nop
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fe fdcf 	bl	800e83e <USBD_LL_DevDisconnected>
}
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d139      	bne.n	800fd2c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fcb8:	4a1f      	ldr	r2, [pc, #124]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4a1d      	ldr	r2, [pc, #116]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fcc8:	4b1b      	ldr	r3, [pc, #108]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fcce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fcd0:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcd2:	2206      	movs	r2, #6
 800fcd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fcd6:	4b18      	ldr	r3, [pc, #96]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcd8:	2202      	movs	r2, #2
 800fcda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fcdc:	4b16      	ldr	r3, [pc, #88]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <USBD_LL_Init+0x90>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fce8:	4b13      	ldr	r3, [pc, #76]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fcee:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fcf4:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fcfa:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <USBD_LL_Init+0x90>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd00:	480d      	ldr	r0, [pc, #52]	; (800fd38 <USBD_LL_Init+0x90>)
 800fd02:	f7f3 fa11 	bl	8003128 <HAL_PCD_Init>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800fd0c:	f7f2 f996 	bl	800203c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd10:	2180      	movs	r1, #128	; 0x80
 800fd12:	4809      	ldr	r0, [pc, #36]	; (800fd38 <USBD_LL_Init+0x90>)
 800fd14:	f7f4 fb93 	bl	800443e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd18:	2240      	movs	r2, #64	; 0x40
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	4806      	ldr	r0, [pc, #24]	; (800fd38 <USBD_LL_Init+0x90>)
 800fd1e:	f7f4 fb47 	bl	80043b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd22:	2280      	movs	r2, #128	; 0x80
 800fd24:	2101      	movs	r1, #1
 800fd26:	4804      	ldr	r0, [pc, #16]	; (800fd38 <USBD_LL_Init+0x90>)
 800fd28:	f7f4 fb42 	bl	80043b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	200021a8 	.word	0x200021a8

0800fd3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7f3 fb0c 	bl	8003370 <HAL_PCD_Start>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fd5c:	7bbb      	ldrb	r3, [r7, #14]
 800fd5e:	2b03      	cmp	r3, #3
 800fd60:	d816      	bhi.n	800fd90 <USBD_LL_Start+0x54>
 800fd62:	a201      	add	r2, pc, #4	; (adr r2, 800fd68 <USBD_LL_Start+0x2c>)
 800fd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd68:	0800fd79 	.word	0x0800fd79
 800fd6c:	0800fd7f 	.word	0x0800fd7f
 800fd70:	0800fd85 	.word	0x0800fd85
 800fd74:	0800fd8b 	.word	0x0800fd8b
    case HAL_OK :
      usb_status = USBD_OK;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd7c:	e00b      	b.n	800fd96 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd7e:	2303      	movs	r3, #3
 800fd80:	73fb      	strb	r3, [r7, #15]
    break;
 800fd82:	e008      	b.n	800fd96 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd84:	2301      	movs	r3, #1
 800fd86:	73fb      	strb	r3, [r7, #15]
    break;
 800fd88:	e005      	b.n	800fd96 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd8a:	2303      	movs	r3, #3
 800fd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd8e:	e002      	b.n	800fd96 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800fd90:	2303      	movs	r3, #3
 800fd92:	73fb      	strb	r3, [r7, #15]
    break;
 800fd94:	bf00      	nop
  }
  return usb_status;
 800fd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	4608      	mov	r0, r1
 800fdaa:	4611      	mov	r1, r2
 800fdac:	461a      	mov	r2, r3
 800fdae:	4603      	mov	r3, r0
 800fdb0:	70fb      	strb	r3, [r7, #3]
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	70bb      	strb	r3, [r7, #2]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fdc8:	78bb      	ldrb	r3, [r7, #2]
 800fdca:	883a      	ldrh	r2, [r7, #0]
 800fdcc:	78f9      	ldrb	r1, [r7, #3]
 800fdce:	f7f3 ffb6 	bl	8003d3e <HAL_PCD_EP_Open>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	2b03      	cmp	r3, #3
 800fdda:	d817      	bhi.n	800fe0c <USBD_LL_OpenEP+0x6c>
 800fddc:	a201      	add	r2, pc, #4	; (adr r2, 800fde4 <USBD_LL_OpenEP+0x44>)
 800fdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde2:	bf00      	nop
 800fde4:	0800fdf5 	.word	0x0800fdf5
 800fde8:	0800fdfb 	.word	0x0800fdfb
 800fdec:	0800fe01 	.word	0x0800fe01
 800fdf0:	0800fe07 	.word	0x0800fe07
    case HAL_OK :
      usb_status = USBD_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf8:	e00b      	b.n	800fe12 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	73fb      	strb	r3, [r7, #15]
    break;
 800fdfe:	e008      	b.n	800fe12 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe00:	2301      	movs	r3, #1
 800fe02:	73fb      	strb	r3, [r7, #15]
    break;
 800fe04:	e005      	b.n	800fe12 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe06:	2303      	movs	r3, #3
 800fe08:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0a:	e002      	b.n	800fe12 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe10:	bf00      	nop
  }
  return usb_status;
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe36:	78fa      	ldrb	r2, [r7, #3]
 800fe38:	4611      	mov	r1, r2
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7f3 ffe7 	bl	8003e0e <HAL_PCD_EP_Close>
 800fe40:	4603      	mov	r3, r0
 800fe42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fe44:	7bbb      	ldrb	r3, [r7, #14]
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d816      	bhi.n	800fe78 <USBD_LL_CloseEP+0x5c>
 800fe4a:	a201      	add	r2, pc, #4	; (adr r2, 800fe50 <USBD_LL_CloseEP+0x34>)
 800fe4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe50:	0800fe61 	.word	0x0800fe61
 800fe54:	0800fe67 	.word	0x0800fe67
 800fe58:	0800fe6d 	.word	0x0800fe6d
 800fe5c:	0800fe73 	.word	0x0800fe73
    case HAL_OK :
      usb_status = USBD_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	73fb      	strb	r3, [r7, #15]
    break;
 800fe64:	e00b      	b.n	800fe7e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe66:	2303      	movs	r3, #3
 800fe68:	73fb      	strb	r3, [r7, #15]
    break;
 800fe6a:	e008      	b.n	800fe7e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe70:	e005      	b.n	800fe7e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe72:	2303      	movs	r3, #3
 800fe74:	73fb      	strb	r3, [r7, #15]
    break;
 800fe76:	e002      	b.n	800fe7e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe7c:	bf00      	nop
  }
  return usb_status;
 800fe7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fea2:	78fa      	ldrb	r2, [r7, #3]
 800fea4:	4611      	mov	r1, r2
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f4 f88e 	bl	8003fc8 <HAL_PCD_EP_SetStall>
 800feac:	4603      	mov	r3, r0
 800feae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d816      	bhi.n	800fee4 <USBD_LL_StallEP+0x5c>
 800feb6:	a201      	add	r2, pc, #4	; (adr r2, 800febc <USBD_LL_StallEP+0x34>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800fecd 	.word	0x0800fecd
 800fec0:	0800fed3 	.word	0x0800fed3
 800fec4:	0800fed9 	.word	0x0800fed9
 800fec8:	0800fedf 	.word	0x0800fedf
    case HAL_OK :
      usb_status = USBD_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	73fb      	strb	r3, [r7, #15]
    break;
 800fed0:	e00b      	b.n	800feea <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fed2:	2303      	movs	r3, #3
 800fed4:	73fb      	strb	r3, [r7, #15]
    break;
 800fed6:	e008      	b.n	800feea <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fed8:	2301      	movs	r3, #1
 800feda:	73fb      	strb	r3, [r7, #15]
    break;
 800fedc:	e005      	b.n	800feea <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fede:	2303      	movs	r3, #3
 800fee0:	73fb      	strb	r3, [r7, #15]
    break;
 800fee2:	e002      	b.n	800feea <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fee4:	2303      	movs	r3, #3
 800fee6:	73fb      	strb	r3, [r7, #15]
    break;
 800fee8:	bf00      	nop
  }
  return usb_status;
 800feea:	7bfb      	ldrb	r3, [r7, #15]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	460b      	mov	r3, r1
 800fefe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff04:	2300      	movs	r3, #0
 800ff06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff0e:	78fa      	ldrb	r2, [r7, #3]
 800ff10:	4611      	mov	r1, r2
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f4 f8ba 	bl	800408c <HAL_PCD_EP_ClrStall>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ff1c:	7bbb      	ldrb	r3, [r7, #14]
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d816      	bhi.n	800ff50 <USBD_LL_ClearStallEP+0x5c>
 800ff22:	a201      	add	r2, pc, #4	; (adr r2, 800ff28 <USBD_LL_ClearStallEP+0x34>)
 800ff24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff28:	0800ff39 	.word	0x0800ff39
 800ff2c:	0800ff3f 	.word	0x0800ff3f
 800ff30:	0800ff45 	.word	0x0800ff45
 800ff34:	0800ff4b 	.word	0x0800ff4b
    case HAL_OK :
      usb_status = USBD_OK;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff3c:	e00b      	b.n	800ff56 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff3e:	2303      	movs	r3, #3
 800ff40:	73fb      	strb	r3, [r7, #15]
    break;
 800ff42:	e008      	b.n	800ff56 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff44:	2301      	movs	r3, #1
 800ff46:	73fb      	strb	r3, [r7, #15]
    break;
 800ff48:	e005      	b.n	800ff56 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff4a:	2303      	movs	r3, #3
 800ff4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff4e:	e002      	b.n	800ff56 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ff50:	2303      	movs	r3, #3
 800ff52:	73fb      	strb	r3, [r7, #15]
    break;
 800ff54:	bf00      	nop
  }
  return usb_status;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	da0b      	bge.n	800ff94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff82:	68f9      	ldr	r1, [r7, #12]
 800ff84:	4613      	mov	r3, r2
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	4413      	add	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	440b      	add	r3, r1
 800ff8e:	333e      	adds	r3, #62	; 0x3e
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	e00b      	b.n	800ffac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff94:	78fb      	ldrb	r3, [r7, #3]
 800ff96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff9a:	68f9      	ldr	r1, [r7, #12]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	4413      	add	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	440b      	add	r3, r1
 800ffa6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ffaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffd2:	78fa      	ldrb	r2, [r7, #3]
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7f3 fe8c 	bl	8003cf4 <HAL_PCD_SetAddress>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
 800ffe2:	2b03      	cmp	r3, #3
 800ffe4:	d816      	bhi.n	8010014 <USBD_LL_SetUSBAddress+0x5c>
 800ffe6:	a201      	add	r2, pc, #4	; (adr r2, 800ffec <USBD_LL_SetUSBAddress+0x34>)
 800ffe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffec:	0800fffd 	.word	0x0800fffd
 800fff0:	08010003 	.word	0x08010003
 800fff4:	08010009 	.word	0x08010009
 800fff8:	0801000f 	.word	0x0801000f
    case HAL_OK :
      usb_status = USBD_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
    break;
 8010000:	e00b      	b.n	801001a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010002:	2303      	movs	r3, #3
 8010004:	73fb      	strb	r3, [r7, #15]
    break;
 8010006:	e008      	b.n	801001a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010008:	2301      	movs	r3, #1
 801000a:	73fb      	strb	r3, [r7, #15]
    break;
 801000c:	e005      	b.n	801001a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801000e:	2303      	movs	r3, #3
 8010010:	73fb      	strb	r3, [r7, #15]
    break;
 8010012:	e002      	b.n	801001a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010014:	2303      	movs	r3, #3
 8010016:	73fb      	strb	r3, [r7, #15]
    break;
 8010018:	bf00      	nop
  }
  return usb_status;
 801001a:	7bfb      	ldrb	r3, [r7, #15]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	607a      	str	r2, [r7, #4]
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	460b      	mov	r3, r1
 8010032:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010038:	2300      	movs	r3, #0
 801003a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010042:	7af9      	ldrb	r1, [r7, #11]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	f7f3 ff81 	bl	8003f4e <HAL_PCD_EP_Transmit>
 801004c:	4603      	mov	r3, r0
 801004e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010050:	7dbb      	ldrb	r3, [r7, #22]
 8010052:	2b03      	cmp	r3, #3
 8010054:	d816      	bhi.n	8010084 <USBD_LL_Transmit+0x60>
 8010056:	a201      	add	r2, pc, #4	; (adr r2, 801005c <USBD_LL_Transmit+0x38>)
 8010058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005c:	0801006d 	.word	0x0801006d
 8010060:	08010073 	.word	0x08010073
 8010064:	08010079 	.word	0x08010079
 8010068:	0801007f 	.word	0x0801007f
    case HAL_OK :
      usb_status = USBD_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	75fb      	strb	r3, [r7, #23]
    break;
 8010070:	e00b      	b.n	801008a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010072:	2303      	movs	r3, #3
 8010074:	75fb      	strb	r3, [r7, #23]
    break;
 8010076:	e008      	b.n	801008a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010078:	2301      	movs	r3, #1
 801007a:	75fb      	strb	r3, [r7, #23]
    break;
 801007c:	e005      	b.n	801008a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801007e:	2303      	movs	r3, #3
 8010080:	75fb      	strb	r3, [r7, #23]
    break;
 8010082:	e002      	b.n	801008a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010084:	2303      	movs	r3, #3
 8010086:	75fb      	strb	r3, [r7, #23]
    break;
 8010088:	bf00      	nop
  }
  return usb_status;
 801008a:	7dfb      	ldrb	r3, [r7, #23]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	607a      	str	r2, [r7, #4]
 801009e:	603b      	str	r3, [r7, #0]
 80100a0:	460b      	mov	r3, r1
 80100a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80100b2:	7af9      	ldrb	r1, [r7, #11]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	f7f3 fef3 	bl	8003ea2 <HAL_PCD_EP_Receive>
 80100bc:	4603      	mov	r3, r0
 80100be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80100c0:	7dbb      	ldrb	r3, [r7, #22]
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	d816      	bhi.n	80100f4 <USBD_LL_PrepareReceive+0x60>
 80100c6:	a201      	add	r2, pc, #4	; (adr r2, 80100cc <USBD_LL_PrepareReceive+0x38>)
 80100c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100cc:	080100dd 	.word	0x080100dd
 80100d0:	080100e3 	.word	0x080100e3
 80100d4:	080100e9 	.word	0x080100e9
 80100d8:	080100ef 	.word	0x080100ef
    case HAL_OK :
      usb_status = USBD_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	75fb      	strb	r3, [r7, #23]
    break;
 80100e0:	e00b      	b.n	80100fa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100e2:	2303      	movs	r3, #3
 80100e4:	75fb      	strb	r3, [r7, #23]
    break;
 80100e6:	e008      	b.n	80100fa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100e8:	2301      	movs	r3, #1
 80100ea:	75fb      	strb	r3, [r7, #23]
    break;
 80100ec:	e005      	b.n	80100fa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100ee:	2303      	movs	r3, #3
 80100f0:	75fb      	strb	r3, [r7, #23]
    break;
 80100f2:	e002      	b.n	80100fa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80100f4:	2303      	movs	r3, #3
 80100f6:	75fb      	strb	r3, [r7, #23]
    break;
 80100f8:	bf00      	nop
  }
  return usb_status;
 80100fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	460b      	mov	r3, r1
 801010e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010116:	78fa      	ldrb	r2, [r7, #3]
 8010118:	4611      	mov	r1, r2
 801011a:	4618      	mov	r0, r3
 801011c:	f7f3 feff 	bl	8003f1e <HAL_PCD_EP_GetRxCount>
 8010120:	4603      	mov	r3, r0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
	...

0801012c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010134:	4b03      	ldr	r3, [pc, #12]	; (8010144 <USBD_static_malloc+0x18>)
}
 8010136:	4618      	mov	r0, r3
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	200026b4 	.word	0x200026b4

08010148 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]

}
 8010150:	bf00      	nop
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010160:	f7f1 fc82 	bl	8001a68 <SystemClock_Config>
}
 8010164:	bf00      	nop
 8010166:	bd80      	pop	{r7, pc}

08010168 <__libc_init_array>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	4d0d      	ldr	r5, [pc, #52]	; (80101a0 <__libc_init_array+0x38>)
 801016c:	4c0d      	ldr	r4, [pc, #52]	; (80101a4 <__libc_init_array+0x3c>)
 801016e:	1b64      	subs	r4, r4, r5
 8010170:	10a4      	asrs	r4, r4, #2
 8010172:	2600      	movs	r6, #0
 8010174:	42a6      	cmp	r6, r4
 8010176:	d109      	bne.n	801018c <__libc_init_array+0x24>
 8010178:	4d0b      	ldr	r5, [pc, #44]	; (80101a8 <__libc_init_array+0x40>)
 801017a:	4c0c      	ldr	r4, [pc, #48]	; (80101ac <__libc_init_array+0x44>)
 801017c:	f002 ff84 	bl	8013088 <_init>
 8010180:	1b64      	subs	r4, r4, r5
 8010182:	10a4      	asrs	r4, r4, #2
 8010184:	2600      	movs	r6, #0
 8010186:	42a6      	cmp	r6, r4
 8010188:	d105      	bne.n	8010196 <__libc_init_array+0x2e>
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010190:	4798      	blx	r3
 8010192:	3601      	adds	r6, #1
 8010194:	e7ee      	b.n	8010174 <__libc_init_array+0xc>
 8010196:	f855 3b04 	ldr.w	r3, [r5], #4
 801019a:	4798      	blx	r3
 801019c:	3601      	adds	r6, #1
 801019e:	e7f2      	b.n	8010186 <__libc_init_array+0x1e>
 80101a0:	080135e8 	.word	0x080135e8
 80101a4:	080135e8 	.word	0x080135e8
 80101a8:	080135e8 	.word	0x080135e8
 80101ac:	080135ec 	.word	0x080135ec

080101b0 <malloc>:
 80101b0:	4b02      	ldr	r3, [pc, #8]	; (80101bc <malloc+0xc>)
 80101b2:	4601      	mov	r1, r0
 80101b4:	6818      	ldr	r0, [r3, #0]
 80101b6:	f000 b885 	b.w	80102c4 <_malloc_r>
 80101ba:	bf00      	nop
 80101bc:	20000184 	.word	0x20000184

080101c0 <memcpy>:
 80101c0:	440a      	add	r2, r1
 80101c2:	4291      	cmp	r1, r2
 80101c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80101c8:	d100      	bne.n	80101cc <memcpy+0xc>
 80101ca:	4770      	bx	lr
 80101cc:	b510      	push	{r4, lr}
 80101ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101d6:	4291      	cmp	r1, r2
 80101d8:	d1f9      	bne.n	80101ce <memcpy+0xe>
 80101da:	bd10      	pop	{r4, pc}

080101dc <memset>:
 80101dc:	4402      	add	r2, r0
 80101de:	4603      	mov	r3, r0
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d100      	bne.n	80101e6 <memset+0xa>
 80101e4:	4770      	bx	lr
 80101e6:	f803 1b01 	strb.w	r1, [r3], #1
 80101ea:	e7f9      	b.n	80101e0 <memset+0x4>

080101ec <_free_r>:
 80101ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101ee:	2900      	cmp	r1, #0
 80101f0:	d044      	beq.n	801027c <_free_r+0x90>
 80101f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101f6:	9001      	str	r0, [sp, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f1a1 0404 	sub.w	r4, r1, #4
 80101fe:	bfb8      	it	lt
 8010200:	18e4      	addlt	r4, r4, r3
 8010202:	f001 fd55 	bl	8011cb0 <__malloc_lock>
 8010206:	4a1e      	ldr	r2, [pc, #120]	; (8010280 <_free_r+0x94>)
 8010208:	9801      	ldr	r0, [sp, #4]
 801020a:	6813      	ldr	r3, [r2, #0]
 801020c:	b933      	cbnz	r3, 801021c <_free_r+0x30>
 801020e:	6063      	str	r3, [r4, #4]
 8010210:	6014      	str	r4, [r2, #0]
 8010212:	b003      	add	sp, #12
 8010214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010218:	f001 bd50 	b.w	8011cbc <__malloc_unlock>
 801021c:	42a3      	cmp	r3, r4
 801021e:	d908      	bls.n	8010232 <_free_r+0x46>
 8010220:	6825      	ldr	r5, [r4, #0]
 8010222:	1961      	adds	r1, r4, r5
 8010224:	428b      	cmp	r3, r1
 8010226:	bf01      	itttt	eq
 8010228:	6819      	ldreq	r1, [r3, #0]
 801022a:	685b      	ldreq	r3, [r3, #4]
 801022c:	1949      	addeq	r1, r1, r5
 801022e:	6021      	streq	r1, [r4, #0]
 8010230:	e7ed      	b.n	801020e <_free_r+0x22>
 8010232:	461a      	mov	r2, r3
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	b10b      	cbz	r3, 801023c <_free_r+0x50>
 8010238:	42a3      	cmp	r3, r4
 801023a:	d9fa      	bls.n	8010232 <_free_r+0x46>
 801023c:	6811      	ldr	r1, [r2, #0]
 801023e:	1855      	adds	r5, r2, r1
 8010240:	42a5      	cmp	r5, r4
 8010242:	d10b      	bne.n	801025c <_free_r+0x70>
 8010244:	6824      	ldr	r4, [r4, #0]
 8010246:	4421      	add	r1, r4
 8010248:	1854      	adds	r4, r2, r1
 801024a:	42a3      	cmp	r3, r4
 801024c:	6011      	str	r1, [r2, #0]
 801024e:	d1e0      	bne.n	8010212 <_free_r+0x26>
 8010250:	681c      	ldr	r4, [r3, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	6053      	str	r3, [r2, #4]
 8010256:	4421      	add	r1, r4
 8010258:	6011      	str	r1, [r2, #0]
 801025a:	e7da      	b.n	8010212 <_free_r+0x26>
 801025c:	d902      	bls.n	8010264 <_free_r+0x78>
 801025e:	230c      	movs	r3, #12
 8010260:	6003      	str	r3, [r0, #0]
 8010262:	e7d6      	b.n	8010212 <_free_r+0x26>
 8010264:	6825      	ldr	r5, [r4, #0]
 8010266:	1961      	adds	r1, r4, r5
 8010268:	428b      	cmp	r3, r1
 801026a:	bf04      	itt	eq
 801026c:	6819      	ldreq	r1, [r3, #0]
 801026e:	685b      	ldreq	r3, [r3, #4]
 8010270:	6063      	str	r3, [r4, #4]
 8010272:	bf04      	itt	eq
 8010274:	1949      	addeq	r1, r1, r5
 8010276:	6021      	streq	r1, [r4, #0]
 8010278:	6054      	str	r4, [r2, #4]
 801027a:	e7ca      	b.n	8010212 <_free_r+0x26>
 801027c:	b003      	add	sp, #12
 801027e:	bd30      	pop	{r4, r5, pc}
 8010280:	200028d4 	.word	0x200028d4

08010284 <sbrk_aligned>:
 8010284:	b570      	push	{r4, r5, r6, lr}
 8010286:	4e0e      	ldr	r6, [pc, #56]	; (80102c0 <sbrk_aligned+0x3c>)
 8010288:	460c      	mov	r4, r1
 801028a:	6831      	ldr	r1, [r6, #0]
 801028c:	4605      	mov	r5, r0
 801028e:	b911      	cbnz	r1, 8010296 <sbrk_aligned+0x12>
 8010290:	f000 fd0e 	bl	8010cb0 <_sbrk_r>
 8010294:	6030      	str	r0, [r6, #0]
 8010296:	4621      	mov	r1, r4
 8010298:	4628      	mov	r0, r5
 801029a:	f000 fd09 	bl	8010cb0 <_sbrk_r>
 801029e:	1c43      	adds	r3, r0, #1
 80102a0:	d00a      	beq.n	80102b8 <sbrk_aligned+0x34>
 80102a2:	1cc4      	adds	r4, r0, #3
 80102a4:	f024 0403 	bic.w	r4, r4, #3
 80102a8:	42a0      	cmp	r0, r4
 80102aa:	d007      	beq.n	80102bc <sbrk_aligned+0x38>
 80102ac:	1a21      	subs	r1, r4, r0
 80102ae:	4628      	mov	r0, r5
 80102b0:	f000 fcfe 	bl	8010cb0 <_sbrk_r>
 80102b4:	3001      	adds	r0, #1
 80102b6:	d101      	bne.n	80102bc <sbrk_aligned+0x38>
 80102b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80102bc:	4620      	mov	r0, r4
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	200028d8 	.word	0x200028d8

080102c4 <_malloc_r>:
 80102c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c8:	1ccd      	adds	r5, r1, #3
 80102ca:	f025 0503 	bic.w	r5, r5, #3
 80102ce:	3508      	adds	r5, #8
 80102d0:	2d0c      	cmp	r5, #12
 80102d2:	bf38      	it	cc
 80102d4:	250c      	movcc	r5, #12
 80102d6:	2d00      	cmp	r5, #0
 80102d8:	4607      	mov	r7, r0
 80102da:	db01      	blt.n	80102e0 <_malloc_r+0x1c>
 80102dc:	42a9      	cmp	r1, r5
 80102de:	d905      	bls.n	80102ec <_malloc_r+0x28>
 80102e0:	230c      	movs	r3, #12
 80102e2:	603b      	str	r3, [r7, #0]
 80102e4:	2600      	movs	r6, #0
 80102e6:	4630      	mov	r0, r6
 80102e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ec:	4e2e      	ldr	r6, [pc, #184]	; (80103a8 <_malloc_r+0xe4>)
 80102ee:	f001 fcdf 	bl	8011cb0 <__malloc_lock>
 80102f2:	6833      	ldr	r3, [r6, #0]
 80102f4:	461c      	mov	r4, r3
 80102f6:	bb34      	cbnz	r4, 8010346 <_malloc_r+0x82>
 80102f8:	4629      	mov	r1, r5
 80102fa:	4638      	mov	r0, r7
 80102fc:	f7ff ffc2 	bl	8010284 <sbrk_aligned>
 8010300:	1c43      	adds	r3, r0, #1
 8010302:	4604      	mov	r4, r0
 8010304:	d14d      	bne.n	80103a2 <_malloc_r+0xde>
 8010306:	6834      	ldr	r4, [r6, #0]
 8010308:	4626      	mov	r6, r4
 801030a:	2e00      	cmp	r6, #0
 801030c:	d140      	bne.n	8010390 <_malloc_r+0xcc>
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	4631      	mov	r1, r6
 8010312:	4638      	mov	r0, r7
 8010314:	eb04 0803 	add.w	r8, r4, r3
 8010318:	f000 fcca 	bl	8010cb0 <_sbrk_r>
 801031c:	4580      	cmp	r8, r0
 801031e:	d13a      	bne.n	8010396 <_malloc_r+0xd2>
 8010320:	6821      	ldr	r1, [r4, #0]
 8010322:	3503      	adds	r5, #3
 8010324:	1a6d      	subs	r5, r5, r1
 8010326:	f025 0503 	bic.w	r5, r5, #3
 801032a:	3508      	adds	r5, #8
 801032c:	2d0c      	cmp	r5, #12
 801032e:	bf38      	it	cc
 8010330:	250c      	movcc	r5, #12
 8010332:	4629      	mov	r1, r5
 8010334:	4638      	mov	r0, r7
 8010336:	f7ff ffa5 	bl	8010284 <sbrk_aligned>
 801033a:	3001      	adds	r0, #1
 801033c:	d02b      	beq.n	8010396 <_malloc_r+0xd2>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	442b      	add	r3, r5
 8010342:	6023      	str	r3, [r4, #0]
 8010344:	e00e      	b.n	8010364 <_malloc_r+0xa0>
 8010346:	6822      	ldr	r2, [r4, #0]
 8010348:	1b52      	subs	r2, r2, r5
 801034a:	d41e      	bmi.n	801038a <_malloc_r+0xc6>
 801034c:	2a0b      	cmp	r2, #11
 801034e:	d916      	bls.n	801037e <_malloc_r+0xba>
 8010350:	1961      	adds	r1, r4, r5
 8010352:	42a3      	cmp	r3, r4
 8010354:	6025      	str	r5, [r4, #0]
 8010356:	bf18      	it	ne
 8010358:	6059      	strne	r1, [r3, #4]
 801035a:	6863      	ldr	r3, [r4, #4]
 801035c:	bf08      	it	eq
 801035e:	6031      	streq	r1, [r6, #0]
 8010360:	5162      	str	r2, [r4, r5]
 8010362:	604b      	str	r3, [r1, #4]
 8010364:	4638      	mov	r0, r7
 8010366:	f104 060b 	add.w	r6, r4, #11
 801036a:	f001 fca7 	bl	8011cbc <__malloc_unlock>
 801036e:	f026 0607 	bic.w	r6, r6, #7
 8010372:	1d23      	adds	r3, r4, #4
 8010374:	1af2      	subs	r2, r6, r3
 8010376:	d0b6      	beq.n	80102e6 <_malloc_r+0x22>
 8010378:	1b9b      	subs	r3, r3, r6
 801037a:	50a3      	str	r3, [r4, r2]
 801037c:	e7b3      	b.n	80102e6 <_malloc_r+0x22>
 801037e:	6862      	ldr	r2, [r4, #4]
 8010380:	42a3      	cmp	r3, r4
 8010382:	bf0c      	ite	eq
 8010384:	6032      	streq	r2, [r6, #0]
 8010386:	605a      	strne	r2, [r3, #4]
 8010388:	e7ec      	b.n	8010364 <_malloc_r+0xa0>
 801038a:	4623      	mov	r3, r4
 801038c:	6864      	ldr	r4, [r4, #4]
 801038e:	e7b2      	b.n	80102f6 <_malloc_r+0x32>
 8010390:	4634      	mov	r4, r6
 8010392:	6876      	ldr	r6, [r6, #4]
 8010394:	e7b9      	b.n	801030a <_malloc_r+0x46>
 8010396:	230c      	movs	r3, #12
 8010398:	603b      	str	r3, [r7, #0]
 801039a:	4638      	mov	r0, r7
 801039c:	f001 fc8e 	bl	8011cbc <__malloc_unlock>
 80103a0:	e7a1      	b.n	80102e6 <_malloc_r+0x22>
 80103a2:	6025      	str	r5, [r4, #0]
 80103a4:	e7de      	b.n	8010364 <_malloc_r+0xa0>
 80103a6:	bf00      	nop
 80103a8:	200028d4 	.word	0x200028d4

080103ac <__cvt>:
 80103ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103b0:	ec55 4b10 	vmov	r4, r5, d0
 80103b4:	2d00      	cmp	r5, #0
 80103b6:	460e      	mov	r6, r1
 80103b8:	4619      	mov	r1, r3
 80103ba:	462b      	mov	r3, r5
 80103bc:	bfbb      	ittet	lt
 80103be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80103c2:	461d      	movlt	r5, r3
 80103c4:	2300      	movge	r3, #0
 80103c6:	232d      	movlt	r3, #45	; 0x2d
 80103c8:	700b      	strb	r3, [r1, #0]
 80103ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80103d0:	4691      	mov	r9, r2
 80103d2:	f023 0820 	bic.w	r8, r3, #32
 80103d6:	bfbc      	itt	lt
 80103d8:	4622      	movlt	r2, r4
 80103da:	4614      	movlt	r4, r2
 80103dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103e0:	d005      	beq.n	80103ee <__cvt+0x42>
 80103e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80103e6:	d100      	bne.n	80103ea <__cvt+0x3e>
 80103e8:	3601      	adds	r6, #1
 80103ea:	2102      	movs	r1, #2
 80103ec:	e000      	b.n	80103f0 <__cvt+0x44>
 80103ee:	2103      	movs	r1, #3
 80103f0:	ab03      	add	r3, sp, #12
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	ab02      	add	r3, sp, #8
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	ec45 4b10 	vmov	d0, r4, r5
 80103fc:	4653      	mov	r3, sl
 80103fe:	4632      	mov	r2, r6
 8010400:	f000 fd46 	bl	8010e90 <_dtoa_r>
 8010404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010408:	4607      	mov	r7, r0
 801040a:	d102      	bne.n	8010412 <__cvt+0x66>
 801040c:	f019 0f01 	tst.w	r9, #1
 8010410:	d022      	beq.n	8010458 <__cvt+0xac>
 8010412:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010416:	eb07 0906 	add.w	r9, r7, r6
 801041a:	d110      	bne.n	801043e <__cvt+0x92>
 801041c:	783b      	ldrb	r3, [r7, #0]
 801041e:	2b30      	cmp	r3, #48	; 0x30
 8010420:	d10a      	bne.n	8010438 <__cvt+0x8c>
 8010422:	2200      	movs	r2, #0
 8010424:	2300      	movs	r3, #0
 8010426:	4620      	mov	r0, r4
 8010428:	4629      	mov	r1, r5
 801042a:	f7f0 fb65 	bl	8000af8 <__aeabi_dcmpeq>
 801042e:	b918      	cbnz	r0, 8010438 <__cvt+0x8c>
 8010430:	f1c6 0601 	rsb	r6, r6, #1
 8010434:	f8ca 6000 	str.w	r6, [sl]
 8010438:	f8da 3000 	ldr.w	r3, [sl]
 801043c:	4499      	add	r9, r3
 801043e:	2200      	movs	r2, #0
 8010440:	2300      	movs	r3, #0
 8010442:	4620      	mov	r0, r4
 8010444:	4629      	mov	r1, r5
 8010446:	f7f0 fb57 	bl	8000af8 <__aeabi_dcmpeq>
 801044a:	b108      	cbz	r0, 8010450 <__cvt+0xa4>
 801044c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010450:	2230      	movs	r2, #48	; 0x30
 8010452:	9b03      	ldr	r3, [sp, #12]
 8010454:	454b      	cmp	r3, r9
 8010456:	d307      	bcc.n	8010468 <__cvt+0xbc>
 8010458:	9b03      	ldr	r3, [sp, #12]
 801045a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801045c:	1bdb      	subs	r3, r3, r7
 801045e:	4638      	mov	r0, r7
 8010460:	6013      	str	r3, [r2, #0]
 8010462:	b004      	add	sp, #16
 8010464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010468:	1c59      	adds	r1, r3, #1
 801046a:	9103      	str	r1, [sp, #12]
 801046c:	701a      	strb	r2, [r3, #0]
 801046e:	e7f0      	b.n	8010452 <__cvt+0xa6>

08010470 <__exponent>:
 8010470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010472:	4603      	mov	r3, r0
 8010474:	2900      	cmp	r1, #0
 8010476:	bfb8      	it	lt
 8010478:	4249      	neglt	r1, r1
 801047a:	f803 2b02 	strb.w	r2, [r3], #2
 801047e:	bfb4      	ite	lt
 8010480:	222d      	movlt	r2, #45	; 0x2d
 8010482:	222b      	movge	r2, #43	; 0x2b
 8010484:	2909      	cmp	r1, #9
 8010486:	7042      	strb	r2, [r0, #1]
 8010488:	dd2a      	ble.n	80104e0 <__exponent+0x70>
 801048a:	f10d 0407 	add.w	r4, sp, #7
 801048e:	46a4      	mov	ip, r4
 8010490:	270a      	movs	r7, #10
 8010492:	46a6      	mov	lr, r4
 8010494:	460a      	mov	r2, r1
 8010496:	fb91 f6f7 	sdiv	r6, r1, r7
 801049a:	fb07 1516 	mls	r5, r7, r6, r1
 801049e:	3530      	adds	r5, #48	; 0x30
 80104a0:	2a63      	cmp	r2, #99	; 0x63
 80104a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80104a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80104aa:	4631      	mov	r1, r6
 80104ac:	dcf1      	bgt.n	8010492 <__exponent+0x22>
 80104ae:	3130      	adds	r1, #48	; 0x30
 80104b0:	f1ae 0502 	sub.w	r5, lr, #2
 80104b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80104b8:	1c44      	adds	r4, r0, #1
 80104ba:	4629      	mov	r1, r5
 80104bc:	4561      	cmp	r1, ip
 80104be:	d30a      	bcc.n	80104d6 <__exponent+0x66>
 80104c0:	f10d 0209 	add.w	r2, sp, #9
 80104c4:	eba2 020e 	sub.w	r2, r2, lr
 80104c8:	4565      	cmp	r5, ip
 80104ca:	bf88      	it	hi
 80104cc:	2200      	movhi	r2, #0
 80104ce:	4413      	add	r3, r2
 80104d0:	1a18      	subs	r0, r3, r0
 80104d2:	b003      	add	sp, #12
 80104d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80104de:	e7ed      	b.n	80104bc <__exponent+0x4c>
 80104e0:	2330      	movs	r3, #48	; 0x30
 80104e2:	3130      	adds	r1, #48	; 0x30
 80104e4:	7083      	strb	r3, [r0, #2]
 80104e6:	70c1      	strb	r1, [r0, #3]
 80104e8:	1d03      	adds	r3, r0, #4
 80104ea:	e7f1      	b.n	80104d0 <__exponent+0x60>

080104ec <_printf_float>:
 80104ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f0:	ed2d 8b02 	vpush	{d8}
 80104f4:	b08d      	sub	sp, #52	; 0x34
 80104f6:	460c      	mov	r4, r1
 80104f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80104fc:	4616      	mov	r6, r2
 80104fe:	461f      	mov	r7, r3
 8010500:	4605      	mov	r5, r0
 8010502:	f001 fbbb 	bl	8011c7c <_localeconv_r>
 8010506:	f8d0 a000 	ldr.w	sl, [r0]
 801050a:	4650      	mov	r0, sl
 801050c:	f7ef fe78 	bl	8000200 <strlen>
 8010510:	2300      	movs	r3, #0
 8010512:	930a      	str	r3, [sp, #40]	; 0x28
 8010514:	6823      	ldr	r3, [r4, #0]
 8010516:	9305      	str	r3, [sp, #20]
 8010518:	f8d8 3000 	ldr.w	r3, [r8]
 801051c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010520:	3307      	adds	r3, #7
 8010522:	f023 0307 	bic.w	r3, r3, #7
 8010526:	f103 0208 	add.w	r2, r3, #8
 801052a:	f8c8 2000 	str.w	r2, [r8]
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010536:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801053a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801053e:	9307      	str	r3, [sp, #28]
 8010540:	f8cd 8018 	str.w	r8, [sp, #24]
 8010544:	ee08 0a10 	vmov	s16, r0
 8010548:	4b9f      	ldr	r3, [pc, #636]	; (80107c8 <_printf_float+0x2dc>)
 801054a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801054e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010552:	f7f0 fb03 	bl	8000b5c <__aeabi_dcmpun>
 8010556:	bb88      	cbnz	r0, 80105bc <_printf_float+0xd0>
 8010558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801055c:	4b9a      	ldr	r3, [pc, #616]	; (80107c8 <_printf_float+0x2dc>)
 801055e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010562:	f7f0 fadd 	bl	8000b20 <__aeabi_dcmple>
 8010566:	bb48      	cbnz	r0, 80105bc <_printf_float+0xd0>
 8010568:	2200      	movs	r2, #0
 801056a:	2300      	movs	r3, #0
 801056c:	4640      	mov	r0, r8
 801056e:	4649      	mov	r1, r9
 8010570:	f7f0 facc 	bl	8000b0c <__aeabi_dcmplt>
 8010574:	b110      	cbz	r0, 801057c <_printf_float+0x90>
 8010576:	232d      	movs	r3, #45	; 0x2d
 8010578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801057c:	4b93      	ldr	r3, [pc, #588]	; (80107cc <_printf_float+0x2e0>)
 801057e:	4894      	ldr	r0, [pc, #592]	; (80107d0 <_printf_float+0x2e4>)
 8010580:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010584:	bf94      	ite	ls
 8010586:	4698      	movls	r8, r3
 8010588:	4680      	movhi	r8, r0
 801058a:	2303      	movs	r3, #3
 801058c:	6123      	str	r3, [r4, #16]
 801058e:	9b05      	ldr	r3, [sp, #20]
 8010590:	f023 0204 	bic.w	r2, r3, #4
 8010594:	6022      	str	r2, [r4, #0]
 8010596:	f04f 0900 	mov.w	r9, #0
 801059a:	9700      	str	r7, [sp, #0]
 801059c:	4633      	mov	r3, r6
 801059e:	aa0b      	add	r2, sp, #44	; 0x2c
 80105a0:	4621      	mov	r1, r4
 80105a2:	4628      	mov	r0, r5
 80105a4:	f000 f9d8 	bl	8010958 <_printf_common>
 80105a8:	3001      	adds	r0, #1
 80105aa:	f040 8090 	bne.w	80106ce <_printf_float+0x1e2>
 80105ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105b2:	b00d      	add	sp, #52	; 0x34
 80105b4:	ecbd 8b02 	vpop	{d8}
 80105b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105bc:	4642      	mov	r2, r8
 80105be:	464b      	mov	r3, r9
 80105c0:	4640      	mov	r0, r8
 80105c2:	4649      	mov	r1, r9
 80105c4:	f7f0 faca 	bl	8000b5c <__aeabi_dcmpun>
 80105c8:	b140      	cbz	r0, 80105dc <_printf_float+0xf0>
 80105ca:	464b      	mov	r3, r9
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	bfbc      	itt	lt
 80105d0:	232d      	movlt	r3, #45	; 0x2d
 80105d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80105d6:	487f      	ldr	r0, [pc, #508]	; (80107d4 <_printf_float+0x2e8>)
 80105d8:	4b7f      	ldr	r3, [pc, #508]	; (80107d8 <_printf_float+0x2ec>)
 80105da:	e7d1      	b.n	8010580 <_printf_float+0x94>
 80105dc:	6863      	ldr	r3, [r4, #4]
 80105de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80105e2:	9206      	str	r2, [sp, #24]
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	d13f      	bne.n	8010668 <_printf_float+0x17c>
 80105e8:	2306      	movs	r3, #6
 80105ea:	6063      	str	r3, [r4, #4]
 80105ec:	9b05      	ldr	r3, [sp, #20]
 80105ee:	6861      	ldr	r1, [r4, #4]
 80105f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80105f4:	2300      	movs	r3, #0
 80105f6:	9303      	str	r3, [sp, #12]
 80105f8:	ab0a      	add	r3, sp, #40	; 0x28
 80105fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80105fe:	ab09      	add	r3, sp, #36	; 0x24
 8010600:	ec49 8b10 	vmov	d0, r8, r9
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	6022      	str	r2, [r4, #0]
 8010608:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801060c:	4628      	mov	r0, r5
 801060e:	f7ff fecd 	bl	80103ac <__cvt>
 8010612:	9b06      	ldr	r3, [sp, #24]
 8010614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010616:	2b47      	cmp	r3, #71	; 0x47
 8010618:	4680      	mov	r8, r0
 801061a:	d108      	bne.n	801062e <_printf_float+0x142>
 801061c:	1cc8      	adds	r0, r1, #3
 801061e:	db02      	blt.n	8010626 <_printf_float+0x13a>
 8010620:	6863      	ldr	r3, [r4, #4]
 8010622:	4299      	cmp	r1, r3
 8010624:	dd41      	ble.n	80106aa <_printf_float+0x1be>
 8010626:	f1ab 0b02 	sub.w	fp, fp, #2
 801062a:	fa5f fb8b 	uxtb.w	fp, fp
 801062e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010632:	d820      	bhi.n	8010676 <_printf_float+0x18a>
 8010634:	3901      	subs	r1, #1
 8010636:	465a      	mov	r2, fp
 8010638:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801063c:	9109      	str	r1, [sp, #36]	; 0x24
 801063e:	f7ff ff17 	bl	8010470 <__exponent>
 8010642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010644:	1813      	adds	r3, r2, r0
 8010646:	2a01      	cmp	r2, #1
 8010648:	4681      	mov	r9, r0
 801064a:	6123      	str	r3, [r4, #16]
 801064c:	dc02      	bgt.n	8010654 <_printf_float+0x168>
 801064e:	6822      	ldr	r2, [r4, #0]
 8010650:	07d2      	lsls	r2, r2, #31
 8010652:	d501      	bpl.n	8010658 <_printf_float+0x16c>
 8010654:	3301      	adds	r3, #1
 8010656:	6123      	str	r3, [r4, #16]
 8010658:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801065c:	2b00      	cmp	r3, #0
 801065e:	d09c      	beq.n	801059a <_printf_float+0xae>
 8010660:	232d      	movs	r3, #45	; 0x2d
 8010662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010666:	e798      	b.n	801059a <_printf_float+0xae>
 8010668:	9a06      	ldr	r2, [sp, #24]
 801066a:	2a47      	cmp	r2, #71	; 0x47
 801066c:	d1be      	bne.n	80105ec <_printf_float+0x100>
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1bc      	bne.n	80105ec <_printf_float+0x100>
 8010672:	2301      	movs	r3, #1
 8010674:	e7b9      	b.n	80105ea <_printf_float+0xfe>
 8010676:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801067a:	d118      	bne.n	80106ae <_printf_float+0x1c2>
 801067c:	2900      	cmp	r1, #0
 801067e:	6863      	ldr	r3, [r4, #4]
 8010680:	dd0b      	ble.n	801069a <_printf_float+0x1ae>
 8010682:	6121      	str	r1, [r4, #16]
 8010684:	b913      	cbnz	r3, 801068c <_printf_float+0x1a0>
 8010686:	6822      	ldr	r2, [r4, #0]
 8010688:	07d0      	lsls	r0, r2, #31
 801068a:	d502      	bpl.n	8010692 <_printf_float+0x1a6>
 801068c:	3301      	adds	r3, #1
 801068e:	440b      	add	r3, r1
 8010690:	6123      	str	r3, [r4, #16]
 8010692:	65a1      	str	r1, [r4, #88]	; 0x58
 8010694:	f04f 0900 	mov.w	r9, #0
 8010698:	e7de      	b.n	8010658 <_printf_float+0x16c>
 801069a:	b913      	cbnz	r3, 80106a2 <_printf_float+0x1b6>
 801069c:	6822      	ldr	r2, [r4, #0]
 801069e:	07d2      	lsls	r2, r2, #31
 80106a0:	d501      	bpl.n	80106a6 <_printf_float+0x1ba>
 80106a2:	3302      	adds	r3, #2
 80106a4:	e7f4      	b.n	8010690 <_printf_float+0x1a4>
 80106a6:	2301      	movs	r3, #1
 80106a8:	e7f2      	b.n	8010690 <_printf_float+0x1a4>
 80106aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80106ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106b0:	4299      	cmp	r1, r3
 80106b2:	db05      	blt.n	80106c0 <_printf_float+0x1d4>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	6121      	str	r1, [r4, #16]
 80106b8:	07d8      	lsls	r0, r3, #31
 80106ba:	d5ea      	bpl.n	8010692 <_printf_float+0x1a6>
 80106bc:	1c4b      	adds	r3, r1, #1
 80106be:	e7e7      	b.n	8010690 <_printf_float+0x1a4>
 80106c0:	2900      	cmp	r1, #0
 80106c2:	bfd4      	ite	le
 80106c4:	f1c1 0202 	rsble	r2, r1, #2
 80106c8:	2201      	movgt	r2, #1
 80106ca:	4413      	add	r3, r2
 80106cc:	e7e0      	b.n	8010690 <_printf_float+0x1a4>
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	055a      	lsls	r2, r3, #21
 80106d2:	d407      	bmi.n	80106e4 <_printf_float+0x1f8>
 80106d4:	6923      	ldr	r3, [r4, #16]
 80106d6:	4642      	mov	r2, r8
 80106d8:	4631      	mov	r1, r6
 80106da:	4628      	mov	r0, r5
 80106dc:	47b8      	blx	r7
 80106de:	3001      	adds	r0, #1
 80106e0:	d12c      	bne.n	801073c <_printf_float+0x250>
 80106e2:	e764      	b.n	80105ae <_printf_float+0xc2>
 80106e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80106e8:	f240 80e0 	bls.w	80108ac <_printf_float+0x3c0>
 80106ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106f0:	2200      	movs	r2, #0
 80106f2:	2300      	movs	r3, #0
 80106f4:	f7f0 fa00 	bl	8000af8 <__aeabi_dcmpeq>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d034      	beq.n	8010766 <_printf_float+0x27a>
 80106fc:	4a37      	ldr	r2, [pc, #220]	; (80107dc <_printf_float+0x2f0>)
 80106fe:	2301      	movs	r3, #1
 8010700:	4631      	mov	r1, r6
 8010702:	4628      	mov	r0, r5
 8010704:	47b8      	blx	r7
 8010706:	3001      	adds	r0, #1
 8010708:	f43f af51 	beq.w	80105ae <_printf_float+0xc2>
 801070c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010710:	429a      	cmp	r2, r3
 8010712:	db02      	blt.n	801071a <_printf_float+0x22e>
 8010714:	6823      	ldr	r3, [r4, #0]
 8010716:	07d8      	lsls	r0, r3, #31
 8010718:	d510      	bpl.n	801073c <_printf_float+0x250>
 801071a:	ee18 3a10 	vmov	r3, s16
 801071e:	4652      	mov	r2, sl
 8010720:	4631      	mov	r1, r6
 8010722:	4628      	mov	r0, r5
 8010724:	47b8      	blx	r7
 8010726:	3001      	adds	r0, #1
 8010728:	f43f af41 	beq.w	80105ae <_printf_float+0xc2>
 801072c:	f04f 0800 	mov.w	r8, #0
 8010730:	f104 091a 	add.w	r9, r4, #26
 8010734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010736:	3b01      	subs	r3, #1
 8010738:	4543      	cmp	r3, r8
 801073a:	dc09      	bgt.n	8010750 <_printf_float+0x264>
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	079b      	lsls	r3, r3, #30
 8010740:	f100 8105 	bmi.w	801094e <_printf_float+0x462>
 8010744:	68e0      	ldr	r0, [r4, #12]
 8010746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010748:	4298      	cmp	r0, r3
 801074a:	bfb8      	it	lt
 801074c:	4618      	movlt	r0, r3
 801074e:	e730      	b.n	80105b2 <_printf_float+0xc6>
 8010750:	2301      	movs	r3, #1
 8010752:	464a      	mov	r2, r9
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f af27 	beq.w	80105ae <_printf_float+0xc2>
 8010760:	f108 0801 	add.w	r8, r8, #1
 8010764:	e7e6      	b.n	8010734 <_printf_float+0x248>
 8010766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010768:	2b00      	cmp	r3, #0
 801076a:	dc39      	bgt.n	80107e0 <_printf_float+0x2f4>
 801076c:	4a1b      	ldr	r2, [pc, #108]	; (80107dc <_printf_float+0x2f0>)
 801076e:	2301      	movs	r3, #1
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f af19 	beq.w	80105ae <_printf_float+0xc2>
 801077c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010780:	4313      	orrs	r3, r2
 8010782:	d102      	bne.n	801078a <_printf_float+0x29e>
 8010784:	6823      	ldr	r3, [r4, #0]
 8010786:	07d9      	lsls	r1, r3, #31
 8010788:	d5d8      	bpl.n	801073c <_printf_float+0x250>
 801078a:	ee18 3a10 	vmov	r3, s16
 801078e:	4652      	mov	r2, sl
 8010790:	4631      	mov	r1, r6
 8010792:	4628      	mov	r0, r5
 8010794:	47b8      	blx	r7
 8010796:	3001      	adds	r0, #1
 8010798:	f43f af09 	beq.w	80105ae <_printf_float+0xc2>
 801079c:	f04f 0900 	mov.w	r9, #0
 80107a0:	f104 0a1a 	add.w	sl, r4, #26
 80107a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a6:	425b      	negs	r3, r3
 80107a8:	454b      	cmp	r3, r9
 80107aa:	dc01      	bgt.n	80107b0 <_printf_float+0x2c4>
 80107ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ae:	e792      	b.n	80106d6 <_printf_float+0x1ea>
 80107b0:	2301      	movs	r3, #1
 80107b2:	4652      	mov	r2, sl
 80107b4:	4631      	mov	r1, r6
 80107b6:	4628      	mov	r0, r5
 80107b8:	47b8      	blx	r7
 80107ba:	3001      	adds	r0, #1
 80107bc:	f43f aef7 	beq.w	80105ae <_printf_float+0xc2>
 80107c0:	f109 0901 	add.w	r9, r9, #1
 80107c4:	e7ee      	b.n	80107a4 <_printf_float+0x2b8>
 80107c6:	bf00      	nop
 80107c8:	7fefffff 	.word	0x7fefffff
 80107cc:	08013200 	.word	0x08013200
 80107d0:	08013204 	.word	0x08013204
 80107d4:	0801320c 	.word	0x0801320c
 80107d8:	08013208 	.word	0x08013208
 80107dc:	08013210 	.word	0x08013210
 80107e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107e4:	429a      	cmp	r2, r3
 80107e6:	bfa8      	it	ge
 80107e8:	461a      	movge	r2, r3
 80107ea:	2a00      	cmp	r2, #0
 80107ec:	4691      	mov	r9, r2
 80107ee:	dc37      	bgt.n	8010860 <_printf_float+0x374>
 80107f0:	f04f 0b00 	mov.w	fp, #0
 80107f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107f8:	f104 021a 	add.w	r2, r4, #26
 80107fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	eba3 0309 	sub.w	r3, r3, r9
 8010804:	455b      	cmp	r3, fp
 8010806:	dc33      	bgt.n	8010870 <_printf_float+0x384>
 8010808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801080c:	429a      	cmp	r2, r3
 801080e:	db3b      	blt.n	8010888 <_printf_float+0x39c>
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	07da      	lsls	r2, r3, #31
 8010814:	d438      	bmi.n	8010888 <_printf_float+0x39c>
 8010816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010818:	9a05      	ldr	r2, [sp, #20]
 801081a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801081c:	1a9a      	subs	r2, r3, r2
 801081e:	eba3 0901 	sub.w	r9, r3, r1
 8010822:	4591      	cmp	r9, r2
 8010824:	bfa8      	it	ge
 8010826:	4691      	movge	r9, r2
 8010828:	f1b9 0f00 	cmp.w	r9, #0
 801082c:	dc35      	bgt.n	801089a <_printf_float+0x3ae>
 801082e:	f04f 0800 	mov.w	r8, #0
 8010832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010836:	f104 0a1a 	add.w	sl, r4, #26
 801083a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801083e:	1a9b      	subs	r3, r3, r2
 8010840:	eba3 0309 	sub.w	r3, r3, r9
 8010844:	4543      	cmp	r3, r8
 8010846:	f77f af79 	ble.w	801073c <_printf_float+0x250>
 801084a:	2301      	movs	r3, #1
 801084c:	4652      	mov	r2, sl
 801084e:	4631      	mov	r1, r6
 8010850:	4628      	mov	r0, r5
 8010852:	47b8      	blx	r7
 8010854:	3001      	adds	r0, #1
 8010856:	f43f aeaa 	beq.w	80105ae <_printf_float+0xc2>
 801085a:	f108 0801 	add.w	r8, r8, #1
 801085e:	e7ec      	b.n	801083a <_printf_float+0x34e>
 8010860:	4613      	mov	r3, r2
 8010862:	4631      	mov	r1, r6
 8010864:	4642      	mov	r2, r8
 8010866:	4628      	mov	r0, r5
 8010868:	47b8      	blx	r7
 801086a:	3001      	adds	r0, #1
 801086c:	d1c0      	bne.n	80107f0 <_printf_float+0x304>
 801086e:	e69e      	b.n	80105ae <_printf_float+0xc2>
 8010870:	2301      	movs	r3, #1
 8010872:	4631      	mov	r1, r6
 8010874:	4628      	mov	r0, r5
 8010876:	9205      	str	r2, [sp, #20]
 8010878:	47b8      	blx	r7
 801087a:	3001      	adds	r0, #1
 801087c:	f43f ae97 	beq.w	80105ae <_printf_float+0xc2>
 8010880:	9a05      	ldr	r2, [sp, #20]
 8010882:	f10b 0b01 	add.w	fp, fp, #1
 8010886:	e7b9      	b.n	80107fc <_printf_float+0x310>
 8010888:	ee18 3a10 	vmov	r3, s16
 801088c:	4652      	mov	r2, sl
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	47b8      	blx	r7
 8010894:	3001      	adds	r0, #1
 8010896:	d1be      	bne.n	8010816 <_printf_float+0x32a>
 8010898:	e689      	b.n	80105ae <_printf_float+0xc2>
 801089a:	9a05      	ldr	r2, [sp, #20]
 801089c:	464b      	mov	r3, r9
 801089e:	4442      	add	r2, r8
 80108a0:	4631      	mov	r1, r6
 80108a2:	4628      	mov	r0, r5
 80108a4:	47b8      	blx	r7
 80108a6:	3001      	adds	r0, #1
 80108a8:	d1c1      	bne.n	801082e <_printf_float+0x342>
 80108aa:	e680      	b.n	80105ae <_printf_float+0xc2>
 80108ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ae:	2a01      	cmp	r2, #1
 80108b0:	dc01      	bgt.n	80108b6 <_printf_float+0x3ca>
 80108b2:	07db      	lsls	r3, r3, #31
 80108b4:	d538      	bpl.n	8010928 <_printf_float+0x43c>
 80108b6:	2301      	movs	r3, #1
 80108b8:	4642      	mov	r2, r8
 80108ba:	4631      	mov	r1, r6
 80108bc:	4628      	mov	r0, r5
 80108be:	47b8      	blx	r7
 80108c0:	3001      	adds	r0, #1
 80108c2:	f43f ae74 	beq.w	80105ae <_printf_float+0xc2>
 80108c6:	ee18 3a10 	vmov	r3, s16
 80108ca:	4652      	mov	r2, sl
 80108cc:	4631      	mov	r1, r6
 80108ce:	4628      	mov	r0, r5
 80108d0:	47b8      	blx	r7
 80108d2:	3001      	adds	r0, #1
 80108d4:	f43f ae6b 	beq.w	80105ae <_printf_float+0xc2>
 80108d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108dc:	2200      	movs	r2, #0
 80108de:	2300      	movs	r3, #0
 80108e0:	f7f0 f90a 	bl	8000af8 <__aeabi_dcmpeq>
 80108e4:	b9d8      	cbnz	r0, 801091e <_printf_float+0x432>
 80108e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108e8:	f108 0201 	add.w	r2, r8, #1
 80108ec:	3b01      	subs	r3, #1
 80108ee:	4631      	mov	r1, r6
 80108f0:	4628      	mov	r0, r5
 80108f2:	47b8      	blx	r7
 80108f4:	3001      	adds	r0, #1
 80108f6:	d10e      	bne.n	8010916 <_printf_float+0x42a>
 80108f8:	e659      	b.n	80105ae <_printf_float+0xc2>
 80108fa:	2301      	movs	r3, #1
 80108fc:	4652      	mov	r2, sl
 80108fe:	4631      	mov	r1, r6
 8010900:	4628      	mov	r0, r5
 8010902:	47b8      	blx	r7
 8010904:	3001      	adds	r0, #1
 8010906:	f43f ae52 	beq.w	80105ae <_printf_float+0xc2>
 801090a:	f108 0801 	add.w	r8, r8, #1
 801090e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010910:	3b01      	subs	r3, #1
 8010912:	4543      	cmp	r3, r8
 8010914:	dcf1      	bgt.n	80108fa <_printf_float+0x40e>
 8010916:	464b      	mov	r3, r9
 8010918:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801091c:	e6dc      	b.n	80106d8 <_printf_float+0x1ec>
 801091e:	f04f 0800 	mov.w	r8, #0
 8010922:	f104 0a1a 	add.w	sl, r4, #26
 8010926:	e7f2      	b.n	801090e <_printf_float+0x422>
 8010928:	2301      	movs	r3, #1
 801092a:	4642      	mov	r2, r8
 801092c:	e7df      	b.n	80108ee <_printf_float+0x402>
 801092e:	2301      	movs	r3, #1
 8010930:	464a      	mov	r2, r9
 8010932:	4631      	mov	r1, r6
 8010934:	4628      	mov	r0, r5
 8010936:	47b8      	blx	r7
 8010938:	3001      	adds	r0, #1
 801093a:	f43f ae38 	beq.w	80105ae <_printf_float+0xc2>
 801093e:	f108 0801 	add.w	r8, r8, #1
 8010942:	68e3      	ldr	r3, [r4, #12]
 8010944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010946:	1a5b      	subs	r3, r3, r1
 8010948:	4543      	cmp	r3, r8
 801094a:	dcf0      	bgt.n	801092e <_printf_float+0x442>
 801094c:	e6fa      	b.n	8010744 <_printf_float+0x258>
 801094e:	f04f 0800 	mov.w	r8, #0
 8010952:	f104 0919 	add.w	r9, r4, #25
 8010956:	e7f4      	b.n	8010942 <_printf_float+0x456>

08010958 <_printf_common>:
 8010958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801095c:	4616      	mov	r6, r2
 801095e:	4699      	mov	r9, r3
 8010960:	688a      	ldr	r2, [r1, #8]
 8010962:	690b      	ldr	r3, [r1, #16]
 8010964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010968:	4293      	cmp	r3, r2
 801096a:	bfb8      	it	lt
 801096c:	4613      	movlt	r3, r2
 801096e:	6033      	str	r3, [r6, #0]
 8010970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010974:	4607      	mov	r7, r0
 8010976:	460c      	mov	r4, r1
 8010978:	b10a      	cbz	r2, 801097e <_printf_common+0x26>
 801097a:	3301      	adds	r3, #1
 801097c:	6033      	str	r3, [r6, #0]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	0699      	lsls	r1, r3, #26
 8010982:	bf42      	ittt	mi
 8010984:	6833      	ldrmi	r3, [r6, #0]
 8010986:	3302      	addmi	r3, #2
 8010988:	6033      	strmi	r3, [r6, #0]
 801098a:	6825      	ldr	r5, [r4, #0]
 801098c:	f015 0506 	ands.w	r5, r5, #6
 8010990:	d106      	bne.n	80109a0 <_printf_common+0x48>
 8010992:	f104 0a19 	add.w	sl, r4, #25
 8010996:	68e3      	ldr	r3, [r4, #12]
 8010998:	6832      	ldr	r2, [r6, #0]
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	42ab      	cmp	r3, r5
 801099e:	dc26      	bgt.n	80109ee <_printf_common+0x96>
 80109a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109a4:	1e13      	subs	r3, r2, #0
 80109a6:	6822      	ldr	r2, [r4, #0]
 80109a8:	bf18      	it	ne
 80109aa:	2301      	movne	r3, #1
 80109ac:	0692      	lsls	r2, r2, #26
 80109ae:	d42b      	bmi.n	8010a08 <_printf_common+0xb0>
 80109b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109b4:	4649      	mov	r1, r9
 80109b6:	4638      	mov	r0, r7
 80109b8:	47c0      	blx	r8
 80109ba:	3001      	adds	r0, #1
 80109bc:	d01e      	beq.n	80109fc <_printf_common+0xa4>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	68e5      	ldr	r5, [r4, #12]
 80109c2:	6832      	ldr	r2, [r6, #0]
 80109c4:	f003 0306 	and.w	r3, r3, #6
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	bf08      	it	eq
 80109cc:	1aad      	subeq	r5, r5, r2
 80109ce:	68a3      	ldr	r3, [r4, #8]
 80109d0:	6922      	ldr	r2, [r4, #16]
 80109d2:	bf0c      	ite	eq
 80109d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109d8:	2500      	movne	r5, #0
 80109da:	4293      	cmp	r3, r2
 80109dc:	bfc4      	itt	gt
 80109de:	1a9b      	subgt	r3, r3, r2
 80109e0:	18ed      	addgt	r5, r5, r3
 80109e2:	2600      	movs	r6, #0
 80109e4:	341a      	adds	r4, #26
 80109e6:	42b5      	cmp	r5, r6
 80109e8:	d11a      	bne.n	8010a20 <_printf_common+0xc8>
 80109ea:	2000      	movs	r0, #0
 80109ec:	e008      	b.n	8010a00 <_printf_common+0xa8>
 80109ee:	2301      	movs	r3, #1
 80109f0:	4652      	mov	r2, sl
 80109f2:	4649      	mov	r1, r9
 80109f4:	4638      	mov	r0, r7
 80109f6:	47c0      	blx	r8
 80109f8:	3001      	adds	r0, #1
 80109fa:	d103      	bne.n	8010a04 <_printf_common+0xac>
 80109fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a04:	3501      	adds	r5, #1
 8010a06:	e7c6      	b.n	8010996 <_printf_common+0x3e>
 8010a08:	18e1      	adds	r1, r4, r3
 8010a0a:	1c5a      	adds	r2, r3, #1
 8010a0c:	2030      	movs	r0, #48	; 0x30
 8010a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a12:	4422      	add	r2, r4
 8010a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a1c:	3302      	adds	r3, #2
 8010a1e:	e7c7      	b.n	80109b0 <_printf_common+0x58>
 8010a20:	2301      	movs	r3, #1
 8010a22:	4622      	mov	r2, r4
 8010a24:	4649      	mov	r1, r9
 8010a26:	4638      	mov	r0, r7
 8010a28:	47c0      	blx	r8
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	d0e6      	beq.n	80109fc <_printf_common+0xa4>
 8010a2e:	3601      	adds	r6, #1
 8010a30:	e7d9      	b.n	80109e6 <_printf_common+0x8e>
	...

08010a34 <_printf_i>:
 8010a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a38:	7e0f      	ldrb	r7, [r1, #24]
 8010a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a3c:	2f78      	cmp	r7, #120	; 0x78
 8010a3e:	4691      	mov	r9, r2
 8010a40:	4680      	mov	r8, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	469a      	mov	sl, r3
 8010a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a4a:	d807      	bhi.n	8010a5c <_printf_i+0x28>
 8010a4c:	2f62      	cmp	r7, #98	; 0x62
 8010a4e:	d80a      	bhi.n	8010a66 <_printf_i+0x32>
 8010a50:	2f00      	cmp	r7, #0
 8010a52:	f000 80d8 	beq.w	8010c06 <_printf_i+0x1d2>
 8010a56:	2f58      	cmp	r7, #88	; 0x58
 8010a58:	f000 80a3 	beq.w	8010ba2 <_printf_i+0x16e>
 8010a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a64:	e03a      	b.n	8010adc <_printf_i+0xa8>
 8010a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a6a:	2b15      	cmp	r3, #21
 8010a6c:	d8f6      	bhi.n	8010a5c <_printf_i+0x28>
 8010a6e:	a101      	add	r1, pc, #4	; (adr r1, 8010a74 <_printf_i+0x40>)
 8010a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a74:	08010acd 	.word	0x08010acd
 8010a78:	08010ae1 	.word	0x08010ae1
 8010a7c:	08010a5d 	.word	0x08010a5d
 8010a80:	08010a5d 	.word	0x08010a5d
 8010a84:	08010a5d 	.word	0x08010a5d
 8010a88:	08010a5d 	.word	0x08010a5d
 8010a8c:	08010ae1 	.word	0x08010ae1
 8010a90:	08010a5d 	.word	0x08010a5d
 8010a94:	08010a5d 	.word	0x08010a5d
 8010a98:	08010a5d 	.word	0x08010a5d
 8010a9c:	08010a5d 	.word	0x08010a5d
 8010aa0:	08010bed 	.word	0x08010bed
 8010aa4:	08010b11 	.word	0x08010b11
 8010aa8:	08010bcf 	.word	0x08010bcf
 8010aac:	08010a5d 	.word	0x08010a5d
 8010ab0:	08010a5d 	.word	0x08010a5d
 8010ab4:	08010c0f 	.word	0x08010c0f
 8010ab8:	08010a5d 	.word	0x08010a5d
 8010abc:	08010b11 	.word	0x08010b11
 8010ac0:	08010a5d 	.word	0x08010a5d
 8010ac4:	08010a5d 	.word	0x08010a5d
 8010ac8:	08010bd7 	.word	0x08010bd7
 8010acc:	682b      	ldr	r3, [r5, #0]
 8010ace:	1d1a      	adds	r2, r3, #4
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	602a      	str	r2, [r5, #0]
 8010ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010adc:	2301      	movs	r3, #1
 8010ade:	e0a3      	b.n	8010c28 <_printf_i+0x1f4>
 8010ae0:	6820      	ldr	r0, [r4, #0]
 8010ae2:	6829      	ldr	r1, [r5, #0]
 8010ae4:	0606      	lsls	r6, r0, #24
 8010ae6:	f101 0304 	add.w	r3, r1, #4
 8010aea:	d50a      	bpl.n	8010b02 <_printf_i+0xce>
 8010aec:	680e      	ldr	r6, [r1, #0]
 8010aee:	602b      	str	r3, [r5, #0]
 8010af0:	2e00      	cmp	r6, #0
 8010af2:	da03      	bge.n	8010afc <_printf_i+0xc8>
 8010af4:	232d      	movs	r3, #45	; 0x2d
 8010af6:	4276      	negs	r6, r6
 8010af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010afc:	485e      	ldr	r0, [pc, #376]	; (8010c78 <_printf_i+0x244>)
 8010afe:	230a      	movs	r3, #10
 8010b00:	e019      	b.n	8010b36 <_printf_i+0x102>
 8010b02:	680e      	ldr	r6, [r1, #0]
 8010b04:	602b      	str	r3, [r5, #0]
 8010b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b0a:	bf18      	it	ne
 8010b0c:	b236      	sxthne	r6, r6
 8010b0e:	e7ef      	b.n	8010af0 <_printf_i+0xbc>
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	6820      	ldr	r0, [r4, #0]
 8010b14:	1d19      	adds	r1, r3, #4
 8010b16:	6029      	str	r1, [r5, #0]
 8010b18:	0601      	lsls	r1, r0, #24
 8010b1a:	d501      	bpl.n	8010b20 <_printf_i+0xec>
 8010b1c:	681e      	ldr	r6, [r3, #0]
 8010b1e:	e002      	b.n	8010b26 <_printf_i+0xf2>
 8010b20:	0646      	lsls	r6, r0, #25
 8010b22:	d5fb      	bpl.n	8010b1c <_printf_i+0xe8>
 8010b24:	881e      	ldrh	r6, [r3, #0]
 8010b26:	4854      	ldr	r0, [pc, #336]	; (8010c78 <_printf_i+0x244>)
 8010b28:	2f6f      	cmp	r7, #111	; 0x6f
 8010b2a:	bf0c      	ite	eq
 8010b2c:	2308      	moveq	r3, #8
 8010b2e:	230a      	movne	r3, #10
 8010b30:	2100      	movs	r1, #0
 8010b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b36:	6865      	ldr	r5, [r4, #4]
 8010b38:	60a5      	str	r5, [r4, #8]
 8010b3a:	2d00      	cmp	r5, #0
 8010b3c:	bfa2      	ittt	ge
 8010b3e:	6821      	ldrge	r1, [r4, #0]
 8010b40:	f021 0104 	bicge.w	r1, r1, #4
 8010b44:	6021      	strge	r1, [r4, #0]
 8010b46:	b90e      	cbnz	r6, 8010b4c <_printf_i+0x118>
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	d04d      	beq.n	8010be8 <_printf_i+0x1b4>
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b52:	fb03 6711 	mls	r7, r3, r1, r6
 8010b56:	5dc7      	ldrb	r7, [r0, r7]
 8010b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b5c:	4637      	mov	r7, r6
 8010b5e:	42bb      	cmp	r3, r7
 8010b60:	460e      	mov	r6, r1
 8010b62:	d9f4      	bls.n	8010b4e <_printf_i+0x11a>
 8010b64:	2b08      	cmp	r3, #8
 8010b66:	d10b      	bne.n	8010b80 <_printf_i+0x14c>
 8010b68:	6823      	ldr	r3, [r4, #0]
 8010b6a:	07de      	lsls	r6, r3, #31
 8010b6c:	d508      	bpl.n	8010b80 <_printf_i+0x14c>
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	6861      	ldr	r1, [r4, #4]
 8010b72:	4299      	cmp	r1, r3
 8010b74:	bfde      	ittt	le
 8010b76:	2330      	movle	r3, #48	; 0x30
 8010b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010b80:	1b52      	subs	r2, r2, r5
 8010b82:	6122      	str	r2, [r4, #16]
 8010b84:	f8cd a000 	str.w	sl, [sp]
 8010b88:	464b      	mov	r3, r9
 8010b8a:	aa03      	add	r2, sp, #12
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	4640      	mov	r0, r8
 8010b90:	f7ff fee2 	bl	8010958 <_printf_common>
 8010b94:	3001      	adds	r0, #1
 8010b96:	d14c      	bne.n	8010c32 <_printf_i+0x1fe>
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b9c:	b004      	add	sp, #16
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	4835      	ldr	r0, [pc, #212]	; (8010c78 <_printf_i+0x244>)
 8010ba4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	6823      	ldr	r3, [r4, #0]
 8010bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8010bb0:	6029      	str	r1, [r5, #0]
 8010bb2:	061d      	lsls	r5, r3, #24
 8010bb4:	d514      	bpl.n	8010be0 <_printf_i+0x1ac>
 8010bb6:	07df      	lsls	r7, r3, #31
 8010bb8:	bf44      	itt	mi
 8010bba:	f043 0320 	orrmi.w	r3, r3, #32
 8010bbe:	6023      	strmi	r3, [r4, #0]
 8010bc0:	b91e      	cbnz	r6, 8010bca <_printf_i+0x196>
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	f023 0320 	bic.w	r3, r3, #32
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	2310      	movs	r3, #16
 8010bcc:	e7b0      	b.n	8010b30 <_printf_i+0xfc>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	f043 0320 	orr.w	r3, r3, #32
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	2378      	movs	r3, #120	; 0x78
 8010bd8:	4828      	ldr	r0, [pc, #160]	; (8010c7c <_printf_i+0x248>)
 8010bda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bde:	e7e3      	b.n	8010ba8 <_printf_i+0x174>
 8010be0:	0659      	lsls	r1, r3, #25
 8010be2:	bf48      	it	mi
 8010be4:	b2b6      	uxthmi	r6, r6
 8010be6:	e7e6      	b.n	8010bb6 <_printf_i+0x182>
 8010be8:	4615      	mov	r5, r2
 8010bea:	e7bb      	b.n	8010b64 <_printf_i+0x130>
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	6826      	ldr	r6, [r4, #0]
 8010bf0:	6961      	ldr	r1, [r4, #20]
 8010bf2:	1d18      	adds	r0, r3, #4
 8010bf4:	6028      	str	r0, [r5, #0]
 8010bf6:	0635      	lsls	r5, r6, #24
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	d501      	bpl.n	8010c00 <_printf_i+0x1cc>
 8010bfc:	6019      	str	r1, [r3, #0]
 8010bfe:	e002      	b.n	8010c06 <_printf_i+0x1d2>
 8010c00:	0670      	lsls	r0, r6, #25
 8010c02:	d5fb      	bpl.n	8010bfc <_printf_i+0x1c8>
 8010c04:	8019      	strh	r1, [r3, #0]
 8010c06:	2300      	movs	r3, #0
 8010c08:	6123      	str	r3, [r4, #16]
 8010c0a:	4615      	mov	r5, r2
 8010c0c:	e7ba      	b.n	8010b84 <_printf_i+0x150>
 8010c0e:	682b      	ldr	r3, [r5, #0]
 8010c10:	1d1a      	adds	r2, r3, #4
 8010c12:	602a      	str	r2, [r5, #0]
 8010c14:	681d      	ldr	r5, [r3, #0]
 8010c16:	6862      	ldr	r2, [r4, #4]
 8010c18:	2100      	movs	r1, #0
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f7ef faf8 	bl	8000210 <memchr>
 8010c20:	b108      	cbz	r0, 8010c26 <_printf_i+0x1f2>
 8010c22:	1b40      	subs	r0, r0, r5
 8010c24:	6060      	str	r0, [r4, #4]
 8010c26:	6863      	ldr	r3, [r4, #4]
 8010c28:	6123      	str	r3, [r4, #16]
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c30:	e7a8      	b.n	8010b84 <_printf_i+0x150>
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	462a      	mov	r2, r5
 8010c36:	4649      	mov	r1, r9
 8010c38:	4640      	mov	r0, r8
 8010c3a:	47d0      	blx	sl
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d0ab      	beq.n	8010b98 <_printf_i+0x164>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	079b      	lsls	r3, r3, #30
 8010c44:	d413      	bmi.n	8010c6e <_printf_i+0x23a>
 8010c46:	68e0      	ldr	r0, [r4, #12]
 8010c48:	9b03      	ldr	r3, [sp, #12]
 8010c4a:	4298      	cmp	r0, r3
 8010c4c:	bfb8      	it	lt
 8010c4e:	4618      	movlt	r0, r3
 8010c50:	e7a4      	b.n	8010b9c <_printf_i+0x168>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4632      	mov	r2, r6
 8010c56:	4649      	mov	r1, r9
 8010c58:	4640      	mov	r0, r8
 8010c5a:	47d0      	blx	sl
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d09b      	beq.n	8010b98 <_printf_i+0x164>
 8010c60:	3501      	adds	r5, #1
 8010c62:	68e3      	ldr	r3, [r4, #12]
 8010c64:	9903      	ldr	r1, [sp, #12]
 8010c66:	1a5b      	subs	r3, r3, r1
 8010c68:	42ab      	cmp	r3, r5
 8010c6a:	dcf2      	bgt.n	8010c52 <_printf_i+0x21e>
 8010c6c:	e7eb      	b.n	8010c46 <_printf_i+0x212>
 8010c6e:	2500      	movs	r5, #0
 8010c70:	f104 0619 	add.w	r6, r4, #25
 8010c74:	e7f5      	b.n	8010c62 <_printf_i+0x22e>
 8010c76:	bf00      	nop
 8010c78:	08013212 	.word	0x08013212
 8010c7c:	08013223 	.word	0x08013223

08010c80 <iprintf>:
 8010c80:	b40f      	push	{r0, r1, r2, r3}
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <iprintf+0x2c>)
 8010c84:	b513      	push	{r0, r1, r4, lr}
 8010c86:	681c      	ldr	r4, [r3, #0]
 8010c88:	b124      	cbz	r4, 8010c94 <iprintf+0x14>
 8010c8a:	69a3      	ldr	r3, [r4, #24]
 8010c8c:	b913      	cbnz	r3, 8010c94 <iprintf+0x14>
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 ff44 	bl	8011b1c <__sinit>
 8010c94:	ab05      	add	r3, sp, #20
 8010c96:	9a04      	ldr	r2, [sp, #16]
 8010c98:	68a1      	ldr	r1, [r4, #8]
 8010c9a:	9301      	str	r3, [sp, #4]
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f001 fd33 	bl	8012708 <_vfiprintf_r>
 8010ca2:	b002      	add	sp, #8
 8010ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca8:	b004      	add	sp, #16
 8010caa:	4770      	bx	lr
 8010cac:	20000184 	.word	0x20000184

08010cb0 <_sbrk_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d06      	ldr	r5, [pc, #24]	; (8010ccc <_sbrk_r+0x1c>)
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4608      	mov	r0, r1
 8010cba:	602b      	str	r3, [r5, #0]
 8010cbc:	f002 f9cc 	bl	8013058 <_sbrk>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_sbrk_r+0x1a>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_sbrk_r+0x1a>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	200028e0 	.word	0x200028e0

08010cd0 <sniprintf>:
 8010cd0:	b40c      	push	{r2, r3}
 8010cd2:	b530      	push	{r4, r5, lr}
 8010cd4:	4b17      	ldr	r3, [pc, #92]	; (8010d34 <sniprintf+0x64>)
 8010cd6:	1e0c      	subs	r4, r1, #0
 8010cd8:	681d      	ldr	r5, [r3, #0]
 8010cda:	b09d      	sub	sp, #116	; 0x74
 8010cdc:	da08      	bge.n	8010cf0 <sniprintf+0x20>
 8010cde:	238b      	movs	r3, #139	; 0x8b
 8010ce0:	602b      	str	r3, [r5, #0]
 8010ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ce6:	b01d      	add	sp, #116	; 0x74
 8010ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cec:	b002      	add	sp, #8
 8010cee:	4770      	bx	lr
 8010cf0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010cf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010cf8:	bf14      	ite	ne
 8010cfa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010cfe:	4623      	moveq	r3, r4
 8010d00:	9304      	str	r3, [sp, #16]
 8010d02:	9307      	str	r3, [sp, #28]
 8010d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d08:	9002      	str	r0, [sp, #8]
 8010d0a:	9006      	str	r0, [sp, #24]
 8010d0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010d10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d12:	ab21      	add	r3, sp, #132	; 0x84
 8010d14:	a902      	add	r1, sp, #8
 8010d16:	4628      	mov	r0, r5
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	f001 fbcb 	bl	80124b4 <_svfiprintf_r>
 8010d1e:	1c43      	adds	r3, r0, #1
 8010d20:	bfbc      	itt	lt
 8010d22:	238b      	movlt	r3, #139	; 0x8b
 8010d24:	602b      	strlt	r3, [r5, #0]
 8010d26:	2c00      	cmp	r4, #0
 8010d28:	d0dd      	beq.n	8010ce6 <sniprintf+0x16>
 8010d2a:	9b02      	ldr	r3, [sp, #8]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	701a      	strb	r2, [r3, #0]
 8010d30:	e7d9      	b.n	8010ce6 <sniprintf+0x16>
 8010d32:	bf00      	nop
 8010d34:	20000184 	.word	0x20000184

08010d38 <__assert_func>:
 8010d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d3a:	4614      	mov	r4, r2
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	4b09      	ldr	r3, [pc, #36]	; (8010d64 <__assert_func+0x2c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4605      	mov	r5, r0
 8010d44:	68d8      	ldr	r0, [r3, #12]
 8010d46:	b14c      	cbz	r4, 8010d5c <__assert_func+0x24>
 8010d48:	4b07      	ldr	r3, [pc, #28]	; (8010d68 <__assert_func+0x30>)
 8010d4a:	9100      	str	r1, [sp, #0]
 8010d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d50:	4906      	ldr	r1, [pc, #24]	; (8010d6c <__assert_func+0x34>)
 8010d52:	462b      	mov	r3, r5
 8010d54:	f000 ff60 	bl	8011c18 <fiprintf>
 8010d58:	f001 ff2a 	bl	8012bb0 <abort>
 8010d5c:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <__assert_func+0x38>)
 8010d5e:	461c      	mov	r4, r3
 8010d60:	e7f3      	b.n	8010d4a <__assert_func+0x12>
 8010d62:	bf00      	nop
 8010d64:	20000184 	.word	0x20000184
 8010d68:	08013234 	.word	0x08013234
 8010d6c:	08013241 	.word	0x08013241
 8010d70:	0801326f 	.word	0x0801326f

08010d74 <quorem>:
 8010d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d78:	6903      	ldr	r3, [r0, #16]
 8010d7a:	690c      	ldr	r4, [r1, #16]
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	4607      	mov	r7, r0
 8010d80:	f2c0 8081 	blt.w	8010e86 <quorem+0x112>
 8010d84:	3c01      	subs	r4, #1
 8010d86:	f101 0814 	add.w	r8, r1, #20
 8010d8a:	f100 0514 	add.w	r5, r0, #20
 8010d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d92:	9301      	str	r3, [sp, #4]
 8010d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010dac:	d331      	bcc.n	8010e12 <quorem+0x9e>
 8010dae:	f04f 0e00 	mov.w	lr, #0
 8010db2:	4640      	mov	r0, r8
 8010db4:	46ac      	mov	ip, r5
 8010db6:	46f2      	mov	sl, lr
 8010db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010dbc:	b293      	uxth	r3, r2
 8010dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8010dc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8010dcc:	f8dc a000 	ldr.w	sl, [ip]
 8010dd0:	0c12      	lsrs	r2, r2, #16
 8010dd2:	fa13 f38a 	uxtah	r3, r3, sl
 8010dd6:	fb06 e202 	mla	r2, r6, r2, lr
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	9b00      	ldr	r3, [sp, #0]
 8010dde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010de2:	b292      	uxth	r2, r2
 8010de4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010dec:	f8bd 3000 	ldrh.w	r3, [sp]
 8010df0:	4581      	cmp	r9, r0
 8010df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010df6:	f84c 3b04 	str.w	r3, [ip], #4
 8010dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010dfe:	d2db      	bcs.n	8010db8 <quorem+0x44>
 8010e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8010e04:	b92b      	cbnz	r3, 8010e12 <quorem+0x9e>
 8010e06:	9b01      	ldr	r3, [sp, #4]
 8010e08:	3b04      	subs	r3, #4
 8010e0a:	429d      	cmp	r5, r3
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	d32e      	bcc.n	8010e6e <quorem+0xfa>
 8010e10:	613c      	str	r4, [r7, #16]
 8010e12:	4638      	mov	r0, r7
 8010e14:	f001 f9da 	bl	80121cc <__mcmp>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	db24      	blt.n	8010e66 <quorem+0xf2>
 8010e1c:	3601      	adds	r6, #1
 8010e1e:	4628      	mov	r0, r5
 8010e20:	f04f 0c00 	mov.w	ip, #0
 8010e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e28:	f8d0 e000 	ldr.w	lr, [r0]
 8010e2c:	b293      	uxth	r3, r2
 8010e2e:	ebac 0303 	sub.w	r3, ip, r3
 8010e32:	0c12      	lsrs	r2, r2, #16
 8010e34:	fa13 f38e 	uxtah	r3, r3, lr
 8010e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e46:	45c1      	cmp	r9, r8
 8010e48:	f840 3b04 	str.w	r3, [r0], #4
 8010e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010e50:	d2e8      	bcs.n	8010e24 <quorem+0xb0>
 8010e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e5a:	b922      	cbnz	r2, 8010e66 <quorem+0xf2>
 8010e5c:	3b04      	subs	r3, #4
 8010e5e:	429d      	cmp	r5, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	d30a      	bcc.n	8010e7a <quorem+0x106>
 8010e64:	613c      	str	r4, [r7, #16]
 8010e66:	4630      	mov	r0, r6
 8010e68:	b003      	add	sp, #12
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6e:	6812      	ldr	r2, [r2, #0]
 8010e70:	3b04      	subs	r3, #4
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d1cc      	bne.n	8010e10 <quorem+0x9c>
 8010e76:	3c01      	subs	r4, #1
 8010e78:	e7c7      	b.n	8010e0a <quorem+0x96>
 8010e7a:	6812      	ldr	r2, [r2, #0]
 8010e7c:	3b04      	subs	r3, #4
 8010e7e:	2a00      	cmp	r2, #0
 8010e80:	d1f0      	bne.n	8010e64 <quorem+0xf0>
 8010e82:	3c01      	subs	r4, #1
 8010e84:	e7eb      	b.n	8010e5e <quorem+0xea>
 8010e86:	2000      	movs	r0, #0
 8010e88:	e7ee      	b.n	8010e68 <quorem+0xf4>
 8010e8a:	0000      	movs	r0, r0
 8010e8c:	0000      	movs	r0, r0
	...

08010e90 <_dtoa_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ed2d 8b04 	vpush	{d8-d9}
 8010e98:	ec57 6b10 	vmov	r6, r7, d0
 8010e9c:	b093      	sub	sp, #76	; 0x4c
 8010e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ea4:	9106      	str	r1, [sp, #24]
 8010ea6:	ee10 aa10 	vmov	sl, s0
 8010eaa:	4604      	mov	r4, r0
 8010eac:	9209      	str	r2, [sp, #36]	; 0x24
 8010eae:	930c      	str	r3, [sp, #48]	; 0x30
 8010eb0:	46bb      	mov	fp, r7
 8010eb2:	b975      	cbnz	r5, 8010ed2 <_dtoa_r+0x42>
 8010eb4:	2010      	movs	r0, #16
 8010eb6:	f7ff f97b 	bl	80101b0 <malloc>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	6260      	str	r0, [r4, #36]	; 0x24
 8010ebe:	b920      	cbnz	r0, 8010eca <_dtoa_r+0x3a>
 8010ec0:	4ba7      	ldr	r3, [pc, #668]	; (8011160 <_dtoa_r+0x2d0>)
 8010ec2:	21ea      	movs	r1, #234	; 0xea
 8010ec4:	48a7      	ldr	r0, [pc, #668]	; (8011164 <_dtoa_r+0x2d4>)
 8010ec6:	f7ff ff37 	bl	8010d38 <__assert_func>
 8010eca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ece:	6005      	str	r5, [r0, #0]
 8010ed0:	60c5      	str	r5, [r0, #12]
 8010ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ed4:	6819      	ldr	r1, [r3, #0]
 8010ed6:	b151      	cbz	r1, 8010eee <_dtoa_r+0x5e>
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	604a      	str	r2, [r1, #4]
 8010edc:	2301      	movs	r3, #1
 8010ede:	4093      	lsls	r3, r2
 8010ee0:	608b      	str	r3, [r1, #8]
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 ff30 	bl	8011d48 <_Bfree>
 8010ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eea:	2200      	movs	r2, #0
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	1e3b      	subs	r3, r7, #0
 8010ef0:	bfaa      	itet	ge
 8010ef2:	2300      	movge	r3, #0
 8010ef4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010ef8:	f8c8 3000 	strge.w	r3, [r8]
 8010efc:	4b9a      	ldr	r3, [pc, #616]	; (8011168 <_dtoa_r+0x2d8>)
 8010efe:	bfbc      	itt	lt
 8010f00:	2201      	movlt	r2, #1
 8010f02:	f8c8 2000 	strlt.w	r2, [r8]
 8010f06:	ea33 030b 	bics.w	r3, r3, fp
 8010f0a:	d11b      	bne.n	8010f44 <_dtoa_r+0xb4>
 8010f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010f12:	6013      	str	r3, [r2, #0]
 8010f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f18:	4333      	orrs	r3, r6
 8010f1a:	f000 8592 	beq.w	8011a42 <_dtoa_r+0xbb2>
 8010f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f20:	b963      	cbnz	r3, 8010f3c <_dtoa_r+0xac>
 8010f22:	4b92      	ldr	r3, [pc, #584]	; (801116c <_dtoa_r+0x2dc>)
 8010f24:	e022      	b.n	8010f6c <_dtoa_r+0xdc>
 8010f26:	4b92      	ldr	r3, [pc, #584]	; (8011170 <_dtoa_r+0x2e0>)
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	3308      	adds	r3, #8
 8010f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010f2e:	6013      	str	r3, [r2, #0]
 8010f30:	9801      	ldr	r0, [sp, #4]
 8010f32:	b013      	add	sp, #76	; 0x4c
 8010f34:	ecbd 8b04 	vpop	{d8-d9}
 8010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	4b8b      	ldr	r3, [pc, #556]	; (801116c <_dtoa_r+0x2dc>)
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	3303      	adds	r3, #3
 8010f42:	e7f3      	b.n	8010f2c <_dtoa_r+0x9c>
 8010f44:	2200      	movs	r2, #0
 8010f46:	2300      	movs	r3, #0
 8010f48:	4650      	mov	r0, sl
 8010f4a:	4659      	mov	r1, fp
 8010f4c:	f7ef fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 8010f50:	ec4b ab19 	vmov	d9, sl, fp
 8010f54:	4680      	mov	r8, r0
 8010f56:	b158      	cbz	r0, 8010f70 <_dtoa_r+0xe0>
 8010f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	6013      	str	r3, [r2, #0]
 8010f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f000 856b 	beq.w	8011a3c <_dtoa_r+0xbac>
 8010f66:	4883      	ldr	r0, [pc, #524]	; (8011174 <_dtoa_r+0x2e4>)
 8010f68:	6018      	str	r0, [r3, #0]
 8010f6a:	1e43      	subs	r3, r0, #1
 8010f6c:	9301      	str	r3, [sp, #4]
 8010f6e:	e7df      	b.n	8010f30 <_dtoa_r+0xa0>
 8010f70:	ec4b ab10 	vmov	d0, sl, fp
 8010f74:	aa10      	add	r2, sp, #64	; 0x40
 8010f76:	a911      	add	r1, sp, #68	; 0x44
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f001 f9cd 	bl	8012318 <__d2b>
 8010f7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010f82:	ee08 0a10 	vmov	s16, r0
 8010f86:	2d00      	cmp	r5, #0
 8010f88:	f000 8084 	beq.w	8011094 <_dtoa_r+0x204>
 8010f8c:	ee19 3a90 	vmov	r3, s19
 8010f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010f98:	4656      	mov	r6, sl
 8010f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010fa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010fa6:	4b74      	ldr	r3, [pc, #464]	; (8011178 <_dtoa_r+0x2e8>)
 8010fa8:	2200      	movs	r2, #0
 8010faa:	4630      	mov	r0, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	f7ef f983 	bl	80002b8 <__aeabi_dsub>
 8010fb2:	a365      	add	r3, pc, #404	; (adr r3, 8011148 <_dtoa_r+0x2b8>)
 8010fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb8:	f7ef fb36 	bl	8000628 <__aeabi_dmul>
 8010fbc:	a364      	add	r3, pc, #400	; (adr r3, 8011150 <_dtoa_r+0x2c0>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	f7ef f97b 	bl	80002bc <__adddf3>
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	4628      	mov	r0, r5
 8010fca:	460f      	mov	r7, r1
 8010fcc:	f7ef fac2 	bl	8000554 <__aeabi_i2d>
 8010fd0:	a361      	add	r3, pc, #388	; (adr r3, 8011158 <_dtoa_r+0x2c8>)
 8010fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd6:	f7ef fb27 	bl	8000628 <__aeabi_dmul>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	4630      	mov	r0, r6
 8010fe0:	4639      	mov	r1, r7
 8010fe2:	f7ef f96b 	bl	80002bc <__adddf3>
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460f      	mov	r7, r1
 8010fea:	f7ef fdcd 	bl	8000b88 <__aeabi_d2iz>
 8010fee:	2200      	movs	r2, #0
 8010ff0:	9000      	str	r0, [sp, #0]
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	4639      	mov	r1, r7
 8010ff8:	f7ef fd88 	bl	8000b0c <__aeabi_dcmplt>
 8010ffc:	b150      	cbz	r0, 8011014 <_dtoa_r+0x184>
 8010ffe:	9800      	ldr	r0, [sp, #0]
 8011000:	f7ef faa8 	bl	8000554 <__aeabi_i2d>
 8011004:	4632      	mov	r2, r6
 8011006:	463b      	mov	r3, r7
 8011008:	f7ef fd76 	bl	8000af8 <__aeabi_dcmpeq>
 801100c:	b910      	cbnz	r0, 8011014 <_dtoa_r+0x184>
 801100e:	9b00      	ldr	r3, [sp, #0]
 8011010:	3b01      	subs	r3, #1
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	9b00      	ldr	r3, [sp, #0]
 8011016:	2b16      	cmp	r3, #22
 8011018:	d85a      	bhi.n	80110d0 <_dtoa_r+0x240>
 801101a:	9a00      	ldr	r2, [sp, #0]
 801101c:	4b57      	ldr	r3, [pc, #348]	; (801117c <_dtoa_r+0x2ec>)
 801101e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011026:	ec51 0b19 	vmov	r0, r1, d9
 801102a:	f7ef fd6f 	bl	8000b0c <__aeabi_dcmplt>
 801102e:	2800      	cmp	r0, #0
 8011030:	d050      	beq.n	80110d4 <_dtoa_r+0x244>
 8011032:	9b00      	ldr	r3, [sp, #0]
 8011034:	3b01      	subs	r3, #1
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	2300      	movs	r3, #0
 801103a:	930b      	str	r3, [sp, #44]	; 0x2c
 801103c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801103e:	1b5d      	subs	r5, r3, r5
 8011040:	1e6b      	subs	r3, r5, #1
 8011042:	9305      	str	r3, [sp, #20]
 8011044:	bf45      	ittet	mi
 8011046:	f1c5 0301 	rsbmi	r3, r5, #1
 801104a:	9304      	strmi	r3, [sp, #16]
 801104c:	2300      	movpl	r3, #0
 801104e:	2300      	movmi	r3, #0
 8011050:	bf4c      	ite	mi
 8011052:	9305      	strmi	r3, [sp, #20]
 8011054:	9304      	strpl	r3, [sp, #16]
 8011056:	9b00      	ldr	r3, [sp, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	db3d      	blt.n	80110d8 <_dtoa_r+0x248>
 801105c:	9b05      	ldr	r3, [sp, #20]
 801105e:	9a00      	ldr	r2, [sp, #0]
 8011060:	920a      	str	r2, [sp, #40]	; 0x28
 8011062:	4413      	add	r3, r2
 8011064:	9305      	str	r3, [sp, #20]
 8011066:	2300      	movs	r3, #0
 8011068:	9307      	str	r3, [sp, #28]
 801106a:	9b06      	ldr	r3, [sp, #24]
 801106c:	2b09      	cmp	r3, #9
 801106e:	f200 8089 	bhi.w	8011184 <_dtoa_r+0x2f4>
 8011072:	2b05      	cmp	r3, #5
 8011074:	bfc4      	itt	gt
 8011076:	3b04      	subgt	r3, #4
 8011078:	9306      	strgt	r3, [sp, #24]
 801107a:	9b06      	ldr	r3, [sp, #24]
 801107c:	f1a3 0302 	sub.w	r3, r3, #2
 8011080:	bfcc      	ite	gt
 8011082:	2500      	movgt	r5, #0
 8011084:	2501      	movle	r5, #1
 8011086:	2b03      	cmp	r3, #3
 8011088:	f200 8087 	bhi.w	801119a <_dtoa_r+0x30a>
 801108c:	e8df f003 	tbb	[pc, r3]
 8011090:	59383a2d 	.word	0x59383a2d
 8011094:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011098:	441d      	add	r5, r3
 801109a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801109e:	2b20      	cmp	r3, #32
 80110a0:	bfc1      	itttt	gt
 80110a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80110a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80110aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80110ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80110b2:	bfda      	itte	le
 80110b4:	f1c3 0320 	rsble	r3, r3, #32
 80110b8:	fa06 f003 	lslle.w	r0, r6, r3
 80110bc:	4318      	orrgt	r0, r3
 80110be:	f7ef fa39 	bl	8000534 <__aeabi_ui2d>
 80110c2:	2301      	movs	r3, #1
 80110c4:	4606      	mov	r6, r0
 80110c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80110ca:	3d01      	subs	r5, #1
 80110cc:	930e      	str	r3, [sp, #56]	; 0x38
 80110ce:	e76a      	b.n	8010fa6 <_dtoa_r+0x116>
 80110d0:	2301      	movs	r3, #1
 80110d2:	e7b2      	b.n	801103a <_dtoa_r+0x1aa>
 80110d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80110d6:	e7b1      	b.n	801103c <_dtoa_r+0x1ac>
 80110d8:	9b04      	ldr	r3, [sp, #16]
 80110da:	9a00      	ldr	r2, [sp, #0]
 80110dc:	1a9b      	subs	r3, r3, r2
 80110de:	9304      	str	r3, [sp, #16]
 80110e0:	4253      	negs	r3, r2
 80110e2:	9307      	str	r3, [sp, #28]
 80110e4:	2300      	movs	r3, #0
 80110e6:	930a      	str	r3, [sp, #40]	; 0x28
 80110e8:	e7bf      	b.n	801106a <_dtoa_r+0x1da>
 80110ea:	2300      	movs	r3, #0
 80110ec:	9308      	str	r3, [sp, #32]
 80110ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	dc55      	bgt.n	80111a0 <_dtoa_r+0x310>
 80110f4:	2301      	movs	r3, #1
 80110f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80110fa:	461a      	mov	r2, r3
 80110fc:	9209      	str	r2, [sp, #36]	; 0x24
 80110fe:	e00c      	b.n	801111a <_dtoa_r+0x28a>
 8011100:	2301      	movs	r3, #1
 8011102:	e7f3      	b.n	80110ec <_dtoa_r+0x25c>
 8011104:	2300      	movs	r3, #0
 8011106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011108:	9308      	str	r3, [sp, #32]
 801110a:	9b00      	ldr	r3, [sp, #0]
 801110c:	4413      	add	r3, r2
 801110e:	9302      	str	r3, [sp, #8]
 8011110:	3301      	adds	r3, #1
 8011112:	2b01      	cmp	r3, #1
 8011114:	9303      	str	r3, [sp, #12]
 8011116:	bfb8      	it	lt
 8011118:	2301      	movlt	r3, #1
 801111a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801111c:	2200      	movs	r2, #0
 801111e:	6042      	str	r2, [r0, #4]
 8011120:	2204      	movs	r2, #4
 8011122:	f102 0614 	add.w	r6, r2, #20
 8011126:	429e      	cmp	r6, r3
 8011128:	6841      	ldr	r1, [r0, #4]
 801112a:	d93d      	bls.n	80111a8 <_dtoa_r+0x318>
 801112c:	4620      	mov	r0, r4
 801112e:	f000 fdcb 	bl	8011cc8 <_Balloc>
 8011132:	9001      	str	r0, [sp, #4]
 8011134:	2800      	cmp	r0, #0
 8011136:	d13b      	bne.n	80111b0 <_dtoa_r+0x320>
 8011138:	4b11      	ldr	r3, [pc, #68]	; (8011180 <_dtoa_r+0x2f0>)
 801113a:	4602      	mov	r2, r0
 801113c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011140:	e6c0      	b.n	8010ec4 <_dtoa_r+0x34>
 8011142:	2301      	movs	r3, #1
 8011144:	e7df      	b.n	8011106 <_dtoa_r+0x276>
 8011146:	bf00      	nop
 8011148:	636f4361 	.word	0x636f4361
 801114c:	3fd287a7 	.word	0x3fd287a7
 8011150:	8b60c8b3 	.word	0x8b60c8b3
 8011154:	3fc68a28 	.word	0x3fc68a28
 8011158:	509f79fb 	.word	0x509f79fb
 801115c:	3fd34413 	.word	0x3fd34413
 8011160:	0801337e 	.word	0x0801337e
 8011164:	08013395 	.word	0x08013395
 8011168:	7ff00000 	.word	0x7ff00000
 801116c:	0801337a 	.word	0x0801337a
 8011170:	08013371 	.word	0x08013371
 8011174:	08013211 	.word	0x08013211
 8011178:	3ff80000 	.word	0x3ff80000
 801117c:	080134f8 	.word	0x080134f8
 8011180:	080133f0 	.word	0x080133f0
 8011184:	2501      	movs	r5, #1
 8011186:	2300      	movs	r3, #0
 8011188:	9306      	str	r3, [sp, #24]
 801118a:	9508      	str	r5, [sp, #32]
 801118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011190:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011194:	2200      	movs	r2, #0
 8011196:	2312      	movs	r3, #18
 8011198:	e7b0      	b.n	80110fc <_dtoa_r+0x26c>
 801119a:	2301      	movs	r3, #1
 801119c:	9308      	str	r3, [sp, #32]
 801119e:	e7f5      	b.n	801118c <_dtoa_r+0x2fc>
 80111a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80111a6:	e7b8      	b.n	801111a <_dtoa_r+0x28a>
 80111a8:	3101      	adds	r1, #1
 80111aa:	6041      	str	r1, [r0, #4]
 80111ac:	0052      	lsls	r2, r2, #1
 80111ae:	e7b8      	b.n	8011122 <_dtoa_r+0x292>
 80111b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111b2:	9a01      	ldr	r2, [sp, #4]
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	9b03      	ldr	r3, [sp, #12]
 80111b8:	2b0e      	cmp	r3, #14
 80111ba:	f200 809d 	bhi.w	80112f8 <_dtoa_r+0x468>
 80111be:	2d00      	cmp	r5, #0
 80111c0:	f000 809a 	beq.w	80112f8 <_dtoa_r+0x468>
 80111c4:	9b00      	ldr	r3, [sp, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dd32      	ble.n	8011230 <_dtoa_r+0x3a0>
 80111ca:	4ab7      	ldr	r2, [pc, #732]	; (80114a8 <_dtoa_r+0x618>)
 80111cc:	f003 030f 	and.w	r3, r3, #15
 80111d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80111d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111d8:	9b00      	ldr	r3, [sp, #0]
 80111da:	05d8      	lsls	r0, r3, #23
 80111dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80111e0:	d516      	bpl.n	8011210 <_dtoa_r+0x380>
 80111e2:	4bb2      	ldr	r3, [pc, #712]	; (80114ac <_dtoa_r+0x61c>)
 80111e4:	ec51 0b19 	vmov	r0, r1, d9
 80111e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111ec:	f7ef fb46 	bl	800087c <__aeabi_ddiv>
 80111f0:	f007 070f 	and.w	r7, r7, #15
 80111f4:	4682      	mov	sl, r0
 80111f6:	468b      	mov	fp, r1
 80111f8:	2503      	movs	r5, #3
 80111fa:	4eac      	ldr	r6, [pc, #688]	; (80114ac <_dtoa_r+0x61c>)
 80111fc:	b957      	cbnz	r7, 8011214 <_dtoa_r+0x384>
 80111fe:	4642      	mov	r2, r8
 8011200:	464b      	mov	r3, r9
 8011202:	4650      	mov	r0, sl
 8011204:	4659      	mov	r1, fp
 8011206:	f7ef fb39 	bl	800087c <__aeabi_ddiv>
 801120a:	4682      	mov	sl, r0
 801120c:	468b      	mov	fp, r1
 801120e:	e028      	b.n	8011262 <_dtoa_r+0x3d2>
 8011210:	2502      	movs	r5, #2
 8011212:	e7f2      	b.n	80111fa <_dtoa_r+0x36a>
 8011214:	07f9      	lsls	r1, r7, #31
 8011216:	d508      	bpl.n	801122a <_dtoa_r+0x39a>
 8011218:	4640      	mov	r0, r8
 801121a:	4649      	mov	r1, r9
 801121c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011220:	f7ef fa02 	bl	8000628 <__aeabi_dmul>
 8011224:	3501      	adds	r5, #1
 8011226:	4680      	mov	r8, r0
 8011228:	4689      	mov	r9, r1
 801122a:	107f      	asrs	r7, r7, #1
 801122c:	3608      	adds	r6, #8
 801122e:	e7e5      	b.n	80111fc <_dtoa_r+0x36c>
 8011230:	f000 809b 	beq.w	801136a <_dtoa_r+0x4da>
 8011234:	9b00      	ldr	r3, [sp, #0]
 8011236:	4f9d      	ldr	r7, [pc, #628]	; (80114ac <_dtoa_r+0x61c>)
 8011238:	425e      	negs	r6, r3
 801123a:	4b9b      	ldr	r3, [pc, #620]	; (80114a8 <_dtoa_r+0x618>)
 801123c:	f006 020f 	and.w	r2, r6, #15
 8011240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	ec51 0b19 	vmov	r0, r1, d9
 801124c:	f7ef f9ec 	bl	8000628 <__aeabi_dmul>
 8011250:	1136      	asrs	r6, r6, #4
 8011252:	4682      	mov	sl, r0
 8011254:	468b      	mov	fp, r1
 8011256:	2300      	movs	r3, #0
 8011258:	2502      	movs	r5, #2
 801125a:	2e00      	cmp	r6, #0
 801125c:	d17a      	bne.n	8011354 <_dtoa_r+0x4c4>
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1d3      	bne.n	801120a <_dtoa_r+0x37a>
 8011262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011264:	2b00      	cmp	r3, #0
 8011266:	f000 8082 	beq.w	801136e <_dtoa_r+0x4de>
 801126a:	4b91      	ldr	r3, [pc, #580]	; (80114b0 <_dtoa_r+0x620>)
 801126c:	2200      	movs	r2, #0
 801126e:	4650      	mov	r0, sl
 8011270:	4659      	mov	r1, fp
 8011272:	f7ef fc4b 	bl	8000b0c <__aeabi_dcmplt>
 8011276:	2800      	cmp	r0, #0
 8011278:	d079      	beq.n	801136e <_dtoa_r+0x4de>
 801127a:	9b03      	ldr	r3, [sp, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d076      	beq.n	801136e <_dtoa_r+0x4de>
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	dd36      	ble.n	80112f4 <_dtoa_r+0x464>
 8011286:	9b00      	ldr	r3, [sp, #0]
 8011288:	4650      	mov	r0, sl
 801128a:	4659      	mov	r1, fp
 801128c:	1e5f      	subs	r7, r3, #1
 801128e:	2200      	movs	r2, #0
 8011290:	4b88      	ldr	r3, [pc, #544]	; (80114b4 <_dtoa_r+0x624>)
 8011292:	f7ef f9c9 	bl	8000628 <__aeabi_dmul>
 8011296:	9e02      	ldr	r6, [sp, #8]
 8011298:	4682      	mov	sl, r0
 801129a:	468b      	mov	fp, r1
 801129c:	3501      	adds	r5, #1
 801129e:	4628      	mov	r0, r5
 80112a0:	f7ef f958 	bl	8000554 <__aeabi_i2d>
 80112a4:	4652      	mov	r2, sl
 80112a6:	465b      	mov	r3, fp
 80112a8:	f7ef f9be 	bl	8000628 <__aeabi_dmul>
 80112ac:	4b82      	ldr	r3, [pc, #520]	; (80114b8 <_dtoa_r+0x628>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	f7ef f804 	bl	80002bc <__adddf3>
 80112b4:	46d0      	mov	r8, sl
 80112b6:	46d9      	mov	r9, fp
 80112b8:	4682      	mov	sl, r0
 80112ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80112be:	2e00      	cmp	r6, #0
 80112c0:	d158      	bne.n	8011374 <_dtoa_r+0x4e4>
 80112c2:	4b7e      	ldr	r3, [pc, #504]	; (80114bc <_dtoa_r+0x62c>)
 80112c4:	2200      	movs	r2, #0
 80112c6:	4640      	mov	r0, r8
 80112c8:	4649      	mov	r1, r9
 80112ca:	f7ee fff5 	bl	80002b8 <__aeabi_dsub>
 80112ce:	4652      	mov	r2, sl
 80112d0:	465b      	mov	r3, fp
 80112d2:	4680      	mov	r8, r0
 80112d4:	4689      	mov	r9, r1
 80112d6:	f7ef fc37 	bl	8000b48 <__aeabi_dcmpgt>
 80112da:	2800      	cmp	r0, #0
 80112dc:	f040 8295 	bne.w	801180a <_dtoa_r+0x97a>
 80112e0:	4652      	mov	r2, sl
 80112e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80112e6:	4640      	mov	r0, r8
 80112e8:	4649      	mov	r1, r9
 80112ea:	f7ef fc0f 	bl	8000b0c <__aeabi_dcmplt>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	f040 8289 	bne.w	8011806 <_dtoa_r+0x976>
 80112f4:	ec5b ab19 	vmov	sl, fp, d9
 80112f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f2c0 8148 	blt.w	8011590 <_dtoa_r+0x700>
 8011300:	9a00      	ldr	r2, [sp, #0]
 8011302:	2a0e      	cmp	r2, #14
 8011304:	f300 8144 	bgt.w	8011590 <_dtoa_r+0x700>
 8011308:	4b67      	ldr	r3, [pc, #412]	; (80114a8 <_dtoa_r+0x618>)
 801130a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801130e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011314:	2b00      	cmp	r3, #0
 8011316:	f280 80d5 	bge.w	80114c4 <_dtoa_r+0x634>
 801131a:	9b03      	ldr	r3, [sp, #12]
 801131c:	2b00      	cmp	r3, #0
 801131e:	f300 80d1 	bgt.w	80114c4 <_dtoa_r+0x634>
 8011322:	f040 826f 	bne.w	8011804 <_dtoa_r+0x974>
 8011326:	4b65      	ldr	r3, [pc, #404]	; (80114bc <_dtoa_r+0x62c>)
 8011328:	2200      	movs	r2, #0
 801132a:	4640      	mov	r0, r8
 801132c:	4649      	mov	r1, r9
 801132e:	f7ef f97b 	bl	8000628 <__aeabi_dmul>
 8011332:	4652      	mov	r2, sl
 8011334:	465b      	mov	r3, fp
 8011336:	f7ef fbfd 	bl	8000b34 <__aeabi_dcmpge>
 801133a:	9e03      	ldr	r6, [sp, #12]
 801133c:	4637      	mov	r7, r6
 801133e:	2800      	cmp	r0, #0
 8011340:	f040 8245 	bne.w	80117ce <_dtoa_r+0x93e>
 8011344:	9d01      	ldr	r5, [sp, #4]
 8011346:	2331      	movs	r3, #49	; 0x31
 8011348:	f805 3b01 	strb.w	r3, [r5], #1
 801134c:	9b00      	ldr	r3, [sp, #0]
 801134e:	3301      	adds	r3, #1
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	e240      	b.n	80117d6 <_dtoa_r+0x946>
 8011354:	07f2      	lsls	r2, r6, #31
 8011356:	d505      	bpl.n	8011364 <_dtoa_r+0x4d4>
 8011358:	e9d7 2300 	ldrd	r2, r3, [r7]
 801135c:	f7ef f964 	bl	8000628 <__aeabi_dmul>
 8011360:	3501      	adds	r5, #1
 8011362:	2301      	movs	r3, #1
 8011364:	1076      	asrs	r6, r6, #1
 8011366:	3708      	adds	r7, #8
 8011368:	e777      	b.n	801125a <_dtoa_r+0x3ca>
 801136a:	2502      	movs	r5, #2
 801136c:	e779      	b.n	8011262 <_dtoa_r+0x3d2>
 801136e:	9f00      	ldr	r7, [sp, #0]
 8011370:	9e03      	ldr	r6, [sp, #12]
 8011372:	e794      	b.n	801129e <_dtoa_r+0x40e>
 8011374:	9901      	ldr	r1, [sp, #4]
 8011376:	4b4c      	ldr	r3, [pc, #304]	; (80114a8 <_dtoa_r+0x618>)
 8011378:	4431      	add	r1, r6
 801137a:	910d      	str	r1, [sp, #52]	; 0x34
 801137c:	9908      	ldr	r1, [sp, #32]
 801137e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011386:	2900      	cmp	r1, #0
 8011388:	d043      	beq.n	8011412 <_dtoa_r+0x582>
 801138a:	494d      	ldr	r1, [pc, #308]	; (80114c0 <_dtoa_r+0x630>)
 801138c:	2000      	movs	r0, #0
 801138e:	f7ef fa75 	bl	800087c <__aeabi_ddiv>
 8011392:	4652      	mov	r2, sl
 8011394:	465b      	mov	r3, fp
 8011396:	f7ee ff8f 	bl	80002b8 <__aeabi_dsub>
 801139a:	9d01      	ldr	r5, [sp, #4]
 801139c:	4682      	mov	sl, r0
 801139e:	468b      	mov	fp, r1
 80113a0:	4649      	mov	r1, r9
 80113a2:	4640      	mov	r0, r8
 80113a4:	f7ef fbf0 	bl	8000b88 <__aeabi_d2iz>
 80113a8:	4606      	mov	r6, r0
 80113aa:	f7ef f8d3 	bl	8000554 <__aeabi_i2d>
 80113ae:	4602      	mov	r2, r0
 80113b0:	460b      	mov	r3, r1
 80113b2:	4640      	mov	r0, r8
 80113b4:	4649      	mov	r1, r9
 80113b6:	f7ee ff7f 	bl	80002b8 <__aeabi_dsub>
 80113ba:	3630      	adds	r6, #48	; 0x30
 80113bc:	f805 6b01 	strb.w	r6, [r5], #1
 80113c0:	4652      	mov	r2, sl
 80113c2:	465b      	mov	r3, fp
 80113c4:	4680      	mov	r8, r0
 80113c6:	4689      	mov	r9, r1
 80113c8:	f7ef fba0 	bl	8000b0c <__aeabi_dcmplt>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d163      	bne.n	8011498 <_dtoa_r+0x608>
 80113d0:	4642      	mov	r2, r8
 80113d2:	464b      	mov	r3, r9
 80113d4:	4936      	ldr	r1, [pc, #216]	; (80114b0 <_dtoa_r+0x620>)
 80113d6:	2000      	movs	r0, #0
 80113d8:	f7ee ff6e 	bl	80002b8 <__aeabi_dsub>
 80113dc:	4652      	mov	r2, sl
 80113de:	465b      	mov	r3, fp
 80113e0:	f7ef fb94 	bl	8000b0c <__aeabi_dcmplt>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	f040 80b5 	bne.w	8011554 <_dtoa_r+0x6c4>
 80113ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113ec:	429d      	cmp	r5, r3
 80113ee:	d081      	beq.n	80112f4 <_dtoa_r+0x464>
 80113f0:	4b30      	ldr	r3, [pc, #192]	; (80114b4 <_dtoa_r+0x624>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	4650      	mov	r0, sl
 80113f6:	4659      	mov	r1, fp
 80113f8:	f7ef f916 	bl	8000628 <__aeabi_dmul>
 80113fc:	4b2d      	ldr	r3, [pc, #180]	; (80114b4 <_dtoa_r+0x624>)
 80113fe:	4682      	mov	sl, r0
 8011400:	468b      	mov	fp, r1
 8011402:	4640      	mov	r0, r8
 8011404:	4649      	mov	r1, r9
 8011406:	2200      	movs	r2, #0
 8011408:	f7ef f90e 	bl	8000628 <__aeabi_dmul>
 801140c:	4680      	mov	r8, r0
 801140e:	4689      	mov	r9, r1
 8011410:	e7c6      	b.n	80113a0 <_dtoa_r+0x510>
 8011412:	4650      	mov	r0, sl
 8011414:	4659      	mov	r1, fp
 8011416:	f7ef f907 	bl	8000628 <__aeabi_dmul>
 801141a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801141c:	9d01      	ldr	r5, [sp, #4]
 801141e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011420:	4682      	mov	sl, r0
 8011422:	468b      	mov	fp, r1
 8011424:	4649      	mov	r1, r9
 8011426:	4640      	mov	r0, r8
 8011428:	f7ef fbae 	bl	8000b88 <__aeabi_d2iz>
 801142c:	4606      	mov	r6, r0
 801142e:	f7ef f891 	bl	8000554 <__aeabi_i2d>
 8011432:	3630      	adds	r6, #48	; 0x30
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f7ee ff3c 	bl	80002b8 <__aeabi_dsub>
 8011440:	f805 6b01 	strb.w	r6, [r5], #1
 8011444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011446:	429d      	cmp	r5, r3
 8011448:	4680      	mov	r8, r0
 801144a:	4689      	mov	r9, r1
 801144c:	f04f 0200 	mov.w	r2, #0
 8011450:	d124      	bne.n	801149c <_dtoa_r+0x60c>
 8011452:	4b1b      	ldr	r3, [pc, #108]	; (80114c0 <_dtoa_r+0x630>)
 8011454:	4650      	mov	r0, sl
 8011456:	4659      	mov	r1, fp
 8011458:	f7ee ff30 	bl	80002bc <__adddf3>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	4640      	mov	r0, r8
 8011462:	4649      	mov	r1, r9
 8011464:	f7ef fb70 	bl	8000b48 <__aeabi_dcmpgt>
 8011468:	2800      	cmp	r0, #0
 801146a:	d173      	bne.n	8011554 <_dtoa_r+0x6c4>
 801146c:	4652      	mov	r2, sl
 801146e:	465b      	mov	r3, fp
 8011470:	4913      	ldr	r1, [pc, #76]	; (80114c0 <_dtoa_r+0x630>)
 8011472:	2000      	movs	r0, #0
 8011474:	f7ee ff20 	bl	80002b8 <__aeabi_dsub>
 8011478:	4602      	mov	r2, r0
 801147a:	460b      	mov	r3, r1
 801147c:	4640      	mov	r0, r8
 801147e:	4649      	mov	r1, r9
 8011480:	f7ef fb44 	bl	8000b0c <__aeabi_dcmplt>
 8011484:	2800      	cmp	r0, #0
 8011486:	f43f af35 	beq.w	80112f4 <_dtoa_r+0x464>
 801148a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801148c:	1e6b      	subs	r3, r5, #1
 801148e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011490:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011494:	2b30      	cmp	r3, #48	; 0x30
 8011496:	d0f8      	beq.n	801148a <_dtoa_r+0x5fa>
 8011498:	9700      	str	r7, [sp, #0]
 801149a:	e049      	b.n	8011530 <_dtoa_r+0x6a0>
 801149c:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <_dtoa_r+0x624>)
 801149e:	f7ef f8c3 	bl	8000628 <__aeabi_dmul>
 80114a2:	4680      	mov	r8, r0
 80114a4:	4689      	mov	r9, r1
 80114a6:	e7bd      	b.n	8011424 <_dtoa_r+0x594>
 80114a8:	080134f8 	.word	0x080134f8
 80114ac:	080134d0 	.word	0x080134d0
 80114b0:	3ff00000 	.word	0x3ff00000
 80114b4:	40240000 	.word	0x40240000
 80114b8:	401c0000 	.word	0x401c0000
 80114bc:	40140000 	.word	0x40140000
 80114c0:	3fe00000 	.word	0x3fe00000
 80114c4:	9d01      	ldr	r5, [sp, #4]
 80114c6:	4656      	mov	r6, sl
 80114c8:	465f      	mov	r7, fp
 80114ca:	4642      	mov	r2, r8
 80114cc:	464b      	mov	r3, r9
 80114ce:	4630      	mov	r0, r6
 80114d0:	4639      	mov	r1, r7
 80114d2:	f7ef f9d3 	bl	800087c <__aeabi_ddiv>
 80114d6:	f7ef fb57 	bl	8000b88 <__aeabi_d2iz>
 80114da:	4682      	mov	sl, r0
 80114dc:	f7ef f83a 	bl	8000554 <__aeabi_i2d>
 80114e0:	4642      	mov	r2, r8
 80114e2:	464b      	mov	r3, r9
 80114e4:	f7ef f8a0 	bl	8000628 <__aeabi_dmul>
 80114e8:	4602      	mov	r2, r0
 80114ea:	460b      	mov	r3, r1
 80114ec:	4630      	mov	r0, r6
 80114ee:	4639      	mov	r1, r7
 80114f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80114f4:	f7ee fee0 	bl	80002b8 <__aeabi_dsub>
 80114f8:	f805 6b01 	strb.w	r6, [r5], #1
 80114fc:	9e01      	ldr	r6, [sp, #4]
 80114fe:	9f03      	ldr	r7, [sp, #12]
 8011500:	1bae      	subs	r6, r5, r6
 8011502:	42b7      	cmp	r7, r6
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	d135      	bne.n	8011576 <_dtoa_r+0x6e6>
 801150a:	f7ee fed7 	bl	80002bc <__adddf3>
 801150e:	4642      	mov	r2, r8
 8011510:	464b      	mov	r3, r9
 8011512:	4606      	mov	r6, r0
 8011514:	460f      	mov	r7, r1
 8011516:	f7ef fb17 	bl	8000b48 <__aeabi_dcmpgt>
 801151a:	b9d0      	cbnz	r0, 8011552 <_dtoa_r+0x6c2>
 801151c:	4642      	mov	r2, r8
 801151e:	464b      	mov	r3, r9
 8011520:	4630      	mov	r0, r6
 8011522:	4639      	mov	r1, r7
 8011524:	f7ef fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8011528:	b110      	cbz	r0, 8011530 <_dtoa_r+0x6a0>
 801152a:	f01a 0f01 	tst.w	sl, #1
 801152e:	d110      	bne.n	8011552 <_dtoa_r+0x6c2>
 8011530:	4620      	mov	r0, r4
 8011532:	ee18 1a10 	vmov	r1, s16
 8011536:	f000 fc07 	bl	8011d48 <_Bfree>
 801153a:	2300      	movs	r3, #0
 801153c:	9800      	ldr	r0, [sp, #0]
 801153e:	702b      	strb	r3, [r5, #0]
 8011540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011542:	3001      	adds	r0, #1
 8011544:	6018      	str	r0, [r3, #0]
 8011546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011548:	2b00      	cmp	r3, #0
 801154a:	f43f acf1 	beq.w	8010f30 <_dtoa_r+0xa0>
 801154e:	601d      	str	r5, [r3, #0]
 8011550:	e4ee      	b.n	8010f30 <_dtoa_r+0xa0>
 8011552:	9f00      	ldr	r7, [sp, #0]
 8011554:	462b      	mov	r3, r5
 8011556:	461d      	mov	r5, r3
 8011558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801155c:	2a39      	cmp	r2, #57	; 0x39
 801155e:	d106      	bne.n	801156e <_dtoa_r+0x6de>
 8011560:	9a01      	ldr	r2, [sp, #4]
 8011562:	429a      	cmp	r2, r3
 8011564:	d1f7      	bne.n	8011556 <_dtoa_r+0x6c6>
 8011566:	9901      	ldr	r1, [sp, #4]
 8011568:	2230      	movs	r2, #48	; 0x30
 801156a:	3701      	adds	r7, #1
 801156c:	700a      	strb	r2, [r1, #0]
 801156e:	781a      	ldrb	r2, [r3, #0]
 8011570:	3201      	adds	r2, #1
 8011572:	701a      	strb	r2, [r3, #0]
 8011574:	e790      	b.n	8011498 <_dtoa_r+0x608>
 8011576:	4ba6      	ldr	r3, [pc, #664]	; (8011810 <_dtoa_r+0x980>)
 8011578:	2200      	movs	r2, #0
 801157a:	f7ef f855 	bl	8000628 <__aeabi_dmul>
 801157e:	2200      	movs	r2, #0
 8011580:	2300      	movs	r3, #0
 8011582:	4606      	mov	r6, r0
 8011584:	460f      	mov	r7, r1
 8011586:	f7ef fab7 	bl	8000af8 <__aeabi_dcmpeq>
 801158a:	2800      	cmp	r0, #0
 801158c:	d09d      	beq.n	80114ca <_dtoa_r+0x63a>
 801158e:	e7cf      	b.n	8011530 <_dtoa_r+0x6a0>
 8011590:	9a08      	ldr	r2, [sp, #32]
 8011592:	2a00      	cmp	r2, #0
 8011594:	f000 80d7 	beq.w	8011746 <_dtoa_r+0x8b6>
 8011598:	9a06      	ldr	r2, [sp, #24]
 801159a:	2a01      	cmp	r2, #1
 801159c:	f300 80ba 	bgt.w	8011714 <_dtoa_r+0x884>
 80115a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115a2:	2a00      	cmp	r2, #0
 80115a4:	f000 80b2 	beq.w	801170c <_dtoa_r+0x87c>
 80115a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80115ac:	9e07      	ldr	r6, [sp, #28]
 80115ae:	9d04      	ldr	r5, [sp, #16]
 80115b0:	9a04      	ldr	r2, [sp, #16]
 80115b2:	441a      	add	r2, r3
 80115b4:	9204      	str	r2, [sp, #16]
 80115b6:	9a05      	ldr	r2, [sp, #20]
 80115b8:	2101      	movs	r1, #1
 80115ba:	441a      	add	r2, r3
 80115bc:	4620      	mov	r0, r4
 80115be:	9205      	str	r2, [sp, #20]
 80115c0:	f000 fc7a 	bl	8011eb8 <__i2b>
 80115c4:	4607      	mov	r7, r0
 80115c6:	2d00      	cmp	r5, #0
 80115c8:	dd0c      	ble.n	80115e4 <_dtoa_r+0x754>
 80115ca:	9b05      	ldr	r3, [sp, #20]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	dd09      	ble.n	80115e4 <_dtoa_r+0x754>
 80115d0:	42ab      	cmp	r3, r5
 80115d2:	9a04      	ldr	r2, [sp, #16]
 80115d4:	bfa8      	it	ge
 80115d6:	462b      	movge	r3, r5
 80115d8:	1ad2      	subs	r2, r2, r3
 80115da:	9204      	str	r2, [sp, #16]
 80115dc:	9a05      	ldr	r2, [sp, #20]
 80115de:	1aed      	subs	r5, r5, r3
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	9b07      	ldr	r3, [sp, #28]
 80115e6:	b31b      	cbz	r3, 8011630 <_dtoa_r+0x7a0>
 80115e8:	9b08      	ldr	r3, [sp, #32]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 80af 	beq.w	801174e <_dtoa_r+0x8be>
 80115f0:	2e00      	cmp	r6, #0
 80115f2:	dd13      	ble.n	801161c <_dtoa_r+0x78c>
 80115f4:	4639      	mov	r1, r7
 80115f6:	4632      	mov	r2, r6
 80115f8:	4620      	mov	r0, r4
 80115fa:	f000 fd1d 	bl	8012038 <__pow5mult>
 80115fe:	ee18 2a10 	vmov	r2, s16
 8011602:	4601      	mov	r1, r0
 8011604:	4607      	mov	r7, r0
 8011606:	4620      	mov	r0, r4
 8011608:	f000 fc6c 	bl	8011ee4 <__multiply>
 801160c:	ee18 1a10 	vmov	r1, s16
 8011610:	4680      	mov	r8, r0
 8011612:	4620      	mov	r0, r4
 8011614:	f000 fb98 	bl	8011d48 <_Bfree>
 8011618:	ee08 8a10 	vmov	s16, r8
 801161c:	9b07      	ldr	r3, [sp, #28]
 801161e:	1b9a      	subs	r2, r3, r6
 8011620:	d006      	beq.n	8011630 <_dtoa_r+0x7a0>
 8011622:	ee18 1a10 	vmov	r1, s16
 8011626:	4620      	mov	r0, r4
 8011628:	f000 fd06 	bl	8012038 <__pow5mult>
 801162c:	ee08 0a10 	vmov	s16, r0
 8011630:	2101      	movs	r1, #1
 8011632:	4620      	mov	r0, r4
 8011634:	f000 fc40 	bl	8011eb8 <__i2b>
 8011638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801163a:	2b00      	cmp	r3, #0
 801163c:	4606      	mov	r6, r0
 801163e:	f340 8088 	ble.w	8011752 <_dtoa_r+0x8c2>
 8011642:	461a      	mov	r2, r3
 8011644:	4601      	mov	r1, r0
 8011646:	4620      	mov	r0, r4
 8011648:	f000 fcf6 	bl	8012038 <__pow5mult>
 801164c:	9b06      	ldr	r3, [sp, #24]
 801164e:	2b01      	cmp	r3, #1
 8011650:	4606      	mov	r6, r0
 8011652:	f340 8081 	ble.w	8011758 <_dtoa_r+0x8c8>
 8011656:	f04f 0800 	mov.w	r8, #0
 801165a:	6933      	ldr	r3, [r6, #16]
 801165c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011660:	6918      	ldr	r0, [r3, #16]
 8011662:	f000 fbd9 	bl	8011e18 <__hi0bits>
 8011666:	f1c0 0020 	rsb	r0, r0, #32
 801166a:	9b05      	ldr	r3, [sp, #20]
 801166c:	4418      	add	r0, r3
 801166e:	f010 001f 	ands.w	r0, r0, #31
 8011672:	f000 8092 	beq.w	801179a <_dtoa_r+0x90a>
 8011676:	f1c0 0320 	rsb	r3, r0, #32
 801167a:	2b04      	cmp	r3, #4
 801167c:	f340 808a 	ble.w	8011794 <_dtoa_r+0x904>
 8011680:	f1c0 001c 	rsb	r0, r0, #28
 8011684:	9b04      	ldr	r3, [sp, #16]
 8011686:	4403      	add	r3, r0
 8011688:	9304      	str	r3, [sp, #16]
 801168a:	9b05      	ldr	r3, [sp, #20]
 801168c:	4403      	add	r3, r0
 801168e:	4405      	add	r5, r0
 8011690:	9305      	str	r3, [sp, #20]
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	dd07      	ble.n	80116a8 <_dtoa_r+0x818>
 8011698:	ee18 1a10 	vmov	r1, s16
 801169c:	461a      	mov	r2, r3
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 fd24 	bl	80120ec <__lshift>
 80116a4:	ee08 0a10 	vmov	s16, r0
 80116a8:	9b05      	ldr	r3, [sp, #20]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	dd05      	ble.n	80116ba <_dtoa_r+0x82a>
 80116ae:	4631      	mov	r1, r6
 80116b0:	461a      	mov	r2, r3
 80116b2:	4620      	mov	r0, r4
 80116b4:	f000 fd1a 	bl	80120ec <__lshift>
 80116b8:	4606      	mov	r6, r0
 80116ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d06e      	beq.n	801179e <_dtoa_r+0x90e>
 80116c0:	ee18 0a10 	vmov	r0, s16
 80116c4:	4631      	mov	r1, r6
 80116c6:	f000 fd81 	bl	80121cc <__mcmp>
 80116ca:	2800      	cmp	r0, #0
 80116cc:	da67      	bge.n	801179e <_dtoa_r+0x90e>
 80116ce:	9b00      	ldr	r3, [sp, #0]
 80116d0:	3b01      	subs	r3, #1
 80116d2:	ee18 1a10 	vmov	r1, s16
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	220a      	movs	r2, #10
 80116da:	2300      	movs	r3, #0
 80116dc:	4620      	mov	r0, r4
 80116de:	f000 fb55 	bl	8011d8c <__multadd>
 80116e2:	9b08      	ldr	r3, [sp, #32]
 80116e4:	ee08 0a10 	vmov	s16, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 81b1 	beq.w	8011a50 <_dtoa_r+0xbc0>
 80116ee:	2300      	movs	r3, #0
 80116f0:	4639      	mov	r1, r7
 80116f2:	220a      	movs	r2, #10
 80116f4:	4620      	mov	r0, r4
 80116f6:	f000 fb49 	bl	8011d8c <__multadd>
 80116fa:	9b02      	ldr	r3, [sp, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	4607      	mov	r7, r0
 8011700:	f300 808e 	bgt.w	8011820 <_dtoa_r+0x990>
 8011704:	9b06      	ldr	r3, [sp, #24]
 8011706:	2b02      	cmp	r3, #2
 8011708:	dc51      	bgt.n	80117ae <_dtoa_r+0x91e>
 801170a:	e089      	b.n	8011820 <_dtoa_r+0x990>
 801170c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801170e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011712:	e74b      	b.n	80115ac <_dtoa_r+0x71c>
 8011714:	9b03      	ldr	r3, [sp, #12]
 8011716:	1e5e      	subs	r6, r3, #1
 8011718:	9b07      	ldr	r3, [sp, #28]
 801171a:	42b3      	cmp	r3, r6
 801171c:	bfbf      	itttt	lt
 801171e:	9b07      	ldrlt	r3, [sp, #28]
 8011720:	9607      	strlt	r6, [sp, #28]
 8011722:	1af2      	sublt	r2, r6, r3
 8011724:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011726:	bfb6      	itet	lt
 8011728:	189b      	addlt	r3, r3, r2
 801172a:	1b9e      	subge	r6, r3, r6
 801172c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801172e:	9b03      	ldr	r3, [sp, #12]
 8011730:	bfb8      	it	lt
 8011732:	2600      	movlt	r6, #0
 8011734:	2b00      	cmp	r3, #0
 8011736:	bfb7      	itett	lt
 8011738:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801173c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011740:	1a9d      	sublt	r5, r3, r2
 8011742:	2300      	movlt	r3, #0
 8011744:	e734      	b.n	80115b0 <_dtoa_r+0x720>
 8011746:	9e07      	ldr	r6, [sp, #28]
 8011748:	9d04      	ldr	r5, [sp, #16]
 801174a:	9f08      	ldr	r7, [sp, #32]
 801174c:	e73b      	b.n	80115c6 <_dtoa_r+0x736>
 801174e:	9a07      	ldr	r2, [sp, #28]
 8011750:	e767      	b.n	8011622 <_dtoa_r+0x792>
 8011752:	9b06      	ldr	r3, [sp, #24]
 8011754:	2b01      	cmp	r3, #1
 8011756:	dc18      	bgt.n	801178a <_dtoa_r+0x8fa>
 8011758:	f1ba 0f00 	cmp.w	sl, #0
 801175c:	d115      	bne.n	801178a <_dtoa_r+0x8fa>
 801175e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011762:	b993      	cbnz	r3, 801178a <_dtoa_r+0x8fa>
 8011764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011768:	0d1b      	lsrs	r3, r3, #20
 801176a:	051b      	lsls	r3, r3, #20
 801176c:	b183      	cbz	r3, 8011790 <_dtoa_r+0x900>
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	3301      	adds	r3, #1
 8011772:	9304      	str	r3, [sp, #16]
 8011774:	9b05      	ldr	r3, [sp, #20]
 8011776:	3301      	adds	r3, #1
 8011778:	9305      	str	r3, [sp, #20]
 801177a:	f04f 0801 	mov.w	r8, #1
 801177e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011780:	2b00      	cmp	r3, #0
 8011782:	f47f af6a 	bne.w	801165a <_dtoa_r+0x7ca>
 8011786:	2001      	movs	r0, #1
 8011788:	e76f      	b.n	801166a <_dtoa_r+0x7da>
 801178a:	f04f 0800 	mov.w	r8, #0
 801178e:	e7f6      	b.n	801177e <_dtoa_r+0x8ee>
 8011790:	4698      	mov	r8, r3
 8011792:	e7f4      	b.n	801177e <_dtoa_r+0x8ee>
 8011794:	f43f af7d 	beq.w	8011692 <_dtoa_r+0x802>
 8011798:	4618      	mov	r0, r3
 801179a:	301c      	adds	r0, #28
 801179c:	e772      	b.n	8011684 <_dtoa_r+0x7f4>
 801179e:	9b03      	ldr	r3, [sp, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	dc37      	bgt.n	8011814 <_dtoa_r+0x984>
 80117a4:	9b06      	ldr	r3, [sp, #24]
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	dd34      	ble.n	8011814 <_dtoa_r+0x984>
 80117aa:	9b03      	ldr	r3, [sp, #12]
 80117ac:	9302      	str	r3, [sp, #8]
 80117ae:	9b02      	ldr	r3, [sp, #8]
 80117b0:	b96b      	cbnz	r3, 80117ce <_dtoa_r+0x93e>
 80117b2:	4631      	mov	r1, r6
 80117b4:	2205      	movs	r2, #5
 80117b6:	4620      	mov	r0, r4
 80117b8:	f000 fae8 	bl	8011d8c <__multadd>
 80117bc:	4601      	mov	r1, r0
 80117be:	4606      	mov	r6, r0
 80117c0:	ee18 0a10 	vmov	r0, s16
 80117c4:	f000 fd02 	bl	80121cc <__mcmp>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	f73f adbb 	bgt.w	8011344 <_dtoa_r+0x4b4>
 80117ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d0:	9d01      	ldr	r5, [sp, #4]
 80117d2:	43db      	mvns	r3, r3
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	f04f 0800 	mov.w	r8, #0
 80117da:	4631      	mov	r1, r6
 80117dc:	4620      	mov	r0, r4
 80117de:	f000 fab3 	bl	8011d48 <_Bfree>
 80117e2:	2f00      	cmp	r7, #0
 80117e4:	f43f aea4 	beq.w	8011530 <_dtoa_r+0x6a0>
 80117e8:	f1b8 0f00 	cmp.w	r8, #0
 80117ec:	d005      	beq.n	80117fa <_dtoa_r+0x96a>
 80117ee:	45b8      	cmp	r8, r7
 80117f0:	d003      	beq.n	80117fa <_dtoa_r+0x96a>
 80117f2:	4641      	mov	r1, r8
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 faa7 	bl	8011d48 <_Bfree>
 80117fa:	4639      	mov	r1, r7
 80117fc:	4620      	mov	r0, r4
 80117fe:	f000 faa3 	bl	8011d48 <_Bfree>
 8011802:	e695      	b.n	8011530 <_dtoa_r+0x6a0>
 8011804:	2600      	movs	r6, #0
 8011806:	4637      	mov	r7, r6
 8011808:	e7e1      	b.n	80117ce <_dtoa_r+0x93e>
 801180a:	9700      	str	r7, [sp, #0]
 801180c:	4637      	mov	r7, r6
 801180e:	e599      	b.n	8011344 <_dtoa_r+0x4b4>
 8011810:	40240000 	.word	0x40240000
 8011814:	9b08      	ldr	r3, [sp, #32]
 8011816:	2b00      	cmp	r3, #0
 8011818:	f000 80ca 	beq.w	80119b0 <_dtoa_r+0xb20>
 801181c:	9b03      	ldr	r3, [sp, #12]
 801181e:	9302      	str	r3, [sp, #8]
 8011820:	2d00      	cmp	r5, #0
 8011822:	dd05      	ble.n	8011830 <_dtoa_r+0x9a0>
 8011824:	4639      	mov	r1, r7
 8011826:	462a      	mov	r2, r5
 8011828:	4620      	mov	r0, r4
 801182a:	f000 fc5f 	bl	80120ec <__lshift>
 801182e:	4607      	mov	r7, r0
 8011830:	f1b8 0f00 	cmp.w	r8, #0
 8011834:	d05b      	beq.n	80118ee <_dtoa_r+0xa5e>
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	4620      	mov	r0, r4
 801183a:	f000 fa45 	bl	8011cc8 <_Balloc>
 801183e:	4605      	mov	r5, r0
 8011840:	b928      	cbnz	r0, 801184e <_dtoa_r+0x9be>
 8011842:	4b87      	ldr	r3, [pc, #540]	; (8011a60 <_dtoa_r+0xbd0>)
 8011844:	4602      	mov	r2, r0
 8011846:	f240 21ea 	movw	r1, #746	; 0x2ea
 801184a:	f7ff bb3b 	b.w	8010ec4 <_dtoa_r+0x34>
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	3202      	adds	r2, #2
 8011852:	0092      	lsls	r2, r2, #2
 8011854:	f107 010c 	add.w	r1, r7, #12
 8011858:	300c      	adds	r0, #12
 801185a:	f7fe fcb1 	bl	80101c0 <memcpy>
 801185e:	2201      	movs	r2, #1
 8011860:	4629      	mov	r1, r5
 8011862:	4620      	mov	r0, r4
 8011864:	f000 fc42 	bl	80120ec <__lshift>
 8011868:	9b01      	ldr	r3, [sp, #4]
 801186a:	f103 0901 	add.w	r9, r3, #1
 801186e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011872:	4413      	add	r3, r2
 8011874:	9305      	str	r3, [sp, #20]
 8011876:	f00a 0301 	and.w	r3, sl, #1
 801187a:	46b8      	mov	r8, r7
 801187c:	9304      	str	r3, [sp, #16]
 801187e:	4607      	mov	r7, r0
 8011880:	4631      	mov	r1, r6
 8011882:	ee18 0a10 	vmov	r0, s16
 8011886:	f7ff fa75 	bl	8010d74 <quorem>
 801188a:	4641      	mov	r1, r8
 801188c:	9002      	str	r0, [sp, #8]
 801188e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011892:	ee18 0a10 	vmov	r0, s16
 8011896:	f000 fc99 	bl	80121cc <__mcmp>
 801189a:	463a      	mov	r2, r7
 801189c:	9003      	str	r0, [sp, #12]
 801189e:	4631      	mov	r1, r6
 80118a0:	4620      	mov	r0, r4
 80118a2:	f000 fcaf 	bl	8012204 <__mdiff>
 80118a6:	68c2      	ldr	r2, [r0, #12]
 80118a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80118ac:	4605      	mov	r5, r0
 80118ae:	bb02      	cbnz	r2, 80118f2 <_dtoa_r+0xa62>
 80118b0:	4601      	mov	r1, r0
 80118b2:	ee18 0a10 	vmov	r0, s16
 80118b6:	f000 fc89 	bl	80121cc <__mcmp>
 80118ba:	4602      	mov	r2, r0
 80118bc:	4629      	mov	r1, r5
 80118be:	4620      	mov	r0, r4
 80118c0:	9207      	str	r2, [sp, #28]
 80118c2:	f000 fa41 	bl	8011d48 <_Bfree>
 80118c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80118ca:	ea43 0102 	orr.w	r1, r3, r2
 80118ce:	9b04      	ldr	r3, [sp, #16]
 80118d0:	430b      	orrs	r3, r1
 80118d2:	464d      	mov	r5, r9
 80118d4:	d10f      	bne.n	80118f6 <_dtoa_r+0xa66>
 80118d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80118da:	d02a      	beq.n	8011932 <_dtoa_r+0xaa2>
 80118dc:	9b03      	ldr	r3, [sp, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dd02      	ble.n	80118e8 <_dtoa_r+0xa58>
 80118e2:	9b02      	ldr	r3, [sp, #8]
 80118e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80118e8:	f88b a000 	strb.w	sl, [fp]
 80118ec:	e775      	b.n	80117da <_dtoa_r+0x94a>
 80118ee:	4638      	mov	r0, r7
 80118f0:	e7ba      	b.n	8011868 <_dtoa_r+0x9d8>
 80118f2:	2201      	movs	r2, #1
 80118f4:	e7e2      	b.n	80118bc <_dtoa_r+0xa2c>
 80118f6:	9b03      	ldr	r3, [sp, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	db04      	blt.n	8011906 <_dtoa_r+0xa76>
 80118fc:	9906      	ldr	r1, [sp, #24]
 80118fe:	430b      	orrs	r3, r1
 8011900:	9904      	ldr	r1, [sp, #16]
 8011902:	430b      	orrs	r3, r1
 8011904:	d122      	bne.n	801194c <_dtoa_r+0xabc>
 8011906:	2a00      	cmp	r2, #0
 8011908:	ddee      	ble.n	80118e8 <_dtoa_r+0xa58>
 801190a:	ee18 1a10 	vmov	r1, s16
 801190e:	2201      	movs	r2, #1
 8011910:	4620      	mov	r0, r4
 8011912:	f000 fbeb 	bl	80120ec <__lshift>
 8011916:	4631      	mov	r1, r6
 8011918:	ee08 0a10 	vmov	s16, r0
 801191c:	f000 fc56 	bl	80121cc <__mcmp>
 8011920:	2800      	cmp	r0, #0
 8011922:	dc03      	bgt.n	801192c <_dtoa_r+0xa9c>
 8011924:	d1e0      	bne.n	80118e8 <_dtoa_r+0xa58>
 8011926:	f01a 0f01 	tst.w	sl, #1
 801192a:	d0dd      	beq.n	80118e8 <_dtoa_r+0xa58>
 801192c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011930:	d1d7      	bne.n	80118e2 <_dtoa_r+0xa52>
 8011932:	2339      	movs	r3, #57	; 0x39
 8011934:	f88b 3000 	strb.w	r3, [fp]
 8011938:	462b      	mov	r3, r5
 801193a:	461d      	mov	r5, r3
 801193c:	3b01      	subs	r3, #1
 801193e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011942:	2a39      	cmp	r2, #57	; 0x39
 8011944:	d071      	beq.n	8011a2a <_dtoa_r+0xb9a>
 8011946:	3201      	adds	r2, #1
 8011948:	701a      	strb	r2, [r3, #0]
 801194a:	e746      	b.n	80117da <_dtoa_r+0x94a>
 801194c:	2a00      	cmp	r2, #0
 801194e:	dd07      	ble.n	8011960 <_dtoa_r+0xad0>
 8011950:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011954:	d0ed      	beq.n	8011932 <_dtoa_r+0xaa2>
 8011956:	f10a 0301 	add.w	r3, sl, #1
 801195a:	f88b 3000 	strb.w	r3, [fp]
 801195e:	e73c      	b.n	80117da <_dtoa_r+0x94a>
 8011960:	9b05      	ldr	r3, [sp, #20]
 8011962:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011966:	4599      	cmp	r9, r3
 8011968:	d047      	beq.n	80119fa <_dtoa_r+0xb6a>
 801196a:	ee18 1a10 	vmov	r1, s16
 801196e:	2300      	movs	r3, #0
 8011970:	220a      	movs	r2, #10
 8011972:	4620      	mov	r0, r4
 8011974:	f000 fa0a 	bl	8011d8c <__multadd>
 8011978:	45b8      	cmp	r8, r7
 801197a:	ee08 0a10 	vmov	s16, r0
 801197e:	f04f 0300 	mov.w	r3, #0
 8011982:	f04f 020a 	mov.w	r2, #10
 8011986:	4641      	mov	r1, r8
 8011988:	4620      	mov	r0, r4
 801198a:	d106      	bne.n	801199a <_dtoa_r+0xb0a>
 801198c:	f000 f9fe 	bl	8011d8c <__multadd>
 8011990:	4680      	mov	r8, r0
 8011992:	4607      	mov	r7, r0
 8011994:	f109 0901 	add.w	r9, r9, #1
 8011998:	e772      	b.n	8011880 <_dtoa_r+0x9f0>
 801199a:	f000 f9f7 	bl	8011d8c <__multadd>
 801199e:	4639      	mov	r1, r7
 80119a0:	4680      	mov	r8, r0
 80119a2:	2300      	movs	r3, #0
 80119a4:	220a      	movs	r2, #10
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 f9f0 	bl	8011d8c <__multadd>
 80119ac:	4607      	mov	r7, r0
 80119ae:	e7f1      	b.n	8011994 <_dtoa_r+0xb04>
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	9302      	str	r3, [sp, #8]
 80119b4:	9d01      	ldr	r5, [sp, #4]
 80119b6:	ee18 0a10 	vmov	r0, s16
 80119ba:	4631      	mov	r1, r6
 80119bc:	f7ff f9da 	bl	8010d74 <quorem>
 80119c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80119c4:	9b01      	ldr	r3, [sp, #4]
 80119c6:	f805 ab01 	strb.w	sl, [r5], #1
 80119ca:	1aea      	subs	r2, r5, r3
 80119cc:	9b02      	ldr	r3, [sp, #8]
 80119ce:	4293      	cmp	r3, r2
 80119d0:	dd09      	ble.n	80119e6 <_dtoa_r+0xb56>
 80119d2:	ee18 1a10 	vmov	r1, s16
 80119d6:	2300      	movs	r3, #0
 80119d8:	220a      	movs	r2, #10
 80119da:	4620      	mov	r0, r4
 80119dc:	f000 f9d6 	bl	8011d8c <__multadd>
 80119e0:	ee08 0a10 	vmov	s16, r0
 80119e4:	e7e7      	b.n	80119b6 <_dtoa_r+0xb26>
 80119e6:	9b02      	ldr	r3, [sp, #8]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	bfc8      	it	gt
 80119ec:	461d      	movgt	r5, r3
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	bfd8      	it	le
 80119f2:	2501      	movle	r5, #1
 80119f4:	441d      	add	r5, r3
 80119f6:	f04f 0800 	mov.w	r8, #0
 80119fa:	ee18 1a10 	vmov	r1, s16
 80119fe:	2201      	movs	r2, #1
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 fb73 	bl	80120ec <__lshift>
 8011a06:	4631      	mov	r1, r6
 8011a08:	ee08 0a10 	vmov	s16, r0
 8011a0c:	f000 fbde 	bl	80121cc <__mcmp>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	dc91      	bgt.n	8011938 <_dtoa_r+0xaa8>
 8011a14:	d102      	bne.n	8011a1c <_dtoa_r+0xb8c>
 8011a16:	f01a 0f01 	tst.w	sl, #1
 8011a1a:	d18d      	bne.n	8011938 <_dtoa_r+0xaa8>
 8011a1c:	462b      	mov	r3, r5
 8011a1e:	461d      	mov	r5, r3
 8011a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a24:	2a30      	cmp	r2, #48	; 0x30
 8011a26:	d0fa      	beq.n	8011a1e <_dtoa_r+0xb8e>
 8011a28:	e6d7      	b.n	80117da <_dtoa_r+0x94a>
 8011a2a:	9a01      	ldr	r2, [sp, #4]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d184      	bne.n	801193a <_dtoa_r+0xaaa>
 8011a30:	9b00      	ldr	r3, [sp, #0]
 8011a32:	3301      	adds	r3, #1
 8011a34:	9300      	str	r3, [sp, #0]
 8011a36:	2331      	movs	r3, #49	; 0x31
 8011a38:	7013      	strb	r3, [r2, #0]
 8011a3a:	e6ce      	b.n	80117da <_dtoa_r+0x94a>
 8011a3c:	4b09      	ldr	r3, [pc, #36]	; (8011a64 <_dtoa_r+0xbd4>)
 8011a3e:	f7ff ba95 	b.w	8010f6c <_dtoa_r+0xdc>
 8011a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f47f aa6e 	bne.w	8010f26 <_dtoa_r+0x96>
 8011a4a:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <_dtoa_r+0xbd8>)
 8011a4c:	f7ff ba8e 	b.w	8010f6c <_dtoa_r+0xdc>
 8011a50:	9b02      	ldr	r3, [sp, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	dcae      	bgt.n	80119b4 <_dtoa_r+0xb24>
 8011a56:	9b06      	ldr	r3, [sp, #24]
 8011a58:	2b02      	cmp	r3, #2
 8011a5a:	f73f aea8 	bgt.w	80117ae <_dtoa_r+0x91e>
 8011a5e:	e7a9      	b.n	80119b4 <_dtoa_r+0xb24>
 8011a60:	080133f0 	.word	0x080133f0
 8011a64:	08013210 	.word	0x08013210
 8011a68:	08013371 	.word	0x08013371

08011a6c <std>:
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	e9c0 3300 	strd	r3, r3, [r0]
 8011a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a7a:	6083      	str	r3, [r0, #8]
 8011a7c:	8181      	strh	r1, [r0, #12]
 8011a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8011a80:	81c2      	strh	r2, [r0, #14]
 8011a82:	6183      	str	r3, [r0, #24]
 8011a84:	4619      	mov	r1, r3
 8011a86:	2208      	movs	r2, #8
 8011a88:	305c      	adds	r0, #92	; 0x5c
 8011a8a:	f7fe fba7 	bl	80101dc <memset>
 8011a8e:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <std+0x38>)
 8011a90:	6263      	str	r3, [r4, #36]	; 0x24
 8011a92:	4b05      	ldr	r3, [pc, #20]	; (8011aa8 <std+0x3c>)
 8011a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a96:	4b05      	ldr	r3, [pc, #20]	; (8011aac <std+0x40>)
 8011a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <std+0x44>)
 8011a9c:	6224      	str	r4, [r4, #32]
 8011a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8011aa0:	bd10      	pop	{r4, pc}
 8011aa2:	bf00      	nop
 8011aa4:	08012969 	.word	0x08012969
 8011aa8:	0801298b 	.word	0x0801298b
 8011aac:	080129c3 	.word	0x080129c3
 8011ab0:	080129e7 	.word	0x080129e7

08011ab4 <_cleanup_r>:
 8011ab4:	4901      	ldr	r1, [pc, #4]	; (8011abc <_cleanup_r+0x8>)
 8011ab6:	f000 b8c1 	b.w	8011c3c <_fwalk_reent>
 8011aba:	bf00      	nop
 8011abc:	08012ced 	.word	0x08012ced

08011ac0 <__sfmoreglue>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	2268      	movs	r2, #104	; 0x68
 8011ac4:	1e4d      	subs	r5, r1, #1
 8011ac6:	4355      	muls	r5, r2
 8011ac8:	460e      	mov	r6, r1
 8011aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ace:	f7fe fbf9 	bl	80102c4 <_malloc_r>
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	b140      	cbz	r0, 8011ae8 <__sfmoreglue+0x28>
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8011adc:	300c      	adds	r0, #12
 8011ade:	60a0      	str	r0, [r4, #8]
 8011ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ae4:	f7fe fb7a 	bl	80101dc <memset>
 8011ae8:	4620      	mov	r0, r4
 8011aea:	bd70      	pop	{r4, r5, r6, pc}

08011aec <__sfp_lock_acquire>:
 8011aec:	4801      	ldr	r0, [pc, #4]	; (8011af4 <__sfp_lock_acquire+0x8>)
 8011aee:	f000 b8ca 	b.w	8011c86 <__retarget_lock_acquire_recursive>
 8011af2:	bf00      	nop
 8011af4:	200028dd 	.word	0x200028dd

08011af8 <__sfp_lock_release>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__sfp_lock_release+0x8>)
 8011afa:	f000 b8c5 	b.w	8011c88 <__retarget_lock_release_recursive>
 8011afe:	bf00      	nop
 8011b00:	200028dd 	.word	0x200028dd

08011b04 <__sinit_lock_acquire>:
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <__sinit_lock_acquire+0x8>)
 8011b06:	f000 b8be 	b.w	8011c86 <__retarget_lock_acquire_recursive>
 8011b0a:	bf00      	nop
 8011b0c:	200028de 	.word	0x200028de

08011b10 <__sinit_lock_release>:
 8011b10:	4801      	ldr	r0, [pc, #4]	; (8011b18 <__sinit_lock_release+0x8>)
 8011b12:	f000 b8b9 	b.w	8011c88 <__retarget_lock_release_recursive>
 8011b16:	bf00      	nop
 8011b18:	200028de 	.word	0x200028de

08011b1c <__sinit>:
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	4604      	mov	r4, r0
 8011b20:	f7ff fff0 	bl	8011b04 <__sinit_lock_acquire>
 8011b24:	69a3      	ldr	r3, [r4, #24]
 8011b26:	b11b      	cbz	r3, 8011b30 <__sinit+0x14>
 8011b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b2c:	f7ff bff0 	b.w	8011b10 <__sinit_lock_release>
 8011b30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b34:	6523      	str	r3, [r4, #80]	; 0x50
 8011b36:	4b13      	ldr	r3, [pc, #76]	; (8011b84 <__sinit+0x68>)
 8011b38:	4a13      	ldr	r2, [pc, #76]	; (8011b88 <__sinit+0x6c>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b3e:	42a3      	cmp	r3, r4
 8011b40:	bf04      	itt	eq
 8011b42:	2301      	moveq	r3, #1
 8011b44:	61a3      	streq	r3, [r4, #24]
 8011b46:	4620      	mov	r0, r4
 8011b48:	f000 f820 	bl	8011b8c <__sfp>
 8011b4c:	6060      	str	r0, [r4, #4]
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f000 f81c 	bl	8011b8c <__sfp>
 8011b54:	60a0      	str	r0, [r4, #8]
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 f818 	bl	8011b8c <__sfp>
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	60e0      	str	r0, [r4, #12]
 8011b60:	2104      	movs	r1, #4
 8011b62:	6860      	ldr	r0, [r4, #4]
 8011b64:	f7ff ff82 	bl	8011a6c <std>
 8011b68:	68a0      	ldr	r0, [r4, #8]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	2109      	movs	r1, #9
 8011b6e:	f7ff ff7d 	bl	8011a6c <std>
 8011b72:	68e0      	ldr	r0, [r4, #12]
 8011b74:	2202      	movs	r2, #2
 8011b76:	2112      	movs	r1, #18
 8011b78:	f7ff ff78 	bl	8011a6c <std>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	61a3      	str	r3, [r4, #24]
 8011b80:	e7d2      	b.n	8011b28 <__sinit+0xc>
 8011b82:	bf00      	nop
 8011b84:	080131fc 	.word	0x080131fc
 8011b88:	08011ab5 	.word	0x08011ab5

08011b8c <__sfp>:
 8011b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8e:	4607      	mov	r7, r0
 8011b90:	f7ff ffac 	bl	8011aec <__sfp_lock_acquire>
 8011b94:	4b1e      	ldr	r3, [pc, #120]	; (8011c10 <__sfp+0x84>)
 8011b96:	681e      	ldr	r6, [r3, #0]
 8011b98:	69b3      	ldr	r3, [r6, #24]
 8011b9a:	b913      	cbnz	r3, 8011ba2 <__sfp+0x16>
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	f7ff ffbd 	bl	8011b1c <__sinit>
 8011ba2:	3648      	adds	r6, #72	; 0x48
 8011ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	d503      	bpl.n	8011bb4 <__sfp+0x28>
 8011bac:	6833      	ldr	r3, [r6, #0]
 8011bae:	b30b      	cbz	r3, 8011bf4 <__sfp+0x68>
 8011bb0:	6836      	ldr	r6, [r6, #0]
 8011bb2:	e7f7      	b.n	8011ba4 <__sfp+0x18>
 8011bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011bb8:	b9d5      	cbnz	r5, 8011bf0 <__sfp+0x64>
 8011bba:	4b16      	ldr	r3, [pc, #88]	; (8011c14 <__sfp+0x88>)
 8011bbc:	60e3      	str	r3, [r4, #12]
 8011bbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011bc2:	6665      	str	r5, [r4, #100]	; 0x64
 8011bc4:	f000 f85e 	bl	8011c84 <__retarget_lock_init_recursive>
 8011bc8:	f7ff ff96 	bl	8011af8 <__sfp_lock_release>
 8011bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011bd4:	6025      	str	r5, [r4, #0]
 8011bd6:	61a5      	str	r5, [r4, #24]
 8011bd8:	2208      	movs	r2, #8
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011be0:	f7fe fafc 	bl	80101dc <memset>
 8011be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011bec:	4620      	mov	r0, r4
 8011bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bf0:	3468      	adds	r4, #104	; 0x68
 8011bf2:	e7d9      	b.n	8011ba8 <__sfp+0x1c>
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	4638      	mov	r0, r7
 8011bf8:	f7ff ff62 	bl	8011ac0 <__sfmoreglue>
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	6030      	str	r0, [r6, #0]
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1d5      	bne.n	8011bb0 <__sfp+0x24>
 8011c04:	f7ff ff78 	bl	8011af8 <__sfp_lock_release>
 8011c08:	230c      	movs	r3, #12
 8011c0a:	603b      	str	r3, [r7, #0]
 8011c0c:	e7ee      	b.n	8011bec <__sfp+0x60>
 8011c0e:	bf00      	nop
 8011c10:	080131fc 	.word	0x080131fc
 8011c14:	ffff0001 	.word	0xffff0001

08011c18 <fiprintf>:
 8011c18:	b40e      	push	{r1, r2, r3}
 8011c1a:	b503      	push	{r0, r1, lr}
 8011c1c:	4601      	mov	r1, r0
 8011c1e:	ab03      	add	r3, sp, #12
 8011c20:	4805      	ldr	r0, [pc, #20]	; (8011c38 <fiprintf+0x20>)
 8011c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c26:	6800      	ldr	r0, [r0, #0]
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	f000 fd6d 	bl	8012708 <_vfiprintf_r>
 8011c2e:	b002      	add	sp, #8
 8011c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c34:	b003      	add	sp, #12
 8011c36:	4770      	bx	lr
 8011c38:	20000184 	.word	0x20000184

08011c3c <_fwalk_reent>:
 8011c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c40:	4606      	mov	r6, r0
 8011c42:	4688      	mov	r8, r1
 8011c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c48:	2700      	movs	r7, #0
 8011c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8011c52:	d505      	bpl.n	8011c60 <_fwalk_reent+0x24>
 8011c54:	6824      	ldr	r4, [r4, #0]
 8011c56:	2c00      	cmp	r4, #0
 8011c58:	d1f7      	bne.n	8011c4a <_fwalk_reent+0xe>
 8011c5a:	4638      	mov	r0, r7
 8011c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c60:	89ab      	ldrh	r3, [r5, #12]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d907      	bls.n	8011c76 <_fwalk_reent+0x3a>
 8011c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	d003      	beq.n	8011c76 <_fwalk_reent+0x3a>
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4630      	mov	r0, r6
 8011c72:	47c0      	blx	r8
 8011c74:	4307      	orrs	r7, r0
 8011c76:	3568      	adds	r5, #104	; 0x68
 8011c78:	e7e9      	b.n	8011c4e <_fwalk_reent+0x12>
	...

08011c7c <_localeconv_r>:
 8011c7c:	4800      	ldr	r0, [pc, #0]	; (8011c80 <_localeconv_r+0x4>)
 8011c7e:	4770      	bx	lr
 8011c80:	200002d8 	.word	0x200002d8

08011c84 <__retarget_lock_init_recursive>:
 8011c84:	4770      	bx	lr

08011c86 <__retarget_lock_acquire_recursive>:
 8011c86:	4770      	bx	lr

08011c88 <__retarget_lock_release_recursive>:
 8011c88:	4770      	bx	lr

08011c8a <__ascii_mbtowc>:
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	b901      	cbnz	r1, 8011c90 <__ascii_mbtowc+0x6>
 8011c8e:	a901      	add	r1, sp, #4
 8011c90:	b142      	cbz	r2, 8011ca4 <__ascii_mbtowc+0x1a>
 8011c92:	b14b      	cbz	r3, 8011ca8 <__ascii_mbtowc+0x1e>
 8011c94:	7813      	ldrb	r3, [r2, #0]
 8011c96:	600b      	str	r3, [r1, #0]
 8011c98:	7812      	ldrb	r2, [r2, #0]
 8011c9a:	1e10      	subs	r0, r2, #0
 8011c9c:	bf18      	it	ne
 8011c9e:	2001      	movne	r0, #1
 8011ca0:	b002      	add	sp, #8
 8011ca2:	4770      	bx	lr
 8011ca4:	4610      	mov	r0, r2
 8011ca6:	e7fb      	b.n	8011ca0 <__ascii_mbtowc+0x16>
 8011ca8:	f06f 0001 	mvn.w	r0, #1
 8011cac:	e7f8      	b.n	8011ca0 <__ascii_mbtowc+0x16>
	...

08011cb0 <__malloc_lock>:
 8011cb0:	4801      	ldr	r0, [pc, #4]	; (8011cb8 <__malloc_lock+0x8>)
 8011cb2:	f7ff bfe8 	b.w	8011c86 <__retarget_lock_acquire_recursive>
 8011cb6:	bf00      	nop
 8011cb8:	200028dc 	.word	0x200028dc

08011cbc <__malloc_unlock>:
 8011cbc:	4801      	ldr	r0, [pc, #4]	; (8011cc4 <__malloc_unlock+0x8>)
 8011cbe:	f7ff bfe3 	b.w	8011c88 <__retarget_lock_release_recursive>
 8011cc2:	bf00      	nop
 8011cc4:	200028dc 	.word	0x200028dc

08011cc8 <_Balloc>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ccc:	4604      	mov	r4, r0
 8011cce:	460d      	mov	r5, r1
 8011cd0:	b976      	cbnz	r6, 8011cf0 <_Balloc+0x28>
 8011cd2:	2010      	movs	r0, #16
 8011cd4:	f7fe fa6c 	bl	80101b0 <malloc>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	6260      	str	r0, [r4, #36]	; 0x24
 8011cdc:	b920      	cbnz	r0, 8011ce8 <_Balloc+0x20>
 8011cde:	4b18      	ldr	r3, [pc, #96]	; (8011d40 <_Balloc+0x78>)
 8011ce0:	4818      	ldr	r0, [pc, #96]	; (8011d44 <_Balloc+0x7c>)
 8011ce2:	2166      	movs	r1, #102	; 0x66
 8011ce4:	f7ff f828 	bl	8010d38 <__assert_func>
 8011ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cec:	6006      	str	r6, [r0, #0]
 8011cee:	60c6      	str	r6, [r0, #12]
 8011cf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cf2:	68f3      	ldr	r3, [r6, #12]
 8011cf4:	b183      	cbz	r3, 8011d18 <_Balloc+0x50>
 8011cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cfe:	b9b8      	cbnz	r0, 8011d30 <_Balloc+0x68>
 8011d00:	2101      	movs	r1, #1
 8011d02:	fa01 f605 	lsl.w	r6, r1, r5
 8011d06:	1d72      	adds	r2, r6, #5
 8011d08:	0092      	lsls	r2, r2, #2
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fb60 	bl	80123d0 <_calloc_r>
 8011d10:	b160      	cbz	r0, 8011d2c <_Balloc+0x64>
 8011d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d16:	e00e      	b.n	8011d36 <_Balloc+0x6e>
 8011d18:	2221      	movs	r2, #33	; 0x21
 8011d1a:	2104      	movs	r1, #4
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f000 fb57 	bl	80123d0 <_calloc_r>
 8011d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d24:	60f0      	str	r0, [r6, #12]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e4      	bne.n	8011cf6 <_Balloc+0x2e>
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	6802      	ldr	r2, [r0, #0]
 8011d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d36:	2300      	movs	r3, #0
 8011d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d3c:	e7f7      	b.n	8011d2e <_Balloc+0x66>
 8011d3e:	bf00      	nop
 8011d40:	0801337e 	.word	0x0801337e
 8011d44:	0801346e 	.word	0x0801346e

08011d48 <_Bfree>:
 8011d48:	b570      	push	{r4, r5, r6, lr}
 8011d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	460c      	mov	r4, r1
 8011d50:	b976      	cbnz	r6, 8011d70 <_Bfree+0x28>
 8011d52:	2010      	movs	r0, #16
 8011d54:	f7fe fa2c 	bl	80101b0 <malloc>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	6268      	str	r0, [r5, #36]	; 0x24
 8011d5c:	b920      	cbnz	r0, 8011d68 <_Bfree+0x20>
 8011d5e:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <_Bfree+0x3c>)
 8011d60:	4809      	ldr	r0, [pc, #36]	; (8011d88 <_Bfree+0x40>)
 8011d62:	218a      	movs	r1, #138	; 0x8a
 8011d64:	f7fe ffe8 	bl	8010d38 <__assert_func>
 8011d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d6c:	6006      	str	r6, [r0, #0]
 8011d6e:	60c6      	str	r6, [r0, #12]
 8011d70:	b13c      	cbz	r4, 8011d82 <_Bfree+0x3a>
 8011d72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d74:	6862      	ldr	r2, [r4, #4]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d7c:	6021      	str	r1, [r4, #0]
 8011d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d82:	bd70      	pop	{r4, r5, r6, pc}
 8011d84:	0801337e 	.word	0x0801337e
 8011d88:	0801346e 	.word	0x0801346e

08011d8c <__multadd>:
 8011d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d90:	690d      	ldr	r5, [r1, #16]
 8011d92:	4607      	mov	r7, r0
 8011d94:	460c      	mov	r4, r1
 8011d96:	461e      	mov	r6, r3
 8011d98:	f101 0c14 	add.w	ip, r1, #20
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8011da2:	b299      	uxth	r1, r3
 8011da4:	fb02 6101 	mla	r1, r2, r1, r6
 8011da8:	0c1e      	lsrs	r6, r3, #16
 8011daa:	0c0b      	lsrs	r3, r1, #16
 8011dac:	fb02 3306 	mla	r3, r2, r6, r3
 8011db0:	b289      	uxth	r1, r1
 8011db2:	3001      	adds	r0, #1
 8011db4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011db8:	4285      	cmp	r5, r0
 8011dba:	f84c 1b04 	str.w	r1, [ip], #4
 8011dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011dc2:	dcec      	bgt.n	8011d9e <__multadd+0x12>
 8011dc4:	b30e      	cbz	r6, 8011e0a <__multadd+0x7e>
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	42ab      	cmp	r3, r5
 8011dca:	dc19      	bgt.n	8011e00 <__multadd+0x74>
 8011dcc:	6861      	ldr	r1, [r4, #4]
 8011dce:	4638      	mov	r0, r7
 8011dd0:	3101      	adds	r1, #1
 8011dd2:	f7ff ff79 	bl	8011cc8 <_Balloc>
 8011dd6:	4680      	mov	r8, r0
 8011dd8:	b928      	cbnz	r0, 8011de6 <__multadd+0x5a>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	4b0c      	ldr	r3, [pc, #48]	; (8011e10 <__multadd+0x84>)
 8011dde:	480d      	ldr	r0, [pc, #52]	; (8011e14 <__multadd+0x88>)
 8011de0:	21b5      	movs	r1, #181	; 0xb5
 8011de2:	f7fe ffa9 	bl	8010d38 <__assert_func>
 8011de6:	6922      	ldr	r2, [r4, #16]
 8011de8:	3202      	adds	r2, #2
 8011dea:	f104 010c 	add.w	r1, r4, #12
 8011dee:	0092      	lsls	r2, r2, #2
 8011df0:	300c      	adds	r0, #12
 8011df2:	f7fe f9e5 	bl	80101c0 <memcpy>
 8011df6:	4621      	mov	r1, r4
 8011df8:	4638      	mov	r0, r7
 8011dfa:	f7ff ffa5 	bl	8011d48 <_Bfree>
 8011dfe:	4644      	mov	r4, r8
 8011e00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e04:	3501      	adds	r5, #1
 8011e06:	615e      	str	r6, [r3, #20]
 8011e08:	6125      	str	r5, [r4, #16]
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e10:	080133f0 	.word	0x080133f0
 8011e14:	0801346e 	.word	0x0801346e

08011e18 <__hi0bits>:
 8011e18:	0c03      	lsrs	r3, r0, #16
 8011e1a:	041b      	lsls	r3, r3, #16
 8011e1c:	b9d3      	cbnz	r3, 8011e54 <__hi0bits+0x3c>
 8011e1e:	0400      	lsls	r0, r0, #16
 8011e20:	2310      	movs	r3, #16
 8011e22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e26:	bf04      	itt	eq
 8011e28:	0200      	lsleq	r0, r0, #8
 8011e2a:	3308      	addeq	r3, #8
 8011e2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e30:	bf04      	itt	eq
 8011e32:	0100      	lsleq	r0, r0, #4
 8011e34:	3304      	addeq	r3, #4
 8011e36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e3a:	bf04      	itt	eq
 8011e3c:	0080      	lsleq	r0, r0, #2
 8011e3e:	3302      	addeq	r3, #2
 8011e40:	2800      	cmp	r0, #0
 8011e42:	db05      	blt.n	8011e50 <__hi0bits+0x38>
 8011e44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e48:	f103 0301 	add.w	r3, r3, #1
 8011e4c:	bf08      	it	eq
 8011e4e:	2320      	moveq	r3, #32
 8011e50:	4618      	mov	r0, r3
 8011e52:	4770      	bx	lr
 8011e54:	2300      	movs	r3, #0
 8011e56:	e7e4      	b.n	8011e22 <__hi0bits+0xa>

08011e58 <__lo0bits>:
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	f013 0207 	ands.w	r2, r3, #7
 8011e5e:	4601      	mov	r1, r0
 8011e60:	d00b      	beq.n	8011e7a <__lo0bits+0x22>
 8011e62:	07da      	lsls	r2, r3, #31
 8011e64:	d423      	bmi.n	8011eae <__lo0bits+0x56>
 8011e66:	0798      	lsls	r0, r3, #30
 8011e68:	bf49      	itett	mi
 8011e6a:	085b      	lsrmi	r3, r3, #1
 8011e6c:	089b      	lsrpl	r3, r3, #2
 8011e6e:	2001      	movmi	r0, #1
 8011e70:	600b      	strmi	r3, [r1, #0]
 8011e72:	bf5c      	itt	pl
 8011e74:	600b      	strpl	r3, [r1, #0]
 8011e76:	2002      	movpl	r0, #2
 8011e78:	4770      	bx	lr
 8011e7a:	b298      	uxth	r0, r3
 8011e7c:	b9a8      	cbnz	r0, 8011eaa <__lo0bits+0x52>
 8011e7e:	0c1b      	lsrs	r3, r3, #16
 8011e80:	2010      	movs	r0, #16
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	b90a      	cbnz	r2, 8011e8a <__lo0bits+0x32>
 8011e86:	3008      	adds	r0, #8
 8011e88:	0a1b      	lsrs	r3, r3, #8
 8011e8a:	071a      	lsls	r2, r3, #28
 8011e8c:	bf04      	itt	eq
 8011e8e:	091b      	lsreq	r3, r3, #4
 8011e90:	3004      	addeq	r0, #4
 8011e92:	079a      	lsls	r2, r3, #30
 8011e94:	bf04      	itt	eq
 8011e96:	089b      	lsreq	r3, r3, #2
 8011e98:	3002      	addeq	r0, #2
 8011e9a:	07da      	lsls	r2, r3, #31
 8011e9c:	d403      	bmi.n	8011ea6 <__lo0bits+0x4e>
 8011e9e:	085b      	lsrs	r3, r3, #1
 8011ea0:	f100 0001 	add.w	r0, r0, #1
 8011ea4:	d005      	beq.n	8011eb2 <__lo0bits+0x5a>
 8011ea6:	600b      	str	r3, [r1, #0]
 8011ea8:	4770      	bx	lr
 8011eaa:	4610      	mov	r0, r2
 8011eac:	e7e9      	b.n	8011e82 <__lo0bits+0x2a>
 8011eae:	2000      	movs	r0, #0
 8011eb0:	4770      	bx	lr
 8011eb2:	2020      	movs	r0, #32
 8011eb4:	4770      	bx	lr
	...

08011eb8 <__i2b>:
 8011eb8:	b510      	push	{r4, lr}
 8011eba:	460c      	mov	r4, r1
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	f7ff ff03 	bl	8011cc8 <_Balloc>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	b928      	cbnz	r0, 8011ed2 <__i2b+0x1a>
 8011ec6:	4b05      	ldr	r3, [pc, #20]	; (8011edc <__i2b+0x24>)
 8011ec8:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <__i2b+0x28>)
 8011eca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ece:	f7fe ff33 	bl	8010d38 <__assert_func>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	6144      	str	r4, [r0, #20]
 8011ed6:	6103      	str	r3, [r0, #16]
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	080133f0 	.word	0x080133f0
 8011ee0:	0801346e 	.word	0x0801346e

08011ee4 <__multiply>:
 8011ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee8:	4691      	mov	r9, r2
 8011eea:	690a      	ldr	r2, [r1, #16]
 8011eec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	bfb8      	it	lt
 8011ef4:	460b      	movlt	r3, r1
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	bfbc      	itt	lt
 8011efa:	464c      	movlt	r4, r9
 8011efc:	4699      	movlt	r9, r3
 8011efe:	6927      	ldr	r7, [r4, #16]
 8011f00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f04:	68a3      	ldr	r3, [r4, #8]
 8011f06:	6861      	ldr	r1, [r4, #4]
 8011f08:	eb07 060a 	add.w	r6, r7, sl
 8011f0c:	42b3      	cmp	r3, r6
 8011f0e:	b085      	sub	sp, #20
 8011f10:	bfb8      	it	lt
 8011f12:	3101      	addlt	r1, #1
 8011f14:	f7ff fed8 	bl	8011cc8 <_Balloc>
 8011f18:	b930      	cbnz	r0, 8011f28 <__multiply+0x44>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	4b44      	ldr	r3, [pc, #272]	; (8012030 <__multiply+0x14c>)
 8011f1e:	4845      	ldr	r0, [pc, #276]	; (8012034 <__multiply+0x150>)
 8011f20:	f240 115d 	movw	r1, #349	; 0x15d
 8011f24:	f7fe ff08 	bl	8010d38 <__assert_func>
 8011f28:	f100 0514 	add.w	r5, r0, #20
 8011f2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f30:	462b      	mov	r3, r5
 8011f32:	2200      	movs	r2, #0
 8011f34:	4543      	cmp	r3, r8
 8011f36:	d321      	bcc.n	8011f7c <__multiply+0x98>
 8011f38:	f104 0314 	add.w	r3, r4, #20
 8011f3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f40:	f109 0314 	add.w	r3, r9, #20
 8011f44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f48:	9202      	str	r2, [sp, #8]
 8011f4a:	1b3a      	subs	r2, r7, r4
 8011f4c:	3a15      	subs	r2, #21
 8011f4e:	f022 0203 	bic.w	r2, r2, #3
 8011f52:	3204      	adds	r2, #4
 8011f54:	f104 0115 	add.w	r1, r4, #21
 8011f58:	428f      	cmp	r7, r1
 8011f5a:	bf38      	it	cc
 8011f5c:	2204      	movcc	r2, #4
 8011f5e:	9201      	str	r2, [sp, #4]
 8011f60:	9a02      	ldr	r2, [sp, #8]
 8011f62:	9303      	str	r3, [sp, #12]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d80c      	bhi.n	8011f82 <__multiply+0x9e>
 8011f68:	2e00      	cmp	r6, #0
 8011f6a:	dd03      	ble.n	8011f74 <__multiply+0x90>
 8011f6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d05a      	beq.n	801202a <__multiply+0x146>
 8011f74:	6106      	str	r6, [r0, #16]
 8011f76:	b005      	add	sp, #20
 8011f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7c:	f843 2b04 	str.w	r2, [r3], #4
 8011f80:	e7d8      	b.n	8011f34 <__multiply+0x50>
 8011f82:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f86:	f1ba 0f00 	cmp.w	sl, #0
 8011f8a:	d024      	beq.n	8011fd6 <__multiply+0xf2>
 8011f8c:	f104 0e14 	add.w	lr, r4, #20
 8011f90:	46a9      	mov	r9, r5
 8011f92:	f04f 0c00 	mov.w	ip, #0
 8011f96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f9a:	f8d9 1000 	ldr.w	r1, [r9]
 8011f9e:	fa1f fb82 	uxth.w	fp, r2
 8011fa2:	b289      	uxth	r1, r1
 8011fa4:	fb0a 110b 	mla	r1, sl, fp, r1
 8011fa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011fac:	f8d9 2000 	ldr.w	r2, [r9]
 8011fb0:	4461      	add	r1, ip
 8011fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8011fba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011fbe:	b289      	uxth	r1, r1
 8011fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011fc4:	4577      	cmp	r7, lr
 8011fc6:	f849 1b04 	str.w	r1, [r9], #4
 8011fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fce:	d8e2      	bhi.n	8011f96 <__multiply+0xb2>
 8011fd0:	9a01      	ldr	r2, [sp, #4]
 8011fd2:	f845 c002 	str.w	ip, [r5, r2]
 8011fd6:	9a03      	ldr	r2, [sp, #12]
 8011fd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	f1b9 0f00 	cmp.w	r9, #0
 8011fe2:	d020      	beq.n	8012026 <__multiply+0x142>
 8011fe4:	6829      	ldr	r1, [r5, #0]
 8011fe6:	f104 0c14 	add.w	ip, r4, #20
 8011fea:	46ae      	mov	lr, r5
 8011fec:	f04f 0a00 	mov.w	sl, #0
 8011ff0:	f8bc b000 	ldrh.w	fp, [ip]
 8011ff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ff8:	fb09 220b 	mla	r2, r9, fp, r2
 8011ffc:	4492      	add	sl, r2
 8011ffe:	b289      	uxth	r1, r1
 8012000:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012004:	f84e 1b04 	str.w	r1, [lr], #4
 8012008:	f85c 2b04 	ldr.w	r2, [ip], #4
 801200c:	f8be 1000 	ldrh.w	r1, [lr]
 8012010:	0c12      	lsrs	r2, r2, #16
 8012012:	fb09 1102 	mla	r1, r9, r2, r1
 8012016:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801201a:	4567      	cmp	r7, ip
 801201c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012020:	d8e6      	bhi.n	8011ff0 <__multiply+0x10c>
 8012022:	9a01      	ldr	r2, [sp, #4]
 8012024:	50a9      	str	r1, [r5, r2]
 8012026:	3504      	adds	r5, #4
 8012028:	e79a      	b.n	8011f60 <__multiply+0x7c>
 801202a:	3e01      	subs	r6, #1
 801202c:	e79c      	b.n	8011f68 <__multiply+0x84>
 801202e:	bf00      	nop
 8012030:	080133f0 	.word	0x080133f0
 8012034:	0801346e 	.word	0x0801346e

08012038 <__pow5mult>:
 8012038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801203c:	4615      	mov	r5, r2
 801203e:	f012 0203 	ands.w	r2, r2, #3
 8012042:	4606      	mov	r6, r0
 8012044:	460f      	mov	r7, r1
 8012046:	d007      	beq.n	8012058 <__pow5mult+0x20>
 8012048:	4c25      	ldr	r4, [pc, #148]	; (80120e0 <__pow5mult+0xa8>)
 801204a:	3a01      	subs	r2, #1
 801204c:	2300      	movs	r3, #0
 801204e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012052:	f7ff fe9b 	bl	8011d8c <__multadd>
 8012056:	4607      	mov	r7, r0
 8012058:	10ad      	asrs	r5, r5, #2
 801205a:	d03d      	beq.n	80120d8 <__pow5mult+0xa0>
 801205c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801205e:	b97c      	cbnz	r4, 8012080 <__pow5mult+0x48>
 8012060:	2010      	movs	r0, #16
 8012062:	f7fe f8a5 	bl	80101b0 <malloc>
 8012066:	4602      	mov	r2, r0
 8012068:	6270      	str	r0, [r6, #36]	; 0x24
 801206a:	b928      	cbnz	r0, 8012078 <__pow5mult+0x40>
 801206c:	4b1d      	ldr	r3, [pc, #116]	; (80120e4 <__pow5mult+0xac>)
 801206e:	481e      	ldr	r0, [pc, #120]	; (80120e8 <__pow5mult+0xb0>)
 8012070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012074:	f7fe fe60 	bl	8010d38 <__assert_func>
 8012078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801207c:	6004      	str	r4, [r0, #0]
 801207e:	60c4      	str	r4, [r0, #12]
 8012080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012088:	b94c      	cbnz	r4, 801209e <__pow5mult+0x66>
 801208a:	f240 2171 	movw	r1, #625	; 0x271
 801208e:	4630      	mov	r0, r6
 8012090:	f7ff ff12 	bl	8011eb8 <__i2b>
 8012094:	2300      	movs	r3, #0
 8012096:	f8c8 0008 	str.w	r0, [r8, #8]
 801209a:	4604      	mov	r4, r0
 801209c:	6003      	str	r3, [r0, #0]
 801209e:	f04f 0900 	mov.w	r9, #0
 80120a2:	07eb      	lsls	r3, r5, #31
 80120a4:	d50a      	bpl.n	80120bc <__pow5mult+0x84>
 80120a6:	4639      	mov	r1, r7
 80120a8:	4622      	mov	r2, r4
 80120aa:	4630      	mov	r0, r6
 80120ac:	f7ff ff1a 	bl	8011ee4 <__multiply>
 80120b0:	4639      	mov	r1, r7
 80120b2:	4680      	mov	r8, r0
 80120b4:	4630      	mov	r0, r6
 80120b6:	f7ff fe47 	bl	8011d48 <_Bfree>
 80120ba:	4647      	mov	r7, r8
 80120bc:	106d      	asrs	r5, r5, #1
 80120be:	d00b      	beq.n	80120d8 <__pow5mult+0xa0>
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	b938      	cbnz	r0, 80120d4 <__pow5mult+0x9c>
 80120c4:	4622      	mov	r2, r4
 80120c6:	4621      	mov	r1, r4
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7ff ff0b 	bl	8011ee4 <__multiply>
 80120ce:	6020      	str	r0, [r4, #0]
 80120d0:	f8c0 9000 	str.w	r9, [r0]
 80120d4:	4604      	mov	r4, r0
 80120d6:	e7e4      	b.n	80120a2 <__pow5mult+0x6a>
 80120d8:	4638      	mov	r0, r7
 80120da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120de:	bf00      	nop
 80120e0:	080135c0 	.word	0x080135c0
 80120e4:	0801337e 	.word	0x0801337e
 80120e8:	0801346e 	.word	0x0801346e

080120ec <__lshift>:
 80120ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120f0:	460c      	mov	r4, r1
 80120f2:	6849      	ldr	r1, [r1, #4]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	4607      	mov	r7, r0
 80120fe:	4691      	mov	r9, r2
 8012100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012104:	f108 0601 	add.w	r6, r8, #1
 8012108:	42b3      	cmp	r3, r6
 801210a:	db0b      	blt.n	8012124 <__lshift+0x38>
 801210c:	4638      	mov	r0, r7
 801210e:	f7ff fddb 	bl	8011cc8 <_Balloc>
 8012112:	4605      	mov	r5, r0
 8012114:	b948      	cbnz	r0, 801212a <__lshift+0x3e>
 8012116:	4602      	mov	r2, r0
 8012118:	4b2a      	ldr	r3, [pc, #168]	; (80121c4 <__lshift+0xd8>)
 801211a:	482b      	ldr	r0, [pc, #172]	; (80121c8 <__lshift+0xdc>)
 801211c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012120:	f7fe fe0a 	bl	8010d38 <__assert_func>
 8012124:	3101      	adds	r1, #1
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	e7ee      	b.n	8012108 <__lshift+0x1c>
 801212a:	2300      	movs	r3, #0
 801212c:	f100 0114 	add.w	r1, r0, #20
 8012130:	f100 0210 	add.w	r2, r0, #16
 8012134:	4618      	mov	r0, r3
 8012136:	4553      	cmp	r3, sl
 8012138:	db37      	blt.n	80121aa <__lshift+0xbe>
 801213a:	6920      	ldr	r0, [r4, #16]
 801213c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012140:	f104 0314 	add.w	r3, r4, #20
 8012144:	f019 091f 	ands.w	r9, r9, #31
 8012148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801214c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012150:	d02f      	beq.n	80121b2 <__lshift+0xc6>
 8012152:	f1c9 0e20 	rsb	lr, r9, #32
 8012156:	468a      	mov	sl, r1
 8012158:	f04f 0c00 	mov.w	ip, #0
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	fa02 f209 	lsl.w	r2, r2, r9
 8012162:	ea42 020c 	orr.w	r2, r2, ip
 8012166:	f84a 2b04 	str.w	r2, [sl], #4
 801216a:	f853 2b04 	ldr.w	r2, [r3], #4
 801216e:	4298      	cmp	r0, r3
 8012170:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012174:	d8f2      	bhi.n	801215c <__lshift+0x70>
 8012176:	1b03      	subs	r3, r0, r4
 8012178:	3b15      	subs	r3, #21
 801217a:	f023 0303 	bic.w	r3, r3, #3
 801217e:	3304      	adds	r3, #4
 8012180:	f104 0215 	add.w	r2, r4, #21
 8012184:	4290      	cmp	r0, r2
 8012186:	bf38      	it	cc
 8012188:	2304      	movcc	r3, #4
 801218a:	f841 c003 	str.w	ip, [r1, r3]
 801218e:	f1bc 0f00 	cmp.w	ip, #0
 8012192:	d001      	beq.n	8012198 <__lshift+0xac>
 8012194:	f108 0602 	add.w	r6, r8, #2
 8012198:	3e01      	subs	r6, #1
 801219a:	4638      	mov	r0, r7
 801219c:	612e      	str	r6, [r5, #16]
 801219e:	4621      	mov	r1, r4
 80121a0:	f7ff fdd2 	bl	8011d48 <_Bfree>
 80121a4:	4628      	mov	r0, r5
 80121a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80121ae:	3301      	adds	r3, #1
 80121b0:	e7c1      	b.n	8012136 <__lshift+0x4a>
 80121b2:	3904      	subs	r1, #4
 80121b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80121b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80121bc:	4298      	cmp	r0, r3
 80121be:	d8f9      	bhi.n	80121b4 <__lshift+0xc8>
 80121c0:	e7ea      	b.n	8012198 <__lshift+0xac>
 80121c2:	bf00      	nop
 80121c4:	080133f0 	.word	0x080133f0
 80121c8:	0801346e 	.word	0x0801346e

080121cc <__mcmp>:
 80121cc:	b530      	push	{r4, r5, lr}
 80121ce:	6902      	ldr	r2, [r0, #16]
 80121d0:	690c      	ldr	r4, [r1, #16]
 80121d2:	1b12      	subs	r2, r2, r4
 80121d4:	d10e      	bne.n	80121f4 <__mcmp+0x28>
 80121d6:	f100 0314 	add.w	r3, r0, #20
 80121da:	3114      	adds	r1, #20
 80121dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80121e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80121e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80121e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80121ec:	42a5      	cmp	r5, r4
 80121ee:	d003      	beq.n	80121f8 <__mcmp+0x2c>
 80121f0:	d305      	bcc.n	80121fe <__mcmp+0x32>
 80121f2:	2201      	movs	r2, #1
 80121f4:	4610      	mov	r0, r2
 80121f6:	bd30      	pop	{r4, r5, pc}
 80121f8:	4283      	cmp	r3, r0
 80121fa:	d3f3      	bcc.n	80121e4 <__mcmp+0x18>
 80121fc:	e7fa      	b.n	80121f4 <__mcmp+0x28>
 80121fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012202:	e7f7      	b.n	80121f4 <__mcmp+0x28>

08012204 <__mdiff>:
 8012204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	460c      	mov	r4, r1
 801220a:	4606      	mov	r6, r0
 801220c:	4611      	mov	r1, r2
 801220e:	4620      	mov	r0, r4
 8012210:	4690      	mov	r8, r2
 8012212:	f7ff ffdb 	bl	80121cc <__mcmp>
 8012216:	1e05      	subs	r5, r0, #0
 8012218:	d110      	bne.n	801223c <__mdiff+0x38>
 801221a:	4629      	mov	r1, r5
 801221c:	4630      	mov	r0, r6
 801221e:	f7ff fd53 	bl	8011cc8 <_Balloc>
 8012222:	b930      	cbnz	r0, 8012232 <__mdiff+0x2e>
 8012224:	4b3a      	ldr	r3, [pc, #232]	; (8012310 <__mdiff+0x10c>)
 8012226:	4602      	mov	r2, r0
 8012228:	f240 2132 	movw	r1, #562	; 0x232
 801222c:	4839      	ldr	r0, [pc, #228]	; (8012314 <__mdiff+0x110>)
 801222e:	f7fe fd83 	bl	8010d38 <__assert_func>
 8012232:	2301      	movs	r3, #1
 8012234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223c:	bfa4      	itt	ge
 801223e:	4643      	movge	r3, r8
 8012240:	46a0      	movge	r8, r4
 8012242:	4630      	mov	r0, r6
 8012244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012248:	bfa6      	itte	ge
 801224a:	461c      	movge	r4, r3
 801224c:	2500      	movge	r5, #0
 801224e:	2501      	movlt	r5, #1
 8012250:	f7ff fd3a 	bl	8011cc8 <_Balloc>
 8012254:	b920      	cbnz	r0, 8012260 <__mdiff+0x5c>
 8012256:	4b2e      	ldr	r3, [pc, #184]	; (8012310 <__mdiff+0x10c>)
 8012258:	4602      	mov	r2, r0
 801225a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801225e:	e7e5      	b.n	801222c <__mdiff+0x28>
 8012260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012264:	6926      	ldr	r6, [r4, #16]
 8012266:	60c5      	str	r5, [r0, #12]
 8012268:	f104 0914 	add.w	r9, r4, #20
 801226c:	f108 0514 	add.w	r5, r8, #20
 8012270:	f100 0e14 	add.w	lr, r0, #20
 8012274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801227c:	f108 0210 	add.w	r2, r8, #16
 8012280:	46f2      	mov	sl, lr
 8012282:	2100      	movs	r1, #0
 8012284:	f859 3b04 	ldr.w	r3, [r9], #4
 8012288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801228c:	fa1f f883 	uxth.w	r8, r3
 8012290:	fa11 f18b 	uxtah	r1, r1, fp
 8012294:	0c1b      	lsrs	r3, r3, #16
 8012296:	eba1 0808 	sub.w	r8, r1, r8
 801229a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801229e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80122a2:	fa1f f888 	uxth.w	r8, r8
 80122a6:	1419      	asrs	r1, r3, #16
 80122a8:	454e      	cmp	r6, r9
 80122aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80122ae:	f84a 3b04 	str.w	r3, [sl], #4
 80122b2:	d8e7      	bhi.n	8012284 <__mdiff+0x80>
 80122b4:	1b33      	subs	r3, r6, r4
 80122b6:	3b15      	subs	r3, #21
 80122b8:	f023 0303 	bic.w	r3, r3, #3
 80122bc:	3304      	adds	r3, #4
 80122be:	3415      	adds	r4, #21
 80122c0:	42a6      	cmp	r6, r4
 80122c2:	bf38      	it	cc
 80122c4:	2304      	movcc	r3, #4
 80122c6:	441d      	add	r5, r3
 80122c8:	4473      	add	r3, lr
 80122ca:	469e      	mov	lr, r3
 80122cc:	462e      	mov	r6, r5
 80122ce:	4566      	cmp	r6, ip
 80122d0:	d30e      	bcc.n	80122f0 <__mdiff+0xec>
 80122d2:	f10c 0203 	add.w	r2, ip, #3
 80122d6:	1b52      	subs	r2, r2, r5
 80122d8:	f022 0203 	bic.w	r2, r2, #3
 80122dc:	3d03      	subs	r5, #3
 80122de:	45ac      	cmp	ip, r5
 80122e0:	bf38      	it	cc
 80122e2:	2200      	movcc	r2, #0
 80122e4:	441a      	add	r2, r3
 80122e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80122ea:	b17b      	cbz	r3, 801230c <__mdiff+0x108>
 80122ec:	6107      	str	r7, [r0, #16]
 80122ee:	e7a3      	b.n	8012238 <__mdiff+0x34>
 80122f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80122f4:	fa11 f288 	uxtah	r2, r1, r8
 80122f8:	1414      	asrs	r4, r2, #16
 80122fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80122fe:	b292      	uxth	r2, r2
 8012300:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012304:	f84e 2b04 	str.w	r2, [lr], #4
 8012308:	1421      	asrs	r1, r4, #16
 801230a:	e7e0      	b.n	80122ce <__mdiff+0xca>
 801230c:	3f01      	subs	r7, #1
 801230e:	e7ea      	b.n	80122e6 <__mdiff+0xe2>
 8012310:	080133f0 	.word	0x080133f0
 8012314:	0801346e 	.word	0x0801346e

08012318 <__d2b>:
 8012318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801231c:	4689      	mov	r9, r1
 801231e:	2101      	movs	r1, #1
 8012320:	ec57 6b10 	vmov	r6, r7, d0
 8012324:	4690      	mov	r8, r2
 8012326:	f7ff fccf 	bl	8011cc8 <_Balloc>
 801232a:	4604      	mov	r4, r0
 801232c:	b930      	cbnz	r0, 801233c <__d2b+0x24>
 801232e:	4602      	mov	r2, r0
 8012330:	4b25      	ldr	r3, [pc, #148]	; (80123c8 <__d2b+0xb0>)
 8012332:	4826      	ldr	r0, [pc, #152]	; (80123cc <__d2b+0xb4>)
 8012334:	f240 310a 	movw	r1, #778	; 0x30a
 8012338:	f7fe fcfe 	bl	8010d38 <__assert_func>
 801233c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012344:	bb35      	cbnz	r5, 8012394 <__d2b+0x7c>
 8012346:	2e00      	cmp	r6, #0
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	d028      	beq.n	801239e <__d2b+0x86>
 801234c:	4668      	mov	r0, sp
 801234e:	9600      	str	r6, [sp, #0]
 8012350:	f7ff fd82 	bl	8011e58 <__lo0bits>
 8012354:	9900      	ldr	r1, [sp, #0]
 8012356:	b300      	cbz	r0, 801239a <__d2b+0x82>
 8012358:	9a01      	ldr	r2, [sp, #4]
 801235a:	f1c0 0320 	rsb	r3, r0, #32
 801235e:	fa02 f303 	lsl.w	r3, r2, r3
 8012362:	430b      	orrs	r3, r1
 8012364:	40c2      	lsrs	r2, r0
 8012366:	6163      	str	r3, [r4, #20]
 8012368:	9201      	str	r2, [sp, #4]
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	61a3      	str	r3, [r4, #24]
 801236e:	2b00      	cmp	r3, #0
 8012370:	bf14      	ite	ne
 8012372:	2202      	movne	r2, #2
 8012374:	2201      	moveq	r2, #1
 8012376:	6122      	str	r2, [r4, #16]
 8012378:	b1d5      	cbz	r5, 80123b0 <__d2b+0x98>
 801237a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801237e:	4405      	add	r5, r0
 8012380:	f8c9 5000 	str.w	r5, [r9]
 8012384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012388:	f8c8 0000 	str.w	r0, [r8]
 801238c:	4620      	mov	r0, r4
 801238e:	b003      	add	sp, #12
 8012390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012398:	e7d5      	b.n	8012346 <__d2b+0x2e>
 801239a:	6161      	str	r1, [r4, #20]
 801239c:	e7e5      	b.n	801236a <__d2b+0x52>
 801239e:	a801      	add	r0, sp, #4
 80123a0:	f7ff fd5a 	bl	8011e58 <__lo0bits>
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	6163      	str	r3, [r4, #20]
 80123a8:	2201      	movs	r2, #1
 80123aa:	6122      	str	r2, [r4, #16]
 80123ac:	3020      	adds	r0, #32
 80123ae:	e7e3      	b.n	8012378 <__d2b+0x60>
 80123b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80123b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80123b8:	f8c9 0000 	str.w	r0, [r9]
 80123bc:	6918      	ldr	r0, [r3, #16]
 80123be:	f7ff fd2b 	bl	8011e18 <__hi0bits>
 80123c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80123c6:	e7df      	b.n	8012388 <__d2b+0x70>
 80123c8:	080133f0 	.word	0x080133f0
 80123cc:	0801346e 	.word	0x0801346e

080123d0 <_calloc_r>:
 80123d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123d2:	fba1 2402 	umull	r2, r4, r1, r2
 80123d6:	b94c      	cbnz	r4, 80123ec <_calloc_r+0x1c>
 80123d8:	4611      	mov	r1, r2
 80123da:	9201      	str	r2, [sp, #4]
 80123dc:	f7fd ff72 	bl	80102c4 <_malloc_r>
 80123e0:	9a01      	ldr	r2, [sp, #4]
 80123e2:	4605      	mov	r5, r0
 80123e4:	b930      	cbnz	r0, 80123f4 <_calloc_r+0x24>
 80123e6:	4628      	mov	r0, r5
 80123e8:	b003      	add	sp, #12
 80123ea:	bd30      	pop	{r4, r5, pc}
 80123ec:	220c      	movs	r2, #12
 80123ee:	6002      	str	r2, [r0, #0]
 80123f0:	2500      	movs	r5, #0
 80123f2:	e7f8      	b.n	80123e6 <_calloc_r+0x16>
 80123f4:	4621      	mov	r1, r4
 80123f6:	f7fd fef1 	bl	80101dc <memset>
 80123fa:	e7f4      	b.n	80123e6 <_calloc_r+0x16>

080123fc <__ssputs_r>:
 80123fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012400:	688e      	ldr	r6, [r1, #8]
 8012402:	429e      	cmp	r6, r3
 8012404:	4682      	mov	sl, r0
 8012406:	460c      	mov	r4, r1
 8012408:	4690      	mov	r8, r2
 801240a:	461f      	mov	r7, r3
 801240c:	d838      	bhi.n	8012480 <__ssputs_r+0x84>
 801240e:	898a      	ldrh	r2, [r1, #12]
 8012410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012414:	d032      	beq.n	801247c <__ssputs_r+0x80>
 8012416:	6825      	ldr	r5, [r4, #0]
 8012418:	6909      	ldr	r1, [r1, #16]
 801241a:	eba5 0901 	sub.w	r9, r5, r1
 801241e:	6965      	ldr	r5, [r4, #20]
 8012420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012428:	3301      	adds	r3, #1
 801242a:	444b      	add	r3, r9
 801242c:	106d      	asrs	r5, r5, #1
 801242e:	429d      	cmp	r5, r3
 8012430:	bf38      	it	cc
 8012432:	461d      	movcc	r5, r3
 8012434:	0553      	lsls	r3, r2, #21
 8012436:	d531      	bpl.n	801249c <__ssputs_r+0xa0>
 8012438:	4629      	mov	r1, r5
 801243a:	f7fd ff43 	bl	80102c4 <_malloc_r>
 801243e:	4606      	mov	r6, r0
 8012440:	b950      	cbnz	r0, 8012458 <__ssputs_r+0x5c>
 8012442:	230c      	movs	r3, #12
 8012444:	f8ca 3000 	str.w	r3, [sl]
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801244e:	81a3      	strh	r3, [r4, #12]
 8012450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012458:	6921      	ldr	r1, [r4, #16]
 801245a:	464a      	mov	r2, r9
 801245c:	f7fd feb0 	bl	80101c0 <memcpy>
 8012460:	89a3      	ldrh	r3, [r4, #12]
 8012462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801246a:	81a3      	strh	r3, [r4, #12]
 801246c:	6126      	str	r6, [r4, #16]
 801246e:	6165      	str	r5, [r4, #20]
 8012470:	444e      	add	r6, r9
 8012472:	eba5 0509 	sub.w	r5, r5, r9
 8012476:	6026      	str	r6, [r4, #0]
 8012478:	60a5      	str	r5, [r4, #8]
 801247a:	463e      	mov	r6, r7
 801247c:	42be      	cmp	r6, r7
 801247e:	d900      	bls.n	8012482 <__ssputs_r+0x86>
 8012480:	463e      	mov	r6, r7
 8012482:	6820      	ldr	r0, [r4, #0]
 8012484:	4632      	mov	r2, r6
 8012486:	4641      	mov	r1, r8
 8012488:	f000 fce4 	bl	8012e54 <memmove>
 801248c:	68a3      	ldr	r3, [r4, #8]
 801248e:	1b9b      	subs	r3, r3, r6
 8012490:	60a3      	str	r3, [r4, #8]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	4433      	add	r3, r6
 8012496:	6023      	str	r3, [r4, #0]
 8012498:	2000      	movs	r0, #0
 801249a:	e7db      	b.n	8012454 <__ssputs_r+0x58>
 801249c:	462a      	mov	r2, r5
 801249e:	f000 fcf3 	bl	8012e88 <_realloc_r>
 80124a2:	4606      	mov	r6, r0
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d1e1      	bne.n	801246c <__ssputs_r+0x70>
 80124a8:	6921      	ldr	r1, [r4, #16]
 80124aa:	4650      	mov	r0, sl
 80124ac:	f7fd fe9e 	bl	80101ec <_free_r>
 80124b0:	e7c7      	b.n	8012442 <__ssputs_r+0x46>
	...

080124b4 <_svfiprintf_r>:
 80124b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	4698      	mov	r8, r3
 80124ba:	898b      	ldrh	r3, [r1, #12]
 80124bc:	061b      	lsls	r3, r3, #24
 80124be:	b09d      	sub	sp, #116	; 0x74
 80124c0:	4607      	mov	r7, r0
 80124c2:	460d      	mov	r5, r1
 80124c4:	4614      	mov	r4, r2
 80124c6:	d50e      	bpl.n	80124e6 <_svfiprintf_r+0x32>
 80124c8:	690b      	ldr	r3, [r1, #16]
 80124ca:	b963      	cbnz	r3, 80124e6 <_svfiprintf_r+0x32>
 80124cc:	2140      	movs	r1, #64	; 0x40
 80124ce:	f7fd fef9 	bl	80102c4 <_malloc_r>
 80124d2:	6028      	str	r0, [r5, #0]
 80124d4:	6128      	str	r0, [r5, #16]
 80124d6:	b920      	cbnz	r0, 80124e2 <_svfiprintf_r+0x2e>
 80124d8:	230c      	movs	r3, #12
 80124da:	603b      	str	r3, [r7, #0]
 80124dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124e0:	e0d1      	b.n	8012686 <_svfiprintf_r+0x1d2>
 80124e2:	2340      	movs	r3, #64	; 0x40
 80124e4:	616b      	str	r3, [r5, #20]
 80124e6:	2300      	movs	r3, #0
 80124e8:	9309      	str	r3, [sp, #36]	; 0x24
 80124ea:	2320      	movs	r3, #32
 80124ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80124f4:	2330      	movs	r3, #48	; 0x30
 80124f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80126a0 <_svfiprintf_r+0x1ec>
 80124fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124fe:	f04f 0901 	mov.w	r9, #1
 8012502:	4623      	mov	r3, r4
 8012504:	469a      	mov	sl, r3
 8012506:	f813 2b01 	ldrb.w	r2, [r3], #1
 801250a:	b10a      	cbz	r2, 8012510 <_svfiprintf_r+0x5c>
 801250c:	2a25      	cmp	r2, #37	; 0x25
 801250e:	d1f9      	bne.n	8012504 <_svfiprintf_r+0x50>
 8012510:	ebba 0b04 	subs.w	fp, sl, r4
 8012514:	d00b      	beq.n	801252e <_svfiprintf_r+0x7a>
 8012516:	465b      	mov	r3, fp
 8012518:	4622      	mov	r2, r4
 801251a:	4629      	mov	r1, r5
 801251c:	4638      	mov	r0, r7
 801251e:	f7ff ff6d 	bl	80123fc <__ssputs_r>
 8012522:	3001      	adds	r0, #1
 8012524:	f000 80aa 	beq.w	801267c <_svfiprintf_r+0x1c8>
 8012528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801252a:	445a      	add	r2, fp
 801252c:	9209      	str	r2, [sp, #36]	; 0x24
 801252e:	f89a 3000 	ldrb.w	r3, [sl]
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 80a2 	beq.w	801267c <_svfiprintf_r+0x1c8>
 8012538:	2300      	movs	r3, #0
 801253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801253e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012542:	f10a 0a01 	add.w	sl, sl, #1
 8012546:	9304      	str	r3, [sp, #16]
 8012548:	9307      	str	r3, [sp, #28]
 801254a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801254e:	931a      	str	r3, [sp, #104]	; 0x68
 8012550:	4654      	mov	r4, sl
 8012552:	2205      	movs	r2, #5
 8012554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012558:	4851      	ldr	r0, [pc, #324]	; (80126a0 <_svfiprintf_r+0x1ec>)
 801255a:	f7ed fe59 	bl	8000210 <memchr>
 801255e:	9a04      	ldr	r2, [sp, #16]
 8012560:	b9d8      	cbnz	r0, 801259a <_svfiprintf_r+0xe6>
 8012562:	06d0      	lsls	r0, r2, #27
 8012564:	bf44      	itt	mi
 8012566:	2320      	movmi	r3, #32
 8012568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801256c:	0711      	lsls	r1, r2, #28
 801256e:	bf44      	itt	mi
 8012570:	232b      	movmi	r3, #43	; 0x2b
 8012572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012576:	f89a 3000 	ldrb.w	r3, [sl]
 801257a:	2b2a      	cmp	r3, #42	; 0x2a
 801257c:	d015      	beq.n	80125aa <_svfiprintf_r+0xf6>
 801257e:	9a07      	ldr	r2, [sp, #28]
 8012580:	4654      	mov	r4, sl
 8012582:	2000      	movs	r0, #0
 8012584:	f04f 0c0a 	mov.w	ip, #10
 8012588:	4621      	mov	r1, r4
 801258a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801258e:	3b30      	subs	r3, #48	; 0x30
 8012590:	2b09      	cmp	r3, #9
 8012592:	d94e      	bls.n	8012632 <_svfiprintf_r+0x17e>
 8012594:	b1b0      	cbz	r0, 80125c4 <_svfiprintf_r+0x110>
 8012596:	9207      	str	r2, [sp, #28]
 8012598:	e014      	b.n	80125c4 <_svfiprintf_r+0x110>
 801259a:	eba0 0308 	sub.w	r3, r0, r8
 801259e:	fa09 f303 	lsl.w	r3, r9, r3
 80125a2:	4313      	orrs	r3, r2
 80125a4:	9304      	str	r3, [sp, #16]
 80125a6:	46a2      	mov	sl, r4
 80125a8:	e7d2      	b.n	8012550 <_svfiprintf_r+0x9c>
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	1d19      	adds	r1, r3, #4
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	9103      	str	r1, [sp, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	bfbb      	ittet	lt
 80125b6:	425b      	neglt	r3, r3
 80125b8:	f042 0202 	orrlt.w	r2, r2, #2
 80125bc:	9307      	strge	r3, [sp, #28]
 80125be:	9307      	strlt	r3, [sp, #28]
 80125c0:	bfb8      	it	lt
 80125c2:	9204      	strlt	r2, [sp, #16]
 80125c4:	7823      	ldrb	r3, [r4, #0]
 80125c6:	2b2e      	cmp	r3, #46	; 0x2e
 80125c8:	d10c      	bne.n	80125e4 <_svfiprintf_r+0x130>
 80125ca:	7863      	ldrb	r3, [r4, #1]
 80125cc:	2b2a      	cmp	r3, #42	; 0x2a
 80125ce:	d135      	bne.n	801263c <_svfiprintf_r+0x188>
 80125d0:	9b03      	ldr	r3, [sp, #12]
 80125d2:	1d1a      	adds	r2, r3, #4
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	9203      	str	r2, [sp, #12]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	bfb8      	it	lt
 80125dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80125e0:	3402      	adds	r4, #2
 80125e2:	9305      	str	r3, [sp, #20]
 80125e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80126b0 <_svfiprintf_r+0x1fc>
 80125e8:	7821      	ldrb	r1, [r4, #0]
 80125ea:	2203      	movs	r2, #3
 80125ec:	4650      	mov	r0, sl
 80125ee:	f7ed fe0f 	bl	8000210 <memchr>
 80125f2:	b140      	cbz	r0, 8012606 <_svfiprintf_r+0x152>
 80125f4:	2340      	movs	r3, #64	; 0x40
 80125f6:	eba0 000a 	sub.w	r0, r0, sl
 80125fa:	fa03 f000 	lsl.w	r0, r3, r0
 80125fe:	9b04      	ldr	r3, [sp, #16]
 8012600:	4303      	orrs	r3, r0
 8012602:	3401      	adds	r4, #1
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801260a:	4826      	ldr	r0, [pc, #152]	; (80126a4 <_svfiprintf_r+0x1f0>)
 801260c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012610:	2206      	movs	r2, #6
 8012612:	f7ed fdfd 	bl	8000210 <memchr>
 8012616:	2800      	cmp	r0, #0
 8012618:	d038      	beq.n	801268c <_svfiprintf_r+0x1d8>
 801261a:	4b23      	ldr	r3, [pc, #140]	; (80126a8 <_svfiprintf_r+0x1f4>)
 801261c:	bb1b      	cbnz	r3, 8012666 <_svfiprintf_r+0x1b2>
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	3307      	adds	r3, #7
 8012622:	f023 0307 	bic.w	r3, r3, #7
 8012626:	3308      	adds	r3, #8
 8012628:	9303      	str	r3, [sp, #12]
 801262a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801262c:	4433      	add	r3, r6
 801262e:	9309      	str	r3, [sp, #36]	; 0x24
 8012630:	e767      	b.n	8012502 <_svfiprintf_r+0x4e>
 8012632:	fb0c 3202 	mla	r2, ip, r2, r3
 8012636:	460c      	mov	r4, r1
 8012638:	2001      	movs	r0, #1
 801263a:	e7a5      	b.n	8012588 <_svfiprintf_r+0xd4>
 801263c:	2300      	movs	r3, #0
 801263e:	3401      	adds	r4, #1
 8012640:	9305      	str	r3, [sp, #20]
 8012642:	4619      	mov	r1, r3
 8012644:	f04f 0c0a 	mov.w	ip, #10
 8012648:	4620      	mov	r0, r4
 801264a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801264e:	3a30      	subs	r2, #48	; 0x30
 8012650:	2a09      	cmp	r2, #9
 8012652:	d903      	bls.n	801265c <_svfiprintf_r+0x1a8>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0c5      	beq.n	80125e4 <_svfiprintf_r+0x130>
 8012658:	9105      	str	r1, [sp, #20]
 801265a:	e7c3      	b.n	80125e4 <_svfiprintf_r+0x130>
 801265c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012660:	4604      	mov	r4, r0
 8012662:	2301      	movs	r3, #1
 8012664:	e7f0      	b.n	8012648 <_svfiprintf_r+0x194>
 8012666:	ab03      	add	r3, sp, #12
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	462a      	mov	r2, r5
 801266c:	4b0f      	ldr	r3, [pc, #60]	; (80126ac <_svfiprintf_r+0x1f8>)
 801266e:	a904      	add	r1, sp, #16
 8012670:	4638      	mov	r0, r7
 8012672:	f7fd ff3b 	bl	80104ec <_printf_float>
 8012676:	1c42      	adds	r2, r0, #1
 8012678:	4606      	mov	r6, r0
 801267a:	d1d6      	bne.n	801262a <_svfiprintf_r+0x176>
 801267c:	89ab      	ldrh	r3, [r5, #12]
 801267e:	065b      	lsls	r3, r3, #25
 8012680:	f53f af2c 	bmi.w	80124dc <_svfiprintf_r+0x28>
 8012684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012686:	b01d      	add	sp, #116	; 0x74
 8012688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268c:	ab03      	add	r3, sp, #12
 801268e:	9300      	str	r3, [sp, #0]
 8012690:	462a      	mov	r2, r5
 8012692:	4b06      	ldr	r3, [pc, #24]	; (80126ac <_svfiprintf_r+0x1f8>)
 8012694:	a904      	add	r1, sp, #16
 8012696:	4638      	mov	r0, r7
 8012698:	f7fe f9cc 	bl	8010a34 <_printf_i>
 801269c:	e7eb      	b.n	8012676 <_svfiprintf_r+0x1c2>
 801269e:	bf00      	nop
 80126a0:	080135cc 	.word	0x080135cc
 80126a4:	080135d6 	.word	0x080135d6
 80126a8:	080104ed 	.word	0x080104ed
 80126ac:	080123fd 	.word	0x080123fd
 80126b0:	080135d2 	.word	0x080135d2

080126b4 <__sfputc_r>:
 80126b4:	6893      	ldr	r3, [r2, #8]
 80126b6:	3b01      	subs	r3, #1
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	b410      	push	{r4}
 80126bc:	6093      	str	r3, [r2, #8]
 80126be:	da08      	bge.n	80126d2 <__sfputc_r+0x1e>
 80126c0:	6994      	ldr	r4, [r2, #24]
 80126c2:	42a3      	cmp	r3, r4
 80126c4:	db01      	blt.n	80126ca <__sfputc_r+0x16>
 80126c6:	290a      	cmp	r1, #10
 80126c8:	d103      	bne.n	80126d2 <__sfputc_r+0x1e>
 80126ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ce:	f000 b98f 	b.w	80129f0 <__swbuf_r>
 80126d2:	6813      	ldr	r3, [r2, #0]
 80126d4:	1c58      	adds	r0, r3, #1
 80126d6:	6010      	str	r0, [r2, #0]
 80126d8:	7019      	strb	r1, [r3, #0]
 80126da:	4608      	mov	r0, r1
 80126dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <__sfputs_r>:
 80126e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e4:	4606      	mov	r6, r0
 80126e6:	460f      	mov	r7, r1
 80126e8:	4614      	mov	r4, r2
 80126ea:	18d5      	adds	r5, r2, r3
 80126ec:	42ac      	cmp	r4, r5
 80126ee:	d101      	bne.n	80126f4 <__sfputs_r+0x12>
 80126f0:	2000      	movs	r0, #0
 80126f2:	e007      	b.n	8012704 <__sfputs_r+0x22>
 80126f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126f8:	463a      	mov	r2, r7
 80126fa:	4630      	mov	r0, r6
 80126fc:	f7ff ffda 	bl	80126b4 <__sfputc_r>
 8012700:	1c43      	adds	r3, r0, #1
 8012702:	d1f3      	bne.n	80126ec <__sfputs_r+0xa>
 8012704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012708 <_vfiprintf_r>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	460d      	mov	r5, r1
 801270e:	b09d      	sub	sp, #116	; 0x74
 8012710:	4614      	mov	r4, r2
 8012712:	4698      	mov	r8, r3
 8012714:	4606      	mov	r6, r0
 8012716:	b118      	cbz	r0, 8012720 <_vfiprintf_r+0x18>
 8012718:	6983      	ldr	r3, [r0, #24]
 801271a:	b90b      	cbnz	r3, 8012720 <_vfiprintf_r+0x18>
 801271c:	f7ff f9fe 	bl	8011b1c <__sinit>
 8012720:	4b89      	ldr	r3, [pc, #548]	; (8012948 <_vfiprintf_r+0x240>)
 8012722:	429d      	cmp	r5, r3
 8012724:	d11b      	bne.n	801275e <_vfiprintf_r+0x56>
 8012726:	6875      	ldr	r5, [r6, #4]
 8012728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801272a:	07d9      	lsls	r1, r3, #31
 801272c:	d405      	bmi.n	801273a <_vfiprintf_r+0x32>
 801272e:	89ab      	ldrh	r3, [r5, #12]
 8012730:	059a      	lsls	r2, r3, #22
 8012732:	d402      	bmi.n	801273a <_vfiprintf_r+0x32>
 8012734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012736:	f7ff faa6 	bl	8011c86 <__retarget_lock_acquire_recursive>
 801273a:	89ab      	ldrh	r3, [r5, #12]
 801273c:	071b      	lsls	r3, r3, #28
 801273e:	d501      	bpl.n	8012744 <_vfiprintf_r+0x3c>
 8012740:	692b      	ldr	r3, [r5, #16]
 8012742:	b9eb      	cbnz	r3, 8012780 <_vfiprintf_r+0x78>
 8012744:	4629      	mov	r1, r5
 8012746:	4630      	mov	r0, r6
 8012748:	f000 f9c4 	bl	8012ad4 <__swsetup_r>
 801274c:	b1c0      	cbz	r0, 8012780 <_vfiprintf_r+0x78>
 801274e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012750:	07dc      	lsls	r4, r3, #31
 8012752:	d50e      	bpl.n	8012772 <_vfiprintf_r+0x6a>
 8012754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012758:	b01d      	add	sp, #116	; 0x74
 801275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275e:	4b7b      	ldr	r3, [pc, #492]	; (801294c <_vfiprintf_r+0x244>)
 8012760:	429d      	cmp	r5, r3
 8012762:	d101      	bne.n	8012768 <_vfiprintf_r+0x60>
 8012764:	68b5      	ldr	r5, [r6, #8]
 8012766:	e7df      	b.n	8012728 <_vfiprintf_r+0x20>
 8012768:	4b79      	ldr	r3, [pc, #484]	; (8012950 <_vfiprintf_r+0x248>)
 801276a:	429d      	cmp	r5, r3
 801276c:	bf08      	it	eq
 801276e:	68f5      	ldreq	r5, [r6, #12]
 8012770:	e7da      	b.n	8012728 <_vfiprintf_r+0x20>
 8012772:	89ab      	ldrh	r3, [r5, #12]
 8012774:	0598      	lsls	r0, r3, #22
 8012776:	d4ed      	bmi.n	8012754 <_vfiprintf_r+0x4c>
 8012778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801277a:	f7ff fa85 	bl	8011c88 <__retarget_lock_release_recursive>
 801277e:	e7e9      	b.n	8012754 <_vfiprintf_r+0x4c>
 8012780:	2300      	movs	r3, #0
 8012782:	9309      	str	r3, [sp, #36]	; 0x24
 8012784:	2320      	movs	r3, #32
 8012786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801278a:	f8cd 800c 	str.w	r8, [sp, #12]
 801278e:	2330      	movs	r3, #48	; 0x30
 8012790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012954 <_vfiprintf_r+0x24c>
 8012794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012798:	f04f 0901 	mov.w	r9, #1
 801279c:	4623      	mov	r3, r4
 801279e:	469a      	mov	sl, r3
 80127a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a4:	b10a      	cbz	r2, 80127aa <_vfiprintf_r+0xa2>
 80127a6:	2a25      	cmp	r2, #37	; 0x25
 80127a8:	d1f9      	bne.n	801279e <_vfiprintf_r+0x96>
 80127aa:	ebba 0b04 	subs.w	fp, sl, r4
 80127ae:	d00b      	beq.n	80127c8 <_vfiprintf_r+0xc0>
 80127b0:	465b      	mov	r3, fp
 80127b2:	4622      	mov	r2, r4
 80127b4:	4629      	mov	r1, r5
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ff ff93 	bl	80126e2 <__sfputs_r>
 80127bc:	3001      	adds	r0, #1
 80127be:	f000 80aa 	beq.w	8012916 <_vfiprintf_r+0x20e>
 80127c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127c4:	445a      	add	r2, fp
 80127c6:	9209      	str	r2, [sp, #36]	; 0x24
 80127c8:	f89a 3000 	ldrb.w	r3, [sl]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 80a2 	beq.w	8012916 <_vfiprintf_r+0x20e>
 80127d2:	2300      	movs	r3, #0
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127dc:	f10a 0a01 	add.w	sl, sl, #1
 80127e0:	9304      	str	r3, [sp, #16]
 80127e2:	9307      	str	r3, [sp, #28]
 80127e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127e8:	931a      	str	r3, [sp, #104]	; 0x68
 80127ea:	4654      	mov	r4, sl
 80127ec:	2205      	movs	r2, #5
 80127ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f2:	4858      	ldr	r0, [pc, #352]	; (8012954 <_vfiprintf_r+0x24c>)
 80127f4:	f7ed fd0c 	bl	8000210 <memchr>
 80127f8:	9a04      	ldr	r2, [sp, #16]
 80127fa:	b9d8      	cbnz	r0, 8012834 <_vfiprintf_r+0x12c>
 80127fc:	06d1      	lsls	r1, r2, #27
 80127fe:	bf44      	itt	mi
 8012800:	2320      	movmi	r3, #32
 8012802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012806:	0713      	lsls	r3, r2, #28
 8012808:	bf44      	itt	mi
 801280a:	232b      	movmi	r3, #43	; 0x2b
 801280c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012810:	f89a 3000 	ldrb.w	r3, [sl]
 8012814:	2b2a      	cmp	r3, #42	; 0x2a
 8012816:	d015      	beq.n	8012844 <_vfiprintf_r+0x13c>
 8012818:	9a07      	ldr	r2, [sp, #28]
 801281a:	4654      	mov	r4, sl
 801281c:	2000      	movs	r0, #0
 801281e:	f04f 0c0a 	mov.w	ip, #10
 8012822:	4621      	mov	r1, r4
 8012824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012828:	3b30      	subs	r3, #48	; 0x30
 801282a:	2b09      	cmp	r3, #9
 801282c:	d94e      	bls.n	80128cc <_vfiprintf_r+0x1c4>
 801282e:	b1b0      	cbz	r0, 801285e <_vfiprintf_r+0x156>
 8012830:	9207      	str	r2, [sp, #28]
 8012832:	e014      	b.n	801285e <_vfiprintf_r+0x156>
 8012834:	eba0 0308 	sub.w	r3, r0, r8
 8012838:	fa09 f303 	lsl.w	r3, r9, r3
 801283c:	4313      	orrs	r3, r2
 801283e:	9304      	str	r3, [sp, #16]
 8012840:	46a2      	mov	sl, r4
 8012842:	e7d2      	b.n	80127ea <_vfiprintf_r+0xe2>
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	1d19      	adds	r1, r3, #4
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	9103      	str	r1, [sp, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	bfbb      	ittet	lt
 8012850:	425b      	neglt	r3, r3
 8012852:	f042 0202 	orrlt.w	r2, r2, #2
 8012856:	9307      	strge	r3, [sp, #28]
 8012858:	9307      	strlt	r3, [sp, #28]
 801285a:	bfb8      	it	lt
 801285c:	9204      	strlt	r2, [sp, #16]
 801285e:	7823      	ldrb	r3, [r4, #0]
 8012860:	2b2e      	cmp	r3, #46	; 0x2e
 8012862:	d10c      	bne.n	801287e <_vfiprintf_r+0x176>
 8012864:	7863      	ldrb	r3, [r4, #1]
 8012866:	2b2a      	cmp	r3, #42	; 0x2a
 8012868:	d135      	bne.n	80128d6 <_vfiprintf_r+0x1ce>
 801286a:	9b03      	ldr	r3, [sp, #12]
 801286c:	1d1a      	adds	r2, r3, #4
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	9203      	str	r2, [sp, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	bfb8      	it	lt
 8012876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801287a:	3402      	adds	r4, #2
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012964 <_vfiprintf_r+0x25c>
 8012882:	7821      	ldrb	r1, [r4, #0]
 8012884:	2203      	movs	r2, #3
 8012886:	4650      	mov	r0, sl
 8012888:	f7ed fcc2 	bl	8000210 <memchr>
 801288c:	b140      	cbz	r0, 80128a0 <_vfiprintf_r+0x198>
 801288e:	2340      	movs	r3, #64	; 0x40
 8012890:	eba0 000a 	sub.w	r0, r0, sl
 8012894:	fa03 f000 	lsl.w	r0, r3, r0
 8012898:	9b04      	ldr	r3, [sp, #16]
 801289a:	4303      	orrs	r3, r0
 801289c:	3401      	adds	r4, #1
 801289e:	9304      	str	r3, [sp, #16]
 80128a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128a4:	482c      	ldr	r0, [pc, #176]	; (8012958 <_vfiprintf_r+0x250>)
 80128a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128aa:	2206      	movs	r2, #6
 80128ac:	f7ed fcb0 	bl	8000210 <memchr>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d03f      	beq.n	8012934 <_vfiprintf_r+0x22c>
 80128b4:	4b29      	ldr	r3, [pc, #164]	; (801295c <_vfiprintf_r+0x254>)
 80128b6:	bb1b      	cbnz	r3, 8012900 <_vfiprintf_r+0x1f8>
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	3307      	adds	r3, #7
 80128bc:	f023 0307 	bic.w	r3, r3, #7
 80128c0:	3308      	adds	r3, #8
 80128c2:	9303      	str	r3, [sp, #12]
 80128c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c6:	443b      	add	r3, r7
 80128c8:	9309      	str	r3, [sp, #36]	; 0x24
 80128ca:	e767      	b.n	801279c <_vfiprintf_r+0x94>
 80128cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80128d0:	460c      	mov	r4, r1
 80128d2:	2001      	movs	r0, #1
 80128d4:	e7a5      	b.n	8012822 <_vfiprintf_r+0x11a>
 80128d6:	2300      	movs	r3, #0
 80128d8:	3401      	adds	r4, #1
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	4619      	mov	r1, r3
 80128de:	f04f 0c0a 	mov.w	ip, #10
 80128e2:	4620      	mov	r0, r4
 80128e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e8:	3a30      	subs	r2, #48	; 0x30
 80128ea:	2a09      	cmp	r2, #9
 80128ec:	d903      	bls.n	80128f6 <_vfiprintf_r+0x1ee>
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0c5      	beq.n	801287e <_vfiprintf_r+0x176>
 80128f2:	9105      	str	r1, [sp, #20]
 80128f4:	e7c3      	b.n	801287e <_vfiprintf_r+0x176>
 80128f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80128fa:	4604      	mov	r4, r0
 80128fc:	2301      	movs	r3, #1
 80128fe:	e7f0      	b.n	80128e2 <_vfiprintf_r+0x1da>
 8012900:	ab03      	add	r3, sp, #12
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	462a      	mov	r2, r5
 8012906:	4b16      	ldr	r3, [pc, #88]	; (8012960 <_vfiprintf_r+0x258>)
 8012908:	a904      	add	r1, sp, #16
 801290a:	4630      	mov	r0, r6
 801290c:	f7fd fdee 	bl	80104ec <_printf_float>
 8012910:	4607      	mov	r7, r0
 8012912:	1c78      	adds	r0, r7, #1
 8012914:	d1d6      	bne.n	80128c4 <_vfiprintf_r+0x1bc>
 8012916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012918:	07d9      	lsls	r1, r3, #31
 801291a:	d405      	bmi.n	8012928 <_vfiprintf_r+0x220>
 801291c:	89ab      	ldrh	r3, [r5, #12]
 801291e:	059a      	lsls	r2, r3, #22
 8012920:	d402      	bmi.n	8012928 <_vfiprintf_r+0x220>
 8012922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012924:	f7ff f9b0 	bl	8011c88 <__retarget_lock_release_recursive>
 8012928:	89ab      	ldrh	r3, [r5, #12]
 801292a:	065b      	lsls	r3, r3, #25
 801292c:	f53f af12 	bmi.w	8012754 <_vfiprintf_r+0x4c>
 8012930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012932:	e711      	b.n	8012758 <_vfiprintf_r+0x50>
 8012934:	ab03      	add	r3, sp, #12
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	462a      	mov	r2, r5
 801293a:	4b09      	ldr	r3, [pc, #36]	; (8012960 <_vfiprintf_r+0x258>)
 801293c:	a904      	add	r1, sp, #16
 801293e:	4630      	mov	r0, r6
 8012940:	f7fe f878 	bl	8010a34 <_printf_i>
 8012944:	e7e4      	b.n	8012910 <_vfiprintf_r+0x208>
 8012946:	bf00      	nop
 8012948:	08013424 	.word	0x08013424
 801294c:	08013444 	.word	0x08013444
 8012950:	08013404 	.word	0x08013404
 8012954:	080135cc 	.word	0x080135cc
 8012958:	080135d6 	.word	0x080135d6
 801295c:	080104ed 	.word	0x080104ed
 8012960:	080126e3 	.word	0x080126e3
 8012964:	080135d2 	.word	0x080135d2

08012968 <__sread>:
 8012968:	b510      	push	{r4, lr}
 801296a:	460c      	mov	r4, r1
 801296c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012970:	f000 faba 	bl	8012ee8 <_read_r>
 8012974:	2800      	cmp	r0, #0
 8012976:	bfab      	itete	ge
 8012978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801297a:	89a3      	ldrhlt	r3, [r4, #12]
 801297c:	181b      	addge	r3, r3, r0
 801297e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012982:	bfac      	ite	ge
 8012984:	6563      	strge	r3, [r4, #84]	; 0x54
 8012986:	81a3      	strhlt	r3, [r4, #12]
 8012988:	bd10      	pop	{r4, pc}

0801298a <__swrite>:
 801298a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801298e:	461f      	mov	r7, r3
 8012990:	898b      	ldrh	r3, [r1, #12]
 8012992:	05db      	lsls	r3, r3, #23
 8012994:	4605      	mov	r5, r0
 8012996:	460c      	mov	r4, r1
 8012998:	4616      	mov	r6, r2
 801299a:	d505      	bpl.n	80129a8 <__swrite+0x1e>
 801299c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129a0:	2302      	movs	r3, #2
 80129a2:	2200      	movs	r2, #0
 80129a4:	f000 f9de 	bl	8012d64 <_lseek_r>
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80129b2:	81a3      	strh	r3, [r4, #12]
 80129b4:	4632      	mov	r2, r6
 80129b6:	463b      	mov	r3, r7
 80129b8:	4628      	mov	r0, r5
 80129ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129be:	f000 b877 	b.w	8012ab0 <_write_r>

080129c2 <__sseek>:
 80129c2:	b510      	push	{r4, lr}
 80129c4:	460c      	mov	r4, r1
 80129c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129ca:	f000 f9cb 	bl	8012d64 <_lseek_r>
 80129ce:	1c43      	adds	r3, r0, #1
 80129d0:	89a3      	ldrh	r3, [r4, #12]
 80129d2:	bf15      	itete	ne
 80129d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80129d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129de:	81a3      	strheq	r3, [r4, #12]
 80129e0:	bf18      	it	ne
 80129e2:	81a3      	strhne	r3, [r4, #12]
 80129e4:	bd10      	pop	{r4, pc}

080129e6 <__sclose>:
 80129e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129ea:	f000 b8e9 	b.w	8012bc0 <_close_r>
	...

080129f0 <__swbuf_r>:
 80129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f2:	460e      	mov	r6, r1
 80129f4:	4614      	mov	r4, r2
 80129f6:	4605      	mov	r5, r0
 80129f8:	b118      	cbz	r0, 8012a02 <__swbuf_r+0x12>
 80129fa:	6983      	ldr	r3, [r0, #24]
 80129fc:	b90b      	cbnz	r3, 8012a02 <__swbuf_r+0x12>
 80129fe:	f7ff f88d 	bl	8011b1c <__sinit>
 8012a02:	4b21      	ldr	r3, [pc, #132]	; (8012a88 <__swbuf_r+0x98>)
 8012a04:	429c      	cmp	r4, r3
 8012a06:	d12b      	bne.n	8012a60 <__swbuf_r+0x70>
 8012a08:	686c      	ldr	r4, [r5, #4]
 8012a0a:	69a3      	ldr	r3, [r4, #24]
 8012a0c:	60a3      	str	r3, [r4, #8]
 8012a0e:	89a3      	ldrh	r3, [r4, #12]
 8012a10:	071a      	lsls	r2, r3, #28
 8012a12:	d52f      	bpl.n	8012a74 <__swbuf_r+0x84>
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	b36b      	cbz	r3, 8012a74 <__swbuf_r+0x84>
 8012a18:	6923      	ldr	r3, [r4, #16]
 8012a1a:	6820      	ldr	r0, [r4, #0]
 8012a1c:	1ac0      	subs	r0, r0, r3
 8012a1e:	6963      	ldr	r3, [r4, #20]
 8012a20:	b2f6      	uxtb	r6, r6
 8012a22:	4283      	cmp	r3, r0
 8012a24:	4637      	mov	r7, r6
 8012a26:	dc04      	bgt.n	8012a32 <__swbuf_r+0x42>
 8012a28:	4621      	mov	r1, r4
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	f000 f95e 	bl	8012cec <_fflush_r>
 8012a30:	bb30      	cbnz	r0, 8012a80 <__swbuf_r+0x90>
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	3b01      	subs	r3, #1
 8012a36:	60a3      	str	r3, [r4, #8]
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	6022      	str	r2, [r4, #0]
 8012a3e:	701e      	strb	r6, [r3, #0]
 8012a40:	6963      	ldr	r3, [r4, #20]
 8012a42:	3001      	adds	r0, #1
 8012a44:	4283      	cmp	r3, r0
 8012a46:	d004      	beq.n	8012a52 <__swbuf_r+0x62>
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	07db      	lsls	r3, r3, #31
 8012a4c:	d506      	bpl.n	8012a5c <__swbuf_r+0x6c>
 8012a4e:	2e0a      	cmp	r6, #10
 8012a50:	d104      	bne.n	8012a5c <__swbuf_r+0x6c>
 8012a52:	4621      	mov	r1, r4
 8012a54:	4628      	mov	r0, r5
 8012a56:	f000 f949 	bl	8012cec <_fflush_r>
 8012a5a:	b988      	cbnz	r0, 8012a80 <__swbuf_r+0x90>
 8012a5c:	4638      	mov	r0, r7
 8012a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a60:	4b0a      	ldr	r3, [pc, #40]	; (8012a8c <__swbuf_r+0x9c>)
 8012a62:	429c      	cmp	r4, r3
 8012a64:	d101      	bne.n	8012a6a <__swbuf_r+0x7a>
 8012a66:	68ac      	ldr	r4, [r5, #8]
 8012a68:	e7cf      	b.n	8012a0a <__swbuf_r+0x1a>
 8012a6a:	4b09      	ldr	r3, [pc, #36]	; (8012a90 <__swbuf_r+0xa0>)
 8012a6c:	429c      	cmp	r4, r3
 8012a6e:	bf08      	it	eq
 8012a70:	68ec      	ldreq	r4, [r5, #12]
 8012a72:	e7ca      	b.n	8012a0a <__swbuf_r+0x1a>
 8012a74:	4621      	mov	r1, r4
 8012a76:	4628      	mov	r0, r5
 8012a78:	f000 f82c 	bl	8012ad4 <__swsetup_r>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	d0cb      	beq.n	8012a18 <__swbuf_r+0x28>
 8012a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a84:	e7ea      	b.n	8012a5c <__swbuf_r+0x6c>
 8012a86:	bf00      	nop
 8012a88:	08013424 	.word	0x08013424
 8012a8c:	08013444 	.word	0x08013444
 8012a90:	08013404 	.word	0x08013404

08012a94 <__ascii_wctomb>:
 8012a94:	b149      	cbz	r1, 8012aaa <__ascii_wctomb+0x16>
 8012a96:	2aff      	cmp	r2, #255	; 0xff
 8012a98:	bf85      	ittet	hi
 8012a9a:	238a      	movhi	r3, #138	; 0x8a
 8012a9c:	6003      	strhi	r3, [r0, #0]
 8012a9e:	700a      	strbls	r2, [r1, #0]
 8012aa0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012aa4:	bf98      	it	ls
 8012aa6:	2001      	movls	r0, #1
 8012aa8:	4770      	bx	lr
 8012aaa:	4608      	mov	r0, r1
 8012aac:	4770      	bx	lr
	...

08012ab0 <_write_r>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	4d07      	ldr	r5, [pc, #28]	; (8012ad0 <_write_r+0x20>)
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	4608      	mov	r0, r1
 8012ab8:	4611      	mov	r1, r2
 8012aba:	2200      	movs	r2, #0
 8012abc:	602a      	str	r2, [r5, #0]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	f000 fad8 	bl	8013074 <_write>
 8012ac4:	1c43      	adds	r3, r0, #1
 8012ac6:	d102      	bne.n	8012ace <_write_r+0x1e>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	b103      	cbz	r3, 8012ace <_write_r+0x1e>
 8012acc:	6023      	str	r3, [r4, #0]
 8012ace:	bd38      	pop	{r3, r4, r5, pc}
 8012ad0:	200028e0 	.word	0x200028e0

08012ad4 <__swsetup_r>:
 8012ad4:	4b32      	ldr	r3, [pc, #200]	; (8012ba0 <__swsetup_r+0xcc>)
 8012ad6:	b570      	push	{r4, r5, r6, lr}
 8012ad8:	681d      	ldr	r5, [r3, #0]
 8012ada:	4606      	mov	r6, r0
 8012adc:	460c      	mov	r4, r1
 8012ade:	b125      	cbz	r5, 8012aea <__swsetup_r+0x16>
 8012ae0:	69ab      	ldr	r3, [r5, #24]
 8012ae2:	b913      	cbnz	r3, 8012aea <__swsetup_r+0x16>
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	f7ff f819 	bl	8011b1c <__sinit>
 8012aea:	4b2e      	ldr	r3, [pc, #184]	; (8012ba4 <__swsetup_r+0xd0>)
 8012aec:	429c      	cmp	r4, r3
 8012aee:	d10f      	bne.n	8012b10 <__swsetup_r+0x3c>
 8012af0:	686c      	ldr	r4, [r5, #4]
 8012af2:	89a3      	ldrh	r3, [r4, #12]
 8012af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012af8:	0719      	lsls	r1, r3, #28
 8012afa:	d42c      	bmi.n	8012b56 <__swsetup_r+0x82>
 8012afc:	06dd      	lsls	r5, r3, #27
 8012afe:	d411      	bmi.n	8012b24 <__swsetup_r+0x50>
 8012b00:	2309      	movs	r3, #9
 8012b02:	6033      	str	r3, [r6, #0]
 8012b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b08:	81a3      	strh	r3, [r4, #12]
 8012b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b0e:	e03e      	b.n	8012b8e <__swsetup_r+0xba>
 8012b10:	4b25      	ldr	r3, [pc, #148]	; (8012ba8 <__swsetup_r+0xd4>)
 8012b12:	429c      	cmp	r4, r3
 8012b14:	d101      	bne.n	8012b1a <__swsetup_r+0x46>
 8012b16:	68ac      	ldr	r4, [r5, #8]
 8012b18:	e7eb      	b.n	8012af2 <__swsetup_r+0x1e>
 8012b1a:	4b24      	ldr	r3, [pc, #144]	; (8012bac <__swsetup_r+0xd8>)
 8012b1c:	429c      	cmp	r4, r3
 8012b1e:	bf08      	it	eq
 8012b20:	68ec      	ldreq	r4, [r5, #12]
 8012b22:	e7e6      	b.n	8012af2 <__swsetup_r+0x1e>
 8012b24:	0758      	lsls	r0, r3, #29
 8012b26:	d512      	bpl.n	8012b4e <__swsetup_r+0x7a>
 8012b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b2a:	b141      	cbz	r1, 8012b3e <__swsetup_r+0x6a>
 8012b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b30:	4299      	cmp	r1, r3
 8012b32:	d002      	beq.n	8012b3a <__swsetup_r+0x66>
 8012b34:	4630      	mov	r0, r6
 8012b36:	f7fd fb59 	bl	80101ec <_free_r>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8012b3e:	89a3      	ldrh	r3, [r4, #12]
 8012b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	2300      	movs	r3, #0
 8012b48:	6063      	str	r3, [r4, #4]
 8012b4a:	6923      	ldr	r3, [r4, #16]
 8012b4c:	6023      	str	r3, [r4, #0]
 8012b4e:	89a3      	ldrh	r3, [r4, #12]
 8012b50:	f043 0308 	orr.w	r3, r3, #8
 8012b54:	81a3      	strh	r3, [r4, #12]
 8012b56:	6923      	ldr	r3, [r4, #16]
 8012b58:	b94b      	cbnz	r3, 8012b6e <__swsetup_r+0x9a>
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b64:	d003      	beq.n	8012b6e <__swsetup_r+0x9a>
 8012b66:	4621      	mov	r1, r4
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f000 f933 	bl	8012dd4 <__smakebuf_r>
 8012b6e:	89a0      	ldrh	r0, [r4, #12]
 8012b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b74:	f010 0301 	ands.w	r3, r0, #1
 8012b78:	d00a      	beq.n	8012b90 <__swsetup_r+0xbc>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	60a3      	str	r3, [r4, #8]
 8012b7e:	6963      	ldr	r3, [r4, #20]
 8012b80:	425b      	negs	r3, r3
 8012b82:	61a3      	str	r3, [r4, #24]
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	b943      	cbnz	r3, 8012b9a <__swsetup_r+0xc6>
 8012b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b8c:	d1ba      	bne.n	8012b04 <__swsetup_r+0x30>
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	0781      	lsls	r1, r0, #30
 8012b92:	bf58      	it	pl
 8012b94:	6963      	ldrpl	r3, [r4, #20]
 8012b96:	60a3      	str	r3, [r4, #8]
 8012b98:	e7f4      	b.n	8012b84 <__swsetup_r+0xb0>
 8012b9a:	2000      	movs	r0, #0
 8012b9c:	e7f7      	b.n	8012b8e <__swsetup_r+0xba>
 8012b9e:	bf00      	nop
 8012ba0:	20000184 	.word	0x20000184
 8012ba4:	08013424 	.word	0x08013424
 8012ba8:	08013444 	.word	0x08013444
 8012bac:	08013404 	.word	0x08013404

08012bb0 <abort>:
 8012bb0:	b508      	push	{r3, lr}
 8012bb2:	2006      	movs	r0, #6
 8012bb4:	f000 f9d2 	bl	8012f5c <raise>
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f000 fa63 	bl	8013084 <_exit>
	...

08012bc0 <_close_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d06      	ldr	r5, [pc, #24]	; (8012bdc <_close_r+0x1c>)
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	602b      	str	r3, [r5, #0]
 8012bcc:	f000 fa0c 	bl	8012fe8 <_close>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	d102      	bne.n	8012bda <_close_r+0x1a>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	b103      	cbz	r3, 8012bda <_close_r+0x1a>
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	bd38      	pop	{r3, r4, r5, pc}
 8012bdc:	200028e0 	.word	0x200028e0

08012be0 <__sflush_r>:
 8012be0:	898a      	ldrh	r2, [r1, #12]
 8012be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be6:	4605      	mov	r5, r0
 8012be8:	0710      	lsls	r0, r2, #28
 8012bea:	460c      	mov	r4, r1
 8012bec:	d458      	bmi.n	8012ca0 <__sflush_r+0xc0>
 8012bee:	684b      	ldr	r3, [r1, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	dc05      	bgt.n	8012c00 <__sflush_r+0x20>
 8012bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	dc02      	bgt.n	8012c00 <__sflush_r+0x20>
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c02:	2e00      	cmp	r6, #0
 8012c04:	d0f9      	beq.n	8012bfa <__sflush_r+0x1a>
 8012c06:	2300      	movs	r3, #0
 8012c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c0c:	682f      	ldr	r7, [r5, #0]
 8012c0e:	602b      	str	r3, [r5, #0]
 8012c10:	d032      	beq.n	8012c78 <__sflush_r+0x98>
 8012c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	075a      	lsls	r2, r3, #29
 8012c18:	d505      	bpl.n	8012c26 <__sflush_r+0x46>
 8012c1a:	6863      	ldr	r3, [r4, #4]
 8012c1c:	1ac0      	subs	r0, r0, r3
 8012c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c20:	b10b      	cbz	r3, 8012c26 <__sflush_r+0x46>
 8012c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c24:	1ac0      	subs	r0, r0, r3
 8012c26:	2300      	movs	r3, #0
 8012c28:	4602      	mov	r2, r0
 8012c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c2c:	6a21      	ldr	r1, [r4, #32]
 8012c2e:	4628      	mov	r0, r5
 8012c30:	47b0      	blx	r6
 8012c32:	1c43      	adds	r3, r0, #1
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	d106      	bne.n	8012c46 <__sflush_r+0x66>
 8012c38:	6829      	ldr	r1, [r5, #0]
 8012c3a:	291d      	cmp	r1, #29
 8012c3c:	d82c      	bhi.n	8012c98 <__sflush_r+0xb8>
 8012c3e:	4a2a      	ldr	r2, [pc, #168]	; (8012ce8 <__sflush_r+0x108>)
 8012c40:	40ca      	lsrs	r2, r1
 8012c42:	07d6      	lsls	r6, r2, #31
 8012c44:	d528      	bpl.n	8012c98 <__sflush_r+0xb8>
 8012c46:	2200      	movs	r2, #0
 8012c48:	6062      	str	r2, [r4, #4]
 8012c4a:	04d9      	lsls	r1, r3, #19
 8012c4c:	6922      	ldr	r2, [r4, #16]
 8012c4e:	6022      	str	r2, [r4, #0]
 8012c50:	d504      	bpl.n	8012c5c <__sflush_r+0x7c>
 8012c52:	1c42      	adds	r2, r0, #1
 8012c54:	d101      	bne.n	8012c5a <__sflush_r+0x7a>
 8012c56:	682b      	ldr	r3, [r5, #0]
 8012c58:	b903      	cbnz	r3, 8012c5c <__sflush_r+0x7c>
 8012c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8012c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c5e:	602f      	str	r7, [r5, #0]
 8012c60:	2900      	cmp	r1, #0
 8012c62:	d0ca      	beq.n	8012bfa <__sflush_r+0x1a>
 8012c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c68:	4299      	cmp	r1, r3
 8012c6a:	d002      	beq.n	8012c72 <__sflush_r+0x92>
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7fd fabd 	bl	80101ec <_free_r>
 8012c72:	2000      	movs	r0, #0
 8012c74:	6360      	str	r0, [r4, #52]	; 0x34
 8012c76:	e7c1      	b.n	8012bfc <__sflush_r+0x1c>
 8012c78:	6a21      	ldr	r1, [r4, #32]
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	47b0      	blx	r6
 8012c80:	1c41      	adds	r1, r0, #1
 8012c82:	d1c7      	bne.n	8012c14 <__sflush_r+0x34>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d0c4      	beq.n	8012c14 <__sflush_r+0x34>
 8012c8a:	2b1d      	cmp	r3, #29
 8012c8c:	d001      	beq.n	8012c92 <__sflush_r+0xb2>
 8012c8e:	2b16      	cmp	r3, #22
 8012c90:	d101      	bne.n	8012c96 <__sflush_r+0xb6>
 8012c92:	602f      	str	r7, [r5, #0]
 8012c94:	e7b1      	b.n	8012bfa <__sflush_r+0x1a>
 8012c96:	89a3      	ldrh	r3, [r4, #12]
 8012c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c9c:	81a3      	strh	r3, [r4, #12]
 8012c9e:	e7ad      	b.n	8012bfc <__sflush_r+0x1c>
 8012ca0:	690f      	ldr	r7, [r1, #16]
 8012ca2:	2f00      	cmp	r7, #0
 8012ca4:	d0a9      	beq.n	8012bfa <__sflush_r+0x1a>
 8012ca6:	0793      	lsls	r3, r2, #30
 8012ca8:	680e      	ldr	r6, [r1, #0]
 8012caa:	bf08      	it	eq
 8012cac:	694b      	ldreq	r3, [r1, #20]
 8012cae:	600f      	str	r7, [r1, #0]
 8012cb0:	bf18      	it	ne
 8012cb2:	2300      	movne	r3, #0
 8012cb4:	eba6 0807 	sub.w	r8, r6, r7
 8012cb8:	608b      	str	r3, [r1, #8]
 8012cba:	f1b8 0f00 	cmp.w	r8, #0
 8012cbe:	dd9c      	ble.n	8012bfa <__sflush_r+0x1a>
 8012cc0:	6a21      	ldr	r1, [r4, #32]
 8012cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cc4:	4643      	mov	r3, r8
 8012cc6:	463a      	mov	r2, r7
 8012cc8:	4628      	mov	r0, r5
 8012cca:	47b0      	blx	r6
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	dc06      	bgt.n	8012cde <__sflush_r+0xfe>
 8012cd0:	89a3      	ldrh	r3, [r4, #12]
 8012cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd6:	81a3      	strh	r3, [r4, #12]
 8012cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cdc:	e78e      	b.n	8012bfc <__sflush_r+0x1c>
 8012cde:	4407      	add	r7, r0
 8012ce0:	eba8 0800 	sub.w	r8, r8, r0
 8012ce4:	e7e9      	b.n	8012cba <__sflush_r+0xda>
 8012ce6:	bf00      	nop
 8012ce8:	20400001 	.word	0x20400001

08012cec <_fflush_r>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	690b      	ldr	r3, [r1, #16]
 8012cf0:	4605      	mov	r5, r0
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	b913      	cbnz	r3, 8012cfc <_fflush_r+0x10>
 8012cf6:	2500      	movs	r5, #0
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	bd38      	pop	{r3, r4, r5, pc}
 8012cfc:	b118      	cbz	r0, 8012d06 <_fflush_r+0x1a>
 8012cfe:	6983      	ldr	r3, [r0, #24]
 8012d00:	b90b      	cbnz	r3, 8012d06 <_fflush_r+0x1a>
 8012d02:	f7fe ff0b 	bl	8011b1c <__sinit>
 8012d06:	4b14      	ldr	r3, [pc, #80]	; (8012d58 <_fflush_r+0x6c>)
 8012d08:	429c      	cmp	r4, r3
 8012d0a:	d11b      	bne.n	8012d44 <_fflush_r+0x58>
 8012d0c:	686c      	ldr	r4, [r5, #4]
 8012d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d0ef      	beq.n	8012cf6 <_fflush_r+0xa>
 8012d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d18:	07d0      	lsls	r0, r2, #31
 8012d1a:	d404      	bmi.n	8012d26 <_fflush_r+0x3a>
 8012d1c:	0599      	lsls	r1, r3, #22
 8012d1e:	d402      	bmi.n	8012d26 <_fflush_r+0x3a>
 8012d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d22:	f7fe ffb0 	bl	8011c86 <__retarget_lock_acquire_recursive>
 8012d26:	4628      	mov	r0, r5
 8012d28:	4621      	mov	r1, r4
 8012d2a:	f7ff ff59 	bl	8012be0 <__sflush_r>
 8012d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d30:	07da      	lsls	r2, r3, #31
 8012d32:	4605      	mov	r5, r0
 8012d34:	d4e0      	bmi.n	8012cf8 <_fflush_r+0xc>
 8012d36:	89a3      	ldrh	r3, [r4, #12]
 8012d38:	059b      	lsls	r3, r3, #22
 8012d3a:	d4dd      	bmi.n	8012cf8 <_fflush_r+0xc>
 8012d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d3e:	f7fe ffa3 	bl	8011c88 <__retarget_lock_release_recursive>
 8012d42:	e7d9      	b.n	8012cf8 <_fflush_r+0xc>
 8012d44:	4b05      	ldr	r3, [pc, #20]	; (8012d5c <_fflush_r+0x70>)
 8012d46:	429c      	cmp	r4, r3
 8012d48:	d101      	bne.n	8012d4e <_fflush_r+0x62>
 8012d4a:	68ac      	ldr	r4, [r5, #8]
 8012d4c:	e7df      	b.n	8012d0e <_fflush_r+0x22>
 8012d4e:	4b04      	ldr	r3, [pc, #16]	; (8012d60 <_fflush_r+0x74>)
 8012d50:	429c      	cmp	r4, r3
 8012d52:	bf08      	it	eq
 8012d54:	68ec      	ldreq	r4, [r5, #12]
 8012d56:	e7da      	b.n	8012d0e <_fflush_r+0x22>
 8012d58:	08013424 	.word	0x08013424
 8012d5c:	08013444 	.word	0x08013444
 8012d60:	08013404 	.word	0x08013404

08012d64 <_lseek_r>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	4d07      	ldr	r5, [pc, #28]	; (8012d84 <_lseek_r+0x20>)
 8012d68:	4604      	mov	r4, r0
 8012d6a:	4608      	mov	r0, r1
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	2200      	movs	r2, #0
 8012d70:	602a      	str	r2, [r5, #0]
 8012d72:	461a      	mov	r2, r3
 8012d74:	f000 f960 	bl	8013038 <_lseek>
 8012d78:	1c43      	adds	r3, r0, #1
 8012d7a:	d102      	bne.n	8012d82 <_lseek_r+0x1e>
 8012d7c:	682b      	ldr	r3, [r5, #0]
 8012d7e:	b103      	cbz	r3, 8012d82 <_lseek_r+0x1e>
 8012d80:	6023      	str	r3, [r4, #0]
 8012d82:	bd38      	pop	{r3, r4, r5, pc}
 8012d84:	200028e0 	.word	0x200028e0

08012d88 <__swhatbuf_r>:
 8012d88:	b570      	push	{r4, r5, r6, lr}
 8012d8a:	460e      	mov	r6, r1
 8012d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d90:	2900      	cmp	r1, #0
 8012d92:	b096      	sub	sp, #88	; 0x58
 8012d94:	4614      	mov	r4, r2
 8012d96:	461d      	mov	r5, r3
 8012d98:	da08      	bge.n	8012dac <__swhatbuf_r+0x24>
 8012d9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	602a      	str	r2, [r5, #0]
 8012da2:	061a      	lsls	r2, r3, #24
 8012da4:	d410      	bmi.n	8012dc8 <__swhatbuf_r+0x40>
 8012da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012daa:	e00e      	b.n	8012dca <__swhatbuf_r+0x42>
 8012dac:	466a      	mov	r2, sp
 8012dae:	f000 f8f1 	bl	8012f94 <_fstat_r>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	dbf1      	blt.n	8012d9a <__swhatbuf_r+0x12>
 8012db6:	9a01      	ldr	r2, [sp, #4]
 8012db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012dc0:	425a      	negs	r2, r3
 8012dc2:	415a      	adcs	r2, r3
 8012dc4:	602a      	str	r2, [r5, #0]
 8012dc6:	e7ee      	b.n	8012da6 <__swhatbuf_r+0x1e>
 8012dc8:	2340      	movs	r3, #64	; 0x40
 8012dca:	2000      	movs	r0, #0
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	b016      	add	sp, #88	; 0x58
 8012dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08012dd4 <__smakebuf_r>:
 8012dd4:	898b      	ldrh	r3, [r1, #12]
 8012dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dd8:	079d      	lsls	r5, r3, #30
 8012dda:	4606      	mov	r6, r0
 8012ddc:	460c      	mov	r4, r1
 8012dde:	d507      	bpl.n	8012df0 <__smakebuf_r+0x1c>
 8012de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012de4:	6023      	str	r3, [r4, #0]
 8012de6:	6123      	str	r3, [r4, #16]
 8012de8:	2301      	movs	r3, #1
 8012dea:	6163      	str	r3, [r4, #20]
 8012dec:	b002      	add	sp, #8
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
 8012df0:	ab01      	add	r3, sp, #4
 8012df2:	466a      	mov	r2, sp
 8012df4:	f7ff ffc8 	bl	8012d88 <__swhatbuf_r>
 8012df8:	9900      	ldr	r1, [sp, #0]
 8012dfa:	4605      	mov	r5, r0
 8012dfc:	4630      	mov	r0, r6
 8012dfe:	f7fd fa61 	bl	80102c4 <_malloc_r>
 8012e02:	b948      	cbnz	r0, 8012e18 <__smakebuf_r+0x44>
 8012e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e08:	059a      	lsls	r2, r3, #22
 8012e0a:	d4ef      	bmi.n	8012dec <__smakebuf_r+0x18>
 8012e0c:	f023 0303 	bic.w	r3, r3, #3
 8012e10:	f043 0302 	orr.w	r3, r3, #2
 8012e14:	81a3      	strh	r3, [r4, #12]
 8012e16:	e7e3      	b.n	8012de0 <__smakebuf_r+0xc>
 8012e18:	4b0d      	ldr	r3, [pc, #52]	; (8012e50 <__smakebuf_r+0x7c>)
 8012e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	6020      	str	r0, [r4, #0]
 8012e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e24:	81a3      	strh	r3, [r4, #12]
 8012e26:	9b00      	ldr	r3, [sp, #0]
 8012e28:	6163      	str	r3, [r4, #20]
 8012e2a:	9b01      	ldr	r3, [sp, #4]
 8012e2c:	6120      	str	r0, [r4, #16]
 8012e2e:	b15b      	cbz	r3, 8012e48 <__smakebuf_r+0x74>
 8012e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e34:	4630      	mov	r0, r6
 8012e36:	f000 f8bf 	bl	8012fb8 <_isatty_r>
 8012e3a:	b128      	cbz	r0, 8012e48 <__smakebuf_r+0x74>
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	f023 0303 	bic.w	r3, r3, #3
 8012e42:	f043 0301 	orr.w	r3, r3, #1
 8012e46:	81a3      	strh	r3, [r4, #12]
 8012e48:	89a0      	ldrh	r0, [r4, #12]
 8012e4a:	4305      	orrs	r5, r0
 8012e4c:	81a5      	strh	r5, [r4, #12]
 8012e4e:	e7cd      	b.n	8012dec <__smakebuf_r+0x18>
 8012e50:	08011ab5 	.word	0x08011ab5

08012e54 <memmove>:
 8012e54:	4288      	cmp	r0, r1
 8012e56:	b510      	push	{r4, lr}
 8012e58:	eb01 0402 	add.w	r4, r1, r2
 8012e5c:	d902      	bls.n	8012e64 <memmove+0x10>
 8012e5e:	4284      	cmp	r4, r0
 8012e60:	4623      	mov	r3, r4
 8012e62:	d807      	bhi.n	8012e74 <memmove+0x20>
 8012e64:	1e43      	subs	r3, r0, #1
 8012e66:	42a1      	cmp	r1, r4
 8012e68:	d008      	beq.n	8012e7c <memmove+0x28>
 8012e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e72:	e7f8      	b.n	8012e66 <memmove+0x12>
 8012e74:	4402      	add	r2, r0
 8012e76:	4601      	mov	r1, r0
 8012e78:	428a      	cmp	r2, r1
 8012e7a:	d100      	bne.n	8012e7e <memmove+0x2a>
 8012e7c:	bd10      	pop	{r4, pc}
 8012e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e86:	e7f7      	b.n	8012e78 <memmove+0x24>

08012e88 <_realloc_r>:
 8012e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	4614      	mov	r4, r2
 8012e90:	460e      	mov	r6, r1
 8012e92:	b921      	cbnz	r1, 8012e9e <_realloc_r+0x16>
 8012e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e98:	4611      	mov	r1, r2
 8012e9a:	f7fd ba13 	b.w	80102c4 <_malloc_r>
 8012e9e:	b92a      	cbnz	r2, 8012eac <_realloc_r+0x24>
 8012ea0:	f7fd f9a4 	bl	80101ec <_free_r>
 8012ea4:	4625      	mov	r5, r4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eac:	f000 f894 	bl	8012fd8 <_malloc_usable_size_r>
 8012eb0:	4284      	cmp	r4, r0
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	d802      	bhi.n	8012ebc <_realloc_r+0x34>
 8012eb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012eba:	d812      	bhi.n	8012ee2 <_realloc_r+0x5a>
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	4640      	mov	r0, r8
 8012ec0:	f7fd fa00 	bl	80102c4 <_malloc_r>
 8012ec4:	4605      	mov	r5, r0
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d0ed      	beq.n	8012ea6 <_realloc_r+0x1e>
 8012eca:	42bc      	cmp	r4, r7
 8012ecc:	4622      	mov	r2, r4
 8012ece:	4631      	mov	r1, r6
 8012ed0:	bf28      	it	cs
 8012ed2:	463a      	movcs	r2, r7
 8012ed4:	f7fd f974 	bl	80101c0 <memcpy>
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4640      	mov	r0, r8
 8012edc:	f7fd f986 	bl	80101ec <_free_r>
 8012ee0:	e7e1      	b.n	8012ea6 <_realloc_r+0x1e>
 8012ee2:	4635      	mov	r5, r6
 8012ee4:	e7df      	b.n	8012ea6 <_realloc_r+0x1e>
	...

08012ee8 <_read_r>:
 8012ee8:	b538      	push	{r3, r4, r5, lr}
 8012eea:	4d07      	ldr	r5, [pc, #28]	; (8012f08 <_read_r+0x20>)
 8012eec:	4604      	mov	r4, r0
 8012eee:	4608      	mov	r0, r1
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	602a      	str	r2, [r5, #0]
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	f000 f8a6 	bl	8013048 <_read>
 8012efc:	1c43      	adds	r3, r0, #1
 8012efe:	d102      	bne.n	8012f06 <_read_r+0x1e>
 8012f00:	682b      	ldr	r3, [r5, #0]
 8012f02:	b103      	cbz	r3, 8012f06 <_read_r+0x1e>
 8012f04:	6023      	str	r3, [r4, #0]
 8012f06:	bd38      	pop	{r3, r4, r5, pc}
 8012f08:	200028e0 	.word	0x200028e0

08012f0c <_raise_r>:
 8012f0c:	291f      	cmp	r1, #31
 8012f0e:	b538      	push	{r3, r4, r5, lr}
 8012f10:	4604      	mov	r4, r0
 8012f12:	460d      	mov	r5, r1
 8012f14:	d904      	bls.n	8012f20 <_raise_r+0x14>
 8012f16:	2316      	movs	r3, #22
 8012f18:	6003      	str	r3, [r0, #0]
 8012f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012f22:	b112      	cbz	r2, 8012f2a <_raise_r+0x1e>
 8012f24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f28:	b94b      	cbnz	r3, 8012f3e <_raise_r+0x32>
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f000 f830 	bl	8012f90 <_getpid_r>
 8012f30:	462a      	mov	r2, r5
 8012f32:	4601      	mov	r1, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f3a:	f000 b817 	b.w	8012f6c <_kill_r>
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d00a      	beq.n	8012f58 <_raise_r+0x4c>
 8012f42:	1c59      	adds	r1, r3, #1
 8012f44:	d103      	bne.n	8012f4e <_raise_r+0x42>
 8012f46:	2316      	movs	r3, #22
 8012f48:	6003      	str	r3, [r0, #0]
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	e7e7      	b.n	8012f1e <_raise_r+0x12>
 8012f4e:	2400      	movs	r4, #0
 8012f50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f54:	4628      	mov	r0, r5
 8012f56:	4798      	blx	r3
 8012f58:	2000      	movs	r0, #0
 8012f5a:	e7e0      	b.n	8012f1e <_raise_r+0x12>

08012f5c <raise>:
 8012f5c:	4b02      	ldr	r3, [pc, #8]	; (8012f68 <raise+0xc>)
 8012f5e:	4601      	mov	r1, r0
 8012f60:	6818      	ldr	r0, [r3, #0]
 8012f62:	f7ff bfd3 	b.w	8012f0c <_raise_r>
 8012f66:	bf00      	nop
 8012f68:	20000184 	.word	0x20000184

08012f6c <_kill_r>:
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4d07      	ldr	r5, [pc, #28]	; (8012f8c <_kill_r+0x20>)
 8012f70:	2300      	movs	r3, #0
 8012f72:	4604      	mov	r4, r0
 8012f74:	4608      	mov	r0, r1
 8012f76:	4611      	mov	r1, r2
 8012f78:	602b      	str	r3, [r5, #0]
 8012f7a:	f000 f855 	bl	8013028 <_kill>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	d102      	bne.n	8012f88 <_kill_r+0x1c>
 8012f82:	682b      	ldr	r3, [r5, #0]
 8012f84:	b103      	cbz	r3, 8012f88 <_kill_r+0x1c>
 8012f86:	6023      	str	r3, [r4, #0]
 8012f88:	bd38      	pop	{r3, r4, r5, pc}
 8012f8a:	bf00      	nop
 8012f8c:	200028e0 	.word	0x200028e0

08012f90 <_getpid_r>:
 8012f90:	f000 b83a 	b.w	8013008 <_getpid>

08012f94 <_fstat_r>:
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4d07      	ldr	r5, [pc, #28]	; (8012fb4 <_fstat_r+0x20>)
 8012f98:	2300      	movs	r3, #0
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	4608      	mov	r0, r1
 8012f9e:	4611      	mov	r1, r2
 8012fa0:	602b      	str	r3, [r5, #0]
 8012fa2:	f000 f829 	bl	8012ff8 <_fstat>
 8012fa6:	1c43      	adds	r3, r0, #1
 8012fa8:	d102      	bne.n	8012fb0 <_fstat_r+0x1c>
 8012faa:	682b      	ldr	r3, [r5, #0]
 8012fac:	b103      	cbz	r3, 8012fb0 <_fstat_r+0x1c>
 8012fae:	6023      	str	r3, [r4, #0]
 8012fb0:	bd38      	pop	{r3, r4, r5, pc}
 8012fb2:	bf00      	nop
 8012fb4:	200028e0 	.word	0x200028e0

08012fb8 <_isatty_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d06      	ldr	r5, [pc, #24]	; (8012fd4 <_isatty_r+0x1c>)
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	4608      	mov	r0, r1
 8012fc2:	602b      	str	r3, [r5, #0]
 8012fc4:	f000 f828 	bl	8013018 <_isatty>
 8012fc8:	1c43      	adds	r3, r0, #1
 8012fca:	d102      	bne.n	8012fd2 <_isatty_r+0x1a>
 8012fcc:	682b      	ldr	r3, [r5, #0]
 8012fce:	b103      	cbz	r3, 8012fd2 <_isatty_r+0x1a>
 8012fd0:	6023      	str	r3, [r4, #0]
 8012fd2:	bd38      	pop	{r3, r4, r5, pc}
 8012fd4:	200028e0 	.word	0x200028e0

08012fd8 <_malloc_usable_size_r>:
 8012fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fdc:	1f18      	subs	r0, r3, #4
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	bfbc      	itt	lt
 8012fe2:	580b      	ldrlt	r3, [r1, r0]
 8012fe4:	18c0      	addlt	r0, r0, r3
 8012fe6:	4770      	bx	lr

08012fe8 <_close>:
 8012fe8:	4b02      	ldr	r3, [pc, #8]	; (8012ff4 <_close+0xc>)
 8012fea:	2258      	movs	r2, #88	; 0x58
 8012fec:	601a      	str	r2, [r3, #0]
 8012fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ff2:	4770      	bx	lr
 8012ff4:	200028e0 	.word	0x200028e0

08012ff8 <_fstat>:
 8012ff8:	4b02      	ldr	r3, [pc, #8]	; (8013004 <_fstat+0xc>)
 8012ffa:	2258      	movs	r2, #88	; 0x58
 8012ffc:	601a      	str	r2, [r3, #0]
 8012ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013002:	4770      	bx	lr
 8013004:	200028e0 	.word	0x200028e0

08013008 <_getpid>:
 8013008:	4b02      	ldr	r3, [pc, #8]	; (8013014 <_getpid+0xc>)
 801300a:	2258      	movs	r2, #88	; 0x58
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013012:	4770      	bx	lr
 8013014:	200028e0 	.word	0x200028e0

08013018 <_isatty>:
 8013018:	4b02      	ldr	r3, [pc, #8]	; (8013024 <_isatty+0xc>)
 801301a:	2258      	movs	r2, #88	; 0x58
 801301c:	601a      	str	r2, [r3, #0]
 801301e:	2000      	movs	r0, #0
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	200028e0 	.word	0x200028e0

08013028 <_kill>:
 8013028:	4b02      	ldr	r3, [pc, #8]	; (8013034 <_kill+0xc>)
 801302a:	2258      	movs	r2, #88	; 0x58
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013032:	4770      	bx	lr
 8013034:	200028e0 	.word	0x200028e0

08013038 <_lseek>:
 8013038:	4b02      	ldr	r3, [pc, #8]	; (8013044 <_lseek+0xc>)
 801303a:	2258      	movs	r2, #88	; 0x58
 801303c:	601a      	str	r2, [r3, #0]
 801303e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013042:	4770      	bx	lr
 8013044:	200028e0 	.word	0x200028e0

08013048 <_read>:
 8013048:	4b02      	ldr	r3, [pc, #8]	; (8013054 <_read+0xc>)
 801304a:	2258      	movs	r2, #88	; 0x58
 801304c:	601a      	str	r2, [r3, #0]
 801304e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013052:	4770      	bx	lr
 8013054:	200028e0 	.word	0x200028e0

08013058 <_sbrk>:
 8013058:	4a04      	ldr	r2, [pc, #16]	; (801306c <_sbrk+0x14>)
 801305a:	6811      	ldr	r1, [r2, #0]
 801305c:	4603      	mov	r3, r0
 801305e:	b909      	cbnz	r1, 8013064 <_sbrk+0xc>
 8013060:	4903      	ldr	r1, [pc, #12]	; (8013070 <_sbrk+0x18>)
 8013062:	6011      	str	r1, [r2, #0]
 8013064:	6810      	ldr	r0, [r2, #0]
 8013066:	4403      	add	r3, r0
 8013068:	6013      	str	r3, [r2, #0]
 801306a:	4770      	bx	lr
 801306c:	200028e4 	.word	0x200028e4
 8013070:	200028e8 	.word	0x200028e8

08013074 <_write>:
 8013074:	4b02      	ldr	r3, [pc, #8]	; (8013080 <_write+0xc>)
 8013076:	2258      	movs	r2, #88	; 0x58
 8013078:	601a      	str	r2, [r3, #0]
 801307a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801307e:	4770      	bx	lr
 8013080:	200028e0 	.word	0x200028e0

08013084 <_exit>:
 8013084:	e7fe      	b.n	8013084 <_exit>
	...

08013088 <_init>:
 8013088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308a:	bf00      	nop
 801308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801308e:	bc08      	pop	{r3}
 8013090:	469e      	mov	lr, r3
 8013092:	4770      	bx	lr

08013094 <_fini>:
 8013094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013096:	bf00      	nop
 8013098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801309a:	bc08      	pop	{r3}
 801309c:	469e      	mov	lr, r3
 801309e:	4770      	bx	lr
