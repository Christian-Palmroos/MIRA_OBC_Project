
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001267c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08012840  08012840  00022840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f38  08012f38  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08012f38  08012f38  00022f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f40  08012f40  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f40  08012f40  00022f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f44  08012f44  00022f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08012f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002678  20000358  080132a0  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200029d0  080132a0  000329d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1e8  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005880  00000000  00000000  0005c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002238  00000000  00000000  00061df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ff0  00000000  00000000  00064028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008790  00000000  00000000  00066018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c82a  00000000  00000000  0006e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120576  00000000  00000000  0009afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a270  00000000  00000000  001bb598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c5808  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c58d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000358 	.word	0x20000358
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012824 	.word	0x08012824

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	08012824 	.word	0x08012824

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 f96d 	bl	80031da <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 f964 	bl	80031f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000374 	.word	0x20000374
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 f88e 	bl	80030bc <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 f922 	bl	80031f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f964 	bl	800328c <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e fea5 	bl	800fd40 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fb32 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fe5c 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 fe46 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	f5ad 6d2e 	sub.w	sp, sp, #2784	; 0xae0
 80010a6:	af02      	add	r7, sp, #8
int main(void)
 80010a8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80010ac:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010b0:	4bd0      	ldr	r3, [pc, #832]	; (80013f4 <main+0x354>)
 80010b2:	f507 6424 	add.w	r4, r7, #2624	; 0xa40
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c0:	c403      	stmia	r4!, {r0, r1}
 80010c2:	7022      	strb	r2, [r4, #0]
 80010c4:	f607 2359 	addw	r3, r7, #2649	; 0xa59
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 80010d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80010dc:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 80010e0:	461a      	mov	r2, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	6053      	str	r3, [r2, #4]
 80010e8:	6093      	str	r3, [r2, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 80010ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80010f0:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80010fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001102:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 800110e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001112:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 800112a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800112e:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	3304      	adds	r3, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8001146:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800114a:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	3304      	adds	r3, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8001162:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001166:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 800116a:	4aa3      	ldr	r2, [pc, #652]	; (80013f8 <main+0x358>)
 800116c:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800116e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001172:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	2224      	movs	r2, #36	; 0x24
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f00e fddd 	bl	800fd40 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 8001186:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800118a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	3304      	adds	r3, #4
 8001194:	2224      	movs	r2, #36	; 0x24
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00e fdd1 	bl	800fd40 <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80011b2:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f001 f8c2 	bl	8002352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f931 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fb79 	bl	80018c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d6:	f000 fb45 	bl	8001864 <MX_DMA_Init>
  MX_I2C1_Init();
 80011da:	f000 f991 	bl	8001500 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 80011de:	f000 f9cf 	bl	8001580 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011e2:	f000 f9ef 	bl	80015c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011e6:	f000 faa1 	bl	800172c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011ea:	f000 faeb 	bl	80017c4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80011ee:	f00c f8f9 	bl	800d3e4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80011f2:	f00d ff81 	bl	800f0f8 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 80011f6:	f000 fa23 	bl	8001640 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011fa:	f000 f96d 	bl	80014d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 80011fe:	f000 fcdf 	bl	8001bc0 <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 8001202:	f7ff fe6b 	bl	8000edc <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 8001206:	487d      	ldr	r0, [pc, #500]	; (80013fc <main+0x35c>)
 8001208:	f000 fe42 	bl	8001e90 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 800120c:	487c      	ldr	r0, [pc, #496]	; (8001400 <main+0x360>)
 800120e:	f000 fe3f 	bl	8001e90 <HAL_UART_MspInit>

  HAL_StatusTypeDef status;


  // enable channel 1 for MIRA communication
  HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2110      	movs	r1, #16
 8001216:	487b      	ldr	r0, [pc, #492]	; (8001404 <main+0x364>)
 8001218:	f001 ff1e 	bl	8003058 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2120      	movs	r1, #32
 8001220:	4878      	ldr	r0, [pc, #480]	; (8001404 <main+0x364>)
 8001222:	f001 ff19 	bl	8003058 <HAL_GPIO_WritePin>


  //msg_size = build_message(&message, &command, &payload);
  //status = mira_write(&huart1, message, 5000);
	mira_rxBuffer = mira_rxBuffer1;
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <main+0x368>)
 8001228:	4a78      	ldr	r2, [pc, #480]	; (800140c <main+0x36c>)
 800122a:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_UE);
 800122c:	4b73      	ldr	r3, [pc, #460]	; (80013fc <main+0x35c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001234:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001238:	e853 3f00 	ldrex	r3, [r3]
 800123c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
   return(result);
 8001240:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <main+0x35c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8001256:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 800125a:	f8c7 2aa0 	str.w	r2, [r7, #2720]	; 0xaa0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800125e:	f8d7 1aa0 	ldr.w	r1, [r7, #2720]	; 0xaa0
 8001262:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	; 0xa9c
 8001266:	e841 2300 	strex	r3, r2, [r1]
 800126a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
   return(result);
 800126e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1da      	bne.n	800122c <main+0x18c>
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_RE);
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <main+0x35c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800127e:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8001282:	e853 3f00 	ldrex	r3, [r3]
 8001286:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
   return(result);
 800128a:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <main+0x35c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 80012a0:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 80012a4:	f8c7 2ac0 	str.w	r2, [r7, #2752]	; 0xac0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012a8:	f8d7 1ac0 	ldr.w	r1, [r7, #2752]	; 0xac0
 80012ac:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 80012b0:	e841 2300 	strex	r3, r2, [r1]
 80012b4:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
   return(result);
 80012b8:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1da      	bne.n	8001276 <main+0x1d6>
	ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <main+0x35c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012c8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80012cc:	e853 3f00 	ldrex	r3, [r3]
 80012d0:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
   return(result);
 80012d4:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 80012e0:	4b46      	ldr	r3, [pc, #280]	; (80013fc <main+0x35c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80012ea:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 80012ee:	f8c7 2ad0 	str.w	r2, [r7, #2768]	; 0xad0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012f2:	f8d7 1ad0 	ldr.w	r1, [r7, #2768]	; 0xad0
 80012f6:	f8d7 2ad4 	ldr.w	r2, [r7, #2772]	; 0xad4
 80012fa:	e841 2300 	strex	r3, r2, [r1]
 80012fe:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
   return(result);
 8001302:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1da      	bne.n	80012c0 <main+0x220>

	uint8_t reg[1] = {0x02};
 800130a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800130e:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	uint8_t data[4] = {0x00,0x00,0x00,0x01};
 8001316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800131a:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 800131e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001322:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
		//while (CDC_Transmit_FS (mira_rx, sizeof(mira_rx)) == USBD_BUSY);
	}

	while(1){
	status = mira_write_register(&huart1, reg, data, mira_rx, 5000);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	f107 0210 	add.w	r2, r7, #16
 800132a:	f107 0114 	add.w	r1, r7, #20
 800132e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001332:	9000      	str	r0, [sp, #0]
 8001334:	4831      	ldr	r0, [pc, #196]	; (80013fc <main+0x35c>)
 8001336:	f000 fbcb 	bl	8001ad0 <mira_write_register>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 3a9b 	strb.w	r3, [r7, #2715]	; 0xa9b
	//status = mira_read_reply(&huart1, mira_rx, 5000);
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001340:	2108      	movs	r1, #8
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <main+0x370>)
 8001344:	f001 fea0 	bl	8003088 <HAL_GPIO_TogglePin>

	HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f001 f877 	bl	800243c <HAL_Delay>
	while (CDC_Transmit_FS (mira_rx, sizeof(mira_rx)) == USBD_BUSY);
 800134e:	bf00      	nop
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	210a      	movs	r1, #10
 8001354:	4618      	mov	r0, r3
 8001356:	f00d ff8d 	bl	800f274 <CDC_Transmit_FS>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d0f7      	beq.n	8001350 <main+0x2b0>



	reg[0] = 0x01;
 8001360:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001364:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
	data[3] = 0x00;
 800136c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001370:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 8001374:	2200      	movs	r2, #0
 8001376:	70da      	strb	r2, [r3, #3]
	status = mira_write_register(&huart1, reg, data, mira_rx, 5000);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	f107 0210 	add.w	r2, r7, #16
 800137e:	f107 0114 	add.w	r1, r7, #20
 8001382:	f241 3088 	movw	r0, #5000	; 0x1388
 8001386:	9000      	str	r0, [sp, #0]
 8001388:	481c      	ldr	r0, [pc, #112]	; (80013fc <main+0x35c>)
 800138a:	f000 fba1 	bl	8001ad0 <mira_write_register>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3a9b 	strb.w	r3, [r7, #2715]	; 0xa9b
	HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f001 f851 	bl	800243c <HAL_Delay>
	while (CDC_Transmit_FS (mira_rx, sizeof(mira_rx)) == USBD_BUSY);
 800139a:	bf00      	nop
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	210a      	movs	r1, #10
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00d ff67 	bl	800f274 <CDC_Transmit_FS>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d0f7      	beq.n	800139c <main+0x2fc>
	HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80013ac:	2110      	movs	r1, #16
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <main+0x370>)
 80013b0:	f001 fe6a 	bl	8003088 <HAL_GPIO_TogglePin>

	reg[0] = 0x00;
 80013b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80013b8:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	data[3] = 0x05;
 80013c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80013c4:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 80013c8:	2205      	movs	r2, #5
 80013ca:	70da      	strb	r2, [r3, #3]
	status = mira_write_register(&huart1, reg, data, mira_rx,  5000);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	f107 0210 	add.w	r2, r7, #16
 80013d2:	f107 0114 	add.w	r1, r7, #20
 80013d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80013da:	9000      	str	r0, [sp, #0]
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <main+0x35c>)
 80013de:	f000 fb77 	bl	8001ad0 <mira_write_register>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3a9b 	strb.w	r3, [r7, #2715]	; 0xa9b
	HAL_Delay(100);
 80013e8:	2064      	movs	r0, #100	; 0x64
 80013ea:	f001 f827 	bl	800243c <HAL_Delay>
	while (CDC_Transmit_FS (mira_rx, sizeof(mira_rx)) == USBD_BUSY);
 80013ee:	bf00      	nop
 80013f0:	e010      	b.n	8001414 <main+0x374>
 80013f2:	bf00      	nop
 80013f4:	08012840 	.word	0x08012840
 80013f8:	00202d20 	.word	0x00202d20
 80013fc:	20000550 	.word	0x20000550
 8001400:	200005e0 	.word	0x200005e0
 8001404:	48001000 	.word	0x48001000
 8001408:	20000d98 	.word	0x20000d98
 800140c:	20000d80 	.word	0x20000d80
 8001410:	48000c00 	.word	0x48000c00
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	210a      	movs	r1, #10
 8001418:	4618      	mov	r0, r3
 800141a:	f00d ff2b 	bl	800f274 <CDC_Transmit_FS>
 800141e:	4603      	mov	r3, r0
 8001420:	2b01      	cmp	r3, #1
 8001422:	d0f7      	beq.n	8001414 <main+0x374>
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001424:	2120      	movs	r1, #32
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <main+0x390>)
 8001428:	f001 fe2e 	bl	8003088 <HAL_GPIO_TogglePin>
	status = mira_write_register(&huart1, reg, data, mira_rx, 5000);
 800142c:	e77a      	b.n	8001324 <main+0x284>
 800142e:	bf00      	nop
 8001430:	48000c00 	.word	0x48000c00

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2244      	movs	r2, #68	; 0x44
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f00e fc7c 	bl	800fd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f003 f950 	bl	80046fc <HAL_PWREx_ControlVoltageScaling>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001462:	f000 fb01 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001466:	2321      	movs	r3, #33	; 0x21
 8001468:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001478:	2303      	movs	r3, #3
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001480:	231e      	movs	r3, #30
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f9e5 	bl	8004864 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014a0:	f000 fae2 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2303      	movs	r3, #3
 80014aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	2105      	movs	r1, #5
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fdeb 	bl	8005098 <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014c8:	f000 face 	bl	8001a68 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014cc:	f003 ffe2 	bl	8005494 <HAL_RCC_EnableCSS>
}
 80014d0:	bf00      	nop
 80014d2:	3758      	adds	r7, #88	; 0x58
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	201a      	movs	r0, #26
 80014e2:	f001 f8aa 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014e6:	201a      	movs	r0, #26
 80014e8:	f001 f8c3 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2026      	movs	r0, #38	; 0x26
 80014f2:	f001 f8a2 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f6:	2026      	movs	r0, #38	; 0x26
 80014f8:	f001 f8bb 	bl	8002672 <HAL_NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_I2C1_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_I2C1_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_I2C1_Init+0x74>)
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_I2C1_Init+0x7c>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_I2C1_Init+0x74>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <MX_I2C1_Init+0x74>)
 800153c:	f001 fdbe 	bl	80030bc <HAL_I2C_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001546:	f000 fa8f 	bl	8001a68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <MX_I2C1_Init+0x74>)
 800154e:	f001 fe52 	bl	80031f6 <HAL_I2CEx_ConfigAnalogFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001558:	f000 fa86 	bl	8001a68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_I2C1_Init+0x74>)
 8001560:	f001 fe94 	bl	800328c <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 fa7d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200003cc 	.word	0x200003cc
 8001578:	40005400 	.word	0x40005400
 800157c:	307075b1 	.word	0x307075b1

08001580 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <MX_SDMMC1_SD_Init+0x40>)
 8001588:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 8001598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <MX_SDMMC1_SD_Init+0x3c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000420 	.word	0x20000420
 80015c0:	50062400 	.word	0x50062400

080015c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_SPI1_Init+0x74>)
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_SPI1_Init+0x78>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_SPI1_Init+0x74>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_SPI1_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_SPI1_Init+0x74>)
 80015de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_SPI1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_SPI1_Init+0x74>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_SPI1_Init+0x74>)
 80015fa:	2228      	movs	r2, #40	; 0x28
 80015fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_SPI1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_SPI1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_SPI1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_SPI1_Init+0x74>)
 8001612:	2207      	movs	r2, #7
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_SPI1_Init+0x74>)
 800161e:	2208      	movs	r2, #8
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_SPI1_Init+0x74>)
 8001624:	f007 f9ad 	bl	8008982 <HAL_SPI_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800162e:	f000 fa1b 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200004a0 	.word	0x200004a0
 800163c:	40013000 	.word	0x40013000

08001640 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b092      	sub	sp, #72	; 0x48
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	222c      	movs	r2, #44	; 0x2c
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00e fb6d 	bl	800fd40 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <MX_TIM17_Init+0xe4>)
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <MX_TIM17_Init+0xe8>)
 800166a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <MX_TIM17_Init+0xe4>)
 800166e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001672:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_TIM17_Init+0xe4>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_TIM17_Init+0xe4>)
 800167c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001680:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_TIM17_Init+0xe4>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM17_Init+0xe4>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_TIM17_Init+0xe4>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001694:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM17_Init+0xe4>)
 8001696:	f007 fa17 	bl	8008ac8 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80016a0:	f000 f9e2 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_TIM17_Init+0xe4>)
 80016a6:	f007 fa66 	bl	8008b76 <HAL_TIM_OC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80016b0:	f000 f9da 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_TIM17_Init+0xe4>)
 80016da:	f007 fbcd 	bl	8008e78 <HAL_TIM_OC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80016e4:	f000 f9c0 	bl	8001a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM17_Init+0xe4>)
 800170c:	f007 ffd0 	bl	80096b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001716:	f000 f9a7 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3748      	adds	r7, #72	; 0x48
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000504 	.word	0x20000504
 8001728:	40014800 	.word	0x40014800

0800172c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <MX_USART1_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001776:	f008 f837 	bl	80097e8 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f000 f972 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001788:	f009 fc40 	bl	800b00c <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f000 f969 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800179a:	f009 fc75 	bl	800b088 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f000 f960 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART1_UART_Init+0x90>)
 80017aa:	f009 fbf6 	bl	800af9a <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 f958 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000550 	.word	0x20000550
 80017c0:	40013800 	.word	0x40013800

080017c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017ca:	4a25      	ldr	r2, [pc, #148]	; (8001860 <MX_USART2_UART_Init+0x9c>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_USART2_UART_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_USART2_UART_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_USART2_UART_Init+0x98>)
 8001808:	2210      	movs	r2, #16
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_USART2_UART_Init+0x98>)
 800180e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_USART2_UART_Init+0x98>)
 8001816:	f007 ffe7 	bl	80097e8 <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001820:	f000 f922 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_USART2_UART_Init+0x98>)
 8001828:	f009 fbf0 	bl	800b00c <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001832:	f000 f919 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <MX_USART2_UART_Init+0x98>)
 800183a:	f009 fc25 	bl	800b088 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001844:	f000 f910 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_USART2_UART_Init+0x98>)
 800184a:	f009 fba6 	bl	800af9a <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001854:	f000 f908 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200005e0 	.word	0x200005e0
 8001860:	40004400 	.word	0x40004400

08001864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_DMA_Init+0x60>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_DMA_Init+0x60>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6493      	str	r3, [r2, #72]	; 0x48
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_DMA_Init+0x60>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_DMA_Init+0x60>)
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <MX_DMA_Init+0x60>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6493      	str	r3, [r2, #72]	; 0x48
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <MX_DMA_Init+0x60>)
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	200b      	movs	r0, #11
 80018a0:	f000 fecb 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a4:	200b      	movs	r0, #11
 80018a6:	f000 fee4 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	200c      	movs	r0, #12
 80018b0:	f000 fec3 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018b4:	200c      	movs	r0, #12
 80018b6:	f000 fedc 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <MX_GPIO_Init+0x18c>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <MX_GPIO_Init+0x18c>)
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <MX_GPIO_Init+0x18c>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <MX_GPIO_Init+0x18c>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <MX_GPIO_Init+0x18c>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <MX_GPIO_Init+0x18c>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x18c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a44      	ldr	r2, [pc, #272]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <MX_GPIO_Init+0x18c>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a3e      	ldr	r2, [pc, #248]	; (8001a54 <MX_GPIO_Init+0x18c>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <MX_GPIO_Init+0x18c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800196e:	2200      	movs	r2, #0
 8001970:	f641 013c 	movw	r1, #6204	; 0x183c
 8001974:	4838      	ldr	r0, [pc, #224]	; (8001a58 <MX_GPIO_Init+0x190>)
 8001976:	f001 fb6f 	bl	8003058 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2130      	movs	r1, #48	; 0x30
 800197e:	4837      	ldr	r0, [pc, #220]	; (8001a5c <MX_GPIO_Init+0x194>)
 8001980:	f001 fb6a 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	2178      	movs	r1, #120	; 0x78
 8001988:	4835      	ldr	r0, [pc, #212]	; (8001a60 <MX_GPIO_Init+0x198>)
 800198a:	f001 fb65 	bl	8003058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800198e:	f641 033c 	movw	r3, #6204	; 0x183c
 8001992:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	482c      	ldr	r0, [pc, #176]	; (8001a58 <MX_GPIO_Init+0x190>)
 80019a8:	f001 f9ac 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 80019ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <MX_GPIO_Init+0x194>)
 80019c2:	f001 f99f 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80019c6:	f248 0302 	movw	r3, #32770	; 0x8002
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f001 f991 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 80019e2:	2330      	movs	r3, #48	; 0x30
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <MX_GPIO_Init+0x194>)
 80019fa:	f001 f983 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4811      	ldr	r0, [pc, #68]	; (8001a58 <MX_GPIO_Init+0x190>)
 8001a14:	f001 f976 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001a18:	2378      	movs	r3, #120	; 0x78
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_GPIO_Init+0x198>)
 8001a30:	f001 f968 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001a34:	2320      	movs	r3, #32
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_GPIO_Init+0x19c>)
 8001a48:	f001 f95c 	bl	8002d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3730      	adds	r7, #48	; 0x30
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48001000 	.word	0x48001000
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000c00 	.word	0x48000c00
 8001a64:	48000400 	.word	0x48000400

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8001a70:	4801      	ldr	r0, [pc, #4]	; (8001a78 <Error_Handler+0x10>)
 8001a72:	f00e feb7 	bl	80107e4 <iprintf>
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <Error_Handler+0xe>
 8001a78:	08012874 	.word	0x08012874

08001a7c <CRC16>:
//empty payload
const uint8_t EMPTY_PAYLOAD[1] = {0x99}; //Check that this is not used


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
	0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
	0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
	0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8001a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8c:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8001a8e:	e011      	b.n	8001ab4 <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4053      	eors	r3, r2
 8001a9e:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 8001aa6:	7b7b      	ldrb	r3, [r7, #13]
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <CRC16+0x50>)
 8001aaa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	4053      	eors	r3, r2
 8001ab2:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	807a      	strh	r2, [r7, #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e8      	bne.n	8001a90 <CRC16+0x14>
	}
	return wCRCWord;
 8001abe:	89fb      	ldrh	r3, [r7, #14]

}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	080128d4 	.word	0x080128d4

08001ad0 <mira_write_register>:


HAL_StatusTypeDef mira_write_register(UART_HandleTypeDef *huart, uint8_t *reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t message[14];

	uint8_t sync[2] = {0x5a, 0xce};
 8001ade:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001ae2:	843b      	strh	r3, [r7, #32]
	uint8_t length[2] = {0x00, 0x05};
 8001ae4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ae8:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 8001aea:	23c1      	movs	r3, #193	; 0xc1
 8001aec:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001aee:	23e1      	movs	r3, #225	; 0xe1
 8001af0:	753b      	strb	r3, [r7, #20]
	uint8_t command[1] = {0x03};
 8001af2:	2303      	movs	r3, #3
 8001af4:	743b      	strb	r3, [r7, #16]
	//uint8_t payload[5] = {0x02,0x00,0x00,0x00,0x01};
	uint16_t sum = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[0] = sync[0];
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[1] = sync[1];
 8001b02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[2] = length[0];
 8001b0a:	7f3b      	ldrb	r3, [r7, #28]
 8001b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[3] = length[1];
 8001b10:	7f7b      	ldrb	r3, [r7, #29]
 8001b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[4] = src[0];
 8001b16:	7e3b      	ldrb	r3, [r7, #24]
 8001b18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message[5] = dest[0];
 8001b1c:	7d3b      	ldrb	r3, [r7, #20]
 8001b1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message[6] = command[0];
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	message[7] = reg[0];
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	message[8] = data[0];
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message[9] = data[1];
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	message[10] = data[2];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	message[11] = data[3];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	78db      	ldrb	r3, [r3, #3]
 8001b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	sum = CRC16(message+2, 10);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	3302      	adds	r3, #2
 8001b56:	210a      	movs	r1, #10
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff8f 	bl	8001a7c <CRC16>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[12] = (sum&0xFF00)>>8;
 8001b62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	message[13] = (sum&0x00FF);
 8001b6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	// write given value to register at given address

	status = HAL_UART_Transmit(huart, message, 14, Timeout);
 8001b76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7c:	220e      	movs	r2, #14
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f007 fe82 	bl	8009888 <HAL_UART_Transmit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	status = HAL_UART_Receive_DMA(huart, rxBuffer, 10);
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f007 ff12 	bl	80099b8 <HAL_UART_Receive_DMA>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	  HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <mira_write_register+0xec>)
 8001ba0:	f001 fa5a 	bl	8003058 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <mira_write_register+0xec>)
 8001baa:	f001 fa55 	bl	8003058 <HAL_GPIO_WritePin>



	return status;
 8001bae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35

}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	48001000 	.word	0x48001000

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_MspInit+0x44>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_MspInit+0x44>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_MspInit+0x44>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_MspInit+0x44>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_MspInit+0x44>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_MspInit+0x44>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0ae      	sub	sp, #184	; 0xb8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2294      	movs	r2, #148	; 0x94
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00e f889 	bl	800fd40 <memset>
  if(hi2c->Instance==I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_I2C_MspInit+0xb0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d13a      	bne.n	8001cae <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fd11 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c50:	f7ff ff0a 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c72:	2312      	movs	r3, #18
 8001c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c84:	2304      	movs	r3, #4
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001c92:	f001 f837 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	37b8      	adds	r7, #184	; 0xb8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0b0      	sub	sp, #192	; 0xc0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	2294      	movs	r2, #148	; 0x94
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00e f82b 	bl	800fd40 <memset>
  if(hsd->Instance==SDMMC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <HAL_SD_MspInit+0xf8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d15e      	bne.n	8001db2 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fcb1 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001d10:	f7ff feaa 	bl	8001a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_SD_MspInit+0xfc>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d76:	230c      	movs	r3, #12
 8001d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d80:	4619      	mov	r1, r3
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <HAL_SD_MspInit+0x100>)
 8001d84:	f000 ffbe 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001da0:	230c      	movs	r3, #12
 8001da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001daa:	4619      	mov	r1, r3
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_SD_MspInit+0x104>)
 8001dae:	f000 ffa9 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	37c0      	adds	r7, #192	; 0xc0
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	50062400 	.word	0x50062400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	48000c00 	.word	0x48000c00

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_SPI_MspInit+0x7c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d128      	bne.n	8001e40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001e1e:	23f0      	movs	r3, #240	; 0xf0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f000 ff62 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013000 	.word	0x40013000
 8001e4c:	40021000 	.word	0x40021000

08001e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_TIM_Base_MspInit+0x38>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10b      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40014800 	.word	0x40014800
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0b0      	sub	sp, #192	; 0xc0
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	2294      	movs	r2, #148	; 0x94
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00d ff45 	bl	800fd40 <memset>
  if(huart->Instance==USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a70      	ldr	r2, [pc, #448]	; (800207c <HAL_UART_MspInit+0x1ec>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 8098 	bne.w	8001ff2 <HAL_UART_MspInit+0x162>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fbcc 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff fdc5 	bl	8001a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ede:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a67      	ldr	r2, [pc, #412]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a61      	ldr	r2, [pc, #388]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001f0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f000 fee4 	bl	8002d04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_UART_MspInit+0x1f8>)
 8001f40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f44:	2218      	movs	r2, #24
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f48:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f6c:	4b45      	ldr	r3, [pc, #276]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f72:	4844      	ldr	r0, [pc, #272]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f74:	f000 fb98 	bl	80026a8 <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001f7e:	f7ff fd73 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f86:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f88:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_UART_MspInit+0x1f4>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001f90:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <HAL_UART_MspInit+0x200>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001f96:	2219      	movs	r2, #25
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fc4:	4831      	ldr	r0, [pc, #196]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fc6:	f000 fb6f 	bl	80026a8 <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8001fd0:	f7ff fd4a 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fd8:	679a      	str	r2, [r3, #120]	; 0x78
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_UART_MspInit+0x1fc>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2025      	movs	r0, #37	; 0x25
 8001fe6:	f000 fb28 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fea:	2025      	movs	r0, #37	; 0x25
 8001fec:	f000 fb41 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff0:	e040      	b.n	8002074 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_UART_MspInit+0x204>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d13b      	bne.n	8002074 <HAL_UART_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fb2f 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002014:	f7ff fd28 	bl	8001a68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 800201e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_UART_MspInit+0x1f0>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002048:	230c      	movs	r3, #12
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002060:	2307      	movs	r3, #7
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f000 fe48 	bl	8002d04 <HAL_GPIO_Init>
}
 8002074:	bf00      	nop
 8002076:	37c0      	adds	r7, #192	; 0xc0
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	40021000 	.word	0x40021000
 8002084:	20000670 	.word	0x20000670
 8002088:	40020008 	.word	0x40020008
 800208c:	200006d0 	.word	0x200006d0
 8002090:	4002001c 	.word	0x4002001c
 8002094:	40004400 	.word	0x40004400

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800209c:	f003 fa0a 	bl	80054b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x8>

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <MemManage_Handler+0x4>

080020ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <UsageFault_Handler+0x4>

080020ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e8:	f000 f988 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA1_Channel1_IRQHandler+0x10>)
 80020f6:	f000 fcb5 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000670 	.word	0x20000670

08002104 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <DMA1_Channel2_IRQHandler+0x10>)
 800210a:	f000 fcab 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200006d0 	.word	0x200006d0

08002118 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002132:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800214a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 800214e:	f006 fd73 	bl	8008c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000d7c 	.word	0x20000d7c
 800215c:	20000d7d 	.word	0x20000d7d
 8002160:	20000504 	.word	0x20000504

08002164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 char c = huart1.Instance->RDR;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <USART1_IRQHandler+0x98>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002170:	b29b      	uxth	r3, r3
 8002172:	71fb      	strb	r3, [r7, #7]
	    if (mira_rxBufferPos < mira_RXBUFSIZE - 1)
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <USART1_IRQHandler+0x9c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b08      	cmp	r3, #8
 800217c:	d80b      	bhi.n	8002196 <USART1_IRQHandler+0x32>
	    	{ mira_rxBuffer[mira_rxBufferPos++] = (uint8_t) c; }
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <USART1_IRQHandler+0xa0>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <USART1_IRQHandler+0x9c>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	1c59      	adds	r1, r3, #1
 800218a:	b2c8      	uxtb	r0, r1
 800218c:	491c      	ldr	r1, [pc, #112]	; (8002200 <USART1_IRQHandler+0x9c>)
 800218e:	7008      	strb	r0, [r1, #0]
 8002190:	4413      	add	r3, r2
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	701a      	strb	r2, [r3, #0]

	    if ((mira_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') || (c == '\n') &&
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <USART1_IRQHandler+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d026      	beq.n	80021ec <USART1_IRQHandler+0x88>
	    {
	    	//tickGPS = 1;
	    	mira_rxBuffer[mira_rxBufferPos] = 0;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <USART1_IRQHandler+0xa0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <USART1_IRQHandler+0x9c>)
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4413      	add	r3, r2
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
	    	mira_data_ready |= 1;
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <USART1_IRQHandler+0xa8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <USART1_IRQHandler+0xa8>)
 80021b8:	6013      	str	r3, [r2, #0]
	    	mira_send_ready ^= 1;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <USART1_IRQHandler+0xa4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	4a11      	ldr	r2, [pc, #68]	; (8002208 <USART1_IRQHandler+0xa4>)
 80021c4:	6013      	str	r3, [r2, #0]
	    	mira_rxBufferPos = 0;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <USART1_IRQHandler+0x9c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <USART1_IRQHandler+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <USART1_IRQHandler+0xac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d103      	bne.n	80021de <USART1_IRQHandler+0x7a>
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <USART1_IRQHandler+0xa0>)
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <USART1_IRQHandler+0xb0>)
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e002      	b.n	80021e4 <USART1_IRQHandler+0x80>
			else {mira_rxBuffer = mira_rxBuffer1;}
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <USART1_IRQHandler+0xa0>)
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <USART1_IRQHandler+0xac>)
 80021e2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80021e4:	2110      	movs	r1, #16
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <USART1_IRQHandler+0xb4>)
 80021e8:	f000 ff4e 	bl	8003088 <HAL_GPIO_TogglePin>
	    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <USART1_IRQHandler+0x98>)
 80021ee:	f007 fc39 	bl	8009a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000550 	.word	0x20000550
 8002200:	20000d9c 	.word	0x20000d9c
 8002204:	20000d98 	.word	0x20000d98
 8002208:	20000004 	.word	0x20000004
 800220c:	20000da0 	.word	0x20000da0
 8002210:	20000d80 	.word	0x20000d80
 8002214:	20000d8c 	.word	0x20000d8c
 8002218:	48000c00 	.word	0x48000c00

0800221c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <USART2_IRQHandler+0x90>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002228:	b29b      	uxth	r3, r3
 800222a:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <USART2_IRQHandler+0x94>)
 800222e:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <USART2_IRQHandler+0x98>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <USART2_IRQHandler+0x94>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	1c59      	adds	r1, r3, #1
 800223c:	b2c8      	uxtb	r0, r1
 800223e:	491c      	ldr	r1, [pc, #112]	; (80022b0 <USART2_IRQHandler+0x94>)
 8002240:	7008      	strb	r0, [r1, #0]
 8002242:	4413      	add	r3, r2
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d126      	bne.n	800229c <USART2_IRQHandler+0x80>
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <USART2_IRQHandler+0x9c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d022      	beq.n	800229c <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <USART2_IRQHandler+0x98>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <USART2_IRQHandler+0x94>)
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4413      	add	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <USART2_IRQHandler+0xa0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <USART2_IRQHandler+0xa0>)
 8002270:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <USART2_IRQHandler+0x9c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <USART2_IRQHandler+0x9c>)
 800227c:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <USART2_IRQHandler+0x94>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <USART2_IRQHandler+0x98>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <USART2_IRQHandler+0xa4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d103      	bne.n	8002296 <USART2_IRQHandler+0x7a>
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <USART2_IRQHandler+0x98>)
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <USART2_IRQHandler+0xa8>)
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e002      	b.n	800229c <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <USART2_IRQHandler+0x98>)
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <USART2_IRQHandler+0xa4>)
 800229a:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <USART2_IRQHandler+0x90>)
 800229e:	f007 fbe1 	bl	8009a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200005e0 	.word	0x200005e0
 80022b0:	20000d74 	.word	0x20000d74
 80022b4:	20000d70 	.word	0x20000d70
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000d78 	.word	0x20000d78
 80022c0:	20000730 	.word	0x20000730
 80022c4:	20000a50 	.word	0x20000a50

080022c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <OTG_FS_IRQHandler+0x10>)
 80022ce:	f001 f97c 	bl	80035ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20002290 	.word	0x20002290

080022dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <SystemInit+0x20>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <SystemInit+0x20>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002304:	f7ff ffea 	bl	80022dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <LoopForever+0x6>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	; (8002340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <LoopForever+0xe>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	; (800234c <LoopForever+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232e:	f00d fccd 	bl	800fccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002332:	f7fe feb5 	bl	80010a0 <main>

08002336 <LoopForever>:

LoopForever:
    b LoopForever
 8002336:	e7fe      	b.n	8002336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002338:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002344:	08012f48 	.word	0x08012f48
  ldr r2, =_sbss
 8002348:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800234c:	200029d0 	.word	0x200029d0

08002350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_IRQHandler>

08002352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f961 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002362:	200f      	movs	r0, #15
 8002364:	f000 f80e 	bl	8002384 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	e001      	b.n	8002378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002374:	f7ff fc24 	bl	8001bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002378:	79fb      	ldrb	r3, [r7, #7]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_InitTick+0x6c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_InitTick+0x70>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_InitTick+0x6c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f96d 	bl	800268e <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d809      	bhi.n	80023d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c8:	f000 f937 	bl	800263a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_InitTick+0x74>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e004      	b.n	80023e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e001      	b.n	80023e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000010 	.word	0x20000010
 80023f4:	20000008 	.word	0x20000008
 80023f8:	2000000c 	.word	0x2000000c

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000010 	.word	0x20000010
 8002420:	20000da4 	.word	0x20000da4

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000da4 	.word	0x20000da4

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000010 	.word	0x20000010

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff3e 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff8e 	bl	8002578 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5d 	bl	8002524 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff31 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e08d      	b.n	80027d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_DMA_Init+0x138>)
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d80f      	bhi.n	80026e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <HAL_DMA_Init+0x13c>)
 80026ce:	4413      	add	r3, r2
 80026d0:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <HAL_DMA_Init+0x140>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	009a      	lsls	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_DMA_Init+0x144>)
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
 80026e4:	e00e      	b.n	8002704 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_DMA_Init+0x148>)
 80026ee:	4413      	add	r3, r2
 80026f0:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <HAL_DMA_Init+0x140>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	009a      	lsls	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_DMA_Init+0x14c>)
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fa72 	bl	8002c40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002764:	d102      	bne.n	800276c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002780:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <HAL_DMA_Init+0x104>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d80c      	bhi.n	80027ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa92 	bl	8002cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	e008      	b.n	80027be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40020407 	.word	0x40020407
 80027e4:	bffdfff8 	.word	0xbffdfff8
 80027e8:	cccccccd 	.word	0xcccccccd
 80027ec:	40020000 	.word	0x40020000
 80027f0:	bffdfbf8 	.word	0xbffdfbf8
 80027f4:	40020400 	.word	0x40020400

080027f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Start_IT+0x20>
 8002814:	2302      	movs	r3, #2
 8002816:	e066      	b.n	80028e6 <HAL_DMA_Start_IT+0xee>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d155      	bne.n	80028d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f9b6 	bl	8002bc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 020e 	orr.w	r2, r2, #14
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e00f      	b.n	8002890 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 020a 	orr.w	r2, r2, #10
 800288e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ac:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e005      	b.n	80028e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
 80028e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d008      	beq.n	8002918 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e040      	b.n	800299a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002936:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f003 021c 	and.w	r2, r3, #28
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002964:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002986:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d005      	beq.n	80029ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2204      	movs	r2, #4
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e047      	b.n	8002a5a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 020e 	bic.w	r2, r2, #14
 80029d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 021c 	and.w	r2, r3, #28
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a16:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00c      	beq.n	8002a3a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a38:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    }
  }
  return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 031c 	and.w	r3, r3, #28
 8002a84:	2204      	movs	r2, #4
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d026      	beq.n	8002ade <HAL_DMA_IRQHandler+0x7a>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d021      	beq.n	8002ade <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0204 	bic.w	r2, r2, #4
 8002ab6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f003 021c 	and.w	r2, r3, #28
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d071      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	e06c      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f003 031c 	and.w	r3, r3, #28
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xec>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d029      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 020a 	bic.w	r2, r2, #10
 8002b18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f003 021c 	and.w	r2, r3, #28
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2102      	movs	r1, #2
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d038      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b4e:	e033      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f003 031c 	and.w	r3, r3, #28
 8002b58:	2208      	movs	r2, #8
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02a      	beq.n	8002bba <HAL_DMA_IRQHandler+0x156>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d025      	beq.n	8002bba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020e 	bic.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f003 021c 	and.w	r2, r3, #28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
}
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bd8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f003 021c 	and.w	r2, r3, #28
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d108      	bne.n	8002c22 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c20:	e007      	b.n	8002c32 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	60da      	str	r2, [r3, #12]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d80a      	bhi.n	8002c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6493      	str	r3, [r2, #72]	; 0x48
 8002c68:	e007      	b.n	8002c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c74:	4413      	add	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3b08      	subs	r3, #8
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2201      	movs	r2, #1
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40020407 	.word	0x40020407
 8002cb0:	4002081c 	.word	0x4002081c
 8002cb4:	cccccccd 	.word	0xcccccccd
 8002cb8:	40020880 	.word	0x40020880

08002cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	409a      	lsls	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	1000823f 	.word	0x1000823f
 8002d00:	40020940 	.word	0x40020940

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e166      	b.n	8002fe2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8158 	beq.w	8002fdc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d005      	beq.n	8002d44 <HAL_GPIO_Init+0x40>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d130      	bne.n	8002da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 0201 	and.w	r2, r3, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d017      	beq.n	8002de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d123      	bne.n	8002e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	6939      	ldr	r1, [r7, #16]
 8002e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80b2 	beq.w	8002fdc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	4a60      	ldr	r2, [pc, #384]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6613      	str	r3, [r2, #96]	; 0x60
 8002e84:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e90:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eba:	d02b      	beq.n	8002f14 <HAL_GPIO_Init+0x210>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a52      	ldr	r2, [pc, #328]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d025      	beq.n	8002f10 <HAL_GPIO_Init+0x20c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_GPIO_Init+0x308>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01f      	beq.n	8002f0c <HAL_GPIO_Init+0x208>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a50      	ldr	r2, [pc, #320]	; (8003010 <HAL_GPIO_Init+0x30c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d019      	beq.n	8002f08 <HAL_GPIO_Init+0x204>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a4f      	ldr	r2, [pc, #316]	; (8003014 <HAL_GPIO_Init+0x310>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_GPIO_Init+0x200>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_GPIO_Init+0x314>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00d      	beq.n	8002f00 <HAL_GPIO_Init+0x1fc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_GPIO_Init+0x318>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <HAL_GPIO_Init+0x1f8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a4c      	ldr	r2, [pc, #304]	; (8003020 <HAL_GPIO_Init+0x31c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_GPIO_Init+0x1f4>
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	e00e      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002ef8:	2308      	movs	r3, #8
 8002efa:	e00c      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002efc:	2306      	movs	r3, #6
 8002efe:	e00a      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f00:	2305      	movs	r3, #5
 8002f02:	e008      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e006      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e004      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_GPIO_Init+0x212>
 8002f14:	2300      	movs	r3, #0
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	f002 0203 	and.w	r2, r2, #3
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	4093      	lsls	r3, r2
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f26:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f58:	4a32      	ldr	r2, [pc, #200]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fd6:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_GPIO_Init+0x320>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f ae91 	bne.w	8002d14 <HAL_GPIO_Init+0x10>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40021000 	.word	0x40021000
 8003004:	40010000 	.word	0x40010000
 8003008:	48000400 	.word	0x48000400
 800300c:	48000800 	.word	0x48000800
 8003010:	48000c00 	.word	0x48000c00
 8003014:	48001000 	.word	0x48001000
 8003018:	48001400 	.word	0x48001400
 800301c:	48001800 	.word	0x48001800
 8003020:	48001c00 	.word	0x48001c00
 8003024:	40010400 	.word	0x40010400

08003028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e001      	b.n	800304a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003074:	e002      	b.n	800307c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43d9      	mvns	r1, r3
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	400b      	ands	r3, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e081      	b.n	80031d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd90 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	e006      	b.n	8003144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d104      	bne.n	8003156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e8:	b2db      	uxtb	r3, r3
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	d138      	bne.n	800327e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003216:	2302      	movs	r3, #2
 8003218:	e032      	b.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2224      	movs	r2, #36	; 0x24
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003248:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d139      	bne.n	8003316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e033      	b.n	8003318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b08f      	sub	sp, #60	; 0x3c
 8003328:	af0a      	add	r7, sp, #40	; 0x28
 800332a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e116      	b.n	8003564 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f00c f8d7 	bl	800f504 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f008 fdd2 	bl	800bf1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	687e      	ldr	r6, [r7, #4]
 8003382:	466d      	mov	r5, sp
 8003384:	f106 0410 	add.w	r4, r6, #16
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003394:	e885 0003 	stmia.w	r5, {r0, r1}
 8003398:	1d33      	adds	r3, r6, #4
 800339a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800339c:	6838      	ldr	r0, [r7, #0]
 800339e:	f008 fce5 	bl	800bd6c <USB_CoreInit>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d7      	b.n	8003564 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f008 fdc0 	bl	800bf40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e04a      	b.n	800345c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	333d      	adds	r3, #61	; 0x3d
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	333c      	adds	r3, #60	; 0x3c
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	b298      	uxth	r0, r3
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3344      	adds	r3, #68	; 0x44
 8003402:	4602      	mov	r2, r0
 8003404:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3340      	adds	r3, #64	; 0x40
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	3348      	adds	r3, #72	; 0x48
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	334c      	adds	r3, #76	; 0x4c
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3354      	adds	r3, #84	; 0x54
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	3301      	adds	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d3af      	bcc.n	80033c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e044      	b.n	80034f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	3301      	adds	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3b5      	bcc.n	800346c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	687e      	ldr	r6, [r7, #4]
 8003508:	466d      	mov	r5, sp
 800350a:	f106 0410 	add.w	r4, r6, #16
 800350e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800351a:	e885 0003 	stmia.w	r5, {r0, r1}
 800351e:	1d33      	adds	r3, r6, #4
 8003520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003522:	6838      	ldr	r0, [r7, #0]
 8003524:	f008 fd58 	bl	800bfd8 <USB_DevInit>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e014      	b.n	8003564 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f001 f882 	bl	800465c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f009 fde0 	bl	800d122 <USB_DevDisconnect>

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800356c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_PCD_Start+0x1c>
 8003584:	2302      	movs	r3, #2
 8003586:	e01c      	b.n	80035c2 <HAL_PCD_Start+0x56>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f008 fca7 	bl	800befc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f009 fd94 	bl	800d0e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035ca:	b590      	push	{r4, r7, lr}
 80035cc:	b08d      	sub	sp, #52	; 0x34
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f009 fe52 	bl	800d28a <USB_GetMode>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 847e 	bne.w	8003eea <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f009 fdb6 	bl	800d164 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8474 	beq.w	8003ee8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f009 fda3 	bl	800d164 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d107      	bne.n	8003638 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 0202 	and.w	r2, r2, #2
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f009 fd91 	bl	800d164 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b10      	cmp	r3, #16
 800364a:	d161      	bne.n	8003710 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0210 	bic.w	r2, r2, #16
 800365a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	0c5b      	lsrs	r3, r3, #17
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2b02      	cmp	r3, #2
 8003686:	d124      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d035      	beq.n	8003700 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800369e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	6a38      	ldr	r0, [r7, #32]
 80036a8:	f009 fbc8 	bl	800ce3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b8:	441a      	add	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ca:	441a      	add	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	621a      	str	r2, [r3, #32]
 80036d0:	e016      	b.n	8003700 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	0c5b      	lsrs	r3, r3, #17
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d110      	bne.n	8003700 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036e4:	2208      	movs	r2, #8
 80036e6:	4619      	mov	r1, r3
 80036e8:	6a38      	ldr	r0, [r7, #32]
 80036ea:	f009 fba7 	bl	800ce3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fa:	441a      	add	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0210 	orr.w	r2, r2, #16
 800370e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f009 fd25 	bl	800d164 <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003724:	f040 80a7 	bne.w	8003876 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f009 fd2a 	bl	800d18a <USB_ReadDevAllOutEpInterrupt>
 8003736:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003738:	e099      	b.n	800386e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808e 	beq.w	8003862 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f009 fd4e 	bl	800d1f2 <USB_ReadDevOutEPInterrupt>
 8003756:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	461a      	mov	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fe96 	bl	80044a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	2308      	movs	r3, #8
 8003796:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fed2 	bl	8004544 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	461a      	mov	r2, r3
 80037b8:	2310      	movs	r3, #16
 80037ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d030      	beq.n	8003828 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d109      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	78db      	ldrb	r3, [r3, #3]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f00b ffbb 	bl	800f78c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	461a      	mov	r2, r3
 8003824:	2302      	movs	r3, #2
 8003826:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	2320      	movs	r3, #32
 8003842:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003860:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af62 	bne.w	800373a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f009 fc72 	bl	800d164 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800388a:	f040 80a4 	bne.w	80039d6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f009 fc93 	bl	800d1be <USB_ReadDevAllInEpInterrupt>
 8003898:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800389e:	e096      	b.n	80039ce <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 808b 	beq.w	80039c2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f009 fcb9 	bl	800d22e <USB_ReadDevInEPInterrupt>
 80038bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	2201      	movs	r2, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69f9      	ldr	r1, [r7, #28]
 80038e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e8:	4013      	ands	r3, r2
 80038ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	2301      	movs	r3, #1
 80038fc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f00b feac 	bl	800f662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003920:	461a      	mov	r2, r3
 8003922:	2308      	movs	r3, #8
 8003924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	2310      	movs	r3, #16
 8003940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	461a      	mov	r2, r3
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396a:	6a38      	ldr	r0, [r7, #32]
 800396c:	f008 fc80 	bl	800c270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3338      	adds	r3, #56	; 0x38
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	3304      	adds	r3, #4
 8003982:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	78db      	ldrb	r3, [r3, #3]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00b ff09 	bl	800f7b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	461a      	mov	r2, r3
 80039ac:	2302      	movs	r3, #2
 80039ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fcea 	bl	8004396 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	3301      	adds	r3, #1
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f47f af65 	bne.w	80038a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f009 fbc2 	bl	800d164 <USB_ReadInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ea:	d122      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fe45 	bl	80046a4 <HAL_PCDEx_LPM_Callback>
 8003a1a:	e002      	b.n	8003a22 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f00b fe8d 	bl	800f73c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f009 fb94 	bl	800d164 <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a46:	d112      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f00b fe49 	bl	800f6f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f009 fb76 	bl	800d164 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a82:	d121      	bne.n	8003ac8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003a92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d111      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ab8:	2101      	movs	r1, #1
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fdf2 	bl	80046a4 <HAL_PCDEx_LPM_Callback>
 8003ac0:	e002      	b.n	8003ac8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f00b fe14 	bl	800f6f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f009 fb49 	bl	800d164 <USB_ReadInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	f040 80b5 	bne.w	8003c4a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2110      	movs	r1, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f008 fbb8 	bl	800c270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b04:	e046      	b.n	8003b94 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	461a      	mov	r2, r3
 8003b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	3301      	adds	r3, #1
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3b3      	bcc.n	8003b06 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bca:	f043 030b 	orr.w	r3, r3, #11
 8003bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be0:	f043 030b 	orr.w	r3, r3, #11
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	e015      	b.n	8003c14 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003bfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f043 030b 	orr.w	r3, r3, #11
 8003c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f009 fb59 	bl	800d2ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f009 fa88 	bl	800d164 <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5e:	d124      	bne.n	8003caa <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f009 fb1e 	bl	800d2a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f008 fb7b 	bl	800c36a <USB_GetDevSpeed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681c      	ldr	r4, [r3, #0]
 8003c80:	f001 fbd0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8003c84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f008 f898 	bl	800bdc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f00b fd0c 	bl	800f6b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f009 fa58 	bl	800d164 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f00b fce9 	bl	800f696 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f002 0208 	and.w	r2, r2, #8
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f009 fa43 	bl	800d164 <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d122      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e014      	b.n	8003d24 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fb0b 	bl	8004334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	3301      	adds	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3e5      	bcc.n	8003cfa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f009 fa16 	bl	800d164 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d42:	d13b      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
 8003d48:	e02b      	b.n	8003da2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3340      	adds	r3, #64	; 0x40
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d115      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da12      	bge.n	8003d9c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	333f      	adds	r3, #63	; 0x3f
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 facc 	bl	8004334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	3301      	adds	r3, #1
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d3ce      	bcc.n	8003d4a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f009 f9cf 	bl	800d164 <USB_ReadInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	d155      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e045      	b.n	8003e64 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d12e      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da2b      	bge.n	8003e5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d121      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5a:	6053      	str	r3, [r2, #4]
            break;
 8003e5c:	e007      	b.n	8003e6e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	3301      	adds	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3b4      	bcc.n	8003dd8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f009 f96e 	bl	800d164 <USB_ReadInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d10a      	bne.n	8003eaa <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f00b fc9d 	bl	800f7d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f009 f958 	bl	800d164 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d115      	bne.n	8003eea <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f00b fc8d 	bl	800f7f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e000      	b.n	8003eea <HAL_PCD_IRQHandler+0x920>
      return;
 8003ee8:	bf00      	nop
    }
  }
}
 8003eea:	3734      	adds	r7, #52	; 0x34
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd90      	pop	{r4, r7, pc}

08003ef0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_PCD_SetAddress+0x1a>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e013      	b.n	8003f32 <HAL_PCD_SetAddress+0x42>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f009 f8b6 	bl	800d094 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	4608      	mov	r0, r1
 8003f44:	4611      	mov	r1, r2
 8003f46:	461a      	mov	r2, r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	70fb      	strb	r3, [r7, #3]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	803b      	strh	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da0f      	bge.n	8003f80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3338      	adds	r3, #56	; 0x38
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	705a      	strb	r2, [r3, #1]
 8003f7e:	e00f      	b.n	8003fa0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fac:	883a      	ldrh	r2, [r7, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	78ba      	ldrb	r2, [r7, #2]
 8003fb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fca:	78bb      	ldrb	r3, [r7, #2]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d102      	bne.n	8003fd6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_Open+0xaa>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e00e      	b.n	8004002 <HAL_PCD_EP_Open+0xc8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f008 f9d8 	bl	800c3a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004000:	7afb      	ldrb	r3, [r7, #11]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401a:	2b00      	cmp	r3, #0
 800401c:	da0f      	bge.n	800403e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	3338      	adds	r3, #56	; 0x38
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	705a      	strb	r2, [r3, #1]
 800403c:	e00f      	b.n	800405e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_PCD_EP_Close+0x6e>
 8004074:	2302      	movs	r3, #2
 8004076:	e00e      	b.n	8004096 <HAL_PCD_EP_Close+0x8c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68f9      	ldr	r1, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	f008 fa16 	bl	800c4b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	460b      	mov	r3, r1
 80040ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	7afb      	ldrb	r3, [r7, #11]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ec:	7afb      	ldrb	r3, [r7, #11]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f008 fc97 	bl	800ca30 <USB_EP0StartXfer>
 8004102:	e005      	b.n	8004110 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	4618      	mov	r0, r3
 800410c:	f008 fab0 	bl	800c670 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800413c:	681b      	ldr	r3, [r3, #0]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	460b      	mov	r3, r1
 8004158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f003 020f 	and.w	r2, r3, #15
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2201      	movs	r2, #1
 8004188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	b2da      	uxtb	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f008 fc42 	bl	800ca30 <USB_EP0StartXfer>
 80041ac:	e005      	b.n	80041ba <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f008 fa5b 	bl	800c670 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d901      	bls.n	80041e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e04e      	b.n	8004280 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da0f      	bge.n	800420a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	3338      	adds	r3, #56	; 0x38
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	705a      	strb	r2, [r3, #1]
 8004208:	e00d      	b.n	8004226 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_PCD_EP_SetStall+0x82>
 8004242:	2302      	movs	r3, #2
 8004244:	e01c      	b.n	8004280 <HAL_PCD_EP_SetStall+0xbc>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	4618      	mov	r0, r3
 8004256:	f008 fe49 	bl	800ceec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f009 f83b 	bl	800d2ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d901      	bls.n	80042a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e042      	b.n	800432c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da0f      	bge.n	80042ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	3338      	adds	r3, #56	; 0x38
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4413      	add	r3, r2
 80042c2:	3304      	adds	r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	705a      	strb	r2, [r3, #1]
 80042cc:	e00f      	b.n	80042ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_PCD_EP_ClrStall+0x86>
 800430a:	2302      	movs	r3, #2
 800430c:	e00e      	b.n	800432c <HAL_PCD_EP_ClrStall+0xa4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	4618      	mov	r0, r3
 800431e:	f008 fe53 	bl	800cfc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004344:	2b00      	cmp	r3, #0
 8004346:	da0c      	bge.n	8004362 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	3338      	adds	r3, #56	; 0x38
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	3304      	adds	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e00c      	b.n	800437c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 020f 	and.w	r2, r3, #15
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	3304      	adds	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	4618      	mov	r0, r3
 8004384:	f008 fc76 	bl	800cc74 <USB_EPStopXfer>
 8004388:	4603      	mov	r3, r0
 800438a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800438c:	7afb      	ldrb	r3, [r7, #11]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	3338      	adds	r3, #56	; 0x38
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d901      	bls.n	80043ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d902      	bls.n	80043ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3303      	adds	r3, #3
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043f2:	e026      	b.n	8004442 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d902      	bls.n	8004410 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3303      	adds	r3, #3
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6919      	ldr	r1, [r3, #16]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	b29b      	uxth	r3, r3
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f008 fccf 	bl	800cdc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1a      	ldr	r2, [r3, #32]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	b29b      	uxth	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	d809      	bhi.n	800446c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004460:	429a      	cmp	r2, r3
 8004462:	d203      	bcs.n	800446c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1c3      	bne.n	80043f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	d811      	bhi.n	800449c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2201      	movs	r2, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	43db      	mvns	r3, r3
 8004492:	6939      	ldr	r1, [r7, #16]
 8004494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004498:	4013      	ands	r3, r2
 800449a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	333c      	adds	r3, #60	; 0x3c
 80044c0:	3304      	adds	r3, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <PCD_EP_OutXfrComplete_int+0x98>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d124      	bne.n	8004528 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	6093      	str	r3, [r2, #8]
 80044fc:	e01a      	b.n	8004534 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	2320      	movs	r3, #32
 8004518:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f00b f883 	bl	800f62c <HAL_PCD_DataOutStageCallback>
 8004526:	e005      	b.n	8004534 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f00b f87c 	bl	800f62c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	4f54310a 	.word	0x4f54310a

08004544 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	333c      	adds	r3, #60	; 0x3c
 800455c:	3304      	adds	r3, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90e      	bls.n	8004598 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f00b f835 	bl	800f608 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	4f54300a 	.word	0x4f54300a

080045ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
 80045b8:	4613      	mov	r3, r2
 80045ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045ca:	883b      	ldrh	r3, [r7, #0]
 80045cc:	0419      	lsls	r1, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
 80045d8:	e028      	b.n	800462c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4413      	add	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
 80045ec:	e00d      	b.n	800460a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	3340      	adds	r3, #64	; 0x40
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	3301      	adds	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	3b01      	subs	r3, #1
 8004610:	429a      	cmp	r2, r3
 8004612:	d3ec      	bcc.n	80045ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004614:	883b      	ldrh	r3, [r7, #0]
 8004616:	0418      	lsls	r0, r3, #16
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	3b01      	subs	r3, #1
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4302      	orrs	r2, r0
 8004624:	3340      	adds	r3, #64	; 0x40
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	f043 0303 	orr.w	r3, r3, #3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d102      	bne.n	80046d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80046ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d2:	e00b      	b.n	80046ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e2:	d102      	bne.n	80046ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80046e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e8:	e000      	b.n	80046ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80046ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40007000 	.word	0x40007000

080046fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d141      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d131      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004718:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471e:	4a46      	ldr	r2, [pc, #280]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004728:	4b43      	ldr	r3, [pc, #268]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2232      	movs	r2, #50	; 0x32
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a3f      	ldr	r2, [pc, #252]	; (8004840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	0c9b      	lsrs	r3, r3, #18
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	e002      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004756:	4b38      	ldr	r3, [pc, #224]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004762:	d102      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f2      	bne.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476a:	4b33      	ldr	r3, [pc, #204]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d158      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e057      	b.n	800482c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004782:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800478c:	e04d      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d141      	bne.n	800481a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d131      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047aa:	4a23      	ldr	r2, [pc, #140]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2232      	movs	r2, #50	; 0x32
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047da:	e002      	b.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d102      	bne.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f2      	bne.n	80047dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004802:	d112      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e011      	b.n	800482c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004818:	e007      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004822:	4a05      	ldr	r2, [pc, #20]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004828:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40007000 	.word	0x40007000
 800483c:	20000008 	.word	0x20000008
 8004840:	431bde83 	.word	0x431bde83

08004844 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_PWREx_EnableVddUSB+0x1c>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_PWREx_EnableVddUSB+0x1c>)
 800484e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004852:	6053      	str	r3, [r2, #4]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40007000 	.word	0x40007000

08004864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f000 bc08 	b.w	8005088 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004878:	4b96      	ldr	r3, [pc, #600]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004882:	4b94      	ldr	r3, [pc, #592]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80e4 	beq.w	8004a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_RCC_OscConfig+0x4c>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	f040 808b 	bne.w	80049be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 8087 	bne.w	80049be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x64>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e3df      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	4b81      	ldr	r3, [pc, #516]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <HAL_RCC_OscConfig+0x7e>
 80048d8:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e0:	e005      	b.n	80048ee <HAL_RCC_OscConfig+0x8a>
 80048e2:	4b7c      	ldr	r3, [pc, #496]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d223      	bcs.n	800493a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fdf8 	bl	80054ec <RCC_SetFlashLatencyFromMSIRange>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e3c0      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004906:	4b73      	ldr	r3, [pc, #460]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a72      	ldr	r2, [pc, #456]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 800490c:	f043 0308 	orr.w	r3, r3, #8
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b70      	ldr	r3, [pc, #448]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	496d      	ldr	r1, [pc, #436]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004924:	4b6b      	ldr	r3, [pc, #428]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	4968      	ldr	r1, [pc, #416]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
 8004938:	e025      	b.n	8004986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493a:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a65      	ldr	r2, [pc, #404]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4960      	ldr	r1, [pc, #384]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004958:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	495b      	ldr	r1, [pc, #364]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fdb8 	bl	80054ec <RCC_SetFlashLatencyFromMSIRange>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e380      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004986:	f000 fcc1 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	4950      	ldr	r1, [pc, #320]	; (8004ad8 <HAL_RCC_OscConfig+0x274>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <HAL_RCC_OscConfig+0x278>)
 80049a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049a6:	4b4e      	ldr	r3, [pc, #312]	; (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd fcea 	bl	8002384 <HAL_InitTick>
 80049b0:	4603      	mov	r3, r0
 80049b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d052      	beq.n	8004a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	e364      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d032      	beq.n	8004a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049c6:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a42      	ldr	r2, [pc, #264]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049d2:	f7fd fd27 	bl	8002424 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049da:	f7fd fd23 	bl	8002424 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e34d      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ec:	4b39      	ldr	r3, [pc, #228]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a35      	ldr	r2, [pc, #212]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049fe:	f043 0308 	orr.w	r3, r3, #8
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4930      	ldr	r1, [pc, #192]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a16:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	492b      	ldr	r1, [pc, #172]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
 8004a2a:	e01a      	b.n	8004a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a2c:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a28      	ldr	r2, [pc, #160]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a38:	f7fd fcf4 	bl	8002424 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a40:	f7fd fcf0 	bl	8002424 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e31a      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1dc>
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d073      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_OscConfig+0x21c>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d10e      	bne.n	8004a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d063      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d15f      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e2f7      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e025      	b.n	8004afc <HAL_RCC_OscConfig+0x298>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab8:	d114      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x280>
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a02      	ldr	r2, [pc, #8]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e013      	b.n	8004afc <HAL_RCC_OscConfig+0x298>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08012ad4 	.word	0x08012ad4
 8004adc:	20000008 	.word	0x20000008
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a9f      	ldr	r2, [pc, #636]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a9c      	ldr	r2, [pc, #624]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fc8e 	bl	8002424 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fc8a 	bl	8002424 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e2b4      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1e:	4b92      	ldr	r3, [pc, #584]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x2a8>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fc7a 	bl	8002424 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fd fc76 	bl	8002424 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e2a0      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x2d0>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d060      	beq.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_OscConfig+0x310>
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	d119      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d116      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b74:	4b7c      	ldr	r3, [pc, #496]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_OscConfig+0x328>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e27d      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8c:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	4973      	ldr	r1, [pc, #460]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba0:	e040      	b.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d023      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004baa:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fc35 	bl	8002424 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fc31 	bl	8002424 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e25b      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	495f      	ldr	r1, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	e018      	b.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5c      	ldr	r2, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7fd fc11 	bl	8002424 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fd fc0d 	bl	8002424 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e237      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c18:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d03c      	beq.n	8004caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01c      	beq.n	8004c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c38:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd fbec 	bl	8002424 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd fbe8 	bl	8002424 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e212      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ef      	beq.n	8004c50 <HAL_RCC_OscConfig+0x3ec>
 8004c70:	e01b      	b.n	8004caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c78:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fd fbcf 	bl	8002424 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7fd fbcb 	bl	8002424 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1f5      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1ef      	bne.n	8004c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80a6 	beq.w	8004e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce4:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <HAL_RCC_OscConfig+0x508>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_OscConfig+0x508>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_RCC_OscConfig+0x508>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfc:	f7fd fb92 	bl	8002424 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d04:	f7fd fb8e 	bl	8002424 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1b8      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_RCC_OscConfig+0x508>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d108      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4d8>
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3a:	e029      	b.n	8004d90 <HAL_RCC_OscConfig+0x52c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d115      	bne.n	8004d70 <HAL_RCC_OscConfig+0x50c>
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	4a03      	ldr	r2, [pc, #12]	; (8004d68 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d64:	e014      	b.n	8004d90 <HAL_RCC_OscConfig+0x52c>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	4b9d      	ldr	r3, [pc, #628]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	4a9c      	ldr	r2, [pc, #624]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d80:	4b99      	ldr	r3, [pc, #612]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	4a98      	ldr	r2, [pc, #608]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d016      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fd fb44 	bl	8002424 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fd fb40 	bl	8002424 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e168      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	4b8c      	ldr	r3, [pc, #560]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ed      	beq.n	8004da0 <HAL_RCC_OscConfig+0x53c>
 8004dc4:	e015      	b.n	8004df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fd fb2d 	bl	8002424 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fd fb29 	bl	8002424 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e151      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de4:	4b80      	ldr	r3, [pc, #512]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ed      	bne.n	8004dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df8:	4b7b      	ldr	r3, [pc, #492]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	4a7a      	ldr	r2, [pc, #488]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d03c      	beq.n	8004e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e18:	4b73      	ldr	r3, [pc, #460]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fd fafc 	bl	8002424 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e30:	f7fd faf8 	bl	8002424 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e122      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e42:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ef      	beq.n	8004e30 <HAL_RCC_OscConfig+0x5cc>
 8004e50:	e01b      	b.n	8004e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e58:	4a63      	ldr	r2, [pc, #396]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fd fadf 	bl	8002424 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e6a:	f7fd fadb 	bl	8002424 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e105      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e7c:	4b5a      	ldr	r3, [pc, #360]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ef      	bne.n	8004e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80f9 	beq.w	8005086 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f040 80cf 	bne.w	800503c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e9e:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0203 	and.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d12c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d123      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d11b      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d113      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	3b01      	subs	r3, #1
 8004f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d071      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d068      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f12:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0ac      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2d      	ldr	r2, [pc, #180]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f3a:	f7fd fa73 	bl	8002424 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd fa6f 	bl	8002424 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e099      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCC_OscConfig+0x788>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f7a:	0212      	lsls	r2, r2, #8
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f82:	0852      	lsrs	r2, r2, #1
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0552      	lsls	r2, r2, #21
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0652      	lsls	r2, r2, #25
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f9a:	06d2      	lsls	r2, r2, #27
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	4912      	ldr	r1, [pc, #72]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0f      	ldr	r2, [pc, #60]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fbc:	f7fd fa32 	bl	8002424 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fd fa2e 	bl	8002424 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e058      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <HAL_RCC_OscConfig+0x784>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fe2:	e050      	b.n	8005086 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e04f      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff0:	4b27      	ldr	r3, [pc, #156]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d144      	bne.n	8005086 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a20      	ldr	r2, [pc, #128]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 800500e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005014:	f7fd fa06 	bl	8002424 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd fa02 	bl	8002424 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e02c      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x7b8>
 800503a:	e024      	b.n	8005086 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d01f      	beq.n	8005082 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8005048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fd f9e9 	bl	8002424 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005056:	f7fd f9e5 	bl	8002424 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e00f      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	4905      	ldr	r1, [pc, #20]	; (8005090 <HAL_RCC_OscConfig+0x82c>)
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_OscConfig+0x830>)
 800507c:	4013      	ands	r3, r2
 800507e:	60cb      	str	r3, [r1, #12]
 8005080:	e001      	b.n	8005086 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	feeefffc 	.word	0xfeeefffc

08005098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e11d      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b90      	ldr	r3, [pc, #576]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b8d      	ldr	r3, [pc, #564]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	498b      	ldr	r1, [pc, #556]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b89      	ldr	r3, [pc, #548]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e105      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b81      	ldr	r3, [pc, #516]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b7e      	ldr	r3, [pc, #504]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	497b      	ldr	r1, [pc, #492]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d079      	beq.n	800520e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d11e      	bne.n	8005160 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005122:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0dc      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005132:	f000 fa35 	bl	80055a0 <RCC_GetSysClockFreqFromPLLSource>
 8005136:	4603      	mov	r3, r0
 8005138:	4a70      	ldr	r2, [pc, #448]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d946      	bls.n	80051cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d140      	bne.n	80051cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800514a:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005152:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e035      	b.n	80051cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d107      	bne.n	8005178 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005168:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d115      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0b9      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005180:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0ad      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005190:	4b59      	ldr	r3, [pc, #356]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0a5      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051a0:	f000 f8b4 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4a55      	ldr	r2, [pc, #340]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d90f      	bls.n	80051cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051ac:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051b8:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c0:	4a4d      	ldr	r2, [pc, #308]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 0203 	bic.w	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4947      	ldr	r1, [pc, #284]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051de:	f7fd f921 	bl	8002424 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e4:	e00a      	b.n	80051fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e6:	f7fd f91d 	bl	8002424 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e077      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fc:	4b3e      	ldr	r3, [pc, #248]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 020c 	and.w	r2, r3, #12
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	429a      	cmp	r2, r3
 800520c:	d1eb      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b80      	cmp	r3, #128	; 0x80
 8005212:	d105      	bne.n	8005220 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005214:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800521a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005238:	429a      	cmp	r2, r3
 800523a:	d208      	bcs.n	800524e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	492b      	ldr	r1, [pc, #172]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524e:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d210      	bcs.n	800527e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 020f 	bic.w	r2, r3, #15
 8005264:	4923      	ldr	r1, [pc, #140]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_RCC_ClockConfig+0x25c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e036      	b.n	80052ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4918      	ldr	r1, [pc, #96]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4910      	ldr	r1, [pc, #64]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052bc:	f000 f826 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	490c      	ldr	r1, [pc, #48]	; (8005300 <HAL_RCC_ClockConfig+0x268>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x26c>)
 80052da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x270>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd f84f 	bl	8002384 <HAL_InitTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	04c4b400 	.word	0x04c4b400
 8005300:	08012ad4 	.word	0x08012ad4
 8005304:	20000008 	.word	0x20000008
 8005308:	2000000c 	.word	0x2000000c

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d121      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e004      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d101      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 8005392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d134      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xac>
 80053b0:	e005      	b.n	80053be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	fb03 f202 	mul.w	r2, r3, r2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0e5b      	lsrs	r3, r3, #25
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	3301      	adds	r3, #1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	08012aec 	.word	0x08012aec
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	08012ae4 	.word	0x08012ae4

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800546c:	f7ff ffda 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	08012ae4 	.word	0x08012ae4

08005494 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_EnableCSS+0x1c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <HAL_RCC_EnableCSS+0x1c>)
 800549e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a2:	6013      	str	r3, [r2, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000

080054b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c4:	d105      	bne.n	80054d2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054c6:	f000 f809 	bl	80054dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054ca:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d0:	621a      	str	r2, [r3, #32]
  }
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054f8:	4b27      	ldr	r3, [pc, #156]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005504:	f7ff f8da 	bl	80046bc <HAL_PWREx_GetVoltageRange>
 8005508:	6178      	str	r0, [r7, #20]
 800550a:	e014      	b.n	8005536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800550c:	4b22      	ldr	r3, [pc, #136]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	4a21      	ldr	r2, [pc, #132]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005516:	6593      	str	r3, [r2, #88]	; 0x58
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005524:	f7ff f8ca 	bl	80046bc <HAL_PWREx_GetVoltageRange>
 8005528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005534:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d10b      	bne.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d913      	bls.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2ba0      	cmp	r3, #160	; 0xa0
 8005548:	d902      	bls.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800554a:	2302      	movs	r3, #2
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e00d      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005550:	2301      	movs	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e00a      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b7f      	cmp	r3, #127	; 0x7f
 800555a:	d902      	bls.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800555c:	2302      	movs	r3, #2
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e004      	b.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d101      	bne.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005568:	2301      	movs	r3, #1
 800556a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 020f 	bic.w	r2, r3, #15
 8005574:	4909      	ldr	r1, [pc, #36]	; (800559c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40021000 	.word	0x40021000
 800559c:	40022000 	.word	0x40022000

080055a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d00b      	beq.n	80055ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d825      	bhi.n	8005608 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d008      	beq.n	80055d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d11f      	bne.n	8005608 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055ca:	613b      	str	r3, [r7, #16]
    break;
 80055cc:	e01f      	b.n	800560e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80055ce:	4b25      	ldr	r3, [pc, #148]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80055d0:	613b      	str	r3, [r7, #16]
    break;
 80055d2:	e01c      	b.n	800560e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055d4:	4b21      	ldr	r3, [pc, #132]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055e0:	4b1e      	ldr	r3, [pc, #120]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e005      	b.n	80055fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055fc:	4a1a      	ldr	r2, [pc, #104]	; (8005668 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005604:	613b      	str	r3, [r7, #16]
    break;
 8005606:	e002      	b.n	800560e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
    break;
 800560c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	3301      	adds	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800561c:	4b0f      	ldr	r3, [pc, #60]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	fb03 f202 	mul.w	r2, r3, r2
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0e5b      	lsrs	r3, r3, #25
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	3301      	adds	r3, #1
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800564e:	683b      	ldr	r3, [r7, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40021000 	.word	0x40021000
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200
 8005668:	08012aec 	.word	0x08012aec

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005674:	2300      	movs	r3, #0
 8005676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005678:	2300      	movs	r3, #0
 800567a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005684:	2b00      	cmp	r3, #0
 8005686:	d040      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d02a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d825      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005694:	2b60      	cmp	r3, #96	; 0x60
 8005696:	d026      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005698:	2b60      	cmp	r3, #96	; 0x60
 800569a:	d821      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d006      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d81d      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d010      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80056ac:	e018      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056ae:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	4a88      	ldr	r2, [pc, #544]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056ba:	e015      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fa24 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3320      	adds	r3, #32
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fb0f 	bl	8006cf8 <RCCEx_PLLSAI2_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056de:	e003      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	74fb      	strb	r3, [r7, #19]
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e8:	7cfb      	ldrb	r3, [r7, #19]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ee:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	4975      	ldr	r1, [pc, #468]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005704:	e001      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d047      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571e:	d030      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d82a      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572a:	d02a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800572c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005730:	d824      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005736:	d008      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d81e      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d010      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005748:	e018      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800574a:	4b62      	ldr	r3, [pc, #392]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	4a61      	ldr	r2, [pc, #388]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005756:	e015      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f9d6 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005768:	e00c      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3320      	adds	r3, #32
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fac1 	bl	8006cf8 <RCCEx_PLLSAI2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	74fb      	strb	r3, [r7, #19]
      break;
 8005780:	e000      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800578a:	4b52      	ldr	r3, [pc, #328]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	494e      	ldr	r1, [pc, #312]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80057a0:	e001      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 809f 	beq.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b4:	2300      	movs	r3, #0
 80057b6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057b8:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	4a40      	ldr	r2, [pc, #256]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6593      	str	r3, [r2, #88]	; 0x58
 80057da:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e6:	2301      	movs	r3, #1
 80057e8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ea:	4b3b      	ldr	r3, [pc, #236]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a3a      	ldr	r2, [pc, #232]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f6:	f7fc fe15 	bl	8002424 <HAL_GetTick>
 80057fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057fc:	e009      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7fc fe11 	bl	8002424 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d902      	bls.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	74fb      	strb	r3, [r7, #19]
        break;
 8005810:	e005      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005812:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ef      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d15b      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005824:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01f      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d019      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800586e:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc fdd0 	bl	8002424 <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	e00b      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005888:	f7fc fdcc 	bl	8002424 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f241 3288 	movw	r2, #5000	; 0x1388
 8005896:	4293      	cmp	r3, r2
 8005898:	d902      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	74fb      	strb	r3, [r7, #19]
            break;
 800589e:	e006      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ec      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10c      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058cc:	e008      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	74bb      	strb	r3, [r7, #18]
 80058d2:	e005      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e0:	7c7b      	ldrb	r3, [r7, #17]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4ba0      	ldr	r3, [pc, #640]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a9f      	ldr	r2, [pc, #636]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058fe:	4b9a      	ldr	r3, [pc, #616]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f023 0203 	bic.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	4996      	ldr	r1, [pc, #600]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005920:	4b91      	ldr	r3, [pc, #580]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005926:	f023 020c 	bic.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	498e      	ldr	r1, [pc, #568]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005942:	4b89      	ldr	r3, [pc, #548]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	4985      	ldr	r1, [pc, #532]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005964:	4b80      	ldr	r3, [pc, #512]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005972:	497d      	ldr	r1, [pc, #500]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005986:	4b78      	ldr	r3, [pc, #480]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	4974      	ldr	r1, [pc, #464]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a8:	4b6f      	ldr	r3, [pc, #444]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b6:	496c      	ldr	r1, [pc, #432]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ca:	4b67      	ldr	r3, [pc, #412]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d8:	4963      	ldr	r1, [pc, #396]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ec:	4b5e      	ldr	r3, [pc, #376]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fa:	495b      	ldr	r1, [pc, #364]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0e:	4b56      	ldr	r3, [pc, #344]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	4952      	ldr	r1, [pc, #328]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a30:	4b4d      	ldr	r3, [pc, #308]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	494a      	ldr	r1, [pc, #296]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a52:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	4941      	ldr	r1, [pc, #260]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a74:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a7a:	f023 0203 	bic.w	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a82:	4939      	ldr	r1, [pc, #228]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d028      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a96:	4b34      	ldr	r3, [pc, #208]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa4:	4930      	ldr	r1, [pc, #192]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab4:	d106      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab6:	4b2c      	ldr	r3, [pc, #176]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	4a2b      	ldr	r2, [pc, #172]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac0:	60d3      	str	r3, [r2, #12]
 8005ac2:	e011      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f81b 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d04d      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005afc:	d108      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005afe:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b04:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b0e:	e012      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b10:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b2e:	490e      	ldr	r1, [pc, #56]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4a:	60d3      	str	r3, [r2, #12]
 8005b4c:	e020      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a02      	ldr	r2, [pc, #8]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b62:	60d3      	str	r3, [r2, #12]
 8005b64:	e014      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 ffc7 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d028      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9c:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005baa:	4947      	ldr	r1, [pc, #284]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bba:	d106      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bbc:	4b42      	ldr	r3, [pc, #264]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a41      	ldr	r2, [pc, #260]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc6:	60d3      	str	r3, [r2, #12]
 8005bc8:	e011      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bd2:	d10c      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff98 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01e      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bfa:	4b33      	ldr	r3, [pc, #204]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0a:	492f      	ldr	r1, [pc, #188]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	2102      	movs	r1, #2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 ff73 	bl	8006b10 <RCCEx_PLLSAI1_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c44:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4a:	f023 0204 	bic.w	r2, r3, #4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	491c      	ldr	r1, [pc, #112]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6e:	f023 0218 	bic.w	r2, r3, #24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	4913      	ldr	r1, [pc, #76]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c9c:	490a      	ldr	r1, [pc, #40]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cae:	d105      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a04      	ldr	r2, [pc, #16]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000

08005ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cde:	d13e      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ce0:	4bb6      	ldr	r3, [pc, #728]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf2:	d028      	beq.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfa:	f200 86f4 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d04:	d005      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d00e      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d0e:	f000 beea 	b.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d12:	4baa      	ldr	r3, [pc, #680]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	f040 86e4 	bne.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	61fb      	str	r3, [r7, #28]
      break;
 8005d28:	f000 bedf 	b.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d2c:	4ba3      	ldr	r3, [pc, #652]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	f040 86d9 	bne.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005d3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d40:	61fb      	str	r3, [r7, #28]
      break;
 8005d42:	f000 bed4 	b.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d46:	4b9d      	ldr	r3, [pc, #628]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d52:	f040 86ce 	bne.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005d56:	4b9a      	ldr	r3, [pc, #616]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005d58:	61fb      	str	r3, [r7, #28]
      break;
 8005d5a:	f000 beca 	b.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d5e:	4b97      	ldr	r3, [pc, #604]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d036      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d840      	bhi.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d003      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005d80:	e039      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d82:	4b8e      	ldr	r3, [pc, #568]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d116      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d8e:	4b8b      	ldr	r3, [pc, #556]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005d9a:	4b88      	ldr	r3, [pc, #544]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	e005      	b.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005da6:	4b85      	ldr	r3, [pc, #532]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	4a84      	ldr	r2, [pc, #528]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005dba:	e01f      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
      break;
 8005dc0:	e01c      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc2:	4b7e      	ldr	r3, [pc, #504]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d102      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005dd0:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005dd2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005dd4:	e012      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
      break;
 8005dda:	e00f      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ddc:	4b77      	ldr	r3, [pc, #476]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de8:	d102      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005dea:	4b78      	ldr	r3, [pc, #480]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005dec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005dee:	e005      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
      break;
 8005df4:	e002      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
      break;
 8005dfa:	bf00      	nop
    }

    switch(PeriphClk)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e02:	f000 8606 	beq.w	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e0c:	f200 8673 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e16:	f000 8469 	beq.w	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e20:	f200 8669 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2a:	f000 8531 	beq.w	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e34:	f200 865f 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e3e:	f000 8187 	beq.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e48:	f200 8655 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e52:	f000 80cd 	beq.w	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e5c:	f200 864b 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e66:	f000 8430 	beq.w	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	f200 8641 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7a:	f000 83e4 	beq.w	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e84:	f200 8637 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8e:	f000 80af 	beq.w	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e98:	f200 862d 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	f000 809d 	beq.w	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eac:	f200 8623 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	f000 808b 	beq.w	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	f200 8619 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	f000 8554 	beq.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed4:	f200 860f 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ede:	f000 8500 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee8:	f200 8605 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	f000 84a1 	beq.w	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efc:	f200 85fb 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	f000 846c 	beq.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	f200 85f3 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d84c      	bhi.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 85ec 	beq.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	2b1f      	cmp	r3, #31
 8005f24:	f200 85e7 	bhi.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08006345 	.word	0x08006345
 8005f34:	080063b3 	.word	0x080063b3
 8005f38:	08006af7 	.word	0x08006af7
 8005f3c:	08006447 	.word	0x08006447
 8005f40:	08006af7 	.word	0x08006af7
 8005f44:	08006af7 	.word	0x08006af7
 8005f48:	08006af7 	.word	0x08006af7
 8005f4c:	080064bf 	.word	0x080064bf
 8005f50:	08006af7 	.word	0x08006af7
 8005f54:	08006af7 	.word	0x08006af7
 8005f58:	08006af7 	.word	0x08006af7
 8005f5c:	08006af7 	.word	0x08006af7
 8005f60:	08006af7 	.word	0x08006af7
 8005f64:	08006af7 	.word	0x08006af7
 8005f68:	08006af7 	.word	0x08006af7
 8005f6c:	08006543 	.word	0x08006543
 8005f70:	08006af7 	.word	0x08006af7
 8005f74:	08006af7 	.word	0x08006af7
 8005f78:	08006af7 	.word	0x08006af7
 8005f7c:	08006af7 	.word	0x08006af7
 8005f80:	08006af7 	.word	0x08006af7
 8005f84:	08006af7 	.word	0x08006af7
 8005f88:	08006af7 	.word	0x08006af7
 8005f8c:	08006af7 	.word	0x08006af7
 8005f90:	08006af7 	.word	0x08006af7
 8005f94:	08006af7 	.word	0x08006af7
 8005f98:	08006af7 	.word	0x08006af7
 8005f9c:	08006af7 	.word	0x08006af7
 8005fa0:	08006af7 	.word	0x08006af7
 8005fa4:	08006af7 	.word	0x08006af7
 8005fa8:	08006af7 	.word	0x08006af7
 8005fac:	080065c5 	.word	0x080065c5
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	f000 83e8 	beq.w	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005fb8:	f000 bd9d 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0003d090 	.word	0x0003d090
 8005fc4:	08012aec 	.word	0x08012aec
 8005fc8:	00f42400 	.word	0x00f42400
 8005fcc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005fd0:	69b9      	ldr	r1, [r7, #24]
 8005fd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fd6:	f000 ff83 	bl	8006ee0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fda:	61f8      	str	r0, [r7, #28]
      break;
 8005fdc:	f000 bd8e 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fe6:	f000 ff7b 	bl	8006ee0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fea:	61f8      	str	r0, [r7, #28]
      break;
 8005fec:	f000 bd86 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005ff0:	4b9a      	ldr	r3, [pc, #616]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006002:	d015      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800600a:	f200 8092 	bhi.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006014:	d029      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800601c:	f200 8089 	bhi.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d07b      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800602c:	d04a      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800602e:	e080      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006030:	4b8a      	ldr	r3, [pc, #552]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d17d      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800603c:	4b87      	ldr	r3, [pc, #540]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006048:	4b84      	ldr	r3, [pc, #528]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	e005      	b.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006054:	4b81      	ldr	r3, [pc, #516]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	4a7f      	ldr	r2, [pc, #508]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	61fb      	str	r3, [r7, #28]
          break;
 8006068:	e066      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800606a:	4b7c      	ldr	r3, [pc, #496]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006076:	d162      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006078:	4b78      	ldr	r3, [pc, #480]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006084:	d15b      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006086:	4b75      	ldr	r3, [pc, #468]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006090:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	fb03 f202 	mul.w	r2, r3, r2
 800609a:	4b70      	ldr	r3, [pc, #448]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	3301      	adds	r3, #1
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060ac:	4b6b      	ldr	r3, [pc, #428]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	0d5b      	lsrs	r3, r3, #21
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	61fb      	str	r3, [r7, #28]
          break;
 80060c2:	e03c      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80060c4:	4b65      	ldr	r3, [pc, #404]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d0:	d138      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80060d2:	4b62      	ldr	r3, [pc, #392]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d131      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060e0:	4b5e      	ldr	r3, [pc, #376]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	fb03 f202 	mul.w	r2, r3, r2
 80060f4:	4b59      	ldr	r3, [pc, #356]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	3301      	adds	r3, #1
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006106:	4b55      	ldr	r3, [pc, #340]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	0d5b      	lsrs	r3, r3, #21
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	3301      	adds	r3, #1
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	61fb      	str	r3, [r7, #28]
          break;
 800611c:	e012      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800611e:	4b4f      	ldr	r3, [pc, #316]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d10e      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800612c:	4b4d      	ldr	r3, [pc, #308]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800612e:	61fb      	str	r3, [r7, #28]
          break;
 8006130:	e00b      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006132:	bf00      	nop
 8006134:	f000 bce2 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006138:	bf00      	nop
 800613a:	f000 bcdf 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800613e:	bf00      	nop
 8006140:	f000 bcdc 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006144:	bf00      	nop
 8006146:	f000 bcd9 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800614a:	bf00      	nop
        break;
 800614c:	f000 bcd6 	b.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006150:	4b42      	ldr	r3, [pc, #264]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800615e:	d13d      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006160:	4b3e      	ldr	r3, [pc, #248]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800616c:	f040 84c5 	bne.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006170:	4b3a      	ldr	r3, [pc, #232]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	f040 84bd 	bne.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006180:	4b36      	ldr	r3, [pc, #216]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	fb03 f202 	mul.w	r2, r3, r2
 8006194:	4b31      	ldr	r3, [pc, #196]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	3301      	adds	r3, #1
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80061a6:	4b2d      	ldr	r3, [pc, #180]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	0edb      	lsrs	r3, r3, #27
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061b8:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80061c4:	2311      	movs	r3, #17
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e001      	b.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80061ca:	2307      	movs	r3, #7
 80061cc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	61fb      	str	r3, [r7, #28]
      break;
 80061d8:	f000 bc8f 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80061dc:	4b1f      	ldr	r3, [pc, #124]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061ee:	d016      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061f6:	f200 809b 	bhi.w	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006200:	d032      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006208:	f200 8092 	bhi.w	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8084 	beq.w	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800621a:	d052      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800621c:	e088      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b02      	cmp	r3, #2
 8006228:	f040 8084 	bne.w	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	e005      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	4a03      	ldr	r2, [pc, #12]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	61fb      	str	r3, [r7, #28]
          break;
 8006258:	e06c      	b.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000
 8006260:	08012aec 	.word	0x08012aec
 8006264:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006268:	4ba5      	ldr	r3, [pc, #660]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006274:	d160      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006276:	4ba2      	ldr	r3, [pc, #648]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006282:	d159      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006284:	4b9e      	ldr	r3, [pc, #632]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	fb03 f202 	mul.w	r2, r3, r2
 8006298:	4b99      	ldr	r3, [pc, #612]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	3301      	adds	r3, #1
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80062aa:	4b95      	ldr	r3, [pc, #596]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	0d5b      	lsrs	r3, r3, #21
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	3301      	adds	r3, #1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	61fb      	str	r3, [r7, #28]
          break;
 80062c0:	e03a      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80062c2:	4b8f      	ldr	r3, [pc, #572]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ce:	d135      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80062d0:	4b8b      	ldr	r3, [pc, #556]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062dc:	d12e      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062de:	4b88      	ldr	r3, [pc, #544]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	fb03 f202 	mul.w	r2, r3, r2
 80062f2:	4b83      	ldr	r3, [pc, #524]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	3301      	adds	r3, #1
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006304:	4b7e      	ldr	r3, [pc, #504]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	0d5b      	lsrs	r3, r3, #21
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	61fb      	str	r3, [r7, #28]
          break;
 800631a:	e00f      	b.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800631c:	4b78      	ldr	r3, [pc, #480]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800631e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b02      	cmp	r3, #2
 8006328:	d10a      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800632a:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800632c:	61fb      	str	r3, [r7, #28]
          break;
 800632e:	e007      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006330:	bf00      	nop
 8006332:	e3e2      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006334:	bf00      	nop
 8006336:	e3e0      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006338:	bf00      	nop
 800633a:	e3de      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800633c:	bf00      	nop
 800633e:	e3dc      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006340:	bf00      	nop
      break;
 8006342:	e3da      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006344:	4b6e      	ldr	r3, [pc, #440]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d827      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800636d 	.word	0x0800636d
 8006360:	08006375 	.word	0x08006375
 8006364:	0800637d 	.word	0x0800637d
 8006368:	08006391 	.word	0x08006391
          frequency = HAL_RCC_GetPCLK2Freq();
 800636c:	f7ff f87c 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006370:	61f8      	str	r0, [r7, #28]
          break;
 8006372:	e01d      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006374:	f7fe ffca 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006378:	61f8      	str	r0, [r7, #28]
          break;
 800637a:	e019      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800637c:	4b60      	ldr	r3, [pc, #384]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006388:	d10f      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800638a:	4b5f      	ldr	r3, [pc, #380]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800638c:	61fb      	str	r3, [r7, #28]
          break;
 800638e:	e00c      	b.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006390:	4b5b      	ldr	r3, [pc, #364]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d107      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	61fb      	str	r3, [r7, #28]
          break;
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80063a6:	bf00      	nop
 80063a8:	e3a8      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063aa:	bf00      	nop
 80063ac:	e3a6      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063ae:	bf00      	nop
        break;
 80063b0:	e3a4      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063b2:	4b53      	ldr	r3, [pc, #332]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	d83a      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	08006401 	.word	0x08006401
 80063d0:	0800643b 	.word	0x0800643b
 80063d4:	0800643b 	.word	0x0800643b
 80063d8:	0800643b 	.word	0x0800643b
 80063dc:	08006409 	.word	0x08006409
 80063e0:	0800643b 	.word	0x0800643b
 80063e4:	0800643b 	.word	0x0800643b
 80063e8:	0800643b 	.word	0x0800643b
 80063ec:	08006411 	.word	0x08006411
 80063f0:	0800643b 	.word	0x0800643b
 80063f4:	0800643b 	.word	0x0800643b
 80063f8:	0800643b 	.word	0x0800643b
 80063fc:	08006425 	.word	0x08006425
          frequency = HAL_RCC_GetPCLK1Freq();
 8006400:	f7ff f81c 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006404:	61f8      	str	r0, [r7, #28]
          break;
 8006406:	e01d      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006408:	f7fe ff80 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800640c:	61f8      	str	r0, [r7, #28]
          break;
 800640e:	e019      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d10f      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800641e:	4b3a      	ldr	r3, [pc, #232]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006420:	61fb      	str	r3, [r7, #28]
          break;
 8006422:	e00c      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006424:	4b36      	ldr	r3, [pc, #216]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d107      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	61fb      	str	r3, [r7, #28]
          break;
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800643a:	bf00      	nop
 800643c:	e35e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643e:	bf00      	nop
 8006440:	e35c      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006442:	bf00      	nop
        break;
 8006444:	e35a      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b30      	cmp	r3, #48	; 0x30
 8006456:	d021      	beq.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d829      	bhi.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b20      	cmp	r3, #32
 8006462:	d011      	beq.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b20      	cmp	r3, #32
 8006468:	d823      	bhi.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b10      	cmp	r3, #16
 8006474:	d004      	beq.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006476:	e01c      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006478:	f7fe ffe0 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800647c:	61f8      	str	r0, [r7, #28]
          break;
 800647e:	e01d      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006480:	f7fe ff44 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006484:	61f8      	str	r0, [r7, #28]
          break;
 8006486:	e019      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006494:	d10f      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006496:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006498:	61fb      	str	r3, [r7, #28]
          break;
 800649a:	e00c      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800649c:	4b18      	ldr	r3, [pc, #96]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d107      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80064aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ae:	61fb      	str	r3, [r7, #28]
          break;
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80064b2:	bf00      	nop
 80064b4:	e322      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064b6:	bf00      	nop
 80064b8:	e320      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ba:	bf00      	nop
        break;
 80064bc:	e31e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2bc0      	cmp	r3, #192	; 0xc0
 80064ce:	d027      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2bc0      	cmp	r3, #192	; 0xc0
 80064d4:	d82f      	bhi.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d017      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d829      	bhi.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80064ee:	e022      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064f0:	f7fe ffa4 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80064f4:	61f8      	str	r0, [r7, #28]
          break;
 80064f6:	e023      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f8:	f7fe ff08 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80064fc:	61f8      	str	r0, [r7, #28]
          break;
 80064fe:	e01f      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006500:	40021000 	.word	0x40021000
 8006504:	02dc6c00 	.word	0x02dc6c00
 8006508:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800650c:	4b9b      	ldr	r3, [pc, #620]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d10f      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800651a:	4b99      	ldr	r3, [pc, #612]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800651c:	61fb      	str	r3, [r7, #28]
          break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006520:	4b96      	ldr	r3, [pc, #600]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d107      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800652e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006532:	61fb      	str	r3, [r7, #28]
          break;
 8006534:	e003      	b.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006536:	bf00      	nop
 8006538:	e2e0      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800653a:	bf00      	nop
 800653c:	e2de      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800653e:	bf00      	nop
        break;
 8006540:	e2dc      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006542:	4b8e      	ldr	r3, [pc, #568]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006554:	d025      	beq.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d82c      	bhi.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006564:	d013      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656c:	d824      	bhi.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657a:	d004      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800657c:	e01c      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fe ff5d 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006582:	61f8      	str	r0, [r7, #28]
          break;
 8006584:	e01d      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006586:	f7fe fec1 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800658a:	61f8      	str	r0, [r7, #28]
          break;
 800658c:	e019      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800658e:	4b7b      	ldr	r3, [pc, #492]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659a:	d10f      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800659e:	61fb      	str	r3, [r7, #28]
          break;
 80065a0:	e00c      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065a2:	4b76      	ldr	r3, [pc, #472]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d107      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80065b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b4:	61fb      	str	r3, [r7, #28]
          break;
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80065b8:	bf00      	nop
 80065ba:	e29f      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065bc:	bf00      	nop
 80065be:	e29d      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065c0:	bf00      	nop
        break;
 80065c2:	e29b      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065c4:	4b6d      	ldr	r3, [pc, #436]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d6:	d025      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065de:	d82c      	bhi.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e6:	d013      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d824      	bhi.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fc:	d004      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80065fe:	e01c      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006600:	f7fe ff1c 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006604:	61f8      	str	r0, [r7, #28]
          break;
 8006606:	e01d      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006608:	f7fe fe80 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800660c:	61f8      	str	r0, [r7, #28]
          break;
 800660e:	e019      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006610:	4b5a      	ldr	r3, [pc, #360]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d10f      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800661e:	4b58      	ldr	r3, [pc, #352]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006620:	61fb      	str	r3, [r7, #28]
          break;
 8006622:	e00c      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006624:	4b55      	ldr	r3, [pc, #340]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d107      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006636:	61fb      	str	r3, [r7, #28]
          break;
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800663a:	bf00      	nop
 800663c:	e25e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800663e:	bf00      	nop
 8006640:	e25c      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006642:	bf00      	nop
        break;
 8006644:	e25a      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006646:	4b4d      	ldr	r3, [pc, #308]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006658:	d007      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006660:	d12f      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006662:	f7fe fe53 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006666:	61f8      	str	r0, [r7, #28]
          break;
 8006668:	e02e      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800666a:	4b44      	ldr	r3, [pc, #272]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006676:	d126      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006678:	4b40      	ldr	r3, [pc, #256]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d020      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006684:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	0a1b      	lsrs	r3, r3, #8
 800668a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	fb03 f202 	mul.w	r2, r3, r2
 8006698:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3301      	adds	r3, #1
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80066aa:	4b34      	ldr	r3, [pc, #208]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	0e5b      	lsrs	r3, r3, #25
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	3301      	adds	r3, #1
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	61fb      	str	r3, [r7, #28]
          break;
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80066c2:	bf00      	nop
 80066c4:	e21a      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066c6:	bf00      	nop
        break;
 80066c8:	e218      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80066ca:	4b2c      	ldr	r3, [pc, #176]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80066dc:	f7fe fec4 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80066e0:	61f8      	str	r0, [r7, #28]
        break;
 80066e2:	e20b      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80066e4:	f7fe fe12 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80066e8:	61f8      	str	r0, [r7, #28]
        break;
 80066ea:	e207      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066f2:	f003 0318 	and.w	r3, r3, #24
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d010      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b10      	cmp	r3, #16
 8006702:	d834      	bhi.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b08      	cmp	r3, #8
 800670e:	d024      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006710:	e02d      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006718:	f000 fbe2 	bl	8006ee0 <RCCEx_GetSAIxPeriphCLKFreq>
 800671c:	61f8      	str	r0, [r7, #28]
          break;
 800671e:	e02b      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d122      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	e005      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006744:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006756:	61fb      	str	r3, [r7, #28]
          break;
 8006758:	e00b      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006766:	d106      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800676a:	61fb      	str	r3, [r7, #28]
          break;
 800676c:	e003      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800676e:	bf00      	nop
 8006770:	e1c4      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006772:	bf00      	nop
 8006774:	e1c2      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006776:	bf00      	nop
        break;
 8006778:	e1c0      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800677a:	bf00      	nop
 800677c:	40021000 	.word	0x40021000
 8006780:	00f42400 	.word	0x00f42400
 8006784:	08012aec 	.word	0x08012aec
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006788:	4b96      	ldr	r3, [pc, #600]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	d013      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d819      	bhi.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d004      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80067b2:	e011      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe fe42 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80067b8:	61f8      	str	r0, [r7, #28]
          break;
 80067ba:	e010      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80067bc:	f7fe fda6 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80067c0:	61f8      	str	r0, [r7, #28]
          break;
 80067c2:	e00c      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b87      	ldr	r3, [pc, #540]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d104      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80067d2:	4b85      	ldr	r3, [pc, #532]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067d4:	61fb      	str	r3, [r7, #28]
          break;
 80067d6:	e001      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80067d8:	bf00      	nop
 80067da:	e18f      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067dc:	bf00      	nop
        break;
 80067de:	e18d      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067e0:	4b80      	ldr	r3, [pc, #512]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d013      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fa:	d819      	bhi.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006808:	d004      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800680a:	e011      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe fe16 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006810:	61f8      	str	r0, [r7, #28]
          break;
 8006812:	e010      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006814:	f7fe fd7a 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006818:	61f8      	str	r0, [r7, #28]
          break;
 800681a:	e00c      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800681c:	4b71      	ldr	r3, [pc, #452]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006828:	d104      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800682a:	4b6f      	ldr	r3, [pc, #444]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800682c:	61fb      	str	r3, [r7, #28]
          break;
 800682e:	e001      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006830:	bf00      	nop
 8006832:	e163      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006834:	bf00      	nop
        break;
 8006836:	e161      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006838:	4b6a      	ldr	r3, [pc, #424]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684a:	d013      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006852:	d819      	bhi.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d004      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006862:	e011      	b.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006864:	f7fe fdea 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006868:	61f8      	str	r0, [r7, #28]
          break;
 800686a:	e010      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800686c:	f7fe fd4e 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006870:	61f8      	str	r0, [r7, #28]
          break;
 8006872:	e00c      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006874:	4b5b      	ldr	r3, [pc, #364]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d104      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006882:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006884:	61fb      	str	r3, [r7, #28]
          break;
 8006886:	e001      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006888:	bf00      	nop
 800688a:	e137      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800688c:	bf00      	nop
        break;
 800688e:	e135      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006890:	4b54      	ldr	r3, [pc, #336]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d011      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d818      	bhi.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d004      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80068b4:	e011      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7fe fdc1 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80068ba:	61f8      	str	r0, [r7, #28]
          break;
 80068bc:	e010      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80068be:	f7fe fd25 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80068c2:	61f8      	str	r0, [r7, #28]
          break;
 80068c4:	e00c      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d104      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80068d4:	4b44      	ldr	r3, [pc, #272]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068d6:	61fb      	str	r3, [r7, #28]
          break;
 80068d8:	e001      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80068da:	bf00      	nop
 80068dc:	e10e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068de:	bf00      	nop
        break;
 80068e0:	e10c      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068e2:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80068f4:	d02c      	beq.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80068fc:	d833      	bhi.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006904:	d01a      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800690c:	d82b      	bhi.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800691a:	d004      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800691c:	e023      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fe fd8d 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006922:	61f8      	str	r0, [r7, #28]
          break;
 8006924:	e026      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006926:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d11a      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006934:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006938:	61fb      	str	r3, [r7, #28]
          break;
 800693a:	e016      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800693c:	4b29      	ldr	r3, [pc, #164]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d111      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800694a:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800694c:	61fb      	str	r3, [r7, #28]
          break;
 800694e:	e00e      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006950:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d109      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800695e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006962:	61fb      	str	r3, [r7, #28]
          break;
 8006964:	e005      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006966:	bf00      	nop
 8006968:	e0c8      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800696a:	bf00      	nop
 800696c:	e0c6      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800696e:	bf00      	nop
 8006970:	e0c4      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006972:	bf00      	nop
        break;
 8006974:	e0c2      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006976:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006988:	d030      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006990:	d837      	bhi.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006998:	d01a      	beq.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069a0:	d82f      	bhi.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80069b0:	e027      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069b2:	f7fe fd43 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80069b6:	61f8      	str	r0, [r7, #28]
          break;
 80069b8:	e02a      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d11e      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80069c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069cc:	61fb      	str	r3, [r7, #28]
          break;
 80069ce:	e01a      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069dc:	d115      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80069de:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069e0:	61fb      	str	r3, [r7, #28]
          break;
 80069e2:	e012      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80069e4:	40021000 	.word	0x40021000
 80069e8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069ec:	4b46      	ldr	r3, [pc, #280]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d109      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	61fb      	str	r3, [r7, #28]
          break;
 8006a00:	e005      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006a02:	bf00      	nop
 8006a04:	e07a      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a06:	bf00      	nop
 8006a08:	e078      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a0a:	bf00      	nop
 8006a0c:	e076      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a0e:	bf00      	nop
        break;
 8006a10:	e074      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a12:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a24:	d02c      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a2c:	d855      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006a3c:	e04d      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a3e:	f7fe fc65 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006a42:	61f8      	str	r0, [r7, #28]
          break;
 8006a44:	e04e      	b.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a46:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d145      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a52:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006a5e:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	e005      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006a6a:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a70:	0a1b      	lsrs	r3, r3, #8
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7c:	61fb      	str	r3, [r7, #28]
          break;
 8006a7e:	e02e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a8c:	d129      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d122      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	fb03 f202 	mul.w	r2, r3, r2
 8006ab0:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	3301      	adds	r3, #1
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	0d5b      	lsrs	r3, r3, #21
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	3301      	adds	r3, #1
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	61fb      	str	r3, [r7, #28]
          break;
 8006ad8:	e003      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006ada:	bf00      	nop
 8006adc:	e00e      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ade:	bf00      	nop
 8006ae0:	e00c      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ae2:	bf00      	nop
        break;
 8006ae4:	e00a      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e008      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006aea:	bf00      	nop
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006aee:	bf00      	nop
 8006af0:	e004      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006afa:	bf00      	nop
    }
  }

  return(frequency);
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	08012aec 	.word	0x08012aec

08006b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b1e:	4b72      	ldr	r3, [pc, #456]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00e      	beq.n	8006b48 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b2a:	4b6f      	ldr	r3, [pc, #444]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0203 	and.w	r2, r3, #3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d103      	bne.n	8006b42 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d142      	bne.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e03f      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d018      	beq.n	8006b82 <RCCEx_PLLSAI1_Config+0x72>
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d825      	bhi.n	8006ba0 <RCCEx_PLLSAI1_Config+0x90>
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d002      	beq.n	8006b5e <RCCEx_PLLSAI1_Config+0x4e>
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d009      	beq.n	8006b70 <RCCEx_PLLSAI1_Config+0x60>
 8006b5c:	e020      	b.n	8006ba0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b5e:	4b62      	ldr	r3, [pc, #392]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d11d      	bne.n	8006ba6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b6e:	e01a      	b.n	8006ba6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b70:	4b5d      	ldr	r3, [pc, #372]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d116      	bne.n	8006baa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b80:	e013      	b.n	8006baa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b82:	4b59      	ldr	r3, [pc, #356]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10f      	bne.n	8006bae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b8e:	4b56      	ldr	r3, [pc, #344]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b9e:	e006      	b.n	8006bae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba4:	e004      	b.n	8006bb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d108      	bne.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006bb6:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4949      	ldr	r1, [pc, #292]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8086 	bne.w	8006cdc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bd0:	4b45      	ldr	r3, [pc, #276]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a44      	ldr	r2, [pc, #272]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bdc:	f7fb fc22 	bl	8002424 <HAL_GetTick>
 8006be0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006be2:	e009      	b.n	8006bf8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006be4:	f7fb fc1e 	bl	8002424 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d902      	bls.n	8006bf8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8006bf6:	e005      	b.n	8006c04 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ef      	bne.n	8006be4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d168      	bne.n	8006cdc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d113      	bne.n	8006c38 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c10:	4b35      	ldr	r3, [pc, #212]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	4b35      	ldr	r3, [pc, #212]	; (8006cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6892      	ldr	r2, [r2, #8]
 8006c1c:	0211      	lsls	r1, r2, #8
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68d2      	ldr	r2, [r2, #12]
 8006c22:	06d2      	lsls	r2, r2, #27
 8006c24:	4311      	orrs	r1, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	0112      	lsls	r2, r2, #4
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	492d      	ldr	r1, [pc, #180]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	610b      	str	r3, [r1, #16]
 8006c36:	e02d      	b.n	8006c94 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d115      	bne.n	8006c6a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6892      	ldr	r2, [r2, #8]
 8006c4a:	0211      	lsls	r1, r2, #8
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6912      	ldr	r2, [r2, #16]
 8006c50:	0852      	lsrs	r2, r2, #1
 8006c52:	3a01      	subs	r2, #1
 8006c54:	0552      	lsls	r2, r2, #21
 8006c56:	4311      	orrs	r1, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6852      	ldr	r2, [r2, #4]
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	0112      	lsls	r2, r2, #4
 8006c60:	430a      	orrs	r2, r1
 8006c62:	4921      	ldr	r1, [pc, #132]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
 8006c68:	e014      	b.n	8006c94 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6892      	ldr	r2, [r2, #8]
 8006c76:	0211      	lsls	r1, r2, #8
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6952      	ldr	r2, [r2, #20]
 8006c7c:	0852      	lsrs	r2, r2, #1
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	0652      	lsls	r2, r2, #25
 8006c82:	4311      	orrs	r1, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6852      	ldr	r2, [r2, #4]
 8006c88:	3a01      	subs	r2, #1
 8006c8a:	0112      	lsls	r2, r2, #4
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	4916      	ldr	r1, [pc, #88]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c94:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fb fbc0 	bl	8002424 <HAL_GetTick>
 8006ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ca6:	e009      	b.n	8006cbc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ca8:	f7fb fbbc 	bl	8002424 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d902      	bls.n	8006cbc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8006cba:	e005      	b.n	8006cc8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ef      	beq.n	8006ca8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4904      	ldr	r1, [pc, #16]	; (8006ce8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	07ff800f 	.word	0x07ff800f
 8006cf0:	ff9f800f 	.word	0xff9f800f
 8006cf4:	f9ff800f 	.word	0xf9ff800f

08006cf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d06:	4b72      	ldr	r3, [pc, #456]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00e      	beq.n	8006d30 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d12:	4b6f      	ldr	r3, [pc, #444]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0203 	and.w	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d103      	bne.n	8006d2a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
       ||
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d142      	bne.n	8006db0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e03f      	b.n	8006db0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d018      	beq.n	8006d6a <RCCEx_PLLSAI2_Config+0x72>
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d825      	bhi.n	8006d88 <RCCEx_PLLSAI2_Config+0x90>
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <RCCEx_PLLSAI2_Config+0x4e>
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d009      	beq.n	8006d58 <RCCEx_PLLSAI2_Config+0x60>
 8006d44:	e020      	b.n	8006d88 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d46:	4b62      	ldr	r3, [pc, #392]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11d      	bne.n	8006d8e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d56:	e01a      	b.n	8006d8e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d58:	4b5d      	ldr	r3, [pc, #372]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d116      	bne.n	8006d92 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d68:	e013      	b.n	8006d92 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d6a:	4b59      	ldr	r3, [pc, #356]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10f      	bne.n	8006d96 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d76:	4b56      	ldr	r3, [pc, #344]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d86:	e006      	b.n	8006d96 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8c:	e004      	b.n	8006d98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4949      	ldr	r1, [pc, #292]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f040 8086 	bne.w	8006ec4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006db8:	4b45      	ldr	r3, [pc, #276]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a44      	ldr	r2, [pc, #272]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc4:	f7fb fb2e 	bl	8002424 <HAL_GetTick>
 8006dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dca:	e009      	b.n	8006de0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dcc:	f7fb fb2a 	bl	8002424 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d902      	bls.n	8006de0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8006dde:	e005      	b.n	8006dec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006de0:	4b3b      	ldr	r3, [pc, #236]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ef      	bne.n	8006dcc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d168      	bne.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d113      	bne.n	8006e20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006df8:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	4b35      	ldr	r3, [pc, #212]	; (8006ed4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6892      	ldr	r2, [r2, #8]
 8006e04:	0211      	lsls	r1, r2, #8
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68d2      	ldr	r2, [r2, #12]
 8006e0a:	06d2      	lsls	r2, r2, #27
 8006e0c:	4311      	orrs	r1, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6852      	ldr	r2, [r2, #4]
 8006e12:	3a01      	subs	r2, #1
 8006e14:	0112      	lsls	r2, r2, #4
 8006e16:	430a      	orrs	r2, r1
 8006e18:	492d      	ldr	r1, [pc, #180]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	614b      	str	r3, [r1, #20]
 8006e1e:	e02d      	b.n	8006e7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d115      	bne.n	8006e52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e26:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e28:	695a      	ldr	r2, [r3, #20]
 8006e2a:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6892      	ldr	r2, [r2, #8]
 8006e32:	0211      	lsls	r1, r2, #8
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6912      	ldr	r2, [r2, #16]
 8006e38:	0852      	lsrs	r2, r2, #1
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	0552      	lsls	r2, r2, #21
 8006e3e:	4311      	orrs	r1, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6852      	ldr	r2, [r2, #4]
 8006e44:	3a01      	subs	r2, #1
 8006e46:	0112      	lsls	r2, r2, #4
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	4921      	ldr	r1, [pc, #132]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	614b      	str	r3, [r1, #20]
 8006e50:	e014      	b.n	8006e7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e52:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	4b21      	ldr	r3, [pc, #132]	; (8006edc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6892      	ldr	r2, [r2, #8]
 8006e5e:	0211      	lsls	r1, r2, #8
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6952      	ldr	r2, [r2, #20]
 8006e64:	0852      	lsrs	r2, r2, #1
 8006e66:	3a01      	subs	r2, #1
 8006e68:	0652      	lsls	r2, r2, #25
 8006e6a:	4311      	orrs	r1, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6852      	ldr	r2, [r2, #4]
 8006e70:	3a01      	subs	r2, #1
 8006e72:	0112      	lsls	r2, r2, #4
 8006e74:	430a      	orrs	r2, r1
 8006e76:	4916      	ldr	r1, [pc, #88]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e7c:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e88:	f7fb facc 	bl	8002424 <HAL_GetTick>
 8006e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e8e:	e009      	b.n	8006ea4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e90:	f7fb fac8 	bl	8002424 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d902      	bls.n	8006ea4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ea2:	e005      	b.n	8006eb0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0ef      	beq.n	8006e90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006eb6:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	07ff800f 	.word	0x07ff800f
 8006ed8:	ff9f800f 	.word	0xff9f800f
 8006edc:	f9ff800f 	.word	0xf9ff800f

08006ee0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b089      	sub	sp, #36	; 0x24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efc:	d10b      	bne.n	8006f16 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006efe:	4b7e      	ldr	r3, [pc, #504]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006f08:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b60      	cmp	r3, #96	; 0x60
 8006f0e:	d112      	bne.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f10:	4b7a      	ldr	r3, [pc, #488]	; (80070fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e00f      	b.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d10b      	bne.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f1e:	4b76      	ldr	r3, [pc, #472]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f28:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f30:	d101      	bne.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f32:	4b72      	ldr	r3, [pc, #456]	; (80070fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f34:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 80d6 	bne.w	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d003      	beq.n	8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4e:	d13b      	bne.n	8006fc8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f50:	4b69      	ldr	r3, [pc, #420]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f5c:	f040 80c4 	bne.w	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006f60:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80bd 	beq.w	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f6e:	4b62      	ldr	r3, [pc, #392]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	3301      	adds	r3, #1
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f82:	4b5d      	ldr	r3, [pc, #372]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006f8e:	4b5a      	ldr	r3, [pc, #360]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	0edb      	lsrs	r3, r3, #27
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fa0:	4b55      	ldr	r3, [pc, #340]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006fac:	2311      	movs	r3, #17
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e001      	b.n	8006fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	fb03 f202 	mul.w	r2, r3, r2
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fc6:	e08f      	b.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d13a      	bne.n	8007044 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006fce:	4b4a      	ldr	r3, [pc, #296]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fda:	f040 8086 	bne.w	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006fde:	4b46      	ldr	r3, [pc, #280]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d07f      	beq.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006fea:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ffe:	4b3e      	ldr	r3, [pc, #248]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007008:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800700a:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	0edb      	lsrs	r3, r3, #27
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800701c:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007028:	2311      	movs	r3, #17
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e001      	b.n	8007032 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800702e:	2307      	movs	r3, #7
 8007030:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	fb03 f202 	mul.w	r2, r3, r2
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	e052      	b.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b80      	cmp	r3, #128	; 0x80
 8007048:	d003      	beq.n	8007052 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007050:	d109      	bne.n	8007066 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007052:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705e:	d144      	bne.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007062:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007064:	e041      	b.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b20      	cmp	r3, #32
 800706a:	d003      	beq.n	8007074 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007072:	d13a      	bne.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007074:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d133      	bne.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02d      	beq.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800708e:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	3301      	adds	r3, #1
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	0edb      	lsrs	r3, r3, #27
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80070c0:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80070cc:	2311      	movs	r3, #17
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e001      	b.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80070d2:	2307      	movs	r3, #7
 80070d4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	fb03 f202 	mul.w	r2, r3, r2
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e000      	b.n	80070ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070e8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80070ea:	69fb      	ldr	r3, [r7, #28]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3724      	adds	r7, #36	; 0x24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40021000 	.word	0x40021000
 80070fc:	001fff68 	.word	0x001fff68
 8007100:	00f42400 	.word	0x00f42400

08007104 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e078      	b.n	8007208 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fa fdcb 	bl	8001cc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f86a 	bl	8007210 <HAL_SD_InitCard>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e060      	b.n	8007208 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fdcd 	bl	8007cec <HAL_SD_GetCardStatus>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e055      	b.n	8007208 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800715c:	7e3b      	ldrb	r3, [r7, #24]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007162:	7e7b      	ldrb	r3, [r7, #25]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10a      	bne.n	8007186 <HAL_SD_Init+0x82>
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_SD_Init+0x78>
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c
 8007184:	e00b      	b.n	800719e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	2b01      	cmp	r3, #1
 800718c:	d104      	bne.n	8007198 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007194:	65da      	str	r2, [r3, #92]	; 0x5c
 8007196:	e002      	b.n	800719e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fe83 	bl	8007eb0 <HAL_SD_ConfigWideBusOperation>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e029      	b.n	8007208 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80071b4:	f7fb f936 	bl	8002424 <HAL_GetTick>
 80071b8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80071ba:	e014      	b.n	80071e6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80071bc:	f7fb f932 	bl	8002424 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ca:	d10c      	bne.n	80071e6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e010      	b.n	8007208 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 ff76 	bl	80080d8 <HAL_SD_GetCardState>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d1e4      	bne.n	80071bc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	; 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007210:	b5b0      	push	{r4, r5, r7, lr}
 8007212:	b08e      	sub	sp, #56	; 0x38
 8007214:	af04      	add	r7, sp, #16
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007218:	2300      	movs	r3, #0
 800721a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007228:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800722c:	f7fe fd4e 	bl	8005ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8007230:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007246:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e079      	b.n	8007340 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	4a3d      	ldr	r2, [pc, #244]	; (8007348 <HAL_SD_InitCard+0x138>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	091b      	lsrs	r3, r3, #4
 8007258:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0210 	orr.w	r2, r2, #16
 8007276:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681d      	ldr	r5, [r3, #0]
 800727c:	466c      	mov	r4, sp
 800727e:	f107 0314 	add.w	r3, r7, #20
 8007282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007290:	4628      	mov	r0, r5
 8007292:	f003 ff85 	bl	800b1a0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f003 ffc8 	bl	800b230 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80072ac:	4a27      	ldr	r2, [pc, #156]	; (800734c <HAL_SD_InitCard+0x13c>)
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b4:	3301      	adds	r3, #1
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fb f8c0 	bl	800243c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 ffeb 	bl	8008298 <SD_PowerON>
 80072c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e02e      	b.n	8007340 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ff18 	bl	8008118 <SD_InitCard>
 80072e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e01b      	b.n	8007340 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007310:	4618      	mov	r0, r3
 8007312:	f004 f823 	bl	800b35c <SDMMC_CmdBlockLength>
 8007316:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00f      	beq.n	800733e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <HAL_SD_InitCard+0x140>)
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3728      	adds	r7, #40	; 0x28
 8007344:	46bd      	mov	sp, r7
 8007346:	bdb0      	pop	{r4, r5, r7, pc}
 8007348:	014f8b59 	.word	0x014f8b59
 800734c:	00012110 	.word	0x00012110
 8007350:	1fe00fff 	.word	0x1fe00fff

08007354 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b092      	sub	sp, #72	; 0x48
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007362:	f7fb f85f 	bl	8002424 <HAL_GetTick>
 8007366:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e170      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	f040 8163 	bne.w	800765a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800739a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	441a      	add	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d907      	bls.n	80073b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e157      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2203      	movs	r2, #3
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d002      	beq.n	80073d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80073e2:	2390      	movs	r3, #144	; 0x90
 80073e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073e6:	2302      	movs	r3, #2
 80073e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f107 0214 	add.w	r2, r7, #20
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f003 ff81 	bl	800b304 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007410:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d90a      	bls.n	800742e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2202      	movs	r2, #2
 800741c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007424:	4618      	mov	r0, r3
 8007426:	f003 ffdf 	bl	800b3e8 <SDMMC_CmdReadMultiBlock>
 800742a:	6478      	str	r0, [r7, #68]	; 0x44
 800742c:	e009      	b.n	8007442 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800743a:	4618      	mov	r0, r3
 800743c:	f003 ffb1 	bl	800b3a2 <SDMMC_CmdReadSingleBlock>
 8007440:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007444:	2b00      	cmp	r3, #0
 8007446:	d012      	beq.n	800746e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a88      	ldr	r2, [pc, #544]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 800744e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007456:	431a      	orrs	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e0fc      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007472:	e061      	b.n	8007538 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d03c      	beq.n	80074fc <HAL_SD_ReadBlocks+0x1a8>
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d039      	beq.n	80074fc <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007488:	2300      	movs	r3, #0
 800748a:	643b      	str	r3, [r7, #64]	; 0x40
 800748c:	e033      	b.n	80074f6 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f003 feae 	bl	800b1f4 <SDMMC_ReadFIFO>
 8007498:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	3301      	adds	r3, #1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	3b01      	subs	r3, #1
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	3301      	adds	r3, #1
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	3b01      	subs	r3, #1
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	0c1b      	lsrs	r3, r3, #16
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	3301      	adds	r3, #1
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	3b01      	subs	r3, #1
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	0e1b      	lsrs	r3, r3, #24
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80074e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e6:	3301      	adds	r3, #1
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	3b01      	subs	r3, #1
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80074f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f2:	3301      	adds	r3, #1
 80074f4:	643b      	str	r3, [r7, #64]	; 0x40
 80074f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f8:	2b07      	cmp	r3, #7
 80074fa:	d9c8      	bls.n	800748e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80074fc:	f7fa ff92 	bl	8002424 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007508:	429a      	cmp	r2, r3
 800750a:	d902      	bls.n	8007512 <HAL_SD_ReadBlocks+0x1be>
 800750c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750e:	2b00      	cmp	r3, #0
 8007510:	d112      	bne.n	8007538 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a56      	ldr	r2, [pc, #344]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e097      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007542:	2b00      	cmp	r3, #0
 8007544:	d096      	beq.n	8007474 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007554:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d022      	beq.n	80075aa <HAL_SD_ReadBlocks+0x256>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d91f      	bls.n	80075aa <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756e:	2b03      	cmp	r3, #3
 8007570:	d01b      	beq.n	80075aa <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f003 ffa0 	bl	800b4bc <SDMMC_CmdStopTransfer>
 800757c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800757e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007580:	2b00      	cmp	r3, #0
 8007582:	d012      	beq.n	80075aa <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a39      	ldr	r2, [pc, #228]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	431a      	orrs	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e05e      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	f003 0308 	and.w	r3, r3, #8
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d012      	beq.n	80075de <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	f043 0208 	orr.w	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e044      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d012      	beq.n	8007612 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	f043 0202 	orr.w	r2, r3, #2
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e02a      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a12      	ldr	r2, [pc, #72]	; (8007670 <HAL_SD_ReadBlocks+0x31c>)
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e010      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <HAL_SD_ReadBlocks+0x320>)
 800764c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e006      	b.n	8007668 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
  }
}
 8007668:	4618      	mov	r0, r3
 800766a:	3748      	adds	r7, #72	; 0x48
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	1fe00fff 	.word	0x1fe00fff
 8007674:	18000f3a 	.word	0x18000f3a

08007678 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b092      	sub	sp, #72	; 0x48
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007686:	f7fa fecd 	bl	8002424 <HAL_GetTick>
 800768a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d107      	bne.n	80076aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e174      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	f040 8167 	bne.w	8007986 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	441a      	add	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d907      	bls.n	80076dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e15b      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2203      	movs	r2, #3
 80076e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d002      	beq.n	80076fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	025b      	lsls	r3, r3, #9
 80076f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	025b      	lsls	r3, r3, #9
 8007704:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007706:	2390      	movs	r3, #144	; 0x90
 8007708:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800770a:	2300      	movs	r3, #0
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800770e:	2300      	movs	r3, #0
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007712:	2300      	movs	r3, #0
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f107 0218 	add.w	r2, r7, #24
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f003 fdef 	bl	800b304 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007734:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d90a      	bls.n	8007752 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2220      	movs	r2, #32
 8007740:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007748:	4618      	mov	r0, r3
 800774a:	f003 fe93 	bl	800b474 <SDMMC_CmdWriteMultiBlock>
 800774e:	6478      	str	r0, [r7, #68]	; 0x44
 8007750:	e009      	b.n	8007766 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2210      	movs	r2, #16
 8007756:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800775e:	4618      	mov	r0, r3
 8007760:	f003 fe65 	bl	800b42e <SDMMC_CmdWriteSingleBlock>
 8007764:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007768:	2b00      	cmp	r3, #0
 800776a:	d012      	beq.n	8007792 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a8a      	ldr	r2, [pc, #552]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800777a:	431a      	orrs	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e100      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007796:	e065      	b.n	8007864 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d040      	beq.n	8007828 <HAL_SD_WriteBlocks+0x1b0>
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d03d      	beq.n	8007828 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	643b      	str	r3, [r7, #64]	; 0x40
 80077b0:	e037      	b.n	8007822 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	3301      	adds	r3, #1
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	3b01      	subs	r3, #1
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	3301      	adds	r3, #1
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	3b01      	subs	r3, #1
 80077da:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	041a      	lsls	r2, r3, #16
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	3301      	adds	r3, #1
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f0:	3b01      	subs	r3, #1
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	061a      	lsls	r2, r3, #24
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007802:	3301      	adds	r3, #1
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	3b01      	subs	r3, #1
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f107 0214 	add.w	r2, r7, #20
 8007814:	4611      	mov	r1, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f003 fcf9 	bl	800b20e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800781c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800781e:	3301      	adds	r3, #1
 8007820:	643b      	str	r3, [r7, #64]	; 0x40
 8007822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007824:	2b07      	cmp	r3, #7
 8007826:	d9c4      	bls.n	80077b2 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007828:	f7fa fdfc 	bl	8002424 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007834:	429a      	cmp	r2, r3
 8007836:	d902      	bls.n	800783e <HAL_SD_WriteBlocks+0x1c6>
 8007838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783a:	2b00      	cmp	r3, #0
 800783c:	d112      	bne.n	8007864 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a56      	ldr	r2, [pc, #344]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800784a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e097      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800786e:	2b00      	cmp	r3, #0
 8007870:	d092      	beq.n	8007798 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007880:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d022      	beq.n	80078d6 <HAL_SD_WriteBlocks+0x25e>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d91f      	bls.n	80078d6 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b03      	cmp	r3, #3
 800789c:	d01b      	beq.n	80078d6 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f003 fe0a 	bl	800b4bc <SDMMC_CmdStopTransfer>
 80078a8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a39      	ldr	r2, [pc, #228]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078be:	431a      	orrs	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e05e      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d012      	beq.n	800790a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a2c      	ldr	r2, [pc, #176]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	f043 0208 	orr.w	r2, r3, #8
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e044      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	f043 0202 	orr.w	r2, r3, #2
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e02a      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d012      	beq.n	8007972 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a12      	ldr	r2, [pc, #72]	; (800799c <HAL_SD_WriteBlocks+0x324>)
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f043 0210 	orr.w	r2, r3, #16
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e010      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <HAL_SD_WriteBlocks+0x328>)
 8007978:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	e006      	b.n	8007994 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3748      	adds	r7, #72	; 0x48
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	1fe00fff 	.word	0x1fe00fff
 80079a0:	18000f3a 	.word	0x18000f3a

080079a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b2:	0f9b      	lsrs	r3, r3, #30
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	0e9b      	lsrs	r3, r3, #26
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a04:	0d1b      	lsrs	r3, r3, #20
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a22:	0bdb      	lsrs	r3, r3, #15
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a34:	0b9b      	lsrs	r3, r3, #14
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a46:	0b5b      	lsrs	r3, r3, #13
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a58:	0b1b      	lsrs	r3, r3, #12
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d163      	bne.n	8007b3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a78:	009a      	lsls	r2, r3, #2
 8007a7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007a7e:	4013      	ands	r3, r2
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a84:	0f92      	lsrs	r2, r2, #30
 8007a86:	431a      	orrs	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a90:	0edb      	lsrs	r3, r3, #27
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa2:	0e1b      	lsrs	r3, r3, #24
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab4:	0d5b      	lsrs	r3, r3, #21
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ac6:	0c9b      	lsrs	r3, r3, #18
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad8:	0bdb      	lsrs	r3, r3, #15
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	7e1b      	ldrb	r3, [r3, #24]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	3302      	adds	r3, #2
 8007afc:	2201      	movs	r2, #1
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b06:	fb03 f202 	mul.w	r2, r3, r2
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	7a1b      	ldrb	r3, [r3, #8]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	2201      	movs	r2, #1
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b28:	0a52      	lsrs	r2, r2, #9
 8007b2a:	fb03 f202 	mul.w	r2, r3, r2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b38:	659a      	str	r2, [r3, #88]	; 0x58
 8007b3a:	e031      	b.n	8007ba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d11d      	bne.n	8007b80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b52:	0c1b      	lsrs	r3, r3, #16
 8007b54:	431a      	orrs	r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	029a      	lsls	r2, r3, #10
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b74:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	659a      	str	r2, [r3, #88]	; 0x58
 8007b7e:	e00f      	b.n	8007ba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a58      	ldr	r2, [pc, #352]	; (8007ce8 <HAL_SD_GetCardCSD+0x344>)
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e09d      	b.n	8007cdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba4:	0b9b      	lsrs	r3, r3, #14
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb6:	09db      	lsrs	r3, r3, #7
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd8:	0fdb      	lsrs	r3, r3, #31
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be4:	0f5b      	lsrs	r3, r3, #29
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf6:	0e9b      	lsrs	r3, r3, #26
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c08:	0d9b      	lsrs	r3, r3, #22
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1a:	0d5b      	lsrs	r3, r3, #21
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	0bdb      	lsrs	r3, r3, #15
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5e:	0b9b      	lsrs	r3, r3, #14
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c72:	0b5b      	lsrs	r3, r3, #13
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c86:	0b1b      	lsrs	r3, r3, #12
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9a:	0a9b      	lsrs	r3, r3, #10
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0303 	and.w	r3, r3, #3
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	1fe00fff 	.word	0x1fe00fff

08007cec <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b094      	sub	sp, #80	; 0x50
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007cfc:	f107 0308 	add.w	r3, r7, #8
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fbd4 	bl	80084b0 <SD_SendSDStatus>
 8007d08:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a4f      	ldr	r2, [pc, #316]	; (8007e54 <HAL_SD_GetCardStatus+0x168>)
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007d32:	e070      	b.n	8007e16 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	099b      	lsrs	r3, r3, #6
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	0e1b      	lsrs	r3, r3, #24
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	061a      	lsls	r2, r3, #24
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007d84:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	0d1b      	lsrs	r3, r3, #20
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	0a9b      	lsrs	r3, r3, #10
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	091b      	lsrs	r3, r3, #4
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	0e1b      	lsrs	r3, r3, #24
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f003 fa9c 	bl	800b35c <SDMMC_CmdBlockLength>
 8007e24:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00d      	beq.n	8007e48 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <HAL_SD_GetCardStatus+0x168>)
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007e48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3750      	adds	r7, #80	; 0x50
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	1fe00fff 	.word	0x1fe00fff

08007e58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b090      	sub	sp, #64	; 0x40
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d02e      	beq.n	8007f2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed6:	d106      	bne.n	8007ee6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8007ee4:	e029      	b.n	8007f3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eec:	d10a      	bne.n	8007f04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fbd6 	bl	80086a0 <SD_WideBus_Enable>
 8007ef4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38
 8007f02:	e01a      	b.n	8007f3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fc13 	bl	8008736 <SD_WideBus_Disable>
 8007f10:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f1e:	e00c      	b.n	8007f3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f2c:	e005      	b.n	8007f3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a60      	ldr	r2, [pc, #384]	; (80080c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f50:	e097      	b.n	8008082 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007f52:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007f56:	f7fd feb9 	bl	8005ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8007f5a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8086 	beq.w	8008070 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695a      	ldr	r2, [r3, #20]
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	4952      	ldr	r1, [pc, #328]	; (80080cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007f82:	fba1 1303 	umull	r1, r3, r1, r3
 8007f86:	0e1b      	lsrs	r3, r3, #24
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d303      	bcc.n	8007f94 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e05a      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f9c:	d103      	bne.n	8007fa6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e051      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fae:	d126      	bne.n	8007ffe <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10e      	bne.n	8007fd6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	4a45      	ldr	r2, [pc, #276]	; (80080d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d906      	bls.n	8007fce <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	4a42      	ldr	r2, [pc, #264]	; (80080cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	0e5b      	lsrs	r3, r3, #25
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e03d      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e039      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe2:	4a3b      	ldr	r2, [pc, #236]	; (80080d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d906      	bls.n	8007ff6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	4a38      	ldr	r2, [pc, #224]	; (80080cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	0e5b      	lsrs	r3, r3, #25
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	e029      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e025      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10e      	bne.n	8008024 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	4a32      	ldr	r2, [pc, #200]	; (80080d4 <HAL_SD_ConfigWideBusOperation+0x224>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d906      	bls.n	800801c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	4a2e      	ldr	r2, [pc, #184]	; (80080cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	0e1b      	lsrs	r3, r3, #24
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	e016      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e012      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	4a28      	ldr	r2, [pc, #160]	; (80080d4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d906      	bls.n	8008044 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	4a24      	ldr	r2, [pc, #144]	; (80080cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	61fb      	str	r3, [r7, #28]
 8008042:	e002      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681d      	ldr	r5, [r3, #0]
 8008054:	466c      	mov	r4, sp
 8008056:	f107 0318 	add.w	r3, r7, #24
 800805a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800805e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008068:	4628      	mov	r0, r5
 800806a:	f003 f899 	bl	800b1a0 <SDMMC_Init>
 800806e:	e008      	b.n	8008082 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800808a:	4618      	mov	r0, r3
 800808c:	f003 f966 	bl	800b35c <SDMMC_CmdBlockLength>
 8008090:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800809e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80080ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3730      	adds	r7, #48	; 0x30
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bdb0      	pop	{r4, r5, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	1fe00fff 	.word	0x1fe00fff
 80080cc:	55e63b89 	.word	0x55e63b89
 80080d0:	02faf080 	.word	0x02faf080
 80080d4:	017d7840 	.word	0x017d7840

080080d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fab0 	bl	8008650 <SD_SendStatus>
 80080f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0a5b      	lsrs	r3, r3, #9
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800810e:	693b      	ldr	r3, [r7, #16]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008118:	b5b0      	push	{r4, r5, r7, lr}
 800811a:	b090      	sub	sp, #64	; 0x40
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008120:	2301      	movs	r3, #1
 8008122:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f003 f893 	bl	800b254 <SDMMC_GetPowerState>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008134:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008138:	e0a9      	b.n	800828e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	2b03      	cmp	r3, #3
 8008140:	d02e      	beq.n	80081a0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f003 fad8 	bl	800b6fc <SDMMC_CmdSendCID>
 800814c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800814e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <SD_InitCard+0x40>
    {
      return errorstate;
 8008154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008156:	e09a      	b.n	800828e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f003 f8bd 	bl	800b2de <SDMMC_GetResponse>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2104      	movs	r1, #4
 8008170:	4618      	mov	r0, r3
 8008172:	f003 f8b4 	bl	800b2de <SDMMC_GetResponse>
 8008176:	4602      	mov	r2, r0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2108      	movs	r1, #8
 8008182:	4618      	mov	r0, r3
 8008184:	f003 f8ab 	bl	800b2de <SDMMC_GetResponse>
 8008188:	4602      	mov	r2, r0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	210c      	movs	r1, #12
 8008194:	4618      	mov	r0, r3
 8008196:	f003 f8a2 	bl	800b2de <SDMMC_GetResponse>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d00d      	beq.n	80081c4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f107 020e 	add.w	r2, r7, #14
 80081b0:	4611      	mov	r1, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f003 fae1 	bl	800b77a <SDMMC_CmdSetRelAdd>
 80081b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <SD_InitCard+0xac>
    {
      return errorstate;
 80081c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c2:	e064      	b.n	800828e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d036      	beq.n	800823a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f003 faaa 	bl	800b73a <SDMMC_CmdSendCSD>
 80081e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <SD_InitCard+0xda>
    {
      return errorstate;
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	e04d      	b.n	800828e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f003 f870 	bl	800b2de <SDMMC_GetResponse>
 80081fe:	4602      	mov	r2, r0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2104      	movs	r1, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f003 f867 	bl	800b2de <SDMMC_GetResponse>
 8008210:	4602      	mov	r2, r0
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2108      	movs	r1, #8
 800821c:	4618      	mov	r0, r3
 800821e:	f003 f85e 	bl	800b2de <SDMMC_GetResponse>
 8008222:	4602      	mov	r2, r0
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	210c      	movs	r1, #12
 800822e:	4618      	mov	r0, r3
 8008230:	f003 f855 	bl	800b2de <SDMMC_GetResponse>
 8008234:	4602      	mov	r2, r0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2104      	movs	r1, #4
 8008240:	4618      	mov	r0, r3
 8008242:	f003 f84c 	bl	800b2de <SDMMC_GetResponse>
 8008246:	4603      	mov	r3, r0
 8008248:	0d1a      	lsrs	r2, r3, #20
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800824e:	f107 0310 	add.w	r3, r7, #16
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff fba5 	bl	80079a4 <HAL_SD_GetCardCSD>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008264:	e013      	b.n	800828e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	2200      	movs	r2, #0
 8008272:	461c      	mov	r4, r3
 8008274:	4615      	mov	r5, r2
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	4608      	mov	r0, r1
 800827c:	f003 f954 	bl	800b528 <SDMMC_CmdSelDesel>
 8008280:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <SD_InitCard+0x174>
  {
    return errorstate;
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	e000      	b.n	800828e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3740      	adds	r7, #64	; 0x40
 8008292:	46bd      	mov	sp, r7
 8008294:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008298 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80082ac:	f7fa f8ba 	bl	8002424 <HAL_GetTick>
 80082b0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f003 f95a 	bl	800b570 <SDMMC_CmdGoIdleState>
 80082bc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <SD_PowerON+0x30>
  {
    return errorstate;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	e0ed      	b.n	80084a4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f003 f96d 	bl	800b5ac <SDMMC_CmdOperCond>
 80082d2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00d      	beq.n	80082f6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f003 f943 	bl	800b570 <SDMMC_CmdGoIdleState>
 80082ea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <SD_PowerON+0x64>
    {
      return errorstate;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	e0d6      	b.n	80084a4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008300:	2b01      	cmp	r3, #1
 8008302:	d137      	bne.n	8008374 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f003 f96e 	bl	800b5ec <SDMMC_CmdAppCommand>
 8008310:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d02d      	beq.n	8008374 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800831c:	e0c2      	b.n	80084a4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f003 f961 	bl	800b5ec <SDMMC_CmdAppCommand>
 800832a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	e0b6      	b.n	80084a4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	495c      	ldr	r1, [pc, #368]	; (80084ac <SD_PowerON+0x214>)
 800833c:	4618      	mov	r0, r3
 800833e:	f003 f978 	bl	800b632 <SDMMC_CmdAppOperCommand>
 8008342:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800834a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800834e:	e0a9      	b.n	80084a4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2100      	movs	r1, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f002 ffc1 	bl	800b2de <SDMMC_GetResponse>
 800835c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	0fdb      	lsrs	r3, r3, #31
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <SD_PowerON+0xd2>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <SD_PowerON+0xd4>
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]

    count++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800837a:	4293      	cmp	r3, r2
 800837c:	d802      	bhi.n	8008384 <SD_PowerON+0xec>
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0cc      	beq.n	800831e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800838a:	4293      	cmp	r3, r2
 800838c:	d902      	bls.n	8008394 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800838e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008392:	e087      	b.n	80084a4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d07e      	beq.n	800849c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d17a      	bne.n	80084a2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d075      	beq.n	80084a2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083bc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0208 	orr.w	r2, r2, #8
 80083cc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f003 fa38 	bl	800b848 <SDMMC_CmdVoltageSwitch>
 80083d8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <SD_PowerON+0x162>
        {
          return errorstate;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	e05f      	b.n	80084a4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083e4:	f7fa f81e 	bl	8002424 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f2:	d102      	bne.n	80083fa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80083f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083f8:	e054      	b.n	80084a4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008408:	d1ec      	bne.n	80083e4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800841e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008422:	d002      	beq.n	800842a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008428:	e03c      	b.n	80084a4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800842a:	2001      	movs	r0, #1
 800842c:	f000 fa9e 	bl	800896c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0204 	orr.w	r2, r2, #4
 800843e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008440:	e00a      	b.n	8008458 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008442:	f7f9 ffef 	bl	8002424 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008450:	d102      	bne.n	8008458 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008456:	e025      	b.n	80084a4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008466:	d1ec      	bne.n	8008442 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008470:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008480:	d102      	bne.n	8008488 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008486:	e00d      	b.n	80084a4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2213      	movs	r2, #19
 800848e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
 800849a:	e002      	b.n	80084a2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	c1100000 	.word	0xc1100000

080084b0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08c      	sub	sp, #48	; 0x30
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084ba:	f7f9 ffb3 	bl	8002424 <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f002 ff07 	bl	800b2de <SDMMC_GetResponse>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084da:	d102      	bne.n	80084e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084e0:	e0b0      	b.n	8008644 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	4618      	mov	r0, r3
 80084ea:	f002 ff37 	bl	800b35c <SDMMC_CmdBlockLength>
 80084ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	e0a0      	b.n	8008644 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850a:	041b      	lsls	r3, r3, #16
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f003 f86c 	bl	800b5ec <SDMMC_CmdAppCommand>
 8008514:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	e08d      	b.n	8008644 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800852c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800852e:	2340      	movs	r3, #64	; 0x40
 8008530:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008532:	2360      	movs	r3, #96	; 0x60
 8008534:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008536:	2302      	movs	r3, #2
 8008538:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800853a:	2300      	movs	r3, #0
 800853c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800853e:	2301      	movs	r3, #1
 8008540:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f107 0208 	add.w	r2, r7, #8
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f002 fed9 	bl	800b304 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f003 f954 	bl	800b804 <SDMMC_CmdStatusRegister>
 800855c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02b      	beq.n	80085bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	e069      	b.n	8008644 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d013      	beq.n	80085a6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800857e:	2300      	movs	r3, #0
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008582:	e00d      	b.n	80085a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f002 fe33 	bl	800b1f4 <SDMMC_ReadFIFO>
 800858e:	4602      	mov	r2, r0
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	601a      	str	r2, [r3, #0]
        pData++;
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	3304      	adds	r3, #4
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	3301      	adds	r3, #1
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	2b07      	cmp	r3, #7
 80085a4:	d9ee      	bls.n	8008584 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085a6:	f7f9 ff3d 	bl	8002424 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b4:	d102      	bne.n	80085bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085ba:	e043      	b.n	8008644 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0d2      	beq.n	8008570 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085d8:	2308      	movs	r3, #8
 80085da:	e033      	b.n	8008644 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	e02a      	b.n	8008644 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80085fc:	2320      	movs	r3, #32
 80085fe:	e021      	b.n	8008644 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f002 fdf5 	bl	800b1f4 <SDMMC_ReadFIFO>
 800860a:	4602      	mov	r2, r0
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	601a      	str	r2, [r3, #0]
    pData++;
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	3304      	adds	r3, #4
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008616:	f7f9 ff05 	bl	8002424 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008624:	d102      	bne.n	800862c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862a:	e00b      	b.n	8008644 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e2      	bne.n	8008600 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a03      	ldr	r2, [pc, #12]	; (800864c <SD_SendSDStatus+0x19c>)
 8008640:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	18000f3a 	.word	0x18000f3a

08008650 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008664:	e018      	b.n	8008698 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f003 f8a3 	bl	800b7be <SDMMC_CmdSendStatus>
 8008678:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	e009      	b.n	8008698 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f002 fe27 	bl	800b2de <SDMMC_GetResponse>
 8008690:	4602      	mov	r2, r0
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 fe11 	bl	800b2de <SDMMC_GetResponse>
 80086bc:	4603      	mov	r3, r0
 80086be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c6:	d102      	bne.n	80086ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086cc:	e02f      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f879 	bl	80087cc <SD_FindSCR>
 80086da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	e023      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01c      	beq.n	800872a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f002 ff75 	bl	800b5ec <SDMMC_CmdAppCommand>
 8008702:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	e00f      	b.n	800872e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f002 ffac 	bl	800b672 <SDMMC_CmdBusWidth>
 800871a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e003      	b.n	800872e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
 8008728:	e001      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800872a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f002 fdc6 	bl	800b2de <SDMMC_GetResponse>
 8008752:	4603      	mov	r3, r0
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800875c:	d102      	bne.n	8008764 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800875e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008762:	e02f      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f82e 	bl	80087cc <SD_FindSCR>
 8008770:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	e023      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01c      	beq.n	80087c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f002 ff2a 	bl	800b5ec <SDMMC_CmdAppCommand>
 8008798:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	e00f      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f002 ff61 	bl	800b672 <SDMMC_CmdBusWidth>
 80087b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e003      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087bc:	2300      	movs	r3, #0
 80087be:	e001      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087d6:	f7f9 fe25 	bl	8002424 <HAL_GetTick>
 80087da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80087e0:	2300      	movs	r3, #0
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2108      	movs	r1, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 fdb2 	bl	800b35c <SDMMC_CmdBlockLength>
 80087f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	e0ad      	b.n	8008960 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880c:	041b      	lsls	r3, r3, #16
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f002 feeb 	bl	800b5ec <SDMMC_CmdAppCommand>
 8008816:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <SD_FindSCR+0x56>
  {
    return errorstate;
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	e09e      	b.n	8008960 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008826:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008828:	2308      	movs	r3, #8
 800882a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800882c:	2330      	movs	r3, #48	; 0x30
 800882e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008830:	2302      	movs	r3, #2
 8008832:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008834:	2300      	movs	r3, #0
 8008836:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008838:	2301      	movs	r3, #1
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f107 0210 	add.w	r2, r7, #16
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f002 fd5c 	bl	800b304 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f002 ff31 	bl	800b6b8 <SDMMC_CmdSendSCR>
 8008856:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d027      	beq.n	80088ae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	e07e      	b.n	8008960 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d113      	bne.n	8008898 <SD_FindSCR+0xcc>
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	2b00      	cmp	r3, #0
 8008874:	d110      	bne.n	8008898 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f002 fcba 	bl	800b1f4 <SDMMC_ReadFIFO>
 8008880:	4603      	mov	r3, r0
 8008882:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f002 fcb3 	bl	800b1f4 <SDMMC_ReadFIFO>
 800888e:	4603      	mov	r3, r0
 8008890:	60fb      	str	r3, [r7, #12]
      index++;
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	3301      	adds	r3, #1
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008898:	f7f9 fdc4 	bl	8002424 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088a6:	d102      	bne.n	80088ae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ac:	e058      	b.n	8008960 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b4:	f240 532a 	movw	r3, #1322	; 0x52a
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0d1      	beq.n	8008862 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2208      	movs	r2, #8
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80088d4:	2308      	movs	r3, #8
 80088d6:	e043      	b.n	8008960 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2202      	movs	r2, #2
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088ee:	2302      	movs	r3, #2
 80088f0:	e036      	b.n	8008960 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2220      	movs	r2, #32
 8008906:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008908:	2320      	movs	r3, #32
 800890a:	e029      	b.n	8008960 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a15      	ldr	r2, [pc, #84]	; (8008968 <SD_FindSCR+0x19c>)
 8008912:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	061a      	lsls	r2, r3, #24
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008920:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	0a1b      	lsrs	r3, r3, #8
 8008926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800892a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0e1b      	lsrs	r3, r3, #24
 8008930:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	601a      	str	r2, [r3, #0]
    scr++;
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	3304      	adds	r3, #4
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	061a      	lsls	r2, r3, #24
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008948:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	0a1b      	lsrs	r3, r3, #8
 800894e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008952:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	0e1b      	lsrs	r3, r3, #24
 8008958:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3738      	adds	r7, #56	; 0x38
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	18000f3a 	.word	0x18000f3a

0800896c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e095      	b.n	8008ac0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	d108      	bne.n	80089ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a4:	d009      	beq.n	80089ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	61da      	str	r2, [r3, #28]
 80089ac:	e005      	b.n	80089ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7f9 f9f9 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089fa:	d902      	bls.n	8008a02 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e002      	b.n	8008a08 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a10:	d007      	beq.n	8008a22 <HAL_SPI_Init+0xa0>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a64:	ea42 0103 	orr.w	r1, r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	0c1b      	lsrs	r3, r3, #16
 8008a7e:	f003 0204 	and.w	r2, r3, #4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	f003 0308 	and.w	r3, r3, #8
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a9e:	ea42 0103 	orr.w	r1, r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e049      	b.n	8008b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7f9 f9ae 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f000 fa62 	bl	8008fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e049      	b.n	8008c1c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f841 	bl	8008c24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f000 fa0b 	bl	8008fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d122      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d11b      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0202 	mvn.w	r2, #2
 8008c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f98a 	bl	8008f94 <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f97c 	bl	8008f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f98d 	bl	8008fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0204 	mvn.w	r2, #4
 8008cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f960 	bl	8008f94 <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f952 	bl	8008f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f963 	bl	8008fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b08      	cmp	r3, #8
 8008cf4:	d122      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d11b      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0208 	mvn.w	r2, #8
 8008d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2204      	movs	r2, #4
 8008d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f936 	bl	8008f94 <HAL_TIM_IC_CaptureCallback>
 8008d28:	e005      	b.n	8008d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f928 	bl	8008f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f939 	bl	8008fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0310 	and.w	r3, r3, #16
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d122      	bne.n	8008d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0310 	and.w	r3, r3, #16
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d11b      	bne.n	8008d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0210 	mvn.w	r2, #16
 8008d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2208      	movs	r2, #8
 8008d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f90c 	bl	8008f94 <HAL_TIM_IC_CaptureCallback>
 8008d7c:	e005      	b.n	8008d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f8fe 	bl	8008f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f90f 	bl	8008fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d10e      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d107      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f06f 0201 	mvn.w	r2, #1
 8008db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8d8 	bl	8008f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc6:	2b80      	cmp	r3, #128	; 0x80
 8008dc8:	d10e      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b80      	cmp	r3, #128	; 0x80
 8008dd6:	d107      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fcec 	bl	80097c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df6:	d10e      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d107      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fcdf 	bl	80097d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e20:	2b40      	cmp	r3, #64	; 0x40
 8008e22:	d10e      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d107      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f8bd 	bl	8008fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0320 	and.w	r3, r3, #32
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d10e      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d107      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f06f 0220 	mvn.w	r2, #32
 8008e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc9f 	bl	80097ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008e92:	2302      	movs	r3, #2
 8008e94:	e066      	b.n	8008f64 <HAL_TIM_OC_ConfigChannel+0xec>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b14      	cmp	r3, #20
 8008ea2:	d857      	bhi.n	8008f54 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <HAL_TIM_OC_ConfigChannel+0x34>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008f55 	.word	0x08008f55
 8008eb4:	08008f55 	.word	0x08008f55
 8008eb8:	08008f55 	.word	0x08008f55
 8008ebc:	08008f0f 	.word	0x08008f0f
 8008ec0:	08008f55 	.word	0x08008f55
 8008ec4:	08008f55 	.word	0x08008f55
 8008ec8:	08008f55 	.word	0x08008f55
 8008ecc:	08008f1d 	.word	0x08008f1d
 8008ed0:	08008f55 	.word	0x08008f55
 8008ed4:	08008f55 	.word	0x08008f55
 8008ed8:	08008f55 	.word	0x08008f55
 8008edc:	08008f2b 	.word	0x08008f2b
 8008ee0:	08008f55 	.word	0x08008f55
 8008ee4:	08008f55 	.word	0x08008f55
 8008ee8:	08008f55 	.word	0x08008f55
 8008eec:	08008f39 	.word	0x08008f39
 8008ef0:	08008f55 	.word	0x08008f55
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f47 	.word	0x08008f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f8fc 	bl	8009104 <TIM_OC1_SetConfig>
      break;
 8008f0c:	e025      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f985 	bl	8009224 <TIM_OC2_SetConfig>
      break;
 8008f1a:	e01e      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68b9      	ldr	r1, [r7, #8]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fa08 	bl	8009338 <TIM_OC3_SetConfig>
      break;
 8008f28:	e017      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fa89 	bl	8009448 <TIM_OC4_SetConfig>
      break;
 8008f36:	e010      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 faec 	bl	800951c <TIM_OC5_SetConfig>
      break;
 8008f44:	e009      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fb49 	bl	80095e4 <TIM_OC6_SetConfig>
      break;
 8008f52:	e002      	b.n	8008f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
      break;
 8008f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a40      	ldr	r2, [pc, #256]	; (80090e4 <TIM_Base_SetConfig+0x114>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d013      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d00f      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3d      	ldr	r2, [pc, #244]	; (80090e8 <TIM_Base_SetConfig+0x118>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00b      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3c      	ldr	r2, [pc, #240]	; (80090ec <TIM_Base_SetConfig+0x11c>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a3b      	ldr	r2, [pc, #236]	; (80090f0 <TIM_Base_SetConfig+0x120>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_Base_SetConfig+0x40>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a3a      	ldr	r2, [pc, #232]	; (80090f4 <TIM_Base_SetConfig+0x124>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d108      	bne.n	8009022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2f      	ldr	r2, [pc, #188]	; (80090e4 <TIM_Base_SetConfig+0x114>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01f      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009030:	d01b      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2c      	ldr	r2, [pc, #176]	; (80090e8 <TIM_Base_SetConfig+0x118>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d017      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <TIM_Base_SetConfig+0x11c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <TIM_Base_SetConfig+0x120>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a29      	ldr	r2, [pc, #164]	; (80090f4 <TIM_Base_SetConfig+0x124>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00b      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a28      	ldr	r2, [pc, #160]	; (80090f8 <TIM_Base_SetConfig+0x128>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d007      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a27      	ldr	r2, [pc, #156]	; (80090fc <TIM_Base_SetConfig+0x12c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_Base_SetConfig+0x9a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a26      	ldr	r2, [pc, #152]	; (8009100 <TIM_Base_SetConfig+0x130>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a10      	ldr	r2, [pc, #64]	; (80090e4 <TIM_Base_SetConfig+0x114>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00f      	beq.n	80090c8 <TIM_Base_SetConfig+0xf8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <TIM_Base_SetConfig+0x124>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00b      	beq.n	80090c8 <TIM_Base_SetConfig+0xf8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <TIM_Base_SetConfig+0x128>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d007      	beq.n	80090c8 <TIM_Base_SetConfig+0xf8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a10      	ldr	r2, [pc, #64]	; (80090fc <TIM_Base_SetConfig+0x12c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d003      	beq.n	80090c8 <TIM_Base_SetConfig+0xf8>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <TIM_Base_SetConfig+0x130>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d103      	bne.n	80090d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	615a      	str	r2, [r3, #20]
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40000c00 	.word	0x40000c00
 80090f4:	40013400 	.word	0x40013400
 80090f8:	40014000 	.word	0x40014000
 80090fc:	40014400 	.word	0x40014400
 8009100:	40014800 	.word	0x40014800

08009104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0201 	bic.w	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f023 0302 	bic.w	r3, r3, #2
 8009150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4313      	orrs	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a2c      	ldr	r2, [pc, #176]	; (8009210 <TIM_OC1_SetConfig+0x10c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00f      	beq.n	8009184 <TIM_OC1_SetConfig+0x80>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a2b      	ldr	r2, [pc, #172]	; (8009214 <TIM_OC1_SetConfig+0x110>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00b      	beq.n	8009184 <TIM_OC1_SetConfig+0x80>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a2a      	ldr	r2, [pc, #168]	; (8009218 <TIM_OC1_SetConfig+0x114>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d007      	beq.n	8009184 <TIM_OC1_SetConfig+0x80>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a29      	ldr	r2, [pc, #164]	; (800921c <TIM_OC1_SetConfig+0x118>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_OC1_SetConfig+0x80>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a28      	ldr	r2, [pc, #160]	; (8009220 <TIM_OC1_SetConfig+0x11c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d10c      	bne.n	800919e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f023 0308 	bic.w	r3, r3, #8
 800918a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f023 0304 	bic.w	r3, r3, #4
 800919c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a1b      	ldr	r2, [pc, #108]	; (8009210 <TIM_OC1_SetConfig+0x10c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00f      	beq.n	80091c6 <TIM_OC1_SetConfig+0xc2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a1a      	ldr	r2, [pc, #104]	; (8009214 <TIM_OC1_SetConfig+0x110>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00b      	beq.n	80091c6 <TIM_OC1_SetConfig+0xc2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a19      	ldr	r2, [pc, #100]	; (8009218 <TIM_OC1_SetConfig+0x114>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d007      	beq.n	80091c6 <TIM_OC1_SetConfig+0xc2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a18      	ldr	r2, [pc, #96]	; (800921c <TIM_OC1_SetConfig+0x118>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d003      	beq.n	80091c6 <TIM_OC1_SetConfig+0xc2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a17      	ldr	r2, [pc, #92]	; (8009220 <TIM_OC1_SetConfig+0x11c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d111      	bne.n	80091ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	621a      	str	r2, [r3, #32]
}
 8009204:	bf00      	nop
 8009206:	371c      	adds	r7, #28
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	40012c00 	.word	0x40012c00
 8009214:	40013400 	.word	0x40013400
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0210 	bic.w	r2, r3, #16
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800925e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f023 0320 	bic.w	r3, r3, #32
 8009272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a28      	ldr	r2, [pc, #160]	; (8009324 <TIM_OC2_SetConfig+0x100>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d003      	beq.n	8009290 <TIM_OC2_SetConfig+0x6c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a27      	ldr	r2, [pc, #156]	; (8009328 <TIM_OC2_SetConfig+0x104>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10d      	bne.n	80092ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <TIM_OC2_SetConfig+0x100>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00f      	beq.n	80092d4 <TIM_OC2_SetConfig+0xb0>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a1c      	ldr	r2, [pc, #112]	; (8009328 <TIM_OC2_SetConfig+0x104>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00b      	beq.n	80092d4 <TIM_OC2_SetConfig+0xb0>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a1b      	ldr	r2, [pc, #108]	; (800932c <TIM_OC2_SetConfig+0x108>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d007      	beq.n	80092d4 <TIM_OC2_SetConfig+0xb0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a1a      	ldr	r2, [pc, #104]	; (8009330 <TIM_OC2_SetConfig+0x10c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d003      	beq.n	80092d4 <TIM_OC2_SetConfig+0xb0>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a19      	ldr	r2, [pc, #100]	; (8009334 <TIM_OC2_SetConfig+0x110>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d113      	bne.n	80092fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	621a      	str	r2, [r3, #32]
}
 8009316:	bf00      	nop
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	40012c00 	.word	0x40012c00
 8009328:	40013400 	.word	0x40013400
 800932c:	40014000 	.word	0x40014000
 8009330:	40014400 	.word	0x40014400
 8009334:	40014800 	.word	0x40014800

08009338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a27      	ldr	r2, [pc, #156]	; (8009434 <TIM_OC3_SetConfig+0xfc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d003      	beq.n	80093a2 <TIM_OC3_SetConfig+0x6a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a26      	ldr	r2, [pc, #152]	; (8009438 <TIM_OC3_SetConfig+0x100>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d10d      	bne.n	80093be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1c      	ldr	r2, [pc, #112]	; (8009434 <TIM_OC3_SetConfig+0xfc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00f      	beq.n	80093e6 <TIM_OC3_SetConfig+0xae>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a1b      	ldr	r2, [pc, #108]	; (8009438 <TIM_OC3_SetConfig+0x100>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00b      	beq.n	80093e6 <TIM_OC3_SetConfig+0xae>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a1a      	ldr	r2, [pc, #104]	; (800943c <TIM_OC3_SetConfig+0x104>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d007      	beq.n	80093e6 <TIM_OC3_SetConfig+0xae>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a19      	ldr	r2, [pc, #100]	; (8009440 <TIM_OC3_SetConfig+0x108>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d003      	beq.n	80093e6 <TIM_OC3_SetConfig+0xae>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a18      	ldr	r2, [pc, #96]	; (8009444 <TIM_OC3_SetConfig+0x10c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d113      	bne.n	800940e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40012c00 	.word	0x40012c00
 8009438:	40013400 	.word	0x40013400
 800943c:	40014000 	.word	0x40014000
 8009440:	40014400 	.word	0x40014400
 8009444:	40014800 	.word	0x40014800

08009448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800947a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	031b      	lsls	r3, r3, #12
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a18      	ldr	r2, [pc, #96]	; (8009508 <TIM_OC4_SetConfig+0xc0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00f      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a17      	ldr	r2, [pc, #92]	; (800950c <TIM_OC4_SetConfig+0xc4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a16      	ldr	r2, [pc, #88]	; (8009510 <TIM_OC4_SetConfig+0xc8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a15      	ldr	r2, [pc, #84]	; (8009514 <TIM_OC4_SetConfig+0xcc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_OC4_SetConfig+0x84>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <TIM_OC4_SetConfig+0xd0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d109      	bne.n	80094e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	019b      	lsls	r3, r3, #6
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40012c00 	.word	0x40012c00
 800950c:	40013400 	.word	0x40013400
 8009510:	40014000 	.word	0x40014000
 8009514:	40014400 	.word	0x40014400
 8009518:	40014800 	.word	0x40014800

0800951c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <TIM_OC5_SetConfig+0xb4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_OC5_SetConfig+0x7a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <TIM_OC5_SetConfig+0xb8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00b      	beq.n	8009596 <TIM_OC5_SetConfig+0x7a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <TIM_OC5_SetConfig+0xbc>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_OC5_SetConfig+0x7a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a14      	ldr	r2, [pc, #80]	; (80095dc <TIM_OC5_SetConfig+0xc0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_OC5_SetConfig+0x7a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <TIM_OC5_SetConfig+0xc4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d109      	bne.n	80095aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800959c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	621a      	str	r2, [r3, #32]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40013400 	.word	0x40013400
 80095d8:	40014000 	.word	0x40014000
 80095dc:	40014400 	.word	0x40014400
 80095e0:	40014800 	.word	0x40014800

080095e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4313      	orrs	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800962a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	051b      	lsls	r3, r3, #20
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a18      	ldr	r2, [pc, #96]	; (800969c <TIM_OC6_SetConfig+0xb8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d00f      	beq.n	8009660 <TIM_OC6_SetConfig+0x7c>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a17      	ldr	r2, [pc, #92]	; (80096a0 <TIM_OC6_SetConfig+0xbc>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00b      	beq.n	8009660 <TIM_OC6_SetConfig+0x7c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a16      	ldr	r2, [pc, #88]	; (80096a4 <TIM_OC6_SetConfig+0xc0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d007      	beq.n	8009660 <TIM_OC6_SetConfig+0x7c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <TIM_OC6_SetConfig+0xc4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC6_SetConfig+0x7c>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a14      	ldr	r2, [pc, #80]	; (80096ac <TIM_OC6_SetConfig+0xc8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d109      	bne.n	8009674 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009666:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	029b      	lsls	r3, r3, #10
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	621a      	str	r2, [r3, #32]
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40012c00 	.word	0x40012c00
 80096a0:	40013400 	.word	0x40013400
 80096a4:	40014000 	.word	0x40014000
 80096a8:	40014400 	.word	0x40014400
 80096ac:	40014800 	.word	0x40014800

080096b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e065      	b.n	8009798 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a16      	ldr	r2, [pc, #88]	; (80097a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d004      	beq.n	800975a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a14      	ldr	r2, [pc, #80]	; (80097a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d115      	bne.n	8009786 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	051b      	lsls	r3, r3, #20
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40013400 	.word	0x40013400

080097ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e042      	b.n	8009880 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7f8 fb3f 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2224      	movs	r2, #36	; 0x24
 8009816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0201 	bic.w	r2, r2, #1
 8009828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fc66 	bl	800a0fc <UART_SetConfig>
 8009830:	4603      	mov	r3, r0
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e022      	b.n	8009880 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 ff56 	bl	800a6f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 ffdd 	bl	800a838 <UART_CheckIdleState>
 800987e:	4603      	mov	r3, r0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	603b      	str	r3, [r7, #0]
 8009894:	4613      	mov	r3, r2
 8009896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800989e:	2b20      	cmp	r3, #32
 80098a0:	f040 8084 	bne.w	80099ac <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_UART_Transmit+0x28>
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e07c      	b.n	80099ae <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Transmit+0x3a>
 80098be:	2302      	movs	r3, #2
 80098c0:	e075      	b.n	80099ae <HAL_UART_Transmit+0x126>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2221      	movs	r2, #33	; 0x21
 80098d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098da:	f7f8 fda3 	bl	8002424 <HAL_GetTick>
 80098de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	88fa      	ldrh	r2, [r7, #6]
 80098e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	88fa      	ldrh	r2, [r7, #6]
 80098ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f8:	d108      	bne.n	800990c <HAL_UART_Transmit+0x84>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d104      	bne.n	800990c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	61bb      	str	r3, [r7, #24]
 800990a:	e003      	b.n	8009914 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800991c:	e02d      	b.n	800997a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2200      	movs	r2, #0
 8009926:	2180      	movs	r1, #128	; 0x80
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 ffd0 	bl	800a8ce <UART_WaitOnFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e03a      	b.n	80099ae <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10b      	bne.n	8009956 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	881a      	ldrh	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800994a:	b292      	uxth	r2, r2
 800994c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	3302      	adds	r3, #2
 8009952:	61bb      	str	r3, [r7, #24]
 8009954:	e008      	b.n	8009968 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	b292      	uxth	r2, r2
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3301      	adds	r3, #1
 8009966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1cb      	bne.n	800991e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2200      	movs	r2, #0
 800998e:	2140      	movs	r1, #64	; 0x40
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 ff9c 	bl	800a8ce <UART_WaitOnFlagUntilTimeout>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e006      	b.n	80099ae <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d142      	bne.n	8009a56 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <HAL_UART_Receive_DMA+0x24>
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e03b      	b.n	8009a58 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Receive_DMA+0x36>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e034      	b.n	8009a58 <HAL_UART_Receive_DMA+0xa0>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <HAL_UART_Receive_DMA+0xa8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d01f      	beq.n	8009a46 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d018      	beq.n	8009a46 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	613b      	str	r3, [r7, #16]
   return(result);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	623b      	str	r3, [r7, #32]
 8009a34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	69f9      	ldr	r1, [r7, #28]
 8009a38:	6a3a      	ldr	r2, [r7, #32]
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e6      	bne.n	8009a14 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f001 f807 	bl	800aa60 <UART_Start_Receive_DMA>
 8009a52:	4603      	mov	r3, r0
 8009a54:	e000      	b.n	8009a58 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009a56:	2302      	movs	r3, #2
  }
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3728      	adds	r7, #40	; 0x28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	40008000 	.word	0x40008000

08009a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b0ba      	sub	sp, #232	; 0xe8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a92:	4013      	ands	r3, r2
 8009a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11b      	bne.n	8009ad8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d015      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d105      	bne.n	8009ac4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 82d6 	beq.w	800a07a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
      }
      return;
 8009ad6:	e2d0      	b.n	800a07a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 811f 	beq.w	8009d20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ae2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ae6:	4b8b      	ldr	r3, [pc, #556]	; (8009d14 <HAL_UART_IRQHandler+0x2b0>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009aee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009af2:	4b89      	ldr	r3, [pc, #548]	; (8009d18 <HAL_UART_IRQHandler+0x2b4>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 8112 	beq.w	8009d20 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d011      	beq.n	8009b2c <HAL_UART_IRQHandler+0xc8>
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b22:	f043 0201 	orr.w	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d011      	beq.n	8009b5c <HAL_UART_IRQHandler+0xf8>
 8009b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b52:	f043 0204 	orr.w	r2, r3, #4
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d011      	beq.n	8009b8c <HAL_UART_IRQHandler+0x128>
 8009b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b82:	f043 0202 	orr.w	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d017      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d105      	bne.n	8009bb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ba4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ba8:	4b5a      	ldr	r3, [pc, #360]	; (8009d14 <HAL_UART_IRQHandler+0x2b0>)
 8009baa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bbe:	f043 0208 	orr.w	r2, r3, #8
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d012      	beq.n	8009bfa <HAL_UART_IRQHandler+0x196>
 8009bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00c      	beq.n	8009bfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf0:	f043 0220 	orr.w	r2, r3, #32
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 823c 	beq.w	800a07e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d013      	beq.n	8009c3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d007      	beq.n	8009c3a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b40      	cmp	r3, #64	; 0x40
 8009c50:	d005      	beq.n	8009c5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d04f      	beq.n	8009cfe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 ffe7 	bl	800ac32 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6e:	2b40      	cmp	r3, #64	; 0x40
 8009c70:	d141      	bne.n	8009cf6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1d9      	bne.n	8009c72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d013      	beq.n	8009cee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cca:	4a14      	ldr	r2, [pc, #80]	; (8009d1c <HAL_UART_IRQHandler+0x2b8>)
 8009ccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f8 fe67 	bl	80029a6 <HAL_DMA_Abort_IT>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d017      	beq.n	8009d0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cec:	e00f      	b.n	8009d0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f9ee 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf4:	e00b      	b.n	8009d0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f9ea 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfc:	e007      	b.n	8009d0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f9e6 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009d0c:	e1b7      	b.n	800a07e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d0e:	bf00      	nop
    return;
 8009d10:	e1b5      	b.n	800a07e <HAL_UART_IRQHandler+0x61a>
 8009d12:	bf00      	nop
 8009d14:	10000001 	.word	0x10000001
 8009d18:	04000120 	.word	0x04000120
 8009d1c:	0800aedd 	.word	0x0800aedd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	f040 814a 	bne.w	8009fbe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8143 	beq.w	8009fbe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 813c 	beq.w	8009fbe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2210      	movs	r2, #16
 8009d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b40      	cmp	r3, #64	; 0x40
 8009d5a:	f040 80b5 	bne.w	8009ec8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8187 	beq.w	800a082 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	f080 817f 	bcs.w	800a082 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 8086 	bne.w	8009eac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1da      	bne.n	8009da0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3308      	adds	r3, #8
 8009df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e1      	bne.n	8009dea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3308      	adds	r3, #8
 8009e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e3      	bne.n	8009e26 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7c:	f023 0310 	bic.w	r3, r3, #16
 8009e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e4      	bne.n	8009e6c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f8 fd21 	bl	80028ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f90f 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ec6:	e0dc      	b.n	800a082 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 80ce 	beq.w	800a086 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 80c9 	beq.w	800a086 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f16:	647b      	str	r3, [r7, #68]	; 0x44
 8009f18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e4      	bne.n	8009ef4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	623b      	str	r3, [r7, #32]
   return(result);
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f40:	f023 0301 	bic.w	r3, r3, #1
 8009f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f52:	633a      	str	r2, [r7, #48]	; 0x30
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e1      	bne.n	8009f2a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0310 	bic.w	r3, r3, #16
 8009f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	69b9      	ldr	r1, [r7, #24]
 8009fa2:	69fa      	ldr	r2, [r7, #28]
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e4      	bne.n	8009f7a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f894 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fbc:	e063      	b.n	800a086 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00e      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x584>
 8009fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 ffbc 	bl	800af5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fe6:	e051      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d014      	beq.n	800a01e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d105      	bne.n	800a00c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d008      	beq.n	800a01e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a010:	2b00      	cmp	r3, #0
 800a012:	d03a      	beq.n	800a08a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
    }
    return;
 800a01c:	e035      	b.n	800a08a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <HAL_UART_IRQHandler+0x5da>
 800a02a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 ff66 	bl	800af08 <UART_EndTransmit_IT>
    return;
 800a03c:	e026      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d009      	beq.n	800a05e <HAL_UART_IRQHandler+0x5fa>
 800a04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a04e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 ff95 	bl	800af86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a05c:	e016      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d010      	beq.n	800a08c <HAL_UART_IRQHandler+0x628>
 800a06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da0c      	bge.n	800a08c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 ff7d 	bl	800af72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a078:	e008      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
      return;
 800a07a:	bf00      	nop
 800a07c:	e006      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
    return;
 800a07e:	bf00      	nop
 800a080:	e004      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
      return;
 800a082:	bf00      	nop
 800a084:	e002      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
      return;
 800a086:	bf00      	nop
 800a088:	e000      	b.n	800a08c <HAL_UART_IRQHandler+0x628>
    return;
 800a08a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a08c:	37e8      	adds	r7, #232	; 0xe8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop

0800a094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a100:	b08c      	sub	sp, #48	; 0x30
 800a102:	af00      	add	r7, sp, #0
 800a104:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	431a      	orrs	r2, r3
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	4313      	orrs	r3, r2
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4baa      	ldr	r3, [pc, #680]	; (800a3d4 <UART_SetConfig+0x2d8>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a134:	430b      	orrs	r3, r1
 800a136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a9f      	ldr	r2, [pc, #636]	; (800a3d8 <UART_SetConfig+0x2dc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a164:	4313      	orrs	r3, r2
 800a166:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a186:	f023 010f 	bic.w	r1, r3, #15
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a90      	ldr	r2, [pc, #576]	; (800a3dc <UART_SetConfig+0x2e0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d125      	bne.n	800a1ec <UART_SetConfig+0xf0>
 800a1a0:	4b8f      	ldr	r3, [pc, #572]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d81a      	bhi.n	800a1e4 <UART_SetConfig+0xe8>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <UART_SetConfig+0xb8>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1c5 	.word	0x0800a1c5
 800a1b8:	0800a1d5 	.word	0x0800a1d5
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a1dd 	.word	0x0800a1dd
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ca:	e116      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1d2:	e112      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1da:	e10e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1dc:	2308      	movs	r3, #8
 800a1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1e2:	e10a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ea:	e106      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a7c      	ldr	r2, [pc, #496]	; (800a3e4 <UART_SetConfig+0x2e8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d138      	bne.n	800a268 <UART_SetConfig+0x16c>
 800a1f6:	4b7a      	ldr	r3, [pc, #488]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fc:	f003 030c 	and.w	r3, r3, #12
 800a200:	2b0c      	cmp	r3, #12
 800a202:	d82d      	bhi.n	800a260 <UART_SetConfig+0x164>
 800a204:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <UART_SetConfig+0x110>)
 800a206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20a:	bf00      	nop
 800a20c:	0800a241 	.word	0x0800a241
 800a210:	0800a261 	.word	0x0800a261
 800a214:	0800a261 	.word	0x0800a261
 800a218:	0800a261 	.word	0x0800a261
 800a21c:	0800a251 	.word	0x0800a251
 800a220:	0800a261 	.word	0x0800a261
 800a224:	0800a261 	.word	0x0800a261
 800a228:	0800a261 	.word	0x0800a261
 800a22c:	0800a249 	.word	0x0800a249
 800a230:	0800a261 	.word	0x0800a261
 800a234:	0800a261 	.word	0x0800a261
 800a238:	0800a261 	.word	0x0800a261
 800a23c:	0800a259 	.word	0x0800a259
 800a240:	2300      	movs	r3, #0
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a246:	e0d8      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a248:	2302      	movs	r3, #2
 800a24a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a24e:	e0d4      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a256:	e0d0      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a25e:	e0cc      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a266:	e0c8      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a5e      	ldr	r2, [pc, #376]	; (800a3e8 <UART_SetConfig+0x2ec>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d125      	bne.n	800a2be <UART_SetConfig+0x1c2>
 800a272:	4b5b      	ldr	r3, [pc, #364]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a27c:	2b30      	cmp	r3, #48	; 0x30
 800a27e:	d016      	beq.n	800a2ae <UART_SetConfig+0x1b2>
 800a280:	2b30      	cmp	r3, #48	; 0x30
 800a282:	d818      	bhi.n	800a2b6 <UART_SetConfig+0x1ba>
 800a284:	2b20      	cmp	r3, #32
 800a286:	d00a      	beq.n	800a29e <UART_SetConfig+0x1a2>
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d814      	bhi.n	800a2b6 <UART_SetConfig+0x1ba>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <UART_SetConfig+0x19a>
 800a290:	2b10      	cmp	r3, #16
 800a292:	d008      	beq.n	800a2a6 <UART_SetConfig+0x1aa>
 800a294:	e00f      	b.n	800a2b6 <UART_SetConfig+0x1ba>
 800a296:	2300      	movs	r3, #0
 800a298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a29c:	e0ad      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2a4:	e0a9      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2a6:	2304      	movs	r3, #4
 800a2a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ac:	e0a5      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2ae:	2308      	movs	r3, #8
 800a2b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2b4:	e0a1      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2b6:	2310      	movs	r3, #16
 800a2b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2bc:	e09d      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a4a      	ldr	r2, [pc, #296]	; (800a3ec <UART_SetConfig+0x2f0>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d125      	bne.n	800a314 <UART_SetConfig+0x218>
 800a2c8:	4b45      	ldr	r3, [pc, #276]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a2d4:	d016      	beq.n	800a304 <UART_SetConfig+0x208>
 800a2d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a2d8:	d818      	bhi.n	800a30c <UART_SetConfig+0x210>
 800a2da:	2b80      	cmp	r3, #128	; 0x80
 800a2dc:	d00a      	beq.n	800a2f4 <UART_SetConfig+0x1f8>
 800a2de:	2b80      	cmp	r3, #128	; 0x80
 800a2e0:	d814      	bhi.n	800a30c <UART_SetConfig+0x210>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <UART_SetConfig+0x1f0>
 800a2e6:	2b40      	cmp	r3, #64	; 0x40
 800a2e8:	d008      	beq.n	800a2fc <UART_SetConfig+0x200>
 800a2ea:	e00f      	b.n	800a30c <UART_SetConfig+0x210>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2f2:	e082      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2fa:	e07e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a302:	e07a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a30a:	e076      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a312:	e072      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a35      	ldr	r2, [pc, #212]	; (800a3f0 <UART_SetConfig+0x2f4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d12a      	bne.n	800a374 <UART_SetConfig+0x278>
 800a31e:	4b30      	ldr	r3, [pc, #192]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a32c:	d01a      	beq.n	800a364 <UART_SetConfig+0x268>
 800a32e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a332:	d81b      	bhi.n	800a36c <UART_SetConfig+0x270>
 800a334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a338:	d00c      	beq.n	800a354 <UART_SetConfig+0x258>
 800a33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33e:	d815      	bhi.n	800a36c <UART_SetConfig+0x270>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <UART_SetConfig+0x250>
 800a344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a348:	d008      	beq.n	800a35c <UART_SetConfig+0x260>
 800a34a:	e00f      	b.n	800a36c <UART_SetConfig+0x270>
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a352:	e052      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a354:	2302      	movs	r3, #2
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a35a:	e04e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a362:	e04a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a36a:	e046      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a372:	e042      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <UART_SetConfig+0x2dc>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d13a      	bne.n	800a3f4 <UART_SetConfig+0x2f8>
 800a37e:	4b18      	ldr	r3, [pc, #96]	; (800a3e0 <UART_SetConfig+0x2e4>)
 800a380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a38c:	d01a      	beq.n	800a3c4 <UART_SetConfig+0x2c8>
 800a38e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a392:	d81b      	bhi.n	800a3cc <UART_SetConfig+0x2d0>
 800a394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a398:	d00c      	beq.n	800a3b4 <UART_SetConfig+0x2b8>
 800a39a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39e:	d815      	bhi.n	800a3cc <UART_SetConfig+0x2d0>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <UART_SetConfig+0x2b0>
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a8:	d008      	beq.n	800a3bc <UART_SetConfig+0x2c0>
 800a3aa:	e00f      	b.n	800a3cc <UART_SetConfig+0x2d0>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3b2:	e022      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ba:	e01e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3bc:	2304      	movs	r3, #4
 800a3be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3c2:	e01a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3c4:	2308      	movs	r3, #8
 800a3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ca:	e016      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3d2:	e012      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3d4:	cfff69f3 	.word	0xcfff69f3
 800a3d8:	40008000 	.word	0x40008000
 800a3dc:	40013800 	.word	0x40013800
 800a3e0:	40021000 	.word	0x40021000
 800a3e4:	40004400 	.word	0x40004400
 800a3e8:	40004800 	.word	0x40004800
 800a3ec:	40004c00 	.word	0x40004c00
 800a3f0:	40005000 	.word	0x40005000
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4aae      	ldr	r2, [pc, #696]	; (800a6b8 <UART_SetConfig+0x5bc>)
 800a400:	4293      	cmp	r3, r2
 800a402:	f040 8097 	bne.w	800a534 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	d823      	bhi.n	800a456 <UART_SetConfig+0x35a>
 800a40e:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x318>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a439 	.word	0x0800a439
 800a418:	0800a457 	.word	0x0800a457
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a457 	.word	0x0800a457
 800a424:	0800a447 	.word	0x0800a447
 800a428:	0800a457 	.word	0x0800a457
 800a42c:	0800a457 	.word	0x0800a457
 800a430:	0800a457 	.word	0x0800a457
 800a434:	0800a44f 	.word	0x0800a44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a438:	f7fb f800 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800a43c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a43e:	e010      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a440:	4b9e      	ldr	r3, [pc, #632]	; (800a6bc <UART_SetConfig+0x5c0>)
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a444:	e00d      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a446:	f7fa ff61 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a44c:	e009      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a454:	e005      	b.n	800a462 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8130 	beq.w	800a6ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	4a94      	ldr	r2, [pc, #592]	; (800a6c0 <UART_SetConfig+0x5c4>)
 800a470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a474:	461a      	mov	r2, r3
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4613      	mov	r3, r2
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4413      	add	r3, r2
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d305      	bcc.n	800a49a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	429a      	cmp	r2, r3
 800a498:	d903      	bls.n	800a4a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a4a0:	e113      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	60bb      	str	r3, [r7, #8]
 800a4a8:	60fa      	str	r2, [r7, #12]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	4a84      	ldr	r2, [pc, #528]	; (800a6c0 <UART_SetConfig+0x5c4>)
 800a4b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	603b      	str	r3, [r7, #0]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c4:	f7f6 fb88 	bl	8000bd8 <__aeabi_uldivmod>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	f04f 0300 	mov.w	r3, #0
 800a4d8:	020b      	lsls	r3, r1, #8
 800a4da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4de:	0202      	lsls	r2, r0, #8
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	6849      	ldr	r1, [r1, #4]
 800a4e4:	0849      	lsrs	r1, r1, #1
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	eb12 0804 	adds.w	r8, r2, r4
 800a4f0:	eb43 0905 	adc.w	r9, r3, r5
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	469a      	mov	sl, r3
 800a4fc:	4693      	mov	fp, r2
 800a4fe:	4652      	mov	r2, sl
 800a500:	465b      	mov	r3, fp
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f6 fb67 	bl	8000bd8 <__aeabi_uldivmod>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4613      	mov	r3, r2
 800a510:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a518:	d308      	bcc.n	800a52c <UART_SetConfig+0x430>
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a520:	d204      	bcs.n	800a52c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6a3a      	ldr	r2, [r7, #32]
 800a528:	60da      	str	r2, [r3, #12]
 800a52a:	e0ce      	b.n	800a6ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a532:	e0ca      	b.n	800a6ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a53c:	d166      	bne.n	800a60c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a53e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a542:	2b08      	cmp	r3, #8
 800a544:	d827      	bhi.n	800a596 <UART_SetConfig+0x49a>
 800a546:	a201      	add	r2, pc, #4	; (adr r2, 800a54c <UART_SetConfig+0x450>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a579 	.word	0x0800a579
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a597 	.word	0x0800a597
 800a55c:	0800a587 	.word	0x0800a587
 800a560:	0800a597 	.word	0x0800a597
 800a564:	0800a597 	.word	0x0800a597
 800a568:	0800a597 	.word	0x0800a597
 800a56c:	0800a58f 	.word	0x0800a58f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a570:	f7fa ff64 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a576:	e014      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a578:	f7fa ff76 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800a57c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a57e:	e010      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a580:	4b4e      	ldr	r3, [pc, #312]	; (800a6bc <UART_SetConfig+0x5c0>)
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a584:	e00d      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a586:	f7fa fec1 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800a58a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a58c:	e009      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a594:	e005      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 8090 	beq.w	800a6ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	4a44      	ldr	r2, [pc, #272]	; (800a6c0 <UART_SetConfig+0x5c4>)
 800a5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5bc:	005a      	lsls	r2, r3, #1
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	441a      	add	r2, r3
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	2b0f      	cmp	r3, #15
 800a5d4:	d916      	bls.n	800a604 <UART_SetConfig+0x508>
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5dc:	d212      	bcs.n	800a604 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	f023 030f 	bic.w	r3, r3, #15
 800a5e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	085b      	lsrs	r3, r3, #1
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	8bfa      	ldrh	r2, [r7, #30]
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	e062      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a60a:	e05e      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a60c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a610:	2b08      	cmp	r3, #8
 800a612:	d828      	bhi.n	800a666 <UART_SetConfig+0x56a>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <UART_SetConfig+0x520>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a649 	.word	0x0800a649
 800a624:	0800a651 	.word	0x0800a651
 800a628:	0800a667 	.word	0x0800a667
 800a62c:	0800a657 	.word	0x0800a657
 800a630:	0800a667 	.word	0x0800a667
 800a634:	0800a667 	.word	0x0800a667
 800a638:	0800a667 	.word	0x0800a667
 800a63c:	0800a65f 	.word	0x0800a65f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a640:	f7fa fefc 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800a644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a646:	e014      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a648:	f7fa ff0e 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800a64c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a64e:	e010      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a650:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <UART_SetConfig+0x5c0>)
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a654:	e00d      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a656:	f7fa fe59 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800a65a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a65c:	e009      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a664:	e005      	b.n	800a672 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a670:	bf00      	nop
    }

    if (pclk != 0U)
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d028      	beq.n	800a6ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	4a10      	ldr	r2, [pc, #64]	; (800a6c0 <UART_SetConfig+0x5c4>)
 800a67e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a682:	461a      	mov	r2, r3
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	441a      	add	r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d910      	bls.n	800a6c4 <UART_SetConfig+0x5c8>
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a8:	d20c      	bcs.n	800a6c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60da      	str	r2, [r3, #12]
 800a6b4:	e009      	b.n	800a6ca <UART_SetConfig+0x5ce>
 800a6b6:	bf00      	nop
 800a6b8:	40008000 	.word	0x40008000
 800a6bc:	00f42400 	.word	0x00f42400
 800a6c0:	08012b1c 	.word	0x08012b1c
      }
      else
      {
        ret = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a6e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3730      	adds	r7, #48	; 0x30
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a6f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	f003 0308 	and.w	r3, r3, #8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00a      	beq.n	800a7a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01a      	beq.n	800a80a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f2:	d10a      	bne.n	800a80a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	605a      	str	r2, [r3, #4]
  }
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a848:	f7f7 fdec 	bl	8002424 <HAL_GetTick>
 800a84c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d10e      	bne.n	800a87a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a85c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f82f 	bl	800a8ce <UART_WaitOnFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e025      	b.n	800a8c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b04      	cmp	r3, #4
 800a886:	d10e      	bne.n	800a8a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f819 	bl	800a8ce <UART_WaitOnFlagUntilTimeout>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e00f      	b.n	800a8c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b09c      	sub	sp, #112	; 0x70
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	603b      	str	r3, [r7, #0]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8de:	e0a9      	b.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e6:	f000 80a5 	beq.w	800aa34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ea:	f7f7 fd9b 	bl	8002424 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d302      	bcc.n	800a900 <UART_WaitOnFlagUntilTimeout+0x32>
 800a8fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d140      	bne.n	800a982 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a914:	667b      	str	r3, [r7, #100]	; 0x64
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a91e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a920:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e6      	bne.n	800a900 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	f023 0301 	bic.w	r3, r3, #1
 800a948:	663b      	str	r3, [r7, #96]	; 0x60
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a952:	64ba      	str	r2, [r7, #72]	; 0x48
 800a954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e5      	bne.n	800a932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2220      	movs	r2, #32
 800a972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e069      	b.n	800aa56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d051      	beq.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a99a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a99e:	d149      	bne.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e6      	bne.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9fc:	623a      	str	r2, [r7, #32]
 800a9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	69f9      	ldr	r1, [r7, #28]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e5      	bne.n	800a9dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e010      	b.n	800aa56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	69da      	ldr	r2, [r3, #28]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	bf0c      	ite	eq
 800aa44:	2301      	moveq	r3, #1
 800aa46:	2300      	movne	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	f43f af46 	beq.w	800a8e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3770      	adds	r7, #112	; 0x70
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b096      	sub	sp, #88	; 0x58
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	88fa      	ldrh	r2, [r7, #6]
 800aa78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2222      	movs	r2, #34	; 0x22
 800aa88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d02c      	beq.n	800aaee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa98:	4a42      	ldr	r2, [pc, #264]	; (800aba4 <UART_Start_Receive_DMA+0x144>)
 800aa9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa0:	4a41      	ldr	r2, [pc, #260]	; (800aba8 <UART_Start_Receive_DMA+0x148>)
 800aaa2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa8:	4a40      	ldr	r2, [pc, #256]	; (800abac <UART_Start_Receive_DMA+0x14c>)
 800aaaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab0:	2200      	movs	r2, #0
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3324      	adds	r3, #36	; 0x24
 800aabe:	4619      	mov	r1, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac4:	461a      	mov	r2, r3
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	f7f7 fe96 	bl	80027f8 <HAL_DMA_Start_IT>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00d      	beq.n	800aaee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2210      	movs	r2, #16
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e055      	b.n	800ab9a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d018      	beq.n	800ab30 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab12:	657b      	str	r3, [r7, #84]	; 0x54
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab1e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab24:	e841 2300 	strex	r3, r2, [r1]
 800ab28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e6      	bne.n	800aafe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	e853 3f00 	ldrex	r3, [r3]
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	f043 0301 	orr.w	r3, r3, #1
 800ab46:	653b      	str	r3, [r7, #80]	; 0x50
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab50:	637a      	str	r2, [r7, #52]	; 0x34
 800ab52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab58:	e841 2300 	strex	r3, r2, [r1]
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e5      	bne.n	800ab30 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	613b      	str	r3, [r7, #16]
   return(result);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab84:	623a      	str	r2, [r7, #32]
 800ab86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	69f9      	ldr	r1, [r7, #28]
 800ab8a:	6a3a      	ldr	r2, [r7, #32]
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e5      	bne.n	800ab64 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3758      	adds	r7, #88	; 0x58
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	0800acff 	.word	0x0800acff
 800aba8:	0800ae25 	.word	0x0800ae25
 800abac:	0800ae5d 	.word	0x0800ae5d

0800abb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b08f      	sub	sp, #60	; 0x3c
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abcc:	637b      	str	r3, [r7, #52]	; 0x34
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abd8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e6      	bne.n	800abb8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ac00:	633b      	str	r3, [r7, #48]	; 0x30
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3308      	adds	r3, #8
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	61ba      	str	r2, [r7, #24]
 800ac0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	613b      	str	r3, [r7, #16]
   return(result);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e5      	bne.n	800abea <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ac26:	bf00      	nop
 800ac28:	373c      	adds	r7, #60	; 0x3c
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b095      	sub	sp, #84	; 0x54
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac58:	643b      	str	r3, [r7, #64]	; 0x40
 800ac5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3308      	adds	r3, #8
 800ac72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac82:	f023 0301 	bic.w	r3, r3, #1
 800ac86:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e3      	bne.n	800ac6c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d118      	bne.n	800acde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f023 0310 	bic.w	r3, r3, #16
 800acc0:	647b      	str	r3, [r7, #68]	; 0x44
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acca:	61bb      	str	r3, [r7, #24]
 800accc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6979      	ldr	r1, [r7, #20]
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	613b      	str	r3, [r7, #16]
   return(result);
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e6      	bne.n	800acac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800acf2:	bf00      	nop
 800acf4:	3754      	adds	r7, #84	; 0x54
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b09c      	sub	sp, #112	; 0x70
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d171      	bne.n	800adfe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ad1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad36:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad40:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e6      	bne.n	800ad22 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	e853 3f00 	ldrex	r3, [r3]
 800ad62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad74:	647a      	str	r2, [r7, #68]	; 0x44
 800ad76:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e5      	bne.n	800ad54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	623b      	str	r3, [r7, #32]
   return(result);
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad9e:	663b      	str	r3, [r7, #96]	; 0x60
 800ada0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3308      	adds	r3, #8
 800ada6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ada8:	633a      	str	r2, [r7, #48]	; 0x30
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e5      	bne.n	800ad88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbe:	2220      	movs	r2, #32
 800adc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d118      	bne.n	800adfe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	60fb      	str	r3, [r7, #12]
   return(result);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f023 0310 	bic.w	r3, r3, #16
 800ade0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ade2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	69b9      	ldr	r1, [r7, #24]
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	617b      	str	r3, [r7, #20]
   return(result);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e6      	bne.n	800adcc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d107      	bne.n	800ae16 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae10:	f7ff f968 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae14:	e002      	b.n	800ae1c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ae16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae18:	f7ff f946 	bl	800a0a8 <HAL_UART_RxCpltCallback>
}
 800ae1c:	bf00      	nop
 800ae1e:	3770      	adds	r7, #112	; 0x70
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d109      	bne.n	800ae4e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae40:	085b      	lsrs	r3, r3, #1
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	4619      	mov	r1, r3
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff f94c 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae4c:	e002      	b.n	800ae54 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff f934 	bl	800a0bc <HAL_UART_RxHalfCpltCallback>
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae68:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae84:	2b80      	cmp	r3, #128	; 0x80
 800ae86:	d109      	bne.n	800ae9c <UART_DMAError+0x40>
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b21      	cmp	r3, #33	; 0x21
 800ae8c:	d106      	bne.n	800ae9c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ae96:	6978      	ldr	r0, [r7, #20]
 800ae98:	f7ff fe8a 	bl	800abb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea6:	2b40      	cmp	r3, #64	; 0x40
 800aea8:	d109      	bne.n	800aebe <UART_DMAError+0x62>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b22      	cmp	r3, #34	; 0x22
 800aeae:	d106      	bne.n	800aebe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aeb8:	6978      	ldr	r0, [r7, #20]
 800aeba:	f7ff feba 	bl	800ac32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec4:	f043 0210 	orr.w	r2, r3, #16
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f7ff f8fe 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed4:	bf00      	nop
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7ff f8e8 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	61bb      	str	r3, [r7, #24]
 800af30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	613b      	str	r3, [r7, #16]
   return(result);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e6      	bne.n	800af10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2220      	movs	r2, #32
 800af46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff f89f 	bl	800a094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af56:	bf00      	nop
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af66:	bf00      	nop
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d101      	bne.n	800afb0 <HAL_UARTEx_DisableFifoMode+0x16>
 800afac:	2302      	movs	r3, #2
 800afae:	e027      	b.n	800b000 <HAL_UARTEx_DisableFifoMode+0x66>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2224      	movs	r2, #36	; 0x24
 800afbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0201 	bic.w	r2, r2, #1
 800afd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e02d      	b.n	800b080 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2224      	movs	r2, #36	; 0x24
 800b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0201 	bic.w	r2, r2, #1
 800b04a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f84f 	bl	800b104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2220      	movs	r2, #32
 800b072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e02d      	b.n	800b0fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2224      	movs	r2, #36	; 0x24
 800b0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0201 	bic.w	r2, r2, #1
 800b0c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f811 	bl	800b104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b110:	2b00      	cmp	r3, #0
 800b112:	d108      	bne.n	800b126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b124:	e031      	b.n	800b18a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b126:	2308      	movs	r3, #8
 800b128:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b12a:	2308      	movs	r3, #8
 800b12c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	0e5b      	lsrs	r3, r3, #25
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 0307 	and.w	r3, r3, #7
 800b13c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	0f5b      	lsrs	r3, r3, #29
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	7b3a      	ldrb	r2, [r7, #12]
 800b152:	4911      	ldr	r1, [pc, #68]	; (800b198 <UARTEx_SetNbDataToProcess+0x94>)
 800b154:	5c8a      	ldrb	r2, [r1, r2]
 800b156:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b15a:	7b3a      	ldrb	r2, [r7, #12]
 800b15c:	490f      	ldr	r1, [pc, #60]	; (800b19c <UARTEx_SetNbDataToProcess+0x98>)
 800b15e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b160:	fb93 f3f2 	sdiv	r3, r3, r2
 800b164:	b29a      	uxth	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	7b7a      	ldrb	r2, [r7, #13]
 800b170:	4909      	ldr	r1, [pc, #36]	; (800b198 <UARTEx_SetNbDataToProcess+0x94>)
 800b172:	5c8a      	ldrb	r2, [r1, r2]
 800b174:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b178:	7b7a      	ldrb	r2, [r7, #13]
 800b17a:	4908      	ldr	r1, [pc, #32]	; (800b19c <UARTEx_SetNbDataToProcess+0x98>)
 800b17c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b17e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b18a:	bf00      	nop
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	08012b34 	.word	0x08012b34
 800b19c:	08012b3c 	.word	0x08012b3c

0800b1a0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	b480      	push	{r7}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	f107 001c 	add.w	r0, r7, #28
 800b1ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b1b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b1ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b1be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b1c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b1c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <SDMMC_Init+0x50>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	b004      	add	sp, #16
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	ffc02c00 	.word	0xffc02c00

0800b1f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f043 0203 	orr.w	r2, r3, #3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b244:	2002      	movs	r0, #2
 800b246:	f7f7 f8f9 	bl	800243c <HAL_Delay>

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0303 	and.w	r3, r3, #3
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b28e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b294:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b29a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <SDMMC_SendCommand+0x50>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	fffee0c0 	.word	0xfffee0c0

0800b2c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	b2db      	uxtb	r3, r3
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b32a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b330:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b336:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0

}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b36a:	2310      	movs	r3, #16
 800b36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b36e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b37c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff73 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38e:	2110      	movs	r1, #16
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fa7b 	bl	800b88c <SDMMC_GetCmdResp1>
 800b396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b398:	69fb      	ldr	r3, [r7, #28]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b088      	sub	sp, #32
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3b0:	2311      	movs	r3, #17
 800b3b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3c4:	f107 0308 	add.w	r3, r7, #8
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff ff50 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d4:	2111      	movs	r1, #17
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa58 	bl	800b88c <SDMMC_GetCmdResp1>
 800b3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3de:	69fb      	ldr	r3, [r7, #28]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b3f6:	2312      	movs	r3, #18
 800b3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff ff2d 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b416:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41a:	2112      	movs	r1, #18
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa35 	bl	800b88c <SDMMC_GetCmdResp1>
 800b422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b424:	69fb      	ldr	r3, [r7, #28]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b088      	sub	sp, #32
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b43c:	2318      	movs	r3, #24
 800b43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b440:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b44a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b44e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b450:	f107 0308 	add.w	r3, r7, #8
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7ff ff0a 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b45c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b460:	2118      	movs	r1, #24
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa12 	bl	800b88c <SDMMC_GetCmdResp1>
 800b468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b46a:	69fb      	ldr	r3, [r7, #28]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3720      	adds	r7, #32
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b482:	2319      	movs	r3, #25
 800b484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b48a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b496:	f107 0308 	add.w	r3, r7, #8
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff fee7 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a6:	2119      	movs	r1, #25
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f9ef 	bl	800b88c <SDMMC_GetCmdResp1>
 800b4ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4b0:	69fb      	ldr	r3, [r7, #28]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4da:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4f4:	f107 0308 	add.w	r3, r7, #8
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff feb8 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b500:	4a08      	ldr	r2, [pc, #32]	; (800b524 <SDMMC_CmdStopTransfer+0x68>)
 800b502:	210c      	movs	r1, #12
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f9c1 	bl	800b88c <SDMMC_GetCmdResp1>
 800b50a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b518:	69fb      	ldr	r3, [r7, #28]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	05f5e100 	.word	0x05f5e100

0800b528 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08a      	sub	sp, #40	; 0x28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b538:	2307      	movs	r3, #7
 800b53a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b53c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b540:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b54a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b54c:	f107 0310 	add.w	r3, r7, #16
 800b550:	4619      	mov	r1, r3
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff fe8c 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b558:	f241 3288 	movw	r2, #5000	; 0x1388
 800b55c:	2107      	movs	r1, #7
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f994 	bl	800b88c <SDMMC_GetCmdResp1>
 800b564:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3728      	adds	r7, #40	; 0x28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b580:	2300      	movs	r3, #0
 800b582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b58c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fe6b 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fbb8 	bl	800bd10 <SDMMC_GetCmdError>
 800b5a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ce:	f107 0308 	add.w	r3, r7, #8
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff fe4b 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fb4a 	bl	800bc74 <SDMMC_GetCmdResp7>
 800b5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b5fa:	2337      	movs	r3, #55	; 0x37
 800b5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b60c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fe2b 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61e:	2137      	movs	r1, #55	; 0x37
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f933 	bl	800b88c <SDMMC_GetCmdResp1>
 800b626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b628:	69fb      	ldr	r3, [r7, #28]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3720      	adds	r7, #32
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b088      	sub	sp, #32
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b640:	2329      	movs	r3, #41	; 0x29
 800b642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b644:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b64e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b654:	f107 0308 	add.w	r3, r7, #8
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fe08 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fa4f 	bl	800bb04 <SDMMC_GetCmdResp3>
 800b666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b668:	69fb      	ldr	r3, [r7, #28]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b088      	sub	sp, #32
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b680:	2306      	movs	r3, #6
 800b682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b68a:	2300      	movs	r3, #0
 800b68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b68e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b694:	f107 0308 	add.w	r3, r7, #8
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff fde8 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a4:	2106      	movs	r1, #6
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f8f0 	bl	800b88c <SDMMC_GetCmdResp1>
 800b6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6c4:	2333      	movs	r3, #51	; 0x33
 800b6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d8:	f107 0308 	add.w	r3, r7, #8
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff fdc6 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e8:	2133      	movs	r1, #51	; 0x33
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f8ce 	bl	800b88c <SDMMC_GetCmdResp1>
 800b6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f2:	69fb      	ldr	r3, [r7, #28]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3720      	adds	r7, #32
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b708:	2302      	movs	r3, #2
 800b70a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b70c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b71a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fda4 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f9a1 	bl	800ba70 <SDMMC_GetCmdResp2>
 800b72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b730:	69fb      	ldr	r3, [r7, #28]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b088      	sub	sp, #32
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b748:	2309      	movs	r3, #9
 800b74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b74c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b752:	2300      	movs	r3, #0
 800b754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b75a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b75c:	f107 0308 	add.w	r3, r7, #8
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff fd84 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f981 	bl	800ba70 <SDMMC_GetCmdResp2>
 800b76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b770:	69fb      	ldr	r3, [r7, #28]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b088      	sub	sp, #32
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b788:	2303      	movs	r3, #3
 800b78a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b79a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff fd64 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	2103      	movs	r1, #3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f9e9 	bl	800bb84 <SDMMC_GetCmdResp6>
 800b7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b088      	sub	sp, #32
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7cc:	230d      	movs	r3, #13
 800b7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7ff fd42 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f0:	210d      	movs	r1, #13
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f84a 	bl	800b88c <SDMMC_GetCmdResp1>
 800b7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b80c:	2300      	movs	r3, #0
 800b80e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b810:	230d      	movs	r3, #13
 800b812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b814:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff fd20 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b830:	f241 3288 	movw	r2, #5000	; 0x1388
 800b834:	210d      	movs	r1, #13
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f828 	bl	800b88c <SDMMC_GetCmdResp1>
 800b83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83e:	69fb      	ldr	r3, [r7, #28]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b850:	2300      	movs	r3, #0
 800b852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b854:	230b      	movs	r3, #11
 800b856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fcfe 	bl	800b270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b874:	f241 3288 	movw	r2, #5000	; 0x1388
 800b878:	210b      	movs	r1, #11
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f806 	bl	800b88c <SDMMC_GetCmdResp1>
 800b880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	460b      	mov	r3, r1
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b89a:	4b70      	ldr	r3, [pc, #448]	; (800ba5c <SDMMC_GetCmdResp1+0x1d0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a70      	ldr	r2, [pc, #448]	; (800ba60 <SDMMC_GetCmdResp1+0x1d4>)
 800b8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a4:	0a5a      	lsrs	r2, r3, #9
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	1e5a      	subs	r2, r3, #1
 800b8b2:	61fa      	str	r2, [r7, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d102      	bne.n	800b8be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8bc:	e0c9      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	4b67      	ldr	r3, [pc, #412]	; (800ba64 <SDMMC_GetCmdResp1+0x1d8>)
 800b8c8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0ef      	beq.n	800b8ae <SDMMC_GetCmdResp1+0x22>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1ea      	bne.n	800b8ae <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8dc:	f003 0304 	and.w	r3, r3, #4
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d004      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2204      	movs	r2, #4
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ea:	2304      	movs	r3, #4
 800b8ec:	e0b1      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d004      	beq.n	800b904 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b900:	2301      	movs	r3, #1
 800b902:	e0a6      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4a58      	ldr	r2, [pc, #352]	; (800ba68 <SDMMC_GetCmdResp1+0x1dc>)
 800b908:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f7ff fcda 	bl	800b2c4 <SDMMC_GetCommandResponse>
 800b910:	4603      	mov	r3, r0
 800b912:	461a      	mov	r2, r3
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	4293      	cmp	r3, r2
 800b918:	d001      	beq.n	800b91e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e099      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b91e:	2100      	movs	r1, #0
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fcdc 	bl	800b2de <SDMMC_GetResponse>
 800b926:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4b50      	ldr	r3, [pc, #320]	; (800ba6c <SDMMC_GetCmdResp1+0x1e0>)
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b932:	2300      	movs	r3, #0
 800b934:	e08d      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	da02      	bge.n	800b942 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b93c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b940:	e087      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b94c:	2340      	movs	r3, #64	; 0x40
 800b94e:	e080      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b95a:	2380      	movs	r3, #128	; 0x80
 800b95c:	e079      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b96c:	e071      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b97c:	e069      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b98c:	e061      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b99c:	e059      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ac:	e051      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9bc:	e049      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9cc:	e041      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9dc:	e039      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9ec:	e031      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9fc:	e029      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba0c:	e021      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba1c:	e019      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba2c:	e011      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba3c:	e009      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f003 0308 	and.w	r3, r3, #8
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba4c:	e001      	b.n	800ba52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20000008 	.word	0x20000008
 800ba60:	10624dd3 	.word	0x10624dd3
 800ba64:	00200045 	.word	0x00200045
 800ba68:	002000c5 	.word	0x002000c5
 800ba6c:	fdffe008 	.word	0xfdffe008

0800ba70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba78:	4b1f      	ldr	r3, [pc, #124]	; (800baf8 <SDMMC_GetCmdResp2+0x88>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a1f      	ldr	r2, [pc, #124]	; (800bafc <SDMMC_GetCmdResp2+0x8c>)
 800ba7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba82:	0a5b      	lsrs	r3, r3, #9
 800ba84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba88:	fb02 f303 	mul.w	r3, r2, r3
 800ba8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	60fa      	str	r2, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba9c:	e026      	b.n	800baec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0ef      	beq.n	800ba8e <SDMMC_GetCmdResp2+0x1e>
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1ea      	bne.n	800ba8e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2204      	movs	r2, #4
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baca:	2304      	movs	r3, #4
 800bacc:	e00e      	b.n	800baec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d004      	beq.n	800bae4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e003      	b.n	800baec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a06      	ldr	r2, [pc, #24]	; (800bb00 <SDMMC_GetCmdResp2+0x90>)
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	20000008 	.word	0x20000008
 800bafc:	10624dd3 	.word	0x10624dd3
 800bb00:	002000c5 	.word	0x002000c5

0800bb04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb0c:	4b1a      	ldr	r3, [pc, #104]	; (800bb78 <SDMMC_GetCmdResp3+0x74>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a1a      	ldr	r2, [pc, #104]	; (800bb7c <SDMMC_GetCmdResp3+0x78>)
 800bb12:	fba2 2303 	umull	r2, r3, r2, r3
 800bb16:	0a5b      	lsrs	r3, r3, #9
 800bb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1c:	fb02 f303 	mul.w	r3, r2, r3
 800bb20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	60fa      	str	r2, [r7, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb30:	e01b      	b.n	800bb6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d0ef      	beq.n	800bb22 <SDMMC_GetCmdResp3+0x1e>
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1ea      	bne.n	800bb22 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2204      	movs	r2, #4
 800bb5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb5e:	2304      	movs	r3, #4
 800bb60:	e003      	b.n	800bb6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <SDMMC_GetCmdResp3+0x7c>)
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000008 	.word	0x20000008
 800bb7c:	10624dd3 	.word	0x10624dd3
 800bb80:	002000c5 	.word	0x002000c5

0800bb84 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb92:	4b35      	ldr	r3, [pc, #212]	; (800bc68 <SDMMC_GetCmdResp6+0xe4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a35      	ldr	r2, [pc, #212]	; (800bc6c <SDMMC_GetCmdResp6+0xe8>)
 800bb98:	fba2 2303 	umull	r2, r3, r2, r3
 800bb9c:	0a5b      	lsrs	r3, r3, #9
 800bb9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba2:	fb02 f303 	mul.w	r3, r2, r3
 800bba6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	1e5a      	subs	r2, r3, #1
 800bbac:	61fa      	str	r2, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbb6:	e052      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0ef      	beq.n	800bba8 <SDMMC_GetCmdResp6+0x24>
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1ea      	bne.n	800bba8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd6:	f003 0304 	and.w	r3, r3, #4
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d004      	beq.n	800bbe8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2204      	movs	r2, #4
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	e03a      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e02f      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fb60 	bl	800b2c4 <SDMMC_GetCommandResponse>
 800bc04:	4603      	mov	r3, r0
 800bc06:	461a      	mov	r2, r3
 800bc08:	7afb      	ldrb	r3, [r7, #11]
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d001      	beq.n	800bc12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e025      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4a16      	ldr	r2, [pc, #88]	; (800bc70 <SDMMC_GetCmdResp6+0xec>)
 800bc16:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fb5f 	bl	800b2de <SDMMC_GetResponse>
 800bc20:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	0c1b      	lsrs	r3, r3, #16
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e011      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc48:	e009      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc58:	e001      	b.n	800bc5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3720      	adds	r7, #32
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20000008 	.word	0x20000008
 800bc6c:	10624dd3 	.word	0x10624dd3
 800bc70:	002000c5 	.word	0x002000c5

0800bc74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc7c:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <SDMMC_GetCmdResp7+0x94>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a22      	ldr	r2, [pc, #136]	; (800bd0c <SDMMC_GetCmdResp7+0x98>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	0a5b      	lsrs	r3, r3, #9
 800bc88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc8c:	fb02 f303 	mul.w	r3, r2, r3
 800bc90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	1e5a      	subs	r2, r3, #1
 800bc96:	60fa      	str	r2, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bca0:	e02c      	b.n	800bcfc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0ef      	beq.n	800bc92 <SDMMC_GetCmdResp7+0x1e>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1ea      	bne.n	800bc92 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d004      	beq.n	800bcd2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2204      	movs	r2, #4
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcce:	2304      	movs	r3, #4
 800bcd0:	e014      	b.n	800bcfc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d004      	beq.n	800bce8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e009      	b.n	800bcfc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d002      	beq.n	800bcfa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2240      	movs	r2, #64	; 0x40
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcfa:	2300      	movs	r3, #0

}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	20000008 	.word	0x20000008
 800bd0c:	10624dd3 	.word	0x10624dd3

0800bd10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd18:	4b11      	ldr	r3, [pc, #68]	; (800bd60 <SDMMC_GetCmdError+0x50>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a11      	ldr	r2, [pc, #68]	; (800bd64 <SDMMC_GetCmdError+0x54>)
 800bd1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd22:	0a5b      	lsrs	r3, r3, #9
 800bd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd28:	fb02 f303 	mul.w	r3, r2, r3
 800bd2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1e5a      	subs	r2, r3, #1
 800bd32:	60fa      	str	r2, [r7, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd3c:	e009      	b.n	800bd52 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0f1      	beq.n	800bd2e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a06      	ldr	r2, [pc, #24]	; (800bd68 <SDMMC_GetCmdError+0x58>)
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	20000008 	.word	0x20000008
 800bd64:	10624dd3 	.word	0x10624dd3
 800bd68:	002000c5 	.word	0x002000c5

0800bd6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	f107 001c 	add.w	r0, r7, #28
 800bd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 faf6 	bl	800d37c <USB_CoreReset>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
 800bda6:	e005      	b.n	800bdb4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdc0:	b004      	add	sp, #16
 800bdc2:	4770      	bx	lr

0800bdc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d165      	bne.n	800bea4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4a3e      	ldr	r2, [pc, #248]	; (800bed4 <USB_SetTurnaroundTime+0x110>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d906      	bls.n	800bdee <USB_SetTurnaroundTime+0x2a>
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4a3d      	ldr	r2, [pc, #244]	; (800bed8 <USB_SetTurnaroundTime+0x114>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d202      	bcs.n	800bdee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bde8:	230f      	movs	r3, #15
 800bdea:	617b      	str	r3, [r7, #20]
 800bdec:	e05c      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4a39      	ldr	r2, [pc, #228]	; (800bed8 <USB_SetTurnaroundTime+0x114>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d306      	bcc.n	800be04 <USB_SetTurnaroundTime+0x40>
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	4a38      	ldr	r2, [pc, #224]	; (800bedc <USB_SetTurnaroundTime+0x118>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d202      	bcs.n	800be04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bdfe:	230e      	movs	r3, #14
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	e051      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4a35      	ldr	r2, [pc, #212]	; (800bedc <USB_SetTurnaroundTime+0x118>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d306      	bcc.n	800be1a <USB_SetTurnaroundTime+0x56>
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4a34      	ldr	r2, [pc, #208]	; (800bee0 <USB_SetTurnaroundTime+0x11c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d202      	bcs.n	800be1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be14:	230d      	movs	r3, #13
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	e046      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	4a30      	ldr	r2, [pc, #192]	; (800bee0 <USB_SetTurnaroundTime+0x11c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d306      	bcc.n	800be30 <USB_SetTurnaroundTime+0x6c>
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	4a2f      	ldr	r2, [pc, #188]	; (800bee4 <USB_SetTurnaroundTime+0x120>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d802      	bhi.n	800be30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be2a:	230c      	movs	r3, #12
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	e03b      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4a2c      	ldr	r2, [pc, #176]	; (800bee4 <USB_SetTurnaroundTime+0x120>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d906      	bls.n	800be46 <USB_SetTurnaroundTime+0x82>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a2b      	ldr	r2, [pc, #172]	; (800bee8 <USB_SetTurnaroundTime+0x124>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d802      	bhi.n	800be46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be40:	230b      	movs	r3, #11
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e030      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a27      	ldr	r2, [pc, #156]	; (800bee8 <USB_SetTurnaroundTime+0x124>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d906      	bls.n	800be5c <USB_SetTurnaroundTime+0x98>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a26      	ldr	r2, [pc, #152]	; (800beec <USB_SetTurnaroundTime+0x128>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d802      	bhi.n	800be5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be56:	230a      	movs	r3, #10
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e025      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4a23      	ldr	r2, [pc, #140]	; (800beec <USB_SetTurnaroundTime+0x128>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d906      	bls.n	800be72 <USB_SetTurnaroundTime+0xae>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a22      	ldr	r2, [pc, #136]	; (800bef0 <USB_SetTurnaroundTime+0x12c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d202      	bcs.n	800be72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be6c:	2309      	movs	r3, #9
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e01a      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4a1e      	ldr	r2, [pc, #120]	; (800bef0 <USB_SetTurnaroundTime+0x12c>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d306      	bcc.n	800be88 <USB_SetTurnaroundTime+0xc4>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <USB_SetTurnaroundTime+0x130>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d802      	bhi.n	800be88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be82:	2308      	movs	r3, #8
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	e00f      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4a1a      	ldr	r2, [pc, #104]	; (800bef4 <USB_SetTurnaroundTime+0x130>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d906      	bls.n	800be9e <USB_SetTurnaroundTime+0xda>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a19      	ldr	r2, [pc, #100]	; (800bef8 <USB_SetTurnaroundTime+0x134>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d202      	bcs.n	800be9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be98:	2307      	movs	r3, #7
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e004      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be9e:	2306      	movs	r3, #6
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	e001      	b.n	800bea8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bea4:	2309      	movs	r3, #9
 800bea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68da      	ldr	r2, [r3, #12]
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	029b      	lsls	r3, r3, #10
 800bebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bec0:	431a      	orrs	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	00d8acbf 	.word	0x00d8acbf
 800bed8:	00e4e1c0 	.word	0x00e4e1c0
 800bedc:	00f42400 	.word	0x00f42400
 800bee0:	01067380 	.word	0x01067380
 800bee4:	011a499f 	.word	0x011a499f
 800bee8:	01312cff 	.word	0x01312cff
 800beec:	014ca43f 	.word	0x014ca43f
 800bef0:	016e3600 	.word	0x016e3600
 800bef4:	01a6ab1f 	.word	0x01a6ab1f
 800bef8:	01e84800 	.word	0x01e84800

0800befc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f043 0201 	orr.w	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f023 0201 	bic.w	r2, r3, #1
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d115      	bne.n	800bf8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf6e:	2001      	movs	r0, #1
 800bf70:	f7f6 fa64 	bl	800243c <HAL_Delay>
      ms++;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3301      	adds	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 f985 	bl	800d28a <USB_GetMode>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d01e      	beq.n	800bfc4 <USB_SetCurrentMode+0x84>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b31      	cmp	r3, #49	; 0x31
 800bf8a:	d9f0      	bls.n	800bf6e <USB_SetCurrentMode+0x2e>
 800bf8c:	e01a      	b.n	800bfc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf8e:	78fb      	ldrb	r3, [r7, #3]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d115      	bne.n	800bfc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	f7f6 fa4b 	bl	800243c <HAL_Delay>
      ms++;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f001 f96c 	bl	800d28a <USB_GetMode>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <USB_SetCurrentMode+0x84>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b31      	cmp	r3, #49	; 0x31
 800bfbc:	d9f0      	bls.n	800bfa0 <USB_SetCurrentMode+0x60>
 800bfbe:	e001      	b.n	800bfc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e005      	b.n	800bfd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b32      	cmp	r3, #50	; 0x32
 800bfc8:	d101      	bne.n	800bfce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e000      	b.n	800bfd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd8:	b084      	sub	sp, #16
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b086      	sub	sp, #24
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	e009      	b.n	800c00c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	3340      	adds	r3, #64	; 0x40
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	2200      	movs	r2, #0
 800c004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3301      	adds	r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2b0e      	cmp	r3, #14
 800c010:	d9f2      	bls.n	800bff8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11c      	bne.n	800c052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c026:	f043 0302 	orr.w	r3, r3, #2
 800c02a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	e005      	b.n	800c05e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c064:	461a      	mov	r2, r3
 800c066:	2300      	movs	r3, #0
 800c068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c070:	4619      	mov	r1, r3
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c078:	461a      	mov	r2, r3
 800c07a:	680b      	ldr	r3, [r1, #0]
 800c07c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c07e:	2103      	movs	r1, #3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f959 	bl	800c338 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c086:	2110      	movs	r1, #16
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f8f1 	bl	800c270 <USB_FlushTxFifo>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f91d 	bl	800c2d8 <USB_FlushRxFifo>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	2300      	movs	r3, #0
 800c0be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	e043      	b.n	800c15a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0e8:	d118      	bne.n	800c11c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10a      	bne.n	800c106 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	e013      	b.n	800c12e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c112:	461a      	mov	r2, r3
 800c114:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	e008      	b.n	800c12e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c128:	461a      	mov	r2, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13a:	461a      	mov	r2, r3
 800c13c:	2300      	movs	r3, #0
 800c13e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14c:	461a      	mov	r2, r3
 800c14e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	3301      	adds	r3, #1
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d3b7      	bcc.n	800c0d2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c162:	2300      	movs	r3, #0
 800c164:	613b      	str	r3, [r7, #16]
 800c166:	e043      	b.n	800c1f0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c17e:	d118      	bne.n	800c1b2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c192:	461a      	mov	r2, r3
 800c194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c198:	6013      	str	r3, [r2, #0]
 800c19a:	e013      	b.n	800c1c4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	e008      	b.n	800c1c4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d3b7      	bcc.n	800c168 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c20a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	f043 0210 	orr.w	r2, r3, #16
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	4b10      	ldr	r3, [pc, #64]	; (800c26c <USB_DevInit+0x294>)
 800c22c:	4313      	orrs	r3, r2
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d005      	beq.n	800c244 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	f043 0208 	orr.w	r2, r3, #8
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c246:	2b01      	cmp	r3, #1
 800c248:	d107      	bne.n	800c25a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c252:	f043 0304 	orr.w	r3, r3, #4
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c266:	b004      	add	sp, #16
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	803c3800 	.word	0x803c3800

0800c270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4a13      	ldr	r2, [pc, #76]	; (800c2d4 <USB_FlushTxFifo+0x64>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d901      	bls.n	800c290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e01b      	b.n	800c2c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	daf2      	bge.n	800c27e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	019b      	lsls	r3, r3, #6
 800c2a0:	f043 0220 	orr.w	r2, r3, #32
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <USB_FlushTxFifo+0x64>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d901      	bls.n	800c2ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e006      	b.n	800c2c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	f003 0320 	and.w	r3, r3, #32
 800c2c2:	2b20      	cmp	r3, #32
 800c2c4:	d0f0      	beq.n	800c2a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	00030d40 	.word	0x00030d40

0800c2d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	4a11      	ldr	r2, [pc, #68]	; (800c334 <USB_FlushRxFifo+0x5c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d901      	bls.n	800c2f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e018      	b.n	800c328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	daf2      	bge.n	800c2e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2210      	movs	r2, #16
 800c306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3301      	adds	r3, #1
 800c30c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4a08      	ldr	r2, [pc, #32]	; (800c334 <USB_FlushRxFifo+0x5c>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d901      	bls.n	800c31a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e006      	b.n	800c328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	f003 0310 	and.w	r3, r3, #16
 800c322:	2b10      	cmp	r3, #16
 800c324:	d0f0      	beq.n	800c308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	00030d40 	.word	0x00030d40

0800c338 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	68f9      	ldr	r1, [r7, #12]
 800c354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c358:	4313      	orrs	r3, r2
 800c35a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b087      	sub	sp, #28
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f003 0306 	and.w	r3, r3, #6
 800c382:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b02      	cmp	r3, #2
 800c388:	d002      	beq.n	800c390 <USB_GetDevSpeed+0x26>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b06      	cmp	r3, #6
 800c38e:	d102      	bne.n	800c396 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c390:	2302      	movs	r3, #2
 800c392:	75fb      	strb	r3, [r7, #23]
 800c394:	e001      	b.n	800c39a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c396:	230f      	movs	r3, #15
 800c398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d13a      	bne.n	800c43a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 030f 	and.w	r3, r3, #15
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d155      	bne.n	800c4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	791b      	ldrb	r3, [r3, #4]
 800c416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	059b      	lsls	r3, r3, #22
 800c41e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c420:	4313      	orrs	r3, r2
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	0151      	lsls	r1, r2, #5
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	440a      	add	r2, r1
 800c42a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c42e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	e036      	b.n	800c4a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c440:	69da      	ldr	r2, [r3, #28]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	2101      	movs	r1, #1
 800c44c:	fa01 f303 	lsl.w	r3, r1, r3
 800c450:	041b      	lsls	r3, r3, #16
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c458:	4313      	orrs	r3, r2
 800c45a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11a      	bne.n	800c4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	791b      	ldrb	r3, [r3, #4]
 800c48c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c48e:	430b      	orrs	r3, r1
 800c490:	4313      	orrs	r3, r2
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	0151      	lsls	r1, r2, #5
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	440a      	add	r2, r1
 800c49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
	...

0800c4b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d161      	bne.n	800c598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4ea:	d11f      	bne.n	800c52c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	0151      	lsls	r1, r2, #5
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	440a      	add	r2, r1
 800c502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c50a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	015a      	lsls	r2, r3, #5
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4413      	add	r3, r2
 800c514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	0151      	lsls	r1, r2, #5
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	440a      	add	r2, r1
 800c522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c52a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	2101      	movs	r1, #1
 800c53e:	fa01 f303 	lsl.w	r3, r1, r3
 800c542:	b29b      	uxth	r3, r3
 800c544:	43db      	mvns	r3, r3
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c54c:	4013      	ands	r3, r2
 800c54e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c556:	69da      	ldr	r2, [r3, #28]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 030f 	and.w	r3, r3, #15
 800c560:	2101      	movs	r1, #1
 800c562:	fa01 f303 	lsl.w	r3, r1, r3
 800c566:	b29b      	uxth	r3, r3
 800c568:	43db      	mvns	r3, r3
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c570:	4013      	ands	r3, r2
 800c572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	0159      	lsls	r1, r3, #5
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	440b      	add	r3, r1
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	4619      	mov	r1, r3
 800c590:	4b35      	ldr	r3, [pc, #212]	; (800c668 <USB_DeactivateEndpoint+0x1b0>)
 800c592:	4013      	ands	r3, r2
 800c594:	600b      	str	r3, [r1, #0]
 800c596:	e060      	b.n	800c65a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5ae:	d11f      	bne.n	800c5f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	0151      	lsls	r1, r2, #5
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	440a      	add	r2, r1
 800c5c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	0151      	lsls	r1, r2, #5
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	440a      	add	r2, r1
 800c5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	2101      	movs	r1, #1
 800c602:	fa01 f303 	lsl.w	r3, r1, r3
 800c606:	041b      	lsls	r3, r3, #16
 800c608:	43db      	mvns	r3, r3
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c610:	4013      	ands	r3, r2
 800c612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	69da      	ldr	r2, [r3, #28]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 030f 	and.w	r3, r3, #15
 800c624:	2101      	movs	r1, #1
 800c626:	fa01 f303 	lsl.w	r3, r1, r3
 800c62a:	041b      	lsls	r3, r3, #16
 800c62c:	43db      	mvns	r3, r3
 800c62e:	68f9      	ldr	r1, [r7, #12]
 800c630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c634:	4013      	ands	r3, r2
 800c636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	0159      	lsls	r1, r3, #5
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	440b      	add	r3, r1
 800c64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c652:	4619      	mov	r1, r3
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <USB_DeactivateEndpoint+0x1b4>)
 800c656:	4013      	ands	r3, r2
 800c658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	ec337800 	.word	0xec337800
 800c66c:	eff37800 	.word	0xeff37800

0800c670 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	f040 810a 	bne.w	800c8a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d132      	bne.n	800c6fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	0151      	lsls	r1, r2, #5
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	440a      	add	r2, r1
 800c6ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	0151      	lsls	r1, r2, #5
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	440a      	add	r2, r1
 800c6d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	015a      	lsls	r2, r3, #5
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	0151      	lsls	r1, r2, #5
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	440a      	add	r2, r1
 800c6f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f4:	0cdb      	lsrs	r3, r3, #19
 800c6f6:	04db      	lsls	r3, r3, #19
 800c6f8:	6113      	str	r3, [r2, #16]
 800c6fa:	e074      	b.n	800c7e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	0151      	lsls	r1, r2, #5
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	440a      	add	r2, r1
 800c712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c716:	0cdb      	lsrs	r3, r3, #19
 800c718:	04db      	lsls	r3, r3, #19
 800c71a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	015a      	lsls	r2, r3, #5
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	4413      	add	r3, r2
 800c724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	0151      	lsls	r1, r2, #5
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	440a      	add	r2, r1
 800c732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c73a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c73e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	6999      	ldr	r1, [r3, #24]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	440b      	add	r3, r1
 800c758:	1e59      	subs	r1, r3, #1
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c762:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c764:	4b9e      	ldr	r3, [pc, #632]	; (800c9e0 <USB_EPStartXfer+0x370>)
 800c766:	400b      	ands	r3, r1
 800c768:	6939      	ldr	r1, [r7, #16]
 800c76a:	0148      	lsls	r0, r1, #5
 800c76c:	6979      	ldr	r1, [r7, #20]
 800c76e:	4401      	add	r1, r0
 800c770:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c774:	4313      	orrs	r3, r2
 800c776:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c784:	691a      	ldr	r2, [r3, #16]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c78e:	6939      	ldr	r1, [r7, #16]
 800c790:	0148      	lsls	r0, r1, #5
 800c792:	6979      	ldr	r1, [r7, #20]
 800c794:	4401      	add	r1, r0
 800c796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c79a:	4313      	orrs	r3, r2
 800c79c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	791b      	ldrb	r3, [r3, #4]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d11f      	bne.n	800c7e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	015a      	lsls	r2, r3, #5
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	0151      	lsls	r1, r2, #5
 800c7b8:	697a      	ldr	r2, [r7, #20]
 800c7ba:	440a      	add	r2, r1
 800c7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	015a      	lsls	r2, r3, #5
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	0151      	lsls	r1, r2, #5
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	440a      	add	r2, r1
 800c7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	0151      	lsls	r1, r2, #5
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	440a      	add	r2, r1
 800c7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c804:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	791b      	ldrb	r3, [r3, #4]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d015      	beq.n	800c83a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 8106 	beq.w	800ca24 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	2101      	movs	r1, #1
 800c82a:	fa01 f303 	lsl.w	r3, r1, r3
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c834:	4313      	orrs	r3, r2
 800c836:	634b      	str	r3, [r1, #52]	; 0x34
 800c838:	e0f4      	b.n	800ca24 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c846:	2b00      	cmp	r3, #0
 800c848:	d110      	bne.n	800c86c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	0151      	lsls	r1, r2, #5
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	440a      	add	r2, r1
 800c860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	e00f      	b.n	800c88c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	0151      	lsls	r1, r2, #5
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	440a      	add	r2, r1
 800c882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c88a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	6919      	ldr	r1, [r3, #16]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781a      	ldrb	r2, [r3, #0]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa94 	bl	800cdc8 <USB_WritePacket>
 800c8a0:	e0c0      	b.n	800ca24 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8bc:	0cdb      	lsrs	r3, r3, #19
 800c8be:	04db      	lsls	r3, r3, #19
 800c8c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d123      	bne.n	800c936 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8fa:	691a      	ldr	r2, [r3, #16]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c904:	6939      	ldr	r1, [r7, #16]
 800c906:	0148      	lsls	r0, r1, #5
 800c908:	6979      	ldr	r1, [r7, #20]
 800c90a:	4401      	add	r1, r0
 800c90c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c910:	4313      	orrs	r3, r2
 800c912:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	0151      	lsls	r1, r2, #5
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	440a      	add	r2, r1
 800c92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c92e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c932:	6113      	str	r3, [r2, #16]
 800c934:	e037      	b.n	800c9a6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	699a      	ldr	r2, [r3, #24]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	1e5a      	subs	r2, r3, #1
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	89fa      	ldrh	r2, [r7, #14]
 800c952:	fb03 f202 	mul.w	r2, r3, r2
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	89fb      	ldrh	r3, [r7, #14]
 800c96a:	04d9      	lsls	r1, r3, #19
 800c96c:	4b1c      	ldr	r3, [pc, #112]	; (800c9e0 <USB_EPStartXfer+0x370>)
 800c96e:	400b      	ands	r3, r1
 800c970:	6939      	ldr	r1, [r7, #16]
 800c972:	0148      	lsls	r0, r1, #5
 800c974:	6979      	ldr	r1, [r7, #20]
 800c976:	4401      	add	r1, r0
 800c978:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c97c:	4313      	orrs	r3, r2
 800c97e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	015a      	lsls	r2, r3, #5
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	4413      	add	r3, r2
 800c988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c996:	6939      	ldr	r1, [r7, #16]
 800c998:	0148      	lsls	r0, r1, #5
 800c99a:	6979      	ldr	r1, [r7, #20]
 800c99c:	4401      	add	r1, r0
 800c99e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	791b      	ldrb	r3, [r3, #4]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d12a      	bne.n	800ca04 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d112      	bne.n	800c9e4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	0151      	lsls	r1, r2, #5
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	440a      	add	r2, r1
 800c9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	e011      	b.n	800ca04 <USB_EPStartXfer+0x394>
 800c9e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	0151      	lsls	r1, r2, #5
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	440a      	add	r2, r1
 800c9fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	0151      	lsls	r1, r2, #5
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	440a      	add	r2, r1
 800ca1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop

0800ca30 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	785b      	ldrb	r3, [r3, #1]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	f040 80ab 	bne.w	800cba4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d132      	bne.n	800cabc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	0151      	lsls	r1, r2, #5
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	440a      	add	r2, r1
 800ca6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	0151      	lsls	r1, r2, #5
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	440a      	add	r2, r1
 800ca90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	0151      	lsls	r1, r2, #5
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	440a      	add	r2, r1
 800cab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cab4:	0cdb      	lsrs	r3, r3, #19
 800cab6:	04db      	lsls	r3, r3, #19
 800cab8:	6113      	str	r3, [r2, #16]
 800caba:	e04e      	b.n	800cb5a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	0151      	lsls	r1, r2, #5
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	440a      	add	r2, r1
 800cad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cad6:	0cdb      	lsrs	r3, r3, #19
 800cad8:	04db      	lsls	r3, r3, #19
 800cada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cafa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cafe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	699a      	ldr	r2, [r3, #24]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d903      	bls.n	800cb14 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	0151      	lsls	r1, r2, #5
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	440a      	add	r2, r1
 800cb2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	691a      	ldr	r2, [r3, #16]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	0148      	lsls	r0, r1, #5
 800cb4e:	68f9      	ldr	r1, [r7, #12]
 800cb50:	4401      	add	r1, r0
 800cb52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cb56:	4313      	orrs	r3, r2
 800cb58:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	0151      	lsls	r1, r2, #5
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	440a      	add	r2, r1
 800cb70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb78:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d071      	beq.n	800cc66 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	f003 030f 	and.w	r3, r3, #15
 800cb92:	2101      	movs	r1, #1
 800cb94:	fa01 f303 	lsl.w	r3, r1, r3
 800cb98:	68f9      	ldr	r1, [r7, #12]
 800cb9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	634b      	str	r3, [r1, #52]	; 0x34
 800cba2:	e060      	b.n	800cc66 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	0151      	lsls	r1, r2, #5
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	440a      	add	r2, r1
 800cbba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbbe:	0cdb      	lsrs	r3, r3, #19
 800cbc0:	04db      	lsls	r3, r3, #19
 800cbc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	0151      	lsls	r1, r2, #5
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	440a      	add	r2, r1
 800cbda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cbe6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	0151      	lsls	r1, r2, #5
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	440a      	add	r2, r1
 800cc16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2c:	691a      	ldr	r2, [r3, #16]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	0148      	lsls	r0, r1, #5
 800cc3a:	68f9      	ldr	r1, [r7, #12]
 800cc3c:	4401      	add	r1, r0
 800cc3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc42:	4313      	orrs	r3, r2
 800cc44:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	0151      	lsls	r1, r2, #5
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	440a      	add	r2, r1
 800cc5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	785b      	ldrb	r3, [r3, #1]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d14a      	bne.n	800cd28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccaa:	f040 8086 	bne.w	800cdba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	7812      	ldrb	r2, [r2, #0]
 800ccc2:	0151      	lsls	r1, r2, #5
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	440a      	add	r2, r1
 800ccc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	7812      	ldrb	r2, [r2, #0]
 800cce6:	0151      	lsls	r1, r2, #5
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	440a      	add	r2, r1
 800ccec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d902      	bls.n	800cd0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	75fb      	strb	r3, [r7, #23]
          break;
 800cd0a:	e056      	b.n	800cdba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd24:	d0e7      	beq.n	800ccf6 <USB_EPStopXfer+0x82>
 800cd26:	e048      	b.n	800cdba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd40:	d13b      	bne.n	800cdba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	0151      	lsls	r1, r2, #5
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	440a      	add	r2, r1
 800cd5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	7812      	ldrb	r2, [r2, #0]
 800cd7a:	0151      	lsls	r1, r2, #5
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	440a      	add	r2, r1
 800cd80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d902      	bls.n	800cda0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cd9e:	e00c      	b.n	800cdba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdb8:	d0e7      	beq.n	800cd8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b089      	sub	sp, #36	; 0x24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	71fb      	strb	r3, [r7, #7]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cde6:	88bb      	ldrh	r3, [r7, #4]
 800cde8:	3303      	adds	r3, #3
 800cdea:	089b      	lsrs	r3, r3, #2
 800cdec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	e018      	b.n	800ce26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	031a      	lsls	r2, r3, #12
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce00:	461a      	mov	r2, r3
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	3301      	adds	r3, #1
 800ce12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	3301      	adds	r3, #1
 800ce18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	3301      	adds	r3, #1
 800ce24:	61bb      	str	r3, [r7, #24]
 800ce26:	69ba      	ldr	r2, [r7, #24]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d3e2      	bcc.n	800cdf4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3724      	adds	r7, #36	; 0x24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b08b      	sub	sp, #44	; 0x2c
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	4613      	mov	r3, r2
 800ce48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	089b      	lsrs	r3, r3, #2
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	f003 0303 	and.w	r3, r3, #3
 800ce60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ce62:	2300      	movs	r3, #0
 800ce64:	623b      	str	r3, [r7, #32]
 800ce66:	e014      	b.n	800ce92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	3301      	adds	r3, #1
 800ce78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	3301      	adds	r3, #1
 800ce84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	3301      	adds	r3, #1
 800ce8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	623b      	str	r3, [r7, #32]
 800ce92:	6a3a      	ldr	r2, [r7, #32]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d3e6      	bcc.n	800ce68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ce9a:	8bfb      	ldrh	r3, [r7, #30]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d01e      	beq.n	800cede <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f107 0310 	add.w	r3, r7, #16
 800ceb0:	6812      	ldr	r2, [r2, #0]
 800ceb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	fa22 f303 	lsr.w	r3, r2, r3
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	701a      	strb	r2, [r3, #0]
      i++;
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	3301      	adds	r3, #1
 800ceca:	623b      	str	r3, [r7, #32]
      pDest++;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	3301      	adds	r3, #1
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ced2:	8bfb      	ldrh	r3, [r7, #30]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ced8:	8bfb      	ldrh	r3, [r7, #30]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1ea      	bne.n	800ceb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	372c      	adds	r7, #44	; 0x2c
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	785b      	ldrb	r3, [r3, #1]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d12c      	bne.n	800cf62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	015a      	lsls	r2, r3, #5
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	db12      	blt.n	800cf40 <USB_EPSetStall+0x54>
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00f      	beq.n	800cf40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	0151      	lsls	r1, r2, #5
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	440a      	add	r2, r1
 800cf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	0151      	lsls	r1, r2, #5
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	440a      	add	r2, r1
 800cf56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	e02b      	b.n	800cfba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	015a      	lsls	r2, r3, #5
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	db12      	blt.n	800cf9a <USB_EPSetStall+0xae>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00f      	beq.n	800cf9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	015a      	lsls	r2, r3, #5
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	4413      	add	r3, r2
 800cf82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	0151      	lsls	r1, r2, #5
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	440a      	add	r2, r1
 800cf90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	015a      	lsls	r2, r3, #5
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	0151      	lsls	r1, r2, #5
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	440a      	add	r2, r1
 800cfb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	785b      	ldrb	r3, [r3, #1]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d128      	bne.n	800d036 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	0151      	lsls	r1, r2, #5
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	440a      	add	r2, r1
 800cffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d002:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	791b      	ldrb	r3, [r3, #4]
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d003      	beq.n	800d014 <USB_EPClearStall+0x4c>
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	791b      	ldrb	r3, [r3, #4]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d138      	bne.n	800d086 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	0151      	lsls	r1, r2, #5
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	440a      	add	r2, r1
 800d02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d02e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	e027      	b.n	800d086 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	015a      	lsls	r2, r3, #5
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	4413      	add	r3, r2
 800d03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	0151      	lsls	r1, r2, #5
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	440a      	add	r2, r1
 800d04c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d054:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	791b      	ldrb	r3, [r3, #4]
 800d05a:	2b03      	cmp	r3, #3
 800d05c:	d003      	beq.n	800d066 <USB_EPClearStall+0x9e>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	791b      	ldrb	r3, [r3, #4]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d10f      	bne.n	800d086 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	015a      	lsls	r2, r3, #5
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	0151      	lsls	r1, r2, #5
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	440a      	add	r2, r1
 800d07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d084:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d0b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d0c8:	68f9      	ldr	r1, [r7, #12]
 800d0ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d10e:	f023 0302 	bic.w	r3, r3, #2
 800d112:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d122:	b480      	push	{r7}
 800d124:	b085      	sub	sp, #20
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d13c:	f023 0303 	bic.w	r3, r3, #3
 800d140:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d150:	f043 0302 	orr.w	r3, r3, #2
 800d154:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	4013      	ands	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d17c:	68fb      	ldr	r3, [r7, #12]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d18a:	b480      	push	{r7}
 800d18c:	b085      	sub	sp, #20
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19c:	699b      	ldr	r3, [r3, #24]
 800d19e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	0c1b      	lsrs	r3, r3, #16
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b085      	sub	sp, #20
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d0:	699b      	ldr	r3, [r3, #24]
 800d1d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	4013      	ands	r3, r2
 800d1e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	b29b      	uxth	r3, r3
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	b085      	sub	sp, #20
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	4013      	ands	r3, r2
 800d21e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d220:	68bb      	ldr	r3, [r7, #8]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d22e:	b480      	push	{r7}
 800d230:	b087      	sub	sp, #28
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	460b      	mov	r3, r1
 800d238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	f003 030f 	and.w	r3, r3, #15
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	fa22 f303 	lsr.w	r3, r2, r3
 800d25e:	01db      	lsls	r3, r3, #7
 800d260:	b2db      	uxtb	r3, r3
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	4013      	ands	r3, r2
 800d27a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d27c:	68bb      	ldr	r3, [r7, #8]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b083      	sub	sp, #12
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	f003 0301 	and.w	r3, r3, #1
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b085      	sub	sp, #20
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d2c4:	f023 0307 	bic.w	r3, r3, #7
 800d2c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	333c      	adds	r3, #60	; 0x3c
 800d2fe:	3304      	adds	r3, #4
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	4a1c      	ldr	r2, [pc, #112]	; (800d378 <USB_EP0_OutStart+0x8c>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d90a      	bls.n	800d322 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d31c:	d101      	bne.n	800d322 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	e024      	b.n	800d36c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d328:	461a      	mov	r2, r3
 800d32a:	2300      	movs	r3, #0
 800d32c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d33c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d350:	f043 0318 	orr.w	r3, r3, #24
 800d354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d364:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d368:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	4f54300a 	.word	0x4f54300a

0800d37c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d384:	2300      	movs	r3, #0
 800d386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3301      	adds	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4a13      	ldr	r2, [pc, #76]	; (800d3e0 <USB_CoreReset+0x64>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d901      	bls.n	800d39a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e01b      	b.n	800d3d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	daf2      	bge.n	800d388 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	f043 0201 	orr.w	r2, r3, #1
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4a09      	ldr	r2, [pc, #36]	; (800d3e0 <USB_CoreReset+0x64>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d901      	bls.n	800d3c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e006      	b.n	800d3d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d0f0      	beq.n	800d3b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3714      	adds	r7, #20
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	00030d40 	.word	0x00030d40

0800d3e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d3e8:	4904      	ldr	r1, [pc, #16]	; (800d3fc <MX_FATFS_Init+0x18>)
 800d3ea:	4805      	ldr	r0, [pc, #20]	; (800d400 <MX_FATFS_Init+0x1c>)
 800d3ec:	f001 fe74 	bl	800f0d8 <FATFS_LinkDriver>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4b03      	ldr	r3, [pc, #12]	; (800d404 <MX_FATFS_Init+0x20>)
 800d3f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d3f8:	bf00      	nop
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20000dac 	.word	0x20000dac
 800d400:	08012b44 	.word	0x08012b44
 800d404:	20000da8 	.word	0x20000da8

0800d408 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d412:	f000 f879 	bl	800d508 <BSP_SD_IsDetected>
 800d416:	4603      	mov	r3, r0
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d001      	beq.n	800d420 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d41c:	2302      	movs	r3, #2
 800d41e:	e012      	b.n	800d446 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d420:	480b      	ldr	r0, [pc, #44]	; (800d450 <BSP_SD_Init+0x48>)
 800d422:	f7f9 fe6f 	bl	8007104 <HAL_SD_Init>
 800d426:	4603      	mov	r3, r0
 800d428:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d109      	bne.n	800d444 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d434:	4806      	ldr	r0, [pc, #24]	; (800d450 <BSP_SD_Init+0x48>)
 800d436:	f7fa fd3b 	bl	8007eb0 <HAL_SD_ConfigWideBusOperation>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d440:	2301      	movs	r3, #1
 800d442:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d444:	79fb      	ldrb	r3, [r7, #7]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20000420 	.word	0x20000420

0800d454 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af02      	add	r7, sp, #8
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	68f9      	ldr	r1, [r7, #12]
 800d470:	4806      	ldr	r0, [pc, #24]	; (800d48c <BSP_SD_ReadBlocks+0x38>)
 800d472:	f7f9 ff6f 	bl	8007354 <HAL_SD_ReadBlocks>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d480:	7dfb      	ldrb	r3, [r7, #23]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20000420 	.word	0x20000420

0800d490 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af02      	add	r7, sp, #8
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	4806      	ldr	r0, [pc, #24]	; (800d4c8 <BSP_SD_WriteBlocks+0x38>)
 800d4ae:	f7fa f8e3 	bl	8007678 <HAL_SD_WriteBlocks>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20000420 	.word	0x20000420

0800d4cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d4d0:	4805      	ldr	r0, [pc, #20]	; (800d4e8 <BSP_SD_GetCardState+0x1c>)
 800d4d2:	f7fa fe01 	bl	80080d8 <HAL_SD_GetCardState>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000420 	.word	0x20000420

0800d4ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4803      	ldr	r0, [pc, #12]	; (800d504 <BSP_SD_GetCardInfo+0x18>)
 800d4f8:	f7fa fcae 	bl	8007e58 <HAL_SD_GetCardInfo>
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20000420 	.word	0x20000420

0800d508 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d50e:	2301      	movs	r3, #1
 800d510:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d512:	f000 f80b 	bl	800d52c <BSP_PlatformIsDetected>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d101      	bne.n	800d520 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d51c:	2300      	movs	r3, #0
 800d51e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	b2db      	uxtb	r3, r3
}
 800d524:	4618      	mov	r0, r3
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d532:	2301      	movs	r3, #1
 800d534:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d53a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d53e:	f7f5 fd73 	bl	8003028 <HAL_GPIO_ReadPin>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d001      	beq.n	800d54c <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800d548:	2300      	movs	r3, #0
 800d54a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d54c:	79fb      	ldrb	r3, [r7, #7]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
	...

0800d558 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d562:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <SD_CheckStatus+0x38>)
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d568:	f7ff ffb0 	bl	800d4cc <BSP_SD_GetCardState>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <SD_CheckStatus+0x38>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	b2db      	uxtb	r3, r3
 800d578:	f023 0301 	bic.w	r3, r3, #1
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	4b04      	ldr	r3, [pc, #16]	; (800d590 <SD_CheckStatus+0x38>)
 800d580:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d582:	4b03      	ldr	r3, [pc, #12]	; (800d590 <SD_CheckStatus+0x38>)
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	b2db      	uxtb	r3, r3
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	20000011 	.word	0x20000011

0800d594 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d59e:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <SD_initialize+0x38>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d5a4:	f7ff ff30 	bl	800d408 <BSP_SD_Init>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d107      	bne.n	800d5be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff ffd1 	bl	800d558 <SD_CheckStatus>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	4b04      	ldr	r3, [pc, #16]	; (800d5cc <SD_initialize+0x38>)
 800d5bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d5be:	4b03      	ldr	r3, [pc, #12]	; (800d5cc <SD_initialize+0x38>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	b2db      	uxtb	r3, r3
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000011 	.word	0x20000011

0800d5d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff ffbb 	bl	800d558 <SD_CheckStatus>
 800d5e2:	4603      	mov	r3, r0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60b9      	str	r1, [r7, #8]
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	603b      	str	r3, [r7, #0]
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	6879      	ldr	r1, [r7, #4]
 800d608:	68b8      	ldr	r0, [r7, #8]
 800d60a:	f7ff ff23 	bl	800d454 <BSP_SD_ReadBlocks>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d107      	bne.n	800d624 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d614:	bf00      	nop
 800d616:	f7ff ff59 	bl	800d4cc <BSP_SD_GetCardState>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1fa      	bne.n	800d616 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d624:	7dfb      	ldrb	r3, [r7, #23]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b086      	sub	sp, #24
 800d632:	af00      	add	r7, sp, #0
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	603b      	str	r3, [r7, #0]
 800d63a:	4603      	mov	r3, r0
 800d63c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	6879      	ldr	r1, [r7, #4]
 800d64a:	68b8      	ldr	r0, [r7, #8]
 800d64c:	f7ff ff20 	bl	800d490 <BSP_SD_WriteBlocks>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d107      	bne.n	800d666 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d656:	bf00      	nop
 800d658:	f7ff ff38 	bl	800d4cc <BSP_SD_GetCardState>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1fa      	bne.n	800d658 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d666:	7dfb      	ldrb	r3, [r7, #23]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08c      	sub	sp, #48	; 0x30
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	603a      	str	r2, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	460b      	mov	r3, r1
 800d67e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d686:	4b25      	ldr	r3, [pc, #148]	; (800d71c <SD_ioctl+0xac>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <SD_ioctl+0x28>
 800d694:	2303      	movs	r3, #3
 800d696:	e03c      	b.n	800d712 <SD_ioctl+0xa2>

  switch (cmd)
 800d698:	79bb      	ldrb	r3, [r7, #6]
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d834      	bhi.n	800d708 <SD_ioctl+0x98>
 800d69e:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <SD_ioctl+0x34>)
 800d6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a4:	0800d6b5 	.word	0x0800d6b5
 800d6a8:	0800d6bd 	.word	0x0800d6bd
 800d6ac:	0800d6d5 	.word	0x0800d6d5
 800d6b0:	0800d6ef 	.word	0x0800d6ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6ba:	e028      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6bc:	f107 0308 	add.w	r3, r7, #8
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff ff13 	bl	800d4ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d6c6:	6a3a      	ldr	r2, [r7, #32]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6d2:	e01c      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6d4:	f107 0308 	add.w	r3, r7, #8
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff ff07 	bl	800d4ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6ec:	e00f      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6ee:	f107 0308 	add.w	r3, r7, #8
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff fefa 	bl	800d4ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	0a5a      	lsrs	r2, r3, #9
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d706:	e002      	b.n	800d70e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d708:	2304      	movs	r3, #4
 800d70a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d70e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d712:	4618      	mov	r0, r3
 800d714:	3730      	adds	r7, #48	; 0x30
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000011 	.word	0x20000011

0800d720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d72c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d730:	f002 faae 	bl	800fc90 <USBD_static_malloc>
 800d734:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d105      	bne.n	800d748 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d744:	2302      	movs	r3, #2
 800d746:	e066      	b.n	800d816 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	7c1b      	ldrb	r3, [r3, #16]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d119      	bne.n	800d78c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d75c:	2202      	movs	r2, #2
 800d75e:	2181      	movs	r1, #129	; 0x81
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f002 f8cf 	bl	800f904 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2201      	movs	r2, #1
 800d76a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d770:	2202      	movs	r2, #2
 800d772:	2101      	movs	r1, #1
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f002 f8c5 	bl	800f904 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2201      	movs	r2, #1
 800d77e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2210      	movs	r2, #16
 800d786:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d78a:	e016      	b.n	800d7ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d78c:	2340      	movs	r3, #64	; 0x40
 800d78e:	2202      	movs	r2, #2
 800d790:	2181      	movs	r1, #129	; 0x81
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f002 f8b6 	bl	800f904 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d79e:	2340      	movs	r3, #64	; 0x40
 800d7a0:	2202      	movs	r2, #2
 800d7a2:	2101      	movs	r1, #1
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f002 f8ad 	bl	800f904 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2210      	movs	r2, #16
 800d7b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d7ba:	2308      	movs	r3, #8
 800d7bc:	2203      	movs	r2, #3
 800d7be:	2182      	movs	r1, #130	; 0x82
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f002 f89f 	bl	800f904 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7c1b      	ldrb	r3, [r3, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d109      	bne.n	800d804 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f002 f9fb 	bl	800fbf8 <USBD_LL_PrepareReceive>
 800d802:	e007      	b.n	800d814 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d80a:	2340      	movs	r3, #64	; 0x40
 800d80c:	2101      	movs	r1, #1
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f002 f9f2 	bl	800fbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d82a:	2181      	movs	r1, #129	; 0x81
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f002 f8a7 	bl	800f980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d838:	2101      	movs	r1, #1
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f002 f8a0 	bl	800f980 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d848:	2182      	movs	r1, #130	; 0x82
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f002 f898 	bl	800f980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00e      	beq.n	800d888 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d87a:	4618      	mov	r0, r3
 800d87c:	f002 fa16 	bl	800fcac <USBD_static_free>
    pdev->pClassData = NULL;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	e0af      	b.n	800da1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d03f      	beq.n	800d948 <USBD_CDC_Setup+0xb4>
 800d8c8:	2b20      	cmp	r3, #32
 800d8ca:	f040 809f 	bne.w	800da0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	88db      	ldrh	r3, [r3, #6]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d02e      	beq.n	800d934 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	b25b      	sxtb	r3, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	da16      	bge.n	800d90e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d8ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8ee:	683a      	ldr	r2, [r7, #0]
 800d8f0:	88d2      	ldrh	r2, [r2, #6]
 800d8f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	88db      	ldrh	r3, [r3, #6]
 800d8f8:	2b07      	cmp	r3, #7
 800d8fa:	bf28      	it	cs
 800d8fc:	2307      	movcs	r3, #7
 800d8fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	89fa      	ldrh	r2, [r7, #14]
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 fb19 	bl	800ef3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d90c:	e085      	b.n	800da1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	785a      	ldrb	r2, [r3, #1]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	88db      	ldrh	r3, [r3, #6]
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d924:	6939      	ldr	r1, [r7, #16]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	88db      	ldrh	r3, [r3, #6]
 800d92a:	461a      	mov	r2, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 fb32 	bl	800ef96 <USBD_CtlPrepareRx>
      break;
 800d932:	e072      	b.n	800da1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	7850      	ldrb	r0, [r2, #1]
 800d940:	2200      	movs	r2, #0
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	4798      	blx	r3
      break;
 800d946:	e068      	b.n	800da1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	2b0b      	cmp	r3, #11
 800d94e:	d852      	bhi.n	800d9f6 <USBD_CDC_Setup+0x162>
 800d950:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <USBD_CDC_Setup+0xc4>)
 800d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d956:	bf00      	nop
 800d958:	0800d989 	.word	0x0800d989
 800d95c:	0800da05 	.word	0x0800da05
 800d960:	0800d9f7 	.word	0x0800d9f7
 800d964:	0800d9f7 	.word	0x0800d9f7
 800d968:	0800d9f7 	.word	0x0800d9f7
 800d96c:	0800d9f7 	.word	0x0800d9f7
 800d970:	0800d9f7 	.word	0x0800d9f7
 800d974:	0800d9f7 	.word	0x0800d9f7
 800d978:	0800d9f7 	.word	0x0800d9f7
 800d97c:	0800d9f7 	.word	0x0800d9f7
 800d980:	0800d9b3 	.word	0x0800d9b3
 800d984:	0800d9dd 	.word	0x0800d9dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b03      	cmp	r3, #3
 800d992:	d107      	bne.n	800d9a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d994:	f107 030a 	add.w	r3, r7, #10
 800d998:	2202      	movs	r2, #2
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f001 face 	bl	800ef3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9a2:	e032      	b.n	800da0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f001 fa58 	bl	800ee5c <USBD_CtlError>
            ret = USBD_FAIL;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	75fb      	strb	r3, [r7, #23]
          break;
 800d9b0:	e02b      	b.n	800da0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d107      	bne.n	800d9ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d9be:	f107 030d 	add.w	r3, r7, #13
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 fab9 	bl	800ef3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9cc:	e01d      	b.n	800da0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f001 fa43 	bl	800ee5c <USBD_CtlError>
            ret = USBD_FAIL;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d9da:	e016      	b.n	800da0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b03      	cmp	r3, #3
 800d9e6:	d00f      	beq.n	800da08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f001 fa36 	bl	800ee5c <USBD_CtlError>
            ret = USBD_FAIL;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d9f4:	e008      	b.n	800da08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 fa2f 	bl	800ee5c <USBD_CtlError>
          ret = USBD_FAIL;
 800d9fe:	2303      	movs	r3, #3
 800da00:	75fb      	strb	r3, [r7, #23]
          break;
 800da02:	e002      	b.n	800da0a <USBD_CDC_Setup+0x176>
          break;
 800da04:	bf00      	nop
 800da06:	e008      	b.n	800da1a <USBD_CDC_Setup+0x186>
          break;
 800da08:	bf00      	nop
      }
      break;
 800da0a:	e006      	b.n	800da1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f001 fa24 	bl	800ee5c <USBD_CtlError>
      ret = USBD_FAIL;
 800da14:	2303      	movs	r3, #3
 800da16:	75fb      	strb	r3, [r7, #23]
      break;
 800da18:	bf00      	nop
  }

  return (uint8_t)ret;
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da42:	2303      	movs	r3, #3
 800da44:	e04f      	b.n	800dae6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800da4e:	78fa      	ldrb	r2, [r7, #3]
 800da50:	6879      	ldr	r1, [r7, #4]
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	440b      	add	r3, r1
 800da5c:	3318      	adds	r3, #24
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d029      	beq.n	800dab8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800da64:	78fa      	ldrb	r2, [r7, #3]
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	4613      	mov	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	440b      	add	r3, r1
 800da72:	3318      	adds	r3, #24
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	78f9      	ldrb	r1, [r7, #3]
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	460b      	mov	r3, r1
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	440b      	add	r3, r1
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	4403      	add	r3, r0
 800da84:	3348      	adds	r3, #72	; 0x48
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	fbb2 f1f3 	udiv	r1, r2, r3
 800da8c:	fb01 f303 	mul.w	r3, r1, r3
 800da90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800da92:	2b00      	cmp	r3, #0
 800da94:	d110      	bne.n	800dab8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800da96:	78fa      	ldrb	r2, [r7, #3]
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	4613      	mov	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4413      	add	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	440b      	add	r3, r1
 800daa4:	3318      	adds	r3, #24
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800daaa:	78f9      	ldrb	r1, [r7, #3]
 800daac:	2300      	movs	r3, #0
 800daae:	2200      	movs	r2, #0
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f002 f869 	bl	800fb88 <USBD_LL_Transmit>
 800dab6:	e015      	b.n	800dae4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dada:	68ba      	ldr	r2, [r7, #8]
 800dadc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dae0:	78fa      	ldrb	r2, [r7, #3]
 800dae2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db0c:	2303      	movs	r3, #3
 800db0e:	e015      	b.n	800db3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	4619      	mov	r1, r3
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f002 f8a7 	bl	800fc68 <USBD_LL_GetRxDataSize>
 800db1a:	4602      	mov	r2, r0
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800db36:	4611      	mov	r1, r2
 800db38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e01b      	b.n	800db96 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d015      	beq.n	800db94 <USBD_CDC_EP0_RxReady+0x50>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db6e:	2bff      	cmp	r3, #255	; 0xff
 800db70:	d010      	beq.n	800db94 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800db80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db88:	b292      	uxth	r2, r2
 800db8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	22ff      	movs	r2, #255	; 0xff
 800db90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2243      	movs	r2, #67	; 0x43
 800dbac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dbae:	4b03      	ldr	r3, [pc, #12]	; (800dbbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	2000009c 	.word	0x2000009c

0800dbc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2243      	movs	r2, #67	; 0x43
 800dbcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dbce:	4b03      	ldr	r3, [pc, #12]	; (800dbdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	20000058 	.word	0x20000058

0800dbe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2243      	movs	r2, #67	; 0x43
 800dbec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dbee:	4b03      	ldr	r3, [pc, #12]	; (800dbfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	200000e0 	.word	0x200000e0

0800dc00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	220a      	movs	r2, #10
 800dc0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc0e:	4b03      	ldr	r3, [pc, #12]	; (800dc1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	20000014 	.word	0x20000014

0800dc20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc30:	2303      	movs	r3, #3
 800dc32:	e004      	b.n	800dc3e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b087      	sub	sp, #28
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc5c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dc64:	2303      	movs	r3, #3
 800dc66:	e008      	b.n	800dc7a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	371c      	adds	r7, #28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b085      	sub	sp, #20
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e004      	b.n	800dcac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcc6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e01a      	b.n	800dd10 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d114      	bne.n	800dd0e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dd02:	2181      	movs	r1, #129	; 0x81
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f001 ff3f 	bl	800fb88 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dd32:	2303      	movs	r3, #3
 800dd34:	e016      	b.n	800dd64 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	7c1b      	ldrb	r3, [r3, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d109      	bne.n	800dd52 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd48:	2101      	movs	r1, #1
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 ff54 	bl	800fbf8 <USBD_LL_PrepareReceive>
 800dd50:	e007      	b.n	800dd62 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd58:	2340      	movs	r3, #64	; 0x40
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f001 ff4b 	bl	800fbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	4613      	mov	r3, r2
 800dd78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dd80:	2303      	movs	r3, #3
 800dd82:	e01f      	b.n	800ddc4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	79fa      	ldrb	r2, [r7, #7]
 800ddb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f001 fd27 	bl	800f80c <USBD_LL_Init>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dde0:	2303      	movs	r3, #3
 800dde2:	e016      	b.n	800de12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00b      	beq.n	800de10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de00:	f107 020e 	add.w	r2, r7, #14
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	4602      	mov	r2, r0
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f001 fd3c 	bl	800f8a0 <USBD_LL_Start>
 800de28:	4603      	mov	r3, r0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800de54:	2303      	movs	r3, #3
 800de56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d009      	beq.n	800de76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	78fa      	ldrb	r2, [r7, #3]
 800de6c:	4611      	mov	r1, r2
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	4798      	blx	r3
 800de72:	4603      	mov	r3, r0
 800de74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800de76:	7bfb      	ldrb	r3, [r7, #15]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de92:	2b00      	cmp	r3, #0
 800de94:	d007      	beq.n	800dea6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	78fa      	ldrb	r2, [r7, #3]
 800dea0:	4611      	mov	r1, r2
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	4798      	blx	r3
  }

  return USBD_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 ff90 	bl	800ede8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ded6:	461a      	mov	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dee4:	f003 031f 	and.w	r3, r3, #31
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d01a      	beq.n	800df22 <USBD_LL_SetupStage+0x72>
 800deec:	2b02      	cmp	r3, #2
 800deee:	d822      	bhi.n	800df36 <USBD_LL_SetupStage+0x86>
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <USBD_LL_SetupStage+0x4a>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d00a      	beq.n	800df0e <USBD_LL_SetupStage+0x5e>
 800def8:	e01d      	b.n	800df36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fa62 	bl	800e3cc <USBD_StdDevReq>
 800df08:	4603      	mov	r3, r0
 800df0a:	73fb      	strb	r3, [r7, #15]
      break;
 800df0c:	e020      	b.n	800df50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fac6 	bl	800e4a8 <USBD_StdItfReq>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73fb      	strb	r3, [r7, #15]
      break;
 800df20:	e016      	b.n	800df50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fb05 	bl	800e53a <USBD_StdEPReq>
 800df30:	4603      	mov	r3, r0
 800df32:	73fb      	strb	r3, [r7, #15]
      break;
 800df34:	e00c      	b.n	800df50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800df3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df40:	b2db      	uxtb	r3, r3
 800df42:	4619      	mov	r1, r3
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f001 fd51 	bl	800f9ec <USBD_LL_StallEP>
 800df4a:	4603      	mov	r3, r0
 800df4c:	73fb      	strb	r3, [r7, #15]
      break;
 800df4e:	bf00      	nop
  }

  return ret;
 800df50:	7bfb      	ldrb	r3, [r7, #15]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b086      	sub	sp, #24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	460b      	mov	r3, r1
 800df64:	607a      	str	r2, [r7, #4]
 800df66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d138      	bne.n	800dfe0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800df74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d14a      	bne.n	800e016 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	689a      	ldr	r2, [r3, #8]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d913      	bls.n	800dfb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	bf28      	it	cs
 800dfa6:	4613      	movcs	r3, r2
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f001 f80f 	bl	800efd0 <USBD_CtlContinueRx>
 800dfb2:	e030      	b.n	800e016 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b03      	cmp	r3, #3
 800dfbe:	d10b      	bne.n	800dfd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f001 f80a 	bl	800eff2 <USBD_CtlSendStatus>
 800dfde:	e01a      	b.n	800e016 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d114      	bne.n	800e016 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00e      	beq.n	800e016 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	7afa      	ldrb	r2, [r7, #11]
 800e002:	4611      	mov	r1, r2
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	4798      	blx	r3
 800e008:	4603      	mov	r3, r0
 800e00a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	e000      	b.n	800e018 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	460b      	mov	r3, r1
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e02e:	7afb      	ldrb	r3, [r7, #11]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d16b      	bne.n	800e10c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3314      	adds	r3, #20
 800e038:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e040:	2b02      	cmp	r3, #2
 800e042:	d156      	bne.n	800e0f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	689a      	ldr	r2, [r3, #8]
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d914      	bls.n	800e07a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	689a      	ldr	r2, [r3, #8]
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	1ad2      	subs	r2, r2, r3
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	461a      	mov	r2, r3
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 ff84 	bl	800ef74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e06c:	2300      	movs	r3, #0
 800e06e:	2200      	movs	r2, #0
 800e070:	2100      	movs	r1, #0
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f001 fdc0 	bl	800fbf8 <USBD_LL_PrepareReceive>
 800e078:	e03b      	b.n	800e0f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	68da      	ldr	r2, [r3, #12]
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	429a      	cmp	r2, r3
 800e084:	d11c      	bne.n	800e0c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	685a      	ldr	r2, [r3, #4]
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e08e:	429a      	cmp	r2, r3
 800e090:	d316      	bcc.n	800e0c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d20f      	bcs.n	800e0c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f000 ff65 	bl	800ef74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f001 fd9d 	bl	800fbf8 <USBD_LL_PrepareReceive>
 800e0be:	e018      	b.n	800e0f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d10b      	bne.n	800e0e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0e4:	2180      	movs	r1, #128	; 0x80
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f001 fc80 	bl	800f9ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 ff93 	bl	800f018 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d122      	bne.n	800e142 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fe98 	bl	800de32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e10a:	e01a      	b.n	800e142 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b03      	cmp	r3, #3
 800e116:	d114      	bne.n	800e142 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00e      	beq.n	800e142 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	7afa      	ldrb	r2, [r7, #11]
 800e12e:	4611      	mov	r1, r2
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	4798      	blx	r3
 800e134:	4603      	mov	r3, r0
 800e136:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
 800e140:	e000      	b.n	800e144 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d101      	bne.n	800e180 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e02f      	b.n	800e1e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00f      	beq.n	800e1aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	6852      	ldr	r2, [r2, #4]
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1aa:	2340      	movs	r3, #64	; 0x40
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 fba7 	bl	800f904 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2240      	movs	r2, #64	; 0x40
 800e1c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1c6:	2340      	movs	r3, #64	; 0x40
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2180      	movs	r1, #128	; 0x80
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f001 fb99 	bl	800f904 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2240      	movs	r2, #64	; 0x40
 800e1dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	78fa      	ldrb	r2, [r7, #3]
 800e1f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e216:	b2da      	uxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2204      	movs	r2, #4
 800e222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b04      	cmp	r3, #4
 800e246:	d106      	bne.n	800e256 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e276:	2303      	movs	r3, #3
 800e278:	e012      	b.n	800e2a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b03      	cmp	r3, #3
 800e284:	d10b      	bne.n	800e29e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d005      	beq.n	800e29e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e014      	b.n	800e2ec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	d10d      	bne.n	800e2ea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d007      	beq.n	800e2ea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	78fa      	ldrb	r2, [r7, #3]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e30a:	2303      	movs	r3, #3
 800e30c:	e014      	b.n	800e338 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b03      	cmp	r3, #3
 800e318:	d10d      	bne.n	800e336 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e322:	2b00      	cmp	r3, #0
 800e324:	d007      	beq.n	800e336 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e32e:	78fa      	ldrb	r2, [r7, #3]
 800e330:	4611      	mov	r1, r2
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b082      	sub	sp, #8
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	6852      	ldr	r2, [r2, #4]
 800e37c:	b2d2      	uxtb	r2, r2
 800e37e:	4611      	mov	r1, r2
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	4798      	blx	r3
  }

  return USBD_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e38e:	b480      	push	{r7}
 800e390:	b087      	sub	sp, #28
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e3ac:	8a3b      	ldrh	r3, [r7, #16]
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	b21a      	sxth	r2, r3
 800e3b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	b21b      	sxth	r3, r3
 800e3ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e3bc:	89fb      	ldrh	r3, [r7, #14]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
	...

0800e3cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3e2:	2b40      	cmp	r3, #64	; 0x40
 800e3e4:	d005      	beq.n	800e3f2 <USBD_StdDevReq+0x26>
 800e3e6:	2b40      	cmp	r3, #64	; 0x40
 800e3e8:	d853      	bhi.n	800e492 <USBD_StdDevReq+0xc6>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00b      	beq.n	800e406 <USBD_StdDevReq+0x3a>
 800e3ee:	2b20      	cmp	r3, #32
 800e3f0:	d14f      	bne.n	800e492 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	4798      	blx	r3
 800e400:	4603      	mov	r3, r0
 800e402:	73fb      	strb	r3, [r7, #15]
      break;
 800e404:	e04a      	b.n	800e49c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b09      	cmp	r3, #9
 800e40c:	d83b      	bhi.n	800e486 <USBD_StdDevReq+0xba>
 800e40e:	a201      	add	r2, pc, #4	; (adr r2, 800e414 <USBD_StdDevReq+0x48>)
 800e410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e414:	0800e469 	.word	0x0800e469
 800e418:	0800e47d 	.word	0x0800e47d
 800e41c:	0800e487 	.word	0x0800e487
 800e420:	0800e473 	.word	0x0800e473
 800e424:	0800e487 	.word	0x0800e487
 800e428:	0800e447 	.word	0x0800e447
 800e42c:	0800e43d 	.word	0x0800e43d
 800e430:	0800e487 	.word	0x0800e487
 800e434:	0800e45f 	.word	0x0800e45f
 800e438:	0800e451 	.word	0x0800e451
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f9de 	bl	800e800 <USBD_GetDescriptor>
          break;
 800e444:	e024      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fb43 	bl	800ead4 <USBD_SetAddress>
          break;
 800e44e:	e01f      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fb82 	bl	800eb5c <USBD_SetConfig>
 800e458:	4603      	mov	r3, r0
 800e45a:	73fb      	strb	r3, [r7, #15]
          break;
 800e45c:	e018      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e45e:	6839      	ldr	r1, [r7, #0]
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fc21 	bl	800eca8 <USBD_GetConfig>
          break;
 800e466:	e013      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fc52 	bl	800ed14 <USBD_GetStatus>
          break;
 800e470:	e00e      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 fc81 	bl	800ed7c <USBD_SetFeature>
          break;
 800e47a:	e009      	b.n	800e490 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fc90 	bl	800eda4 <USBD_ClrFeature>
          break;
 800e484:	e004      	b.n	800e490 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 fce7 	bl	800ee5c <USBD_CtlError>
          break;
 800e48e:	bf00      	nop
      }
      break;
 800e490:	e004      	b.n	800e49c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 fce1 	bl	800ee5c <USBD_CtlError>
      break;
 800e49a:	bf00      	nop
  }

  return ret;
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop

0800e4a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4be:	2b40      	cmp	r3, #64	; 0x40
 800e4c0:	d005      	beq.n	800e4ce <USBD_StdItfReq+0x26>
 800e4c2:	2b40      	cmp	r3, #64	; 0x40
 800e4c4:	d82f      	bhi.n	800e526 <USBD_StdItfReq+0x7e>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <USBD_StdItfReq+0x26>
 800e4ca:	2b20      	cmp	r3, #32
 800e4cc:	d12b      	bne.n	800e526 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d81d      	bhi.n	800e518 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	889b      	ldrh	r3, [r3, #4]
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d813      	bhi.n	800e50e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	4798      	blx	r3
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	88db      	ldrh	r3, [r3, #6]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d110      	bne.n	800e522 <USBD_StdItfReq+0x7a>
 800e500:	7bfb      	ldrb	r3, [r7, #15]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10d      	bne.n	800e522 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fd73 	bl	800eff2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e50c:	e009      	b.n	800e522 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fca3 	bl	800ee5c <USBD_CtlError>
          break;
 800e516:	e004      	b.n	800e522 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fc9e 	bl	800ee5c <USBD_CtlError>
          break;
 800e520:	e000      	b.n	800e524 <USBD_StdItfReq+0x7c>
          break;
 800e522:	bf00      	nop
      }
      break;
 800e524:	e004      	b.n	800e530 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fc97 	bl	800ee5c <USBD_CtlError>
      break;
 800e52e:	bf00      	nop
  }

  return ret;
 800e530:	7bfb      	ldrb	r3, [r7, #15]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	889b      	ldrh	r3, [r3, #4]
 800e54c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e556:	2b40      	cmp	r3, #64	; 0x40
 800e558:	d007      	beq.n	800e56a <USBD_StdEPReq+0x30>
 800e55a:	2b40      	cmp	r3, #64	; 0x40
 800e55c:	f200 8145 	bhi.w	800e7ea <USBD_StdEPReq+0x2b0>
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00c      	beq.n	800e57e <USBD_StdEPReq+0x44>
 800e564:	2b20      	cmp	r3, #32
 800e566:	f040 8140 	bne.w	800e7ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	4798      	blx	r3
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
      break;
 800e57c:	e13a      	b.n	800e7f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	785b      	ldrb	r3, [r3, #1]
 800e582:	2b03      	cmp	r3, #3
 800e584:	d007      	beq.n	800e596 <USBD_StdEPReq+0x5c>
 800e586:	2b03      	cmp	r3, #3
 800e588:	f300 8129 	bgt.w	800e7de <USBD_StdEPReq+0x2a4>
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d07f      	beq.n	800e690 <USBD_StdEPReq+0x156>
 800e590:	2b01      	cmp	r3, #1
 800e592:	d03c      	beq.n	800e60e <USBD_StdEPReq+0xd4>
 800e594:	e123      	b.n	800e7de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d002      	beq.n	800e5a8 <USBD_StdEPReq+0x6e>
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d016      	beq.n	800e5d4 <USBD_StdEPReq+0x9a>
 800e5a6:	e02c      	b.n	800e602 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5a8:	7bbb      	ldrb	r3, [r7, #14]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00d      	beq.n	800e5ca <USBD_StdEPReq+0x90>
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	2b80      	cmp	r3, #128	; 0x80
 800e5b2:	d00a      	beq.n	800e5ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f001 fa17 	bl	800f9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5be:	2180      	movs	r1, #128	; 0x80
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f001 fa13 	bl	800f9ec <USBD_LL_StallEP>
 800e5c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5c8:	e020      	b.n	800e60c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fc45 	bl	800ee5c <USBD_CtlError>
              break;
 800e5d2:	e01b      	b.n	800e60c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	885b      	ldrh	r3, [r3, #2]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10e      	bne.n	800e5fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e5dc:	7bbb      	ldrb	r3, [r7, #14]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00b      	beq.n	800e5fa <USBD_StdEPReq+0xc0>
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	2b80      	cmp	r3, #128	; 0x80
 800e5e6:	d008      	beq.n	800e5fa <USBD_StdEPReq+0xc0>
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	88db      	ldrh	r3, [r3, #6]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d104      	bne.n	800e5fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5f0:	7bbb      	ldrb	r3, [r7, #14]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 f9f9 	bl	800f9ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fcf9 	bl	800eff2 <USBD_CtlSendStatus>

              break;
 800e600:	e004      	b.n	800e60c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fc29 	bl	800ee5c <USBD_CtlError>
              break;
 800e60a:	bf00      	nop
          }
          break;
 800e60c:	e0ec      	b.n	800e7e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b02      	cmp	r3, #2
 800e618:	d002      	beq.n	800e620 <USBD_StdEPReq+0xe6>
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d016      	beq.n	800e64c <USBD_StdEPReq+0x112>
 800e61e:	e030      	b.n	800e682 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00d      	beq.n	800e642 <USBD_StdEPReq+0x108>
 800e626:	7bbb      	ldrb	r3, [r7, #14]
 800e628:	2b80      	cmp	r3, #128	; 0x80
 800e62a:	d00a      	beq.n	800e642 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	4619      	mov	r1, r3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f001 f9db 	bl	800f9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e636:	2180      	movs	r1, #128	; 0x80
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f001 f9d7 	bl	800f9ec <USBD_LL_StallEP>
 800e63e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e640:	e025      	b.n	800e68e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 fc09 	bl	800ee5c <USBD_CtlError>
              break;
 800e64a:	e020      	b.n	800e68e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	885b      	ldrh	r3, [r3, #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d11b      	bne.n	800e68c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e654:	7bbb      	ldrb	r3, [r7, #14]
 800e656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e65e:	7bbb      	ldrb	r3, [r7, #14]
 800e660:	4619      	mov	r1, r3
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 f9f8 	bl	800fa58 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fcc2 	bl	800eff2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	4798      	blx	r3
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e680:	e004      	b.n	800e68c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fbe9 	bl	800ee5c <USBD_CtlError>
              break;
 800e68a:	e000      	b.n	800e68e <USBD_StdEPReq+0x154>
              break;
 800e68c:	bf00      	nop
          }
          break;
 800e68e:	e0ab      	b.n	800e7e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d002      	beq.n	800e6a2 <USBD_StdEPReq+0x168>
 800e69c:	2b03      	cmp	r3, #3
 800e69e:	d032      	beq.n	800e706 <USBD_StdEPReq+0x1cc>
 800e6a0:	e097      	b.n	800e7d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6a2:	7bbb      	ldrb	r3, [r7, #14]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d007      	beq.n	800e6b8 <USBD_StdEPReq+0x17e>
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
 800e6aa:	2b80      	cmp	r3, #128	; 0x80
 800e6ac:	d004      	beq.n	800e6b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e6ae:	6839      	ldr	r1, [r7, #0]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 fbd3 	bl	800ee5c <USBD_CtlError>
                break;
 800e6b6:	e091      	b.n	800e7dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	da0b      	bge.n	800e6d8 <USBD_StdEPReq+0x19e>
 800e6c0:	7bbb      	ldrb	r3, [r7, #14]
 800e6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	3310      	adds	r3, #16
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	e00b      	b.n	800e6f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6d8:	7bbb      	ldrb	r3, [r7, #14]
 800e6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6de:	4613      	mov	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	2202      	movs	r2, #2
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fc1d 	bl	800ef3e <USBD_CtlSendData>
              break;
 800e704:	e06a      	b.n	800e7dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	da11      	bge.n	800e732 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	f003 020f 	and.w	r2, r3, #15
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	440b      	add	r3, r1
 800e720:	3324      	adds	r3, #36	; 0x24
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d117      	bne.n	800e758 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fb96 	bl	800ee5c <USBD_CtlError>
                  break;
 800e730:	e054      	b.n	800e7dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	f003 020f 	and.w	r2, r3, #15
 800e738:	6879      	ldr	r1, [r7, #4]
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	440b      	add	r3, r1
 800e744:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d104      	bne.n	800e758 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 fb83 	bl	800ee5c <USBD_CtlError>
                  break;
 800e756:	e041      	b.n	800e7dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	da0b      	bge.n	800e778 <USBD_StdEPReq+0x23e>
 800e760:	7bbb      	ldrb	r3, [r7, #14]
 800e762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e766:	4613      	mov	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	4413      	add	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	3310      	adds	r3, #16
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	4413      	add	r3, r2
 800e774:	3304      	adds	r3, #4
 800e776:	e00b      	b.n	800e790 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e77e:	4613      	mov	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	3304      	adds	r3, #4
 800e790:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e792:	7bbb      	ldrb	r3, [r7, #14]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <USBD_StdEPReq+0x264>
 800e798:	7bbb      	ldrb	r3, [r7, #14]
 800e79a:	2b80      	cmp	r3, #128	; 0x80
 800e79c:	d103      	bne.n	800e7a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	e00e      	b.n	800e7c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e7a6:	7bbb      	ldrb	r3, [r7, #14]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 f98a 	bl	800fac4 <USBD_LL_IsStallEP>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	e002      	b.n	800e7c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2202      	movs	r2, #2
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 fbb7 	bl	800ef3e <USBD_CtlSendData>
              break;
 800e7d0:	e004      	b.n	800e7dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fb41 	bl	800ee5c <USBD_CtlError>
              break;
 800e7da:	bf00      	nop
          }
          break;
 800e7dc:	e004      	b.n	800e7e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e7de:	6839      	ldr	r1, [r7, #0]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fb3b 	bl	800ee5c <USBD_CtlError>
          break;
 800e7e6:	bf00      	nop
      }
      break;
 800e7e8:	e004      	b.n	800e7f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fb35 	bl	800ee5c <USBD_CtlError>
      break;
 800e7f2:	bf00      	nop
  }

  return ret;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e80a:	2300      	movs	r3, #0
 800e80c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e812:	2300      	movs	r3, #0
 800e814:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	0a1b      	lsrs	r3, r3, #8
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	3b01      	subs	r3, #1
 800e820:	2b06      	cmp	r3, #6
 800e822:	f200 8128 	bhi.w	800ea76 <USBD_GetDescriptor+0x276>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <USBD_GetDescriptor+0x2c>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e849 	.word	0x0800e849
 800e830:	0800e861 	.word	0x0800e861
 800e834:	0800e8a1 	.word	0x0800e8a1
 800e838:	0800ea77 	.word	0x0800ea77
 800e83c:	0800ea77 	.word	0x0800ea77
 800e840:	0800ea17 	.word	0x0800ea17
 800e844:	0800ea43 	.word	0x0800ea43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	7c12      	ldrb	r2, [r2, #16]
 800e854:	f107 0108 	add.w	r1, r7, #8
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
 800e85c:	60f8      	str	r0, [r7, #12]
      break;
 800e85e:	e112      	b.n	800ea86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7c1b      	ldrb	r3, [r3, #16]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10d      	bne.n	800e884 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e870:	f107 0208 	add.w	r2, r7, #8
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
 800e878:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3301      	adds	r3, #1
 800e87e:	2202      	movs	r2, #2
 800e880:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e882:	e100      	b.n	800ea86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88c:	f107 0208 	add.w	r2, r7, #8
 800e890:	4610      	mov	r0, r2
 800e892:	4798      	blx	r3
 800e894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3301      	adds	r3, #1
 800e89a:	2202      	movs	r2, #2
 800e89c:	701a      	strb	r2, [r3, #0]
      break;
 800e89e:	e0f2      	b.n	800ea86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	885b      	ldrh	r3, [r3, #2]
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b05      	cmp	r3, #5
 800e8a8:	f200 80ac 	bhi.w	800ea04 <USBD_GetDescriptor+0x204>
 800e8ac:	a201      	add	r2, pc, #4	; (adr r2, 800e8b4 <USBD_GetDescriptor+0xb4>)
 800e8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b2:	bf00      	nop
 800e8b4:	0800e8cd 	.word	0x0800e8cd
 800e8b8:	0800e901 	.word	0x0800e901
 800e8bc:	0800e935 	.word	0x0800e935
 800e8c0:	0800e969 	.word	0x0800e969
 800e8c4:	0800e99d 	.word	0x0800e99d
 800e8c8:	0800e9d1 	.word	0x0800e9d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00b      	beq.n	800e8f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	7c12      	ldrb	r2, [r2, #16]
 800e8e4:	f107 0108 	add.w	r1, r7, #8
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	4798      	blx	r3
 800e8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ee:	e091      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fab2 	bl	800ee5c <USBD_CtlError>
            err++;
 800e8f8:	7afb      	ldrb	r3, [r7, #11]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8fe:	e089      	b.n	800ea14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00b      	beq.n	800e924 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	7c12      	ldrb	r2, [r2, #16]
 800e918:	f107 0108 	add.w	r1, r7, #8
 800e91c:	4610      	mov	r0, r2
 800e91e:	4798      	blx	r3
 800e920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e922:	e077      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fa98 	bl	800ee5c <USBD_CtlError>
            err++;
 800e92c:	7afb      	ldrb	r3, [r7, #11]
 800e92e:	3301      	adds	r3, #1
 800e930:	72fb      	strb	r3, [r7, #11]
          break;
 800e932:	e06f      	b.n	800ea14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00b      	beq.n	800e958 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	7c12      	ldrb	r2, [r2, #16]
 800e94c:	f107 0108 	add.w	r1, r7, #8
 800e950:	4610      	mov	r0, r2
 800e952:	4798      	blx	r3
 800e954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e956:	e05d      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 fa7e 	bl	800ee5c <USBD_CtlError>
            err++;
 800e960:	7afb      	ldrb	r3, [r7, #11]
 800e962:	3301      	adds	r3, #1
 800e964:	72fb      	strb	r3, [r7, #11]
          break;
 800e966:	e055      	b.n	800ea14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d00b      	beq.n	800e98c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e97a:	691b      	ldr	r3, [r3, #16]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	7c12      	ldrb	r2, [r2, #16]
 800e980:	f107 0108 	add.w	r1, r7, #8
 800e984:	4610      	mov	r0, r2
 800e986:	4798      	blx	r3
 800e988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e98a:	e043      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fa64 	bl	800ee5c <USBD_CtlError>
            err++;
 800e994:	7afb      	ldrb	r3, [r7, #11]
 800e996:	3301      	adds	r3, #1
 800e998:	72fb      	strb	r3, [r7, #11]
          break;
 800e99a:	e03b      	b.n	800ea14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	7c12      	ldrb	r2, [r2, #16]
 800e9b4:	f107 0108 	add.w	r1, r7, #8
 800e9b8:	4610      	mov	r0, r2
 800e9ba:	4798      	blx	r3
 800e9bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9be:	e029      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 fa4a 	bl	800ee5c <USBD_CtlError>
            err++;
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ce:	e021      	b.n	800ea14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00b      	beq.n	800e9f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	7c12      	ldrb	r2, [r2, #16]
 800e9e8:	f107 0108 	add.w	r1, r7, #8
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	4798      	blx	r3
 800e9f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9f2:	e00f      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9f4:	6839      	ldr	r1, [r7, #0]
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fa30 	bl	800ee5c <USBD_CtlError>
            err++;
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	72fb      	strb	r3, [r7, #11]
          break;
 800ea02:	e007      	b.n	800ea14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fa28 	bl	800ee5c <USBD_CtlError>
          err++;
 800ea0c:	7afb      	ldrb	r3, [r7, #11]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ea12:	bf00      	nop
      }
      break;
 800ea14:	e037      	b.n	800ea86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	7c1b      	ldrb	r3, [r3, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d109      	bne.n	800ea32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea26:	f107 0208 	add.w	r2, r7, #8
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	4798      	blx	r3
 800ea2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea30:	e029      	b.n	800ea86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fa11 	bl	800ee5c <USBD_CtlError>
        err++;
 800ea3a:	7afb      	ldrb	r3, [r7, #11]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ea40:	e021      	b.n	800ea86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7c1b      	ldrb	r3, [r3, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10d      	bne.n	800ea66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea52:	f107 0208 	add.w	r2, r7, #8
 800ea56:	4610      	mov	r0, r2
 800ea58:	4798      	blx	r3
 800ea5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	2207      	movs	r2, #7
 800ea62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea64:	e00f      	b.n	800ea86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f9f7 	bl	800ee5c <USBD_CtlError>
        err++;
 800ea6e:	7afb      	ldrb	r3, [r7, #11]
 800ea70:	3301      	adds	r3, #1
 800ea72:	72fb      	strb	r3, [r7, #11]
      break;
 800ea74:	e007      	b.n	800ea86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ea76:	6839      	ldr	r1, [r7, #0]
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 f9ef 	bl	800ee5c <USBD_CtlError>
      err++;
 800ea7e:	7afb      	ldrb	r3, [r7, #11]
 800ea80:	3301      	adds	r3, #1
 800ea82:	72fb      	strb	r3, [r7, #11]
      break;
 800ea84:	bf00      	nop
  }

  if (err != 0U)
 800ea86:	7afb      	ldrb	r3, [r7, #11]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d11e      	bne.n	800eaca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	88db      	ldrh	r3, [r3, #6]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d016      	beq.n	800eac2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ea94:	893b      	ldrh	r3, [r7, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00e      	beq.n	800eab8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	88da      	ldrh	r2, [r3, #6]
 800ea9e:	893b      	ldrh	r3, [r7, #8]
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	bf28      	it	cs
 800eaa4:	4613      	movcs	r3, r2
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eaaa:	893b      	ldrh	r3, [r7, #8]
 800eaac:	461a      	mov	r2, r3
 800eaae:	68f9      	ldr	r1, [r7, #12]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 fa44 	bl	800ef3e <USBD_CtlSendData>
 800eab6:	e009      	b.n	800eacc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f9ce 	bl	800ee5c <USBD_CtlError>
 800eac0:	e004      	b.n	800eacc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 fa95 	bl	800eff2 <USBD_CtlSendStatus>
 800eac8:	e000      	b.n	800eacc <USBD_GetDescriptor+0x2cc>
    return;
 800eaca:	bf00      	nop
  }
}
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop

0800ead4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	889b      	ldrh	r3, [r3, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d131      	bne.n	800eb4a <USBD_SetAddress+0x76>
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	88db      	ldrh	r3, [r3, #6]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d12d      	bne.n	800eb4a <USBD_SetAddress+0x76>
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	885b      	ldrh	r3, [r3, #2]
 800eaf2:	2b7f      	cmp	r3, #127	; 0x7f
 800eaf4:	d829      	bhi.n	800eb4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	885b      	ldrh	r3, [r3, #2]
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d104      	bne.n	800eb18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f9a3 	bl	800ee5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb16:	e01d      	b.n	800eb54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7bfa      	ldrb	r2, [r7, #15]
 800eb1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fff9 	bl	800fb1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fa61 	bl	800eff2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d004      	beq.n	800eb40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2202      	movs	r2, #2
 800eb3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3e:	e009      	b.n	800eb54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb48:	e004      	b.n	800eb54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb4a:	6839      	ldr	r1, [r7, #0]
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f985 	bl	800ee5c <USBD_CtlError>
  }
}
 800eb52:	bf00      	nop
 800eb54:	bf00      	nop
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	885b      	ldrh	r3, [r3, #2]
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	4b4c      	ldr	r3, [pc, #304]	; (800eca4 <USBD_SetConfig+0x148>)
 800eb72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb74:	4b4b      	ldr	r3, [pc, #300]	; (800eca4 <USBD_SetConfig+0x148>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d905      	bls.n	800eb88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f96c 	bl	800ee5c <USBD_CtlError>
    return USBD_FAIL;
 800eb84:	2303      	movs	r3, #3
 800eb86:	e088      	b.n	800ec9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d002      	beq.n	800eb9a <USBD_SetConfig+0x3e>
 800eb94:	2b03      	cmp	r3, #3
 800eb96:	d025      	beq.n	800ebe4 <USBD_SetConfig+0x88>
 800eb98:	e071      	b.n	800ec7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb9a:	4b42      	ldr	r3, [pc, #264]	; (800eca4 <USBD_SetConfig+0x148>)
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d01c      	beq.n	800ebdc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eba2:	4b40      	ldr	r3, [pc, #256]	; (800eca4 <USBD_SetConfig+0x148>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebac:	4b3d      	ldr	r3, [pc, #244]	; (800eca4 <USBD_SetConfig+0x148>)
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff f948 	bl	800de48 <USBD_SetClassConfig>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d004      	beq.n	800ebcc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f949 	bl	800ee5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebca:	e065      	b.n	800ec98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fa10 	bl	800eff2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2203      	movs	r2, #3
 800ebd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebda:	e05d      	b.n	800ec98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fa08 	bl	800eff2 <USBD_CtlSendStatus>
      break;
 800ebe2:	e059      	b.n	800ec98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ebe4:	4b2f      	ldr	r3, [pc, #188]	; (800eca4 <USBD_SetConfig+0x148>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d112      	bne.n	800ec12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ebf4:	4b2b      	ldr	r3, [pc, #172]	; (800eca4 <USBD_SetConfig+0x148>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebfe:	4b29      	ldr	r3, [pc, #164]	; (800eca4 <USBD_SetConfig+0x148>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7ff f93b 	bl	800de80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 f9f1 	bl	800eff2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec10:	e042      	b.n	800ec98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ec12:	4b24      	ldr	r3, [pc, #144]	; (800eca4 <USBD_SetConfig+0x148>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d02a      	beq.n	800ec76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff f929 	bl	800de80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec2e:	4b1d      	ldr	r3, [pc, #116]	; (800eca4 <USBD_SetConfig+0x148>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec38:	4b1a      	ldr	r3, [pc, #104]	; (800eca4 <USBD_SetConfig+0x148>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff f902 	bl	800de48 <USBD_SetClassConfig>
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00f      	beq.n	800ec6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f903 	bl	800ee5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7ff f90e 	bl	800de80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec6c:	e014      	b.n	800ec98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f9bf 	bl	800eff2 <USBD_CtlSendStatus>
      break;
 800ec74:	e010      	b.n	800ec98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 f9bb 	bl	800eff2 <USBD_CtlSendStatus>
      break;
 800ec7c:	e00c      	b.n	800ec98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f8eb 	bl	800ee5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec86:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <USBD_SetConfig+0x148>)
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7ff f8f7 	bl	800de80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec92:	2303      	movs	r3, #3
 800ec94:	73fb      	strb	r3, [r7, #15]
      break;
 800ec96:	bf00      	nop
  }

  return ret;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000db0 	.word	0x20000db0

0800eca8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	88db      	ldrh	r3, [r3, #6]
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d004      	beq.n	800ecc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ecba:	6839      	ldr	r1, [r7, #0]
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 f8cd 	bl	800ee5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ecc2:	e023      	b.n	800ed0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	dc02      	bgt.n	800ecd6 <USBD_GetConfig+0x2e>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dc03      	bgt.n	800ecdc <USBD_GetConfig+0x34>
 800ecd4:	e015      	b.n	800ed02 <USBD_GetConfig+0x5a>
 800ecd6:	2b03      	cmp	r3, #3
 800ecd8:	d00b      	beq.n	800ecf2 <USBD_GetConfig+0x4a>
 800ecda:	e012      	b.n	800ed02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3308      	adds	r3, #8
 800ece6:	2201      	movs	r2, #1
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f927 	bl	800ef3e <USBD_CtlSendData>
        break;
 800ecf0:	e00c      	b.n	800ed0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f91f 	bl	800ef3e <USBD_CtlSendData>
        break;
 800ed00:	e004      	b.n	800ed0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f8a9 	bl	800ee5c <USBD_CtlError>
        break;
 800ed0a:	bf00      	nop
}
 800ed0c:	bf00      	nop
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	3b01      	subs	r3, #1
 800ed28:	2b02      	cmp	r3, #2
 800ed2a:	d81e      	bhi.n	800ed6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	88db      	ldrh	r3, [r3, #6]
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d004      	beq.n	800ed3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f890 	bl	800ee5c <USBD_CtlError>
        break;
 800ed3c:	e01a      	b.n	800ed74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2201      	movs	r2, #1
 800ed42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d005      	beq.n	800ed5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	f043 0202 	orr.w	r2, r3, #2
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	330c      	adds	r3, #12
 800ed5e:	2202      	movs	r2, #2
 800ed60:	4619      	mov	r1, r3
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 f8eb 	bl	800ef3e <USBD_CtlSendData>
      break;
 800ed68:	e004      	b.n	800ed74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f875 	bl	800ee5c <USBD_CtlError>
      break;
 800ed72:	bf00      	nop
  }
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	885b      	ldrh	r3, [r3, #2]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d106      	bne.n	800ed9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f92b 	bl	800eff2 <USBD_CtlSendStatus>
  }
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	3b01      	subs	r3, #1
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d80b      	bhi.n	800edd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	885b      	ldrh	r3, [r3, #2]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d10c      	bne.n	800edde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f910 	bl	800eff2 <USBD_CtlSendStatus>
      }
      break;
 800edd2:	e004      	b.n	800edde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f840 	bl	800ee5c <USBD_CtlError>
      break;
 800eddc:	e000      	b.n	800ede0 <USBD_ClrFeature+0x3c>
      break;
 800edde:	bf00      	nop
  }
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	781a      	ldrb	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3301      	adds	r3, #1
 800ee02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	781a      	ldrb	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff fabb 	bl	800e38e <SWAPBYTE>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	3301      	adds	r3, #1
 800ee24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff faae 	bl	800e38e <SWAPBYTE>
 800ee32:	4603      	mov	r3, r0
 800ee34:	461a      	mov	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	3301      	adds	r3, #1
 800ee44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff faa1 	bl	800e38e <SWAPBYTE>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	80da      	strh	r2, [r3, #6]
}
 800ee54:	bf00      	nop
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee66:	2180      	movs	r1, #128	; 0x80
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fdbf 	bl	800f9ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee6e:	2100      	movs	r1, #0
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fdbb 	bl	800f9ec <USBD_LL_StallEP>
}
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b086      	sub	sp, #24
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	60f8      	str	r0, [r7, #12]
 800ee86:	60b9      	str	r1, [r7, #8]
 800ee88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d036      	beq.n	800ef02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee98:	6938      	ldr	r0, [r7, #16]
 800ee9a:	f000 f836 	bl	800ef0a <USBD_GetLen>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	3301      	adds	r3, #1
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	7812      	ldrb	r2, [r2, #0]
 800eeb6:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
 800eeba:	3301      	adds	r3, #1
 800eebc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	4413      	add	r3, r2
 800eec4:	2203      	movs	r2, #3
 800eec6:	701a      	strb	r2, [r3, #0]
  idx++;
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
 800eeca:	3301      	adds	r3, #1
 800eecc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eece:	e013      	b.n	800eef8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eed0:	7dfb      	ldrb	r3, [r7, #23]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	4413      	add	r3, r2
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	7812      	ldrb	r2, [r2, #0]
 800eeda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	3301      	adds	r3, #1
 800eee0:	613b      	str	r3, [r7, #16]
    idx++;
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
 800eee4:	3301      	adds	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eee8:	7dfb      	ldrb	r3, [r7, #23]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	4413      	add	r3, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	701a      	strb	r2, [r3, #0]
    idx++;
 800eef2:	7dfb      	ldrb	r3, [r7, #23]
 800eef4:	3301      	adds	r3, #1
 800eef6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e7      	bne.n	800eed0 <USBD_GetString+0x52>
 800ef00:	e000      	b.n	800ef04 <USBD_GetString+0x86>
    return;
 800ef02:	bf00      	nop
  }
}
 800ef04:	3718      	adds	r7, #24
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	b085      	sub	sp, #20
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef12:	2300      	movs	r3, #0
 800ef14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef1a:	e005      	b.n	800ef28 <USBD_GetLen+0x1e>
  {
    len++;
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	3301      	adds	r3, #1
 800ef26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1f5      	bne.n	800ef1c <USBD_GetLen+0x12>
  }

  return len;
 800ef30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3714      	adds	r7, #20
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	60f8      	str	r0, [r7, #12]
 800ef46:	60b9      	str	r1, [r7, #8]
 800ef48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68ba      	ldr	r2, [r7, #8]
 800ef62:	2100      	movs	r1, #0
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f000 fe0f 	bl	800fb88 <USBD_LL_Transmit>

  return USBD_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	2100      	movs	r1, #0
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f000 fdfe 	bl	800fb88 <USBD_LL_Transmit>

  return USBD_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b084      	sub	sp, #16
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	60f8      	str	r0, [r7, #12]
 800ef9e:	60b9      	str	r1, [r7, #8]
 800efa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2203      	movs	r2, #3
 800efa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	2100      	movs	r1, #0
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 fe19 	bl	800fbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	2100      	movs	r1, #0
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f000 fe08 	bl	800fbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b082      	sub	sp, #8
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2204      	movs	r2, #4
 800effe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f002:	2300      	movs	r3, #0
 800f004:	2200      	movs	r2, #0
 800f006:	2100      	movs	r1, #0
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fdbd 	bl	800fb88 <USBD_LL_Transmit>

  return USBD_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2205      	movs	r2, #5
 800f024:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f028:	2300      	movs	r3, #0
 800f02a:	2200      	movs	r2, #0
 800f02c:	2100      	movs	r1, #0
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fde2 	bl	800fbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
	...

0800f040 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f040:	b480      	push	{r7}
 800f042:	b087      	sub	sp, #28
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	4613      	mov	r3, r2
 800f04c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f04e:	2301      	movs	r3, #1
 800f050:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f056:	4b1f      	ldr	r3, [pc, #124]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f058:	7a5b      	ldrb	r3, [r3, #9]
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d131      	bne.n	800f0c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f060:	4b1c      	ldr	r3, [pc, #112]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f062:	7a5b      	ldrb	r3, [r3, #9]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	461a      	mov	r2, r3
 800f068:	4b1a      	ldr	r3, [pc, #104]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f06a:	2100      	movs	r1, #0
 800f06c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f06e:	4b19      	ldr	r3, [pc, #100]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f070:	7a5b      	ldrb	r3, [r3, #9]
 800f072:	b2db      	uxtb	r3, r3
 800f074:	4a17      	ldr	r2, [pc, #92]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4413      	add	r3, r2
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f07e:	4b15      	ldr	r3, [pc, #84]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f080:	7a5b      	ldrb	r3, [r3, #9]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	461a      	mov	r2, r3
 800f086:	4b13      	ldr	r3, [pc, #76]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f088:	4413      	add	r3, r2
 800f08a:	79fa      	ldrb	r2, [r7, #7]
 800f08c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f08e:	4b11      	ldr	r3, [pc, #68]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f090:	7a5b      	ldrb	r3, [r3, #9]
 800f092:	b2db      	uxtb	r3, r3
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	b2d1      	uxtb	r1, r2
 800f098:	4a0e      	ldr	r2, [pc, #56]	; (800f0d4 <FATFS_LinkDriverEx+0x94>)
 800f09a:	7251      	strb	r1, [r2, #9]
 800f09c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f09e:	7dbb      	ldrb	r3, [r7, #22]
 800f0a0:	3330      	adds	r3, #48	; 0x30
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	223a      	movs	r2, #58	; 0x3a
 800f0ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	3302      	adds	r3, #2
 800f0b4:	222f      	movs	r2, #47	; 0x2f
 800f0b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	3303      	adds	r3, #3
 800f0bc:	2200      	movs	r2, #0
 800f0be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	20000db4 	.word	0x20000db4

0800f0d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7ff ffaa 	bl	800f040 <FATFS_LinkDriverEx>
 800f0ec:	4603      	mov	r3, r0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
	...

0800f0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4912      	ldr	r1, [pc, #72]	; (800f148 <MX_USB_DEVICE_Init+0x50>)
 800f100:	4812      	ldr	r0, [pc, #72]	; (800f14c <MX_USB_DEVICE_Init+0x54>)
 800f102:	f7fe fe33 	bl	800dd6c <USBD_Init>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f10c:	f7f2 fcac 	bl	8001a68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f110:	490f      	ldr	r1, [pc, #60]	; (800f150 <MX_USB_DEVICE_Init+0x58>)
 800f112:	480e      	ldr	r0, [pc, #56]	; (800f14c <MX_USB_DEVICE_Init+0x54>)
 800f114:	f7fe fe5a 	bl	800ddcc <USBD_RegisterClass>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f11e:	f7f2 fca3 	bl	8001a68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f122:	490c      	ldr	r1, [pc, #48]	; (800f154 <MX_USB_DEVICE_Init+0x5c>)
 800f124:	4809      	ldr	r0, [pc, #36]	; (800f14c <MX_USB_DEVICE_Init+0x54>)
 800f126:	f7fe fd7b 	bl	800dc20 <USBD_CDC_RegisterInterface>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d001      	beq.n	800f134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f130:	f7f2 fc9a 	bl	8001a68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f134:	4805      	ldr	r0, [pc, #20]	; (800f14c <MX_USB_DEVICE_Init+0x54>)
 800f136:	f7fe fe70 	bl	800de1a <USBD_Start>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f140:	f7f2 fc92 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f144:	bf00      	nop
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20000138 	.word	0x20000138
 800f14c:	20000dc0 	.word	0x20000dc0
 800f150:	20000020 	.word	0x20000020
 800f154:	20000124 	.word	0x20000124

0800f158 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f15c:	2200      	movs	r2, #0
 800f15e:	4905      	ldr	r1, [pc, #20]	; (800f174 <CDC_Init_FS+0x1c>)
 800f160:	4805      	ldr	r0, [pc, #20]	; (800f178 <CDC_Init_FS+0x20>)
 800f162:	f7fe fd72 	bl	800dc4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f166:	4905      	ldr	r1, [pc, #20]	; (800f17c <CDC_Init_FS+0x24>)
 800f168:	4803      	ldr	r0, [pc, #12]	; (800f178 <CDC_Init_FS+0x20>)
 800f16a:	f7fe fd8c 	bl	800dc86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f16e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f170:	4618      	mov	r0, r3
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20001890 	.word	0x20001890
 800f178:	20000dc0 	.word	0x20000dc0
 800f17c:	20001090 	.word	0x20001090

0800f180 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f180:	b480      	push	{r7}
 800f182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f186:	4618      	mov	r0, r3
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	6039      	str	r1, [r7, #0]
 800f19a:	71fb      	strb	r3, [r7, #7]
 800f19c:	4613      	mov	r3, r2
 800f19e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	2b23      	cmp	r3, #35	; 0x23
 800f1a4:	d84a      	bhi.n	800f23c <CDC_Control_FS+0xac>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <CDC_Control_FS+0x1c>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f23d 	.word	0x0800f23d
 800f1b0:	0800f23d 	.word	0x0800f23d
 800f1b4:	0800f23d 	.word	0x0800f23d
 800f1b8:	0800f23d 	.word	0x0800f23d
 800f1bc:	0800f23d 	.word	0x0800f23d
 800f1c0:	0800f23d 	.word	0x0800f23d
 800f1c4:	0800f23d 	.word	0x0800f23d
 800f1c8:	0800f23d 	.word	0x0800f23d
 800f1cc:	0800f23d 	.word	0x0800f23d
 800f1d0:	0800f23d 	.word	0x0800f23d
 800f1d4:	0800f23d 	.word	0x0800f23d
 800f1d8:	0800f23d 	.word	0x0800f23d
 800f1dc:	0800f23d 	.word	0x0800f23d
 800f1e0:	0800f23d 	.word	0x0800f23d
 800f1e4:	0800f23d 	.word	0x0800f23d
 800f1e8:	0800f23d 	.word	0x0800f23d
 800f1ec:	0800f23d 	.word	0x0800f23d
 800f1f0:	0800f23d 	.word	0x0800f23d
 800f1f4:	0800f23d 	.word	0x0800f23d
 800f1f8:	0800f23d 	.word	0x0800f23d
 800f1fc:	0800f23d 	.word	0x0800f23d
 800f200:	0800f23d 	.word	0x0800f23d
 800f204:	0800f23d 	.word	0x0800f23d
 800f208:	0800f23d 	.word	0x0800f23d
 800f20c:	0800f23d 	.word	0x0800f23d
 800f210:	0800f23d 	.word	0x0800f23d
 800f214:	0800f23d 	.word	0x0800f23d
 800f218:	0800f23d 	.word	0x0800f23d
 800f21c:	0800f23d 	.word	0x0800f23d
 800f220:	0800f23d 	.word	0x0800f23d
 800f224:	0800f23d 	.word	0x0800f23d
 800f228:	0800f23d 	.word	0x0800f23d
 800f22c:	0800f23d 	.word	0x0800f23d
 800f230:	0800f23d 	.word	0x0800f23d
 800f234:	0800f23d 	.word	0x0800f23d
 800f238:	0800f23d 	.word	0x0800f23d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f23c:	bf00      	nop
  }

  return (USBD_OK);
 800f23e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	4805      	ldr	r0, [pc, #20]	; (800f270 <CDC_Receive_FS+0x24>)
 800f25a:	f7fe fd14 	bl	800dc86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f25e:	4804      	ldr	r0, [pc, #16]	; (800f270 <CDC_Receive_FS+0x24>)
 800f260:	f7fe fd5a 	bl	800dd18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f264:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f266:	4618      	mov	r0, r3
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	20000dc0 	.word	0x20000dc0

0800f274 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	460b      	mov	r3, r1
 800f27e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f280:	2300      	movs	r3, #0
 800f282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f284:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <CDC_Transmit_FS+0x48>)
 800f286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f28a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f296:	2301      	movs	r3, #1
 800f298:	e00b      	b.n	800f2b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f29a:	887b      	ldrh	r3, [r7, #2]
 800f29c:	461a      	mov	r2, r3
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	4806      	ldr	r0, [pc, #24]	; (800f2bc <CDC_Transmit_FS+0x48>)
 800f2a2:	f7fe fcd2 	bl	800dc4a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f2a6:	4805      	ldr	r0, [pc, #20]	; (800f2bc <CDC_Transmit_FS+0x48>)
 800f2a8:	f7fe fd06 	bl	800dcb8 <USBD_CDC_TransmitPacket>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20000dc0 	.word	0x20000dc0

0800f2c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b087      	sub	sp, #28
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f2d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	371c      	adds	r7, #28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2212      	movs	r2, #18
 800f2f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f2f6:	4b03      	ldr	r3, [pc, #12]	; (800f304 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	20000154 	.word	0x20000154

0800f308 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2204      	movs	r2, #4
 800f318:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f31a:	4b03      	ldr	r3, [pc, #12]	; (800f328 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	20000168 	.word	0x20000168

0800f32c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	6039      	str	r1, [r7, #0]
 800f336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4907      	ldr	r1, [pc, #28]	; (800f360 <USBD_FS_ProductStrDescriptor+0x34>)
 800f342:	4808      	ldr	r0, [pc, #32]	; (800f364 <USBD_FS_ProductStrDescriptor+0x38>)
 800f344:	f7ff fd9b 	bl	800ee7e <USBD_GetString>
 800f348:	e004      	b.n	800f354 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4904      	ldr	r1, [pc, #16]	; (800f360 <USBD_FS_ProductStrDescriptor+0x34>)
 800f34e:	4805      	ldr	r0, [pc, #20]	; (800f364 <USBD_FS_ProductStrDescriptor+0x38>)
 800f350:	f7ff fd95 	bl	800ee7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20002090 	.word	0x20002090
 800f364:	0801288c 	.word	0x0801288c

0800f368 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	4904      	ldr	r1, [pc, #16]	; (800f388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f378:	4804      	ldr	r0, [pc, #16]	; (800f38c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f37a:	f7ff fd80 	bl	800ee7e <USBD_GetString>
  return USBD_StrDesc;
 800f37e:	4b02      	ldr	r3, [pc, #8]	; (800f388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f380:	4618      	mov	r0, r3
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20002090 	.word	0x20002090
 800f38c:	080128a4 	.word	0x080128a4

0800f390 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	221a      	movs	r2, #26
 800f3a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3a2:	f000 f843 	bl	800f42c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f3a6:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2000016c 	.word	0x2000016c

0800f3b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	6039      	str	r1, [r7, #0]
 800f3be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d105      	bne.n	800f3d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	4907      	ldr	r1, [pc, #28]	; (800f3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3ca:	4808      	ldr	r0, [pc, #32]	; (800f3ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3cc:	f7ff fd57 	bl	800ee7e <USBD_GetString>
 800f3d0:	e004      	b.n	800f3dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3d2:	683a      	ldr	r2, [r7, #0]
 800f3d4:	4904      	ldr	r1, [pc, #16]	; (800f3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3d6:	4805      	ldr	r0, [pc, #20]	; (800f3ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3d8:	f7ff fd51 	bl	800ee7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3dc:	4b02      	ldr	r3, [pc, #8]	; (800f3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20002090 	.word	0x20002090
 800f3ec:	080128b8 	.word	0x080128b8

0800f3f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d105      	bne.n	800f40e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	4907      	ldr	r1, [pc, #28]	; (800f424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f406:	4808      	ldr	r0, [pc, #32]	; (800f428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f408:	f7ff fd39 	bl	800ee7e <USBD_GetString>
 800f40c:	e004      	b.n	800f418 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	4904      	ldr	r1, [pc, #16]	; (800f424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f412:	4805      	ldr	r0, [pc, #20]	; (800f428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f414:	f7ff fd33 	bl	800ee7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20002090 	.word	0x20002090
 800f428:	080128c4 	.word	0x080128c4

0800f42c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f432:	4b0f      	ldr	r3, [pc, #60]	; (800f470 <Get_SerialNum+0x44>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <Get_SerialNum+0x48>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f43e:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <Get_SerialNum+0x4c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d009      	beq.n	800f466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f452:	2208      	movs	r2, #8
 800f454:	4909      	ldr	r1, [pc, #36]	; (800f47c <Get_SerialNum+0x50>)
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 f814 	bl	800f484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f45c:	2204      	movs	r2, #4
 800f45e:	4908      	ldr	r1, [pc, #32]	; (800f480 <Get_SerialNum+0x54>)
 800f460:	68b8      	ldr	r0, [r7, #8]
 800f462:	f000 f80f 	bl	800f484 <IntToUnicode>
  }
}
 800f466:	bf00      	nop
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	1fff7590 	.word	0x1fff7590
 800f474:	1fff7594 	.word	0x1fff7594
 800f478:	1fff7598 	.word	0x1fff7598
 800f47c:	2000016e 	.word	0x2000016e
 800f480:	2000017e 	.word	0x2000017e

0800f484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f496:	2300      	movs	r3, #0
 800f498:	75fb      	strb	r3, [r7, #23]
 800f49a:	e027      	b.n	800f4ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	0f1b      	lsrs	r3, r3, #28
 800f4a0:	2b09      	cmp	r3, #9
 800f4a2:	d80b      	bhi.n	800f4bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	0f1b      	lsrs	r3, r3, #28
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3230      	adds	r2, #48	; 0x30
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	e00a      	b.n	800f4d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	0f1b      	lsrs	r3, r3, #28
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3237      	adds	r2, #55	; 0x37
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	3301      	adds	r3, #1
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	75fb      	strb	r3, [r7, #23]
 800f4ec:	7dfa      	ldrb	r2, [r7, #23]
 800f4ee:	79fb      	ldrb	r3, [r7, #7]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d3d3      	bcc.n	800f49c <IntToUnicode+0x18>
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
	...

0800f504 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b0b0      	sub	sp, #192	; 0xc0
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f50c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f510:	2200      	movs	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	605a      	str	r2, [r3, #4]
 800f516:	609a      	str	r2, [r3, #8]
 800f518:	60da      	str	r2, [r3, #12]
 800f51a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f51c:	f107 0318 	add.w	r3, r7, #24
 800f520:	2294      	movs	r2, #148	; 0x94
 800f522:	2100      	movs	r1, #0
 800f524:	4618      	mov	r0, r3
 800f526:	f000 fc0b 	bl	800fd40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f532:	d163      	bne.n	800f5fc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f538:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f53a:	2300      	movs	r3, #0
 800f53c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f540:	f107 0318 	add.w	r3, r7, #24
 800f544:	4618      	mov	r0, r3
 800f546:	f7f6 f891 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f550:	f7f2 fa8a 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f554:	4b2b      	ldr	r3, [pc, #172]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f558:	4a2a      	ldr	r2, [pc, #168]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f55a:	f043 0301 	orr.w	r3, r3, #1
 800f55e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f560:	4b28      	ldr	r3, [pc, #160]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f56c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f574:	2302      	movs	r3, #2
 800f576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f580:	2303      	movs	r3, #3
 800f582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f586:	230a      	movs	r3, #10
 800f588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f58c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f590:	4619      	mov	r1, r3
 800f592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f596:	f7f3 fbb5 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f59a:	4b1a      	ldr	r3, [pc, #104]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f59e:	4a19      	ldr	r2, [pc, #100]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f5a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f5a6:	4b17      	ldr	r3, [pc, #92]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f5ae:	613b      	str	r3, [r7, #16]
 800f5b0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f5b2:	4b14      	ldr	r3, [pc, #80]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d114      	bne.n	800f5e8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5be:	4b11      	ldr	r3, [pc, #68]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5c2:	4a10      	ldr	r2, [pc, #64]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5c8:	6593      	str	r3, [r2, #88]	; 0x58
 800f5ca:	4b0e      	ldr	r3, [pc, #56]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5d2:	60fb      	str	r3, [r7, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f5d6:	f7f5 f935 	bl	8004844 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5da:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5de:	4a09      	ldr	r2, [pc, #36]	; (800f604 <HAL_PCD_MspInit+0x100>)
 800f5e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5e4:	6593      	str	r3, [r2, #88]	; 0x58
 800f5e6:	e001      	b.n	800f5ec <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f5e8:	f7f5 f92c 	bl	8004844 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	2043      	movs	r0, #67	; 0x43
 800f5f2:	f7f3 f822 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f5f6:	2043      	movs	r0, #67	; 0x43
 800f5f8:	f7f3 f83b 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f5fc:	bf00      	nop
 800f5fe:	37c0      	adds	r7, #192	; 0xc0
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	40021000 	.word	0x40021000

0800f608 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f61c:	4619      	mov	r1, r3
 800f61e:	4610      	mov	r0, r2
 800f620:	f7fe fc46 	bl	800deb0 <USBD_LL_SetupStage>
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f63e:	78fa      	ldrb	r2, [r7, #3]
 800f640:	6879      	ldr	r1, [r7, #4]
 800f642:	4613      	mov	r3, r2
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	440b      	add	r3, r1
 800f64c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	78fb      	ldrb	r3, [r7, #3]
 800f654:	4619      	mov	r1, r3
 800f656:	f7fe fc80 	bl	800df5a <USBD_LL_DataOutStage>
}
 800f65a:	bf00      	nop
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b082      	sub	sp, #8
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	460b      	mov	r3, r1
 800f66c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f674:	78fa      	ldrb	r2, [r7, #3]
 800f676:	6879      	ldr	r1, [r7, #4]
 800f678:	4613      	mov	r3, r2
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4413      	add	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	440b      	add	r3, r1
 800f682:	334c      	adds	r3, #76	; 0x4c
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	78fb      	ldrb	r3, [r7, #3]
 800f688:	4619      	mov	r1, r3
 800f68a:	f7fe fcc9 	bl	800e020 <USBD_LL_DataInStage>
}
 800f68e:	bf00      	nop
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b082      	sub	sp, #8
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fe fddd 	bl	800e264 <USBD_LL_SOF>
}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d001      	beq.n	800f6ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f6c6:	f7f2 f9cf 	bl	8001a68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6d0:	7bfa      	ldrb	r2, [r7, #15]
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fe fd87 	bl	800e1e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fe fd33 	bl	800e14c <USBD_LL_Reset>
}
 800f6e6:	bf00      	nop
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	6812      	ldr	r2, [r2, #0]
 800f706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f716:	4618      	mov	r0, r3
 800f718:	f7fe fd76 	bl	800e208 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a1b      	ldr	r3, [r3, #32]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d005      	beq.n	800f730 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f724:	4b04      	ldr	r3, [pc, #16]	; (800f738 <HAL_PCD_SuspendCallback+0x48>)
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	4a03      	ldr	r2, [pc, #12]	; (800f738 <HAL_PCD_SuspendCallback+0x48>)
 800f72a:	f043 0306 	orr.w	r3, r3, #6
 800f72e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	e000ed00 	.word	0xe000ed00

0800f73c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	6812      	ldr	r2, [r2, #0]
 800f752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f756:	f023 0301 	bic.w	r3, r3, #1
 800f75a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d007      	beq.n	800f774 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f764:	4b08      	ldr	r3, [pc, #32]	; (800f788 <HAL_PCD_ResumeCallback+0x4c>)
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	4a07      	ldr	r2, [pc, #28]	; (800f788 <HAL_PCD_ResumeCallback+0x4c>)
 800f76a:	f023 0306 	bic.w	r3, r3, #6
 800f76e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f770:	f000 faa6 	bl	800fcc0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fe fd5a 	bl	800e234 <USBD_LL_Resume>
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	e000ed00 	.word	0xe000ed00

0800f78c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	460b      	mov	r3, r1
 800f796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f79e:	78fa      	ldrb	r2, [r7, #3]
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fe fda6 	bl	800e2f4 <USBD_LL_IsoOUTIncomplete>
}
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7c2:	78fa      	ldrb	r2, [r7, #3]
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fe fd6e 	bl	800e2a8 <USBD_LL_IsoINIncomplete>
}
 800f7cc:	bf00      	nop
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fe fdac 	bl	800e340 <USBD_LL_DevConnected>
}
 800f7e8:	bf00      	nop
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fe fda9 	bl	800e356 <USBD_LL_DevDisconnected>
}
 800f804:	bf00      	nop
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d139      	bne.n	800f890 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f81c:	4a1f      	ldr	r2, [pc, #124]	; (800f89c <USBD_LL_Init+0x90>)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a1d      	ldr	r2, [pc, #116]	; (800f89c <USBD_LL_Init+0x90>)
 800f828:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f82c:	4b1b      	ldr	r3, [pc, #108]	; (800f89c <USBD_LL_Init+0x90>)
 800f82e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f832:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f834:	4b19      	ldr	r3, [pc, #100]	; (800f89c <USBD_LL_Init+0x90>)
 800f836:	2206      	movs	r2, #6
 800f838:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f83a:	4b18      	ldr	r3, [pc, #96]	; (800f89c <USBD_LL_Init+0x90>)
 800f83c:	2202      	movs	r2, #2
 800f83e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f840:	4b16      	ldr	r3, [pc, #88]	; (800f89c <USBD_LL_Init+0x90>)
 800f842:	2200      	movs	r2, #0
 800f844:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f846:	4b15      	ldr	r3, [pc, #84]	; (800f89c <USBD_LL_Init+0x90>)
 800f848:	2200      	movs	r2, #0
 800f84a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f84c:	4b13      	ldr	r3, [pc, #76]	; (800f89c <USBD_LL_Init+0x90>)
 800f84e:	2200      	movs	r2, #0
 800f850:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f852:	4b12      	ldr	r3, [pc, #72]	; (800f89c <USBD_LL_Init+0x90>)
 800f854:	2200      	movs	r2, #0
 800f856:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f858:	4b10      	ldr	r3, [pc, #64]	; (800f89c <USBD_LL_Init+0x90>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <USBD_LL_Init+0x90>)
 800f860:	2200      	movs	r2, #0
 800f862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f864:	480d      	ldr	r0, [pc, #52]	; (800f89c <USBD_LL_Init+0x90>)
 800f866:	f7f3 fd5d 	bl	8003324 <HAL_PCD_Init>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d001      	beq.n	800f874 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f870:	f7f2 f8fa 	bl	8001a68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f874:	2180      	movs	r1, #128	; 0x80
 800f876:	4809      	ldr	r0, [pc, #36]	; (800f89c <USBD_LL_Init+0x90>)
 800f878:	f7f4 fedf 	bl	800463a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f87c:	2240      	movs	r2, #64	; 0x40
 800f87e:	2100      	movs	r1, #0
 800f880:	4806      	ldr	r0, [pc, #24]	; (800f89c <USBD_LL_Init+0x90>)
 800f882:	f7f4 fe93 	bl	80045ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f886:	2280      	movs	r2, #128	; 0x80
 800f888:	2101      	movs	r1, #1
 800f88a:	4804      	ldr	r0, [pc, #16]	; (800f89c <USBD_LL_Init+0x90>)
 800f88c:	f7f4 fe8e 	bl	80045ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	20002290 	.word	0x20002290

0800f8a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7f3 fe58 	bl	800356c <HAL_PCD_Start>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d816      	bhi.n	800f8f4 <USBD_LL_Start+0x54>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <USBD_LL_Start+0x2c>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8dd 	.word	0x0800f8dd
 800f8d0:	0800f8e3 	.word	0x0800f8e3
 800f8d4:	0800f8e9 	.word	0x0800f8e9
 800f8d8:	0800f8ef 	.word	0x0800f8ef
    case HAL_OK :
      usb_status = USBD_OK;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	73fb      	strb	r3, [r7, #15]
    break;
 800f8e0:	e00b      	b.n	800f8fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f8e6:	e008      	b.n	800f8fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ec:	e005      	b.n	800f8fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f2:	e002      	b.n	800f8fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f8f4:	2303      	movs	r3, #3
 800f8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f8:	bf00      	nop
  }
  return usb_status;
 800f8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	4608      	mov	r0, r1
 800f90e:	4611      	mov	r1, r2
 800f910:	461a      	mov	r2, r3
 800f912:	4603      	mov	r3, r0
 800f914:	70fb      	strb	r3, [r7, #3]
 800f916:	460b      	mov	r3, r1
 800f918:	70bb      	strb	r3, [r7, #2]
 800f91a:	4613      	mov	r3, r2
 800f91c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f91e:	2300      	movs	r3, #0
 800f920:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f922:	2300      	movs	r3, #0
 800f924:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f92c:	78bb      	ldrb	r3, [r7, #2]
 800f92e:	883a      	ldrh	r2, [r7, #0]
 800f930:	78f9      	ldrb	r1, [r7, #3]
 800f932:	f7f4 fb02 	bl	8003f3a <HAL_PCD_EP_Open>
 800f936:	4603      	mov	r3, r0
 800f938:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f93a:	7bbb      	ldrb	r3, [r7, #14]
 800f93c:	2b03      	cmp	r3, #3
 800f93e:	d817      	bhi.n	800f970 <USBD_LL_OpenEP+0x6c>
 800f940:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <USBD_LL_OpenEP+0x44>)
 800f942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f946:	bf00      	nop
 800f948:	0800f959 	.word	0x0800f959
 800f94c:	0800f95f 	.word	0x0800f95f
 800f950:	0800f965 	.word	0x0800f965
 800f954:	0800f96b 	.word	0x0800f96b
    case HAL_OK :
      usb_status = USBD_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	73fb      	strb	r3, [r7, #15]
    break;
 800f95c:	e00b      	b.n	800f976 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f95e:	2303      	movs	r3, #3
 800f960:	73fb      	strb	r3, [r7, #15]
    break;
 800f962:	e008      	b.n	800f976 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f964:	2301      	movs	r3, #1
 800f966:	73fb      	strb	r3, [r7, #15]
    break;
 800f968:	e005      	b.n	800f976 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f96a:	2303      	movs	r3, #3
 800f96c:	73fb      	strb	r3, [r7, #15]
    break;
 800f96e:	e002      	b.n	800f976 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f970:	2303      	movs	r3, #3
 800f972:	73fb      	strb	r3, [r7, #15]
    break;
 800f974:	bf00      	nop
  }
  return usb_status;
 800f976:	7bfb      	ldrb	r3, [r7, #15]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f99a:	78fa      	ldrb	r2, [r7, #3]
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f4 fb33 	bl	800400a <HAL_PCD_EP_Close>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	2b03      	cmp	r3, #3
 800f9ac:	d816      	bhi.n	800f9dc <USBD_LL_CloseEP+0x5c>
 800f9ae:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <USBD_LL_CloseEP+0x34>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800f9c5 	.word	0x0800f9c5
 800f9b8:	0800f9cb 	.word	0x0800f9cb
 800f9bc:	0800f9d1 	.word	0x0800f9d1
 800f9c0:	0800f9d7 	.word	0x0800f9d7
    case HAL_OK :
      usb_status = USBD_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9c8:	e00b      	b.n	800f9e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f9ce:	e008      	b.n	800f9e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d4:	e005      	b.n	800f9e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f9da:	e002      	b.n	800f9e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f9dc:	2303      	movs	r3, #3
 800f9de:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e0:	bf00      	nop
  }
  return usb_status;
 800f9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f4 fbda 	bl	80041c4 <HAL_PCD_EP_SetStall>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa14:	7bbb      	ldrb	r3, [r7, #14]
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d816      	bhi.n	800fa48 <USBD_LL_StallEP+0x5c>
 800fa1a:	a201      	add	r2, pc, #4	; (adr r2, 800fa20 <USBD_LL_StallEP+0x34>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa31 	.word	0x0800fa31
 800fa24:	0800fa37 	.word	0x0800fa37
 800fa28:	0800fa3d 	.word	0x0800fa3d
 800fa2c:	0800fa43 	.word	0x0800fa43
    case HAL_OK :
      usb_status = USBD_OK;
 800fa30:	2300      	movs	r3, #0
 800fa32:	73fb      	strb	r3, [r7, #15]
    break;
 800fa34:	e00b      	b.n	800fa4e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa36:	2303      	movs	r3, #3
 800fa38:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3a:	e008      	b.n	800fa4e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa40:	e005      	b.n	800fa4e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa42:	2303      	movs	r3, #3
 800fa44:	73fb      	strb	r3, [r7, #15]
    break;
 800fa46:	e002      	b.n	800fa4e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa48:	2303      	movs	r3, #3
 800fa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4c:	bf00      	nop
  }
  return usb_status;
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	460b      	mov	r3, r1
 800fa62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa72:	78fa      	ldrb	r2, [r7, #3]
 800fa74:	4611      	mov	r1, r2
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f4 fc06 	bl	8004288 <HAL_PCD_EP_ClrStall>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa80:	7bbb      	ldrb	r3, [r7, #14]
 800fa82:	2b03      	cmp	r3, #3
 800fa84:	d816      	bhi.n	800fab4 <USBD_LL_ClearStallEP+0x5c>
 800fa86:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <USBD_LL_ClearStallEP+0x34>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800fa9d 	.word	0x0800fa9d
 800fa90:	0800faa3 	.word	0x0800faa3
 800fa94:	0800faa9 	.word	0x0800faa9
 800fa98:	0800faaf 	.word	0x0800faaf
    case HAL_OK :
      usb_status = USBD_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]
    break;
 800faa0:	e00b      	b.n	800faba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faa2:	2303      	movs	r3, #3
 800faa4:	73fb      	strb	r3, [r7, #15]
    break;
 800faa6:	e008      	b.n	800faba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800faa8:	2301      	movs	r3, #1
 800faaa:	73fb      	strb	r3, [r7, #15]
    break;
 800faac:	e005      	b.n	800faba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800faae:	2303      	movs	r3, #3
 800fab0:	73fb      	strb	r3, [r7, #15]
    break;
 800fab2:	e002      	b.n	800faba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fab4:	2303      	movs	r3, #3
 800fab6:	73fb      	strb	r3, [r7, #15]
    break;
 800fab8:	bf00      	nop
  }
  return usb_status;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	da0b      	bge.n	800faf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fae0:	78fb      	ldrb	r3, [r7, #3]
 800fae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fae6:	68f9      	ldr	r1, [r7, #12]
 800fae8:	4613      	mov	r3, r2
 800faea:	00db      	lsls	r3, r3, #3
 800faec:	4413      	add	r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	440b      	add	r3, r1
 800faf2:	333e      	adds	r3, #62	; 0x3e
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	e00b      	b.n	800fb10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800faf8:	78fb      	ldrb	r3, [r7, #3]
 800fafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fafe:	68f9      	ldr	r1, [r7, #12]
 800fb00:	4613      	mov	r3, r2
 800fb02:	00db      	lsls	r3, r3, #3
 800fb04:	4413      	add	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	440b      	add	r3, r1
 800fb0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3714      	adds	r7, #20
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	460b      	mov	r3, r1
 800fb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb36:	78fa      	ldrb	r2, [r7, #3]
 800fb38:	4611      	mov	r1, r2
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f4 f9d8 	bl	8003ef0 <HAL_PCD_SetAddress>
 800fb40:	4603      	mov	r3, r0
 800fb42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fb44:	7bbb      	ldrb	r3, [r7, #14]
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d816      	bhi.n	800fb78 <USBD_LL_SetUSBAddress+0x5c>
 800fb4a:	a201      	add	r2, pc, #4	; (adr r2, 800fb50 <USBD_LL_SetUSBAddress+0x34>)
 800fb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb50:	0800fb61 	.word	0x0800fb61
 800fb54:	0800fb67 	.word	0x0800fb67
 800fb58:	0800fb6d 	.word	0x0800fb6d
 800fb5c:	0800fb73 	.word	0x0800fb73
    case HAL_OK :
      usb_status = USBD_OK;
 800fb60:	2300      	movs	r3, #0
 800fb62:	73fb      	strb	r3, [r7, #15]
    break;
 800fb64:	e00b      	b.n	800fb7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb66:	2303      	movs	r3, #3
 800fb68:	73fb      	strb	r3, [r7, #15]
    break;
 800fb6a:	e008      	b.n	800fb7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb70:	e005      	b.n	800fb7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb72:	2303      	movs	r3, #3
 800fb74:	73fb      	strb	r3, [r7, #15]
    break;
 800fb76:	e002      	b.n	800fb7e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb7c:	bf00      	nop
  }
  return usb_status;
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	607a      	str	r2, [r7, #4]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	460b      	mov	r3, r1
 800fb96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fba6:	7af9      	ldrb	r1, [r7, #11]
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	f7f4 facd 	bl	800414a <HAL_PCD_EP_Transmit>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fbb4:	7dbb      	ldrb	r3, [r7, #22]
 800fbb6:	2b03      	cmp	r3, #3
 800fbb8:	d816      	bhi.n	800fbe8 <USBD_LL_Transmit+0x60>
 800fbba:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <USBD_LL_Transmit+0x38>)
 800fbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc0:	0800fbd1 	.word	0x0800fbd1
 800fbc4:	0800fbd7 	.word	0x0800fbd7
 800fbc8:	0800fbdd 	.word	0x0800fbdd
 800fbcc:	0800fbe3 	.word	0x0800fbe3
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	75fb      	strb	r3, [r7, #23]
    break;
 800fbd4:	e00b      	b.n	800fbee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	75fb      	strb	r3, [r7, #23]
    break;
 800fbda:	e008      	b.n	800fbee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe0:	e005      	b.n	800fbee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe6:	e002      	b.n	800fbee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fbe8:	2303      	movs	r3, #3
 800fbea:	75fb      	strb	r3, [r7, #23]
    break;
 800fbec:	bf00      	nop
  }
  return usb_status;
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	607a      	str	r2, [r7, #4]
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	460b      	mov	r3, r1
 800fc06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc16:	7af9      	ldrb	r1, [r7, #11]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	f7f4 fa3f 	bl	800409e <HAL_PCD_EP_Receive>
 800fc20:	4603      	mov	r3, r0
 800fc22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fc24:	7dbb      	ldrb	r3, [r7, #22]
 800fc26:	2b03      	cmp	r3, #3
 800fc28:	d816      	bhi.n	800fc58 <USBD_LL_PrepareReceive+0x60>
 800fc2a:	a201      	add	r2, pc, #4	; (adr r2, 800fc30 <USBD_LL_PrepareReceive+0x38>)
 800fc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc30:	0800fc41 	.word	0x0800fc41
 800fc34:	0800fc47 	.word	0x0800fc47
 800fc38:	0800fc4d 	.word	0x0800fc4d
 800fc3c:	0800fc53 	.word	0x0800fc53
    case HAL_OK :
      usb_status = USBD_OK;
 800fc40:	2300      	movs	r3, #0
 800fc42:	75fb      	strb	r3, [r7, #23]
    break;
 800fc44:	e00b      	b.n	800fc5e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc46:	2303      	movs	r3, #3
 800fc48:	75fb      	strb	r3, [r7, #23]
    break;
 800fc4a:	e008      	b.n	800fc5e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	75fb      	strb	r3, [r7, #23]
    break;
 800fc50:	e005      	b.n	800fc5e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc52:	2303      	movs	r3, #3
 800fc54:	75fb      	strb	r3, [r7, #23]
    break;
 800fc56:	e002      	b.n	800fc5e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fc58:	2303      	movs	r3, #3
 800fc5a:	75fb      	strb	r3, [r7, #23]
    break;
 800fc5c:	bf00      	nop
  }
  return usb_status;
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	460b      	mov	r3, r1
 800fc72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc7a:	78fa      	ldrb	r2, [r7, #3]
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7f4 fa4b 	bl	800411a <HAL_PCD_EP_GetRxCount>
 800fc84:	4603      	mov	r3, r0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
	...

0800fc90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc98:	4b03      	ldr	r3, [pc, #12]	; (800fca8 <USBD_static_malloc+0x18>)
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	370c      	adds	r7, #12
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	2000279c 	.word	0x2000279c

0800fcac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]

}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fcc4:	f7f1 fbb6 	bl	8001434 <SystemClock_Config>
}
 800fcc8:	bf00      	nop
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <__libc_init_array>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	4d0d      	ldr	r5, [pc, #52]	; (800fd04 <__libc_init_array+0x38>)
 800fcd0:	4c0d      	ldr	r4, [pc, #52]	; (800fd08 <__libc_init_array+0x3c>)
 800fcd2:	1b64      	subs	r4, r4, r5
 800fcd4:	10a4      	asrs	r4, r4, #2
 800fcd6:	2600      	movs	r6, #0
 800fcd8:	42a6      	cmp	r6, r4
 800fcda:	d109      	bne.n	800fcf0 <__libc_init_array+0x24>
 800fcdc:	4d0b      	ldr	r5, [pc, #44]	; (800fd0c <__libc_init_array+0x40>)
 800fcde:	4c0c      	ldr	r4, [pc, #48]	; (800fd10 <__libc_init_array+0x44>)
 800fce0:	f002 fda0 	bl	8012824 <_init>
 800fce4:	1b64      	subs	r4, r4, r5
 800fce6:	10a4      	asrs	r4, r4, #2
 800fce8:	2600      	movs	r6, #0
 800fcea:	42a6      	cmp	r6, r4
 800fcec:	d105      	bne.n	800fcfa <__libc_init_array+0x2e>
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcf4:	4798      	blx	r3
 800fcf6:	3601      	adds	r6, #1
 800fcf8:	e7ee      	b.n	800fcd8 <__libc_init_array+0xc>
 800fcfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcfe:	4798      	blx	r3
 800fd00:	3601      	adds	r6, #1
 800fd02:	e7f2      	b.n	800fcea <__libc_init_array+0x1e>
 800fd04:	08012f40 	.word	0x08012f40
 800fd08:	08012f40 	.word	0x08012f40
 800fd0c:	08012f40 	.word	0x08012f40
 800fd10:	08012f44 	.word	0x08012f44

0800fd14 <malloc>:
 800fd14:	4b02      	ldr	r3, [pc, #8]	; (800fd20 <malloc+0xc>)
 800fd16:	4601      	mov	r1, r0
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	f000 b885 	b.w	800fe28 <_malloc_r>
 800fd1e:	bf00      	nop
 800fd20:	20000188 	.word	0x20000188

0800fd24 <memcpy>:
 800fd24:	440a      	add	r2, r1
 800fd26:	4291      	cmp	r1, r2
 800fd28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd2c:	d100      	bne.n	800fd30 <memcpy+0xc>
 800fd2e:	4770      	bx	lr
 800fd30:	b510      	push	{r4, lr}
 800fd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	d1f9      	bne.n	800fd32 <memcpy+0xe>
 800fd3e:	bd10      	pop	{r4, pc}

0800fd40 <memset>:
 800fd40:	4402      	add	r2, r0
 800fd42:	4603      	mov	r3, r0
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d100      	bne.n	800fd4a <memset+0xa>
 800fd48:	4770      	bx	lr
 800fd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd4e:	e7f9      	b.n	800fd44 <memset+0x4>

0800fd50 <_free_r>:
 800fd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd52:	2900      	cmp	r1, #0
 800fd54:	d044      	beq.n	800fde0 <_free_r+0x90>
 800fd56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd5a:	9001      	str	r0, [sp, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd62:	bfb8      	it	lt
 800fd64:	18e4      	addlt	r4, r4, r3
 800fd66:	f001 fd1f 	bl	80117a8 <__malloc_lock>
 800fd6a:	4a1e      	ldr	r2, [pc, #120]	; (800fde4 <_free_r+0x94>)
 800fd6c:	9801      	ldr	r0, [sp, #4]
 800fd6e:	6813      	ldr	r3, [r2, #0]
 800fd70:	b933      	cbnz	r3, 800fd80 <_free_r+0x30>
 800fd72:	6063      	str	r3, [r4, #4]
 800fd74:	6014      	str	r4, [r2, #0]
 800fd76:	b003      	add	sp, #12
 800fd78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd7c:	f001 bd1a 	b.w	80117b4 <__malloc_unlock>
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	d908      	bls.n	800fd96 <_free_r+0x46>
 800fd84:	6825      	ldr	r5, [r4, #0]
 800fd86:	1961      	adds	r1, r4, r5
 800fd88:	428b      	cmp	r3, r1
 800fd8a:	bf01      	itttt	eq
 800fd8c:	6819      	ldreq	r1, [r3, #0]
 800fd8e:	685b      	ldreq	r3, [r3, #4]
 800fd90:	1949      	addeq	r1, r1, r5
 800fd92:	6021      	streq	r1, [r4, #0]
 800fd94:	e7ed      	b.n	800fd72 <_free_r+0x22>
 800fd96:	461a      	mov	r2, r3
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	b10b      	cbz	r3, 800fda0 <_free_r+0x50>
 800fd9c:	42a3      	cmp	r3, r4
 800fd9e:	d9fa      	bls.n	800fd96 <_free_r+0x46>
 800fda0:	6811      	ldr	r1, [r2, #0]
 800fda2:	1855      	adds	r5, r2, r1
 800fda4:	42a5      	cmp	r5, r4
 800fda6:	d10b      	bne.n	800fdc0 <_free_r+0x70>
 800fda8:	6824      	ldr	r4, [r4, #0]
 800fdaa:	4421      	add	r1, r4
 800fdac:	1854      	adds	r4, r2, r1
 800fdae:	42a3      	cmp	r3, r4
 800fdb0:	6011      	str	r1, [r2, #0]
 800fdb2:	d1e0      	bne.n	800fd76 <_free_r+0x26>
 800fdb4:	681c      	ldr	r4, [r3, #0]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	6053      	str	r3, [r2, #4]
 800fdba:	4421      	add	r1, r4
 800fdbc:	6011      	str	r1, [r2, #0]
 800fdbe:	e7da      	b.n	800fd76 <_free_r+0x26>
 800fdc0:	d902      	bls.n	800fdc8 <_free_r+0x78>
 800fdc2:	230c      	movs	r3, #12
 800fdc4:	6003      	str	r3, [r0, #0]
 800fdc6:	e7d6      	b.n	800fd76 <_free_r+0x26>
 800fdc8:	6825      	ldr	r5, [r4, #0]
 800fdca:	1961      	adds	r1, r4, r5
 800fdcc:	428b      	cmp	r3, r1
 800fdce:	bf04      	itt	eq
 800fdd0:	6819      	ldreq	r1, [r3, #0]
 800fdd2:	685b      	ldreq	r3, [r3, #4]
 800fdd4:	6063      	str	r3, [r4, #4]
 800fdd6:	bf04      	itt	eq
 800fdd8:	1949      	addeq	r1, r1, r5
 800fdda:	6021      	streq	r1, [r4, #0]
 800fddc:	6054      	str	r4, [r2, #4]
 800fdde:	e7ca      	b.n	800fd76 <_free_r+0x26>
 800fde0:	b003      	add	sp, #12
 800fde2:	bd30      	pop	{r4, r5, pc}
 800fde4:	200029bc 	.word	0x200029bc

0800fde8 <sbrk_aligned>:
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	4e0e      	ldr	r6, [pc, #56]	; (800fe24 <sbrk_aligned+0x3c>)
 800fdec:	460c      	mov	r4, r1
 800fdee:	6831      	ldr	r1, [r6, #0]
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	b911      	cbnz	r1, 800fdfa <sbrk_aligned+0x12>
 800fdf4:	f000 fd0e 	bl	8010814 <_sbrk_r>
 800fdf8:	6030      	str	r0, [r6, #0]
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f000 fd09 	bl	8010814 <_sbrk_r>
 800fe02:	1c43      	adds	r3, r0, #1
 800fe04:	d00a      	beq.n	800fe1c <sbrk_aligned+0x34>
 800fe06:	1cc4      	adds	r4, r0, #3
 800fe08:	f024 0403 	bic.w	r4, r4, #3
 800fe0c:	42a0      	cmp	r0, r4
 800fe0e:	d007      	beq.n	800fe20 <sbrk_aligned+0x38>
 800fe10:	1a21      	subs	r1, r4, r0
 800fe12:	4628      	mov	r0, r5
 800fe14:	f000 fcfe 	bl	8010814 <_sbrk_r>
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d101      	bne.n	800fe20 <sbrk_aligned+0x38>
 800fe1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fe20:	4620      	mov	r0, r4
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	200029c0 	.word	0x200029c0

0800fe28 <_malloc_r>:
 800fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2c:	1ccd      	adds	r5, r1, #3
 800fe2e:	f025 0503 	bic.w	r5, r5, #3
 800fe32:	3508      	adds	r5, #8
 800fe34:	2d0c      	cmp	r5, #12
 800fe36:	bf38      	it	cc
 800fe38:	250c      	movcc	r5, #12
 800fe3a:	2d00      	cmp	r5, #0
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	db01      	blt.n	800fe44 <_malloc_r+0x1c>
 800fe40:	42a9      	cmp	r1, r5
 800fe42:	d905      	bls.n	800fe50 <_malloc_r+0x28>
 800fe44:	230c      	movs	r3, #12
 800fe46:	603b      	str	r3, [r7, #0]
 800fe48:	2600      	movs	r6, #0
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe50:	4e2e      	ldr	r6, [pc, #184]	; (800ff0c <_malloc_r+0xe4>)
 800fe52:	f001 fca9 	bl	80117a8 <__malloc_lock>
 800fe56:	6833      	ldr	r3, [r6, #0]
 800fe58:	461c      	mov	r4, r3
 800fe5a:	bb34      	cbnz	r4, 800feaa <_malloc_r+0x82>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f7ff ffc2 	bl	800fde8 <sbrk_aligned>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	4604      	mov	r4, r0
 800fe68:	d14d      	bne.n	800ff06 <_malloc_r+0xde>
 800fe6a:	6834      	ldr	r4, [r6, #0]
 800fe6c:	4626      	mov	r6, r4
 800fe6e:	2e00      	cmp	r6, #0
 800fe70:	d140      	bne.n	800fef4 <_malloc_r+0xcc>
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	4631      	mov	r1, r6
 800fe76:	4638      	mov	r0, r7
 800fe78:	eb04 0803 	add.w	r8, r4, r3
 800fe7c:	f000 fcca 	bl	8010814 <_sbrk_r>
 800fe80:	4580      	cmp	r8, r0
 800fe82:	d13a      	bne.n	800fefa <_malloc_r+0xd2>
 800fe84:	6821      	ldr	r1, [r4, #0]
 800fe86:	3503      	adds	r5, #3
 800fe88:	1a6d      	subs	r5, r5, r1
 800fe8a:	f025 0503 	bic.w	r5, r5, #3
 800fe8e:	3508      	adds	r5, #8
 800fe90:	2d0c      	cmp	r5, #12
 800fe92:	bf38      	it	cc
 800fe94:	250c      	movcc	r5, #12
 800fe96:	4629      	mov	r1, r5
 800fe98:	4638      	mov	r0, r7
 800fe9a:	f7ff ffa5 	bl	800fde8 <sbrk_aligned>
 800fe9e:	3001      	adds	r0, #1
 800fea0:	d02b      	beq.n	800fefa <_malloc_r+0xd2>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	442b      	add	r3, r5
 800fea6:	6023      	str	r3, [r4, #0]
 800fea8:	e00e      	b.n	800fec8 <_malloc_r+0xa0>
 800feaa:	6822      	ldr	r2, [r4, #0]
 800feac:	1b52      	subs	r2, r2, r5
 800feae:	d41e      	bmi.n	800feee <_malloc_r+0xc6>
 800feb0:	2a0b      	cmp	r2, #11
 800feb2:	d916      	bls.n	800fee2 <_malloc_r+0xba>
 800feb4:	1961      	adds	r1, r4, r5
 800feb6:	42a3      	cmp	r3, r4
 800feb8:	6025      	str	r5, [r4, #0]
 800feba:	bf18      	it	ne
 800febc:	6059      	strne	r1, [r3, #4]
 800febe:	6863      	ldr	r3, [r4, #4]
 800fec0:	bf08      	it	eq
 800fec2:	6031      	streq	r1, [r6, #0]
 800fec4:	5162      	str	r2, [r4, r5]
 800fec6:	604b      	str	r3, [r1, #4]
 800fec8:	4638      	mov	r0, r7
 800feca:	f104 060b 	add.w	r6, r4, #11
 800fece:	f001 fc71 	bl	80117b4 <__malloc_unlock>
 800fed2:	f026 0607 	bic.w	r6, r6, #7
 800fed6:	1d23      	adds	r3, r4, #4
 800fed8:	1af2      	subs	r2, r6, r3
 800feda:	d0b6      	beq.n	800fe4a <_malloc_r+0x22>
 800fedc:	1b9b      	subs	r3, r3, r6
 800fede:	50a3      	str	r3, [r4, r2]
 800fee0:	e7b3      	b.n	800fe4a <_malloc_r+0x22>
 800fee2:	6862      	ldr	r2, [r4, #4]
 800fee4:	42a3      	cmp	r3, r4
 800fee6:	bf0c      	ite	eq
 800fee8:	6032      	streq	r2, [r6, #0]
 800feea:	605a      	strne	r2, [r3, #4]
 800feec:	e7ec      	b.n	800fec8 <_malloc_r+0xa0>
 800feee:	4623      	mov	r3, r4
 800fef0:	6864      	ldr	r4, [r4, #4]
 800fef2:	e7b2      	b.n	800fe5a <_malloc_r+0x32>
 800fef4:	4634      	mov	r4, r6
 800fef6:	6876      	ldr	r6, [r6, #4]
 800fef8:	e7b9      	b.n	800fe6e <_malloc_r+0x46>
 800fefa:	230c      	movs	r3, #12
 800fefc:	603b      	str	r3, [r7, #0]
 800fefe:	4638      	mov	r0, r7
 800ff00:	f001 fc58 	bl	80117b4 <__malloc_unlock>
 800ff04:	e7a1      	b.n	800fe4a <_malloc_r+0x22>
 800ff06:	6025      	str	r5, [r4, #0]
 800ff08:	e7de      	b.n	800fec8 <_malloc_r+0xa0>
 800ff0a:	bf00      	nop
 800ff0c:	200029bc 	.word	0x200029bc

0800ff10 <__cvt>:
 800ff10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff14:	ec55 4b10 	vmov	r4, r5, d0
 800ff18:	2d00      	cmp	r5, #0
 800ff1a:	460e      	mov	r6, r1
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	462b      	mov	r3, r5
 800ff20:	bfbb      	ittet	lt
 800ff22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff26:	461d      	movlt	r5, r3
 800ff28:	2300      	movge	r3, #0
 800ff2a:	232d      	movlt	r3, #45	; 0x2d
 800ff2c:	700b      	strb	r3, [r1, #0]
 800ff2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff34:	4691      	mov	r9, r2
 800ff36:	f023 0820 	bic.w	r8, r3, #32
 800ff3a:	bfbc      	itt	lt
 800ff3c:	4622      	movlt	r2, r4
 800ff3e:	4614      	movlt	r4, r2
 800ff40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff44:	d005      	beq.n	800ff52 <__cvt+0x42>
 800ff46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff4a:	d100      	bne.n	800ff4e <__cvt+0x3e>
 800ff4c:	3601      	adds	r6, #1
 800ff4e:	2102      	movs	r1, #2
 800ff50:	e000      	b.n	800ff54 <__cvt+0x44>
 800ff52:	2103      	movs	r1, #3
 800ff54:	ab03      	add	r3, sp, #12
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	ab02      	add	r3, sp, #8
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	ec45 4b10 	vmov	d0, r4, r5
 800ff60:	4653      	mov	r3, sl
 800ff62:	4632      	mov	r2, r6
 800ff64:	f000 fd10 	bl	8010988 <_dtoa_r>
 800ff68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff6c:	4607      	mov	r7, r0
 800ff6e:	d102      	bne.n	800ff76 <__cvt+0x66>
 800ff70:	f019 0f01 	tst.w	r9, #1
 800ff74:	d022      	beq.n	800ffbc <__cvt+0xac>
 800ff76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff7a:	eb07 0906 	add.w	r9, r7, r6
 800ff7e:	d110      	bne.n	800ffa2 <__cvt+0x92>
 800ff80:	783b      	ldrb	r3, [r7, #0]
 800ff82:	2b30      	cmp	r3, #48	; 0x30
 800ff84:	d10a      	bne.n	800ff9c <__cvt+0x8c>
 800ff86:	2200      	movs	r2, #0
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	f7f0 fdb3 	bl	8000af8 <__aeabi_dcmpeq>
 800ff92:	b918      	cbnz	r0, 800ff9c <__cvt+0x8c>
 800ff94:	f1c6 0601 	rsb	r6, r6, #1
 800ff98:	f8ca 6000 	str.w	r6, [sl]
 800ff9c:	f8da 3000 	ldr.w	r3, [sl]
 800ffa0:	4499      	add	r9, r3
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7f0 fda5 	bl	8000af8 <__aeabi_dcmpeq>
 800ffae:	b108      	cbz	r0, 800ffb4 <__cvt+0xa4>
 800ffb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffb4:	2230      	movs	r2, #48	; 0x30
 800ffb6:	9b03      	ldr	r3, [sp, #12]
 800ffb8:	454b      	cmp	r3, r9
 800ffba:	d307      	bcc.n	800ffcc <__cvt+0xbc>
 800ffbc:	9b03      	ldr	r3, [sp, #12]
 800ffbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffc0:	1bdb      	subs	r3, r3, r7
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	b004      	add	sp, #16
 800ffc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffcc:	1c59      	adds	r1, r3, #1
 800ffce:	9103      	str	r1, [sp, #12]
 800ffd0:	701a      	strb	r2, [r3, #0]
 800ffd2:	e7f0      	b.n	800ffb6 <__cvt+0xa6>

0800ffd4 <__exponent>:
 800ffd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	bfb8      	it	lt
 800ffdc:	4249      	neglt	r1, r1
 800ffde:	f803 2b02 	strb.w	r2, [r3], #2
 800ffe2:	bfb4      	ite	lt
 800ffe4:	222d      	movlt	r2, #45	; 0x2d
 800ffe6:	222b      	movge	r2, #43	; 0x2b
 800ffe8:	2909      	cmp	r1, #9
 800ffea:	7042      	strb	r2, [r0, #1]
 800ffec:	dd2a      	ble.n	8010044 <__exponent+0x70>
 800ffee:	f10d 0407 	add.w	r4, sp, #7
 800fff2:	46a4      	mov	ip, r4
 800fff4:	270a      	movs	r7, #10
 800fff6:	46a6      	mov	lr, r4
 800fff8:	460a      	mov	r2, r1
 800fffa:	fb91 f6f7 	sdiv	r6, r1, r7
 800fffe:	fb07 1516 	mls	r5, r7, r6, r1
 8010002:	3530      	adds	r5, #48	; 0x30
 8010004:	2a63      	cmp	r2, #99	; 0x63
 8010006:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801000a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801000e:	4631      	mov	r1, r6
 8010010:	dcf1      	bgt.n	800fff6 <__exponent+0x22>
 8010012:	3130      	adds	r1, #48	; 0x30
 8010014:	f1ae 0502 	sub.w	r5, lr, #2
 8010018:	f804 1c01 	strb.w	r1, [r4, #-1]
 801001c:	1c44      	adds	r4, r0, #1
 801001e:	4629      	mov	r1, r5
 8010020:	4561      	cmp	r1, ip
 8010022:	d30a      	bcc.n	801003a <__exponent+0x66>
 8010024:	f10d 0209 	add.w	r2, sp, #9
 8010028:	eba2 020e 	sub.w	r2, r2, lr
 801002c:	4565      	cmp	r5, ip
 801002e:	bf88      	it	hi
 8010030:	2200      	movhi	r2, #0
 8010032:	4413      	add	r3, r2
 8010034:	1a18      	subs	r0, r3, r0
 8010036:	b003      	add	sp, #12
 8010038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801003a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801003e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010042:	e7ed      	b.n	8010020 <__exponent+0x4c>
 8010044:	2330      	movs	r3, #48	; 0x30
 8010046:	3130      	adds	r1, #48	; 0x30
 8010048:	7083      	strb	r3, [r0, #2]
 801004a:	70c1      	strb	r1, [r0, #3]
 801004c:	1d03      	adds	r3, r0, #4
 801004e:	e7f1      	b.n	8010034 <__exponent+0x60>

08010050 <_printf_float>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	ed2d 8b02 	vpush	{d8}
 8010058:	b08d      	sub	sp, #52	; 0x34
 801005a:	460c      	mov	r4, r1
 801005c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010060:	4616      	mov	r6, r2
 8010062:	461f      	mov	r7, r3
 8010064:	4605      	mov	r5, r0
 8010066:	f001 fb85 	bl	8011774 <_localeconv_r>
 801006a:	f8d0 a000 	ldr.w	sl, [r0]
 801006e:	4650      	mov	r0, sl
 8010070:	f7f0 f8c6 	bl	8000200 <strlen>
 8010074:	2300      	movs	r3, #0
 8010076:	930a      	str	r3, [sp, #40]	; 0x28
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	9305      	str	r3, [sp, #20]
 801007c:	f8d8 3000 	ldr.w	r3, [r8]
 8010080:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010084:	3307      	adds	r3, #7
 8010086:	f023 0307 	bic.w	r3, r3, #7
 801008a:	f103 0208 	add.w	r2, r3, #8
 801008e:	f8c8 2000 	str.w	r2, [r8]
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801009a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801009e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100a2:	9307      	str	r3, [sp, #28]
 80100a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80100a8:	ee08 0a10 	vmov	s16, r0
 80100ac:	4b9f      	ldr	r3, [pc, #636]	; (801032c <_printf_float+0x2dc>)
 80100ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100b6:	f7f0 fd51 	bl	8000b5c <__aeabi_dcmpun>
 80100ba:	bb88      	cbnz	r0, 8010120 <_printf_float+0xd0>
 80100bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100c0:	4b9a      	ldr	r3, [pc, #616]	; (801032c <_printf_float+0x2dc>)
 80100c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100c6:	f7f0 fd2b 	bl	8000b20 <__aeabi_dcmple>
 80100ca:	bb48      	cbnz	r0, 8010120 <_printf_float+0xd0>
 80100cc:	2200      	movs	r2, #0
 80100ce:	2300      	movs	r3, #0
 80100d0:	4640      	mov	r0, r8
 80100d2:	4649      	mov	r1, r9
 80100d4:	f7f0 fd1a 	bl	8000b0c <__aeabi_dcmplt>
 80100d8:	b110      	cbz	r0, 80100e0 <_printf_float+0x90>
 80100da:	232d      	movs	r3, #45	; 0x2d
 80100dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100e0:	4b93      	ldr	r3, [pc, #588]	; (8010330 <_printf_float+0x2e0>)
 80100e2:	4894      	ldr	r0, [pc, #592]	; (8010334 <_printf_float+0x2e4>)
 80100e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80100e8:	bf94      	ite	ls
 80100ea:	4698      	movls	r8, r3
 80100ec:	4680      	movhi	r8, r0
 80100ee:	2303      	movs	r3, #3
 80100f0:	6123      	str	r3, [r4, #16]
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	f023 0204 	bic.w	r2, r3, #4
 80100f8:	6022      	str	r2, [r4, #0]
 80100fa:	f04f 0900 	mov.w	r9, #0
 80100fe:	9700      	str	r7, [sp, #0]
 8010100:	4633      	mov	r3, r6
 8010102:	aa0b      	add	r2, sp, #44	; 0x2c
 8010104:	4621      	mov	r1, r4
 8010106:	4628      	mov	r0, r5
 8010108:	f000 f9d8 	bl	80104bc <_printf_common>
 801010c:	3001      	adds	r0, #1
 801010e:	f040 8090 	bne.w	8010232 <_printf_float+0x1e2>
 8010112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010116:	b00d      	add	sp, #52	; 0x34
 8010118:	ecbd 8b02 	vpop	{d8}
 801011c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010120:	4642      	mov	r2, r8
 8010122:	464b      	mov	r3, r9
 8010124:	4640      	mov	r0, r8
 8010126:	4649      	mov	r1, r9
 8010128:	f7f0 fd18 	bl	8000b5c <__aeabi_dcmpun>
 801012c:	b140      	cbz	r0, 8010140 <_printf_float+0xf0>
 801012e:	464b      	mov	r3, r9
 8010130:	2b00      	cmp	r3, #0
 8010132:	bfbc      	itt	lt
 8010134:	232d      	movlt	r3, #45	; 0x2d
 8010136:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801013a:	487f      	ldr	r0, [pc, #508]	; (8010338 <_printf_float+0x2e8>)
 801013c:	4b7f      	ldr	r3, [pc, #508]	; (801033c <_printf_float+0x2ec>)
 801013e:	e7d1      	b.n	80100e4 <_printf_float+0x94>
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010146:	9206      	str	r2, [sp, #24]
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	d13f      	bne.n	80101cc <_printf_float+0x17c>
 801014c:	2306      	movs	r3, #6
 801014e:	6063      	str	r3, [r4, #4]
 8010150:	9b05      	ldr	r3, [sp, #20]
 8010152:	6861      	ldr	r1, [r4, #4]
 8010154:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010158:	2300      	movs	r3, #0
 801015a:	9303      	str	r3, [sp, #12]
 801015c:	ab0a      	add	r3, sp, #40	; 0x28
 801015e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010162:	ab09      	add	r3, sp, #36	; 0x24
 8010164:	ec49 8b10 	vmov	d0, r8, r9
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	6022      	str	r2, [r4, #0]
 801016c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010170:	4628      	mov	r0, r5
 8010172:	f7ff fecd 	bl	800ff10 <__cvt>
 8010176:	9b06      	ldr	r3, [sp, #24]
 8010178:	9909      	ldr	r1, [sp, #36]	; 0x24
 801017a:	2b47      	cmp	r3, #71	; 0x47
 801017c:	4680      	mov	r8, r0
 801017e:	d108      	bne.n	8010192 <_printf_float+0x142>
 8010180:	1cc8      	adds	r0, r1, #3
 8010182:	db02      	blt.n	801018a <_printf_float+0x13a>
 8010184:	6863      	ldr	r3, [r4, #4]
 8010186:	4299      	cmp	r1, r3
 8010188:	dd41      	ble.n	801020e <_printf_float+0x1be>
 801018a:	f1ab 0b02 	sub.w	fp, fp, #2
 801018e:	fa5f fb8b 	uxtb.w	fp, fp
 8010192:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010196:	d820      	bhi.n	80101da <_printf_float+0x18a>
 8010198:	3901      	subs	r1, #1
 801019a:	465a      	mov	r2, fp
 801019c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101a0:	9109      	str	r1, [sp, #36]	; 0x24
 80101a2:	f7ff ff17 	bl	800ffd4 <__exponent>
 80101a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101a8:	1813      	adds	r3, r2, r0
 80101aa:	2a01      	cmp	r2, #1
 80101ac:	4681      	mov	r9, r0
 80101ae:	6123      	str	r3, [r4, #16]
 80101b0:	dc02      	bgt.n	80101b8 <_printf_float+0x168>
 80101b2:	6822      	ldr	r2, [r4, #0]
 80101b4:	07d2      	lsls	r2, r2, #31
 80101b6:	d501      	bpl.n	80101bc <_printf_float+0x16c>
 80101b8:	3301      	adds	r3, #1
 80101ba:	6123      	str	r3, [r4, #16]
 80101bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d09c      	beq.n	80100fe <_printf_float+0xae>
 80101c4:	232d      	movs	r3, #45	; 0x2d
 80101c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101ca:	e798      	b.n	80100fe <_printf_float+0xae>
 80101cc:	9a06      	ldr	r2, [sp, #24]
 80101ce:	2a47      	cmp	r2, #71	; 0x47
 80101d0:	d1be      	bne.n	8010150 <_printf_float+0x100>
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1bc      	bne.n	8010150 <_printf_float+0x100>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e7b9      	b.n	801014e <_printf_float+0xfe>
 80101da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80101de:	d118      	bne.n	8010212 <_printf_float+0x1c2>
 80101e0:	2900      	cmp	r1, #0
 80101e2:	6863      	ldr	r3, [r4, #4]
 80101e4:	dd0b      	ble.n	80101fe <_printf_float+0x1ae>
 80101e6:	6121      	str	r1, [r4, #16]
 80101e8:	b913      	cbnz	r3, 80101f0 <_printf_float+0x1a0>
 80101ea:	6822      	ldr	r2, [r4, #0]
 80101ec:	07d0      	lsls	r0, r2, #31
 80101ee:	d502      	bpl.n	80101f6 <_printf_float+0x1a6>
 80101f0:	3301      	adds	r3, #1
 80101f2:	440b      	add	r3, r1
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80101f8:	f04f 0900 	mov.w	r9, #0
 80101fc:	e7de      	b.n	80101bc <_printf_float+0x16c>
 80101fe:	b913      	cbnz	r3, 8010206 <_printf_float+0x1b6>
 8010200:	6822      	ldr	r2, [r4, #0]
 8010202:	07d2      	lsls	r2, r2, #31
 8010204:	d501      	bpl.n	801020a <_printf_float+0x1ba>
 8010206:	3302      	adds	r3, #2
 8010208:	e7f4      	b.n	80101f4 <_printf_float+0x1a4>
 801020a:	2301      	movs	r3, #1
 801020c:	e7f2      	b.n	80101f4 <_printf_float+0x1a4>
 801020e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010214:	4299      	cmp	r1, r3
 8010216:	db05      	blt.n	8010224 <_printf_float+0x1d4>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	6121      	str	r1, [r4, #16]
 801021c:	07d8      	lsls	r0, r3, #31
 801021e:	d5ea      	bpl.n	80101f6 <_printf_float+0x1a6>
 8010220:	1c4b      	adds	r3, r1, #1
 8010222:	e7e7      	b.n	80101f4 <_printf_float+0x1a4>
 8010224:	2900      	cmp	r1, #0
 8010226:	bfd4      	ite	le
 8010228:	f1c1 0202 	rsble	r2, r1, #2
 801022c:	2201      	movgt	r2, #1
 801022e:	4413      	add	r3, r2
 8010230:	e7e0      	b.n	80101f4 <_printf_float+0x1a4>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	055a      	lsls	r2, r3, #21
 8010236:	d407      	bmi.n	8010248 <_printf_float+0x1f8>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	4642      	mov	r2, r8
 801023c:	4631      	mov	r1, r6
 801023e:	4628      	mov	r0, r5
 8010240:	47b8      	blx	r7
 8010242:	3001      	adds	r0, #1
 8010244:	d12c      	bne.n	80102a0 <_printf_float+0x250>
 8010246:	e764      	b.n	8010112 <_printf_float+0xc2>
 8010248:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801024c:	f240 80e0 	bls.w	8010410 <_printf_float+0x3c0>
 8010250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010254:	2200      	movs	r2, #0
 8010256:	2300      	movs	r3, #0
 8010258:	f7f0 fc4e 	bl	8000af8 <__aeabi_dcmpeq>
 801025c:	2800      	cmp	r0, #0
 801025e:	d034      	beq.n	80102ca <_printf_float+0x27a>
 8010260:	4a37      	ldr	r2, [pc, #220]	; (8010340 <_printf_float+0x2f0>)
 8010262:	2301      	movs	r3, #1
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f af51 	beq.w	8010112 <_printf_float+0xc2>
 8010270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010274:	429a      	cmp	r2, r3
 8010276:	db02      	blt.n	801027e <_printf_float+0x22e>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	07d8      	lsls	r0, r3, #31
 801027c:	d510      	bpl.n	80102a0 <_printf_float+0x250>
 801027e:	ee18 3a10 	vmov	r3, s16
 8010282:	4652      	mov	r2, sl
 8010284:	4631      	mov	r1, r6
 8010286:	4628      	mov	r0, r5
 8010288:	47b8      	blx	r7
 801028a:	3001      	adds	r0, #1
 801028c:	f43f af41 	beq.w	8010112 <_printf_float+0xc2>
 8010290:	f04f 0800 	mov.w	r8, #0
 8010294:	f104 091a 	add.w	r9, r4, #26
 8010298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801029a:	3b01      	subs	r3, #1
 801029c:	4543      	cmp	r3, r8
 801029e:	dc09      	bgt.n	80102b4 <_printf_float+0x264>
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	079b      	lsls	r3, r3, #30
 80102a4:	f100 8105 	bmi.w	80104b2 <_printf_float+0x462>
 80102a8:	68e0      	ldr	r0, [r4, #12]
 80102aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ac:	4298      	cmp	r0, r3
 80102ae:	bfb8      	it	lt
 80102b0:	4618      	movlt	r0, r3
 80102b2:	e730      	b.n	8010116 <_printf_float+0xc6>
 80102b4:	2301      	movs	r3, #1
 80102b6:	464a      	mov	r2, r9
 80102b8:	4631      	mov	r1, r6
 80102ba:	4628      	mov	r0, r5
 80102bc:	47b8      	blx	r7
 80102be:	3001      	adds	r0, #1
 80102c0:	f43f af27 	beq.w	8010112 <_printf_float+0xc2>
 80102c4:	f108 0801 	add.w	r8, r8, #1
 80102c8:	e7e6      	b.n	8010298 <_printf_float+0x248>
 80102ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dc39      	bgt.n	8010344 <_printf_float+0x2f4>
 80102d0:	4a1b      	ldr	r2, [pc, #108]	; (8010340 <_printf_float+0x2f0>)
 80102d2:	2301      	movs	r3, #1
 80102d4:	4631      	mov	r1, r6
 80102d6:	4628      	mov	r0, r5
 80102d8:	47b8      	blx	r7
 80102da:	3001      	adds	r0, #1
 80102dc:	f43f af19 	beq.w	8010112 <_printf_float+0xc2>
 80102e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102e4:	4313      	orrs	r3, r2
 80102e6:	d102      	bne.n	80102ee <_printf_float+0x29e>
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	07d9      	lsls	r1, r3, #31
 80102ec:	d5d8      	bpl.n	80102a0 <_printf_float+0x250>
 80102ee:	ee18 3a10 	vmov	r3, s16
 80102f2:	4652      	mov	r2, sl
 80102f4:	4631      	mov	r1, r6
 80102f6:	4628      	mov	r0, r5
 80102f8:	47b8      	blx	r7
 80102fa:	3001      	adds	r0, #1
 80102fc:	f43f af09 	beq.w	8010112 <_printf_float+0xc2>
 8010300:	f04f 0900 	mov.w	r9, #0
 8010304:	f104 0a1a 	add.w	sl, r4, #26
 8010308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801030a:	425b      	negs	r3, r3
 801030c:	454b      	cmp	r3, r9
 801030e:	dc01      	bgt.n	8010314 <_printf_float+0x2c4>
 8010310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010312:	e792      	b.n	801023a <_printf_float+0x1ea>
 8010314:	2301      	movs	r3, #1
 8010316:	4652      	mov	r2, sl
 8010318:	4631      	mov	r1, r6
 801031a:	4628      	mov	r0, r5
 801031c:	47b8      	blx	r7
 801031e:	3001      	adds	r0, #1
 8010320:	f43f aef7 	beq.w	8010112 <_printf_float+0xc2>
 8010324:	f109 0901 	add.w	r9, r9, #1
 8010328:	e7ee      	b.n	8010308 <_printf_float+0x2b8>
 801032a:	bf00      	nop
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	08012b5c 	.word	0x08012b5c
 8010334:	08012b60 	.word	0x08012b60
 8010338:	08012b68 	.word	0x08012b68
 801033c:	08012b64 	.word	0x08012b64
 8010340:	08012b6c 	.word	0x08012b6c
 8010344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010348:	429a      	cmp	r2, r3
 801034a:	bfa8      	it	ge
 801034c:	461a      	movge	r2, r3
 801034e:	2a00      	cmp	r2, #0
 8010350:	4691      	mov	r9, r2
 8010352:	dc37      	bgt.n	80103c4 <_printf_float+0x374>
 8010354:	f04f 0b00 	mov.w	fp, #0
 8010358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801035c:	f104 021a 	add.w	r2, r4, #26
 8010360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010362:	9305      	str	r3, [sp, #20]
 8010364:	eba3 0309 	sub.w	r3, r3, r9
 8010368:	455b      	cmp	r3, fp
 801036a:	dc33      	bgt.n	80103d4 <_printf_float+0x384>
 801036c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010370:	429a      	cmp	r2, r3
 8010372:	db3b      	blt.n	80103ec <_printf_float+0x39c>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	07da      	lsls	r2, r3, #31
 8010378:	d438      	bmi.n	80103ec <_printf_float+0x39c>
 801037a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801037c:	9a05      	ldr	r2, [sp, #20]
 801037e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010380:	1a9a      	subs	r2, r3, r2
 8010382:	eba3 0901 	sub.w	r9, r3, r1
 8010386:	4591      	cmp	r9, r2
 8010388:	bfa8      	it	ge
 801038a:	4691      	movge	r9, r2
 801038c:	f1b9 0f00 	cmp.w	r9, #0
 8010390:	dc35      	bgt.n	80103fe <_printf_float+0x3ae>
 8010392:	f04f 0800 	mov.w	r8, #0
 8010396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801039a:	f104 0a1a 	add.w	sl, r4, #26
 801039e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	eba3 0309 	sub.w	r3, r3, r9
 80103a8:	4543      	cmp	r3, r8
 80103aa:	f77f af79 	ble.w	80102a0 <_printf_float+0x250>
 80103ae:	2301      	movs	r3, #1
 80103b0:	4652      	mov	r2, sl
 80103b2:	4631      	mov	r1, r6
 80103b4:	4628      	mov	r0, r5
 80103b6:	47b8      	blx	r7
 80103b8:	3001      	adds	r0, #1
 80103ba:	f43f aeaa 	beq.w	8010112 <_printf_float+0xc2>
 80103be:	f108 0801 	add.w	r8, r8, #1
 80103c2:	e7ec      	b.n	801039e <_printf_float+0x34e>
 80103c4:	4613      	mov	r3, r2
 80103c6:	4631      	mov	r1, r6
 80103c8:	4642      	mov	r2, r8
 80103ca:	4628      	mov	r0, r5
 80103cc:	47b8      	blx	r7
 80103ce:	3001      	adds	r0, #1
 80103d0:	d1c0      	bne.n	8010354 <_printf_float+0x304>
 80103d2:	e69e      	b.n	8010112 <_printf_float+0xc2>
 80103d4:	2301      	movs	r3, #1
 80103d6:	4631      	mov	r1, r6
 80103d8:	4628      	mov	r0, r5
 80103da:	9205      	str	r2, [sp, #20]
 80103dc:	47b8      	blx	r7
 80103de:	3001      	adds	r0, #1
 80103e0:	f43f ae97 	beq.w	8010112 <_printf_float+0xc2>
 80103e4:	9a05      	ldr	r2, [sp, #20]
 80103e6:	f10b 0b01 	add.w	fp, fp, #1
 80103ea:	e7b9      	b.n	8010360 <_printf_float+0x310>
 80103ec:	ee18 3a10 	vmov	r3, s16
 80103f0:	4652      	mov	r2, sl
 80103f2:	4631      	mov	r1, r6
 80103f4:	4628      	mov	r0, r5
 80103f6:	47b8      	blx	r7
 80103f8:	3001      	adds	r0, #1
 80103fa:	d1be      	bne.n	801037a <_printf_float+0x32a>
 80103fc:	e689      	b.n	8010112 <_printf_float+0xc2>
 80103fe:	9a05      	ldr	r2, [sp, #20]
 8010400:	464b      	mov	r3, r9
 8010402:	4442      	add	r2, r8
 8010404:	4631      	mov	r1, r6
 8010406:	4628      	mov	r0, r5
 8010408:	47b8      	blx	r7
 801040a:	3001      	adds	r0, #1
 801040c:	d1c1      	bne.n	8010392 <_printf_float+0x342>
 801040e:	e680      	b.n	8010112 <_printf_float+0xc2>
 8010410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010412:	2a01      	cmp	r2, #1
 8010414:	dc01      	bgt.n	801041a <_printf_float+0x3ca>
 8010416:	07db      	lsls	r3, r3, #31
 8010418:	d538      	bpl.n	801048c <_printf_float+0x43c>
 801041a:	2301      	movs	r3, #1
 801041c:	4642      	mov	r2, r8
 801041e:	4631      	mov	r1, r6
 8010420:	4628      	mov	r0, r5
 8010422:	47b8      	blx	r7
 8010424:	3001      	adds	r0, #1
 8010426:	f43f ae74 	beq.w	8010112 <_printf_float+0xc2>
 801042a:	ee18 3a10 	vmov	r3, s16
 801042e:	4652      	mov	r2, sl
 8010430:	4631      	mov	r1, r6
 8010432:	4628      	mov	r0, r5
 8010434:	47b8      	blx	r7
 8010436:	3001      	adds	r0, #1
 8010438:	f43f ae6b 	beq.w	8010112 <_printf_float+0xc2>
 801043c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010440:	2200      	movs	r2, #0
 8010442:	2300      	movs	r3, #0
 8010444:	f7f0 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 8010448:	b9d8      	cbnz	r0, 8010482 <_printf_float+0x432>
 801044a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044c:	f108 0201 	add.w	r2, r8, #1
 8010450:	3b01      	subs	r3, #1
 8010452:	4631      	mov	r1, r6
 8010454:	4628      	mov	r0, r5
 8010456:	47b8      	blx	r7
 8010458:	3001      	adds	r0, #1
 801045a:	d10e      	bne.n	801047a <_printf_float+0x42a>
 801045c:	e659      	b.n	8010112 <_printf_float+0xc2>
 801045e:	2301      	movs	r3, #1
 8010460:	4652      	mov	r2, sl
 8010462:	4631      	mov	r1, r6
 8010464:	4628      	mov	r0, r5
 8010466:	47b8      	blx	r7
 8010468:	3001      	adds	r0, #1
 801046a:	f43f ae52 	beq.w	8010112 <_printf_float+0xc2>
 801046e:	f108 0801 	add.w	r8, r8, #1
 8010472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010474:	3b01      	subs	r3, #1
 8010476:	4543      	cmp	r3, r8
 8010478:	dcf1      	bgt.n	801045e <_printf_float+0x40e>
 801047a:	464b      	mov	r3, r9
 801047c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010480:	e6dc      	b.n	801023c <_printf_float+0x1ec>
 8010482:	f04f 0800 	mov.w	r8, #0
 8010486:	f104 0a1a 	add.w	sl, r4, #26
 801048a:	e7f2      	b.n	8010472 <_printf_float+0x422>
 801048c:	2301      	movs	r3, #1
 801048e:	4642      	mov	r2, r8
 8010490:	e7df      	b.n	8010452 <_printf_float+0x402>
 8010492:	2301      	movs	r3, #1
 8010494:	464a      	mov	r2, r9
 8010496:	4631      	mov	r1, r6
 8010498:	4628      	mov	r0, r5
 801049a:	47b8      	blx	r7
 801049c:	3001      	adds	r0, #1
 801049e:	f43f ae38 	beq.w	8010112 <_printf_float+0xc2>
 80104a2:	f108 0801 	add.w	r8, r8, #1
 80104a6:	68e3      	ldr	r3, [r4, #12]
 80104a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104aa:	1a5b      	subs	r3, r3, r1
 80104ac:	4543      	cmp	r3, r8
 80104ae:	dcf0      	bgt.n	8010492 <_printf_float+0x442>
 80104b0:	e6fa      	b.n	80102a8 <_printf_float+0x258>
 80104b2:	f04f 0800 	mov.w	r8, #0
 80104b6:	f104 0919 	add.w	r9, r4, #25
 80104ba:	e7f4      	b.n	80104a6 <_printf_float+0x456>

080104bc <_printf_common>:
 80104bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c0:	4616      	mov	r6, r2
 80104c2:	4699      	mov	r9, r3
 80104c4:	688a      	ldr	r2, [r1, #8]
 80104c6:	690b      	ldr	r3, [r1, #16]
 80104c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104cc:	4293      	cmp	r3, r2
 80104ce:	bfb8      	it	lt
 80104d0:	4613      	movlt	r3, r2
 80104d2:	6033      	str	r3, [r6, #0]
 80104d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104d8:	4607      	mov	r7, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	b10a      	cbz	r2, 80104e2 <_printf_common+0x26>
 80104de:	3301      	adds	r3, #1
 80104e0:	6033      	str	r3, [r6, #0]
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	0699      	lsls	r1, r3, #26
 80104e6:	bf42      	ittt	mi
 80104e8:	6833      	ldrmi	r3, [r6, #0]
 80104ea:	3302      	addmi	r3, #2
 80104ec:	6033      	strmi	r3, [r6, #0]
 80104ee:	6825      	ldr	r5, [r4, #0]
 80104f0:	f015 0506 	ands.w	r5, r5, #6
 80104f4:	d106      	bne.n	8010504 <_printf_common+0x48>
 80104f6:	f104 0a19 	add.w	sl, r4, #25
 80104fa:	68e3      	ldr	r3, [r4, #12]
 80104fc:	6832      	ldr	r2, [r6, #0]
 80104fe:	1a9b      	subs	r3, r3, r2
 8010500:	42ab      	cmp	r3, r5
 8010502:	dc26      	bgt.n	8010552 <_printf_common+0x96>
 8010504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010508:	1e13      	subs	r3, r2, #0
 801050a:	6822      	ldr	r2, [r4, #0]
 801050c:	bf18      	it	ne
 801050e:	2301      	movne	r3, #1
 8010510:	0692      	lsls	r2, r2, #26
 8010512:	d42b      	bmi.n	801056c <_printf_common+0xb0>
 8010514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010518:	4649      	mov	r1, r9
 801051a:	4638      	mov	r0, r7
 801051c:	47c0      	blx	r8
 801051e:	3001      	adds	r0, #1
 8010520:	d01e      	beq.n	8010560 <_printf_common+0xa4>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	68e5      	ldr	r5, [r4, #12]
 8010526:	6832      	ldr	r2, [r6, #0]
 8010528:	f003 0306 	and.w	r3, r3, #6
 801052c:	2b04      	cmp	r3, #4
 801052e:	bf08      	it	eq
 8010530:	1aad      	subeq	r5, r5, r2
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	6922      	ldr	r2, [r4, #16]
 8010536:	bf0c      	ite	eq
 8010538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801053c:	2500      	movne	r5, #0
 801053e:	4293      	cmp	r3, r2
 8010540:	bfc4      	itt	gt
 8010542:	1a9b      	subgt	r3, r3, r2
 8010544:	18ed      	addgt	r5, r5, r3
 8010546:	2600      	movs	r6, #0
 8010548:	341a      	adds	r4, #26
 801054a:	42b5      	cmp	r5, r6
 801054c:	d11a      	bne.n	8010584 <_printf_common+0xc8>
 801054e:	2000      	movs	r0, #0
 8010550:	e008      	b.n	8010564 <_printf_common+0xa8>
 8010552:	2301      	movs	r3, #1
 8010554:	4652      	mov	r2, sl
 8010556:	4649      	mov	r1, r9
 8010558:	4638      	mov	r0, r7
 801055a:	47c0      	blx	r8
 801055c:	3001      	adds	r0, #1
 801055e:	d103      	bne.n	8010568 <_printf_common+0xac>
 8010560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010568:	3501      	adds	r5, #1
 801056a:	e7c6      	b.n	80104fa <_printf_common+0x3e>
 801056c:	18e1      	adds	r1, r4, r3
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	2030      	movs	r0, #48	; 0x30
 8010572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010576:	4422      	add	r2, r4
 8010578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801057c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010580:	3302      	adds	r3, #2
 8010582:	e7c7      	b.n	8010514 <_printf_common+0x58>
 8010584:	2301      	movs	r3, #1
 8010586:	4622      	mov	r2, r4
 8010588:	4649      	mov	r1, r9
 801058a:	4638      	mov	r0, r7
 801058c:	47c0      	blx	r8
 801058e:	3001      	adds	r0, #1
 8010590:	d0e6      	beq.n	8010560 <_printf_common+0xa4>
 8010592:	3601      	adds	r6, #1
 8010594:	e7d9      	b.n	801054a <_printf_common+0x8e>
	...

08010598 <_printf_i>:
 8010598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801059c:	7e0f      	ldrb	r7, [r1, #24]
 801059e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105a0:	2f78      	cmp	r7, #120	; 0x78
 80105a2:	4691      	mov	r9, r2
 80105a4:	4680      	mov	r8, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	469a      	mov	sl, r3
 80105aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105ae:	d807      	bhi.n	80105c0 <_printf_i+0x28>
 80105b0:	2f62      	cmp	r7, #98	; 0x62
 80105b2:	d80a      	bhi.n	80105ca <_printf_i+0x32>
 80105b4:	2f00      	cmp	r7, #0
 80105b6:	f000 80d8 	beq.w	801076a <_printf_i+0x1d2>
 80105ba:	2f58      	cmp	r7, #88	; 0x58
 80105bc:	f000 80a3 	beq.w	8010706 <_printf_i+0x16e>
 80105c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105c8:	e03a      	b.n	8010640 <_printf_i+0xa8>
 80105ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105ce:	2b15      	cmp	r3, #21
 80105d0:	d8f6      	bhi.n	80105c0 <_printf_i+0x28>
 80105d2:	a101      	add	r1, pc, #4	; (adr r1, 80105d8 <_printf_i+0x40>)
 80105d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105d8:	08010631 	.word	0x08010631
 80105dc:	08010645 	.word	0x08010645
 80105e0:	080105c1 	.word	0x080105c1
 80105e4:	080105c1 	.word	0x080105c1
 80105e8:	080105c1 	.word	0x080105c1
 80105ec:	080105c1 	.word	0x080105c1
 80105f0:	08010645 	.word	0x08010645
 80105f4:	080105c1 	.word	0x080105c1
 80105f8:	080105c1 	.word	0x080105c1
 80105fc:	080105c1 	.word	0x080105c1
 8010600:	080105c1 	.word	0x080105c1
 8010604:	08010751 	.word	0x08010751
 8010608:	08010675 	.word	0x08010675
 801060c:	08010733 	.word	0x08010733
 8010610:	080105c1 	.word	0x080105c1
 8010614:	080105c1 	.word	0x080105c1
 8010618:	08010773 	.word	0x08010773
 801061c:	080105c1 	.word	0x080105c1
 8010620:	08010675 	.word	0x08010675
 8010624:	080105c1 	.word	0x080105c1
 8010628:	080105c1 	.word	0x080105c1
 801062c:	0801073b 	.word	0x0801073b
 8010630:	682b      	ldr	r3, [r5, #0]
 8010632:	1d1a      	adds	r2, r3, #4
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	602a      	str	r2, [r5, #0]
 8010638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801063c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010640:	2301      	movs	r3, #1
 8010642:	e0a3      	b.n	801078c <_printf_i+0x1f4>
 8010644:	6820      	ldr	r0, [r4, #0]
 8010646:	6829      	ldr	r1, [r5, #0]
 8010648:	0606      	lsls	r6, r0, #24
 801064a:	f101 0304 	add.w	r3, r1, #4
 801064e:	d50a      	bpl.n	8010666 <_printf_i+0xce>
 8010650:	680e      	ldr	r6, [r1, #0]
 8010652:	602b      	str	r3, [r5, #0]
 8010654:	2e00      	cmp	r6, #0
 8010656:	da03      	bge.n	8010660 <_printf_i+0xc8>
 8010658:	232d      	movs	r3, #45	; 0x2d
 801065a:	4276      	negs	r6, r6
 801065c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010660:	485e      	ldr	r0, [pc, #376]	; (80107dc <_printf_i+0x244>)
 8010662:	230a      	movs	r3, #10
 8010664:	e019      	b.n	801069a <_printf_i+0x102>
 8010666:	680e      	ldr	r6, [r1, #0]
 8010668:	602b      	str	r3, [r5, #0]
 801066a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801066e:	bf18      	it	ne
 8010670:	b236      	sxthne	r6, r6
 8010672:	e7ef      	b.n	8010654 <_printf_i+0xbc>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	1d19      	adds	r1, r3, #4
 801067a:	6029      	str	r1, [r5, #0]
 801067c:	0601      	lsls	r1, r0, #24
 801067e:	d501      	bpl.n	8010684 <_printf_i+0xec>
 8010680:	681e      	ldr	r6, [r3, #0]
 8010682:	e002      	b.n	801068a <_printf_i+0xf2>
 8010684:	0646      	lsls	r6, r0, #25
 8010686:	d5fb      	bpl.n	8010680 <_printf_i+0xe8>
 8010688:	881e      	ldrh	r6, [r3, #0]
 801068a:	4854      	ldr	r0, [pc, #336]	; (80107dc <_printf_i+0x244>)
 801068c:	2f6f      	cmp	r7, #111	; 0x6f
 801068e:	bf0c      	ite	eq
 8010690:	2308      	moveq	r3, #8
 8010692:	230a      	movne	r3, #10
 8010694:	2100      	movs	r1, #0
 8010696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801069a:	6865      	ldr	r5, [r4, #4]
 801069c:	60a5      	str	r5, [r4, #8]
 801069e:	2d00      	cmp	r5, #0
 80106a0:	bfa2      	ittt	ge
 80106a2:	6821      	ldrge	r1, [r4, #0]
 80106a4:	f021 0104 	bicge.w	r1, r1, #4
 80106a8:	6021      	strge	r1, [r4, #0]
 80106aa:	b90e      	cbnz	r6, 80106b0 <_printf_i+0x118>
 80106ac:	2d00      	cmp	r5, #0
 80106ae:	d04d      	beq.n	801074c <_printf_i+0x1b4>
 80106b0:	4615      	mov	r5, r2
 80106b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80106b6:	fb03 6711 	mls	r7, r3, r1, r6
 80106ba:	5dc7      	ldrb	r7, [r0, r7]
 80106bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106c0:	4637      	mov	r7, r6
 80106c2:	42bb      	cmp	r3, r7
 80106c4:	460e      	mov	r6, r1
 80106c6:	d9f4      	bls.n	80106b2 <_printf_i+0x11a>
 80106c8:	2b08      	cmp	r3, #8
 80106ca:	d10b      	bne.n	80106e4 <_printf_i+0x14c>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	07de      	lsls	r6, r3, #31
 80106d0:	d508      	bpl.n	80106e4 <_printf_i+0x14c>
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	6861      	ldr	r1, [r4, #4]
 80106d6:	4299      	cmp	r1, r3
 80106d8:	bfde      	ittt	le
 80106da:	2330      	movle	r3, #48	; 0x30
 80106dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80106e4:	1b52      	subs	r2, r2, r5
 80106e6:	6122      	str	r2, [r4, #16]
 80106e8:	f8cd a000 	str.w	sl, [sp]
 80106ec:	464b      	mov	r3, r9
 80106ee:	aa03      	add	r2, sp, #12
 80106f0:	4621      	mov	r1, r4
 80106f2:	4640      	mov	r0, r8
 80106f4:	f7ff fee2 	bl	80104bc <_printf_common>
 80106f8:	3001      	adds	r0, #1
 80106fa:	d14c      	bne.n	8010796 <_printf_i+0x1fe>
 80106fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010700:	b004      	add	sp, #16
 8010702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010706:	4835      	ldr	r0, [pc, #212]	; (80107dc <_printf_i+0x244>)
 8010708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801070c:	6829      	ldr	r1, [r5, #0]
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	f851 6b04 	ldr.w	r6, [r1], #4
 8010714:	6029      	str	r1, [r5, #0]
 8010716:	061d      	lsls	r5, r3, #24
 8010718:	d514      	bpl.n	8010744 <_printf_i+0x1ac>
 801071a:	07df      	lsls	r7, r3, #31
 801071c:	bf44      	itt	mi
 801071e:	f043 0320 	orrmi.w	r3, r3, #32
 8010722:	6023      	strmi	r3, [r4, #0]
 8010724:	b91e      	cbnz	r6, 801072e <_printf_i+0x196>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	f023 0320 	bic.w	r3, r3, #32
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	2310      	movs	r3, #16
 8010730:	e7b0      	b.n	8010694 <_printf_i+0xfc>
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	f043 0320 	orr.w	r3, r3, #32
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	2378      	movs	r3, #120	; 0x78
 801073c:	4828      	ldr	r0, [pc, #160]	; (80107e0 <_printf_i+0x248>)
 801073e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010742:	e7e3      	b.n	801070c <_printf_i+0x174>
 8010744:	0659      	lsls	r1, r3, #25
 8010746:	bf48      	it	mi
 8010748:	b2b6      	uxthmi	r6, r6
 801074a:	e7e6      	b.n	801071a <_printf_i+0x182>
 801074c:	4615      	mov	r5, r2
 801074e:	e7bb      	b.n	80106c8 <_printf_i+0x130>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	6826      	ldr	r6, [r4, #0]
 8010754:	6961      	ldr	r1, [r4, #20]
 8010756:	1d18      	adds	r0, r3, #4
 8010758:	6028      	str	r0, [r5, #0]
 801075a:	0635      	lsls	r5, r6, #24
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	d501      	bpl.n	8010764 <_printf_i+0x1cc>
 8010760:	6019      	str	r1, [r3, #0]
 8010762:	e002      	b.n	801076a <_printf_i+0x1d2>
 8010764:	0670      	lsls	r0, r6, #25
 8010766:	d5fb      	bpl.n	8010760 <_printf_i+0x1c8>
 8010768:	8019      	strh	r1, [r3, #0]
 801076a:	2300      	movs	r3, #0
 801076c:	6123      	str	r3, [r4, #16]
 801076e:	4615      	mov	r5, r2
 8010770:	e7ba      	b.n	80106e8 <_printf_i+0x150>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	1d1a      	adds	r2, r3, #4
 8010776:	602a      	str	r2, [r5, #0]
 8010778:	681d      	ldr	r5, [r3, #0]
 801077a:	6862      	ldr	r2, [r4, #4]
 801077c:	2100      	movs	r1, #0
 801077e:	4628      	mov	r0, r5
 8010780:	f7ef fd46 	bl	8000210 <memchr>
 8010784:	b108      	cbz	r0, 801078a <_printf_i+0x1f2>
 8010786:	1b40      	subs	r0, r0, r5
 8010788:	6060      	str	r0, [r4, #4]
 801078a:	6863      	ldr	r3, [r4, #4]
 801078c:	6123      	str	r3, [r4, #16]
 801078e:	2300      	movs	r3, #0
 8010790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010794:	e7a8      	b.n	80106e8 <_printf_i+0x150>
 8010796:	6923      	ldr	r3, [r4, #16]
 8010798:	462a      	mov	r2, r5
 801079a:	4649      	mov	r1, r9
 801079c:	4640      	mov	r0, r8
 801079e:	47d0      	blx	sl
 80107a0:	3001      	adds	r0, #1
 80107a2:	d0ab      	beq.n	80106fc <_printf_i+0x164>
 80107a4:	6823      	ldr	r3, [r4, #0]
 80107a6:	079b      	lsls	r3, r3, #30
 80107a8:	d413      	bmi.n	80107d2 <_printf_i+0x23a>
 80107aa:	68e0      	ldr	r0, [r4, #12]
 80107ac:	9b03      	ldr	r3, [sp, #12]
 80107ae:	4298      	cmp	r0, r3
 80107b0:	bfb8      	it	lt
 80107b2:	4618      	movlt	r0, r3
 80107b4:	e7a4      	b.n	8010700 <_printf_i+0x168>
 80107b6:	2301      	movs	r3, #1
 80107b8:	4632      	mov	r2, r6
 80107ba:	4649      	mov	r1, r9
 80107bc:	4640      	mov	r0, r8
 80107be:	47d0      	blx	sl
 80107c0:	3001      	adds	r0, #1
 80107c2:	d09b      	beq.n	80106fc <_printf_i+0x164>
 80107c4:	3501      	adds	r5, #1
 80107c6:	68e3      	ldr	r3, [r4, #12]
 80107c8:	9903      	ldr	r1, [sp, #12]
 80107ca:	1a5b      	subs	r3, r3, r1
 80107cc:	42ab      	cmp	r3, r5
 80107ce:	dcf2      	bgt.n	80107b6 <_printf_i+0x21e>
 80107d0:	e7eb      	b.n	80107aa <_printf_i+0x212>
 80107d2:	2500      	movs	r5, #0
 80107d4:	f104 0619 	add.w	r6, r4, #25
 80107d8:	e7f5      	b.n	80107c6 <_printf_i+0x22e>
 80107da:	bf00      	nop
 80107dc:	08012b6e 	.word	0x08012b6e
 80107e0:	08012b7f 	.word	0x08012b7f

080107e4 <iprintf>:
 80107e4:	b40f      	push	{r0, r1, r2, r3}
 80107e6:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <iprintf+0x2c>)
 80107e8:	b513      	push	{r0, r1, r4, lr}
 80107ea:	681c      	ldr	r4, [r3, #0]
 80107ec:	b124      	cbz	r4, 80107f8 <iprintf+0x14>
 80107ee:	69a3      	ldr	r3, [r4, #24]
 80107f0:	b913      	cbnz	r3, 80107f8 <iprintf+0x14>
 80107f2:	4620      	mov	r0, r4
 80107f4:	f000 ff0e 	bl	8011614 <__sinit>
 80107f8:	ab05      	add	r3, sp, #20
 80107fa:	9a04      	ldr	r2, [sp, #16]
 80107fc:	68a1      	ldr	r1, [r4, #8]
 80107fe:	9301      	str	r3, [sp, #4]
 8010800:	4620      	mov	r0, r4
 8010802:	f001 fba1 	bl	8011f48 <_vfiprintf_r>
 8010806:	b002      	add	sp, #8
 8010808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801080c:	b004      	add	sp, #16
 801080e:	4770      	bx	lr
 8010810:	20000188 	.word	0x20000188

08010814 <_sbrk_r>:
 8010814:	b538      	push	{r3, r4, r5, lr}
 8010816:	4d06      	ldr	r5, [pc, #24]	; (8010830 <_sbrk_r+0x1c>)
 8010818:	2300      	movs	r3, #0
 801081a:	4604      	mov	r4, r0
 801081c:	4608      	mov	r0, r1
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	f001 ffe8 	bl	80127f4 <_sbrk>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_sbrk_r+0x1a>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_sbrk_r+0x1a>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	200029c8 	.word	0x200029c8

08010834 <__assert_func>:
 8010834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010836:	4614      	mov	r4, r2
 8010838:	461a      	mov	r2, r3
 801083a:	4b09      	ldr	r3, [pc, #36]	; (8010860 <__assert_func+0x2c>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4605      	mov	r5, r0
 8010840:	68d8      	ldr	r0, [r3, #12]
 8010842:	b14c      	cbz	r4, 8010858 <__assert_func+0x24>
 8010844:	4b07      	ldr	r3, [pc, #28]	; (8010864 <__assert_func+0x30>)
 8010846:	9100      	str	r1, [sp, #0]
 8010848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801084c:	4906      	ldr	r1, [pc, #24]	; (8010868 <__assert_func+0x34>)
 801084e:	462b      	mov	r3, r5
 8010850:	f000 ff5e 	bl	8011710 <fiprintf>
 8010854:	f001 fdcc 	bl	80123f0 <abort>
 8010858:	4b04      	ldr	r3, [pc, #16]	; (801086c <__assert_func+0x38>)
 801085a:	461c      	mov	r4, r3
 801085c:	e7f3      	b.n	8010846 <__assert_func+0x12>
 801085e:	bf00      	nop
 8010860:	20000188 	.word	0x20000188
 8010864:	08012b90 	.word	0x08012b90
 8010868:	08012b9d 	.word	0x08012b9d
 801086c:	08012bcb 	.word	0x08012bcb

08010870 <quorem>:
 8010870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	6903      	ldr	r3, [r0, #16]
 8010876:	690c      	ldr	r4, [r1, #16]
 8010878:	42a3      	cmp	r3, r4
 801087a:	4607      	mov	r7, r0
 801087c:	f2c0 8081 	blt.w	8010982 <quorem+0x112>
 8010880:	3c01      	subs	r4, #1
 8010882:	f101 0814 	add.w	r8, r1, #20
 8010886:	f100 0514 	add.w	r5, r0, #20
 801088a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010898:	3301      	adds	r3, #1
 801089a:	429a      	cmp	r2, r3
 801089c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80108a8:	d331      	bcc.n	801090e <quorem+0x9e>
 80108aa:	f04f 0e00 	mov.w	lr, #0
 80108ae:	4640      	mov	r0, r8
 80108b0:	46ac      	mov	ip, r5
 80108b2:	46f2      	mov	sl, lr
 80108b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80108b8:	b293      	uxth	r3, r2
 80108ba:	fb06 e303 	mla	r3, r6, r3, lr
 80108be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	ebaa 0303 	sub.w	r3, sl, r3
 80108c8:	f8dc a000 	ldr.w	sl, [ip]
 80108cc:	0c12      	lsrs	r2, r2, #16
 80108ce:	fa13 f38a 	uxtah	r3, r3, sl
 80108d2:	fb06 e202 	mla	r2, r6, r2, lr
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	9b00      	ldr	r3, [sp, #0]
 80108da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108de:	b292      	uxth	r2, r2
 80108e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80108e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80108ec:	4581      	cmp	r9, r0
 80108ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108f2:	f84c 3b04 	str.w	r3, [ip], #4
 80108f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108fa:	d2db      	bcs.n	80108b4 <quorem+0x44>
 80108fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8010900:	b92b      	cbnz	r3, 801090e <quorem+0x9e>
 8010902:	9b01      	ldr	r3, [sp, #4]
 8010904:	3b04      	subs	r3, #4
 8010906:	429d      	cmp	r5, r3
 8010908:	461a      	mov	r2, r3
 801090a:	d32e      	bcc.n	801096a <quorem+0xfa>
 801090c:	613c      	str	r4, [r7, #16]
 801090e:	4638      	mov	r0, r7
 8010910:	f001 f9d8 	bl	8011cc4 <__mcmp>
 8010914:	2800      	cmp	r0, #0
 8010916:	db24      	blt.n	8010962 <quorem+0xf2>
 8010918:	3601      	adds	r6, #1
 801091a:	4628      	mov	r0, r5
 801091c:	f04f 0c00 	mov.w	ip, #0
 8010920:	f858 2b04 	ldr.w	r2, [r8], #4
 8010924:	f8d0 e000 	ldr.w	lr, [r0]
 8010928:	b293      	uxth	r3, r2
 801092a:	ebac 0303 	sub.w	r3, ip, r3
 801092e:	0c12      	lsrs	r2, r2, #16
 8010930:	fa13 f38e 	uxtah	r3, r3, lr
 8010934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801093c:	b29b      	uxth	r3, r3
 801093e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010942:	45c1      	cmp	r9, r8
 8010944:	f840 3b04 	str.w	r3, [r0], #4
 8010948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801094c:	d2e8      	bcs.n	8010920 <quorem+0xb0>
 801094e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010956:	b922      	cbnz	r2, 8010962 <quorem+0xf2>
 8010958:	3b04      	subs	r3, #4
 801095a:	429d      	cmp	r5, r3
 801095c:	461a      	mov	r2, r3
 801095e:	d30a      	bcc.n	8010976 <quorem+0x106>
 8010960:	613c      	str	r4, [r7, #16]
 8010962:	4630      	mov	r0, r6
 8010964:	b003      	add	sp, #12
 8010966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096a:	6812      	ldr	r2, [r2, #0]
 801096c:	3b04      	subs	r3, #4
 801096e:	2a00      	cmp	r2, #0
 8010970:	d1cc      	bne.n	801090c <quorem+0x9c>
 8010972:	3c01      	subs	r4, #1
 8010974:	e7c7      	b.n	8010906 <quorem+0x96>
 8010976:	6812      	ldr	r2, [r2, #0]
 8010978:	3b04      	subs	r3, #4
 801097a:	2a00      	cmp	r2, #0
 801097c:	d1f0      	bne.n	8010960 <quorem+0xf0>
 801097e:	3c01      	subs	r4, #1
 8010980:	e7eb      	b.n	801095a <quorem+0xea>
 8010982:	2000      	movs	r0, #0
 8010984:	e7ee      	b.n	8010964 <quorem+0xf4>
	...

08010988 <_dtoa_r>:
 8010988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098c:	ed2d 8b04 	vpush	{d8-d9}
 8010990:	ec57 6b10 	vmov	r6, r7, d0
 8010994:	b093      	sub	sp, #76	; 0x4c
 8010996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801099c:	9106      	str	r1, [sp, #24]
 801099e:	ee10 aa10 	vmov	sl, s0
 80109a2:	4604      	mov	r4, r0
 80109a4:	9209      	str	r2, [sp, #36]	; 0x24
 80109a6:	930c      	str	r3, [sp, #48]	; 0x30
 80109a8:	46bb      	mov	fp, r7
 80109aa:	b975      	cbnz	r5, 80109ca <_dtoa_r+0x42>
 80109ac:	2010      	movs	r0, #16
 80109ae:	f7ff f9b1 	bl	800fd14 <malloc>
 80109b2:	4602      	mov	r2, r0
 80109b4:	6260      	str	r0, [r4, #36]	; 0x24
 80109b6:	b920      	cbnz	r0, 80109c2 <_dtoa_r+0x3a>
 80109b8:	4ba7      	ldr	r3, [pc, #668]	; (8010c58 <_dtoa_r+0x2d0>)
 80109ba:	21ea      	movs	r1, #234	; 0xea
 80109bc:	48a7      	ldr	r0, [pc, #668]	; (8010c5c <_dtoa_r+0x2d4>)
 80109be:	f7ff ff39 	bl	8010834 <__assert_func>
 80109c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109c6:	6005      	str	r5, [r0, #0]
 80109c8:	60c5      	str	r5, [r0, #12]
 80109ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109cc:	6819      	ldr	r1, [r3, #0]
 80109ce:	b151      	cbz	r1, 80109e6 <_dtoa_r+0x5e>
 80109d0:	685a      	ldr	r2, [r3, #4]
 80109d2:	604a      	str	r2, [r1, #4]
 80109d4:	2301      	movs	r3, #1
 80109d6:	4093      	lsls	r3, r2
 80109d8:	608b      	str	r3, [r1, #8]
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 ff30 	bl	8011840 <_Bfree>
 80109e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109e2:	2200      	movs	r2, #0
 80109e4:	601a      	str	r2, [r3, #0]
 80109e6:	1e3b      	subs	r3, r7, #0
 80109e8:	bfaa      	itet	ge
 80109ea:	2300      	movge	r3, #0
 80109ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80109f0:	f8c8 3000 	strge.w	r3, [r8]
 80109f4:	4b9a      	ldr	r3, [pc, #616]	; (8010c60 <_dtoa_r+0x2d8>)
 80109f6:	bfbc      	itt	lt
 80109f8:	2201      	movlt	r2, #1
 80109fa:	f8c8 2000 	strlt.w	r2, [r8]
 80109fe:	ea33 030b 	bics.w	r3, r3, fp
 8010a02:	d11b      	bne.n	8010a3c <_dtoa_r+0xb4>
 8010a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a0a:	6013      	str	r3, [r2, #0]
 8010a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a10:	4333      	orrs	r3, r6
 8010a12:	f000 8592 	beq.w	801153a <_dtoa_r+0xbb2>
 8010a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a18:	b963      	cbnz	r3, 8010a34 <_dtoa_r+0xac>
 8010a1a:	4b92      	ldr	r3, [pc, #584]	; (8010c64 <_dtoa_r+0x2dc>)
 8010a1c:	e022      	b.n	8010a64 <_dtoa_r+0xdc>
 8010a1e:	4b92      	ldr	r3, [pc, #584]	; (8010c68 <_dtoa_r+0x2e0>)
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	3308      	adds	r3, #8
 8010a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	9801      	ldr	r0, [sp, #4]
 8010a2a:	b013      	add	sp, #76	; 0x4c
 8010a2c:	ecbd 8b04 	vpop	{d8-d9}
 8010a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a34:	4b8b      	ldr	r3, [pc, #556]	; (8010c64 <_dtoa_r+0x2dc>)
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	3303      	adds	r3, #3
 8010a3a:	e7f3      	b.n	8010a24 <_dtoa_r+0x9c>
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	2300      	movs	r3, #0
 8010a40:	4650      	mov	r0, sl
 8010a42:	4659      	mov	r1, fp
 8010a44:	f7f0 f858 	bl	8000af8 <__aeabi_dcmpeq>
 8010a48:	ec4b ab19 	vmov	d9, sl, fp
 8010a4c:	4680      	mov	r8, r0
 8010a4e:	b158      	cbz	r0, 8010a68 <_dtoa_r+0xe0>
 8010a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a52:	2301      	movs	r3, #1
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 856b 	beq.w	8011534 <_dtoa_r+0xbac>
 8010a5e:	4883      	ldr	r0, [pc, #524]	; (8010c6c <_dtoa_r+0x2e4>)
 8010a60:	6018      	str	r0, [r3, #0]
 8010a62:	1e43      	subs	r3, r0, #1
 8010a64:	9301      	str	r3, [sp, #4]
 8010a66:	e7df      	b.n	8010a28 <_dtoa_r+0xa0>
 8010a68:	ec4b ab10 	vmov	d0, sl, fp
 8010a6c:	aa10      	add	r2, sp, #64	; 0x40
 8010a6e:	a911      	add	r1, sp, #68	; 0x44
 8010a70:	4620      	mov	r0, r4
 8010a72:	f001 f9cd 	bl	8011e10 <__d2b>
 8010a76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a7a:	ee08 0a10 	vmov	s16, r0
 8010a7e:	2d00      	cmp	r5, #0
 8010a80:	f000 8084 	beq.w	8010b8c <_dtoa_r+0x204>
 8010a84:	ee19 3a90 	vmov	r3, s19
 8010a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a90:	4656      	mov	r6, sl
 8010a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010a9e:	4b74      	ldr	r3, [pc, #464]	; (8010c70 <_dtoa_r+0x2e8>)
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	f7ef fc07 	bl	80002b8 <__aeabi_dsub>
 8010aaa:	a365      	add	r3, pc, #404	; (adr r3, 8010c40 <_dtoa_r+0x2b8>)
 8010aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab0:	f7ef fdba 	bl	8000628 <__aeabi_dmul>
 8010ab4:	a364      	add	r3, pc, #400	; (adr r3, 8010c48 <_dtoa_r+0x2c0>)
 8010ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aba:	f7ef fbff 	bl	80002bc <__adddf3>
 8010abe:	4606      	mov	r6, r0
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	460f      	mov	r7, r1
 8010ac4:	f7ef fd46 	bl	8000554 <__aeabi_i2d>
 8010ac8:	a361      	add	r3, pc, #388	; (adr r3, 8010c50 <_dtoa_r+0x2c8>)
 8010aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ace:	f7ef fdab 	bl	8000628 <__aeabi_dmul>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	4639      	mov	r1, r7
 8010ada:	f7ef fbef 	bl	80002bc <__adddf3>
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	f7f0 f851 	bl	8000b88 <__aeabi_d2iz>
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	9000      	str	r0, [sp, #0]
 8010aea:	2300      	movs	r3, #0
 8010aec:	4630      	mov	r0, r6
 8010aee:	4639      	mov	r1, r7
 8010af0:	f7f0 f80c 	bl	8000b0c <__aeabi_dcmplt>
 8010af4:	b150      	cbz	r0, 8010b0c <_dtoa_r+0x184>
 8010af6:	9800      	ldr	r0, [sp, #0]
 8010af8:	f7ef fd2c 	bl	8000554 <__aeabi_i2d>
 8010afc:	4632      	mov	r2, r6
 8010afe:	463b      	mov	r3, r7
 8010b00:	f7ef fffa 	bl	8000af8 <__aeabi_dcmpeq>
 8010b04:	b910      	cbnz	r0, 8010b0c <_dtoa_r+0x184>
 8010b06:	9b00      	ldr	r3, [sp, #0]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	9b00      	ldr	r3, [sp, #0]
 8010b0e:	2b16      	cmp	r3, #22
 8010b10:	d85a      	bhi.n	8010bc8 <_dtoa_r+0x240>
 8010b12:	9a00      	ldr	r2, [sp, #0]
 8010b14:	4b57      	ldr	r3, [pc, #348]	; (8010c74 <_dtoa_r+0x2ec>)
 8010b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	ec51 0b19 	vmov	r0, r1, d9
 8010b22:	f7ef fff3 	bl	8000b0c <__aeabi_dcmplt>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d050      	beq.n	8010bcc <_dtoa_r+0x244>
 8010b2a:	9b00      	ldr	r3, [sp, #0]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	2300      	movs	r3, #0
 8010b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b36:	1b5d      	subs	r5, r3, r5
 8010b38:	1e6b      	subs	r3, r5, #1
 8010b3a:	9305      	str	r3, [sp, #20]
 8010b3c:	bf45      	ittet	mi
 8010b3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b42:	9304      	strmi	r3, [sp, #16]
 8010b44:	2300      	movpl	r3, #0
 8010b46:	2300      	movmi	r3, #0
 8010b48:	bf4c      	ite	mi
 8010b4a:	9305      	strmi	r3, [sp, #20]
 8010b4c:	9304      	strpl	r3, [sp, #16]
 8010b4e:	9b00      	ldr	r3, [sp, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	db3d      	blt.n	8010bd0 <_dtoa_r+0x248>
 8010b54:	9b05      	ldr	r3, [sp, #20]
 8010b56:	9a00      	ldr	r2, [sp, #0]
 8010b58:	920a      	str	r2, [sp, #40]	; 0x28
 8010b5a:	4413      	add	r3, r2
 8010b5c:	9305      	str	r3, [sp, #20]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9307      	str	r3, [sp, #28]
 8010b62:	9b06      	ldr	r3, [sp, #24]
 8010b64:	2b09      	cmp	r3, #9
 8010b66:	f200 8089 	bhi.w	8010c7c <_dtoa_r+0x2f4>
 8010b6a:	2b05      	cmp	r3, #5
 8010b6c:	bfc4      	itt	gt
 8010b6e:	3b04      	subgt	r3, #4
 8010b70:	9306      	strgt	r3, [sp, #24]
 8010b72:	9b06      	ldr	r3, [sp, #24]
 8010b74:	f1a3 0302 	sub.w	r3, r3, #2
 8010b78:	bfcc      	ite	gt
 8010b7a:	2500      	movgt	r5, #0
 8010b7c:	2501      	movle	r5, #1
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	f200 8087 	bhi.w	8010c92 <_dtoa_r+0x30a>
 8010b84:	e8df f003 	tbb	[pc, r3]
 8010b88:	59383a2d 	.word	0x59383a2d
 8010b8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010b90:	441d      	add	r5, r3
 8010b92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b96:	2b20      	cmp	r3, #32
 8010b98:	bfc1      	itttt	gt
 8010b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010ba2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010ba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010baa:	bfda      	itte	le
 8010bac:	f1c3 0320 	rsble	r3, r3, #32
 8010bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8010bb4:	4318      	orrgt	r0, r3
 8010bb6:	f7ef fcbd 	bl	8000534 <__aeabi_ui2d>
 8010bba:	2301      	movs	r3, #1
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010bc2:	3d01      	subs	r5, #1
 8010bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8010bc6:	e76a      	b.n	8010a9e <_dtoa_r+0x116>
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e7b2      	b.n	8010b32 <_dtoa_r+0x1aa>
 8010bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bce:	e7b1      	b.n	8010b34 <_dtoa_r+0x1ac>
 8010bd0:	9b04      	ldr	r3, [sp, #16]
 8010bd2:	9a00      	ldr	r2, [sp, #0]
 8010bd4:	1a9b      	subs	r3, r3, r2
 8010bd6:	9304      	str	r3, [sp, #16]
 8010bd8:	4253      	negs	r3, r2
 8010bda:	9307      	str	r3, [sp, #28]
 8010bdc:	2300      	movs	r3, #0
 8010bde:	930a      	str	r3, [sp, #40]	; 0x28
 8010be0:	e7bf      	b.n	8010b62 <_dtoa_r+0x1da>
 8010be2:	2300      	movs	r3, #0
 8010be4:	9308      	str	r3, [sp, #32]
 8010be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	dc55      	bgt.n	8010c98 <_dtoa_r+0x310>
 8010bec:	2301      	movs	r3, #1
 8010bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8010bf6:	e00c      	b.n	8010c12 <_dtoa_r+0x28a>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e7f3      	b.n	8010be4 <_dtoa_r+0x25c>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c00:	9308      	str	r3, [sp, #32]
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	4413      	add	r3, r2
 8010c06:	9302      	str	r3, [sp, #8]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	9303      	str	r3, [sp, #12]
 8010c0e:	bfb8      	it	lt
 8010c10:	2301      	movlt	r3, #1
 8010c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010c14:	2200      	movs	r2, #0
 8010c16:	6042      	str	r2, [r0, #4]
 8010c18:	2204      	movs	r2, #4
 8010c1a:	f102 0614 	add.w	r6, r2, #20
 8010c1e:	429e      	cmp	r6, r3
 8010c20:	6841      	ldr	r1, [r0, #4]
 8010c22:	d93d      	bls.n	8010ca0 <_dtoa_r+0x318>
 8010c24:	4620      	mov	r0, r4
 8010c26:	f000 fdcb 	bl	80117c0 <_Balloc>
 8010c2a:	9001      	str	r0, [sp, #4]
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d13b      	bne.n	8010ca8 <_dtoa_r+0x320>
 8010c30:	4b11      	ldr	r3, [pc, #68]	; (8010c78 <_dtoa_r+0x2f0>)
 8010c32:	4602      	mov	r2, r0
 8010c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c38:	e6c0      	b.n	80109bc <_dtoa_r+0x34>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e7df      	b.n	8010bfe <_dtoa_r+0x276>
 8010c3e:	bf00      	nop
 8010c40:	636f4361 	.word	0x636f4361
 8010c44:	3fd287a7 	.word	0x3fd287a7
 8010c48:	8b60c8b3 	.word	0x8b60c8b3
 8010c4c:	3fc68a28 	.word	0x3fc68a28
 8010c50:	509f79fb 	.word	0x509f79fb
 8010c54:	3fd34413 	.word	0x3fd34413
 8010c58:	08012cda 	.word	0x08012cda
 8010c5c:	08012cf1 	.word	0x08012cf1
 8010c60:	7ff00000 	.word	0x7ff00000
 8010c64:	08012cd6 	.word	0x08012cd6
 8010c68:	08012ccd 	.word	0x08012ccd
 8010c6c:	08012b6d 	.word	0x08012b6d
 8010c70:	3ff80000 	.word	0x3ff80000
 8010c74:	08012e50 	.word	0x08012e50
 8010c78:	08012d4c 	.word	0x08012d4c
 8010c7c:	2501      	movs	r5, #1
 8010c7e:	2300      	movs	r3, #0
 8010c80:	9306      	str	r3, [sp, #24]
 8010c82:	9508      	str	r5, [sp, #32]
 8010c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2312      	movs	r3, #18
 8010c90:	e7b0      	b.n	8010bf4 <_dtoa_r+0x26c>
 8010c92:	2301      	movs	r3, #1
 8010c94:	9308      	str	r3, [sp, #32]
 8010c96:	e7f5      	b.n	8010c84 <_dtoa_r+0x2fc>
 8010c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c9e:	e7b8      	b.n	8010c12 <_dtoa_r+0x28a>
 8010ca0:	3101      	adds	r1, #1
 8010ca2:	6041      	str	r1, [r0, #4]
 8010ca4:	0052      	lsls	r2, r2, #1
 8010ca6:	e7b8      	b.n	8010c1a <_dtoa_r+0x292>
 8010ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010caa:	9a01      	ldr	r2, [sp, #4]
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	9b03      	ldr	r3, [sp, #12]
 8010cb0:	2b0e      	cmp	r3, #14
 8010cb2:	f200 809d 	bhi.w	8010df0 <_dtoa_r+0x468>
 8010cb6:	2d00      	cmp	r5, #0
 8010cb8:	f000 809a 	beq.w	8010df0 <_dtoa_r+0x468>
 8010cbc:	9b00      	ldr	r3, [sp, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	dd32      	ble.n	8010d28 <_dtoa_r+0x3a0>
 8010cc2:	4ab7      	ldr	r2, [pc, #732]	; (8010fa0 <_dtoa_r+0x618>)
 8010cc4:	f003 030f 	and.w	r3, r3, #15
 8010cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cd0:	9b00      	ldr	r3, [sp, #0]
 8010cd2:	05d8      	lsls	r0, r3, #23
 8010cd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010cd8:	d516      	bpl.n	8010d08 <_dtoa_r+0x380>
 8010cda:	4bb2      	ldr	r3, [pc, #712]	; (8010fa4 <_dtoa_r+0x61c>)
 8010cdc:	ec51 0b19 	vmov	r0, r1, d9
 8010ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ce4:	f7ef fdca 	bl	800087c <__aeabi_ddiv>
 8010ce8:	f007 070f 	and.w	r7, r7, #15
 8010cec:	4682      	mov	sl, r0
 8010cee:	468b      	mov	fp, r1
 8010cf0:	2503      	movs	r5, #3
 8010cf2:	4eac      	ldr	r6, [pc, #688]	; (8010fa4 <_dtoa_r+0x61c>)
 8010cf4:	b957      	cbnz	r7, 8010d0c <_dtoa_r+0x384>
 8010cf6:	4642      	mov	r2, r8
 8010cf8:	464b      	mov	r3, r9
 8010cfa:	4650      	mov	r0, sl
 8010cfc:	4659      	mov	r1, fp
 8010cfe:	f7ef fdbd 	bl	800087c <__aeabi_ddiv>
 8010d02:	4682      	mov	sl, r0
 8010d04:	468b      	mov	fp, r1
 8010d06:	e028      	b.n	8010d5a <_dtoa_r+0x3d2>
 8010d08:	2502      	movs	r5, #2
 8010d0a:	e7f2      	b.n	8010cf2 <_dtoa_r+0x36a>
 8010d0c:	07f9      	lsls	r1, r7, #31
 8010d0e:	d508      	bpl.n	8010d22 <_dtoa_r+0x39a>
 8010d10:	4640      	mov	r0, r8
 8010d12:	4649      	mov	r1, r9
 8010d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d18:	f7ef fc86 	bl	8000628 <__aeabi_dmul>
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	4680      	mov	r8, r0
 8010d20:	4689      	mov	r9, r1
 8010d22:	107f      	asrs	r7, r7, #1
 8010d24:	3608      	adds	r6, #8
 8010d26:	e7e5      	b.n	8010cf4 <_dtoa_r+0x36c>
 8010d28:	f000 809b 	beq.w	8010e62 <_dtoa_r+0x4da>
 8010d2c:	9b00      	ldr	r3, [sp, #0]
 8010d2e:	4f9d      	ldr	r7, [pc, #628]	; (8010fa4 <_dtoa_r+0x61c>)
 8010d30:	425e      	negs	r6, r3
 8010d32:	4b9b      	ldr	r3, [pc, #620]	; (8010fa0 <_dtoa_r+0x618>)
 8010d34:	f006 020f 	and.w	r2, r6, #15
 8010d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d40:	ec51 0b19 	vmov	r0, r1, d9
 8010d44:	f7ef fc70 	bl	8000628 <__aeabi_dmul>
 8010d48:	1136      	asrs	r6, r6, #4
 8010d4a:	4682      	mov	sl, r0
 8010d4c:	468b      	mov	fp, r1
 8010d4e:	2300      	movs	r3, #0
 8010d50:	2502      	movs	r5, #2
 8010d52:	2e00      	cmp	r6, #0
 8010d54:	d17a      	bne.n	8010e4c <_dtoa_r+0x4c4>
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1d3      	bne.n	8010d02 <_dtoa_r+0x37a>
 8010d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 8082 	beq.w	8010e66 <_dtoa_r+0x4de>
 8010d62:	4b91      	ldr	r3, [pc, #580]	; (8010fa8 <_dtoa_r+0x620>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	4650      	mov	r0, sl
 8010d68:	4659      	mov	r1, fp
 8010d6a:	f7ef fecf 	bl	8000b0c <__aeabi_dcmplt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d079      	beq.n	8010e66 <_dtoa_r+0x4de>
 8010d72:	9b03      	ldr	r3, [sp, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d076      	beq.n	8010e66 <_dtoa_r+0x4de>
 8010d78:	9b02      	ldr	r3, [sp, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	dd36      	ble.n	8010dec <_dtoa_r+0x464>
 8010d7e:	9b00      	ldr	r3, [sp, #0]
 8010d80:	4650      	mov	r0, sl
 8010d82:	4659      	mov	r1, fp
 8010d84:	1e5f      	subs	r7, r3, #1
 8010d86:	2200      	movs	r2, #0
 8010d88:	4b88      	ldr	r3, [pc, #544]	; (8010fac <_dtoa_r+0x624>)
 8010d8a:	f7ef fc4d 	bl	8000628 <__aeabi_dmul>
 8010d8e:	9e02      	ldr	r6, [sp, #8]
 8010d90:	4682      	mov	sl, r0
 8010d92:	468b      	mov	fp, r1
 8010d94:	3501      	adds	r5, #1
 8010d96:	4628      	mov	r0, r5
 8010d98:	f7ef fbdc 	bl	8000554 <__aeabi_i2d>
 8010d9c:	4652      	mov	r2, sl
 8010d9e:	465b      	mov	r3, fp
 8010da0:	f7ef fc42 	bl	8000628 <__aeabi_dmul>
 8010da4:	4b82      	ldr	r3, [pc, #520]	; (8010fb0 <_dtoa_r+0x628>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	f7ef fa88 	bl	80002bc <__adddf3>
 8010dac:	46d0      	mov	r8, sl
 8010dae:	46d9      	mov	r9, fp
 8010db0:	4682      	mov	sl, r0
 8010db2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010db6:	2e00      	cmp	r6, #0
 8010db8:	d158      	bne.n	8010e6c <_dtoa_r+0x4e4>
 8010dba:	4b7e      	ldr	r3, [pc, #504]	; (8010fb4 <_dtoa_r+0x62c>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4640      	mov	r0, r8
 8010dc0:	4649      	mov	r1, r9
 8010dc2:	f7ef fa79 	bl	80002b8 <__aeabi_dsub>
 8010dc6:	4652      	mov	r2, sl
 8010dc8:	465b      	mov	r3, fp
 8010dca:	4680      	mov	r8, r0
 8010dcc:	4689      	mov	r9, r1
 8010dce:	f7ef febb 	bl	8000b48 <__aeabi_dcmpgt>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	f040 8295 	bne.w	8011302 <_dtoa_r+0x97a>
 8010dd8:	4652      	mov	r2, sl
 8010dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010dde:	4640      	mov	r0, r8
 8010de0:	4649      	mov	r1, r9
 8010de2:	f7ef fe93 	bl	8000b0c <__aeabi_dcmplt>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	f040 8289 	bne.w	80112fe <_dtoa_r+0x976>
 8010dec:	ec5b ab19 	vmov	sl, fp, d9
 8010df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f2c0 8148 	blt.w	8011088 <_dtoa_r+0x700>
 8010df8:	9a00      	ldr	r2, [sp, #0]
 8010dfa:	2a0e      	cmp	r2, #14
 8010dfc:	f300 8144 	bgt.w	8011088 <_dtoa_r+0x700>
 8010e00:	4b67      	ldr	r3, [pc, #412]	; (8010fa0 <_dtoa_r+0x618>)
 8010e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f280 80d5 	bge.w	8010fbc <_dtoa_r+0x634>
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f300 80d1 	bgt.w	8010fbc <_dtoa_r+0x634>
 8010e1a:	f040 826f 	bne.w	80112fc <_dtoa_r+0x974>
 8010e1e:	4b65      	ldr	r3, [pc, #404]	; (8010fb4 <_dtoa_r+0x62c>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	4640      	mov	r0, r8
 8010e24:	4649      	mov	r1, r9
 8010e26:	f7ef fbff 	bl	8000628 <__aeabi_dmul>
 8010e2a:	4652      	mov	r2, sl
 8010e2c:	465b      	mov	r3, fp
 8010e2e:	f7ef fe81 	bl	8000b34 <__aeabi_dcmpge>
 8010e32:	9e03      	ldr	r6, [sp, #12]
 8010e34:	4637      	mov	r7, r6
 8010e36:	2800      	cmp	r0, #0
 8010e38:	f040 8245 	bne.w	80112c6 <_dtoa_r+0x93e>
 8010e3c:	9d01      	ldr	r5, [sp, #4]
 8010e3e:	2331      	movs	r3, #49	; 0x31
 8010e40:	f805 3b01 	strb.w	r3, [r5], #1
 8010e44:	9b00      	ldr	r3, [sp, #0]
 8010e46:	3301      	adds	r3, #1
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	e240      	b.n	80112ce <_dtoa_r+0x946>
 8010e4c:	07f2      	lsls	r2, r6, #31
 8010e4e:	d505      	bpl.n	8010e5c <_dtoa_r+0x4d4>
 8010e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e54:	f7ef fbe8 	bl	8000628 <__aeabi_dmul>
 8010e58:	3501      	adds	r5, #1
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	1076      	asrs	r6, r6, #1
 8010e5e:	3708      	adds	r7, #8
 8010e60:	e777      	b.n	8010d52 <_dtoa_r+0x3ca>
 8010e62:	2502      	movs	r5, #2
 8010e64:	e779      	b.n	8010d5a <_dtoa_r+0x3d2>
 8010e66:	9f00      	ldr	r7, [sp, #0]
 8010e68:	9e03      	ldr	r6, [sp, #12]
 8010e6a:	e794      	b.n	8010d96 <_dtoa_r+0x40e>
 8010e6c:	9901      	ldr	r1, [sp, #4]
 8010e6e:	4b4c      	ldr	r3, [pc, #304]	; (8010fa0 <_dtoa_r+0x618>)
 8010e70:	4431      	add	r1, r6
 8010e72:	910d      	str	r1, [sp, #52]	; 0x34
 8010e74:	9908      	ldr	r1, [sp, #32]
 8010e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e7e:	2900      	cmp	r1, #0
 8010e80:	d043      	beq.n	8010f0a <_dtoa_r+0x582>
 8010e82:	494d      	ldr	r1, [pc, #308]	; (8010fb8 <_dtoa_r+0x630>)
 8010e84:	2000      	movs	r0, #0
 8010e86:	f7ef fcf9 	bl	800087c <__aeabi_ddiv>
 8010e8a:	4652      	mov	r2, sl
 8010e8c:	465b      	mov	r3, fp
 8010e8e:	f7ef fa13 	bl	80002b8 <__aeabi_dsub>
 8010e92:	9d01      	ldr	r5, [sp, #4]
 8010e94:	4682      	mov	sl, r0
 8010e96:	468b      	mov	fp, r1
 8010e98:	4649      	mov	r1, r9
 8010e9a:	4640      	mov	r0, r8
 8010e9c:	f7ef fe74 	bl	8000b88 <__aeabi_d2iz>
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	f7ef fb57 	bl	8000554 <__aeabi_i2d>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4640      	mov	r0, r8
 8010eac:	4649      	mov	r1, r9
 8010eae:	f7ef fa03 	bl	80002b8 <__aeabi_dsub>
 8010eb2:	3630      	adds	r6, #48	; 0x30
 8010eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8010eb8:	4652      	mov	r2, sl
 8010eba:	465b      	mov	r3, fp
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	4689      	mov	r9, r1
 8010ec0:	f7ef fe24 	bl	8000b0c <__aeabi_dcmplt>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d163      	bne.n	8010f90 <_dtoa_r+0x608>
 8010ec8:	4642      	mov	r2, r8
 8010eca:	464b      	mov	r3, r9
 8010ecc:	4936      	ldr	r1, [pc, #216]	; (8010fa8 <_dtoa_r+0x620>)
 8010ece:	2000      	movs	r0, #0
 8010ed0:	f7ef f9f2 	bl	80002b8 <__aeabi_dsub>
 8010ed4:	4652      	mov	r2, sl
 8010ed6:	465b      	mov	r3, fp
 8010ed8:	f7ef fe18 	bl	8000b0c <__aeabi_dcmplt>
 8010edc:	2800      	cmp	r0, #0
 8010ede:	f040 80b5 	bne.w	801104c <_dtoa_r+0x6c4>
 8010ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ee4:	429d      	cmp	r5, r3
 8010ee6:	d081      	beq.n	8010dec <_dtoa_r+0x464>
 8010ee8:	4b30      	ldr	r3, [pc, #192]	; (8010fac <_dtoa_r+0x624>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	4650      	mov	r0, sl
 8010eee:	4659      	mov	r1, fp
 8010ef0:	f7ef fb9a 	bl	8000628 <__aeabi_dmul>
 8010ef4:	4b2d      	ldr	r3, [pc, #180]	; (8010fac <_dtoa_r+0x624>)
 8010ef6:	4682      	mov	sl, r0
 8010ef8:	468b      	mov	fp, r1
 8010efa:	4640      	mov	r0, r8
 8010efc:	4649      	mov	r1, r9
 8010efe:	2200      	movs	r2, #0
 8010f00:	f7ef fb92 	bl	8000628 <__aeabi_dmul>
 8010f04:	4680      	mov	r8, r0
 8010f06:	4689      	mov	r9, r1
 8010f08:	e7c6      	b.n	8010e98 <_dtoa_r+0x510>
 8010f0a:	4650      	mov	r0, sl
 8010f0c:	4659      	mov	r1, fp
 8010f0e:	f7ef fb8b 	bl	8000628 <__aeabi_dmul>
 8010f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f14:	9d01      	ldr	r5, [sp, #4]
 8010f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f18:	4682      	mov	sl, r0
 8010f1a:	468b      	mov	fp, r1
 8010f1c:	4649      	mov	r1, r9
 8010f1e:	4640      	mov	r0, r8
 8010f20:	f7ef fe32 	bl	8000b88 <__aeabi_d2iz>
 8010f24:	4606      	mov	r6, r0
 8010f26:	f7ef fb15 	bl	8000554 <__aeabi_i2d>
 8010f2a:	3630      	adds	r6, #48	; 0x30
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4640      	mov	r0, r8
 8010f32:	4649      	mov	r1, r9
 8010f34:	f7ef f9c0 	bl	80002b8 <__aeabi_dsub>
 8010f38:	f805 6b01 	strb.w	r6, [r5], #1
 8010f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f3e:	429d      	cmp	r5, r3
 8010f40:	4680      	mov	r8, r0
 8010f42:	4689      	mov	r9, r1
 8010f44:	f04f 0200 	mov.w	r2, #0
 8010f48:	d124      	bne.n	8010f94 <_dtoa_r+0x60c>
 8010f4a:	4b1b      	ldr	r3, [pc, #108]	; (8010fb8 <_dtoa_r+0x630>)
 8010f4c:	4650      	mov	r0, sl
 8010f4e:	4659      	mov	r1, fp
 8010f50:	f7ef f9b4 	bl	80002bc <__adddf3>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	4640      	mov	r0, r8
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	f7ef fdf4 	bl	8000b48 <__aeabi_dcmpgt>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d173      	bne.n	801104c <_dtoa_r+0x6c4>
 8010f64:	4652      	mov	r2, sl
 8010f66:	465b      	mov	r3, fp
 8010f68:	4913      	ldr	r1, [pc, #76]	; (8010fb8 <_dtoa_r+0x630>)
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	f7ef f9a4 	bl	80002b8 <__aeabi_dsub>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef fdc8 	bl	8000b0c <__aeabi_dcmplt>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	f43f af35 	beq.w	8010dec <_dtoa_r+0x464>
 8010f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f84:	1e6b      	subs	r3, r5, #1
 8010f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f8c:	2b30      	cmp	r3, #48	; 0x30
 8010f8e:	d0f8      	beq.n	8010f82 <_dtoa_r+0x5fa>
 8010f90:	9700      	str	r7, [sp, #0]
 8010f92:	e049      	b.n	8011028 <_dtoa_r+0x6a0>
 8010f94:	4b05      	ldr	r3, [pc, #20]	; (8010fac <_dtoa_r+0x624>)
 8010f96:	f7ef fb47 	bl	8000628 <__aeabi_dmul>
 8010f9a:	4680      	mov	r8, r0
 8010f9c:	4689      	mov	r9, r1
 8010f9e:	e7bd      	b.n	8010f1c <_dtoa_r+0x594>
 8010fa0:	08012e50 	.word	0x08012e50
 8010fa4:	08012e28 	.word	0x08012e28
 8010fa8:	3ff00000 	.word	0x3ff00000
 8010fac:	40240000 	.word	0x40240000
 8010fb0:	401c0000 	.word	0x401c0000
 8010fb4:	40140000 	.word	0x40140000
 8010fb8:	3fe00000 	.word	0x3fe00000
 8010fbc:	9d01      	ldr	r5, [sp, #4]
 8010fbe:	4656      	mov	r6, sl
 8010fc0:	465f      	mov	r7, fp
 8010fc2:	4642      	mov	r2, r8
 8010fc4:	464b      	mov	r3, r9
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	4639      	mov	r1, r7
 8010fca:	f7ef fc57 	bl	800087c <__aeabi_ddiv>
 8010fce:	f7ef fddb 	bl	8000b88 <__aeabi_d2iz>
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	f7ef fabe 	bl	8000554 <__aeabi_i2d>
 8010fd8:	4642      	mov	r2, r8
 8010fda:	464b      	mov	r3, r9
 8010fdc:	f7ef fb24 	bl	8000628 <__aeabi_dmul>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	4639      	mov	r1, r7
 8010fe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010fec:	f7ef f964 	bl	80002b8 <__aeabi_dsub>
 8010ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ff4:	9e01      	ldr	r6, [sp, #4]
 8010ff6:	9f03      	ldr	r7, [sp, #12]
 8010ff8:	1bae      	subs	r6, r5, r6
 8010ffa:	42b7      	cmp	r7, r6
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	460b      	mov	r3, r1
 8011000:	d135      	bne.n	801106e <_dtoa_r+0x6e6>
 8011002:	f7ef f95b 	bl	80002bc <__adddf3>
 8011006:	4642      	mov	r2, r8
 8011008:	464b      	mov	r3, r9
 801100a:	4606      	mov	r6, r0
 801100c:	460f      	mov	r7, r1
 801100e:	f7ef fd9b 	bl	8000b48 <__aeabi_dcmpgt>
 8011012:	b9d0      	cbnz	r0, 801104a <_dtoa_r+0x6c2>
 8011014:	4642      	mov	r2, r8
 8011016:	464b      	mov	r3, r9
 8011018:	4630      	mov	r0, r6
 801101a:	4639      	mov	r1, r7
 801101c:	f7ef fd6c 	bl	8000af8 <__aeabi_dcmpeq>
 8011020:	b110      	cbz	r0, 8011028 <_dtoa_r+0x6a0>
 8011022:	f01a 0f01 	tst.w	sl, #1
 8011026:	d110      	bne.n	801104a <_dtoa_r+0x6c2>
 8011028:	4620      	mov	r0, r4
 801102a:	ee18 1a10 	vmov	r1, s16
 801102e:	f000 fc07 	bl	8011840 <_Bfree>
 8011032:	2300      	movs	r3, #0
 8011034:	9800      	ldr	r0, [sp, #0]
 8011036:	702b      	strb	r3, [r5, #0]
 8011038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801103a:	3001      	adds	r0, #1
 801103c:	6018      	str	r0, [r3, #0]
 801103e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011040:	2b00      	cmp	r3, #0
 8011042:	f43f acf1 	beq.w	8010a28 <_dtoa_r+0xa0>
 8011046:	601d      	str	r5, [r3, #0]
 8011048:	e4ee      	b.n	8010a28 <_dtoa_r+0xa0>
 801104a:	9f00      	ldr	r7, [sp, #0]
 801104c:	462b      	mov	r3, r5
 801104e:	461d      	mov	r5, r3
 8011050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011054:	2a39      	cmp	r2, #57	; 0x39
 8011056:	d106      	bne.n	8011066 <_dtoa_r+0x6de>
 8011058:	9a01      	ldr	r2, [sp, #4]
 801105a:	429a      	cmp	r2, r3
 801105c:	d1f7      	bne.n	801104e <_dtoa_r+0x6c6>
 801105e:	9901      	ldr	r1, [sp, #4]
 8011060:	2230      	movs	r2, #48	; 0x30
 8011062:	3701      	adds	r7, #1
 8011064:	700a      	strb	r2, [r1, #0]
 8011066:	781a      	ldrb	r2, [r3, #0]
 8011068:	3201      	adds	r2, #1
 801106a:	701a      	strb	r2, [r3, #0]
 801106c:	e790      	b.n	8010f90 <_dtoa_r+0x608>
 801106e:	4ba6      	ldr	r3, [pc, #664]	; (8011308 <_dtoa_r+0x980>)
 8011070:	2200      	movs	r2, #0
 8011072:	f7ef fad9 	bl	8000628 <__aeabi_dmul>
 8011076:	2200      	movs	r2, #0
 8011078:	2300      	movs	r3, #0
 801107a:	4606      	mov	r6, r0
 801107c:	460f      	mov	r7, r1
 801107e:	f7ef fd3b 	bl	8000af8 <__aeabi_dcmpeq>
 8011082:	2800      	cmp	r0, #0
 8011084:	d09d      	beq.n	8010fc2 <_dtoa_r+0x63a>
 8011086:	e7cf      	b.n	8011028 <_dtoa_r+0x6a0>
 8011088:	9a08      	ldr	r2, [sp, #32]
 801108a:	2a00      	cmp	r2, #0
 801108c:	f000 80d7 	beq.w	801123e <_dtoa_r+0x8b6>
 8011090:	9a06      	ldr	r2, [sp, #24]
 8011092:	2a01      	cmp	r2, #1
 8011094:	f300 80ba 	bgt.w	801120c <_dtoa_r+0x884>
 8011098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801109a:	2a00      	cmp	r2, #0
 801109c:	f000 80b2 	beq.w	8011204 <_dtoa_r+0x87c>
 80110a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110a4:	9e07      	ldr	r6, [sp, #28]
 80110a6:	9d04      	ldr	r5, [sp, #16]
 80110a8:	9a04      	ldr	r2, [sp, #16]
 80110aa:	441a      	add	r2, r3
 80110ac:	9204      	str	r2, [sp, #16]
 80110ae:	9a05      	ldr	r2, [sp, #20]
 80110b0:	2101      	movs	r1, #1
 80110b2:	441a      	add	r2, r3
 80110b4:	4620      	mov	r0, r4
 80110b6:	9205      	str	r2, [sp, #20]
 80110b8:	f000 fc7a 	bl	80119b0 <__i2b>
 80110bc:	4607      	mov	r7, r0
 80110be:	2d00      	cmp	r5, #0
 80110c0:	dd0c      	ble.n	80110dc <_dtoa_r+0x754>
 80110c2:	9b05      	ldr	r3, [sp, #20]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	dd09      	ble.n	80110dc <_dtoa_r+0x754>
 80110c8:	42ab      	cmp	r3, r5
 80110ca:	9a04      	ldr	r2, [sp, #16]
 80110cc:	bfa8      	it	ge
 80110ce:	462b      	movge	r3, r5
 80110d0:	1ad2      	subs	r2, r2, r3
 80110d2:	9204      	str	r2, [sp, #16]
 80110d4:	9a05      	ldr	r2, [sp, #20]
 80110d6:	1aed      	subs	r5, r5, r3
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	9305      	str	r3, [sp, #20]
 80110dc:	9b07      	ldr	r3, [sp, #28]
 80110de:	b31b      	cbz	r3, 8011128 <_dtoa_r+0x7a0>
 80110e0:	9b08      	ldr	r3, [sp, #32]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 80af 	beq.w	8011246 <_dtoa_r+0x8be>
 80110e8:	2e00      	cmp	r6, #0
 80110ea:	dd13      	ble.n	8011114 <_dtoa_r+0x78c>
 80110ec:	4639      	mov	r1, r7
 80110ee:	4632      	mov	r2, r6
 80110f0:	4620      	mov	r0, r4
 80110f2:	f000 fd1d 	bl	8011b30 <__pow5mult>
 80110f6:	ee18 2a10 	vmov	r2, s16
 80110fa:	4601      	mov	r1, r0
 80110fc:	4607      	mov	r7, r0
 80110fe:	4620      	mov	r0, r4
 8011100:	f000 fc6c 	bl	80119dc <__multiply>
 8011104:	ee18 1a10 	vmov	r1, s16
 8011108:	4680      	mov	r8, r0
 801110a:	4620      	mov	r0, r4
 801110c:	f000 fb98 	bl	8011840 <_Bfree>
 8011110:	ee08 8a10 	vmov	s16, r8
 8011114:	9b07      	ldr	r3, [sp, #28]
 8011116:	1b9a      	subs	r2, r3, r6
 8011118:	d006      	beq.n	8011128 <_dtoa_r+0x7a0>
 801111a:	ee18 1a10 	vmov	r1, s16
 801111e:	4620      	mov	r0, r4
 8011120:	f000 fd06 	bl	8011b30 <__pow5mult>
 8011124:	ee08 0a10 	vmov	s16, r0
 8011128:	2101      	movs	r1, #1
 801112a:	4620      	mov	r0, r4
 801112c:	f000 fc40 	bl	80119b0 <__i2b>
 8011130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011132:	2b00      	cmp	r3, #0
 8011134:	4606      	mov	r6, r0
 8011136:	f340 8088 	ble.w	801124a <_dtoa_r+0x8c2>
 801113a:	461a      	mov	r2, r3
 801113c:	4601      	mov	r1, r0
 801113e:	4620      	mov	r0, r4
 8011140:	f000 fcf6 	bl	8011b30 <__pow5mult>
 8011144:	9b06      	ldr	r3, [sp, #24]
 8011146:	2b01      	cmp	r3, #1
 8011148:	4606      	mov	r6, r0
 801114a:	f340 8081 	ble.w	8011250 <_dtoa_r+0x8c8>
 801114e:	f04f 0800 	mov.w	r8, #0
 8011152:	6933      	ldr	r3, [r6, #16]
 8011154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011158:	6918      	ldr	r0, [r3, #16]
 801115a:	f000 fbd9 	bl	8011910 <__hi0bits>
 801115e:	f1c0 0020 	rsb	r0, r0, #32
 8011162:	9b05      	ldr	r3, [sp, #20]
 8011164:	4418      	add	r0, r3
 8011166:	f010 001f 	ands.w	r0, r0, #31
 801116a:	f000 8092 	beq.w	8011292 <_dtoa_r+0x90a>
 801116e:	f1c0 0320 	rsb	r3, r0, #32
 8011172:	2b04      	cmp	r3, #4
 8011174:	f340 808a 	ble.w	801128c <_dtoa_r+0x904>
 8011178:	f1c0 001c 	rsb	r0, r0, #28
 801117c:	9b04      	ldr	r3, [sp, #16]
 801117e:	4403      	add	r3, r0
 8011180:	9304      	str	r3, [sp, #16]
 8011182:	9b05      	ldr	r3, [sp, #20]
 8011184:	4403      	add	r3, r0
 8011186:	4405      	add	r5, r0
 8011188:	9305      	str	r3, [sp, #20]
 801118a:	9b04      	ldr	r3, [sp, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	dd07      	ble.n	80111a0 <_dtoa_r+0x818>
 8011190:	ee18 1a10 	vmov	r1, s16
 8011194:	461a      	mov	r2, r3
 8011196:	4620      	mov	r0, r4
 8011198:	f000 fd24 	bl	8011be4 <__lshift>
 801119c:	ee08 0a10 	vmov	s16, r0
 80111a0:	9b05      	ldr	r3, [sp, #20]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	dd05      	ble.n	80111b2 <_dtoa_r+0x82a>
 80111a6:	4631      	mov	r1, r6
 80111a8:	461a      	mov	r2, r3
 80111aa:	4620      	mov	r0, r4
 80111ac:	f000 fd1a 	bl	8011be4 <__lshift>
 80111b0:	4606      	mov	r6, r0
 80111b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d06e      	beq.n	8011296 <_dtoa_r+0x90e>
 80111b8:	ee18 0a10 	vmov	r0, s16
 80111bc:	4631      	mov	r1, r6
 80111be:	f000 fd81 	bl	8011cc4 <__mcmp>
 80111c2:	2800      	cmp	r0, #0
 80111c4:	da67      	bge.n	8011296 <_dtoa_r+0x90e>
 80111c6:	9b00      	ldr	r3, [sp, #0]
 80111c8:	3b01      	subs	r3, #1
 80111ca:	ee18 1a10 	vmov	r1, s16
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	220a      	movs	r2, #10
 80111d2:	2300      	movs	r3, #0
 80111d4:	4620      	mov	r0, r4
 80111d6:	f000 fb55 	bl	8011884 <__multadd>
 80111da:	9b08      	ldr	r3, [sp, #32]
 80111dc:	ee08 0a10 	vmov	s16, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 81b1 	beq.w	8011548 <_dtoa_r+0xbc0>
 80111e6:	2300      	movs	r3, #0
 80111e8:	4639      	mov	r1, r7
 80111ea:	220a      	movs	r2, #10
 80111ec:	4620      	mov	r0, r4
 80111ee:	f000 fb49 	bl	8011884 <__multadd>
 80111f2:	9b02      	ldr	r3, [sp, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	4607      	mov	r7, r0
 80111f8:	f300 808e 	bgt.w	8011318 <_dtoa_r+0x990>
 80111fc:	9b06      	ldr	r3, [sp, #24]
 80111fe:	2b02      	cmp	r3, #2
 8011200:	dc51      	bgt.n	80112a6 <_dtoa_r+0x91e>
 8011202:	e089      	b.n	8011318 <_dtoa_r+0x990>
 8011204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801120a:	e74b      	b.n	80110a4 <_dtoa_r+0x71c>
 801120c:	9b03      	ldr	r3, [sp, #12]
 801120e:	1e5e      	subs	r6, r3, #1
 8011210:	9b07      	ldr	r3, [sp, #28]
 8011212:	42b3      	cmp	r3, r6
 8011214:	bfbf      	itttt	lt
 8011216:	9b07      	ldrlt	r3, [sp, #28]
 8011218:	9607      	strlt	r6, [sp, #28]
 801121a:	1af2      	sublt	r2, r6, r3
 801121c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801121e:	bfb6      	itet	lt
 8011220:	189b      	addlt	r3, r3, r2
 8011222:	1b9e      	subge	r6, r3, r6
 8011224:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	bfb8      	it	lt
 801122a:	2600      	movlt	r6, #0
 801122c:	2b00      	cmp	r3, #0
 801122e:	bfb7      	itett	lt
 8011230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011238:	1a9d      	sublt	r5, r3, r2
 801123a:	2300      	movlt	r3, #0
 801123c:	e734      	b.n	80110a8 <_dtoa_r+0x720>
 801123e:	9e07      	ldr	r6, [sp, #28]
 8011240:	9d04      	ldr	r5, [sp, #16]
 8011242:	9f08      	ldr	r7, [sp, #32]
 8011244:	e73b      	b.n	80110be <_dtoa_r+0x736>
 8011246:	9a07      	ldr	r2, [sp, #28]
 8011248:	e767      	b.n	801111a <_dtoa_r+0x792>
 801124a:	9b06      	ldr	r3, [sp, #24]
 801124c:	2b01      	cmp	r3, #1
 801124e:	dc18      	bgt.n	8011282 <_dtoa_r+0x8fa>
 8011250:	f1ba 0f00 	cmp.w	sl, #0
 8011254:	d115      	bne.n	8011282 <_dtoa_r+0x8fa>
 8011256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801125a:	b993      	cbnz	r3, 8011282 <_dtoa_r+0x8fa>
 801125c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011260:	0d1b      	lsrs	r3, r3, #20
 8011262:	051b      	lsls	r3, r3, #20
 8011264:	b183      	cbz	r3, 8011288 <_dtoa_r+0x900>
 8011266:	9b04      	ldr	r3, [sp, #16]
 8011268:	3301      	adds	r3, #1
 801126a:	9304      	str	r3, [sp, #16]
 801126c:	9b05      	ldr	r3, [sp, #20]
 801126e:	3301      	adds	r3, #1
 8011270:	9305      	str	r3, [sp, #20]
 8011272:	f04f 0801 	mov.w	r8, #1
 8011276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011278:	2b00      	cmp	r3, #0
 801127a:	f47f af6a 	bne.w	8011152 <_dtoa_r+0x7ca>
 801127e:	2001      	movs	r0, #1
 8011280:	e76f      	b.n	8011162 <_dtoa_r+0x7da>
 8011282:	f04f 0800 	mov.w	r8, #0
 8011286:	e7f6      	b.n	8011276 <_dtoa_r+0x8ee>
 8011288:	4698      	mov	r8, r3
 801128a:	e7f4      	b.n	8011276 <_dtoa_r+0x8ee>
 801128c:	f43f af7d 	beq.w	801118a <_dtoa_r+0x802>
 8011290:	4618      	mov	r0, r3
 8011292:	301c      	adds	r0, #28
 8011294:	e772      	b.n	801117c <_dtoa_r+0x7f4>
 8011296:	9b03      	ldr	r3, [sp, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	dc37      	bgt.n	801130c <_dtoa_r+0x984>
 801129c:	9b06      	ldr	r3, [sp, #24]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	dd34      	ble.n	801130c <_dtoa_r+0x984>
 80112a2:	9b03      	ldr	r3, [sp, #12]
 80112a4:	9302      	str	r3, [sp, #8]
 80112a6:	9b02      	ldr	r3, [sp, #8]
 80112a8:	b96b      	cbnz	r3, 80112c6 <_dtoa_r+0x93e>
 80112aa:	4631      	mov	r1, r6
 80112ac:	2205      	movs	r2, #5
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 fae8 	bl	8011884 <__multadd>
 80112b4:	4601      	mov	r1, r0
 80112b6:	4606      	mov	r6, r0
 80112b8:	ee18 0a10 	vmov	r0, s16
 80112bc:	f000 fd02 	bl	8011cc4 <__mcmp>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f73f adbb 	bgt.w	8010e3c <_dtoa_r+0x4b4>
 80112c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c8:	9d01      	ldr	r5, [sp, #4]
 80112ca:	43db      	mvns	r3, r3
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	f04f 0800 	mov.w	r8, #0
 80112d2:	4631      	mov	r1, r6
 80112d4:	4620      	mov	r0, r4
 80112d6:	f000 fab3 	bl	8011840 <_Bfree>
 80112da:	2f00      	cmp	r7, #0
 80112dc:	f43f aea4 	beq.w	8011028 <_dtoa_r+0x6a0>
 80112e0:	f1b8 0f00 	cmp.w	r8, #0
 80112e4:	d005      	beq.n	80112f2 <_dtoa_r+0x96a>
 80112e6:	45b8      	cmp	r8, r7
 80112e8:	d003      	beq.n	80112f2 <_dtoa_r+0x96a>
 80112ea:	4641      	mov	r1, r8
 80112ec:	4620      	mov	r0, r4
 80112ee:	f000 faa7 	bl	8011840 <_Bfree>
 80112f2:	4639      	mov	r1, r7
 80112f4:	4620      	mov	r0, r4
 80112f6:	f000 faa3 	bl	8011840 <_Bfree>
 80112fa:	e695      	b.n	8011028 <_dtoa_r+0x6a0>
 80112fc:	2600      	movs	r6, #0
 80112fe:	4637      	mov	r7, r6
 8011300:	e7e1      	b.n	80112c6 <_dtoa_r+0x93e>
 8011302:	9700      	str	r7, [sp, #0]
 8011304:	4637      	mov	r7, r6
 8011306:	e599      	b.n	8010e3c <_dtoa_r+0x4b4>
 8011308:	40240000 	.word	0x40240000
 801130c:	9b08      	ldr	r3, [sp, #32]
 801130e:	2b00      	cmp	r3, #0
 8011310:	f000 80ca 	beq.w	80114a8 <_dtoa_r+0xb20>
 8011314:	9b03      	ldr	r3, [sp, #12]
 8011316:	9302      	str	r3, [sp, #8]
 8011318:	2d00      	cmp	r5, #0
 801131a:	dd05      	ble.n	8011328 <_dtoa_r+0x9a0>
 801131c:	4639      	mov	r1, r7
 801131e:	462a      	mov	r2, r5
 8011320:	4620      	mov	r0, r4
 8011322:	f000 fc5f 	bl	8011be4 <__lshift>
 8011326:	4607      	mov	r7, r0
 8011328:	f1b8 0f00 	cmp.w	r8, #0
 801132c:	d05b      	beq.n	80113e6 <_dtoa_r+0xa5e>
 801132e:	6879      	ldr	r1, [r7, #4]
 8011330:	4620      	mov	r0, r4
 8011332:	f000 fa45 	bl	80117c0 <_Balloc>
 8011336:	4605      	mov	r5, r0
 8011338:	b928      	cbnz	r0, 8011346 <_dtoa_r+0x9be>
 801133a:	4b87      	ldr	r3, [pc, #540]	; (8011558 <_dtoa_r+0xbd0>)
 801133c:	4602      	mov	r2, r0
 801133e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011342:	f7ff bb3b 	b.w	80109bc <_dtoa_r+0x34>
 8011346:	693a      	ldr	r2, [r7, #16]
 8011348:	3202      	adds	r2, #2
 801134a:	0092      	lsls	r2, r2, #2
 801134c:	f107 010c 	add.w	r1, r7, #12
 8011350:	300c      	adds	r0, #12
 8011352:	f7fe fce7 	bl	800fd24 <memcpy>
 8011356:	2201      	movs	r2, #1
 8011358:	4629      	mov	r1, r5
 801135a:	4620      	mov	r0, r4
 801135c:	f000 fc42 	bl	8011be4 <__lshift>
 8011360:	9b01      	ldr	r3, [sp, #4]
 8011362:	f103 0901 	add.w	r9, r3, #1
 8011366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801136a:	4413      	add	r3, r2
 801136c:	9305      	str	r3, [sp, #20]
 801136e:	f00a 0301 	and.w	r3, sl, #1
 8011372:	46b8      	mov	r8, r7
 8011374:	9304      	str	r3, [sp, #16]
 8011376:	4607      	mov	r7, r0
 8011378:	4631      	mov	r1, r6
 801137a:	ee18 0a10 	vmov	r0, s16
 801137e:	f7ff fa77 	bl	8010870 <quorem>
 8011382:	4641      	mov	r1, r8
 8011384:	9002      	str	r0, [sp, #8]
 8011386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801138a:	ee18 0a10 	vmov	r0, s16
 801138e:	f000 fc99 	bl	8011cc4 <__mcmp>
 8011392:	463a      	mov	r2, r7
 8011394:	9003      	str	r0, [sp, #12]
 8011396:	4631      	mov	r1, r6
 8011398:	4620      	mov	r0, r4
 801139a:	f000 fcaf 	bl	8011cfc <__mdiff>
 801139e:	68c2      	ldr	r2, [r0, #12]
 80113a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80113a4:	4605      	mov	r5, r0
 80113a6:	bb02      	cbnz	r2, 80113ea <_dtoa_r+0xa62>
 80113a8:	4601      	mov	r1, r0
 80113aa:	ee18 0a10 	vmov	r0, s16
 80113ae:	f000 fc89 	bl	8011cc4 <__mcmp>
 80113b2:	4602      	mov	r2, r0
 80113b4:	4629      	mov	r1, r5
 80113b6:	4620      	mov	r0, r4
 80113b8:	9207      	str	r2, [sp, #28]
 80113ba:	f000 fa41 	bl	8011840 <_Bfree>
 80113be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80113c2:	ea43 0102 	orr.w	r1, r3, r2
 80113c6:	9b04      	ldr	r3, [sp, #16]
 80113c8:	430b      	orrs	r3, r1
 80113ca:	464d      	mov	r5, r9
 80113cc:	d10f      	bne.n	80113ee <_dtoa_r+0xa66>
 80113ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113d2:	d02a      	beq.n	801142a <_dtoa_r+0xaa2>
 80113d4:	9b03      	ldr	r3, [sp, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	dd02      	ble.n	80113e0 <_dtoa_r+0xa58>
 80113da:	9b02      	ldr	r3, [sp, #8]
 80113dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80113e0:	f88b a000 	strb.w	sl, [fp]
 80113e4:	e775      	b.n	80112d2 <_dtoa_r+0x94a>
 80113e6:	4638      	mov	r0, r7
 80113e8:	e7ba      	b.n	8011360 <_dtoa_r+0x9d8>
 80113ea:	2201      	movs	r2, #1
 80113ec:	e7e2      	b.n	80113b4 <_dtoa_r+0xa2c>
 80113ee:	9b03      	ldr	r3, [sp, #12]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	db04      	blt.n	80113fe <_dtoa_r+0xa76>
 80113f4:	9906      	ldr	r1, [sp, #24]
 80113f6:	430b      	orrs	r3, r1
 80113f8:	9904      	ldr	r1, [sp, #16]
 80113fa:	430b      	orrs	r3, r1
 80113fc:	d122      	bne.n	8011444 <_dtoa_r+0xabc>
 80113fe:	2a00      	cmp	r2, #0
 8011400:	ddee      	ble.n	80113e0 <_dtoa_r+0xa58>
 8011402:	ee18 1a10 	vmov	r1, s16
 8011406:	2201      	movs	r2, #1
 8011408:	4620      	mov	r0, r4
 801140a:	f000 fbeb 	bl	8011be4 <__lshift>
 801140e:	4631      	mov	r1, r6
 8011410:	ee08 0a10 	vmov	s16, r0
 8011414:	f000 fc56 	bl	8011cc4 <__mcmp>
 8011418:	2800      	cmp	r0, #0
 801141a:	dc03      	bgt.n	8011424 <_dtoa_r+0xa9c>
 801141c:	d1e0      	bne.n	80113e0 <_dtoa_r+0xa58>
 801141e:	f01a 0f01 	tst.w	sl, #1
 8011422:	d0dd      	beq.n	80113e0 <_dtoa_r+0xa58>
 8011424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011428:	d1d7      	bne.n	80113da <_dtoa_r+0xa52>
 801142a:	2339      	movs	r3, #57	; 0x39
 801142c:	f88b 3000 	strb.w	r3, [fp]
 8011430:	462b      	mov	r3, r5
 8011432:	461d      	mov	r5, r3
 8011434:	3b01      	subs	r3, #1
 8011436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801143a:	2a39      	cmp	r2, #57	; 0x39
 801143c:	d071      	beq.n	8011522 <_dtoa_r+0xb9a>
 801143e:	3201      	adds	r2, #1
 8011440:	701a      	strb	r2, [r3, #0]
 8011442:	e746      	b.n	80112d2 <_dtoa_r+0x94a>
 8011444:	2a00      	cmp	r2, #0
 8011446:	dd07      	ble.n	8011458 <_dtoa_r+0xad0>
 8011448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801144c:	d0ed      	beq.n	801142a <_dtoa_r+0xaa2>
 801144e:	f10a 0301 	add.w	r3, sl, #1
 8011452:	f88b 3000 	strb.w	r3, [fp]
 8011456:	e73c      	b.n	80112d2 <_dtoa_r+0x94a>
 8011458:	9b05      	ldr	r3, [sp, #20]
 801145a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801145e:	4599      	cmp	r9, r3
 8011460:	d047      	beq.n	80114f2 <_dtoa_r+0xb6a>
 8011462:	ee18 1a10 	vmov	r1, s16
 8011466:	2300      	movs	r3, #0
 8011468:	220a      	movs	r2, #10
 801146a:	4620      	mov	r0, r4
 801146c:	f000 fa0a 	bl	8011884 <__multadd>
 8011470:	45b8      	cmp	r8, r7
 8011472:	ee08 0a10 	vmov	s16, r0
 8011476:	f04f 0300 	mov.w	r3, #0
 801147a:	f04f 020a 	mov.w	r2, #10
 801147e:	4641      	mov	r1, r8
 8011480:	4620      	mov	r0, r4
 8011482:	d106      	bne.n	8011492 <_dtoa_r+0xb0a>
 8011484:	f000 f9fe 	bl	8011884 <__multadd>
 8011488:	4680      	mov	r8, r0
 801148a:	4607      	mov	r7, r0
 801148c:	f109 0901 	add.w	r9, r9, #1
 8011490:	e772      	b.n	8011378 <_dtoa_r+0x9f0>
 8011492:	f000 f9f7 	bl	8011884 <__multadd>
 8011496:	4639      	mov	r1, r7
 8011498:	4680      	mov	r8, r0
 801149a:	2300      	movs	r3, #0
 801149c:	220a      	movs	r2, #10
 801149e:	4620      	mov	r0, r4
 80114a0:	f000 f9f0 	bl	8011884 <__multadd>
 80114a4:	4607      	mov	r7, r0
 80114a6:	e7f1      	b.n	801148c <_dtoa_r+0xb04>
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	9302      	str	r3, [sp, #8]
 80114ac:	9d01      	ldr	r5, [sp, #4]
 80114ae:	ee18 0a10 	vmov	r0, s16
 80114b2:	4631      	mov	r1, r6
 80114b4:	f7ff f9dc 	bl	8010870 <quorem>
 80114b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114bc:	9b01      	ldr	r3, [sp, #4]
 80114be:	f805 ab01 	strb.w	sl, [r5], #1
 80114c2:	1aea      	subs	r2, r5, r3
 80114c4:	9b02      	ldr	r3, [sp, #8]
 80114c6:	4293      	cmp	r3, r2
 80114c8:	dd09      	ble.n	80114de <_dtoa_r+0xb56>
 80114ca:	ee18 1a10 	vmov	r1, s16
 80114ce:	2300      	movs	r3, #0
 80114d0:	220a      	movs	r2, #10
 80114d2:	4620      	mov	r0, r4
 80114d4:	f000 f9d6 	bl	8011884 <__multadd>
 80114d8:	ee08 0a10 	vmov	s16, r0
 80114dc:	e7e7      	b.n	80114ae <_dtoa_r+0xb26>
 80114de:	9b02      	ldr	r3, [sp, #8]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bfc8      	it	gt
 80114e4:	461d      	movgt	r5, r3
 80114e6:	9b01      	ldr	r3, [sp, #4]
 80114e8:	bfd8      	it	le
 80114ea:	2501      	movle	r5, #1
 80114ec:	441d      	add	r5, r3
 80114ee:	f04f 0800 	mov.w	r8, #0
 80114f2:	ee18 1a10 	vmov	r1, s16
 80114f6:	2201      	movs	r2, #1
 80114f8:	4620      	mov	r0, r4
 80114fa:	f000 fb73 	bl	8011be4 <__lshift>
 80114fe:	4631      	mov	r1, r6
 8011500:	ee08 0a10 	vmov	s16, r0
 8011504:	f000 fbde 	bl	8011cc4 <__mcmp>
 8011508:	2800      	cmp	r0, #0
 801150a:	dc91      	bgt.n	8011430 <_dtoa_r+0xaa8>
 801150c:	d102      	bne.n	8011514 <_dtoa_r+0xb8c>
 801150e:	f01a 0f01 	tst.w	sl, #1
 8011512:	d18d      	bne.n	8011430 <_dtoa_r+0xaa8>
 8011514:	462b      	mov	r3, r5
 8011516:	461d      	mov	r5, r3
 8011518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801151c:	2a30      	cmp	r2, #48	; 0x30
 801151e:	d0fa      	beq.n	8011516 <_dtoa_r+0xb8e>
 8011520:	e6d7      	b.n	80112d2 <_dtoa_r+0x94a>
 8011522:	9a01      	ldr	r2, [sp, #4]
 8011524:	429a      	cmp	r2, r3
 8011526:	d184      	bne.n	8011432 <_dtoa_r+0xaaa>
 8011528:	9b00      	ldr	r3, [sp, #0]
 801152a:	3301      	adds	r3, #1
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	2331      	movs	r3, #49	; 0x31
 8011530:	7013      	strb	r3, [r2, #0]
 8011532:	e6ce      	b.n	80112d2 <_dtoa_r+0x94a>
 8011534:	4b09      	ldr	r3, [pc, #36]	; (801155c <_dtoa_r+0xbd4>)
 8011536:	f7ff ba95 	b.w	8010a64 <_dtoa_r+0xdc>
 801153a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801153c:	2b00      	cmp	r3, #0
 801153e:	f47f aa6e 	bne.w	8010a1e <_dtoa_r+0x96>
 8011542:	4b07      	ldr	r3, [pc, #28]	; (8011560 <_dtoa_r+0xbd8>)
 8011544:	f7ff ba8e 	b.w	8010a64 <_dtoa_r+0xdc>
 8011548:	9b02      	ldr	r3, [sp, #8]
 801154a:	2b00      	cmp	r3, #0
 801154c:	dcae      	bgt.n	80114ac <_dtoa_r+0xb24>
 801154e:	9b06      	ldr	r3, [sp, #24]
 8011550:	2b02      	cmp	r3, #2
 8011552:	f73f aea8 	bgt.w	80112a6 <_dtoa_r+0x91e>
 8011556:	e7a9      	b.n	80114ac <_dtoa_r+0xb24>
 8011558:	08012d4c 	.word	0x08012d4c
 801155c:	08012b6c 	.word	0x08012b6c
 8011560:	08012ccd 	.word	0x08012ccd

08011564 <std>:
 8011564:	2300      	movs	r3, #0
 8011566:	b510      	push	{r4, lr}
 8011568:	4604      	mov	r4, r0
 801156a:	e9c0 3300 	strd	r3, r3, [r0]
 801156e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011572:	6083      	str	r3, [r0, #8]
 8011574:	8181      	strh	r1, [r0, #12]
 8011576:	6643      	str	r3, [r0, #100]	; 0x64
 8011578:	81c2      	strh	r2, [r0, #14]
 801157a:	6183      	str	r3, [r0, #24]
 801157c:	4619      	mov	r1, r3
 801157e:	2208      	movs	r2, #8
 8011580:	305c      	adds	r0, #92	; 0x5c
 8011582:	f7fe fbdd 	bl	800fd40 <memset>
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <std+0x38>)
 8011588:	6263      	str	r3, [r4, #36]	; 0x24
 801158a:	4b05      	ldr	r3, [pc, #20]	; (80115a0 <std+0x3c>)
 801158c:	62a3      	str	r3, [r4, #40]	; 0x28
 801158e:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <std+0x40>)
 8011590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011592:	4b05      	ldr	r3, [pc, #20]	; (80115a8 <std+0x44>)
 8011594:	6224      	str	r4, [r4, #32]
 8011596:	6323      	str	r3, [r4, #48]	; 0x30
 8011598:	bd10      	pop	{r4, pc}
 801159a:	bf00      	nop
 801159c:	080121a9 	.word	0x080121a9
 80115a0:	080121cb 	.word	0x080121cb
 80115a4:	08012203 	.word	0x08012203
 80115a8:	08012227 	.word	0x08012227

080115ac <_cleanup_r>:
 80115ac:	4901      	ldr	r1, [pc, #4]	; (80115b4 <_cleanup_r+0x8>)
 80115ae:	f000 b8c1 	b.w	8011734 <_fwalk_reent>
 80115b2:	bf00      	nop
 80115b4:	0801252d 	.word	0x0801252d

080115b8 <__sfmoreglue>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	2268      	movs	r2, #104	; 0x68
 80115bc:	1e4d      	subs	r5, r1, #1
 80115be:	4355      	muls	r5, r2
 80115c0:	460e      	mov	r6, r1
 80115c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115c6:	f7fe fc2f 	bl	800fe28 <_malloc_r>
 80115ca:	4604      	mov	r4, r0
 80115cc:	b140      	cbz	r0, 80115e0 <__sfmoreglue+0x28>
 80115ce:	2100      	movs	r1, #0
 80115d0:	e9c0 1600 	strd	r1, r6, [r0]
 80115d4:	300c      	adds	r0, #12
 80115d6:	60a0      	str	r0, [r4, #8]
 80115d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115dc:	f7fe fbb0 	bl	800fd40 <memset>
 80115e0:	4620      	mov	r0, r4
 80115e2:	bd70      	pop	{r4, r5, r6, pc}

080115e4 <__sfp_lock_acquire>:
 80115e4:	4801      	ldr	r0, [pc, #4]	; (80115ec <__sfp_lock_acquire+0x8>)
 80115e6:	f000 b8ca 	b.w	801177e <__retarget_lock_acquire_recursive>
 80115ea:	bf00      	nop
 80115ec:	200029c5 	.word	0x200029c5

080115f0 <__sfp_lock_release>:
 80115f0:	4801      	ldr	r0, [pc, #4]	; (80115f8 <__sfp_lock_release+0x8>)
 80115f2:	f000 b8c5 	b.w	8011780 <__retarget_lock_release_recursive>
 80115f6:	bf00      	nop
 80115f8:	200029c5 	.word	0x200029c5

080115fc <__sinit_lock_acquire>:
 80115fc:	4801      	ldr	r0, [pc, #4]	; (8011604 <__sinit_lock_acquire+0x8>)
 80115fe:	f000 b8be 	b.w	801177e <__retarget_lock_acquire_recursive>
 8011602:	bf00      	nop
 8011604:	200029c6 	.word	0x200029c6

08011608 <__sinit_lock_release>:
 8011608:	4801      	ldr	r0, [pc, #4]	; (8011610 <__sinit_lock_release+0x8>)
 801160a:	f000 b8b9 	b.w	8011780 <__retarget_lock_release_recursive>
 801160e:	bf00      	nop
 8011610:	200029c6 	.word	0x200029c6

08011614 <__sinit>:
 8011614:	b510      	push	{r4, lr}
 8011616:	4604      	mov	r4, r0
 8011618:	f7ff fff0 	bl	80115fc <__sinit_lock_acquire>
 801161c:	69a3      	ldr	r3, [r4, #24]
 801161e:	b11b      	cbz	r3, 8011628 <__sinit+0x14>
 8011620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011624:	f7ff bff0 	b.w	8011608 <__sinit_lock_release>
 8011628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801162c:	6523      	str	r3, [r4, #80]	; 0x50
 801162e:	4b13      	ldr	r3, [pc, #76]	; (801167c <__sinit+0x68>)
 8011630:	4a13      	ldr	r2, [pc, #76]	; (8011680 <__sinit+0x6c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	62a2      	str	r2, [r4, #40]	; 0x28
 8011636:	42a3      	cmp	r3, r4
 8011638:	bf04      	itt	eq
 801163a:	2301      	moveq	r3, #1
 801163c:	61a3      	streq	r3, [r4, #24]
 801163e:	4620      	mov	r0, r4
 8011640:	f000 f820 	bl	8011684 <__sfp>
 8011644:	6060      	str	r0, [r4, #4]
 8011646:	4620      	mov	r0, r4
 8011648:	f000 f81c 	bl	8011684 <__sfp>
 801164c:	60a0      	str	r0, [r4, #8]
 801164e:	4620      	mov	r0, r4
 8011650:	f000 f818 	bl	8011684 <__sfp>
 8011654:	2200      	movs	r2, #0
 8011656:	60e0      	str	r0, [r4, #12]
 8011658:	2104      	movs	r1, #4
 801165a:	6860      	ldr	r0, [r4, #4]
 801165c:	f7ff ff82 	bl	8011564 <std>
 8011660:	68a0      	ldr	r0, [r4, #8]
 8011662:	2201      	movs	r2, #1
 8011664:	2109      	movs	r1, #9
 8011666:	f7ff ff7d 	bl	8011564 <std>
 801166a:	68e0      	ldr	r0, [r4, #12]
 801166c:	2202      	movs	r2, #2
 801166e:	2112      	movs	r1, #18
 8011670:	f7ff ff78 	bl	8011564 <std>
 8011674:	2301      	movs	r3, #1
 8011676:	61a3      	str	r3, [r4, #24]
 8011678:	e7d2      	b.n	8011620 <__sinit+0xc>
 801167a:	bf00      	nop
 801167c:	08012b58 	.word	0x08012b58
 8011680:	080115ad 	.word	0x080115ad

08011684 <__sfp>:
 8011684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011686:	4607      	mov	r7, r0
 8011688:	f7ff ffac 	bl	80115e4 <__sfp_lock_acquire>
 801168c:	4b1e      	ldr	r3, [pc, #120]	; (8011708 <__sfp+0x84>)
 801168e:	681e      	ldr	r6, [r3, #0]
 8011690:	69b3      	ldr	r3, [r6, #24]
 8011692:	b913      	cbnz	r3, 801169a <__sfp+0x16>
 8011694:	4630      	mov	r0, r6
 8011696:	f7ff ffbd 	bl	8011614 <__sinit>
 801169a:	3648      	adds	r6, #72	; 0x48
 801169c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116a0:	3b01      	subs	r3, #1
 80116a2:	d503      	bpl.n	80116ac <__sfp+0x28>
 80116a4:	6833      	ldr	r3, [r6, #0]
 80116a6:	b30b      	cbz	r3, 80116ec <__sfp+0x68>
 80116a8:	6836      	ldr	r6, [r6, #0]
 80116aa:	e7f7      	b.n	801169c <__sfp+0x18>
 80116ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116b0:	b9d5      	cbnz	r5, 80116e8 <__sfp+0x64>
 80116b2:	4b16      	ldr	r3, [pc, #88]	; (801170c <__sfp+0x88>)
 80116b4:	60e3      	str	r3, [r4, #12]
 80116b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116ba:	6665      	str	r5, [r4, #100]	; 0x64
 80116bc:	f000 f85e 	bl	801177c <__retarget_lock_init_recursive>
 80116c0:	f7ff ff96 	bl	80115f0 <__sfp_lock_release>
 80116c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116cc:	6025      	str	r5, [r4, #0]
 80116ce:	61a5      	str	r5, [r4, #24]
 80116d0:	2208      	movs	r2, #8
 80116d2:	4629      	mov	r1, r5
 80116d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116d8:	f7fe fb32 	bl	800fd40 <memset>
 80116dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116e4:	4620      	mov	r0, r4
 80116e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116e8:	3468      	adds	r4, #104	; 0x68
 80116ea:	e7d9      	b.n	80116a0 <__sfp+0x1c>
 80116ec:	2104      	movs	r1, #4
 80116ee:	4638      	mov	r0, r7
 80116f0:	f7ff ff62 	bl	80115b8 <__sfmoreglue>
 80116f4:	4604      	mov	r4, r0
 80116f6:	6030      	str	r0, [r6, #0]
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d1d5      	bne.n	80116a8 <__sfp+0x24>
 80116fc:	f7ff ff78 	bl	80115f0 <__sfp_lock_release>
 8011700:	230c      	movs	r3, #12
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	e7ee      	b.n	80116e4 <__sfp+0x60>
 8011706:	bf00      	nop
 8011708:	08012b58 	.word	0x08012b58
 801170c:	ffff0001 	.word	0xffff0001

08011710 <fiprintf>:
 8011710:	b40e      	push	{r1, r2, r3}
 8011712:	b503      	push	{r0, r1, lr}
 8011714:	4601      	mov	r1, r0
 8011716:	ab03      	add	r3, sp, #12
 8011718:	4805      	ldr	r0, [pc, #20]	; (8011730 <fiprintf+0x20>)
 801171a:	f853 2b04 	ldr.w	r2, [r3], #4
 801171e:	6800      	ldr	r0, [r0, #0]
 8011720:	9301      	str	r3, [sp, #4]
 8011722:	f000 fc11 	bl	8011f48 <_vfiprintf_r>
 8011726:	b002      	add	sp, #8
 8011728:	f85d eb04 	ldr.w	lr, [sp], #4
 801172c:	b003      	add	sp, #12
 801172e:	4770      	bx	lr
 8011730:	20000188 	.word	0x20000188

08011734 <_fwalk_reent>:
 8011734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011738:	4606      	mov	r6, r0
 801173a:	4688      	mov	r8, r1
 801173c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011740:	2700      	movs	r7, #0
 8011742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011746:	f1b9 0901 	subs.w	r9, r9, #1
 801174a:	d505      	bpl.n	8011758 <_fwalk_reent+0x24>
 801174c:	6824      	ldr	r4, [r4, #0]
 801174e:	2c00      	cmp	r4, #0
 8011750:	d1f7      	bne.n	8011742 <_fwalk_reent+0xe>
 8011752:	4638      	mov	r0, r7
 8011754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011758:	89ab      	ldrh	r3, [r5, #12]
 801175a:	2b01      	cmp	r3, #1
 801175c:	d907      	bls.n	801176e <_fwalk_reent+0x3a>
 801175e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011762:	3301      	adds	r3, #1
 8011764:	d003      	beq.n	801176e <_fwalk_reent+0x3a>
 8011766:	4629      	mov	r1, r5
 8011768:	4630      	mov	r0, r6
 801176a:	47c0      	blx	r8
 801176c:	4307      	orrs	r7, r0
 801176e:	3568      	adds	r5, #104	; 0x68
 8011770:	e7e9      	b.n	8011746 <_fwalk_reent+0x12>
	...

08011774 <_localeconv_r>:
 8011774:	4800      	ldr	r0, [pc, #0]	; (8011778 <_localeconv_r+0x4>)
 8011776:	4770      	bx	lr
 8011778:	200002dc 	.word	0x200002dc

0801177c <__retarget_lock_init_recursive>:
 801177c:	4770      	bx	lr

0801177e <__retarget_lock_acquire_recursive>:
 801177e:	4770      	bx	lr

08011780 <__retarget_lock_release_recursive>:
 8011780:	4770      	bx	lr

08011782 <__ascii_mbtowc>:
 8011782:	b082      	sub	sp, #8
 8011784:	b901      	cbnz	r1, 8011788 <__ascii_mbtowc+0x6>
 8011786:	a901      	add	r1, sp, #4
 8011788:	b142      	cbz	r2, 801179c <__ascii_mbtowc+0x1a>
 801178a:	b14b      	cbz	r3, 80117a0 <__ascii_mbtowc+0x1e>
 801178c:	7813      	ldrb	r3, [r2, #0]
 801178e:	600b      	str	r3, [r1, #0]
 8011790:	7812      	ldrb	r2, [r2, #0]
 8011792:	1e10      	subs	r0, r2, #0
 8011794:	bf18      	it	ne
 8011796:	2001      	movne	r0, #1
 8011798:	b002      	add	sp, #8
 801179a:	4770      	bx	lr
 801179c:	4610      	mov	r0, r2
 801179e:	e7fb      	b.n	8011798 <__ascii_mbtowc+0x16>
 80117a0:	f06f 0001 	mvn.w	r0, #1
 80117a4:	e7f8      	b.n	8011798 <__ascii_mbtowc+0x16>
	...

080117a8 <__malloc_lock>:
 80117a8:	4801      	ldr	r0, [pc, #4]	; (80117b0 <__malloc_lock+0x8>)
 80117aa:	f7ff bfe8 	b.w	801177e <__retarget_lock_acquire_recursive>
 80117ae:	bf00      	nop
 80117b0:	200029c4 	.word	0x200029c4

080117b4 <__malloc_unlock>:
 80117b4:	4801      	ldr	r0, [pc, #4]	; (80117bc <__malloc_unlock+0x8>)
 80117b6:	f7ff bfe3 	b.w	8011780 <__retarget_lock_release_recursive>
 80117ba:	bf00      	nop
 80117bc:	200029c4 	.word	0x200029c4

080117c0 <_Balloc>:
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117c4:	4604      	mov	r4, r0
 80117c6:	460d      	mov	r5, r1
 80117c8:	b976      	cbnz	r6, 80117e8 <_Balloc+0x28>
 80117ca:	2010      	movs	r0, #16
 80117cc:	f7fe faa2 	bl	800fd14 <malloc>
 80117d0:	4602      	mov	r2, r0
 80117d2:	6260      	str	r0, [r4, #36]	; 0x24
 80117d4:	b920      	cbnz	r0, 80117e0 <_Balloc+0x20>
 80117d6:	4b18      	ldr	r3, [pc, #96]	; (8011838 <_Balloc+0x78>)
 80117d8:	4818      	ldr	r0, [pc, #96]	; (801183c <_Balloc+0x7c>)
 80117da:	2166      	movs	r1, #102	; 0x66
 80117dc:	f7ff f82a 	bl	8010834 <__assert_func>
 80117e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117e4:	6006      	str	r6, [r0, #0]
 80117e6:	60c6      	str	r6, [r0, #12]
 80117e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80117ea:	68f3      	ldr	r3, [r6, #12]
 80117ec:	b183      	cbz	r3, 8011810 <_Balloc+0x50>
 80117ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80117f6:	b9b8      	cbnz	r0, 8011828 <_Balloc+0x68>
 80117f8:	2101      	movs	r1, #1
 80117fa:	fa01 f605 	lsl.w	r6, r1, r5
 80117fe:	1d72      	adds	r2, r6, #5
 8011800:	0092      	lsls	r2, r2, #2
 8011802:	4620      	mov	r0, r4
 8011804:	f000 fb60 	bl	8011ec8 <_calloc_r>
 8011808:	b160      	cbz	r0, 8011824 <_Balloc+0x64>
 801180a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801180e:	e00e      	b.n	801182e <_Balloc+0x6e>
 8011810:	2221      	movs	r2, #33	; 0x21
 8011812:	2104      	movs	r1, #4
 8011814:	4620      	mov	r0, r4
 8011816:	f000 fb57 	bl	8011ec8 <_calloc_r>
 801181a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801181c:	60f0      	str	r0, [r6, #12]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1e4      	bne.n	80117ee <_Balloc+0x2e>
 8011824:	2000      	movs	r0, #0
 8011826:	bd70      	pop	{r4, r5, r6, pc}
 8011828:	6802      	ldr	r2, [r0, #0]
 801182a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801182e:	2300      	movs	r3, #0
 8011830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011834:	e7f7      	b.n	8011826 <_Balloc+0x66>
 8011836:	bf00      	nop
 8011838:	08012cda 	.word	0x08012cda
 801183c:	08012dca 	.word	0x08012dca

08011840 <_Bfree>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011844:	4605      	mov	r5, r0
 8011846:	460c      	mov	r4, r1
 8011848:	b976      	cbnz	r6, 8011868 <_Bfree+0x28>
 801184a:	2010      	movs	r0, #16
 801184c:	f7fe fa62 	bl	800fd14 <malloc>
 8011850:	4602      	mov	r2, r0
 8011852:	6268      	str	r0, [r5, #36]	; 0x24
 8011854:	b920      	cbnz	r0, 8011860 <_Bfree+0x20>
 8011856:	4b09      	ldr	r3, [pc, #36]	; (801187c <_Bfree+0x3c>)
 8011858:	4809      	ldr	r0, [pc, #36]	; (8011880 <_Bfree+0x40>)
 801185a:	218a      	movs	r1, #138	; 0x8a
 801185c:	f7fe ffea 	bl	8010834 <__assert_func>
 8011860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011864:	6006      	str	r6, [r0, #0]
 8011866:	60c6      	str	r6, [r0, #12]
 8011868:	b13c      	cbz	r4, 801187a <_Bfree+0x3a>
 801186a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801186c:	6862      	ldr	r2, [r4, #4]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011874:	6021      	str	r1, [r4, #0]
 8011876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	08012cda 	.word	0x08012cda
 8011880:	08012dca 	.word	0x08012dca

08011884 <__multadd>:
 8011884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011888:	690d      	ldr	r5, [r1, #16]
 801188a:	4607      	mov	r7, r0
 801188c:	460c      	mov	r4, r1
 801188e:	461e      	mov	r6, r3
 8011890:	f101 0c14 	add.w	ip, r1, #20
 8011894:	2000      	movs	r0, #0
 8011896:	f8dc 3000 	ldr.w	r3, [ip]
 801189a:	b299      	uxth	r1, r3
 801189c:	fb02 6101 	mla	r1, r2, r1, r6
 80118a0:	0c1e      	lsrs	r6, r3, #16
 80118a2:	0c0b      	lsrs	r3, r1, #16
 80118a4:	fb02 3306 	mla	r3, r2, r6, r3
 80118a8:	b289      	uxth	r1, r1
 80118aa:	3001      	adds	r0, #1
 80118ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80118b0:	4285      	cmp	r5, r0
 80118b2:	f84c 1b04 	str.w	r1, [ip], #4
 80118b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80118ba:	dcec      	bgt.n	8011896 <__multadd+0x12>
 80118bc:	b30e      	cbz	r6, 8011902 <__multadd+0x7e>
 80118be:	68a3      	ldr	r3, [r4, #8]
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dc19      	bgt.n	80118f8 <__multadd+0x74>
 80118c4:	6861      	ldr	r1, [r4, #4]
 80118c6:	4638      	mov	r0, r7
 80118c8:	3101      	adds	r1, #1
 80118ca:	f7ff ff79 	bl	80117c0 <_Balloc>
 80118ce:	4680      	mov	r8, r0
 80118d0:	b928      	cbnz	r0, 80118de <__multadd+0x5a>
 80118d2:	4602      	mov	r2, r0
 80118d4:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <__multadd+0x84>)
 80118d6:	480d      	ldr	r0, [pc, #52]	; (801190c <__multadd+0x88>)
 80118d8:	21b5      	movs	r1, #181	; 0xb5
 80118da:	f7fe ffab 	bl	8010834 <__assert_func>
 80118de:	6922      	ldr	r2, [r4, #16]
 80118e0:	3202      	adds	r2, #2
 80118e2:	f104 010c 	add.w	r1, r4, #12
 80118e6:	0092      	lsls	r2, r2, #2
 80118e8:	300c      	adds	r0, #12
 80118ea:	f7fe fa1b 	bl	800fd24 <memcpy>
 80118ee:	4621      	mov	r1, r4
 80118f0:	4638      	mov	r0, r7
 80118f2:	f7ff ffa5 	bl	8011840 <_Bfree>
 80118f6:	4644      	mov	r4, r8
 80118f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80118fc:	3501      	adds	r5, #1
 80118fe:	615e      	str	r6, [r3, #20]
 8011900:	6125      	str	r5, [r4, #16]
 8011902:	4620      	mov	r0, r4
 8011904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011908:	08012d4c 	.word	0x08012d4c
 801190c:	08012dca 	.word	0x08012dca

08011910 <__hi0bits>:
 8011910:	0c03      	lsrs	r3, r0, #16
 8011912:	041b      	lsls	r3, r3, #16
 8011914:	b9d3      	cbnz	r3, 801194c <__hi0bits+0x3c>
 8011916:	0400      	lsls	r0, r0, #16
 8011918:	2310      	movs	r3, #16
 801191a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801191e:	bf04      	itt	eq
 8011920:	0200      	lsleq	r0, r0, #8
 8011922:	3308      	addeq	r3, #8
 8011924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011928:	bf04      	itt	eq
 801192a:	0100      	lsleq	r0, r0, #4
 801192c:	3304      	addeq	r3, #4
 801192e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011932:	bf04      	itt	eq
 8011934:	0080      	lsleq	r0, r0, #2
 8011936:	3302      	addeq	r3, #2
 8011938:	2800      	cmp	r0, #0
 801193a:	db05      	blt.n	8011948 <__hi0bits+0x38>
 801193c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011940:	f103 0301 	add.w	r3, r3, #1
 8011944:	bf08      	it	eq
 8011946:	2320      	moveq	r3, #32
 8011948:	4618      	mov	r0, r3
 801194a:	4770      	bx	lr
 801194c:	2300      	movs	r3, #0
 801194e:	e7e4      	b.n	801191a <__hi0bits+0xa>

08011950 <__lo0bits>:
 8011950:	6803      	ldr	r3, [r0, #0]
 8011952:	f013 0207 	ands.w	r2, r3, #7
 8011956:	4601      	mov	r1, r0
 8011958:	d00b      	beq.n	8011972 <__lo0bits+0x22>
 801195a:	07da      	lsls	r2, r3, #31
 801195c:	d423      	bmi.n	80119a6 <__lo0bits+0x56>
 801195e:	0798      	lsls	r0, r3, #30
 8011960:	bf49      	itett	mi
 8011962:	085b      	lsrmi	r3, r3, #1
 8011964:	089b      	lsrpl	r3, r3, #2
 8011966:	2001      	movmi	r0, #1
 8011968:	600b      	strmi	r3, [r1, #0]
 801196a:	bf5c      	itt	pl
 801196c:	600b      	strpl	r3, [r1, #0]
 801196e:	2002      	movpl	r0, #2
 8011970:	4770      	bx	lr
 8011972:	b298      	uxth	r0, r3
 8011974:	b9a8      	cbnz	r0, 80119a2 <__lo0bits+0x52>
 8011976:	0c1b      	lsrs	r3, r3, #16
 8011978:	2010      	movs	r0, #16
 801197a:	b2da      	uxtb	r2, r3
 801197c:	b90a      	cbnz	r2, 8011982 <__lo0bits+0x32>
 801197e:	3008      	adds	r0, #8
 8011980:	0a1b      	lsrs	r3, r3, #8
 8011982:	071a      	lsls	r2, r3, #28
 8011984:	bf04      	itt	eq
 8011986:	091b      	lsreq	r3, r3, #4
 8011988:	3004      	addeq	r0, #4
 801198a:	079a      	lsls	r2, r3, #30
 801198c:	bf04      	itt	eq
 801198e:	089b      	lsreq	r3, r3, #2
 8011990:	3002      	addeq	r0, #2
 8011992:	07da      	lsls	r2, r3, #31
 8011994:	d403      	bmi.n	801199e <__lo0bits+0x4e>
 8011996:	085b      	lsrs	r3, r3, #1
 8011998:	f100 0001 	add.w	r0, r0, #1
 801199c:	d005      	beq.n	80119aa <__lo0bits+0x5a>
 801199e:	600b      	str	r3, [r1, #0]
 80119a0:	4770      	bx	lr
 80119a2:	4610      	mov	r0, r2
 80119a4:	e7e9      	b.n	801197a <__lo0bits+0x2a>
 80119a6:	2000      	movs	r0, #0
 80119a8:	4770      	bx	lr
 80119aa:	2020      	movs	r0, #32
 80119ac:	4770      	bx	lr
	...

080119b0 <__i2b>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	460c      	mov	r4, r1
 80119b4:	2101      	movs	r1, #1
 80119b6:	f7ff ff03 	bl	80117c0 <_Balloc>
 80119ba:	4602      	mov	r2, r0
 80119bc:	b928      	cbnz	r0, 80119ca <__i2b+0x1a>
 80119be:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <__i2b+0x24>)
 80119c0:	4805      	ldr	r0, [pc, #20]	; (80119d8 <__i2b+0x28>)
 80119c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80119c6:	f7fe ff35 	bl	8010834 <__assert_func>
 80119ca:	2301      	movs	r3, #1
 80119cc:	6144      	str	r4, [r0, #20]
 80119ce:	6103      	str	r3, [r0, #16]
 80119d0:	bd10      	pop	{r4, pc}
 80119d2:	bf00      	nop
 80119d4:	08012d4c 	.word	0x08012d4c
 80119d8:	08012dca 	.word	0x08012dca

080119dc <__multiply>:
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	4691      	mov	r9, r2
 80119e2:	690a      	ldr	r2, [r1, #16]
 80119e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	bfb8      	it	lt
 80119ec:	460b      	movlt	r3, r1
 80119ee:	460c      	mov	r4, r1
 80119f0:	bfbc      	itt	lt
 80119f2:	464c      	movlt	r4, r9
 80119f4:	4699      	movlt	r9, r3
 80119f6:	6927      	ldr	r7, [r4, #16]
 80119f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	6861      	ldr	r1, [r4, #4]
 8011a00:	eb07 060a 	add.w	r6, r7, sl
 8011a04:	42b3      	cmp	r3, r6
 8011a06:	b085      	sub	sp, #20
 8011a08:	bfb8      	it	lt
 8011a0a:	3101      	addlt	r1, #1
 8011a0c:	f7ff fed8 	bl	80117c0 <_Balloc>
 8011a10:	b930      	cbnz	r0, 8011a20 <__multiply+0x44>
 8011a12:	4602      	mov	r2, r0
 8011a14:	4b44      	ldr	r3, [pc, #272]	; (8011b28 <__multiply+0x14c>)
 8011a16:	4845      	ldr	r0, [pc, #276]	; (8011b2c <__multiply+0x150>)
 8011a18:	f240 115d 	movw	r1, #349	; 0x15d
 8011a1c:	f7fe ff0a 	bl	8010834 <__assert_func>
 8011a20:	f100 0514 	add.w	r5, r0, #20
 8011a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a28:	462b      	mov	r3, r5
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	4543      	cmp	r3, r8
 8011a2e:	d321      	bcc.n	8011a74 <__multiply+0x98>
 8011a30:	f104 0314 	add.w	r3, r4, #20
 8011a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011a38:	f109 0314 	add.w	r3, r9, #20
 8011a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011a40:	9202      	str	r2, [sp, #8]
 8011a42:	1b3a      	subs	r2, r7, r4
 8011a44:	3a15      	subs	r2, #21
 8011a46:	f022 0203 	bic.w	r2, r2, #3
 8011a4a:	3204      	adds	r2, #4
 8011a4c:	f104 0115 	add.w	r1, r4, #21
 8011a50:	428f      	cmp	r7, r1
 8011a52:	bf38      	it	cc
 8011a54:	2204      	movcc	r2, #4
 8011a56:	9201      	str	r2, [sp, #4]
 8011a58:	9a02      	ldr	r2, [sp, #8]
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d80c      	bhi.n	8011a7a <__multiply+0x9e>
 8011a60:	2e00      	cmp	r6, #0
 8011a62:	dd03      	ble.n	8011a6c <__multiply+0x90>
 8011a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d05a      	beq.n	8011b22 <__multiply+0x146>
 8011a6c:	6106      	str	r6, [r0, #16]
 8011a6e:	b005      	add	sp, #20
 8011a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a74:	f843 2b04 	str.w	r2, [r3], #4
 8011a78:	e7d8      	b.n	8011a2c <__multiply+0x50>
 8011a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011a7e:	f1ba 0f00 	cmp.w	sl, #0
 8011a82:	d024      	beq.n	8011ace <__multiply+0xf2>
 8011a84:	f104 0e14 	add.w	lr, r4, #20
 8011a88:	46a9      	mov	r9, r5
 8011a8a:	f04f 0c00 	mov.w	ip, #0
 8011a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011a92:	f8d9 1000 	ldr.w	r1, [r9]
 8011a96:	fa1f fb82 	uxth.w	fp, r2
 8011a9a:	b289      	uxth	r1, r1
 8011a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8011aa8:	4461      	add	r1, ip
 8011aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011ab6:	b289      	uxth	r1, r1
 8011ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011abc:	4577      	cmp	r7, lr
 8011abe:	f849 1b04 	str.w	r1, [r9], #4
 8011ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ac6:	d8e2      	bhi.n	8011a8e <__multiply+0xb2>
 8011ac8:	9a01      	ldr	r2, [sp, #4]
 8011aca:	f845 c002 	str.w	ip, [r5, r2]
 8011ace:	9a03      	ldr	r2, [sp, #12]
 8011ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	f1b9 0f00 	cmp.w	r9, #0
 8011ada:	d020      	beq.n	8011b1e <__multiply+0x142>
 8011adc:	6829      	ldr	r1, [r5, #0]
 8011ade:	f104 0c14 	add.w	ip, r4, #20
 8011ae2:	46ae      	mov	lr, r5
 8011ae4:	f04f 0a00 	mov.w	sl, #0
 8011ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8011aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011af0:	fb09 220b 	mla	r2, r9, fp, r2
 8011af4:	4492      	add	sl, r2
 8011af6:	b289      	uxth	r1, r1
 8011af8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011afc:	f84e 1b04 	str.w	r1, [lr], #4
 8011b00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011b04:	f8be 1000 	ldrh.w	r1, [lr]
 8011b08:	0c12      	lsrs	r2, r2, #16
 8011b0a:	fb09 1102 	mla	r1, r9, r2, r1
 8011b0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011b12:	4567      	cmp	r7, ip
 8011b14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011b18:	d8e6      	bhi.n	8011ae8 <__multiply+0x10c>
 8011b1a:	9a01      	ldr	r2, [sp, #4]
 8011b1c:	50a9      	str	r1, [r5, r2]
 8011b1e:	3504      	adds	r5, #4
 8011b20:	e79a      	b.n	8011a58 <__multiply+0x7c>
 8011b22:	3e01      	subs	r6, #1
 8011b24:	e79c      	b.n	8011a60 <__multiply+0x84>
 8011b26:	bf00      	nop
 8011b28:	08012d4c 	.word	0x08012d4c
 8011b2c:	08012dca 	.word	0x08012dca

08011b30 <__pow5mult>:
 8011b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b34:	4615      	mov	r5, r2
 8011b36:	f012 0203 	ands.w	r2, r2, #3
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	460f      	mov	r7, r1
 8011b3e:	d007      	beq.n	8011b50 <__pow5mult+0x20>
 8011b40:	4c25      	ldr	r4, [pc, #148]	; (8011bd8 <__pow5mult+0xa8>)
 8011b42:	3a01      	subs	r2, #1
 8011b44:	2300      	movs	r3, #0
 8011b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b4a:	f7ff fe9b 	bl	8011884 <__multadd>
 8011b4e:	4607      	mov	r7, r0
 8011b50:	10ad      	asrs	r5, r5, #2
 8011b52:	d03d      	beq.n	8011bd0 <__pow5mult+0xa0>
 8011b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011b56:	b97c      	cbnz	r4, 8011b78 <__pow5mult+0x48>
 8011b58:	2010      	movs	r0, #16
 8011b5a:	f7fe f8db 	bl	800fd14 <malloc>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	6270      	str	r0, [r6, #36]	; 0x24
 8011b62:	b928      	cbnz	r0, 8011b70 <__pow5mult+0x40>
 8011b64:	4b1d      	ldr	r3, [pc, #116]	; (8011bdc <__pow5mult+0xac>)
 8011b66:	481e      	ldr	r0, [pc, #120]	; (8011be0 <__pow5mult+0xb0>)
 8011b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011b6c:	f7fe fe62 	bl	8010834 <__assert_func>
 8011b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b74:	6004      	str	r4, [r0, #0]
 8011b76:	60c4      	str	r4, [r0, #12]
 8011b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b80:	b94c      	cbnz	r4, 8011b96 <__pow5mult+0x66>
 8011b82:	f240 2171 	movw	r1, #625	; 0x271
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7ff ff12 	bl	80119b0 <__i2b>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b92:	4604      	mov	r4, r0
 8011b94:	6003      	str	r3, [r0, #0]
 8011b96:	f04f 0900 	mov.w	r9, #0
 8011b9a:	07eb      	lsls	r3, r5, #31
 8011b9c:	d50a      	bpl.n	8011bb4 <__pow5mult+0x84>
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f7ff ff1a 	bl	80119dc <__multiply>
 8011ba8:	4639      	mov	r1, r7
 8011baa:	4680      	mov	r8, r0
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff fe47 	bl	8011840 <_Bfree>
 8011bb2:	4647      	mov	r7, r8
 8011bb4:	106d      	asrs	r5, r5, #1
 8011bb6:	d00b      	beq.n	8011bd0 <__pow5mult+0xa0>
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	b938      	cbnz	r0, 8011bcc <__pow5mult+0x9c>
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7ff ff0b 	bl	80119dc <__multiply>
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	f8c0 9000 	str.w	r9, [r0]
 8011bcc:	4604      	mov	r4, r0
 8011bce:	e7e4      	b.n	8011b9a <__pow5mult+0x6a>
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08012f18 	.word	0x08012f18
 8011bdc:	08012cda 	.word	0x08012cda
 8011be0:	08012dca 	.word	0x08012dca

08011be4 <__lshift>:
 8011be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be8:	460c      	mov	r4, r1
 8011bea:	6849      	ldr	r1, [r1, #4]
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011bf2:	68a3      	ldr	r3, [r4, #8]
 8011bf4:	4607      	mov	r7, r0
 8011bf6:	4691      	mov	r9, r2
 8011bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011bfc:	f108 0601 	add.w	r6, r8, #1
 8011c00:	42b3      	cmp	r3, r6
 8011c02:	db0b      	blt.n	8011c1c <__lshift+0x38>
 8011c04:	4638      	mov	r0, r7
 8011c06:	f7ff fddb 	bl	80117c0 <_Balloc>
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b948      	cbnz	r0, 8011c22 <__lshift+0x3e>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	4b2a      	ldr	r3, [pc, #168]	; (8011cbc <__lshift+0xd8>)
 8011c12:	482b      	ldr	r0, [pc, #172]	; (8011cc0 <__lshift+0xdc>)
 8011c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011c18:	f7fe fe0c 	bl	8010834 <__assert_func>
 8011c1c:	3101      	adds	r1, #1
 8011c1e:	005b      	lsls	r3, r3, #1
 8011c20:	e7ee      	b.n	8011c00 <__lshift+0x1c>
 8011c22:	2300      	movs	r3, #0
 8011c24:	f100 0114 	add.w	r1, r0, #20
 8011c28:	f100 0210 	add.w	r2, r0, #16
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	4553      	cmp	r3, sl
 8011c30:	db37      	blt.n	8011ca2 <__lshift+0xbe>
 8011c32:	6920      	ldr	r0, [r4, #16]
 8011c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c38:	f104 0314 	add.w	r3, r4, #20
 8011c3c:	f019 091f 	ands.w	r9, r9, #31
 8011c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011c48:	d02f      	beq.n	8011caa <__lshift+0xc6>
 8011c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c4e:	468a      	mov	sl, r1
 8011c50:	f04f 0c00 	mov.w	ip, #0
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	fa02 f209 	lsl.w	r2, r2, r9
 8011c5a:	ea42 020c 	orr.w	r2, r2, ip
 8011c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8011c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c66:	4298      	cmp	r0, r3
 8011c68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011c6c:	d8f2      	bhi.n	8011c54 <__lshift+0x70>
 8011c6e:	1b03      	subs	r3, r0, r4
 8011c70:	3b15      	subs	r3, #21
 8011c72:	f023 0303 	bic.w	r3, r3, #3
 8011c76:	3304      	adds	r3, #4
 8011c78:	f104 0215 	add.w	r2, r4, #21
 8011c7c:	4290      	cmp	r0, r2
 8011c7e:	bf38      	it	cc
 8011c80:	2304      	movcc	r3, #4
 8011c82:	f841 c003 	str.w	ip, [r1, r3]
 8011c86:	f1bc 0f00 	cmp.w	ip, #0
 8011c8a:	d001      	beq.n	8011c90 <__lshift+0xac>
 8011c8c:	f108 0602 	add.w	r6, r8, #2
 8011c90:	3e01      	subs	r6, #1
 8011c92:	4638      	mov	r0, r7
 8011c94:	612e      	str	r6, [r5, #16]
 8011c96:	4621      	mov	r1, r4
 8011c98:	f7ff fdd2 	bl	8011840 <_Bfree>
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	e7c1      	b.n	8011c2e <__lshift+0x4a>
 8011caa:	3904      	subs	r1, #4
 8011cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011cb4:	4298      	cmp	r0, r3
 8011cb6:	d8f9      	bhi.n	8011cac <__lshift+0xc8>
 8011cb8:	e7ea      	b.n	8011c90 <__lshift+0xac>
 8011cba:	bf00      	nop
 8011cbc:	08012d4c 	.word	0x08012d4c
 8011cc0:	08012dca 	.word	0x08012dca

08011cc4 <__mcmp>:
 8011cc4:	b530      	push	{r4, r5, lr}
 8011cc6:	6902      	ldr	r2, [r0, #16]
 8011cc8:	690c      	ldr	r4, [r1, #16]
 8011cca:	1b12      	subs	r2, r2, r4
 8011ccc:	d10e      	bne.n	8011cec <__mcmp+0x28>
 8011cce:	f100 0314 	add.w	r3, r0, #20
 8011cd2:	3114      	adds	r1, #20
 8011cd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011cd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011cdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ce4:	42a5      	cmp	r5, r4
 8011ce6:	d003      	beq.n	8011cf0 <__mcmp+0x2c>
 8011ce8:	d305      	bcc.n	8011cf6 <__mcmp+0x32>
 8011cea:	2201      	movs	r2, #1
 8011cec:	4610      	mov	r0, r2
 8011cee:	bd30      	pop	{r4, r5, pc}
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	d3f3      	bcc.n	8011cdc <__mcmp+0x18>
 8011cf4:	e7fa      	b.n	8011cec <__mcmp+0x28>
 8011cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011cfa:	e7f7      	b.n	8011cec <__mcmp+0x28>

08011cfc <__mdiff>:
 8011cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	460c      	mov	r4, r1
 8011d02:	4606      	mov	r6, r0
 8011d04:	4611      	mov	r1, r2
 8011d06:	4620      	mov	r0, r4
 8011d08:	4690      	mov	r8, r2
 8011d0a:	f7ff ffdb 	bl	8011cc4 <__mcmp>
 8011d0e:	1e05      	subs	r5, r0, #0
 8011d10:	d110      	bne.n	8011d34 <__mdiff+0x38>
 8011d12:	4629      	mov	r1, r5
 8011d14:	4630      	mov	r0, r6
 8011d16:	f7ff fd53 	bl	80117c0 <_Balloc>
 8011d1a:	b930      	cbnz	r0, 8011d2a <__mdiff+0x2e>
 8011d1c:	4b3a      	ldr	r3, [pc, #232]	; (8011e08 <__mdiff+0x10c>)
 8011d1e:	4602      	mov	r2, r0
 8011d20:	f240 2132 	movw	r1, #562	; 0x232
 8011d24:	4839      	ldr	r0, [pc, #228]	; (8011e0c <__mdiff+0x110>)
 8011d26:	f7fe fd85 	bl	8010834 <__assert_func>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d34:	bfa4      	itt	ge
 8011d36:	4643      	movge	r3, r8
 8011d38:	46a0      	movge	r8, r4
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011d40:	bfa6      	itte	ge
 8011d42:	461c      	movge	r4, r3
 8011d44:	2500      	movge	r5, #0
 8011d46:	2501      	movlt	r5, #1
 8011d48:	f7ff fd3a 	bl	80117c0 <_Balloc>
 8011d4c:	b920      	cbnz	r0, 8011d58 <__mdiff+0x5c>
 8011d4e:	4b2e      	ldr	r3, [pc, #184]	; (8011e08 <__mdiff+0x10c>)
 8011d50:	4602      	mov	r2, r0
 8011d52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011d56:	e7e5      	b.n	8011d24 <__mdiff+0x28>
 8011d58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011d5c:	6926      	ldr	r6, [r4, #16]
 8011d5e:	60c5      	str	r5, [r0, #12]
 8011d60:	f104 0914 	add.w	r9, r4, #20
 8011d64:	f108 0514 	add.w	r5, r8, #20
 8011d68:	f100 0e14 	add.w	lr, r0, #20
 8011d6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011d74:	f108 0210 	add.w	r2, r8, #16
 8011d78:	46f2      	mov	sl, lr
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011d80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011d84:	fa1f f883 	uxth.w	r8, r3
 8011d88:	fa11 f18b 	uxtah	r1, r1, fp
 8011d8c:	0c1b      	lsrs	r3, r3, #16
 8011d8e:	eba1 0808 	sub.w	r8, r1, r8
 8011d92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d9a:	fa1f f888 	uxth.w	r8, r8
 8011d9e:	1419      	asrs	r1, r3, #16
 8011da0:	454e      	cmp	r6, r9
 8011da2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011da6:	f84a 3b04 	str.w	r3, [sl], #4
 8011daa:	d8e7      	bhi.n	8011d7c <__mdiff+0x80>
 8011dac:	1b33      	subs	r3, r6, r4
 8011dae:	3b15      	subs	r3, #21
 8011db0:	f023 0303 	bic.w	r3, r3, #3
 8011db4:	3304      	adds	r3, #4
 8011db6:	3415      	adds	r4, #21
 8011db8:	42a6      	cmp	r6, r4
 8011dba:	bf38      	it	cc
 8011dbc:	2304      	movcc	r3, #4
 8011dbe:	441d      	add	r5, r3
 8011dc0:	4473      	add	r3, lr
 8011dc2:	469e      	mov	lr, r3
 8011dc4:	462e      	mov	r6, r5
 8011dc6:	4566      	cmp	r6, ip
 8011dc8:	d30e      	bcc.n	8011de8 <__mdiff+0xec>
 8011dca:	f10c 0203 	add.w	r2, ip, #3
 8011dce:	1b52      	subs	r2, r2, r5
 8011dd0:	f022 0203 	bic.w	r2, r2, #3
 8011dd4:	3d03      	subs	r5, #3
 8011dd6:	45ac      	cmp	ip, r5
 8011dd8:	bf38      	it	cc
 8011dda:	2200      	movcc	r2, #0
 8011ddc:	441a      	add	r2, r3
 8011dde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011de2:	b17b      	cbz	r3, 8011e04 <__mdiff+0x108>
 8011de4:	6107      	str	r7, [r0, #16]
 8011de6:	e7a3      	b.n	8011d30 <__mdiff+0x34>
 8011de8:	f856 8b04 	ldr.w	r8, [r6], #4
 8011dec:	fa11 f288 	uxtah	r2, r1, r8
 8011df0:	1414      	asrs	r4, r2, #16
 8011df2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011df6:	b292      	uxth	r2, r2
 8011df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8011e00:	1421      	asrs	r1, r4, #16
 8011e02:	e7e0      	b.n	8011dc6 <__mdiff+0xca>
 8011e04:	3f01      	subs	r7, #1
 8011e06:	e7ea      	b.n	8011dde <__mdiff+0xe2>
 8011e08:	08012d4c 	.word	0x08012d4c
 8011e0c:	08012dca 	.word	0x08012dca

08011e10 <__d2b>:
 8011e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e14:	4689      	mov	r9, r1
 8011e16:	2101      	movs	r1, #1
 8011e18:	ec57 6b10 	vmov	r6, r7, d0
 8011e1c:	4690      	mov	r8, r2
 8011e1e:	f7ff fccf 	bl	80117c0 <_Balloc>
 8011e22:	4604      	mov	r4, r0
 8011e24:	b930      	cbnz	r0, 8011e34 <__d2b+0x24>
 8011e26:	4602      	mov	r2, r0
 8011e28:	4b25      	ldr	r3, [pc, #148]	; (8011ec0 <__d2b+0xb0>)
 8011e2a:	4826      	ldr	r0, [pc, #152]	; (8011ec4 <__d2b+0xb4>)
 8011e2c:	f240 310a 	movw	r1, #778	; 0x30a
 8011e30:	f7fe fd00 	bl	8010834 <__assert_func>
 8011e34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e3c:	bb35      	cbnz	r5, 8011e8c <__d2b+0x7c>
 8011e3e:	2e00      	cmp	r6, #0
 8011e40:	9301      	str	r3, [sp, #4]
 8011e42:	d028      	beq.n	8011e96 <__d2b+0x86>
 8011e44:	4668      	mov	r0, sp
 8011e46:	9600      	str	r6, [sp, #0]
 8011e48:	f7ff fd82 	bl	8011950 <__lo0bits>
 8011e4c:	9900      	ldr	r1, [sp, #0]
 8011e4e:	b300      	cbz	r0, 8011e92 <__d2b+0x82>
 8011e50:	9a01      	ldr	r2, [sp, #4]
 8011e52:	f1c0 0320 	rsb	r3, r0, #32
 8011e56:	fa02 f303 	lsl.w	r3, r2, r3
 8011e5a:	430b      	orrs	r3, r1
 8011e5c:	40c2      	lsrs	r2, r0
 8011e5e:	6163      	str	r3, [r4, #20]
 8011e60:	9201      	str	r2, [sp, #4]
 8011e62:	9b01      	ldr	r3, [sp, #4]
 8011e64:	61a3      	str	r3, [r4, #24]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	bf14      	ite	ne
 8011e6a:	2202      	movne	r2, #2
 8011e6c:	2201      	moveq	r2, #1
 8011e6e:	6122      	str	r2, [r4, #16]
 8011e70:	b1d5      	cbz	r5, 8011ea8 <__d2b+0x98>
 8011e72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e76:	4405      	add	r5, r0
 8011e78:	f8c9 5000 	str.w	r5, [r9]
 8011e7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e80:	f8c8 0000 	str.w	r0, [r8]
 8011e84:	4620      	mov	r0, r4
 8011e86:	b003      	add	sp, #12
 8011e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e90:	e7d5      	b.n	8011e3e <__d2b+0x2e>
 8011e92:	6161      	str	r1, [r4, #20]
 8011e94:	e7e5      	b.n	8011e62 <__d2b+0x52>
 8011e96:	a801      	add	r0, sp, #4
 8011e98:	f7ff fd5a 	bl	8011950 <__lo0bits>
 8011e9c:	9b01      	ldr	r3, [sp, #4]
 8011e9e:	6163      	str	r3, [r4, #20]
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	6122      	str	r2, [r4, #16]
 8011ea4:	3020      	adds	r0, #32
 8011ea6:	e7e3      	b.n	8011e70 <__d2b+0x60>
 8011ea8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011eac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011eb0:	f8c9 0000 	str.w	r0, [r9]
 8011eb4:	6918      	ldr	r0, [r3, #16]
 8011eb6:	f7ff fd2b 	bl	8011910 <__hi0bits>
 8011eba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ebe:	e7df      	b.n	8011e80 <__d2b+0x70>
 8011ec0:	08012d4c 	.word	0x08012d4c
 8011ec4:	08012dca 	.word	0x08012dca

08011ec8 <_calloc_r>:
 8011ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011eca:	fba1 2402 	umull	r2, r4, r1, r2
 8011ece:	b94c      	cbnz	r4, 8011ee4 <_calloc_r+0x1c>
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	9201      	str	r2, [sp, #4]
 8011ed4:	f7fd ffa8 	bl	800fe28 <_malloc_r>
 8011ed8:	9a01      	ldr	r2, [sp, #4]
 8011eda:	4605      	mov	r5, r0
 8011edc:	b930      	cbnz	r0, 8011eec <_calloc_r+0x24>
 8011ede:	4628      	mov	r0, r5
 8011ee0:	b003      	add	sp, #12
 8011ee2:	bd30      	pop	{r4, r5, pc}
 8011ee4:	220c      	movs	r2, #12
 8011ee6:	6002      	str	r2, [r0, #0]
 8011ee8:	2500      	movs	r5, #0
 8011eea:	e7f8      	b.n	8011ede <_calloc_r+0x16>
 8011eec:	4621      	mov	r1, r4
 8011eee:	f7fd ff27 	bl	800fd40 <memset>
 8011ef2:	e7f4      	b.n	8011ede <_calloc_r+0x16>

08011ef4 <__sfputc_r>:
 8011ef4:	6893      	ldr	r3, [r2, #8]
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	b410      	push	{r4}
 8011efc:	6093      	str	r3, [r2, #8]
 8011efe:	da08      	bge.n	8011f12 <__sfputc_r+0x1e>
 8011f00:	6994      	ldr	r4, [r2, #24]
 8011f02:	42a3      	cmp	r3, r4
 8011f04:	db01      	blt.n	8011f0a <__sfputc_r+0x16>
 8011f06:	290a      	cmp	r1, #10
 8011f08:	d103      	bne.n	8011f12 <__sfputc_r+0x1e>
 8011f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f0e:	f000 b98f 	b.w	8012230 <__swbuf_r>
 8011f12:	6813      	ldr	r3, [r2, #0]
 8011f14:	1c58      	adds	r0, r3, #1
 8011f16:	6010      	str	r0, [r2, #0]
 8011f18:	7019      	strb	r1, [r3, #0]
 8011f1a:	4608      	mov	r0, r1
 8011f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f20:	4770      	bx	lr

08011f22 <__sfputs_r>:
 8011f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f24:	4606      	mov	r6, r0
 8011f26:	460f      	mov	r7, r1
 8011f28:	4614      	mov	r4, r2
 8011f2a:	18d5      	adds	r5, r2, r3
 8011f2c:	42ac      	cmp	r4, r5
 8011f2e:	d101      	bne.n	8011f34 <__sfputs_r+0x12>
 8011f30:	2000      	movs	r0, #0
 8011f32:	e007      	b.n	8011f44 <__sfputs_r+0x22>
 8011f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f38:	463a      	mov	r2, r7
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f7ff ffda 	bl	8011ef4 <__sfputc_r>
 8011f40:	1c43      	adds	r3, r0, #1
 8011f42:	d1f3      	bne.n	8011f2c <__sfputs_r+0xa>
 8011f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f48 <_vfiprintf_r>:
 8011f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	b09d      	sub	sp, #116	; 0x74
 8011f50:	4614      	mov	r4, r2
 8011f52:	4698      	mov	r8, r3
 8011f54:	4606      	mov	r6, r0
 8011f56:	b118      	cbz	r0, 8011f60 <_vfiprintf_r+0x18>
 8011f58:	6983      	ldr	r3, [r0, #24]
 8011f5a:	b90b      	cbnz	r3, 8011f60 <_vfiprintf_r+0x18>
 8011f5c:	f7ff fb5a 	bl	8011614 <__sinit>
 8011f60:	4b89      	ldr	r3, [pc, #548]	; (8012188 <_vfiprintf_r+0x240>)
 8011f62:	429d      	cmp	r5, r3
 8011f64:	d11b      	bne.n	8011f9e <_vfiprintf_r+0x56>
 8011f66:	6875      	ldr	r5, [r6, #4]
 8011f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f6a:	07d9      	lsls	r1, r3, #31
 8011f6c:	d405      	bmi.n	8011f7a <_vfiprintf_r+0x32>
 8011f6e:	89ab      	ldrh	r3, [r5, #12]
 8011f70:	059a      	lsls	r2, r3, #22
 8011f72:	d402      	bmi.n	8011f7a <_vfiprintf_r+0x32>
 8011f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f76:	f7ff fc02 	bl	801177e <__retarget_lock_acquire_recursive>
 8011f7a:	89ab      	ldrh	r3, [r5, #12]
 8011f7c:	071b      	lsls	r3, r3, #28
 8011f7e:	d501      	bpl.n	8011f84 <_vfiprintf_r+0x3c>
 8011f80:	692b      	ldr	r3, [r5, #16]
 8011f82:	b9eb      	cbnz	r3, 8011fc0 <_vfiprintf_r+0x78>
 8011f84:	4629      	mov	r1, r5
 8011f86:	4630      	mov	r0, r6
 8011f88:	f000 f9c4 	bl	8012314 <__swsetup_r>
 8011f8c:	b1c0      	cbz	r0, 8011fc0 <_vfiprintf_r+0x78>
 8011f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f90:	07dc      	lsls	r4, r3, #31
 8011f92:	d50e      	bpl.n	8011fb2 <_vfiprintf_r+0x6a>
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f98:	b01d      	add	sp, #116	; 0x74
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	4b7b      	ldr	r3, [pc, #492]	; (801218c <_vfiprintf_r+0x244>)
 8011fa0:	429d      	cmp	r5, r3
 8011fa2:	d101      	bne.n	8011fa8 <_vfiprintf_r+0x60>
 8011fa4:	68b5      	ldr	r5, [r6, #8]
 8011fa6:	e7df      	b.n	8011f68 <_vfiprintf_r+0x20>
 8011fa8:	4b79      	ldr	r3, [pc, #484]	; (8012190 <_vfiprintf_r+0x248>)
 8011faa:	429d      	cmp	r5, r3
 8011fac:	bf08      	it	eq
 8011fae:	68f5      	ldreq	r5, [r6, #12]
 8011fb0:	e7da      	b.n	8011f68 <_vfiprintf_r+0x20>
 8011fb2:	89ab      	ldrh	r3, [r5, #12]
 8011fb4:	0598      	lsls	r0, r3, #22
 8011fb6:	d4ed      	bmi.n	8011f94 <_vfiprintf_r+0x4c>
 8011fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fba:	f7ff fbe1 	bl	8011780 <__retarget_lock_release_recursive>
 8011fbe:	e7e9      	b.n	8011f94 <_vfiprintf_r+0x4c>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8011fc4:	2320      	movs	r3, #32
 8011fc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fce:	2330      	movs	r3, #48	; 0x30
 8011fd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012194 <_vfiprintf_r+0x24c>
 8011fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fd8:	f04f 0901 	mov.w	r9, #1
 8011fdc:	4623      	mov	r3, r4
 8011fde:	469a      	mov	sl, r3
 8011fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fe4:	b10a      	cbz	r2, 8011fea <_vfiprintf_r+0xa2>
 8011fe6:	2a25      	cmp	r2, #37	; 0x25
 8011fe8:	d1f9      	bne.n	8011fde <_vfiprintf_r+0x96>
 8011fea:	ebba 0b04 	subs.w	fp, sl, r4
 8011fee:	d00b      	beq.n	8012008 <_vfiprintf_r+0xc0>
 8011ff0:	465b      	mov	r3, fp
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f7ff ff93 	bl	8011f22 <__sfputs_r>
 8011ffc:	3001      	adds	r0, #1
 8011ffe:	f000 80aa 	beq.w	8012156 <_vfiprintf_r+0x20e>
 8012002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012004:	445a      	add	r2, fp
 8012006:	9209      	str	r2, [sp, #36]	; 0x24
 8012008:	f89a 3000 	ldrb.w	r3, [sl]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 80a2 	beq.w	8012156 <_vfiprintf_r+0x20e>
 8012012:	2300      	movs	r3, #0
 8012014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801201c:	f10a 0a01 	add.w	sl, sl, #1
 8012020:	9304      	str	r3, [sp, #16]
 8012022:	9307      	str	r3, [sp, #28]
 8012024:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012028:	931a      	str	r3, [sp, #104]	; 0x68
 801202a:	4654      	mov	r4, sl
 801202c:	2205      	movs	r2, #5
 801202e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012032:	4858      	ldr	r0, [pc, #352]	; (8012194 <_vfiprintf_r+0x24c>)
 8012034:	f7ee f8ec 	bl	8000210 <memchr>
 8012038:	9a04      	ldr	r2, [sp, #16]
 801203a:	b9d8      	cbnz	r0, 8012074 <_vfiprintf_r+0x12c>
 801203c:	06d1      	lsls	r1, r2, #27
 801203e:	bf44      	itt	mi
 8012040:	2320      	movmi	r3, #32
 8012042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012046:	0713      	lsls	r3, r2, #28
 8012048:	bf44      	itt	mi
 801204a:	232b      	movmi	r3, #43	; 0x2b
 801204c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012050:	f89a 3000 	ldrb.w	r3, [sl]
 8012054:	2b2a      	cmp	r3, #42	; 0x2a
 8012056:	d015      	beq.n	8012084 <_vfiprintf_r+0x13c>
 8012058:	9a07      	ldr	r2, [sp, #28]
 801205a:	4654      	mov	r4, sl
 801205c:	2000      	movs	r0, #0
 801205e:	f04f 0c0a 	mov.w	ip, #10
 8012062:	4621      	mov	r1, r4
 8012064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012068:	3b30      	subs	r3, #48	; 0x30
 801206a:	2b09      	cmp	r3, #9
 801206c:	d94e      	bls.n	801210c <_vfiprintf_r+0x1c4>
 801206e:	b1b0      	cbz	r0, 801209e <_vfiprintf_r+0x156>
 8012070:	9207      	str	r2, [sp, #28]
 8012072:	e014      	b.n	801209e <_vfiprintf_r+0x156>
 8012074:	eba0 0308 	sub.w	r3, r0, r8
 8012078:	fa09 f303 	lsl.w	r3, r9, r3
 801207c:	4313      	orrs	r3, r2
 801207e:	9304      	str	r3, [sp, #16]
 8012080:	46a2      	mov	sl, r4
 8012082:	e7d2      	b.n	801202a <_vfiprintf_r+0xe2>
 8012084:	9b03      	ldr	r3, [sp, #12]
 8012086:	1d19      	adds	r1, r3, #4
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	9103      	str	r1, [sp, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	bfbb      	ittet	lt
 8012090:	425b      	neglt	r3, r3
 8012092:	f042 0202 	orrlt.w	r2, r2, #2
 8012096:	9307      	strge	r3, [sp, #28]
 8012098:	9307      	strlt	r3, [sp, #28]
 801209a:	bfb8      	it	lt
 801209c:	9204      	strlt	r2, [sp, #16]
 801209e:	7823      	ldrb	r3, [r4, #0]
 80120a0:	2b2e      	cmp	r3, #46	; 0x2e
 80120a2:	d10c      	bne.n	80120be <_vfiprintf_r+0x176>
 80120a4:	7863      	ldrb	r3, [r4, #1]
 80120a6:	2b2a      	cmp	r3, #42	; 0x2a
 80120a8:	d135      	bne.n	8012116 <_vfiprintf_r+0x1ce>
 80120aa:	9b03      	ldr	r3, [sp, #12]
 80120ac:	1d1a      	adds	r2, r3, #4
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	9203      	str	r2, [sp, #12]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	bfb8      	it	lt
 80120b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80120ba:	3402      	adds	r4, #2
 80120bc:	9305      	str	r3, [sp, #20]
 80120be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121a4 <_vfiprintf_r+0x25c>
 80120c2:	7821      	ldrb	r1, [r4, #0]
 80120c4:	2203      	movs	r2, #3
 80120c6:	4650      	mov	r0, sl
 80120c8:	f7ee f8a2 	bl	8000210 <memchr>
 80120cc:	b140      	cbz	r0, 80120e0 <_vfiprintf_r+0x198>
 80120ce:	2340      	movs	r3, #64	; 0x40
 80120d0:	eba0 000a 	sub.w	r0, r0, sl
 80120d4:	fa03 f000 	lsl.w	r0, r3, r0
 80120d8:	9b04      	ldr	r3, [sp, #16]
 80120da:	4303      	orrs	r3, r0
 80120dc:	3401      	adds	r4, #1
 80120de:	9304      	str	r3, [sp, #16]
 80120e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120e4:	482c      	ldr	r0, [pc, #176]	; (8012198 <_vfiprintf_r+0x250>)
 80120e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120ea:	2206      	movs	r2, #6
 80120ec:	f7ee f890 	bl	8000210 <memchr>
 80120f0:	2800      	cmp	r0, #0
 80120f2:	d03f      	beq.n	8012174 <_vfiprintf_r+0x22c>
 80120f4:	4b29      	ldr	r3, [pc, #164]	; (801219c <_vfiprintf_r+0x254>)
 80120f6:	bb1b      	cbnz	r3, 8012140 <_vfiprintf_r+0x1f8>
 80120f8:	9b03      	ldr	r3, [sp, #12]
 80120fa:	3307      	adds	r3, #7
 80120fc:	f023 0307 	bic.w	r3, r3, #7
 8012100:	3308      	adds	r3, #8
 8012102:	9303      	str	r3, [sp, #12]
 8012104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012106:	443b      	add	r3, r7
 8012108:	9309      	str	r3, [sp, #36]	; 0x24
 801210a:	e767      	b.n	8011fdc <_vfiprintf_r+0x94>
 801210c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012110:	460c      	mov	r4, r1
 8012112:	2001      	movs	r0, #1
 8012114:	e7a5      	b.n	8012062 <_vfiprintf_r+0x11a>
 8012116:	2300      	movs	r3, #0
 8012118:	3401      	adds	r4, #1
 801211a:	9305      	str	r3, [sp, #20]
 801211c:	4619      	mov	r1, r3
 801211e:	f04f 0c0a 	mov.w	ip, #10
 8012122:	4620      	mov	r0, r4
 8012124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012128:	3a30      	subs	r2, #48	; 0x30
 801212a:	2a09      	cmp	r2, #9
 801212c:	d903      	bls.n	8012136 <_vfiprintf_r+0x1ee>
 801212e:	2b00      	cmp	r3, #0
 8012130:	d0c5      	beq.n	80120be <_vfiprintf_r+0x176>
 8012132:	9105      	str	r1, [sp, #20]
 8012134:	e7c3      	b.n	80120be <_vfiprintf_r+0x176>
 8012136:	fb0c 2101 	mla	r1, ip, r1, r2
 801213a:	4604      	mov	r4, r0
 801213c:	2301      	movs	r3, #1
 801213e:	e7f0      	b.n	8012122 <_vfiprintf_r+0x1da>
 8012140:	ab03      	add	r3, sp, #12
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	462a      	mov	r2, r5
 8012146:	4b16      	ldr	r3, [pc, #88]	; (80121a0 <_vfiprintf_r+0x258>)
 8012148:	a904      	add	r1, sp, #16
 801214a:	4630      	mov	r0, r6
 801214c:	f7fd ff80 	bl	8010050 <_printf_float>
 8012150:	4607      	mov	r7, r0
 8012152:	1c78      	adds	r0, r7, #1
 8012154:	d1d6      	bne.n	8012104 <_vfiprintf_r+0x1bc>
 8012156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012158:	07d9      	lsls	r1, r3, #31
 801215a:	d405      	bmi.n	8012168 <_vfiprintf_r+0x220>
 801215c:	89ab      	ldrh	r3, [r5, #12]
 801215e:	059a      	lsls	r2, r3, #22
 8012160:	d402      	bmi.n	8012168 <_vfiprintf_r+0x220>
 8012162:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012164:	f7ff fb0c 	bl	8011780 <__retarget_lock_release_recursive>
 8012168:	89ab      	ldrh	r3, [r5, #12]
 801216a:	065b      	lsls	r3, r3, #25
 801216c:	f53f af12 	bmi.w	8011f94 <_vfiprintf_r+0x4c>
 8012170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012172:	e711      	b.n	8011f98 <_vfiprintf_r+0x50>
 8012174:	ab03      	add	r3, sp, #12
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	462a      	mov	r2, r5
 801217a:	4b09      	ldr	r3, [pc, #36]	; (80121a0 <_vfiprintf_r+0x258>)
 801217c:	a904      	add	r1, sp, #16
 801217e:	4630      	mov	r0, r6
 8012180:	f7fe fa0a 	bl	8010598 <_printf_i>
 8012184:	e7e4      	b.n	8012150 <_vfiprintf_r+0x208>
 8012186:	bf00      	nop
 8012188:	08012d80 	.word	0x08012d80
 801218c:	08012da0 	.word	0x08012da0
 8012190:	08012d60 	.word	0x08012d60
 8012194:	08012f24 	.word	0x08012f24
 8012198:	08012f2e 	.word	0x08012f2e
 801219c:	08010051 	.word	0x08010051
 80121a0:	08011f23 	.word	0x08011f23
 80121a4:	08012f2a 	.word	0x08012f2a

080121a8 <__sread>:
 80121a8:	b510      	push	{r4, lr}
 80121aa:	460c      	mov	r4, r1
 80121ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b0:	f000 fa70 	bl	8012694 <_read_r>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	bfab      	itete	ge
 80121b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121ba:	89a3      	ldrhlt	r3, [r4, #12]
 80121bc:	181b      	addge	r3, r3, r0
 80121be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121c2:	bfac      	ite	ge
 80121c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80121c6:	81a3      	strhlt	r3, [r4, #12]
 80121c8:	bd10      	pop	{r4, pc}

080121ca <__swrite>:
 80121ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	461f      	mov	r7, r3
 80121d0:	898b      	ldrh	r3, [r1, #12]
 80121d2:	05db      	lsls	r3, r3, #23
 80121d4:	4605      	mov	r5, r0
 80121d6:	460c      	mov	r4, r1
 80121d8:	4616      	mov	r6, r2
 80121da:	d505      	bpl.n	80121e8 <__swrite+0x1e>
 80121dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e0:	2302      	movs	r3, #2
 80121e2:	2200      	movs	r2, #0
 80121e4:	f000 f9de 	bl	80125a4 <_lseek_r>
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121f2:	81a3      	strh	r3, [r4, #12]
 80121f4:	4632      	mov	r2, r6
 80121f6:	463b      	mov	r3, r7
 80121f8:	4628      	mov	r0, r5
 80121fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121fe:	f000 b877 	b.w	80122f0 <_write_r>

08012202 <__sseek>:
 8012202:	b510      	push	{r4, lr}
 8012204:	460c      	mov	r4, r1
 8012206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801220a:	f000 f9cb 	bl	80125a4 <_lseek_r>
 801220e:	1c43      	adds	r3, r0, #1
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	bf15      	itete	ne
 8012214:	6560      	strne	r0, [r4, #84]	; 0x54
 8012216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801221a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801221e:	81a3      	strheq	r3, [r4, #12]
 8012220:	bf18      	it	ne
 8012222:	81a3      	strhne	r3, [r4, #12]
 8012224:	bd10      	pop	{r4, pc}

08012226 <__sclose>:
 8012226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222a:	f000 b8e9 	b.w	8012400 <_close_r>
	...

08012230 <__swbuf_r>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	460e      	mov	r6, r1
 8012234:	4614      	mov	r4, r2
 8012236:	4605      	mov	r5, r0
 8012238:	b118      	cbz	r0, 8012242 <__swbuf_r+0x12>
 801223a:	6983      	ldr	r3, [r0, #24]
 801223c:	b90b      	cbnz	r3, 8012242 <__swbuf_r+0x12>
 801223e:	f7ff f9e9 	bl	8011614 <__sinit>
 8012242:	4b21      	ldr	r3, [pc, #132]	; (80122c8 <__swbuf_r+0x98>)
 8012244:	429c      	cmp	r4, r3
 8012246:	d12b      	bne.n	80122a0 <__swbuf_r+0x70>
 8012248:	686c      	ldr	r4, [r5, #4]
 801224a:	69a3      	ldr	r3, [r4, #24]
 801224c:	60a3      	str	r3, [r4, #8]
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	071a      	lsls	r2, r3, #28
 8012252:	d52f      	bpl.n	80122b4 <__swbuf_r+0x84>
 8012254:	6923      	ldr	r3, [r4, #16]
 8012256:	b36b      	cbz	r3, 80122b4 <__swbuf_r+0x84>
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	6820      	ldr	r0, [r4, #0]
 801225c:	1ac0      	subs	r0, r0, r3
 801225e:	6963      	ldr	r3, [r4, #20]
 8012260:	b2f6      	uxtb	r6, r6
 8012262:	4283      	cmp	r3, r0
 8012264:	4637      	mov	r7, r6
 8012266:	dc04      	bgt.n	8012272 <__swbuf_r+0x42>
 8012268:	4621      	mov	r1, r4
 801226a:	4628      	mov	r0, r5
 801226c:	f000 f95e 	bl	801252c <_fflush_r>
 8012270:	bb30      	cbnz	r0, 80122c0 <__swbuf_r+0x90>
 8012272:	68a3      	ldr	r3, [r4, #8]
 8012274:	3b01      	subs	r3, #1
 8012276:	60a3      	str	r3, [r4, #8]
 8012278:	6823      	ldr	r3, [r4, #0]
 801227a:	1c5a      	adds	r2, r3, #1
 801227c:	6022      	str	r2, [r4, #0]
 801227e:	701e      	strb	r6, [r3, #0]
 8012280:	6963      	ldr	r3, [r4, #20]
 8012282:	3001      	adds	r0, #1
 8012284:	4283      	cmp	r3, r0
 8012286:	d004      	beq.n	8012292 <__swbuf_r+0x62>
 8012288:	89a3      	ldrh	r3, [r4, #12]
 801228a:	07db      	lsls	r3, r3, #31
 801228c:	d506      	bpl.n	801229c <__swbuf_r+0x6c>
 801228e:	2e0a      	cmp	r6, #10
 8012290:	d104      	bne.n	801229c <__swbuf_r+0x6c>
 8012292:	4621      	mov	r1, r4
 8012294:	4628      	mov	r0, r5
 8012296:	f000 f949 	bl	801252c <_fflush_r>
 801229a:	b988      	cbnz	r0, 80122c0 <__swbuf_r+0x90>
 801229c:	4638      	mov	r0, r7
 801229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122a0:	4b0a      	ldr	r3, [pc, #40]	; (80122cc <__swbuf_r+0x9c>)
 80122a2:	429c      	cmp	r4, r3
 80122a4:	d101      	bne.n	80122aa <__swbuf_r+0x7a>
 80122a6:	68ac      	ldr	r4, [r5, #8]
 80122a8:	e7cf      	b.n	801224a <__swbuf_r+0x1a>
 80122aa:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <__swbuf_r+0xa0>)
 80122ac:	429c      	cmp	r4, r3
 80122ae:	bf08      	it	eq
 80122b0:	68ec      	ldreq	r4, [r5, #12]
 80122b2:	e7ca      	b.n	801224a <__swbuf_r+0x1a>
 80122b4:	4621      	mov	r1, r4
 80122b6:	4628      	mov	r0, r5
 80122b8:	f000 f82c 	bl	8012314 <__swsetup_r>
 80122bc:	2800      	cmp	r0, #0
 80122be:	d0cb      	beq.n	8012258 <__swbuf_r+0x28>
 80122c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80122c4:	e7ea      	b.n	801229c <__swbuf_r+0x6c>
 80122c6:	bf00      	nop
 80122c8:	08012d80 	.word	0x08012d80
 80122cc:	08012da0 	.word	0x08012da0
 80122d0:	08012d60 	.word	0x08012d60

080122d4 <__ascii_wctomb>:
 80122d4:	b149      	cbz	r1, 80122ea <__ascii_wctomb+0x16>
 80122d6:	2aff      	cmp	r2, #255	; 0xff
 80122d8:	bf85      	ittet	hi
 80122da:	238a      	movhi	r3, #138	; 0x8a
 80122dc:	6003      	strhi	r3, [r0, #0]
 80122de:	700a      	strbls	r2, [r1, #0]
 80122e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80122e4:	bf98      	it	ls
 80122e6:	2001      	movls	r0, #1
 80122e8:	4770      	bx	lr
 80122ea:	4608      	mov	r0, r1
 80122ec:	4770      	bx	lr
	...

080122f0 <_write_r>:
 80122f0:	b538      	push	{r3, r4, r5, lr}
 80122f2:	4d07      	ldr	r5, [pc, #28]	; (8012310 <_write_r+0x20>)
 80122f4:	4604      	mov	r4, r0
 80122f6:	4608      	mov	r0, r1
 80122f8:	4611      	mov	r1, r2
 80122fa:	2200      	movs	r2, #0
 80122fc:	602a      	str	r2, [r5, #0]
 80122fe:	461a      	mov	r2, r3
 8012300:	f000 fa86 	bl	8012810 <_write>
 8012304:	1c43      	adds	r3, r0, #1
 8012306:	d102      	bne.n	801230e <_write_r+0x1e>
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	b103      	cbz	r3, 801230e <_write_r+0x1e>
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	bd38      	pop	{r3, r4, r5, pc}
 8012310:	200029c8 	.word	0x200029c8

08012314 <__swsetup_r>:
 8012314:	4b32      	ldr	r3, [pc, #200]	; (80123e0 <__swsetup_r+0xcc>)
 8012316:	b570      	push	{r4, r5, r6, lr}
 8012318:	681d      	ldr	r5, [r3, #0]
 801231a:	4606      	mov	r6, r0
 801231c:	460c      	mov	r4, r1
 801231e:	b125      	cbz	r5, 801232a <__swsetup_r+0x16>
 8012320:	69ab      	ldr	r3, [r5, #24]
 8012322:	b913      	cbnz	r3, 801232a <__swsetup_r+0x16>
 8012324:	4628      	mov	r0, r5
 8012326:	f7ff f975 	bl	8011614 <__sinit>
 801232a:	4b2e      	ldr	r3, [pc, #184]	; (80123e4 <__swsetup_r+0xd0>)
 801232c:	429c      	cmp	r4, r3
 801232e:	d10f      	bne.n	8012350 <__swsetup_r+0x3c>
 8012330:	686c      	ldr	r4, [r5, #4]
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012338:	0719      	lsls	r1, r3, #28
 801233a:	d42c      	bmi.n	8012396 <__swsetup_r+0x82>
 801233c:	06dd      	lsls	r5, r3, #27
 801233e:	d411      	bmi.n	8012364 <__swsetup_r+0x50>
 8012340:	2309      	movs	r3, #9
 8012342:	6033      	str	r3, [r6, #0]
 8012344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012348:	81a3      	strh	r3, [r4, #12]
 801234a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801234e:	e03e      	b.n	80123ce <__swsetup_r+0xba>
 8012350:	4b25      	ldr	r3, [pc, #148]	; (80123e8 <__swsetup_r+0xd4>)
 8012352:	429c      	cmp	r4, r3
 8012354:	d101      	bne.n	801235a <__swsetup_r+0x46>
 8012356:	68ac      	ldr	r4, [r5, #8]
 8012358:	e7eb      	b.n	8012332 <__swsetup_r+0x1e>
 801235a:	4b24      	ldr	r3, [pc, #144]	; (80123ec <__swsetup_r+0xd8>)
 801235c:	429c      	cmp	r4, r3
 801235e:	bf08      	it	eq
 8012360:	68ec      	ldreq	r4, [r5, #12]
 8012362:	e7e6      	b.n	8012332 <__swsetup_r+0x1e>
 8012364:	0758      	lsls	r0, r3, #29
 8012366:	d512      	bpl.n	801238e <__swsetup_r+0x7a>
 8012368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801236a:	b141      	cbz	r1, 801237e <__swsetup_r+0x6a>
 801236c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012370:	4299      	cmp	r1, r3
 8012372:	d002      	beq.n	801237a <__swsetup_r+0x66>
 8012374:	4630      	mov	r0, r6
 8012376:	f7fd fceb 	bl	800fd50 <_free_r>
 801237a:	2300      	movs	r3, #0
 801237c:	6363      	str	r3, [r4, #52]	; 0x34
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012384:	81a3      	strh	r3, [r4, #12]
 8012386:	2300      	movs	r3, #0
 8012388:	6063      	str	r3, [r4, #4]
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	f043 0308 	orr.w	r3, r3, #8
 8012394:	81a3      	strh	r3, [r4, #12]
 8012396:	6923      	ldr	r3, [r4, #16]
 8012398:	b94b      	cbnz	r3, 80123ae <__swsetup_r+0x9a>
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123a4:	d003      	beq.n	80123ae <__swsetup_r+0x9a>
 80123a6:	4621      	mov	r1, r4
 80123a8:	4630      	mov	r0, r6
 80123aa:	f000 f933 	bl	8012614 <__smakebuf_r>
 80123ae:	89a0      	ldrh	r0, [r4, #12]
 80123b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123b4:	f010 0301 	ands.w	r3, r0, #1
 80123b8:	d00a      	beq.n	80123d0 <__swsetup_r+0xbc>
 80123ba:	2300      	movs	r3, #0
 80123bc:	60a3      	str	r3, [r4, #8]
 80123be:	6963      	ldr	r3, [r4, #20]
 80123c0:	425b      	negs	r3, r3
 80123c2:	61a3      	str	r3, [r4, #24]
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	b943      	cbnz	r3, 80123da <__swsetup_r+0xc6>
 80123c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123cc:	d1ba      	bne.n	8012344 <__swsetup_r+0x30>
 80123ce:	bd70      	pop	{r4, r5, r6, pc}
 80123d0:	0781      	lsls	r1, r0, #30
 80123d2:	bf58      	it	pl
 80123d4:	6963      	ldrpl	r3, [r4, #20]
 80123d6:	60a3      	str	r3, [r4, #8]
 80123d8:	e7f4      	b.n	80123c4 <__swsetup_r+0xb0>
 80123da:	2000      	movs	r0, #0
 80123dc:	e7f7      	b.n	80123ce <__swsetup_r+0xba>
 80123de:	bf00      	nop
 80123e0:	20000188 	.word	0x20000188
 80123e4:	08012d80 	.word	0x08012d80
 80123e8:	08012da0 	.word	0x08012da0
 80123ec:	08012d60 	.word	0x08012d60

080123f0 <abort>:
 80123f0:	b508      	push	{r3, lr}
 80123f2:	2006      	movs	r0, #6
 80123f4:	f000 f988 	bl	8012708 <raise>
 80123f8:	2001      	movs	r0, #1
 80123fa:	f000 fa11 	bl	8012820 <_exit>
	...

08012400 <_close_r>:
 8012400:	b538      	push	{r3, r4, r5, lr}
 8012402:	4d06      	ldr	r5, [pc, #24]	; (801241c <_close_r+0x1c>)
 8012404:	2300      	movs	r3, #0
 8012406:	4604      	mov	r4, r0
 8012408:	4608      	mov	r0, r1
 801240a:	602b      	str	r3, [r5, #0]
 801240c:	f000 f9ba 	bl	8012784 <_close>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_close_r+0x1a>
 8012414:	682b      	ldr	r3, [r5, #0]
 8012416:	b103      	cbz	r3, 801241a <_close_r+0x1a>
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	200029c8 	.word	0x200029c8

08012420 <__sflush_r>:
 8012420:	898a      	ldrh	r2, [r1, #12]
 8012422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012426:	4605      	mov	r5, r0
 8012428:	0710      	lsls	r0, r2, #28
 801242a:	460c      	mov	r4, r1
 801242c:	d458      	bmi.n	80124e0 <__sflush_r+0xc0>
 801242e:	684b      	ldr	r3, [r1, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	dc05      	bgt.n	8012440 <__sflush_r+0x20>
 8012434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012436:	2b00      	cmp	r3, #0
 8012438:	dc02      	bgt.n	8012440 <__sflush_r+0x20>
 801243a:	2000      	movs	r0, #0
 801243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012442:	2e00      	cmp	r6, #0
 8012444:	d0f9      	beq.n	801243a <__sflush_r+0x1a>
 8012446:	2300      	movs	r3, #0
 8012448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801244c:	682f      	ldr	r7, [r5, #0]
 801244e:	602b      	str	r3, [r5, #0]
 8012450:	d032      	beq.n	80124b8 <__sflush_r+0x98>
 8012452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012454:	89a3      	ldrh	r3, [r4, #12]
 8012456:	075a      	lsls	r2, r3, #29
 8012458:	d505      	bpl.n	8012466 <__sflush_r+0x46>
 801245a:	6863      	ldr	r3, [r4, #4]
 801245c:	1ac0      	subs	r0, r0, r3
 801245e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012460:	b10b      	cbz	r3, 8012466 <__sflush_r+0x46>
 8012462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012464:	1ac0      	subs	r0, r0, r3
 8012466:	2300      	movs	r3, #0
 8012468:	4602      	mov	r2, r0
 801246a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801246c:	6a21      	ldr	r1, [r4, #32]
 801246e:	4628      	mov	r0, r5
 8012470:	47b0      	blx	r6
 8012472:	1c43      	adds	r3, r0, #1
 8012474:	89a3      	ldrh	r3, [r4, #12]
 8012476:	d106      	bne.n	8012486 <__sflush_r+0x66>
 8012478:	6829      	ldr	r1, [r5, #0]
 801247a:	291d      	cmp	r1, #29
 801247c:	d82c      	bhi.n	80124d8 <__sflush_r+0xb8>
 801247e:	4a2a      	ldr	r2, [pc, #168]	; (8012528 <__sflush_r+0x108>)
 8012480:	40ca      	lsrs	r2, r1
 8012482:	07d6      	lsls	r6, r2, #31
 8012484:	d528      	bpl.n	80124d8 <__sflush_r+0xb8>
 8012486:	2200      	movs	r2, #0
 8012488:	6062      	str	r2, [r4, #4]
 801248a:	04d9      	lsls	r1, r3, #19
 801248c:	6922      	ldr	r2, [r4, #16]
 801248e:	6022      	str	r2, [r4, #0]
 8012490:	d504      	bpl.n	801249c <__sflush_r+0x7c>
 8012492:	1c42      	adds	r2, r0, #1
 8012494:	d101      	bne.n	801249a <__sflush_r+0x7a>
 8012496:	682b      	ldr	r3, [r5, #0]
 8012498:	b903      	cbnz	r3, 801249c <__sflush_r+0x7c>
 801249a:	6560      	str	r0, [r4, #84]	; 0x54
 801249c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801249e:	602f      	str	r7, [r5, #0]
 80124a0:	2900      	cmp	r1, #0
 80124a2:	d0ca      	beq.n	801243a <__sflush_r+0x1a>
 80124a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124a8:	4299      	cmp	r1, r3
 80124aa:	d002      	beq.n	80124b2 <__sflush_r+0x92>
 80124ac:	4628      	mov	r0, r5
 80124ae:	f7fd fc4f 	bl	800fd50 <_free_r>
 80124b2:	2000      	movs	r0, #0
 80124b4:	6360      	str	r0, [r4, #52]	; 0x34
 80124b6:	e7c1      	b.n	801243c <__sflush_r+0x1c>
 80124b8:	6a21      	ldr	r1, [r4, #32]
 80124ba:	2301      	movs	r3, #1
 80124bc:	4628      	mov	r0, r5
 80124be:	47b0      	blx	r6
 80124c0:	1c41      	adds	r1, r0, #1
 80124c2:	d1c7      	bne.n	8012454 <__sflush_r+0x34>
 80124c4:	682b      	ldr	r3, [r5, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d0c4      	beq.n	8012454 <__sflush_r+0x34>
 80124ca:	2b1d      	cmp	r3, #29
 80124cc:	d001      	beq.n	80124d2 <__sflush_r+0xb2>
 80124ce:	2b16      	cmp	r3, #22
 80124d0:	d101      	bne.n	80124d6 <__sflush_r+0xb6>
 80124d2:	602f      	str	r7, [r5, #0]
 80124d4:	e7b1      	b.n	801243a <__sflush_r+0x1a>
 80124d6:	89a3      	ldrh	r3, [r4, #12]
 80124d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124dc:	81a3      	strh	r3, [r4, #12]
 80124de:	e7ad      	b.n	801243c <__sflush_r+0x1c>
 80124e0:	690f      	ldr	r7, [r1, #16]
 80124e2:	2f00      	cmp	r7, #0
 80124e4:	d0a9      	beq.n	801243a <__sflush_r+0x1a>
 80124e6:	0793      	lsls	r3, r2, #30
 80124e8:	680e      	ldr	r6, [r1, #0]
 80124ea:	bf08      	it	eq
 80124ec:	694b      	ldreq	r3, [r1, #20]
 80124ee:	600f      	str	r7, [r1, #0]
 80124f0:	bf18      	it	ne
 80124f2:	2300      	movne	r3, #0
 80124f4:	eba6 0807 	sub.w	r8, r6, r7
 80124f8:	608b      	str	r3, [r1, #8]
 80124fa:	f1b8 0f00 	cmp.w	r8, #0
 80124fe:	dd9c      	ble.n	801243a <__sflush_r+0x1a>
 8012500:	6a21      	ldr	r1, [r4, #32]
 8012502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012504:	4643      	mov	r3, r8
 8012506:	463a      	mov	r2, r7
 8012508:	4628      	mov	r0, r5
 801250a:	47b0      	blx	r6
 801250c:	2800      	cmp	r0, #0
 801250e:	dc06      	bgt.n	801251e <__sflush_r+0xfe>
 8012510:	89a3      	ldrh	r3, [r4, #12]
 8012512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012516:	81a3      	strh	r3, [r4, #12]
 8012518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801251c:	e78e      	b.n	801243c <__sflush_r+0x1c>
 801251e:	4407      	add	r7, r0
 8012520:	eba8 0800 	sub.w	r8, r8, r0
 8012524:	e7e9      	b.n	80124fa <__sflush_r+0xda>
 8012526:	bf00      	nop
 8012528:	20400001 	.word	0x20400001

0801252c <_fflush_r>:
 801252c:	b538      	push	{r3, r4, r5, lr}
 801252e:	690b      	ldr	r3, [r1, #16]
 8012530:	4605      	mov	r5, r0
 8012532:	460c      	mov	r4, r1
 8012534:	b913      	cbnz	r3, 801253c <_fflush_r+0x10>
 8012536:	2500      	movs	r5, #0
 8012538:	4628      	mov	r0, r5
 801253a:	bd38      	pop	{r3, r4, r5, pc}
 801253c:	b118      	cbz	r0, 8012546 <_fflush_r+0x1a>
 801253e:	6983      	ldr	r3, [r0, #24]
 8012540:	b90b      	cbnz	r3, 8012546 <_fflush_r+0x1a>
 8012542:	f7ff f867 	bl	8011614 <__sinit>
 8012546:	4b14      	ldr	r3, [pc, #80]	; (8012598 <_fflush_r+0x6c>)
 8012548:	429c      	cmp	r4, r3
 801254a:	d11b      	bne.n	8012584 <_fflush_r+0x58>
 801254c:	686c      	ldr	r4, [r5, #4]
 801254e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d0ef      	beq.n	8012536 <_fflush_r+0xa>
 8012556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012558:	07d0      	lsls	r0, r2, #31
 801255a:	d404      	bmi.n	8012566 <_fflush_r+0x3a>
 801255c:	0599      	lsls	r1, r3, #22
 801255e:	d402      	bmi.n	8012566 <_fflush_r+0x3a>
 8012560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012562:	f7ff f90c 	bl	801177e <__retarget_lock_acquire_recursive>
 8012566:	4628      	mov	r0, r5
 8012568:	4621      	mov	r1, r4
 801256a:	f7ff ff59 	bl	8012420 <__sflush_r>
 801256e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012570:	07da      	lsls	r2, r3, #31
 8012572:	4605      	mov	r5, r0
 8012574:	d4e0      	bmi.n	8012538 <_fflush_r+0xc>
 8012576:	89a3      	ldrh	r3, [r4, #12]
 8012578:	059b      	lsls	r3, r3, #22
 801257a:	d4dd      	bmi.n	8012538 <_fflush_r+0xc>
 801257c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801257e:	f7ff f8ff 	bl	8011780 <__retarget_lock_release_recursive>
 8012582:	e7d9      	b.n	8012538 <_fflush_r+0xc>
 8012584:	4b05      	ldr	r3, [pc, #20]	; (801259c <_fflush_r+0x70>)
 8012586:	429c      	cmp	r4, r3
 8012588:	d101      	bne.n	801258e <_fflush_r+0x62>
 801258a:	68ac      	ldr	r4, [r5, #8]
 801258c:	e7df      	b.n	801254e <_fflush_r+0x22>
 801258e:	4b04      	ldr	r3, [pc, #16]	; (80125a0 <_fflush_r+0x74>)
 8012590:	429c      	cmp	r4, r3
 8012592:	bf08      	it	eq
 8012594:	68ec      	ldreq	r4, [r5, #12]
 8012596:	e7da      	b.n	801254e <_fflush_r+0x22>
 8012598:	08012d80 	.word	0x08012d80
 801259c:	08012da0 	.word	0x08012da0
 80125a0:	08012d60 	.word	0x08012d60

080125a4 <_lseek_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d07      	ldr	r5, [pc, #28]	; (80125c4 <_lseek_r+0x20>)
 80125a8:	4604      	mov	r4, r0
 80125aa:	4608      	mov	r0, r1
 80125ac:	4611      	mov	r1, r2
 80125ae:	2200      	movs	r2, #0
 80125b0:	602a      	str	r2, [r5, #0]
 80125b2:	461a      	mov	r2, r3
 80125b4:	f000 f90e 	bl	80127d4 <_lseek>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_lseek_r+0x1e>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_lseek_r+0x1e>
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	200029c8 	.word	0x200029c8

080125c8 <__swhatbuf_r>:
 80125c8:	b570      	push	{r4, r5, r6, lr}
 80125ca:	460e      	mov	r6, r1
 80125cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d0:	2900      	cmp	r1, #0
 80125d2:	b096      	sub	sp, #88	; 0x58
 80125d4:	4614      	mov	r4, r2
 80125d6:	461d      	mov	r5, r3
 80125d8:	da08      	bge.n	80125ec <__swhatbuf_r+0x24>
 80125da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80125de:	2200      	movs	r2, #0
 80125e0:	602a      	str	r2, [r5, #0]
 80125e2:	061a      	lsls	r2, r3, #24
 80125e4:	d410      	bmi.n	8012608 <__swhatbuf_r+0x40>
 80125e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ea:	e00e      	b.n	801260a <__swhatbuf_r+0x42>
 80125ec:	466a      	mov	r2, sp
 80125ee:	f000 f8a7 	bl	8012740 <_fstat_r>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	dbf1      	blt.n	80125da <__swhatbuf_r+0x12>
 80125f6:	9a01      	ldr	r2, [sp, #4]
 80125f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80125fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012600:	425a      	negs	r2, r3
 8012602:	415a      	adcs	r2, r3
 8012604:	602a      	str	r2, [r5, #0]
 8012606:	e7ee      	b.n	80125e6 <__swhatbuf_r+0x1e>
 8012608:	2340      	movs	r3, #64	; 0x40
 801260a:	2000      	movs	r0, #0
 801260c:	6023      	str	r3, [r4, #0]
 801260e:	b016      	add	sp, #88	; 0x58
 8012610:	bd70      	pop	{r4, r5, r6, pc}
	...

08012614 <__smakebuf_r>:
 8012614:	898b      	ldrh	r3, [r1, #12]
 8012616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012618:	079d      	lsls	r5, r3, #30
 801261a:	4606      	mov	r6, r0
 801261c:	460c      	mov	r4, r1
 801261e:	d507      	bpl.n	8012630 <__smakebuf_r+0x1c>
 8012620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012624:	6023      	str	r3, [r4, #0]
 8012626:	6123      	str	r3, [r4, #16]
 8012628:	2301      	movs	r3, #1
 801262a:	6163      	str	r3, [r4, #20]
 801262c:	b002      	add	sp, #8
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	ab01      	add	r3, sp, #4
 8012632:	466a      	mov	r2, sp
 8012634:	f7ff ffc8 	bl	80125c8 <__swhatbuf_r>
 8012638:	9900      	ldr	r1, [sp, #0]
 801263a:	4605      	mov	r5, r0
 801263c:	4630      	mov	r0, r6
 801263e:	f7fd fbf3 	bl	800fe28 <_malloc_r>
 8012642:	b948      	cbnz	r0, 8012658 <__smakebuf_r+0x44>
 8012644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012648:	059a      	lsls	r2, r3, #22
 801264a:	d4ef      	bmi.n	801262c <__smakebuf_r+0x18>
 801264c:	f023 0303 	bic.w	r3, r3, #3
 8012650:	f043 0302 	orr.w	r3, r3, #2
 8012654:	81a3      	strh	r3, [r4, #12]
 8012656:	e7e3      	b.n	8012620 <__smakebuf_r+0xc>
 8012658:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <__smakebuf_r+0x7c>)
 801265a:	62b3      	str	r3, [r6, #40]	; 0x28
 801265c:	89a3      	ldrh	r3, [r4, #12]
 801265e:	6020      	str	r0, [r4, #0]
 8012660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012664:	81a3      	strh	r3, [r4, #12]
 8012666:	9b00      	ldr	r3, [sp, #0]
 8012668:	6163      	str	r3, [r4, #20]
 801266a:	9b01      	ldr	r3, [sp, #4]
 801266c:	6120      	str	r0, [r4, #16]
 801266e:	b15b      	cbz	r3, 8012688 <__smakebuf_r+0x74>
 8012670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012674:	4630      	mov	r0, r6
 8012676:	f000 f875 	bl	8012764 <_isatty_r>
 801267a:	b128      	cbz	r0, 8012688 <__smakebuf_r+0x74>
 801267c:	89a3      	ldrh	r3, [r4, #12]
 801267e:	f023 0303 	bic.w	r3, r3, #3
 8012682:	f043 0301 	orr.w	r3, r3, #1
 8012686:	81a3      	strh	r3, [r4, #12]
 8012688:	89a0      	ldrh	r0, [r4, #12]
 801268a:	4305      	orrs	r5, r0
 801268c:	81a5      	strh	r5, [r4, #12]
 801268e:	e7cd      	b.n	801262c <__smakebuf_r+0x18>
 8012690:	080115ad 	.word	0x080115ad

08012694 <_read_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4d07      	ldr	r5, [pc, #28]	; (80126b4 <_read_r+0x20>)
 8012698:	4604      	mov	r4, r0
 801269a:	4608      	mov	r0, r1
 801269c:	4611      	mov	r1, r2
 801269e:	2200      	movs	r2, #0
 80126a0:	602a      	str	r2, [r5, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	f000 f89e 	bl	80127e4 <_read>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_read_r+0x1e>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_read_r+0x1e>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	200029c8 	.word	0x200029c8

080126b8 <_raise_r>:
 80126b8:	291f      	cmp	r1, #31
 80126ba:	b538      	push	{r3, r4, r5, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	d904      	bls.n	80126cc <_raise_r+0x14>
 80126c2:	2316      	movs	r3, #22
 80126c4:	6003      	str	r3, [r0, #0]
 80126c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ca:	bd38      	pop	{r3, r4, r5, pc}
 80126cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126ce:	b112      	cbz	r2, 80126d6 <_raise_r+0x1e>
 80126d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126d4:	b94b      	cbnz	r3, 80126ea <_raise_r+0x32>
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 f830 	bl	801273c <_getpid_r>
 80126dc:	462a      	mov	r2, r5
 80126de:	4601      	mov	r1, r0
 80126e0:	4620      	mov	r0, r4
 80126e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e6:	f000 b817 	b.w	8012718 <_kill_r>
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d00a      	beq.n	8012704 <_raise_r+0x4c>
 80126ee:	1c59      	adds	r1, r3, #1
 80126f0:	d103      	bne.n	80126fa <_raise_r+0x42>
 80126f2:	2316      	movs	r3, #22
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	2001      	movs	r0, #1
 80126f8:	e7e7      	b.n	80126ca <_raise_r+0x12>
 80126fa:	2400      	movs	r4, #0
 80126fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012700:	4628      	mov	r0, r5
 8012702:	4798      	blx	r3
 8012704:	2000      	movs	r0, #0
 8012706:	e7e0      	b.n	80126ca <_raise_r+0x12>

08012708 <raise>:
 8012708:	4b02      	ldr	r3, [pc, #8]	; (8012714 <raise+0xc>)
 801270a:	4601      	mov	r1, r0
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	f7ff bfd3 	b.w	80126b8 <_raise_r>
 8012712:	bf00      	nop
 8012714:	20000188 	.word	0x20000188

08012718 <_kill_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d07      	ldr	r5, [pc, #28]	; (8012738 <_kill_r+0x20>)
 801271c:	2300      	movs	r3, #0
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	4611      	mov	r1, r2
 8012724:	602b      	str	r3, [r5, #0]
 8012726:	f000 f84d 	bl	80127c4 <_kill>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	d102      	bne.n	8012734 <_kill_r+0x1c>
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	b103      	cbz	r3, 8012734 <_kill_r+0x1c>
 8012732:	6023      	str	r3, [r4, #0]
 8012734:	bd38      	pop	{r3, r4, r5, pc}
 8012736:	bf00      	nop
 8012738:	200029c8 	.word	0x200029c8

0801273c <_getpid_r>:
 801273c:	f000 b832 	b.w	80127a4 <_getpid>

08012740 <_fstat_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4d07      	ldr	r5, [pc, #28]	; (8012760 <_fstat_r+0x20>)
 8012744:	2300      	movs	r3, #0
 8012746:	4604      	mov	r4, r0
 8012748:	4608      	mov	r0, r1
 801274a:	4611      	mov	r1, r2
 801274c:	602b      	str	r3, [r5, #0]
 801274e:	f000 f821 	bl	8012794 <_fstat>
 8012752:	1c43      	adds	r3, r0, #1
 8012754:	d102      	bne.n	801275c <_fstat_r+0x1c>
 8012756:	682b      	ldr	r3, [r5, #0]
 8012758:	b103      	cbz	r3, 801275c <_fstat_r+0x1c>
 801275a:	6023      	str	r3, [r4, #0]
 801275c:	bd38      	pop	{r3, r4, r5, pc}
 801275e:	bf00      	nop
 8012760:	200029c8 	.word	0x200029c8

08012764 <_isatty_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	4d06      	ldr	r5, [pc, #24]	; (8012780 <_isatty_r+0x1c>)
 8012768:	2300      	movs	r3, #0
 801276a:	4604      	mov	r4, r0
 801276c:	4608      	mov	r0, r1
 801276e:	602b      	str	r3, [r5, #0]
 8012770:	f000 f820 	bl	80127b4 <_isatty>
 8012774:	1c43      	adds	r3, r0, #1
 8012776:	d102      	bne.n	801277e <_isatty_r+0x1a>
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	b103      	cbz	r3, 801277e <_isatty_r+0x1a>
 801277c:	6023      	str	r3, [r4, #0]
 801277e:	bd38      	pop	{r3, r4, r5, pc}
 8012780:	200029c8 	.word	0x200029c8

08012784 <_close>:
 8012784:	4b02      	ldr	r3, [pc, #8]	; (8012790 <_close+0xc>)
 8012786:	2258      	movs	r2, #88	; 0x58
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801278e:	4770      	bx	lr
 8012790:	200029c8 	.word	0x200029c8

08012794 <_fstat>:
 8012794:	4b02      	ldr	r3, [pc, #8]	; (80127a0 <_fstat+0xc>)
 8012796:	2258      	movs	r2, #88	; 0x58
 8012798:	601a      	str	r2, [r3, #0]
 801279a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801279e:	4770      	bx	lr
 80127a0:	200029c8 	.word	0x200029c8

080127a4 <_getpid>:
 80127a4:	4b02      	ldr	r3, [pc, #8]	; (80127b0 <_getpid+0xc>)
 80127a6:	2258      	movs	r2, #88	; 0x58
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127ae:	4770      	bx	lr
 80127b0:	200029c8 	.word	0x200029c8

080127b4 <_isatty>:
 80127b4:	4b02      	ldr	r3, [pc, #8]	; (80127c0 <_isatty+0xc>)
 80127b6:	2258      	movs	r2, #88	; 0x58
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	2000      	movs	r0, #0
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	200029c8 	.word	0x200029c8

080127c4 <_kill>:
 80127c4:	4b02      	ldr	r3, [pc, #8]	; (80127d0 <_kill+0xc>)
 80127c6:	2258      	movs	r2, #88	; 0x58
 80127c8:	601a      	str	r2, [r3, #0]
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127ce:	4770      	bx	lr
 80127d0:	200029c8 	.word	0x200029c8

080127d4 <_lseek>:
 80127d4:	4b02      	ldr	r3, [pc, #8]	; (80127e0 <_lseek+0xc>)
 80127d6:	2258      	movs	r2, #88	; 0x58
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127de:	4770      	bx	lr
 80127e0:	200029c8 	.word	0x200029c8

080127e4 <_read>:
 80127e4:	4b02      	ldr	r3, [pc, #8]	; (80127f0 <_read+0xc>)
 80127e6:	2258      	movs	r2, #88	; 0x58
 80127e8:	601a      	str	r2, [r3, #0]
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127ee:	4770      	bx	lr
 80127f0:	200029c8 	.word	0x200029c8

080127f4 <_sbrk>:
 80127f4:	4a04      	ldr	r2, [pc, #16]	; (8012808 <_sbrk+0x14>)
 80127f6:	6811      	ldr	r1, [r2, #0]
 80127f8:	4603      	mov	r3, r0
 80127fa:	b909      	cbnz	r1, 8012800 <_sbrk+0xc>
 80127fc:	4903      	ldr	r1, [pc, #12]	; (801280c <_sbrk+0x18>)
 80127fe:	6011      	str	r1, [r2, #0]
 8012800:	6810      	ldr	r0, [r2, #0]
 8012802:	4403      	add	r3, r0
 8012804:	6013      	str	r3, [r2, #0]
 8012806:	4770      	bx	lr
 8012808:	200029cc 	.word	0x200029cc
 801280c:	200029d0 	.word	0x200029d0

08012810 <_write>:
 8012810:	4b02      	ldr	r3, [pc, #8]	; (801281c <_write+0xc>)
 8012812:	2258      	movs	r2, #88	; 0x58
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801281a:	4770      	bx	lr
 801281c:	200029c8 	.word	0x200029c8

08012820 <_exit>:
 8012820:	e7fe      	b.n	8012820 <_exit>
	...

08012824 <_init>:
 8012824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012826:	bf00      	nop
 8012828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282a:	bc08      	pop	{r3}
 801282c:	469e      	mov	lr, r3
 801282e:	4770      	bx	lr

08012830 <_fini>:
 8012830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012832:	bf00      	nop
 8012834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012836:	bc08      	pop	{r3}
 8012838:	469e      	mov	lr, r3
 801283a:	4770      	bx	lr
