
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  080175b0  080175b0  000275b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d68  08017d68  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08017d68  08017d68  00027d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d70  08017d70  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d70  08017d70  00027d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d74  08017d74  00027d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08017d78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c1c  20000354  080180cc  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002f70  080180cc  00032f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030248  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d48  00000000  00000000  000605cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  00066318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  00068948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a16  00000000  00000000  0006ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031f83  00000000  00000000  0009e746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e758  00000000  00000000  000d06c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001eee21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5f4  00000000  00000000  001eee74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001fa468  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001fa534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017598 	.word	0x08017598

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08017598 	.word	0x08017598

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	080175b0 	.word	0x080175b0

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f012 fdf4 	bl	80146fc <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	080175b4 	.word	0x080175b4

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f011 f9a0 	bl	8013c4c <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f011 f99b 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f011 f996 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f011 f991 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f011 f98c 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f011 f987 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f011 f982 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f011 f97d 	bl	8013c4c <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	080175fc 	.word	0x080175fc
 8002964:	08017604 	.word	0x08017604
 8002968:	0801760c 	.word	0x0801760c
 800296c:	08017614 	.word	0x08017614
 8002970:	0801761c 	.word	0x0801761c
 8002974:	08017624 	.word	0x08017624
 8002978:	0801762c 	.word	0x0801762c
 800297c:	08017634 	.word	0x08017634

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000370 	.word	0x20000370
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f001 feec 	bl	800482c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f001 ffd7 	bl	8004a14 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200005c8 	.word	0x200005c8

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f011 fe2b 	bl	80146fc <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f001 feb8 	bl	800482c <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000374 	.word	0x20000374
 8002acc:	20000375 	.word	0x20000375
 8002ad0:	200005c8 	.word	0x200005c8

08002ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	f5ad 6dcc 	sub.w	sp, sp, #1632	; 0x660
 8002ada:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002adc:	4bc9      	ldr	r3, [pc, #804]	; (8002e04 <main+0x330>)
 8002ade:	f507 64b8 	add.w	r4, r7, #1472	; 0x5c0
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aec:	c403      	stmia	r4!, {r0, r1}
 8002aee:	7022      	strb	r2, [r4, #0]
 8002af0:	f207 53d9 	addw	r3, r7, #1497	; 0x5d9
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	615a      	str	r2, [r3, #20]
 8002b02:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 8002b04:	4bc0      	ldr	r3, [pc, #768]	; (8002e08 <main+0x334>)
 8002b06:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

	uint8_t USB_TxBuffer_FS;
	uint32_t USB_TxBuffer_Length = 1000;
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
	GPS myData;

	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data bmpdata = { 0 };
 8002b12:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b16:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	6053      	str	r3, [r2, #4]
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings settings = { 0 };
 8002b26:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b2a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	731a      	strb	r2, [r3, #12]
	struct bmp3_status status = { { 0 } };
 8002b38:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b3c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	811a      	strh	r2, [r3, #8]
	uint8_t TempBuffer[25] = {0};
 8002b48:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b4c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	751a      	strb	r2, [r3, #20]
	uint8_t PresBuffer[25] = {0};
 8002b64:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b68:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	751a      	strb	r2, [r3, #20]

	//test
	HAL_StatusTypeDef i2c2status;
	uint8_t hello[7] = "Hello!\n";
 8002b80:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b84:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002b88:	4aa0      	ldr	r2, [pc, #640]	; (8002e0c <main+0x338>)
 8002b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b8e:	6018      	str	r0, [r3, #0]
 8002b90:	3304      	adds	r3, #4
 8002b92:	8019      	strh	r1, [r3, #0]
 8002b94:	3302      	adds	r3, #2
 8002b96:	0c0a      	lsrs	r2, r1, #16
 8002b98:	701a      	strb	r2, [r3, #0]
	uint8_t Buffer[25] = {0};
 8002b9a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002b9e:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
 8002bb4:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002bb6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002bba:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8002bbe:	4a94      	ldr	r2, [pc, #592]	; (8002e10 <main+0x33c>)
 8002bc0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc2:	f001 f962 	bl	8003e8a <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 8002bc6:	f00c fa27 	bl	800f018 <MX_FATFS_Init>
  // This returned 0'\0', even though it's supposed to return either USBD_OK or USBD_FAIL
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bca:	f000 fae9 	bl	80031a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bce:	f000 fd3d 	bl	800364c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bd2:	f000 fb4b 	bl	800326c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002bd6:	f000 fb89 	bl	80032ec <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002bda:	f000 fbc7 	bl	800336c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002bde:	f000 fbe7 	bl	80033b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002be2:	f000 fc99 	bl	8003518 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002be6:	f000 fce5 	bl	80035b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002bea:	f00c fa15 	bl	800f018 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002bee:	f010 ff6f 	bl	8013ad0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002bf2:	f000 fc1b 	bl	800342c <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002bf6:	f000 fb25 	bl	8003244 <MX_NVIC_Init>

  /* Interface reference is given as a parameter
  	 *         For I2C : BMP3_I2C_INTF
  	 *         For SPI : BMP3_SPI_INTF
  	 */
  	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8002bfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff febd 	bl	8002980 <bmp3_interface_init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
  	bmp3_check_rslt("bmp3_interface_init", rslt);
 8002c0c:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 8002c10:	4619      	mov	r1, r3
 8002c12:	4880      	ldr	r0, [pc, #512]	; (8002e14 <main+0x340>)
 8002c14:	f7ff fe54 	bl	80028c0 <bmp3_check_rslt>

  	rslt = bmp3_init(&dev);
 8002c18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe f9ad 	bl	8000f7c <bmp3_init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
  	bmp3_check_rslt("bmp3_init", rslt);
 8002c28:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	487a      	ldr	r0, [pc, #488]	; (8002e18 <main+0x344>)
 8002c30:	f7ff fe46 	bl	80028c0 <bmp3_check_rslt>

  	settings.int_settings.drdy_en = BMP3_DISABLE;
 8002c34:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c38:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	729a      	strb	r2, [r3, #10]
  	settings.int_settings.latch = BMP3_ENABLE;
 8002c40:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c44:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c48:	2201      	movs	r2, #1
 8002c4a:	725a      	strb	r2, [r3, #9]
  	settings.press_en = BMP3_ENABLE;
 8002c4c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c50:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
  	settings.temp_en = BMP3_ENABLE;
 8002c58:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c5c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c60:	2201      	movs	r2, #1
 8002c62:	709a      	strb	r2, [r3, #2]

  	settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8002c64:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c68:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	70da      	strb	r2, [r3, #3]
  	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8002c70:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c74:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c78:	2200      	movs	r2, #0
 8002c7a:	711a      	strb	r2, [r3, #4]
  	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8002c7c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002c80:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8002c84:	2201      	movs	r2, #1
 8002c86:	719a      	strb	r2, [r3, #6]

  	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8002c88:	23be      	movs	r3, #190	; 0xbe
 8002c8a:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
  				   BMP3_SEL_DRDY_EN;

  	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 8002c8e:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 8002c92:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002c96:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fad6 	bl	800124c <bmp3_set_sensor_settings>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
  	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 8002ca6:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 8002caa:	4619      	mov	r1, r3
 8002cac:	485b      	ldr	r0, [pc, #364]	; (8002e1c <main+0x348>)
 8002cae:	f7ff fe07 	bl	80028c0 <bmp3_check_rslt>
  	bmp3_check_rslt("bmp3_set_op_mode", rslt);*/

  volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <main+0x34c>)
 8002cb4:	4a5b      	ldr	r2, [pc, #364]	; (8002e24 <main+0x350>)
 8002cb6:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8002cb8:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <main+0x354>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
   return(result);
 8002ccc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <main+0x354>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8002ce2:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8002ce6:	f8c7 2630 	str.w	r2, [r7, #1584]	; 0x630
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8002cee:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
   return(result);
 8002cfa:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1da      	bne.n	8002cb8 <main+0x1e4>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <main+0x354>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
   return(result);
 8002d16:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <main+0x354>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8002d2c:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8002d30:	f8c7 261c 	str.w	r2, [r7, #1564]	; 0x61c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 8002d38:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
   return(result);
 8002d44:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1da      	bne.n	8002d02 <main+0x22e>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <main+0x354>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
   return(result);
 8002d60:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	; 0x5fc
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <main+0x354>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8002d76:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8002d7a:	f8c7 2608 	str.w	r2, [r7, #1544]	; 0x608
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8002d82:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
   return(result);
 8002d8e:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1da      	bne.n	8002d4c <main+0x278>


  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8002d96:	2200      	movs	r2, #0
 8002d98:	4924      	ldr	r1, [pc, #144]	; (8002e2c <main+0x358>)
 8002d9a:	4825      	ldr	r0, [pc, #148]	; (8002e30 <main+0x35c>)
 8002d9c:	f00f fcb0 	bl	8012700 <f_mount>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <main+0x2f4>
      	{
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002da6:	2108      	movs	r1, #8
 8002da8:	4822      	ldr	r0, [pc, #136]	; (8002e34 <main+0x360>)
 8002daa:	f001 fc95 	bl	80046d8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (300);
 8002dae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002db2:	f001 f8df 	bl	8003f74 <HAL_Delay>
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002db6:	2108      	movs	r1, #8
 8002db8:	481e      	ldr	r0, [pc, #120]	; (8002e34 <main+0x360>)
 8002dba:	f001 fc8d 	bl	80046d8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (1000);
 8002dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc2:	f001 f8d7 	bl	8003f74 <HAL_Delay>
 8002dc6:	e08d      	b.n	8002ee4 <main+0x410>
      	}
  // here f_mount == FR_OK -> mounting was a success
  else
      	{
	  // f_mkfs
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8002dc8:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8002dcc:	2264      	movs	r2, #100	; 0x64
 8002dce:	9200      	str	r2, [sp, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2107      	movs	r1, #7
 8002dd4:	4815      	ldr	r0, [pc, #84]	; (8002e2c <main+0x358>)
 8002dd6:	f010 f9f3 	bl	80131c0 <f_mkfs>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02b      	beq.n	8002e38 <main+0x364>
      	    {
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002de0:	2110      	movs	r1, #16
 8002de2:	4814      	ldr	r0, [pc, #80]	; (8002e34 <main+0x360>)
 8002de4:	f001 fc78 	bl	80046d8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (300);
 8002de8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dec:	f001 f8c2 	bl	8003f74 <HAL_Delay>
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002df0:	2110      	movs	r1, #16
 8002df2:	4810      	ldr	r0, [pc, #64]	; (8002e34 <main+0x360>)
 8002df4:	f001 fc70 	bl	80046d8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (1000);
 8002df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dfc:	f001 f8ba 	bl	8003f74 <HAL_Delay>
 8002e00:	e070      	b.n	8002ee4 <main+0x410>
 8002e02:	bf00      	nop
 8002e04:	08017784 	.word	0x08017784
 8002e08:	080176dc 	.word	0x080176dc
 8002e0c:	080177b8 	.word	0x080177b8
 8002e10:	00202d20 	.word	0x00202d20
 8002e14:	080176e4 	.word	0x080176e4
 8002e18:	080176f8 	.word	0x080176f8
 8002e1c:	08017704 	.word	0x08017704
 8002e20:	20000eac 	.word	0x20000eac
 8002e24:	2000086c 	.word	0x2000086c
 8002e28:	200007dc 	.word	0x200007dc
 8002e2c:	20000ec4 	.word	0x20000ec4
 8002e30:	20000ec8 	.word	0x20000ec8
 8002e34:	48000c00 	.word	0x48000c00
      	    }
	  else
      		{
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8002e38:	220a      	movs	r2, #10
 8002e3a:	49c6      	ldr	r1, [pc, #792]	; (8003154 <main+0x680>)
 8002e3c:	48c6      	ldr	r0, [pc, #792]	; (8003158 <main+0x684>)
 8002e3e:	f00f fca5 	bl	801278c <f_open>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <main+0x396>
				{
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002e48:	2120      	movs	r1, #32
 8002e4a:	48c4      	ldr	r0, [pc, #784]	; (800315c <main+0x688>)
 8002e4c:	f001 fc44 	bl	80046d8 <HAL_GPIO_TogglePin>
				  HAL_Delay (300);
 8002e50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e54:	f001 f88e 	bl	8003f74 <HAL_Delay>
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002e58:	2120      	movs	r1, #32
 8002e5a:	48c0      	ldr	r0, [pc, #768]	; (800315c <main+0x688>)
 8002e5c:	f001 fc3c 	bl	80046d8 <HAL_GPIO_TogglePin>
				  HAL_Delay (1000);
 8002e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e64:	f001 f886 	bl	8003f74 <HAL_Delay>
 8002e68:	e03c      	b.n	8002ee4 <main+0x410>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8002e6a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd f9c6 	bl	8000200 <strlen>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8002e7a:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8002e7e:	48b6      	ldr	r0, [pc, #728]	; (8003158 <main+0x684>)
 8002e80:	f00f ff81 	bl	8012d86 <f_write>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 363b 	strb.w	r3, [r7, #1595]	; 0x63b
				f_read(&SDFile, &rtext, 100, &bytesread);
 8002e8a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 8002e8e:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 8002e92:	2264      	movs	r2, #100	; 0x64
 8002e94:	48b0      	ldr	r0, [pc, #704]	; (8003158 <main+0x684>)
 8002e96:	f00f fe37 	bl	8012b08 <f_read>
				//f_read();

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 8002e9a:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8002e9e:	2164      	movs	r1, #100	; 0x64
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f010 fed3 	bl	8013c4c <CDC_Transmit_FS>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 363a 	strb.w	r3, [r7, #1594]	; 0x63a
				if((byteswritten == 0) || (res != FR_OK))
 8002eac:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <main+0x3e8>
 8002eb4:	f897 363b 	ldrb.w	r3, [r7, #1595]	; 0x63b
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <main+0x40a>
					{
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002ebc:	2140      	movs	r1, #64	; 0x40
 8002ebe:	48a7      	ldr	r0, [pc, #668]	; (800315c <main+0x688>)
 8002ec0:	f001 fc0a 	bl	80046d8 <HAL_GPIO_TogglePin>
					  HAL_Delay (300);
 8002ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ec8:	f001 f854 	bl	8003f74 <HAL_Delay>
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002ecc:	2140      	movs	r1, #64	; 0x40
 8002ece:	48a3      	ldr	r0, [pc, #652]	; (800315c <main+0x688>)
 8002ed0:	f001 fc02 	bl	80046d8 <HAL_GPIO_TogglePin>
					  HAL_Delay (1000);
 8002ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed8:	f001 f84c 	bl	8003f74 <HAL_Delay>
 8002edc:	e002      	b.n	8002ee4 <main+0x410>
					}
				else
					{

					f_close(&SDFile);
 8002ede:	489e      	ldr	r0, [pc, #632]	; (8003158 <main+0x684>)
 8002ee0:	f010 f944 	bl	801316c <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	489d      	ldr	r0, [pc, #628]	; (8003160 <main+0x68c>)
 8002eea:	f00f fc09 	bl	8012700 <f_mount>



  HAL_TIM_Base_Start_IT(&htim17);
 8002eee:	489d      	ldr	r0, [pc, #628]	; (8003164 <main+0x690>)
 8002ef0:	f007 fec6 	bl	800ac80 <HAL_TIM_Base_Start_IT>
  tick = 0;
 8002ef4:	4b9c      	ldr	r3, [pc, #624]	; (8003168 <main+0x694>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]

  uint8_t i = 0, ret;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002f00:	2108      	movs	r1, #8
 8002f02:	4896      	ldr	r0, [pc, #600]	; (800315c <main+0x688>)
 8002f04:	f001 fbe8 	bl	80046d8 <HAL_GPIO_TogglePin>
  HAL_Delay (5000);
 8002f08:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f0c:	f001 f832 	bl	8003f74 <HAL_Delay>
  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002f10:	2108      	movs	r1, #8
 8002f12:	4892      	ldr	r0, [pc, #584]	; (800315c <main+0x688>)
 8002f14:	f001 fbe0 	bl	80046d8 <HAL_GPIO_TogglePin>
  //-[ I2C Bus Scanning ]-
      for(i=1; i<128; i++)
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
 8002f1e:	e042      	b.n	8002fa6 <main+0x4d2>
      {
          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8002f20:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	b299      	uxth	r1, r3
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	488f      	ldr	r0, [pc, #572]	; (800316c <main+0x698>)
 8002f30:	f001 fe66 	bl	8004c00 <HAL_I2C_IsDeviceReady>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3639 	strb.w	r3, [r7, #1593]	; 0x639
          if (ret != HAL_OK) // No ACK Received At That Address
 8002f3a:	f897 3639 	ldrb.w	r3, [r7, #1593]	; 0x639
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00f      	beq.n	8002f62 <main+0x48e>
          {
        	  while (CDC_Transmit_FS (Space, strlen(Space)) == USBD_BUSY);
 8002f42:	bf00      	nop
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f95a 	bl	8000200 <strlen>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f010 fe79 	bl	8013c4c <CDC_Transmit_FS>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d0f1      	beq.n	8002f44 <main+0x470>
 8002f60:	e01c      	b.n	8002f9c <main+0x4c8>
          }
          else if(ret == HAL_OK)
 8002f62:	f897 3639 	ldrb.w	r3, [r7, #1593]	; 0x639
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <main+0x4c8>
          {
              sprintf(Buffer, "0x%X", i);
 8002f6a:	f897 2657 	ldrb.w	r2, [r7, #1623]	; 0x657
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	497f      	ldr	r1, [pc, #508]	; (8003170 <main+0x69c>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f012 f949 	bl	801520c <siprintf>
              while (CDC_Transmit_FS (Buffer, strlen(Buffer)) == USBD_BUSY);
 8002f7a:	bf00      	nop
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd f93d 	bl	8000200 <strlen>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f010 fe5b 	bl	8013c4c <CDC_Transmit_FS>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d0ef      	beq.n	8002f7c <main+0x4a8>
      for(i=1; i<128; i++)
 8002f9c:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
 8002fa6:	f997 3657 	ldrsb.w	r3, [r7, #1623]	; 0x657
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dab8      	bge.n	8002f20 <main+0x44c>
  {

	  // Lesson learned: do NOT place delays between data transfers and receives; it will mess up the data flow

	  // GPS
	  if (data_ready)
 8002fae:	4b71      	ldr	r3, [pc, #452]	; (8003174 <main+0x6a0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03b      	beq.n	800302e <main+0x55a>
	  {
		  if (rxBuffer == rxBuffer1)
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <main+0x6a4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a70      	ldr	r2, [pc, #448]	; (800317c <main+0x6a8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d115      	bne.n	8002fec <main+0x518>
		  {
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	4866      	ldr	r0, [pc, #408]	; (800315c <main+0x688>)
 8002fc4:	f001 fb88 	bl	80046d8 <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

			  //}*/


			  while (CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2)) == USBD_BUSY);
 8002fc8:	bf00      	nop
 8002fca:	486d      	ldr	r0, [pc, #436]	; (8003180 <main+0x6ac>)
 8002fcc:	f7fd f918 	bl	8000200 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	486a      	ldr	r0, [pc, #424]	; (8003180 <main+0x6ac>)
 8002fd8:	f010 fe38 	bl	8013c4c <CDC_Transmit_FS>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d0f3      	beq.n	8002fca <main+0x4f6>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	485d      	ldr	r0, [pc, #372]	; (800315c <main+0x688>)
 8002fe6:	f001 fb77 	bl	80046d8 <HAL_GPIO_TogglePin>
 8002fea:	e014      	b.n	8003016 <main+0x542>


		  }
		  else
		  {
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	485b      	ldr	r0, [pc, #364]	; (800315c <main+0x688>)
 8002ff0:	f001 fb72 	bl	80046d8 <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

			  //}*/


			  while (CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1)) == USBD_BUSY);
 8002ff4:	bf00      	nop
 8002ff6:	4861      	ldr	r0, [pc, #388]	; (800317c <main+0x6a8>)
 8002ff8:	f7fd f902 	bl	8000200 <strlen>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	485e      	ldr	r0, [pc, #376]	; (800317c <main+0x6a8>)
 8003004:	f010 fe22 	bl	8013c4c <CDC_Transmit_FS>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d0f3      	beq.n	8002ff6 <main+0x522>
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	4852      	ldr	r0, [pc, #328]	; (800315c <main+0x688>)
 8003012:	f001 fb61 	bl	80046d8 <HAL_GPIO_TogglePin>



		  }

		  data_ready ^= 1;
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <main+0x6a0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	4a55      	ldr	r2, [pc, #340]	; (8003174 <main+0x6a0>)
 8003020:	6013      	str	r3, [r2, #0]
		  send_ready |= 1;
 8003022:	4b58      	ldr	r3, [pc, #352]	; (8003184 <main+0x6b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <main+0x6b0>)
 800302c:	6013      	str	r3, [r2, #0]

	  //rslt = bmp3_get_status(&status, &dev);
	  //bmp3_check_rslt("bmp3_get_status", rslt);

	  /* Read temperature and pressure data iteratively based on data ready interrupt */
	  if (tick == 0)//(((int)rslt == BMP3_OK) && (tick == 0) && ((int)status.intr.drdy == BMP3_ENABLE))
 800302e:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <main+0x694>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ba      	bne.n	8002fae <main+0x4da>
	  {
		  settings.op_mode = BMP3_MODE_FORCED;
 8003038:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800303c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
			rslt = bmp3_set_op_mode(&settings, &dev);
 8003044:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f9bf 	bl	80013d2 <bmp3_set_op_mode>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
			bmp3_check_rslt("bmp3_set_op_mode", rslt);
 800305a:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 800305e:	4619      	mov	r1, r3
 8003060:	4849      	ldr	r0, [pc, #292]	; (8003188 <main+0x6b4>)
 8003062:	f7ff fc2d 	bl	80028c0 <bmp3_check_rslt>
		  tick = 10;
 8003066:	4b40      	ldr	r3, [pc, #256]	; (8003168 <main+0x694>)
 8003068:	220a      	movs	r2, #10
 800306a:	701a      	strb	r2, [r3, #0]
		   * First parameter indicates the type of data to be read
		   * BMP3_PRESS_TEMP : To read pressure and temperature data
		   * BMP3_TEMP       : To read only temperature data
		   * BMP3_PRESS      : To read only pressure data
		   */
		  rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmpdata, &dev);
 800306c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003070:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003074:	4619      	mov	r1, r3
 8003076:	2003      	movs	r0, #3
 8003078:	f7fe fa1f 	bl	80014ba <bmp3_get_sensor_data>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
		  bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 8003082:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 8003086:	4619      	mov	r1, r3
 8003088:	4840      	ldr	r0, [pc, #256]	; (800318c <main+0x6b8>)
 800308a:	f7ff fc19 	bl	80028c0 <bmp3_check_rslt>

		  /* NOTE : Read status register again to clear data ready interrupt status */
		  rslt = bmp3_get_status(&status, &dev);
 800308e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003092:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe f925 	bl	80012e8 <bmp3_get_status>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 364b 	strb.w	r3, [r7, #1611]	; 0x64b
		  bmp3_check_rslt("bmp3_get_status", rslt);
 80030a4:	f997 364b 	ldrsb.w	r3, [r7, #1611]	; 0x64b
 80030a8:	4619      	mov	r1, r3
 80030aa:	4839      	ldr	r0, [pc, #228]	; (8003190 <main+0x6bc>)
 80030ac:	f7ff fc08 	bl	80028c0 <bmp3_check_rslt>


		  //#ifdef BMP3_FLOAT_COMPENSATION
		  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80030b0:	bf00      	nop
 80030b2:	2101      	movs	r1, #1
 80030b4:	4837      	ldr	r0, [pc, #220]	; (8003194 <main+0x6c0>)
 80030b6:	f010 fdc9 	bl	8013c4c <CDC_Transmit_FS>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d0f8      	beq.n	80030b2 <main+0x5de>
		  while (CDC_Transmit_FS ("BMP390\n", 7) == USBD_BUSY);
 80030c0:	bf00      	nop
 80030c2:	2107      	movs	r1, #7
 80030c4:	4834      	ldr	r0, [pc, #208]	; (8003198 <main+0x6c4>)
 80030c6:	f010 fdc1 	bl	8013c4c <CDC_Transmit_FS>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d0f8      	beq.n	80030c2 <main+0x5ee>
		  sprintf(TempBuffer, "%.2f\n", bmpdata.temperature);
 80030d0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80030d4:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80030e0:	492e      	ldr	r1, [pc, #184]	; (800319c <main+0x6c8>)
 80030e2:	f012 f893 	bl	801520c <siprintf>
		  sprintf(PresBuffer, "%.2f\n", bmpdata.pressure);
 80030e6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80030ea:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80030ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80030f6:	4929      	ldr	r1, [pc, #164]	; (800319c <main+0x6c8>)
 80030f8:	f012 f888 	bl	801520c <siprintf>
		  while (CDC_Transmit_FS (TempBuffer, strlen(TempBuffer)) == USBD_BUSY);
 80030fc:	bf00      	nop
 80030fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd f87c 	bl	8000200 <strlen>
 8003108:	4603      	mov	r3, r0
 800310a:	b29a      	uxth	r2, r3
 800310c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f010 fd9a 	bl	8013c4c <CDC_Transmit_FS>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d0ef      	beq.n	80030fe <main+0x62a>
		  while (CDC_Transmit_FS (PresBuffer, strlen(PresBuffer)) == USBD_BUSY);
 800311e:	bf00      	nop
 8003120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f86b 	bl	8000200 <strlen>
 800312a:	4603      	mov	r3, r0
 800312c:	b29a      	uxth	r2, r3
 800312e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f010 fd89 	bl	8013c4c <CDC_Transmit_FS>
 800313a:	4603      	mov	r3, r0
 800313c:	2b01      	cmp	r3, #1
 800313e:	d0ef      	beq.n	8003120 <main+0x64c>
		  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003140:	bf00      	nop
 8003142:	2101      	movs	r1, #1
 8003144:	4813      	ldr	r0, [pc, #76]	; (8003194 <main+0x6c0>)
 8003146:	f010 fd81 	bl	8013c4c <CDC_Transmit_FS>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d0f8      	beq.n	8003142 <main+0x66e>
	  if (data_ready)
 8003150:	e72d      	b.n	8002fae <main+0x4da>
 8003152:	bf00      	nop
 8003154:	08017720 	.word	0x08017720
 8003158:	200010f8 	.word	0x200010f8
 800315c:	48000c00 	.word	0x48000c00
 8003160:	20000ec8 	.word	0x20000ec8
 8003164:	20000700 	.word	0x20000700
 8003168:	20000eb8 	.word	0x20000eb8
 800316c:	200005c8 	.word	0x200005c8
 8003170:	0801772c 	.word	0x0801772c
 8003174:	20000eb4 	.word	0x20000eb4
 8003178:	20000eac 	.word	0x20000eac
 800317c:	2000086c 	.word	0x2000086c
 8003180:	20000b8c 	.word	0x20000b8c
 8003184:	20000000 	.word	0x20000000
 8003188:	08017734 	.word	0x08017734
 800318c:	08017748 	.word	0x08017748
 8003190:	08017760 	.word	0x08017760
 8003194:	08017770 	.word	0x08017770
 8003198:	08017774 	.word	0x08017774
 800319c:	0801777c 	.word	0x0801777c

080031a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b096      	sub	sp, #88	; 0x58
 80031a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	2244      	movs	r2, #68	; 0x44
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f011 fab2 	bl	8014718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b4:	463b      	mov	r3, r7
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80031c2:	2000      	movs	r0, #0
 80031c4:	f003 fb1e 	bl	8006804 <HAL_PWREx_ControlVoltageScaling>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80031ce:	f000 fb1b 	bl	8003808 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80031d2:	2321      	movs	r3, #33	; 0x21
 80031d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80031dc:	2301      	movs	r3, #1
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e0:	2302      	movs	r3, #2
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031e4:	2303      	movs	r3, #3
 80031e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80031ec:	231e      	movs	r3, #30
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80031f0:	2314      	movs	r3, #20
 80031f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031f4:	2302      	movs	r3, #2
 80031f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031f8:	2302      	movs	r3, #2
 80031fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fbb3 	bl	800696c <HAL_RCC_OscConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800320c:	f000 fafc 	bl	8003808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003210:	230f      	movs	r3, #15
 8003212:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003214:	2303      	movs	r3, #3
 8003216:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003224:	463b      	mov	r3, r7
 8003226:	2105      	movs	r1, #5
 8003228:	4618      	mov	r0, r3
 800322a:	f003 ffb9 	bl	80071a0 <HAL_RCC_ClockConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003234:	f000 fae8 	bl	8003808 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003238:	f004 f9b0 	bl	800759c <HAL_RCC_EnableCSS>
}
 800323c:	bf00      	nop
 800323e:	3758      	adds	r7, #88	; 0x58
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	201a      	movs	r0, #26
 800324e:	f000 ff90 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003252:	201a      	movs	r0, #26
 8003254:	f000 ffa9 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2026      	movs	r0, #38	; 0x26
 800325e:	f000 ff88 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003262:	2026      	movs	r0, #38	; 0x26
 8003264:	f000 ffa1 	bl	80041aa <HAL_NVIC_EnableIRQ>
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}

0800326c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <MX_I2C1_Init+0x74>)
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <MX_I2C1_Init+0x78>)
 8003274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <MX_I2C1_Init+0x74>)
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <MX_I2C1_Init+0x7c>)
 800327a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_I2C1_Init+0x74>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <MX_I2C1_Init+0x74>)
 8003284:	2201      	movs	r2, #1
 8003286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_I2C1_Init+0x74>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <MX_I2C1_Init+0x74>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <MX_I2C1_Init+0x74>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <MX_I2C1_Init+0x74>)
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <MX_I2C1_Init+0x74>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a6:	480e      	ldr	r0, [pc, #56]	; (80032e0 <MX_I2C1_Init+0x74>)
 80032a8:	f001 fa30 	bl	800470c <HAL_I2C_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032b2:	f000 faa9 	bl	8003808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032b6:	2100      	movs	r1, #0
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <MX_I2C1_Init+0x74>)
 80032ba:	f002 f821 	bl	8005300 <HAL_I2CEx_ConfigAnalogFilter>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032c4:	f000 faa0 	bl	8003808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032c8:	2100      	movs	r1, #0
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_I2C1_Init+0x74>)
 80032cc:	f002 f863 	bl	8005396 <HAL_I2CEx_ConfigDigitalFilter>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032d6:	f000 fa97 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000574 	.word	0x20000574
 80032e4:	40005400 	.word	0x40005400
 80032e8:	307075b1 	.word	0x307075b1

080032ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <MX_I2C2_Init+0x74>)
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <MX_I2C2_Init+0x78>)
 80032f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <MX_I2C2_Init+0x74>)
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <MX_I2C2_Init+0x7c>)
 80032fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <MX_I2C2_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_I2C2_Init+0x74>)
 8003304:	2201      	movs	r2, #1
 8003306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <MX_I2C2_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_I2C2_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <MX_I2C2_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_I2C2_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <MX_I2C2_Init+0x74>)
 8003322:	2200      	movs	r2, #0
 8003324:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003326:	480e      	ldr	r0, [pc, #56]	; (8003360 <MX_I2C2_Init+0x74>)
 8003328:	f001 f9f0 	bl	800470c <HAL_I2C_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003332:	f000 fa69 	bl	8003808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003336:	2100      	movs	r1, #0
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <MX_I2C2_Init+0x74>)
 800333a:	f001 ffe1 	bl	8005300 <HAL_I2CEx_ConfigAnalogFilter>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003344:	f000 fa60 	bl	8003808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003348:	2100      	movs	r1, #0
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_I2C2_Init+0x74>)
 800334c:	f002 f823 	bl	8005396 <HAL_I2CEx_ConfigDigitalFilter>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003356:	f000 fa57 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200005c8 	.word	0x200005c8
 8003364:	40005800 	.word	0x40005800
 8003368:	307075b1 	.word	0x307075b1

0800336c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <MX_SDMMC1_SD_Init+0x40>)
 8003374:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003384:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003388:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000061c 	.word	0x2000061c
 80033ac:	50062400 	.word	0x50062400

080033b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <MX_SPI1_Init+0x74>)
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <MX_SPI1_Init+0x78>)
 80033b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <MX_SPI1_Init+0x74>)
 80033bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <MX_SPI1_Init+0x74>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <MX_SPI1_Init+0x74>)
 80033ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80033ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <MX_SPI1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <MX_SPI1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <MX_SPI1_Init+0x74>)
 80033de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80033e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <MX_SPI1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <MX_SPI1_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <MX_SPI1_Init+0x74>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <MX_SPI1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <MX_SPI1_Init+0x74>)
 80033fe:	2207      	movs	r2, #7
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <MX_SPI1_Init+0x74>)
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <MX_SPI1_Init+0x74>)
 800340a:	2208      	movs	r2, #8
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800340e:	4805      	ldr	r0, [pc, #20]	; (8003424 <MX_SPI1_Init+0x74>)
 8003410:	f007 fb3b 	bl	800aa8a <HAL_SPI_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800341a:	f000 f9f5 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000069c 	.word	0x2000069c
 8003428:	40013000 	.word	0x40013000

0800342c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b092      	sub	sp, #72	; 0x48
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	615a      	str	r2, [r3, #20]
 8003444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003446:	463b      	mov	r3, r7
 8003448:	222c      	movs	r2, #44	; 0x2c
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f011 f963 	bl	8014718 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003454:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <MX_TIM17_Init+0xe8>)
 8003456:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <MX_TIM17_Init+0xe4>)
 800345a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800345e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003468:	f642 62df 	movw	r2, #11999	; 0x2edf
 800346c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003474:	4b26      	ldr	r3, [pc, #152]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <MX_TIM17_Init+0xe4>)
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003480:	4823      	ldr	r0, [pc, #140]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003482:	f007 fba5 	bl	800abd0 <HAL_TIM_Base_Init>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800348c:	f000 f9bc 	bl	8003808 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003490:	481f      	ldr	r0, [pc, #124]	; (8003510 <MX_TIM17_Init+0xe4>)
 8003492:	f007 fc65 	bl	800ad60 <HAL_TIM_OC_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800349c:	f000 f9b4 	bl	8003808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a8:	2300      	movs	r3, #0
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034ac:	2300      	movs	r3, #0
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c0:	2200      	movs	r2, #0
 80034c2:	4619      	mov	r1, r3
 80034c4:	4812      	ldr	r0, [pc, #72]	; (8003510 <MX_TIM17_Init+0xe4>)
 80034c6:	f007 fdcb 	bl	800b060 <HAL_TIM_OC_ConfigChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80034d0:	f000 f99a 	bl	8003808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80034f2:	463b      	mov	r3, r7
 80034f4:	4619      	mov	r1, r3
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <MX_TIM17_Init+0xe4>)
 80034f8:	f008 f9ce 	bl	800b898 <HAL_TIMEx_ConfigBreakDeadTime>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003502:	f000 f981 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	3748      	adds	r7, #72	; 0x48
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000700 	.word	0x20000700
 8003514:	40014800 	.word	0x40014800

08003518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 800351e:	4a23      	ldr	r2, [pc, #140]	; (80035ac <MX_USART1_UART_Init+0x94>)
 8003520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003524:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <MX_USART1_UART_Init+0x98>)
 8003526:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003534:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 800353c:	220c      	movs	r2, #12
 800353e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003548:	2200      	movs	r2, #0
 800354a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 800354e:	2200      	movs	r2, #0
 8003550:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003554:	2200      	movs	r2, #0
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 800355a:	2200      	movs	r2, #0
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800355e:	4812      	ldr	r0, [pc, #72]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003560:	f008 fa36 	bl	800b9d0 <HAL_UART_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800356a:	f000 f94d 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800356e:	2100      	movs	r1, #0
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003572:	f009 fb64 	bl	800cc3e <HAL_UARTEx_SetTxFifoThreshold>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800357c:	f000 f944 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003580:	2100      	movs	r1, #0
 8003582:	4809      	ldr	r0, [pc, #36]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003584:	f009 fb99 	bl	800ccba <HAL_UARTEx_SetRxFifoThreshold>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800358e:	f000 f93b 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003592:	4805      	ldr	r0, [pc, #20]	; (80035a8 <MX_USART1_UART_Init+0x90>)
 8003594:	f009 fb1a 	bl	800cbcc <HAL_UARTEx_DisableFifoMode>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800359e:	f000 f933 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2000074c 	.word	0x2000074c
 80035ac:	40013800 	.word	0x40013800
 80035b0:	0001c138 	.word	0x0001c138

080035b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <MX_USART2_UART_Init+0x94>)
 80035bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80035c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035da:	220c      	movs	r2, #12
 80035dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035fc:	4811      	ldr	r0, [pc, #68]	; (8003644 <MX_USART2_UART_Init+0x90>)
 80035fe:	f008 f9e7 	bl	800b9d0 <HAL_UART_Init>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003608:	f000 f8fe 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800360c:	2100      	movs	r1, #0
 800360e:	480d      	ldr	r0, [pc, #52]	; (8003644 <MX_USART2_UART_Init+0x90>)
 8003610:	f009 fb15 	bl	800cc3e <HAL_UARTEx_SetTxFifoThreshold>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800361a:	f000 f8f5 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800361e:	2100      	movs	r1, #0
 8003620:	4808      	ldr	r0, [pc, #32]	; (8003644 <MX_USART2_UART_Init+0x90>)
 8003622:	f009 fb4a 	bl	800ccba <HAL_UARTEx_SetRxFifoThreshold>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800362c:	f000 f8ec 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003630:	4804      	ldr	r0, [pc, #16]	; (8003644 <MX_USART2_UART_Init+0x90>)
 8003632:	f009 facb 	bl	800cbcc <HAL_UARTEx_DisableFifoMode>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800363c:	f000 f8e4 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200007dc 	.word	0x200007dc
 8003648:	40004400 	.word	0x40004400

0800364c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003662:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	4a63      	ldr	r2, [pc, #396]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003668:	f043 0310 	orr.w	r3, r3, #16
 800366c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003692:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	4a57      	ldr	r2, [pc, #348]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 8003698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800369e:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	4a51      	ldr	r2, [pc, #324]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b6:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036e0:	f043 0308 	orr.w	r3, r3, #8
 80036e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <MX_GPIO_Init+0x1a8>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80036f2:	2200      	movs	r2, #0
 80036f4:	f641 013c 	movw	r1, #6204	; 0x183c
 80036f8:	483f      	ldr	r0, [pc, #252]	; (80037f8 <MX_GPIO_Init+0x1ac>)
 80036fa:	f000 ffd5 	bl	80046a8 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	2130      	movs	r1, #48	; 0x30
 8003702:	483e      	ldr	r0, [pc, #248]	; (80037fc <MX_GPIO_Init+0x1b0>)
 8003704:	f000 ffd0 	bl	80046a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2178      	movs	r1, #120	; 0x78
 800370c:	483c      	ldr	r0, [pc, #240]	; (8003800 <MX_GPIO_Init+0x1b4>)
 800370e:	f000 ffcb 	bl	80046a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003712:	f641 033c 	movw	r3, #6204	; 0x183c
 8003716:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003718:	2301      	movs	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	4619      	mov	r1, r3
 800372a:	4833      	ldr	r0, [pc, #204]	; (80037f8 <MX_GPIO_Init+0x1ac>)
 800372c:	f000 fe12 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4619      	mov	r1, r3
 8003744:	482d      	ldr	r0, [pc, #180]	; (80037fc <MX_GPIO_Init+0x1b0>)
 8003746:	f000 fe05 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 800374a:	2302      	movs	r3, #2
 800374c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	4619      	mov	r1, r3
 800375c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003760:	f000 fdf8 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8003764:	2330      	movs	r3, #48	; 0x30
 8003766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003768:	2301      	movs	r3, #1
 800376a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	4619      	mov	r1, r3
 800377a:	4820      	ldr	r0, [pc, #128]	; (80037fc <MX_GPIO_Init+0x1b0>)
 800377c:	f000 fdea 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8003780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800378a:	2301      	movs	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	4818      	ldr	r0, [pc, #96]	; (80037f8 <MX_GPIO_Init+0x1ac>)
 8003796:	f000 fddd 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f107 031c 	add.w	r3, r7, #28
 80037ac:	4619      	mov	r1, r3
 80037ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b2:	f000 fdcf 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80037b6:	2378      	movs	r3, #120	; 0x78
 80037b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <MX_GPIO_Init+0x1b4>)
 80037ce:	f000 fdc1 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80037d2:	2320      	movs	r3, #32
 80037d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80037de:	f107 031c 	add.w	r3, r7, #28
 80037e2:	4619      	mov	r1, r3
 80037e4:	4807      	ldr	r0, [pc, #28]	; (8003804 <MX_GPIO_Init+0x1b8>)
 80037e6:	f000 fdb5 	bl	8004354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037ea:	bf00      	nop
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	48001000 	.word	0x48001000
 80037fc:	48000800 	.word	0x48000800
 8003800:	48000c00 	.word	0x48000c00
 8003804:	48000400 	.word	0x48000400

08003808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800380c:	b672      	cpsid	i
}
 800380e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <Error_Handler+0x10>)
 8003812:	f011 fcd3 	bl	80151bc <iprintf>
  while (1)
 8003816:	e7fe      	b.n	8003816 <Error_Handler+0xe>
 8003818:	080177c0 	.word	0x080177c0

0800381c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_MspInit+0x44>)
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <HAL_MspInit+0x44>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6613      	str	r3, [r2, #96]	; 0x60
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_MspInit+0x44>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_MspInit+0x44>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_MspInit+0x44>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_MspInit+0x44>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0b0      	sub	sp, #192	; 0xc0
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800387c:	f107 0318 	add.w	r3, r7, #24
 8003880:	2294      	movs	r2, #148	; 0x94
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f010 ff47 	bl	8014718 <memset>
  if(hi2c->Instance==I2C1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_I2C_MspInit+0x134>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d13b      	bne.n	800390c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003894:	2340      	movs	r3, #64	; 0x40
 8003896:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003898:	2300      	movs	r3, #0
 800389a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800389c:	f107 0318 	add.w	r3, r7, #24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 ff67 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80038ac:	f7ff ffac 	bl	8003808 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_I2C_MspInit+0x138>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_I2C_MspInit+0x138>)
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_I2C_MspInit+0x138>)
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038c8:	23c0      	movs	r3, #192	; 0xc0
 80038ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ce:	2312      	movs	r3, #18
 80038d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038da:	2303      	movs	r3, #3
 80038dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ea:	4619      	mov	r1, r3
 80038ec:	482c      	ldr	r0, [pc, #176]	; (80039a0 <HAL_I2C_MspInit+0x13c>)
 80038ee:	f000 fd31 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_I2C_MspInit+0x138>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <HAL_I2C_MspInit+0x138>)
 80038f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800390a:	e040      	b.n	800398e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a24      	ldr	r2, [pc, #144]	; (80039a4 <HAL_I2C_MspInit+0x140>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d13b      	bne.n	800398e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800391a:	2300      	movs	r3, #0
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800391e:	f107 0318 	add.w	r3, r7, #24
 8003922:	4618      	mov	r0, r3
 8003924:	f003 ff26 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800392e:	f7ff ff6b 	bl	8003808 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800394a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800394e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003952:	2312      	movs	r3, #18
 8003954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003964:	2304      	movs	r3, #4
 8003966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800396e:	4619      	mov	r1, r3
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <HAL_I2C_MspInit+0x13c>)
 8003972:	f000 fcef 	bl	8004354 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_I2C_MspInit+0x138>)
 800397c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_I2C_MspInit+0x138>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
}
 800398e:	bf00      	nop
 8003990:	37c0      	adds	r7, #192	; 0xc0
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40005400 	.word	0x40005400
 800399c:	40021000 	.word	0x40021000
 80039a0:	48000400 	.word	0x48000400
 80039a4:	40005800 	.word	0x40005800

080039a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b0b0      	sub	sp, #192	; 0xc0
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039c0:	f107 0318 	add.w	r3, r7, #24
 80039c4:	2294      	movs	r2, #148	; 0x94
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f010 fea5 	bl	8014718 <memset>
  if(hsd->Instance==SDMMC1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a33      	ldr	r2, [pc, #204]	; (8003aa0 <HAL_SD_MspInit+0xf8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d15f      	bne.n	8003a98 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80039d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80039de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fec2 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80039f6:	f7ff ff07 	bl	8003808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80039fa:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a30:	f043 0308 	orr.w	r3, r3, #8
 8003a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_SD_MspInit+0xfc>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a42:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a56:	2303      	movs	r3, #3
 8003a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a66:	4619      	mov	r1, r3
 8003a68:	480f      	ldr	r0, [pc, #60]	; (8003aa8 <HAL_SD_MspInit+0x100>)
 8003a6a:	f000 fc73 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a86:	230c      	movs	r3, #12
 8003a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	; (8003aac <HAL_SD_MspInit+0x104>)
 8003a94:	f000 fc5e 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003a98:	bf00      	nop
 8003a9a:	37c0      	adds	r7, #192	; 0xc0
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	50062400 	.word	0x50062400
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	48000800 	.word	0x48000800
 8003aac:	48000c00 	.word	0x48000c00

08003ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <HAL_SPI_MspInit+0x7c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d128      	bne.n	8003b24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003adc:	6613      	str	r3, [r2, #96]	; 0x60
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_SPI_MspInit+0x80>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b02:	23f0      	movs	r3, #240	; 0xf0
 8003b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b12:	2305      	movs	r3, #5
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b20:	f000 fc18 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b24:	bf00      	nop
 8003b26:	3728      	adds	r7, #40	; 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40013000 	.word	0x40013000
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_TIM_Base_MspInit+0x38>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10b      	bne.n	8003b5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6613      	str	r3, [r2, #96]	; 0x60
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0b0      	sub	sp, #192	; 0xc0
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b8c:	f107 0318 	add.w	r3, r7, #24
 8003b90:	2294      	movs	r2, #148	; 0x94
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f010 fdbf 	bl	8014718 <memset>
  if(huart->Instance==USART1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_UART_MspInit+0x138>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d13d      	bne.n	8003c20 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bac:	f107 0318 	add.w	r3, r7, #24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 fddf 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bbc:	f7ff fe24 	bl	8003808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bca:	6613      	str	r3, [r2, #96]	; 0x60
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8003bf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c14:	4619      	mov	r1, r3
 8003c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1a:	f000 fb9b 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c1e:	e040      	b.n	8003ca2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <HAL_UART_MspInit+0x140>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d13b      	bne.n	8003ca2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c32:	f107 0318 	add.w	r3, r7, #24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fd9c 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003c42:	f7ff fde1 	bl	8003808 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_UART_MspInit+0x13c>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003c76:	230c      	movs	r3, #12
 8003c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8e:	2307      	movs	r3, #7
 8003c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c9e:	f000 fb59 	bl	8004354 <HAL_GPIO_Init>
}
 8003ca2:	bf00      	nop
 8003ca4:	37c0      	adds	r7, #192	; 0xc0
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40004400 	.word	0x40004400

08003cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003cbc:	f003 fc7e 	bl	80075bc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <NMI_Handler+0x8>

08003cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <HardFault_Handler+0x4>

08003cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <MemManage_Handler+0x4>

08003cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <BusFault_Handler+0x4>

08003cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd8:	e7fe      	b.n	8003cd8 <UsageFault_Handler+0x4>

08003cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d08:	f000 f914 	bl	8003f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8003d2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003d2c:	4803      	ldr	r0, [pc, #12]	; (8003d3c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8003d2e:	f007 f878 	bl	800ae22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000eb8 	.word	0x20000eb8
 8003d3c:	20000700 	.word	0x20000700

08003d40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <USART2_IRQHandler+0xa0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1)
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <USART2_IRQHandler+0xa4>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
    	{ rxBuffer[rxBufferPos++] = (uint8_t) c; }
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <USART2_IRQHandler+0xa8>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <USART2_IRQHandler+0xa4>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	b2c8      	uxtb	r0, r1
 8003d62:	4920      	ldr	r1, [pc, #128]	; (8003de4 <USART2_IRQHandler+0xa4>)
 8003d64:	7008      	strb	r0, [r1, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	79fa      	ldrb	r2, [r7, #7]
 8003d6a:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && send_ready) { //(c == '\r') ||
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b0a      	cmp	r3, #10
 8003d70:	d12a      	bne.n	8003dc8 <USART2_IRQHandler+0x88>
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <USART2_IRQHandler+0xac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d026      	beq.n	8003dc8 <USART2_IRQHandler+0x88>
		rxBuffer[rxBufferPos] = 0;
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <USART2_IRQHandler+0xa8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <USART2_IRQHandler+0xa4>)
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
		data_ready |= 1;
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <USART2_IRQHandler+0xb0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <USART2_IRQHandler+0xb0>)
 8003d94:	6013      	str	r3, [r2, #0]
		send_ready ^= 1;
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <USART2_IRQHandler+0xac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f083 0301 	eor.w	r3, r3, #1
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <USART2_IRQHandler+0xac>)
 8003da0:	6013      	str	r3, [r2, #0]
		rxBufferPos = 0;
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <USART2_IRQHandler+0xa4>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
		if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <USART2_IRQHandler+0xa8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <USART2_IRQHandler+0xb4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d103      	bne.n	8003dba <USART2_IRQHandler+0x7a>
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <USART2_IRQHandler+0xa8>)
 8003db4:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <USART2_IRQHandler+0xb8>)
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e002      	b.n	8003dc0 <USART2_IRQHandler+0x80>
		else {rxBuffer = rxBuffer1;}
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <USART2_IRQHandler+0xa8>)
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <USART2_IRQHandler+0xb4>)
 8003dbe:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003dc0:	2110      	movs	r1, #16
 8003dc2:	480e      	ldr	r0, [pc, #56]	; (8003dfc <USART2_IRQHandler+0xbc>)
 8003dc4:	f000 fc88 	bl	80046d8 <HAL_GPIO_TogglePin>
    }
    HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003dc8:	2108      	movs	r1, #8
 8003dca:	480c      	ldr	r0, [pc, #48]	; (8003dfc <USART2_IRQHandler+0xbc>)
 8003dcc:	f000 fc84 	bl	80046d8 <HAL_GPIO_TogglePin>
	  //rchar = huart2.Instance->RDR;
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8003dd0:	4803      	ldr	r0, [pc, #12]	; (8003de0 <USART2_IRQHandler+0xa0>)
 8003dd2:	f007 fe4d 	bl	800ba70 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
	/* USER CODE END USART2_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200007dc 	.word	0x200007dc
 8003de4:	20000eb0 	.word	0x20000eb0
 8003de8:	20000eac 	.word	0x20000eac
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000eb4 	.word	0x20000eb4
 8003df4:	2000086c 	.word	0x2000086c
 8003df8:	20000b8c 	.word	0x20000b8c
 8003dfc:	48000c00 	.word	0x48000c00

08003e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <OTG_FS_IRQHandler+0x10>)
 8003e06:	f001 fc65 	bl	80056d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20002830 	.word	0x20002830

08003e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <SystemInit+0x20>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <SystemInit+0x20>)
 8003e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e3c:	f7ff ffea 	bl	8003e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e40:	480c      	ldr	r0, [pc, #48]	; (8003e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e42:	490d      	ldr	r1, [pc, #52]	; (8003e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <LoopForever+0xe>)
  movs r3, #0
 8003e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e48:	e002      	b.n	8003e50 <LoopCopyDataInit>

08003e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4e:	3304      	adds	r3, #4

08003e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e54:	d3f9      	bcc.n	8003e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <LoopForever+0x16>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e5c:	e001      	b.n	8003e62 <LoopFillZerobss>

08003e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e60:	3204      	adds	r2, #4

08003e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e64:	d3fb      	bcc.n	8003e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e66:	f010 fc1d 	bl	80146a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e6a:	f7fe fe33 	bl	8002ad4 <main>

08003e6e <LoopForever>:

LoopForever:
    b LoopForever
 8003e6e:	e7fe      	b.n	8003e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e78:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8003e7c:	08017d78 	.word	0x08017d78
  ldr r2, =_sbss
 8003e80:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003e84:	20002f70 	.word	0x20002f70

08003e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e88:	e7fe      	b.n	8003e88 <ADC1_IRQHandler>

08003e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e94:	2003      	movs	r0, #3
 8003e96:	f000 f961 	bl	800415c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e9a:	200f      	movs	r0, #15
 8003e9c:	f000 f80e 	bl	8003ebc <HAL_InitTick>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	71fb      	strb	r3, [r7, #7]
 8003eaa:	e001      	b.n	8003eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eac:	f7ff fcb6 	bl	800381c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_InitTick+0x6c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_InitTick+0x70>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_InitTick+0x6c>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f96d 	bl	80041c6 <HAL_SYSTICK_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d809      	bhi.n	8003f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	f000 f937 	bl	8004172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_InitTick+0x74>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e007      	b.n	8003f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e004      	b.n	8003f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e001      	b.n	8003f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2000000c 	.word	0x2000000c
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	20000008 	.word	0x20000008

08003f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x20>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_IncTick+0x24>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_IncTick+0x24>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	20000ebc 	.word	0x20000ebc

08003f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_GetTick+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000ebc 	.word	0x20000ebc

08003f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7ff ffee 	bl	8003f5c <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8c:	d005      	beq.n	8003f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_Delay+0x44>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f9a:	bf00      	nop
 8003f9c:	f7ff ffde 	bl	8003f5c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d8f7      	bhi.n	8003f9c <HAL_Delay+0x28>
  {
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004128:	d301      	bcc.n	800412e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412a:	2301      	movs	r3, #1
 800412c:	e00f      	b.n	800414e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <SysTick_Config+0x40>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004136:	210f      	movs	r1, #15
 8004138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800413c:	f7ff ff8e 	bl	800405c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <SysTick_Config+0x40>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SysTick_Config+0x40>)
 8004148:	2207      	movs	r2, #7
 800414a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000e010 	.word	0xe000e010

0800415c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff29 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004184:	f7ff ff3e 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff ff8e 	bl	80040b0 <NVIC_EncodePriority>
 8004194:	4602      	mov	r2, r0
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff5d 	bl	800405c <__NVIC_SetPriority>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff31 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ffa2 	bl	8004118 <SysTick_Config>
 80041d4:	4603      	mov	r3, r0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d008      	beq.n	8004208 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e040      	b.n	800428a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004226:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 021c 	and.w	r2, r3, #28
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004254:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004276:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d005      	beq.n	80042ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e047      	b.n	800434a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 020e 	bic.w	r2, r2, #14
 80042c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f003 021c 	and.w	r2, r3, #28
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f202 	lsl.w	r2, r1, r2
 80042fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004306:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004328:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
    }
  }
  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004362:	e166      	b.n	8004632 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8158 	beq.w	800462c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d005      	beq.n	8004394 <HAL_GPIO_Init+0x40>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d130      	bne.n	80043f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ca:	2201      	movs	r2, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0201 	and.w	r2, r3, #1
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d017      	beq.n	8004432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d123      	bne.n	8004486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	6939      	ldr	r1, [r7, #16]
 8004482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80b2 	beq.w	800462c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c8:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_GPIO_Init+0x2fc>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	4a60      	ldr	r2, [pc, #384]	; (8004650 <HAL_GPIO_Init+0x2fc>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6613      	str	r3, [r2, #96]	; 0x60
 80044d4:	4b5e      	ldr	r3, [pc, #376]	; (8004650 <HAL_GPIO_Init+0x2fc>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044e0:	4a5c      	ldr	r2, [pc, #368]	; (8004654 <HAL_GPIO_Init+0x300>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800450a:	d02b      	beq.n	8004564 <HAL_GPIO_Init+0x210>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_GPIO_Init+0x304>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d025      	beq.n	8004560 <HAL_GPIO_Init+0x20c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_GPIO_Init+0x308>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01f      	beq.n	800455c <HAL_GPIO_Init+0x208>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_GPIO_Init+0x30c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d019      	beq.n	8004558 <HAL_GPIO_Init+0x204>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a4f      	ldr	r2, [pc, #316]	; (8004664 <HAL_GPIO_Init+0x310>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_GPIO_Init+0x200>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <HAL_GPIO_Init+0x314>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00d      	beq.n	8004550 <HAL_GPIO_Init+0x1fc>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a4d      	ldr	r2, [pc, #308]	; (800466c <HAL_GPIO_Init+0x318>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <HAL_GPIO_Init+0x1f8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a4c      	ldr	r2, [pc, #304]	; (8004670 <HAL_GPIO_Init+0x31c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_GPIO_Init+0x1f4>
 8004544:	2307      	movs	r3, #7
 8004546:	e00e      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004548:	2308      	movs	r3, #8
 800454a:	e00c      	b.n	8004566 <HAL_GPIO_Init+0x212>
 800454c:	2306      	movs	r3, #6
 800454e:	e00a      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004550:	2305      	movs	r3, #5
 8004552:	e008      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004554:	2304      	movs	r3, #4
 8004556:	e006      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004558:	2303      	movs	r3, #3
 800455a:	e004      	b.n	8004566 <HAL_GPIO_Init+0x212>
 800455c:	2302      	movs	r3, #2
 800455e:	e002      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_GPIO_Init+0x212>
 8004564:	2300      	movs	r3, #0
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4093      	lsls	r3, r2
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004576:	4937      	ldr	r1, [pc, #220]	; (8004654 <HAL_GPIO_Init+0x300>)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_GPIO_Init+0x320>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045a8:	4a32      	ldr	r2, [pc, #200]	; (8004674 <HAL_GPIO_Init+0x320>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_GPIO_Init+0x320>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045d2:	4a28      	ldr	r2, [pc, #160]	; (8004674 <HAL_GPIO_Init+0x320>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_GPIO_Init+0x320>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_GPIO_Init+0x320>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <HAL_GPIO_Init+0x320>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <HAL_GPIO_Init+0x320>)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f ae91 	bne.w	8004364 <HAL_GPIO_Init+0x10>
  }
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40021000 	.word	0x40021000
 8004654:	40010000 	.word	0x40010000
 8004658:	48000400 	.word	0x48000400
 800465c:	48000800 	.word	0x48000800
 8004660:	48000c00 	.word	0x48000c00
 8004664:	48001000 	.word	0x48001000
 8004668:	48001400 	.word	0x48001400
 800466c:	48001800 	.word	0x48001800
 8004670:	48001c00 	.word	0x48001c00
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e001      	b.n	800469a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
 80046b4:	4613      	mov	r3, r2
 80046b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b8:	787b      	ldrb	r3, [r7, #1]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046c4:	e002      	b.n	80046cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4013      	ands	r3, r2
 80046f0:	041a      	lsls	r2, r3, #16
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43d9      	mvns	r1, r3
 80046f6:	887b      	ldrh	r3, [r7, #2]
 80046f8:	400b      	ands	r3, r1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	619a      	str	r2, [r3, #24]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e081      	b.n	8004822 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff f896 	bl	8003864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	; 0x24
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800475c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800476c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	e006      	b.n	8004794 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004792:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d104      	bne.n	80047a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	460b      	mov	r3, r1
 800483a:	817b      	strh	r3, [r7, #10]
 800483c:	4613      	mov	r3, r2
 800483e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b20      	cmp	r3, #32
 800484a:	f040 80da 	bne.w	8004a02 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_I2C_Master_Transmit+0x30>
 8004858:	2302      	movs	r3, #2
 800485a:	e0d3      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004864:	f7ff fb7a 	bl	8003f5c <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2319      	movs	r3, #25
 8004870:	2201      	movs	r2, #1
 8004872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 faed 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0be      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2221      	movs	r2, #33	; 0x21
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2210      	movs	r2, #16
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	893a      	ldrh	r2, [r7, #8]
 80048a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2bff      	cmp	r3, #255	; 0xff
 80048b6:	d90e      	bls.n	80048d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	22ff      	movs	r2, #255	; 0xff
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	8979      	ldrh	r1, [r7, #10]
 80048c6:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_I2C_Master_Transmit+0x1e0>)
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fce4 	bl	800529c <I2C_TransferConfig>
 80048d4:	e06c      	b.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	4b48      	ldr	r3, [pc, #288]	; (8004a0c <HAL_I2C_Master_Transmit+0x1e0>)
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fcd3 	bl	800529c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80048f6:	e05b      	b.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	6a39      	ldr	r1, [r7, #32]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 faea 	bl	8004ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e07b      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d034      	beq.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d130      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fa7c 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04d      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2bff      	cmp	r3, #255	; 0xff
 8004970:	d90e      	bls.n	8004990 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	b2da      	uxtb	r2, r3
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fc87 	bl	800529c <I2C_TransferConfig>
 800498e:	e00f      	b.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	8979      	ldrh	r1, [r7, #10]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fc76 	bl	800529c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d19e      	bne.n	80048f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6a39      	ldr	r1, [r7, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fac9 	bl	8004f56 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e01a      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2220      	movs	r2, #32
 80049d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_I2C_Master_Transmit+0x1e4>)
 80049e2:	400b      	ands	r3, r1
 80049e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	80002000 	.word	0x80002000
 8004a10:	fe00e800 	.word	0xfe00e800

08004a14 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	460b      	mov	r3, r1
 8004a22:	817b      	strh	r3, [r7, #10]
 8004a24:	4613      	mov	r3, r2
 8004a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	f040 80db 	bne.w	8004bec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2C_Master_Receive+0x30>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e0d4      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a4c:	f7ff fa86 	bl	8003f5c <HAL_GetTick>
 8004a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2319      	movs	r3, #25
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f9f9 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0bf      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2222      	movs	r2, #34	; 0x22
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	893a      	ldrh	r2, [r7, #8]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2bff      	cmp	r3, #255	; 0xff
 8004a9e:	d90e      	bls.n	8004abe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	22ff      	movs	r2, #255	; 0xff
 8004aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	8979      	ldrh	r1, [r7, #10]
 8004aae:	4b52      	ldr	r3, [pc, #328]	; (8004bf8 <HAL_I2C_Master_Receive+0x1e4>)
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fbf0 	bl	800529c <I2C_TransferConfig>
 8004abc:	e06d      	b.n	8004b9a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <HAL_I2C_Master_Receive+0x1e4>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fbdf 	bl	800529c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ade:	e05c      	b.n	8004b9a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	6a39      	ldr	r1, [r7, #32]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fa73 	bl	8004fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e07c      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d034      	beq.n	8004b9a <HAL_I2C_Master_Receive+0x186>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d130      	bne.n	8004b9a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f987 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e04d      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2bff      	cmp	r3, #255	; 0xff
 8004b5a:	d90e      	bls.n	8004b7a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fb92 	bl	800529c <I2C_TransferConfig>
 8004b78:	e00f      	b.n	8004b9a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fb81 	bl	800529c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d19d      	bne.n	8004ae0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	6a39      	ldr	r1, [r7, #32]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f9d4 	bl	8004f56 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e01a      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_I2C_Master_Receive+0x1e8>)
 8004bcc:	400b      	ands	r3, r1
 8004bce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	80002400 	.word	0x80002400
 8004bfc:	fe00e800 	.word	0xfe00e800

08004c00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	f040 80f1 	bne.w	8004e04 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c30:	d101      	bne.n	8004c36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	e0e7      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_I2C_IsDeviceReady+0x44>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0e0      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_I2C_IsDeviceReady+0x72>
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c70:	e004      	b.n	8004c7c <HAL_I2C_IsDeviceReady+0x7c>
 8004c72:	897b      	ldrh	r3, [r7, #10]
 8004c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c82:	f7ff f96b 	bl	8003f5c <HAL_GetTick>
 8004c86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cb4:	e034      	b.n	8004d20 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d01a      	beq.n	8004cf4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7ff f94d 	bl	8003f5c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <HAL_I2C_IsDeviceReady+0xd4>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e088      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d20:	7ffb      	ldrb	r3, [r7, #31]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_I2C_IsDeviceReady+0x12c>
 8004d26:	7fbb      	ldrb	r3, [r7, #30]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0c4      	beq.n	8004cb6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d01a      	beq.n	8004d70 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2120      	movs	r1, #32
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f886 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e058      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e04a      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2120      	movs	r1, #32
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f86b 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e03d      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2220      	movs	r2, #32
 8004d98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d118      	bne.n	8004dd4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2120      	movs	r1, #32
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f84a 	bl	8004e56 <I2C_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e01c      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f63f af3b 	bhi.w	8004c5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d103      	bne.n	8004e2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d007      	beq.n	8004e4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	619a      	str	r2, [r3, #24]
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e66:	e022      	b.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	d01e      	beq.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7ff f874 	bl	8003f5c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0cd      	beq.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ee2:	e02c      	b.n	8004f3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f8eb 	bl	80050c4 <I2C_IsErrorOccurred>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e02a      	b.n	8004f4e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efe:	d01e      	beq.n	8004f3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f00:	f7ff f82c 	bl	8003f5c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d302      	bcc.n	8004f16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d113      	bne.n	8004f3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d1cb      	bne.n	8004ee4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f62:	e028      	b.n	8004fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f8ab 	bl	80050c4 <I2C_IsErrorOccurred>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e026      	b.n	8004fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fe fff0 	bl	8003f5c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e007      	b.n	8004fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d1cf      	bne.n	8004f64 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fdc:	e064      	b.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f86e 	bl	80050c4 <I2C_IsErrorOccurred>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e062      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d138      	bne.n	8005072 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d105      	bne.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e04e      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b10      	cmp	r3, #16
 8005026:	d107      	bne.n	8005038 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2204      	movs	r2, #4
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
 8005036:	e002      	b.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2220      	movs	r2, #32
 8005044:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005052:	400b      	ands	r3, r1
 8005054:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e022      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fe ff73 	bl	8003f5c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10f      	bne.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e007      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d193      	bne.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	fe00e800 	.word	0xfe00e800

080050c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d075      	beq.n	80051dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2210      	movs	r2, #16
 80050f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050f8:	e056      	b.n	80051a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005100:	d052      	beq.n	80051a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fe ff2b 	bl	8003f5c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_IsErrorOccurred+0x54>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d147      	bne.n	80051a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800512a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513a:	d12e      	bne.n	800519a <I2C_IsErrorOccurred+0xd6>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005142:	d02a      	beq.n	800519a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b20      	cmp	r3, #32
 8005148:	d027      	beq.n	800519a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005158:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800515a:	f7fe feff 	bl	8003f5c <HAL_GetTick>
 800515e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005160:	e01b      	b.n	800519a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005162:	f7fe fefb 	bl	8003f5c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b19      	cmp	r3, #25
 800516e:	d914      	bls.n	800519a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d1dc      	bne.n	8005162 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d003      	beq.n	80051be <I2C_IsErrorOccurred+0xfa>
 80051b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d09d      	beq.n	80050fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2220      	movs	r2, #32
 80051cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800524a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01c      	beq.n	800528c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fddb 	bl	8004e0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <I2C_IsErrorOccurred+0x1d4>)
 8005264:	400b      	ands	r3, r1
 8005266:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800528c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	fe00e800 	.word	0xfe00e800

0800529c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	817b      	strh	r3, [r7, #10]
 80052aa:	4613      	mov	r3, r2
 80052ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ae:	897b      	ldrh	r3, [r7, #10]
 80052b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b4:	7a7b      	ldrb	r3, [r7, #9]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	0d5b      	lsrs	r3, r3, #21
 80052d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <I2C_TransferConfig+0x60>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	43db      	mvns	r3, r3
 80052e0:	ea02 0103 	and.w	r1, r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	03ff63ff 	.word	0x03ff63ff

08005300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	d138      	bne.n	8005388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005320:	2302      	movs	r3, #2
 8005322:	e032      	b.n	800538a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6819      	ldr	r1, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	e000      	b.n	800538a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
  }
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d139      	bne.n	8005420 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e033      	b.n	8005422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2224      	movs	r2, #36	; 0x24
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e000      	b.n	8005422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800542e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005430:	b08f      	sub	sp, #60	; 0x3c
 8005432:	af0a      	add	r7, sp, #40	; 0x28
 8005434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e116      	b.n	800566e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f00e fd3e 	bl	8013edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f008 fb67 	bl	800db52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	687e      	ldr	r6, [r7, #4]
 800548c:	466d      	mov	r5, sp
 800548e:	f106 0410 	add.w	r4, r6, #16
 8005492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800549a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800549e:	e885 0003 	stmia.w	r5, {r0, r1}
 80054a2:	1d33      	adds	r3, r6, #4
 80054a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f008 fa7a 	bl	800d9a0 <USB_CoreInit>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e0d7      	b.n	800566e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f008 fb55 	bl	800db74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
 80054ce:	e04a      	b.n	8005566 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	333d      	adds	r3, #61	; 0x3d
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054e4:	7bfa      	ldrb	r2, [r7, #15]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	333c      	adds	r3, #60	; 0x3c
 80054f4:	7bfa      	ldrb	r2, [r7, #15]
 80054f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	b298      	uxth	r0, r3
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3344      	adds	r3, #68	; 0x44
 800550c:	4602      	mov	r2, r0
 800550e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005510:	7bfa      	ldrb	r2, [r7, #15]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	3340      	adds	r3, #64	; 0x40
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005524:	7bfa      	ldrb	r2, [r7, #15]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3348      	adds	r3, #72	; 0x48
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	334c      	adds	r3, #76	; 0x4c
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800554c:	7bfa      	ldrb	r2, [r7, #15]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3354      	adds	r3, #84	; 0x54
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	3301      	adds	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d3af      	bcc.n	80054d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
 8005574:	e044      	b.n	8005600 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055ce:	7bfa      	ldrb	r2, [r7, #15]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055e4:	7bfa      	ldrb	r2, [r7, #15]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	3301      	adds	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d3b5      	bcc.n	8005576 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	687e      	ldr	r6, [r7, #4]
 8005612:	466d      	mov	r5, sp
 8005614:	f106 0410 	add.w	r4, r6, #16
 8005618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800561a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800561e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005624:	e885 0003 	stmia.w	r5, {r0, r1}
 8005628:	1d33      	adds	r3, r6, #4
 800562a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	f008 faed 	bl	800dc0c <USB_DevInit>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e014      	b.n	800566e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 f881 	bl	8006764 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f009 fb75 	bl	800ed56 <USB_DevDisconnect>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005676 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_PCD_Start+0x1c>
 800568e:	2302      	movs	r3, #2
 8005690:	e01c      	b.n	80056cc <HAL_PCD_Start+0x56>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f008 fa3c 	bl	800db30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f009 fb29 	bl	800ed14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b08d      	sub	sp, #52	; 0x34
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f009 fbe7 	bl	800eebe <USB_GetMode>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 847e 	bne.w	8005ff4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f009 fb4b 	bl	800ed98 <USB_ReadInterrupts>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8474 	beq.w	8005ff2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f009 fb38 	bl	800ed98 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d107      	bne.n	8005742 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f002 0202 	and.w	r2, r2, #2
 8005740:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f009 fb26 	bl	800ed98 <USB_ReadInterrupts>
 800574c:	4603      	mov	r3, r0
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b10      	cmp	r3, #16
 8005754:	d161      	bne.n	800581a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0210 	bic.w	r2, r2, #16
 8005764:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 020f 	and.w	r2, r3, #15
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	3304      	adds	r3, #4
 8005784:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	0c5b      	lsrs	r3, r3, #17
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	2b02      	cmp	r3, #2
 8005790:	d124      	bne.n	80057dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d035      	beq.n	800580a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	6a38      	ldr	r0, [r7, #32]
 80057b2:	f009 f95d 	bl	800ea70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c2:	441a      	add	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d4:	441a      	add	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
 80057da:	e016      	b.n	800580a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	0c5b      	lsrs	r3, r3, #17
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d110      	bne.n	800580a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057ee:	2208      	movs	r2, #8
 80057f0:	4619      	mov	r1, r3
 80057f2:	6a38      	ldr	r0, [r7, #32]
 80057f4:	f009 f93c 	bl	800ea70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005804:	441a      	add	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0210 	orr.w	r2, r2, #16
 8005818:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f009 faba 	bl	800ed98 <USB_ReadInterrupts>
 8005824:	4603      	mov	r3, r0
 8005826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800582a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800582e:	f040 80a7 	bne.w	8005980 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f009 fabf 	bl	800edbe <USB_ReadDevAllOutEpInterrupt>
 8005840:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005842:	e099      	b.n	8005978 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 808e 	beq.w	800596c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f009 fae3 	bl	800ee26 <USB_ReadDevOutEPInterrupt>
 8005860:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	461a      	mov	r2, r3
 800587a:	2301      	movs	r3, #1
 800587c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800587e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fe95 	bl	80065b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	461a      	mov	r2, r3
 800589e:	2308      	movs	r3, #8
 80058a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fed1 	bl	800664c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	2310      	movs	r3, #16
 80058c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d030      	beq.n	8005932 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d109      	bne.n	80058f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	78db      	ldrb	r3, [r3, #3]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d108      	bne.n	8005920 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	b2db      	uxtb	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00e fc22 	bl	8014164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	461a      	mov	r2, r3
 800592e:	2302      	movs	r3, #2
 8005930:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	461a      	mov	r2, r3
 800594a:	2320      	movs	r3, #32
 800594c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800596a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	f47f af62 	bne.w	8005844 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f009 fa07 	bl	800ed98 <USB_ReadInterrupts>
 800598a:	4603      	mov	r3, r0
 800598c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005994:	f040 80a4 	bne.w	8005ae0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f009 fa28 	bl	800edf2 <USB_ReadDevAllInEpInterrupt>
 80059a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059a8:	e096      	b.n	8005ad8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 808b 	beq.w	8005acc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f009 fa4e 	bl	800ee62 <USB_ReadDevInEPInterrupt>
 80059c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d020      	beq.n	8005a14 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	2201      	movs	r2, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059f2:	4013      	ands	r3, r2
 80059f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	2301      	movs	r3, #1
 8005a06:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f00e fb13 	bl	801403a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	461a      	mov	r2, r3
 8005a48:	2310      	movs	r3, #16
 8005a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	461a      	mov	r2, r3
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a74:	6a38      	ldr	r0, [r7, #32]
 8005a76:	f008 fa15 	bl	800dea4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	3338      	adds	r3, #56	; 0x38
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f00e fb70 	bl	8014188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fcea 	bl	80064a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	3301      	adds	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f47f af65 	bne.w	80059aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f009 f957 	bl	800ed98 <USB_ReadInterrupts>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af4:	d122      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d108      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fe44 	bl	80067ac <HAL_PCDEx_LPM_Callback>
 8005b24:	e002      	b.n	8005b2c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f00e faf4 	bl	8014114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f009 f929 	bl	800ed98 <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b50:	d112      	bne.n	8005b78 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d102      	bne.n	8005b68 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f00e fab0 	bl	80140c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f009 f90b 	bl	800ed98 <USB_ReadInterrupts>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b8c:	d121      	bne.n	8005bd2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005b9c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d111      	bne.n	8005bcc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fdf1 	bl	80067ac <HAL_PCDEx_LPM_Callback>
 8005bca:	e002      	b.n	8005bd2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f00e fa7b 	bl	80140c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f009 f8de 	bl	800ed98 <USB_ReadInterrupts>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be6:	f040 80b5 	bne.w	8005d54 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2110      	movs	r1, #16
 8005c04:	4618      	mov	r0, r3
 8005c06:	f008 f94d 	bl	800dea4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c0e:	e046      	b.n	8005c9e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	461a      	mov	r2, r3
 8005c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3b3      	bcc.n	8005c10 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd4:	f043 030b 	orr.w	r3, r3, #11
 8005cd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cea:	f043 030b 	orr.w	r3, r3, #11
 8005cee:	6453      	str	r3, [r2, #68]	; 0x44
 8005cf0:	e015      	b.n	8005d1e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d18:	f043 030b 	orr.w	r3, r3, #11
 8005d1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f009 f8ee 	bl	800ef20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f009 f81d 	bl	800ed98 <USB_ReadInterrupts>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d124      	bne.n	8005db4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f009 f8b3 	bl	800eeda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f008 f910 	bl	800df9e <USB_GetDevSpeed>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681c      	ldr	r4, [r3, #0]
 8005d8a:	f001 fbcf 	bl	800752c <HAL_RCC_GetHCLKFreq>
 8005d8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f007 fe2d 	bl	800d9f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f00e f973 	bl	801408a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f008 ffed 	bl	800ed98 <USB_ReadInterrupts>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d10a      	bne.n	8005dde <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f00e f950 	bl	801406e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f002 0208 	and.w	r2, r2, #8
 8005ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f008 ffd8 	bl	800ed98 <USB_ReadInterrupts>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d122      	bne.n	8005e38 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dfe:	2301      	movs	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	e014      	b.n	8005e2e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb0b 	bl	800643e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d3e5      	bcc.n	8005e04 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f008 ffab 	bl	800ed98 <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4c:	d13b      	bne.n	8005ec6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	e02b      	b.n	8005eac <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3340      	adds	r3, #64	; 0x40
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d115      	bne.n	8005ea6 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da12      	bge.n	8005ea6 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	333f      	adds	r3, #63	; 0x3f
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 facc 	bl	800643e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d3ce      	bcc.n	8005e54 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f008 ff64 	bl	800ed98 <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eda:	d155      	bne.n	8005f88 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005edc:	2301      	movs	r3, #1
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee0:	e045      	b.n	8005f6e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d12e      	bne.n	8005f68 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	da2b      	bge.n	8005f68 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d121      	bne.n	8005f68 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f64:	6053      	str	r3, [r2, #4]
            break;
 8005f66:	e007      	b.n	8005f78 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3b4      	bcc.n	8005ee2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f008 ff03 	bl	800ed98 <USB_ReadInterrupts>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d10a      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f00e f904 	bl	80141ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695a      	ldr	r2, [r3, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f008 feed 	bl	800ed98 <USB_ReadInterrupts>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d115      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f00e f8f4 	bl	80141c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
 8005ff0:	e000      	b.n	8005ff4 <HAL_PCD_IRQHandler+0x920>
      return;
 8005ff2:	bf00      	nop
    }
  }
}
 8005ff4:	3734      	adds	r7, #52	; 0x34
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}

08005ffa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_PCD_SetAddress+0x1a>
 8006010:	2302      	movs	r3, #2
 8006012:	e013      	b.n	800603c <HAL_PCD_SetAddress+0x42>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f008 fe4b 	bl	800ecc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4603      	mov	r3, r0
 8006054:	70fb      	strb	r3, [r7, #3]
 8006056:	460b      	mov	r3, r1
 8006058:	803b      	strh	r3, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	da0f      	bge.n	800608a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	3338      	adds	r3, #56	; 0x38
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	3304      	adds	r3, #4
 8006080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	705a      	strb	r2, [r3, #1]
 8006088:	e00f      	b.n	80060aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060b6:	883a      	ldrh	r2, [r7, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	78ba      	ldrb	r2, [r7, #2]
 80060c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060d4:	78bb      	ldrb	r3, [r7, #2]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d102      	bne.n	80060e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_PCD_EP_Open+0xaa>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e00e      	b.n	800610c <HAL_PCD_EP_Open+0xc8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f007 ff6d 	bl	800dfdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800610a:	7afb      	ldrb	r3, [r7, #11]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006124:	2b00      	cmp	r3, #0
 8006126:	da0f      	bge.n	8006148 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	3338      	adds	r3, #56	; 0x38
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	4413      	add	r3, r2
 800613c:	3304      	adds	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	705a      	strb	r2, [r3, #1]
 8006146:	e00f      	b.n	8006168 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 020f 	and.w	r2, r3, #15
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_PCD_EP_Close+0x6e>
 800617e:	2302      	movs	r3, #2
 8006180:	e00e      	b.n	80061a0 <HAL_PCD_EP_Close+0x8c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	4618      	mov	r0, r3
 8006192:	f007 ffab 	bl	800e0ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	460b      	mov	r3, r1
 80061b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	3304      	adds	r3, #4
 80061d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061f6:	7afb      	ldrb	r3, [r7, #11]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6979      	ldr	r1, [r7, #20]
 8006206:	4618      	mov	r0, r3
 8006208:	f008 fa2c 	bl	800e664 <USB_EP0StartXfer>
 800620c:	e005      	b.n	800621a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	4618      	mov	r0, r3
 8006216:	f008 f845 	bl	800e2a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	460b      	mov	r3, r1
 8006262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2200      	movs	r2, #0
 800628c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	b2da      	uxtb	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f008 f9d7 	bl	800e664 <USB_EP0StartXfer>
 80062b6:	e005      	b.n	80062c4 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6979      	ldr	r1, [r7, #20]
 80062be:	4618      	mov	r0, r3
 80062c0:	f007 fff0 	bl	800e2a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d901      	bls.n	80062ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e04e      	b.n	800638a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da0f      	bge.n	8006314 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3338      	adds	r3, #56	; 0x38
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	3304      	adds	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	705a      	strb	r2, [r3, #1]
 8006312:	e00d      	b.n	8006330 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_PCD_EP_SetStall+0x82>
 800634c:	2302      	movs	r3, #2
 800634e:	e01c      	b.n	800638a <HAL_PCD_EP_SetStall+0xbc>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	f008 fbde 	bl	800eb20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	2b00      	cmp	r3, #0
 800636c:	d108      	bne.n	8006380 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f008 fdd0 	bl	800ef20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d901      	bls.n	80063b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e042      	b.n	8006436 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da0f      	bge.n	80063d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 020f 	and.w	r2, r3, #15
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	3338      	adds	r3, #56	; 0x38
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	3304      	adds	r3, #4
 80063ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	705a      	strb	r2, [r3, #1]
 80063d6:	e00f      	b.n	80063f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	f003 020f 	and.w	r2, r3, #15
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	3304      	adds	r3, #4
 80063f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_PCD_EP_ClrStall+0x86>
 8006414:	2302      	movs	r3, #2
 8006416:	e00e      	b.n	8006436 <HAL_PCD_EP_ClrStall+0xa4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	4618      	mov	r0, r3
 8006428:	f008 fbe8 	bl	800ebfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800644a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800644e:	2b00      	cmp	r3, #0
 8006450:	da0c      	bge.n	800646c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	3338      	adds	r3, #56	; 0x38
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	3304      	adds	r3, #4
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e00c      	b.n	8006486 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	3304      	adds	r3, #4
 8006484:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	4618      	mov	r0, r3
 800648e:	f008 fa0b 	bl	800e8a8 <USB_EPStopXfer>
 8006492:	4603      	mov	r3, r0
 8006494:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006496:	7afb      	ldrb	r3, [r7, #11]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	3338      	adds	r3, #56	; 0x38
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d901      	bls.n	80064d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e067      	b.n	80065a8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d902      	bls.n	80064f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3303      	adds	r3, #3
 80064f8:	089b      	lsrs	r3, r3, #2
 80064fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064fc:	e026      	b.n	800654c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	429a      	cmp	r2, r3
 8006512:	d902      	bls.n	800651a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3303      	adds	r3, #3
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6919      	ldr	r1, [r3, #16]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	b29b      	uxth	r3, r3
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f008 fa64 	bl	800e9fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	441a      	add	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	b29b      	uxth	r3, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	429a      	cmp	r2, r3
 8006560:	d809      	bhi.n	8006576 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800656a:	429a      	cmp	r2, r3
 800656c:	d203      	bcs.n	8006576 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1c3      	bne.n	80064fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	429a      	cmp	r2, r3
 8006580:	d811      	bhi.n	80065a6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	2201      	movs	r2, #1
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	43db      	mvns	r3, r3
 800659c:	6939      	ldr	r1, [r7, #16]
 800659e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a2:	4013      	ands	r3, r2
 80065a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	333c      	adds	r3, #60	; 0x3c
 80065c8:	3304      	adds	r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <PCD_EP_OutXfrComplete_int+0x98>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d124      	bne.n	8006630 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	6093      	str	r3, [r2, #8]
 8006604:	e01a      	b.n	800663c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	2320      	movs	r3, #32
 8006620:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f00d fceb 	bl	8014004 <HAL_PCD_DataOutStageCallback>
 800662e:	e005      	b.n	800663c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f00d fce4 	bl	8014004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	4f54310a 	.word	0x4f54310a

0800664c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	333c      	adds	r3, #60	; 0x3c
 8006664:	3304      	adds	r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <PCD_EP_OutSetupPacket_int+0x64>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d90e      	bls.n	80066a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	461a      	mov	r2, r3
 800669a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f00d fc9d 	bl	8013fe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	4f54300a 	.word	0x4f54300a

080066b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
 80066c0:	4613      	mov	r3, r2
 80066c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066d2:	883b      	ldrh	r3, [r7, #0]
 80066d4:	0419      	lsls	r1, r3, #16
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	430a      	orrs	r2, r1
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
 80066e0:	e028      	b.n	8006734 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	e00d      	b.n	8006712 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	3301      	adds	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	3b01      	subs	r3, #1
 8006718:	429a      	cmp	r2, r3
 800671a:	d3ec      	bcc.n	80066f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800671c:	883b      	ldrh	r3, [r7, #0]
 800671e:	0418      	lsls	r0, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	3b01      	subs	r3, #1
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	4302      	orrs	r2, r0
 800672c:	3340      	adds	r3, #64	; 0x40
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	887a      	ldrh	r2, [r7, #2]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006796:	f043 0303 	orr.w	r3, r3, #3
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <HAL_PWREx_GetVoltageRange+0x3c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d4:	d102      	bne.n	80067dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80067d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067da:	e00b      	b.n	80067f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_PWREx_GetVoltageRange+0x3c>)
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	d102      	bne.n	80067f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80067ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067f0:	e000      	b.n	80067f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80067f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40007000 	.word	0x40007000

08006804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d141      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006812:	4b4b      	ldr	r3, [pc, #300]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681e:	d131      	bne.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006820:	4b47      	ldr	r3, [pc, #284]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006826:	4a46      	ldr	r2, [pc, #280]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800682c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006830:	4b43      	ldr	r3, [pc, #268]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006838:	4a41      	ldr	r2, [pc, #260]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800683e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006840:	4b40      	ldr	r3, [pc, #256]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2232      	movs	r2, #50	; 0x32
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	0c9b      	lsrs	r3, r3, #18
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006856:	e002      	b.n	800685e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3b01      	subs	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685e:	4b38      	ldr	r3, [pc, #224]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d102      	bne.n	8006872 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f2      	bne.n	8006858 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006872:	4b33      	ldr	r3, [pc, #204]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d158      	bne.n	8006932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e057      	b.n	8006934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006884:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006894:	e04d      	b.n	8006932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d141      	bne.n	8006922 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068aa:	d131      	bne.n	8006910 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068ac:	4b24      	ldr	r3, [pc, #144]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b2:	4a23      	ldr	r2, [pc, #140]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068bc:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068c4:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80068cc:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2232      	movs	r2, #50	; 0x32
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	0c9b      	lsrs	r3, r3, #18
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068e2:	e002      	b.n	80068ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f6:	d102      	bne.n	80068fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f2      	bne.n	80068e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068fe:	4b10      	ldr	r3, [pc, #64]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d112      	bne.n	8006932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e011      	b.n	8006934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006916:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006920:	e007      	b.n	8006932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692a:	4a05      	ldr	r2, [pc, #20]	; (8006940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006930:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40007000 	.word	0x40007000
 8006944:	20000004 	.word	0x20000004
 8006948:	431bde83 	.word	0x431bde83

0800694c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a04      	ldr	r2, [pc, #16]	; (8006968 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800695a:	6053      	str	r3, [r2, #4]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40007000 	.word	0x40007000

0800696c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f000 bc08 	b.w	8007190 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006980:	4b96      	ldr	r3, [pc, #600]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800698a:	4b94      	ldr	r3, [pc, #592]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80e4 	beq.w	8006b6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_RCC_OscConfig+0x4c>
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b0c      	cmp	r3, #12
 80069ac:	f040 808b 	bne.w	8006ac6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	f040 8087 	bne.w	8006ac6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069b8:	4b88      	ldr	r3, [pc, #544]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_OscConfig+0x64>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e3df      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	4b81      	ldr	r3, [pc, #516]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <HAL_RCC_OscConfig+0x7e>
 80069e0:	4b7e      	ldr	r3, [pc, #504]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069e8:	e005      	b.n	80069f6 <HAL_RCC_OscConfig+0x8a>
 80069ea:	4b7c      	ldr	r3, [pc, #496]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 80069ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d223      	bcs.n	8006a42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fdf8 	bl	80075f4 <RCC_SetFlashLatencyFromMSIRange>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e3c0      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a0e:	4b73      	ldr	r3, [pc, #460]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a72      	ldr	r2, [pc, #456]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a14:	f043 0308 	orr.w	r3, r3, #8
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	4b70      	ldr	r3, [pc, #448]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	496d      	ldr	r1, [pc, #436]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a2c:	4b6b      	ldr	r3, [pc, #428]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	4968      	ldr	r1, [pc, #416]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	e025      	b.n	8006a8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a42:	4b66      	ldr	r3, [pc, #408]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a65      	ldr	r2, [pc, #404]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a48:	f043 0308 	orr.w	r3, r3, #8
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b63      	ldr	r3, [pc, #396]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	4960      	ldr	r1, [pc, #384]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	495b      	ldr	r1, [pc, #364]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fdb8 	bl	80075f4 <RCC_SetFlashLatencyFromMSIRange>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e380      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a8e:	f000 fcc1 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b51      	ldr	r3, [pc, #324]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	4950      	ldr	r1, [pc, #320]	; (8006be0 <HAL_RCC_OscConfig+0x274>)
 8006aa0:	5ccb      	ldrb	r3, [r1, r3]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	4a4e      	ldr	r2, [pc, #312]	; (8006be4 <HAL_RCC_OscConfig+0x278>)
 8006aac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006aae:	4b4e      	ldr	r3, [pc, #312]	; (8006be8 <HAL_RCC_OscConfig+0x27c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fd fa02 	bl	8003ebc <HAL_InitTick>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d052      	beq.n	8006b68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	e364      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d032      	beq.n	8006b34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ace:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a42      	ldr	r2, [pc, #264]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ada:	f7fd fa3f 	bl	8003f5c <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ae2:	f7fd fa3b 	bl	8003f5c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e34d      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006af4:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b00:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a35      	ldr	r2, [pc, #212]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b06:	f043 0308 	orr.w	r3, r3, #8
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4b33      	ldr	r3, [pc, #204]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	4930      	ldr	r1, [pc, #192]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b1e:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	492b      	ldr	r1, [pc, #172]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
 8006b32:	e01a      	b.n	8006b6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b40:	f7fd fa0c 	bl	8003f5c <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b48:	f7fd fa08 	bl	8003f5c <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e31a      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b5a:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x1dc>
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d073      	beq.n	8006c5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d005      	beq.n	8006b88 <HAL_RCC_OscConfig+0x21c>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b0c      	cmp	r3, #12
 8006b80:	d10e      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d10b      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b88:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d063      	beq.n	8006c5c <HAL_RCC_OscConfig+0x2f0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d15f      	bne.n	8006c5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e2f7      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba8:	d106      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e025      	b.n	8006c04 <HAL_RCC_OscConfig+0x298>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc0:	d114      	bne.n	8006bec <HAL_RCC_OscConfig+0x280>
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a02      	ldr	r2, [pc, #8]	; (8006bdc <HAL_RCC_OscConfig+0x270>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e013      	b.n	8006c04 <HAL_RCC_OscConfig+0x298>
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	08017864 	.word	0x08017864
 8006be4:	20000004 	.word	0x20000004
 8006be8:	20000008 	.word	0x20000008
 8006bec:	4ba0      	ldr	r3, [pc, #640]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a9f      	ldr	r2, [pc, #636]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	4b9d      	ldr	r3, [pc, #628]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a9c      	ldr	r2, [pc, #624]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d013      	beq.n	8006c34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fd f9a6 	bl	8003f5c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c14:	f7fd f9a2 	bl	8003f5c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b64      	cmp	r3, #100	; 0x64
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e2b4      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c26:	4b92      	ldr	r3, [pc, #584]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0x2a8>
 8006c32:	e014      	b.n	8006c5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fd f992 	bl	8003f5c <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c3c:	f7fd f98e 	bl	8003f5c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b64      	cmp	r3, #100	; 0x64
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e2a0      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c4e:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x2d0>
 8006c5a:	e000      	b.n	8006c5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d060      	beq.n	8006d2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_OscConfig+0x310>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d119      	bne.n	8006caa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d116      	bne.n	8006caa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c7c:	4b7c      	ldr	r3, [pc, #496]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_OscConfig+0x328>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e27d      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	4b76      	ldr	r3, [pc, #472]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	4973      	ldr	r1, [pc, #460]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca8:	e040      	b.n	8006d2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d023      	beq.n	8006cfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cb2:	4b6f      	ldr	r3, [pc, #444]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6e      	ldr	r2, [pc, #440]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbe:	f7fd f94d 	bl	8003f5c <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc6:	f7fd f949 	bl	8003f5c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e25b      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cd8:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce4:	4b62      	ldr	r3, [pc, #392]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	061b      	lsls	r3, r3, #24
 8006cf2:	495f      	ldr	r1, [pc, #380]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
 8006cf8:	e018      	b.n	8006d2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cfa:	4b5d      	ldr	r3, [pc, #372]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a5c      	ldr	r2, [pc, #368]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7fd f929 	bl	8003f5c <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0e:	f7fd f925 	bl	8003f5c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e237      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d20:	4b53      	ldr	r3, [pc, #332]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f0      	bne.n	8006d0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d03c      	beq.n	8006db2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01c      	beq.n	8006d7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d40:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d46:	4a4a      	ldr	r2, [pc, #296]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d50:	f7fd f904 	bl	8003f5c <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d58:	f7fd f900 	bl	8003f5c <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e212      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0ef      	beq.n	8006d58 <HAL_RCC_OscConfig+0x3ec>
 8006d78:	e01b      	b.n	8006db2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d7a:	4b3d      	ldr	r3, [pc, #244]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d80:	4a3b      	ldr	r2, [pc, #236]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006d82:	f023 0301 	bic.w	r3, r3, #1
 8006d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8a:	f7fd f8e7 	bl	8003f5c <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d92:	f7fd f8e3 	bl	8003f5c <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e1f5      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006da4:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1ef      	bne.n	8006d92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80a6 	beq.w	8006f0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006dc4:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10d      	bne.n	8006dec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dd0:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dda:	6593      	str	r3, [r2, #88]	; 0x58
 8006ddc:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006de8:	2301      	movs	r3, #1
 8006dea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dec:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <HAL_RCC_OscConfig+0x508>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d118      	bne.n	8006e2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <HAL_RCC_OscConfig+0x508>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <HAL_RCC_OscConfig+0x508>)
 8006dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e04:	f7fd f8aa 	bl	8003f5c <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e0c:	f7fd f8a6 	bl	8003f5c <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e1b8      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <HAL_RCC_OscConfig+0x508>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d108      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4d8>
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e38:	4a0d      	ldr	r2, [pc, #52]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e42:	e029      	b.n	8006e98 <HAL_RCC_OscConfig+0x52c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d115      	bne.n	8006e78 <HAL_RCC_OscConfig+0x50c>
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e52:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e54:	f043 0304 	orr.w	r3, r3, #4
 8006e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e62:	4a03      	ldr	r2, [pc, #12]	; (8006e70 <HAL_RCC_OscConfig+0x504>)
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e6c:	e014      	b.n	8006e98 <HAL_RCC_OscConfig+0x52c>
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	40007000 	.word	0x40007000
 8006e78:	4b9d      	ldr	r3, [pc, #628]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	4a9c      	ldr	r2, [pc, #624]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e88:	4b99      	ldr	r3, [pc, #612]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	4a98      	ldr	r2, [pc, #608]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006e90:	f023 0304 	bic.w	r3, r3, #4
 8006e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea0:	f7fd f85c 	bl	8003f5c <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fd f858 	bl	8003f5c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e168      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ebe:	4b8c      	ldr	r3, [pc, #560]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ed      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x53c>
 8006ecc:	e015      	b.n	8006efa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ece:	f7fd f845 	bl	8003f5c <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ed4:	e00a      	b.n	8006eec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fd f841 	bl	8003f5c <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e151      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006eec:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1ed      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d105      	bne.n	8006f0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f00:	4b7b      	ldr	r3, [pc, #492]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	4a7a      	ldr	r2, [pc, #488]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d03c      	beq.n	8006f92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01c      	beq.n	8006f5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f20:	4b73      	ldr	r3, [pc, #460]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f26:	4a72      	ldr	r2, [pc, #456]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f30:	f7fd f814 	bl	8003f5c <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f38:	f7fd f810 	bl	8003f5c <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e122      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f4a:	4b69      	ldr	r3, [pc, #420]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0ef      	beq.n	8006f38 <HAL_RCC_OscConfig+0x5cc>
 8006f58:	e01b      	b.n	8006f92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f5a:	4b65      	ldr	r3, [pc, #404]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f60:	4a63      	ldr	r2, [pc, #396]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f6a:	f7fc fff7 	bl	8003f5c <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f72:	f7fc fff3 	bl	8003f5c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e105      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f84:	4b5a      	ldr	r3, [pc, #360]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1ef      	bne.n	8006f72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 80f9 	beq.w	800718e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	f040 80cf 	bne.w	8007144 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fa6:	4b52      	ldr	r3, [pc, #328]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f003 0203 	and.w	r2, r3, #3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d12c      	bne.n	8007014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d123      	bne.n	8007014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d11b      	bne.n	8007014 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d113      	bne.n	8007014 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d109      	bne.n	8007014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	3b01      	subs	r3, #1
 800700e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d071      	beq.n	80070f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b0c      	cmp	r3, #12
 8007018:	d068      	beq.n	80070ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800701a:	4b35      	ldr	r3, [pc, #212]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007026:	4b32      	ldr	r3, [pc, #200]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e0ac      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007036:	4b2e      	ldr	r3, [pc, #184]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2d      	ldr	r2, [pc, #180]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 800703c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007040:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007042:	f7fc ff8b 	bl	8003f5c <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800704a:	f7fc ff87 	bl	8003f5c <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e099      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800705c:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f0      	bne.n	800704a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007068:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <HAL_RCC_OscConfig+0x788>)
 800706e:	4013      	ands	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007078:	3a01      	subs	r2, #1
 800707a:	0112      	lsls	r2, r2, #4
 800707c:	4311      	orrs	r1, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007082:	0212      	lsls	r2, r2, #8
 8007084:	4311      	orrs	r1, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800708a:	0852      	lsrs	r2, r2, #1
 800708c:	3a01      	subs	r2, #1
 800708e:	0552      	lsls	r2, r2, #21
 8007090:	4311      	orrs	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007096:	0852      	lsrs	r2, r2, #1
 8007098:	3a01      	subs	r2, #1
 800709a:	0652      	lsls	r2, r2, #25
 800709c:	4311      	orrs	r1, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070a2:	06d2      	lsls	r2, r2, #27
 80070a4:	430a      	orrs	r2, r1
 80070a6:	4912      	ldr	r1, [pc, #72]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a0c      	ldr	r2, [pc, #48]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070c4:	f7fc ff4a 	bl	8003f5c <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070cc:	f7fc ff46 	bl	8003f5c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e058      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <HAL_RCC_OscConfig+0x784>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070ea:	e050      	b.n	800718e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e04f      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
 80070f0:	40021000 	.word	0x40021000
 80070f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d144      	bne.n	800718e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007104:	4b24      	ldr	r3, [pc, #144]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a23      	ldr	r2, [pc, #140]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 800710a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800710e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007110:	4b21      	ldr	r3, [pc, #132]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800711a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800711c:	f7fc ff1e 	bl	8003f5c <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007124:	f7fc ff1a 	bl	8003f5c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e02c      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007136:	4b18      	ldr	r3, [pc, #96]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0x7b8>
 8007142:	e024      	b.n	800718e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b0c      	cmp	r3, #12
 8007148:	d01f      	beq.n	800718a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007156:	f7fc ff01 	bl	8003f5c <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800715e:	f7fc fefd 	bl	8003f5c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e00f      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f0      	bne.n	800715e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	4905      	ldr	r1, [pc, #20]	; (8007198 <HAL_RCC_OscConfig+0x82c>)
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <HAL_RCC_OscConfig+0x830>)
 8007184:	4013      	ands	r3, r2
 8007186:	60cb      	str	r3, [r1, #12]
 8007188:	e001      	b.n	800718e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000
 800719c:	feeefffc 	.word	0xfeeefffc

080071a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e11d      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071b8:	4b90      	ldr	r3, [pc, #576]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d910      	bls.n	80071e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c6:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f023 020f 	bic.w	r2, r3, #15
 80071ce:	498b      	ldr	r1, [pc, #556]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071d6:	4b89      	ldr	r3, [pc, #548]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d001      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e105      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d010      	beq.n	8007216 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	4b81      	ldr	r3, [pc, #516]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007200:	429a      	cmp	r2, r3
 8007202:	d908      	bls.n	8007216 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007204:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	497b      	ldr	r1, [pc, #492]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d079      	beq.n	8007316 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d11e      	bne.n	8007268 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800722a:	4b75      	ldr	r3, [pc, #468]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0dc      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800723a:	f000 fa35 	bl	80076a8 <RCC_GetSysClockFreqFromPLLSource>
 800723e:	4603      	mov	r3, r0
 8007240:	4a70      	ldr	r2, [pc, #448]	; (8007404 <HAL_RCC_ClockConfig+0x264>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d946      	bls.n	80072d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007246:	4b6e      	ldr	r3, [pc, #440]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d140      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007252:	4b6b      	ldr	r3, [pc, #428]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800725a:	4a69      	ldr	r2, [pc, #420]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800725c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e035      	b.n	80072d4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d107      	bne.n	8007280 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007270:	4b63      	ldr	r3, [pc, #396]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d115      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0b9      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d107      	bne.n	8007298 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007288:	4b5d      	ldr	r3, [pc, #372]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0ad      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007298:	4b59      	ldr	r3, [pc, #356]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0a5      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80072a8:	f000 f8b4 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4a55      	ldr	r2, [pc, #340]	; (8007404 <HAL_RCC_ClockConfig+0x264>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d90f      	bls.n	80072d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80072b4:	4b52      	ldr	r3, [pc, #328]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072c0:	4b4f      	ldr	r3, [pc, #316]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072c8:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80072ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072d0:	2380      	movs	r3, #128	; 0x80
 80072d2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072d4:	4b4a      	ldr	r3, [pc, #296]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f023 0203 	bic.w	r2, r3, #3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4947      	ldr	r1, [pc, #284]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e6:	f7fc fe39 	bl	8003f5c <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ec:	e00a      	b.n	8007304 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ee:	f7fc fe35 	bl	8003f5c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e077      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007304:	4b3e      	ldr	r3, [pc, #248]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 020c 	and.w	r2, r3, #12
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	429a      	cmp	r2, r3
 8007314:	d1eb      	bne.n	80072ee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b80      	cmp	r3, #128	; 0x80
 800731a:	d105      	bne.n	8007328 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800731c:	4b38      	ldr	r3, [pc, #224]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4a37      	ldr	r2, [pc, #220]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007326:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007340:	429a      	cmp	r2, r3
 8007342:	d208      	bcs.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007344:	4b2e      	ldr	r3, [pc, #184]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	492b      	ldr	r1, [pc, #172]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007356:	4b29      	ldr	r3, [pc, #164]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d210      	bcs.n	8007386 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f023 020f 	bic.w	r2, r3, #15
 800736c:	4923      	ldr	r1, [pc, #140]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007374:	4b21      	ldr	r3, [pc, #132]	; (80073fc <HAL_RCC_ClockConfig+0x25c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d001      	beq.n	8007386 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e036      	b.n	80073f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007392:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	4918      	ldr	r1, [pc, #96]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	4910      	ldr	r1, [pc, #64]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073c4:	f000 f826 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <HAL_RCC_ClockConfig+0x260>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	091b      	lsrs	r3, r3, #4
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	490c      	ldr	r1, [pc, #48]	; (8007408 <HAL_RCC_ClockConfig+0x268>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <HAL_RCC_ClockConfig+0x26c>)
 80073e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <HAL_RCC_ClockConfig+0x270>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fc fd67 	bl	8003ebc <HAL_InitTick>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40022000 	.word	0x40022000
 8007400:	40021000 	.word	0x40021000
 8007404:	04c4b400 	.word	0x04c4b400
 8007408:	08017864 	.word	0x08017864
 800740c:	20000004 	.word	0x20000004
 8007410:	20000008 	.word	0x20000008

08007414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007422:	4b3e      	ldr	r3, [pc, #248]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 030c 	and.w	r3, r3, #12
 800742a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800742c:	4b3b      	ldr	r3, [pc, #236]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <HAL_RCC_GetSysClockFreq+0x34>
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d121      	bne.n	8007486 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d11e      	bne.n	8007486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007448:	4b34      	ldr	r3, [pc, #208]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d107      	bne.n	8007464 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007454:	4b31      	ldr	r3, [pc, #196]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 8007456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	e005      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	091b      	lsrs	r3, r3, #4
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007470:	4a2b      	ldr	r2, [pc, #172]	; (8007520 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007478:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10d      	bne.n	800749c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007484:	e00a      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d102      	bne.n	8007492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <HAL_RCC_GetSysClockFreq+0x110>)
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	e004      	b.n	800749c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d101      	bne.n	800749c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <HAL_RCC_GetSysClockFreq+0x114>)
 800749a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b0c      	cmp	r3, #12
 80074a0:	d134      	bne.n	800750c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074a2:	4b1e      	ldr	r3, [pc, #120]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d003      	beq.n	80074ba <HAL_RCC_GetSysClockFreq+0xa6>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d003      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0xac>
 80074b8:	e005      	b.n	80074c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <HAL_RCC_GetSysClockFreq+0x110>)
 80074bc:	617b      	str	r3, [r7, #20]
      break;
 80074be:	e005      	b.n	80074cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_RCC_GetSysClockFreq+0x114>)
 80074c2:	617b      	str	r3, [r7, #20]
      break;
 80074c4:	e002      	b.n	80074cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	617b      	str	r3, [r7, #20]
      break;
 80074ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074cc:	4b13      	ldr	r3, [pc, #76]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	091b      	lsrs	r3, r3, #4
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	3301      	adds	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	fb03 f202 	mul.w	r2, r3, r2
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_RCC_GetSysClockFreq+0x108>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	0e5b      	lsrs	r3, r3, #25
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	3301      	adds	r3, #1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	fbb2 f3f3 	udiv	r3, r2, r3
 800750a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800750c:	69bb      	ldr	r3, [r7, #24]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3724      	adds	r7, #36	; 0x24
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40021000 	.word	0x40021000
 8007520:	0801787c 	.word	0x0801787c
 8007524:	00f42400 	.word	0x00f42400
 8007528:	007a1200 	.word	0x007a1200

0800752c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007530:	4b03      	ldr	r3, [pc, #12]	; (8007540 <HAL_RCC_GetHCLKFreq+0x14>)
 8007532:	681b      	ldr	r3, [r3, #0]
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20000004 	.word	0x20000004

08007544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007548:	f7ff fff0 	bl	800752c <HAL_RCC_GetHCLKFreq>
 800754c:	4602      	mov	r2, r0
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	4904      	ldr	r1, [pc, #16]	; (800756c <HAL_RCC_GetPCLK1Freq+0x28>)
 800755a:	5ccb      	ldrb	r3, [r1, r3]
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007564:	4618      	mov	r0, r3
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40021000 	.word	0x40021000
 800756c:	08017874 	.word	0x08017874

08007570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007574:	f7ff ffda 	bl	800752c <HAL_RCC_GetHCLKFreq>
 8007578:	4602      	mov	r2, r0
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	0adb      	lsrs	r3, r3, #11
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007586:	5ccb      	ldrb	r3, [r1, r3]
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40021000 	.word	0x40021000
 8007598:	08017874 	.word	0x08017874

0800759c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <HAL_RCC_EnableCSS+0x1c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <HAL_RCC_EnableCSS+0x1c>)
 80075a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075aa:	6013      	str	r3, [r2, #0]
}
 80075ac:	bf00      	nop
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40021000 	.word	0x40021000

080075bc <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075cc:	d105      	bne.n	80075da <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80075ce:	f000 f809 	bl	80075e4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80075d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075d8:	621a      	str	r2, [r3, #32]
  }
}
 80075da:	bf00      	nop
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40021000 	.word	0x40021000

080075e4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007600:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800760c:	f7ff f8da 	bl	80067c4 <HAL_PWREx_GetVoltageRange>
 8007610:	6178      	str	r0, [r7, #20]
 8007612:	e014      	b.n	800763e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007614:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007618:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800761a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761e:	6593      	str	r3, [r2, #88]	; 0x58
 8007620:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800762c:	f7ff f8ca 	bl	80067c4 <HAL_PWREx_GetVoltageRange>
 8007630:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007632:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007636:	4a1a      	ldr	r2, [pc, #104]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800763c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007644:	d10b      	bne.n	800765e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d913      	bls.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2ba0      	cmp	r3, #160	; 0xa0
 8007650:	d902      	bls.n	8007658 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007652:	2302      	movs	r3, #2
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	e00d      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007658:	2301      	movs	r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	e00a      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b7f      	cmp	r3, #127	; 0x7f
 8007662:	d902      	bls.n	800766a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007664:	2302      	movs	r3, #2
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	e004      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d101      	bne.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007670:	2301      	movs	r3, #1
 8007672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 020f 	bic.w	r2, r3, #15
 800767c:	4909      	ldr	r1, [pc, #36]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	429a      	cmp	r2, r3
 8007690:	d001      	beq.n	8007696 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40022000 	.word	0x40022000

080076a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076ae:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d00b      	beq.n	80076d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d825      	bhi.n	8007710 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d008      	beq.n	80076dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d11f      	bne.n	8007710 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80076d0:	4b25      	ldr	r3, [pc, #148]	; (8007768 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80076d2:	613b      	str	r3, [r7, #16]
    break;
 80076d4:	e01f      	b.n	8007716 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80076d6:	4b25      	ldr	r3, [pc, #148]	; (800776c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80076d8:	613b      	str	r3, [r7, #16]
    break;
 80076da:	e01c      	b.n	8007716 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076dc:	4b21      	ldr	r3, [pc, #132]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076e8:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80076ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e005      	b.n	8007704 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007704:	4a1a      	ldr	r2, [pc, #104]	; (8007770 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770c:	613b      	str	r3, [r7, #16]
    break;
 800770e:	e002      	b.n	8007716 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
    break;
 8007714:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007716:	4b13      	ldr	r3, [pc, #76]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	091b      	lsrs	r3, r3, #4
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	3301      	adds	r3, #1
 8007722:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	fb03 f202 	mul.w	r2, r3, r2
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	0e5b      	lsrs	r3, r3, #25
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	3301      	adds	r3, #1
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007756:	683b      	ldr	r3, [r7, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40021000 	.word	0x40021000
 8007768:	00f42400 	.word	0x00f42400
 800776c:	007a1200 	.word	0x007a1200
 8007770:	0801787c 	.word	0x0801787c

08007774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800777c:	2300      	movs	r3, #0
 800777e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007780:	2300      	movs	r3, #0
 8007782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778c:	2b00      	cmp	r3, #0
 800778e:	d040      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d02a      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d825      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800779c:	2b60      	cmp	r3, #96	; 0x60
 800779e:	d026      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077a0:	2b60      	cmp	r3, #96	; 0x60
 80077a2:	d821      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	d006      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d81d      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d010      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80077b4:	e018      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077b6:	4b89      	ldr	r3, [pc, #548]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4a88      	ldr	r2, [pc, #544]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077c2:	e015      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fa24 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077d4:	e00c      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3320      	adds	r3, #32
 80077da:	2100      	movs	r1, #0
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 fb0f 	bl	8008e00 <RCCEx_PLLSAI2_Config>
 80077e2:	4603      	mov	r3, r0
 80077e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077e6:	e003      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	74fb      	strb	r3, [r7, #19]
      break;
 80077ec:	e000      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80077ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f0:	7cfb      	ldrb	r3, [r7, #19]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077f6:	4b79      	ldr	r3, [pc, #484]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007804:	4975      	ldr	r1, [pc, #468]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	7cfb      	ldrb	r3, [r7, #19]
 8007810:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d047      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007826:	d030      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782c:	d82a      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800782e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007832:	d02a      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007838:	d824      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800783a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783e:	d008      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d81e      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d010      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007850:	e018      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007852:	4b62      	ldr	r3, [pc, #392]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	4a61      	ldr	r2, [pc, #388]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800785e:	e015      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3304      	adds	r3, #4
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 f9d6 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007870:	e00c      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3320      	adds	r3, #32
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fac1 	bl	8008e00 <RCCEx_PLLSAI2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007882:	e003      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	74fb      	strb	r3, [r7, #19]
      break;
 8007888:	e000      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800788a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788c:	7cfb      	ldrb	r3, [r7, #19]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007892:	4b52      	ldr	r3, [pc, #328]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a0:	494e      	ldr	r1, [pc, #312]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80078a8:	e001      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078aa:	7cfb      	ldrb	r3, [r7, #19]
 80078ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 809f 	beq.w	80079fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078bc:	2300      	movs	r3, #0
 80078be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078c0:	4b46      	ldr	r3, [pc, #280]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00d      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d6:	4b41      	ldr	r3, [pc, #260]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	4a40      	ldr	r2, [pc, #256]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6593      	str	r3, [r2, #88]	; 0x58
 80078e2:	4b3e      	ldr	r3, [pc, #248]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	60bb      	str	r3, [r7, #8]
 80078ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ee:	2301      	movs	r3, #1
 80078f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078f2:	4b3b      	ldr	r3, [pc, #236]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a3a      	ldr	r2, [pc, #232]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80078f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078fe:	f7fc fb2d 	bl	8003f5c <HAL_GetTick>
 8007902:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007904:	e009      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007906:	f7fc fb29 	bl	8003f5c <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d902      	bls.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	74fb      	strb	r3, [r7, #19]
        break;
 8007918:	e005      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0ef      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007926:	7cfb      	ldrb	r3, [r7, #19]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d15b      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007936:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01f      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	429a      	cmp	r2, r3
 8007948:	d019      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800794a:	4b24      	ldr	r3, [pc, #144]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007954:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007956:	4b21      	ldr	r3, [pc, #132]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007966:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796c:	4a1b      	ldr	r2, [pc, #108]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800796e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007976:	4a19      	ldr	r2, [pc, #100]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d016      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7fc fae8 	bl	8003f5c <HAL_GetTick>
 800798c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800798e:	e00b      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007990:	f7fc fae4 	bl	8003f5c <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f241 3288 	movw	r2, #5000	; 0x1388
 800799e:	4293      	cmp	r3, r2
 80079a0:	d902      	bls.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	74fb      	strb	r3, [r7, #19]
            break;
 80079a6:	e006      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079a8:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0ec      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10c      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079bc:	4b07      	ldr	r3, [pc, #28]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	4903      	ldr	r1, [pc, #12]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80079d4:	e008      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079d6:	7cfb      	ldrb	r3, [r7, #19]
 80079d8:	74bb      	strb	r3, [r7, #18]
 80079da:	e005      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80079dc:	40021000 	.word	0x40021000
 80079e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e4:	7cfb      	ldrb	r3, [r7, #19]
 80079e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e8:	7c7b      	ldrb	r3, [r7, #17]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d105      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ee:	4ba0      	ldr	r3, [pc, #640]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	4a9f      	ldr	r2, [pc, #636]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a06:	4b9a      	ldr	r3, [pc, #616]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	f023 0203 	bic.w	r2, r3, #3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	4996      	ldr	r1, [pc, #600]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a28:	4b91      	ldr	r3, [pc, #580]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	f023 020c 	bic.w	r2, r3, #12
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	498e      	ldr	r1, [pc, #568]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a4a:	4b89      	ldr	r3, [pc, #548]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	4985      	ldr	r1, [pc, #532]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a6c:	4b80      	ldr	r3, [pc, #512]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	497d      	ldr	r1, [pc, #500]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a8e:	4b78      	ldr	r3, [pc, #480]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9c:	4974      	ldr	r1, [pc, #464]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ab0:	4b6f      	ldr	r3, [pc, #444]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abe:	496c      	ldr	r1, [pc, #432]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ad2:	4b67      	ldr	r3, [pc, #412]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae0:	4963      	ldr	r1, [pc, #396]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007af4:	4b5e      	ldr	r3, [pc, #376]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b02:	495b      	ldr	r1, [pc, #364]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b16:	4b56      	ldr	r3, [pc, #344]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b24:	4952      	ldr	r1, [pc, #328]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b38:	4b4d      	ldr	r3, [pc, #308]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	494a      	ldr	r1, [pc, #296]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b5a:	4b45      	ldr	r3, [pc, #276]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	4941      	ldr	r1, [pc, #260]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b7c:	4b3c      	ldr	r3, [pc, #240]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b82:	f023 0203 	bic.w	r2, r3, #3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8a:	4939      	ldr	r1, [pc, #228]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d028      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b9e:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bac:	4930      	ldr	r1, [pc, #192]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bbe:	4b2c      	ldr	r3, [pc, #176]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	4a2b      	ldr	r2, [pc, #172]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bc8:	60d3      	str	r3, [r2, #12]
 8007bca:	e011      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	2101      	movs	r1, #1
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f81b 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 8007be2:	4603      	mov	r3, r0
 8007be4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007be6:	7cfb      	ldrb	r3, [r7, #19]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007bec:	7cfb      	ldrb	r3, [r7, #19]
 8007bee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d04d      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c04:	d108      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007c16:	e012      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c1e:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007c28:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c36:	490e      	ldr	r1, [pc, #56]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c46:	d106      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c52:	60d3      	str	r3, [r2, #12]
 8007c54:	e020      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c5e:	d109      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c60:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4a02      	ldr	r2, [pc, #8]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6a:	60d3      	str	r3, [r2, #12]
 8007c6c:	e014      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007c6e:	bf00      	nop
 8007c70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ffc7 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c8e:	7cfb      	ldrb	r3, [r7, #19]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007c94:	7cfb      	ldrb	r3, [r7, #19]
 8007c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d028      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca4:	4b4a      	ldr	r3, [pc, #296]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	4947      	ldr	r1, [pc, #284]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc2:	d106      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc4:	4b42      	ldr	r3, [pc, #264]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a41      	ldr	r2, [pc, #260]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cce:	60d3      	str	r3, [r2, #12]
 8007cd0:	e011      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cda:	d10c      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 ff98 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007cf2:	7cfb      	ldrb	r3, [r7, #19]
 8007cf4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01e      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d02:	4b33      	ldr	r3, [pc, #204]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d12:	492f      	ldr	r1, [pc, #188]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 ff73 	bl	8008c18 <RCCEx_PLLSAI1_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d4c:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d52:	f023 0204 	bic.w	r2, r3, #4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5c:	491c      	ldr	r1, [pc, #112]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007d70:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d76:	f023 0218 	bic.w	r2, r3, #24
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d80:	4913      	ldr	r1, [pc, #76]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d017      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007d94:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da4:	490a      	ldr	r1, [pc, #40]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007db6:	d105      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	4a04      	ldr	r2, [pc, #16]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007dc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40021000 	.word	0x40021000

08007dd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de6:	d13e      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007de8:	4bb6      	ldr	r3, [pc, #728]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dfa:	d028      	beq.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e02:	f200 86f4 	bhi.w	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0c:	d005      	beq.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d00e      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007e16:	f000 beea 	b.w	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e1a:	4baa      	ldr	r3, [pc, #680]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	f040 86e4 	bne.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2e:	61fb      	str	r3, [r7, #28]
      break;
 8007e30:	f000 bedf 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e34:	4ba3      	ldr	r3, [pc, #652]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	f040 86d9 	bne.w	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8007e44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e48:	61fb      	str	r3, [r7, #28]
      break;
 8007e4a:	f000 bed4 	b.w	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e4e:	4b9d      	ldr	r3, [pc, #628]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e5a:	f040 86ce 	bne.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8007e5e:	4b9a      	ldr	r3, [pc, #616]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007e60:	61fb      	str	r3, [r7, #28]
      break;
 8007e62:	f000 beca 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e66:	4b97      	ldr	r3, [pc, #604]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d036      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d840      	bhi.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d003      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d020      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007e88:	e039      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e8a:	4b8e      	ldr	r3, [pc, #568]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d116      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e96:	4b8b      	ldr	r3, [pc, #556]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007ea2:	4b88      	ldr	r3, [pc, #544]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	e005      	b.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007eae:	4b85      	ldr	r3, [pc, #532]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb4:	0a1b      	lsrs	r3, r3, #8
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	4a84      	ldr	r2, [pc, #528]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007ec2:	e01f      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61bb      	str	r3, [r7, #24]
      break;
 8007ec8:	e01c      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eca:	4b7e      	ldr	r3, [pc, #504]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007ed8:	4b7d      	ldr	r3, [pc, #500]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007eda:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007edc:	e012      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61bb      	str	r3, [r7, #24]
      break;
 8007ee2:	e00f      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ee4:	4b77      	ldr	r3, [pc, #476]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef0:	d102      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007ef2:	4b78      	ldr	r3, [pc, #480]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007ef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007ef6:	e005      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
      break;
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61bb      	str	r3, [r7, #24]
      break;
 8007f02:	bf00      	nop
    }

    switch(PeriphClk)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f0a:	f000 8606 	beq.w	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f14:	f200 8673 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f1e:	f000 8469 	beq.w	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f28:	f200 8669 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f32:	f000 8531 	beq.w	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3c:	f200 865f 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f46:	f000 8187 	beq.w	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f50:	f200 8655 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f5a:	f000 80cd 	beq.w	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f64:	f200 864b 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6e:	f000 8430 	beq.w	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	f200 8641 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f82:	f000 83e4 	beq.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f8c:	f200 8637 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f96:	f000 80af 	beq.w	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa0:	f200 862d 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	f000 809d 	beq.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	f200 8623 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	f000 808b 	beq.w	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc8:	f200 8619 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	f000 8554 	beq.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fdc:	f200 860f 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe6:	f000 8500 	beq.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff0:	f200 8605 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffa:	f000 84a1 	beq.w	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008004:	f200 85fb 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b80      	cmp	r3, #128	; 0x80
 800800c:	f000 846c 	beq.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	f200 85f3 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b20      	cmp	r3, #32
 800801c:	d84c      	bhi.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 85ec 	beq.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3b01      	subs	r3, #1
 800802a:	2b1f      	cmp	r3, #31
 800802c:	f200 85e7 	bhi.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800844d 	.word	0x0800844d
 800803c:	080084bb 	.word	0x080084bb
 8008040:	08008bff 	.word	0x08008bff
 8008044:	0800854f 	.word	0x0800854f
 8008048:	08008bff 	.word	0x08008bff
 800804c:	08008bff 	.word	0x08008bff
 8008050:	08008bff 	.word	0x08008bff
 8008054:	080085c7 	.word	0x080085c7
 8008058:	08008bff 	.word	0x08008bff
 800805c:	08008bff 	.word	0x08008bff
 8008060:	08008bff 	.word	0x08008bff
 8008064:	08008bff 	.word	0x08008bff
 8008068:	08008bff 	.word	0x08008bff
 800806c:	08008bff 	.word	0x08008bff
 8008070:	08008bff 	.word	0x08008bff
 8008074:	0800864b 	.word	0x0800864b
 8008078:	08008bff 	.word	0x08008bff
 800807c:	08008bff 	.word	0x08008bff
 8008080:	08008bff 	.word	0x08008bff
 8008084:	08008bff 	.word	0x08008bff
 8008088:	08008bff 	.word	0x08008bff
 800808c:	08008bff 	.word	0x08008bff
 8008090:	08008bff 	.word	0x08008bff
 8008094:	08008bff 	.word	0x08008bff
 8008098:	08008bff 	.word	0x08008bff
 800809c:	08008bff 	.word	0x08008bff
 80080a0:	08008bff 	.word	0x08008bff
 80080a4:	08008bff 	.word	0x08008bff
 80080a8:	08008bff 	.word	0x08008bff
 80080ac:	08008bff 	.word	0x08008bff
 80080b0:	08008bff 	.word	0x08008bff
 80080b4:	080086cd 	.word	0x080086cd
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	f000 83e8 	beq.w	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80080c0:	f000 bd9d 	b.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80080c4:	40021000 	.word	0x40021000
 80080c8:	0003d090 	.word	0x0003d090
 80080cc:	0801787c 	.word	0x0801787c
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80080d8:	69b9      	ldr	r1, [r7, #24]
 80080da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80080de:	f000 ff83 	bl	8008fe8 <RCCEx_GetSAIxPeriphCLKFreq>
 80080e2:	61f8      	str	r0, [r7, #28]
      break;
 80080e4:	f000 bd8e 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80080e8:	69b9      	ldr	r1, [r7, #24]
 80080ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80080ee:	f000 ff7b 	bl	8008fe8 <RCCEx_GetSAIxPeriphCLKFreq>
 80080f2:	61f8      	str	r0, [r7, #28]
      break;
 80080f4:	f000 bd86 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80080f8:	4b9a      	ldr	r3, [pc, #616]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800810a:	d015      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008112:	f200 8092 	bhi.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811c:	d029      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008124:	f200 8089 	bhi.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d07b      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008134:	d04a      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8008136:	e080      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008138:	4b8a      	ldr	r3, [pc, #552]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b02      	cmp	r3, #2
 8008142:	d17d      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008144:	4b87      	ldr	r3, [pc, #540]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8008150:	4b84      	ldr	r3, [pc, #528]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	e005      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800815c:	4b81      	ldr	r3, [pc, #516]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800815e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	4a7f      	ldr	r2, [pc, #508]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800816e:	61fb      	str	r3, [r7, #28]
          break;
 8008170:	e066      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008172:	4b7c      	ldr	r3, [pc, #496]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800817e:	d162      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008180:	4b78      	ldr	r3, [pc, #480]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818c:	d15b      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800818e:	4b75      	ldr	r3, [pc, #468]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008198:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	fb03 f202 	mul.w	r2, r3, r2
 80081a2:	4b70      	ldr	r3, [pc, #448]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	3301      	adds	r3, #1
 80081ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80081b4:	4b6b      	ldr	r3, [pc, #428]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	0d5b      	lsrs	r3, r3, #21
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	3301      	adds	r3, #1
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	61fb      	str	r3, [r7, #28]
          break;
 80081ca:	e03c      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80081cc:	4b65      	ldr	r3, [pc, #404]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d8:	d138      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80081da:	4b62      	ldr	r3, [pc, #392]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e6:	d131      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80081e8:	4b5e      	ldr	r3, [pc, #376]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	fb03 f202 	mul.w	r2, r3, r2
 80081fc:	4b59      	ldr	r3, [pc, #356]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	3301      	adds	r3, #1
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800820e:	4b55      	ldr	r3, [pc, #340]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	0d5b      	lsrs	r3, r3, #21
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	3301      	adds	r3, #1
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	61fb      	str	r3, [r7, #28]
          break;
 8008224:	e012      	b.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008226:	4b4f      	ldr	r3, [pc, #316]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d10e      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008236:	61fb      	str	r3, [r7, #28]
          break;
 8008238:	e00b      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800823a:	bf00      	nop
 800823c:	f000 bce2 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008240:	bf00      	nop
 8008242:	f000 bcdf 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008246:	bf00      	nop
 8008248:	f000 bcdc 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800824c:	bf00      	nop
 800824e:	f000 bcd9 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008252:	bf00      	nop
        break;
 8008254:	f000 bcd6 	b.w	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8008258:	4b42      	ldr	r3, [pc, #264]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800825a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800825e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008266:	d13d      	bne.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008268:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008274:	f040 84c5 	bne.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8008278:	4b3a      	ldr	r3, [pc, #232]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008284:	f040 84bd 	bne.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008288:	4b36      	ldr	r3, [pc, #216]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	0a1b      	lsrs	r3, r3, #8
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	fb03 f202 	mul.w	r2, r3, r2
 800829c:	4b31      	ldr	r3, [pc, #196]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	3301      	adds	r3, #1
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80082ae:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	0edb      	lsrs	r3, r3, #27
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80082c0:	4b28      	ldr	r3, [pc, #160]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80082cc:	2311      	movs	r3, #17
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e001      	b.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80082d2:	2307      	movs	r3, #7
 80082d4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	fbb2 f3f3 	udiv	r3, r2, r3
 80082de:	61fb      	str	r3, [r7, #28]
      break;
 80082e0:	f000 bc8f 	b.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80082e4:	4b1f      	ldr	r3, [pc, #124]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80082f6:	d016      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80082fe:	f200 809b 	bhi.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008308:	d032      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008310:	f200 8092 	bhi.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 8084 	beq.w	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008322:	d052      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8008324:	e088      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	f040 8084 	bne.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008340:	4b08      	ldr	r3, [pc, #32]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	e005      	b.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800834e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008352:	0a1b      	lsrs	r3, r3, #8
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	4a03      	ldr	r2, [pc, #12]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800835a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835e:	61fb      	str	r3, [r7, #28]
          break;
 8008360:	e06c      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8008362:	bf00      	nop
 8008364:	40021000 	.word	0x40021000
 8008368:	0801787c 	.word	0x0801787c
 800836c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008370:	4ba5      	ldr	r3, [pc, #660]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800837c:	d160      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800837e:	4ba2      	ldr	r3, [pc, #648]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800838a:	d159      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800838c:	4b9e      	ldr	r3, [pc, #632]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	fb03 f202 	mul.w	r2, r3, r2
 80083a0:	4b99      	ldr	r3, [pc, #612]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	3301      	adds	r3, #1
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80083b2:	4b95      	ldr	r3, [pc, #596]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	0d5b      	lsrs	r3, r3, #21
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	3301      	adds	r3, #1
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c6:	61fb      	str	r3, [r7, #28]
          break;
 80083c8:	e03a      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80083ca:	4b8f      	ldr	r3, [pc, #572]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d6:	d135      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80083d8:	4b8b      	ldr	r3, [pc, #556]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e4:	d12e      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80083e6:	4b88      	ldr	r3, [pc, #544]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	fb03 f202 	mul.w	r2, r3, r2
 80083fa:	4b83      	ldr	r3, [pc, #524]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	091b      	lsrs	r3, r3, #4
 8008400:	f003 030f 	and.w	r3, r3, #15
 8008404:	3301      	adds	r3, #1
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800840c:	4b7e      	ldr	r3, [pc, #504]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	0d5b      	lsrs	r3, r3, #21
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	3301      	adds	r3, #1
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008420:	61fb      	str	r3, [r7, #28]
          break;
 8008422:	e00f      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008424:	4b78      	ldr	r3, [pc, #480]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b02      	cmp	r3, #2
 8008430:	d10a      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8008432:	4b76      	ldr	r3, [pc, #472]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008434:	61fb      	str	r3, [r7, #28]
          break;
 8008436:	e007      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8008438:	bf00      	nop
 800843a:	e3e2      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800843c:	bf00      	nop
 800843e:	e3e0      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008440:	bf00      	nop
 8008442:	e3de      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008444:	bf00      	nop
 8008446:	e3dc      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008448:	bf00      	nop
      break;
 800844a:	e3da      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800844c:	4b6e      	ldr	r3, [pc, #440]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b03      	cmp	r3, #3
 800845c:	d827      	bhi.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008475 	.word	0x08008475
 8008468:	0800847d 	.word	0x0800847d
 800846c:	08008485 	.word	0x08008485
 8008470:	08008499 	.word	0x08008499
          frequency = HAL_RCC_GetPCLK2Freq();
 8008474:	f7ff f87c 	bl	8007570 <HAL_RCC_GetPCLK2Freq>
 8008478:	61f8      	str	r0, [r7, #28]
          break;
 800847a:	e01d      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800847c:	f7fe ffca 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008480:	61f8      	str	r0, [r7, #28]
          break;
 8008482:	e019      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008484:	4b60      	ldr	r3, [pc, #384]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800848c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008490:	d10f      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8008492:	4b5f      	ldr	r3, [pc, #380]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008494:	61fb      	str	r3, [r7, #28]
          break;
 8008496:	e00c      	b.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008498:	4b5b      	ldr	r3, [pc, #364]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d107      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80084a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084aa:	61fb      	str	r3, [r7, #28]
          break;
 80084ac:	e003      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80084ae:	bf00      	nop
 80084b0:	e3a8      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80084b2:	bf00      	nop
 80084b4:	e3a6      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80084b6:	bf00      	nop
        break;
 80084b8:	e3a4      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80084ba:	4b53      	ldr	r3, [pc, #332]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80084bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c0:	f003 030c 	and.w	r3, r3, #12
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b0c      	cmp	r3, #12
 80084ca:	d83a      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	08008509 	.word	0x08008509
 80084d8:	08008543 	.word	0x08008543
 80084dc:	08008543 	.word	0x08008543
 80084e0:	08008543 	.word	0x08008543
 80084e4:	08008511 	.word	0x08008511
 80084e8:	08008543 	.word	0x08008543
 80084ec:	08008543 	.word	0x08008543
 80084f0:	08008543 	.word	0x08008543
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008543 	.word	0x08008543
 80084fc:	08008543 	.word	0x08008543
 8008500:	08008543 	.word	0x08008543
 8008504:	0800852d 	.word	0x0800852d
          frequency = HAL_RCC_GetPCLK1Freq();
 8008508:	f7ff f81c 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800850c:	61f8      	str	r0, [r7, #28]
          break;
 800850e:	e01d      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8008510:	f7fe ff80 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008514:	61f8      	str	r0, [r7, #28]
          break;
 8008516:	e019      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008518:	4b3b      	ldr	r3, [pc, #236]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008524:	d10f      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8008526:	4b3a      	ldr	r3, [pc, #232]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008528:	61fb      	str	r3, [r7, #28]
          break;
 800852a:	e00c      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800852c:	4b36      	ldr	r3, [pc, #216]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800852e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d107      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800853a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853e:	61fb      	str	r3, [r7, #28]
          break;
 8008540:	e003      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8008542:	bf00      	nop
 8008544:	e35e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008546:	bf00      	nop
 8008548:	e35c      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800854a:	bf00      	nop
        break;
 800854c:	e35a      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800854e:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b30      	cmp	r3, #48	; 0x30
 800855e:	d021      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b30      	cmp	r3, #48	; 0x30
 8008564:	d829      	bhi.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b20      	cmp	r3, #32
 800856a:	d011      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b20      	cmp	r3, #32
 8008570:	d823      	bhi.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b10      	cmp	r3, #16
 800857c:	d004      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800857e:	e01c      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fe ffe0 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 8008584:	61f8      	str	r0, [r7, #28]
          break;
 8008586:	e01d      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008588:	f7fe ff44 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 800858c:	61f8      	str	r0, [r7, #28]
          break;
 800858e:	e019      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008590:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859c:	d10f      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085a0:	61fb      	str	r3, [r7, #28]
          break;
 80085a2:	e00c      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085a4:	4b18      	ldr	r3, [pc, #96]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d107      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80085b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085b6:	61fb      	str	r3, [r7, #28]
          break;
 80085b8:	e003      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80085ba:	bf00      	nop
 80085bc:	e322      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80085be:	bf00      	nop
 80085c0:	e320      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80085c2:	bf00      	nop
        break;
 80085c4:	e31e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80085c6:	4b10      	ldr	r3, [pc, #64]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2bc0      	cmp	r3, #192	; 0xc0
 80085d6:	d027      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2bc0      	cmp	r3, #192	; 0xc0
 80085dc:	d82f      	bhi.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d017      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d829      	bhi.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d004      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80085f6:	e022      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085f8:	f7fe ffa4 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 80085fc:	61f8      	str	r0, [r7, #28]
          break;
 80085fe:	e023      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8008600:	f7fe ff08 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008604:	61f8      	str	r0, [r7, #28]
          break;
 8008606:	e01f      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8008608:	40021000 	.word	0x40021000
 800860c:	02dc6c00 	.word	0x02dc6c00
 8008610:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008614:	4b9b      	ldr	r3, [pc, #620]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800861c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008620:	d10f      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8008622:	4b99      	ldr	r3, [pc, #612]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008624:	61fb      	str	r3, [r7, #28]
          break;
 8008626:	e00c      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008628:	4b96      	ldr	r3, [pc, #600]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d107      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8008636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863a:	61fb      	str	r3, [r7, #28]
          break;
 800863c:	e003      	b.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800863e:	bf00      	nop
 8008640:	e2e0      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008642:	bf00      	nop
 8008644:	e2de      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008646:	bf00      	nop
        break;
 8008648:	e2dc      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800864a:	4b8e      	ldr	r3, [pc, #568]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865c:	d025      	beq.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008664:	d82c      	bhi.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866c:	d013      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008674:	d824      	bhi.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008682:	d004      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8008684:	e01c      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008686:	f7fe ff5d 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800868a:	61f8      	str	r0, [r7, #28]
          break;
 800868c:	e01d      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800868e:	f7fe fec1 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008692:	61f8      	str	r0, [r7, #28]
          break;
 8008694:	e019      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008696:	4b7b      	ldr	r3, [pc, #492]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a2:	d10f      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80086a4:	4b78      	ldr	r3, [pc, #480]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80086a6:	61fb      	str	r3, [r7, #28]
          break;
 80086a8:	e00c      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086aa:	4b76      	ldr	r3, [pc, #472]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d107      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80086b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086bc:	61fb      	str	r3, [r7, #28]
          break;
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80086c0:	bf00      	nop
 80086c2:	e29f      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80086c4:	bf00      	nop
 80086c6:	e29d      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80086c8:	bf00      	nop
        break;
 80086ca:	e29b      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80086cc:	4b6d      	ldr	r3, [pc, #436]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086de:	d025      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086e6:	d82c      	bhi.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ee:	d013      	beq.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f6:	d824      	bhi.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008704:	d004      	beq.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8008706:	e01c      	b.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008708:	f7fe ff1c 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800870c:	61f8      	str	r0, [r7, #28]
          break;
 800870e:	e01d      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8008710:	f7fe fe80 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008714:	61f8      	str	r0, [r7, #28]
          break;
 8008716:	e019      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008718:	4b5a      	ldr	r3, [pc, #360]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008724:	d10f      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8008726:	4b58      	ldr	r3, [pc, #352]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008728:	61fb      	str	r3, [r7, #28]
          break;
 800872a:	e00c      	b.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800872c:	4b55      	ldr	r3, [pc, #340]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d107      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873e:	61fb      	str	r3, [r7, #28]
          break;
 8008740:	e003      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8008742:	bf00      	nop
 8008744:	e25e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008746:	bf00      	nop
 8008748:	e25c      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800874a:	bf00      	nop
        break;
 800874c:	e25a      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800874e:	4b4d      	ldr	r3, [pc, #308]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008760:	d007      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008768:	d12f      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800876a:	f7fe fe53 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 800876e:	61f8      	str	r0, [r7, #28]
          break;
 8008770:	e02e      	b.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008772:	4b44      	ldr	r3, [pc, #272]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800877e:	d126      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008780:	4b40      	ldr	r3, [pc, #256]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d020      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800878c:	4b3d      	ldr	r3, [pc, #244]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	fb03 f202 	mul.w	r2, r3, r2
 80087a0:	4b38      	ldr	r3, [pc, #224]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	3301      	adds	r3, #1
 80087ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80087b2:	4b34      	ldr	r3, [pc, #208]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	0e5b      	lsrs	r3, r3, #25
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	3301      	adds	r3, #1
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c6:	61fb      	str	r3, [r7, #28]
          break;
 80087c8:	e001      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80087ca:	bf00      	nop
 80087cc:	e21a      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80087ce:	bf00      	nop
        break;
 80087d0:	e218      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80087d2:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d103      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80087e4:	f7fe fec4 	bl	8007570 <HAL_RCC_GetPCLK2Freq>
 80087e8:	61f8      	str	r0, [r7, #28]
        break;
 80087ea:	e20b      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80087ec:	f7fe fe12 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 80087f0:	61f8      	str	r0, [r7, #28]
        break;
 80087f2:	e207      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80087f4:	4b23      	ldr	r3, [pc, #140]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80087f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087fa:	f003 0318 	and.w	r3, r3, #24
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b10      	cmp	r3, #16
 8008804:	d010      	beq.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b10      	cmp	r3, #16
 800880a:	d834      	bhi.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b08      	cmp	r3, #8
 8008816:	d024      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8008818:	e02d      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008820:	f000 fbe2 	bl	8008fe8 <RCCEx_GetSAIxPeriphCLKFreq>
 8008824:	61f8      	str	r0, [r7, #28]
          break;
 8008826:	e02b      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008828:	4b16      	ldr	r3, [pc, #88]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b02      	cmp	r3, #2
 8008832:	d122      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008834:	4b13      	ldr	r3, [pc, #76]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8008840:	4b10      	ldr	r3, [pc, #64]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	091b      	lsrs	r3, r3, #4
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	e005      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800884c:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800884e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	4a0c      	ldr	r2, [pc, #48]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800885a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885e:	61fb      	str	r3, [r7, #28]
          break;
 8008860:	e00b      	b.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800886a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886e:	d106      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008872:	61fb      	str	r3, [r7, #28]
          break;
 8008874:	e003      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8008876:	bf00      	nop
 8008878:	e1c4      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800887a:	bf00      	nop
 800887c:	e1c2      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800887e:	bf00      	nop
        break;
 8008880:	e1c0      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8008882:	bf00      	nop
 8008884:	40021000 	.word	0x40021000
 8008888:	00f42400 	.word	0x00f42400
 800888c:	0801787c 	.word	0x0801787c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008890:	4b96      	ldr	r3, [pc, #600]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008896:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a2:	d013      	beq.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088aa:	d819      	bhi.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d004      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80088ba:	e011      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80088bc:	f7fe fe42 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 80088c0:	61f8      	str	r0, [r7, #28]
          break;
 80088c2:	e010      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80088c4:	f7fe fda6 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 80088c8:	61f8      	str	r0, [r7, #28]
          break;
 80088ca:	e00c      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088cc:	4b87      	ldr	r3, [pc, #540]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d8:	d104      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80088da:	4b85      	ldr	r3, [pc, #532]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80088dc:	61fb      	str	r3, [r7, #28]
          break;
 80088de:	e001      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80088e0:	bf00      	nop
 80088e2:	e18f      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80088e4:	bf00      	nop
        break;
 80088e6:	e18d      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80088e8:	4b80      	ldr	r3, [pc, #512]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fa:	d013      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008902:	d819      	bhi.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008910:	d004      	beq.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8008912:	e011      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008914:	f7fe fe16 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 8008918:	61f8      	str	r0, [r7, #28]
          break;
 800891a:	e010      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800891c:	f7fe fd7a 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008920:	61f8      	str	r0, [r7, #28]
          break;
 8008922:	e00c      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008924:	4b71      	ldr	r3, [pc, #452]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008930:	d104      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8008932:	4b6f      	ldr	r3, [pc, #444]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008934:	61fb      	str	r3, [r7, #28]
          break;
 8008936:	e001      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8008938:	bf00      	nop
 800893a:	e163      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800893c:	bf00      	nop
        break;
 800893e:	e161      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008940:	4b6a      	ldr	r3, [pc, #424]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008952:	d013      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800895a:	d819      	bhi.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008968:	d004      	beq.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800896a:	e011      	b.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fe fdea 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 8008970:	61f8      	str	r0, [r7, #28]
          break;
 8008972:	e010      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008974:	f7fe fd4e 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008978:	61f8      	str	r0, [r7, #28]
          break;
 800897a:	e00c      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800897c:	4b5b      	ldr	r3, [pc, #364]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008988:	d104      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800898a:	4b59      	ldr	r3, [pc, #356]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800898c:	61fb      	str	r3, [r7, #28]
          break;
 800898e:	e001      	b.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8008990:	bf00      	nop
 8008992:	e137      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008994:	bf00      	nop
        break;
 8008996:	e135      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008998:	4b54      	ldr	r3, [pc, #336]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800899a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d011      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d818      	bhi.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d004      	beq.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80089bc:	e011      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80089be:	f7fe fdc1 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 80089c2:	61f8      	str	r0, [r7, #28]
          break;
 80089c4:	e010      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80089c6:	f7fe fd25 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 80089ca:	61f8      	str	r0, [r7, #28]
          break;
 80089cc:	e00c      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089ce:	4b47      	ldr	r3, [pc, #284]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089da:	d104      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80089dc:	4b44      	ldr	r3, [pc, #272]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80089de:	61fb      	str	r3, [r7, #28]
          break;
 80089e0:	e001      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80089e2:	bf00      	nop
 80089e4:	e10e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80089e6:	bf00      	nop
        break;
 80089e8:	e10c      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80089ea:	4b40      	ldr	r3, [pc, #256]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80089fc:	d02c      	beq.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a04:	d833      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a0c:	d01a      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a14:	d82b      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a22:	d004      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8008a24:	e023      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a26:	f7fe fd8d 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 8008a2a:	61f8      	str	r0, [r7, #28]
          break;
 8008a2c:	e026      	b.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008a2e:	4b2f      	ldr	r3, [pc, #188]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d11a      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8008a3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a40:	61fb      	str	r3, [r7, #28]
          break;
 8008a42:	e016      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a44:	4b29      	ldr	r3, [pc, #164]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a50:	d111      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8008a52:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008a54:	61fb      	str	r3, [r7, #28]
          break;
 8008a56:	e00e      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a58:	4b24      	ldr	r3, [pc, #144]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d109      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	61fb      	str	r3, [r7, #28]
          break;
 8008a6c:	e005      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8008a6e:	bf00      	nop
 8008a70:	e0c8      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008a72:	bf00      	nop
 8008a74:	e0c6      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008a76:	bf00      	nop
 8008a78:	e0c4      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008a7a:	bf00      	nop
        break;
 8008a7c:	e0c2      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a90:	d030      	beq.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a98:	d837      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa0:	d01a      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa8:	d82f      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab6:	d004      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8008ab8:	e027      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008aba:	f7fe fd43 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 8008abe:	61f8      	str	r0, [r7, #28]
          break;
 8008ac0:	e02a      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d11e      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8008ad0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ad4:	61fb      	str	r3, [r7, #28]
          break;
 8008ad6:	e01a      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ad8:	4b04      	ldr	r3, [pc, #16]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae4:	d115      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8008ae6:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008ae8:	61fb      	str	r3, [r7, #28]
          break;
 8008aea:	e012      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008aec:	40021000 	.word	0x40021000
 8008af0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008af4:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d109      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8008b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b06:	61fb      	str	r3, [r7, #28]
          break;
 8008b08:	e005      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8008b0a:	bf00      	nop
 8008b0c:	e07a      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b0e:	bf00      	nop
 8008b10:	e078      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b12:	bf00      	nop
 8008b14:	e076      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008b16:	bf00      	nop
        break;
 8008b18:	e074      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008b1a:	4b3d      	ldr	r3, [pc, #244]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b2c:	d02c      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b34:	d855      	bhi.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d004      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8008b44:	e04d      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b46:	f7fe fc65 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 8008b4a:	61f8      	str	r0, [r7, #28]
          break;
 8008b4c:	e04e      	b.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008b4e:	4b30      	ldr	r3, [pc, #192]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d145      	bne.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008b5a:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	091b      	lsrs	r3, r3, #4
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	e005      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8008b72:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b78:	0a1b      	lsrs	r3, r3, #8
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	4a25      	ldr	r2, [pc, #148]	; (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8008b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b84:	61fb      	str	r3, [r7, #28]
          break;
 8008b86:	e02e      	b.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008b88:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b94:	d129      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008b96:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ba2:	d122      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	fb03 f202 	mul.w	r2, r3, r2
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	0d5b      	lsrs	r3, r3, #21
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bde:	61fb      	str	r3, [r7, #28]
          break;
 8008be0:	e003      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8008be2:	bf00      	nop
 8008be4:	e00e      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008be6:	bf00      	nop
 8008be8:	e00c      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008bea:	bf00      	nop
        break;
 8008bec:	e00a      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008bee:	bf00      	nop
 8008bf0:	e008      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008bf2:	bf00      	nop
 8008bf4:	e006      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008bf6:	bf00      	nop
 8008bf8:	e004      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008bfa:	bf00      	nop
 8008bfc:	e002      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e000      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008c02:	bf00      	nop
    }
  }

  return(frequency);
 8008c04:	69fb      	ldr	r3, [r7, #28]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40021000 	.word	0x40021000
 8008c14:	0801787c 	.word	0x0801787c

08008c18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c26:	4b72      	ldr	r3, [pc, #456]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00e      	beq.n	8008c50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008c32:	4b6f      	ldr	r3, [pc, #444]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f003 0203 	and.w	r2, r3, #3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d103      	bne.n	8008c4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
       ||
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d142      	bne.n	8008cd0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
 8008c4e:	e03f      	b.n	8008cd0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d018      	beq.n	8008c8a <RCCEx_PLLSAI1_Config+0x72>
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d825      	bhi.n	8008ca8 <RCCEx_PLLSAI1_Config+0x90>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d002      	beq.n	8008c66 <RCCEx_PLLSAI1_Config+0x4e>
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d009      	beq.n	8008c78 <RCCEx_PLLSAI1_Config+0x60>
 8008c64:	e020      	b.n	8008ca8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c66:	4b62      	ldr	r3, [pc, #392]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11d      	bne.n	8008cae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c76:	e01a      	b.n	8008cae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c78:	4b5d      	ldr	r3, [pc, #372]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d116      	bne.n	8008cb2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c88:	e013      	b.n	8008cb2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c8a:	4b59      	ldr	r3, [pc, #356]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10f      	bne.n	8008cb6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c96:	4b56      	ldr	r3, [pc, #344]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ca6:	e006      	b.n	8008cb6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
      break;
 8008cac:	e004      	b.n	8008cb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cae:	bf00      	nop
 8008cb0:	e002      	b.n	8008cb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cb2:	bf00      	nop
 8008cb4:	e000      	b.n	8008cb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d108      	bne.n	8008cd0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008cbe:	4b4c      	ldr	r3, [pc, #304]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f023 0203 	bic.w	r2, r3, #3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4949      	ldr	r1, [pc, #292]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 8086 	bne.w	8008de4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008cd8:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a44      	ldr	r2, [pc, #272]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce4:	f7fb f93a 	bl	8003f5c <HAL_GetTick>
 8008ce8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008cea:	e009      	b.n	8008d00 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008cec:	f7fb f936 	bl	8003f5c <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d902      	bls.n	8008d00 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8008cfe:	e005      	b.n	8008d0c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d00:	4b3b      	ldr	r3, [pc, #236]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1ef      	bne.n	8008cec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d168      	bne.n	8008de4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d113      	bne.n	8008d40 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d18:	4b35      	ldr	r3, [pc, #212]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	4b35      	ldr	r3, [pc, #212]	; (8008df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6892      	ldr	r2, [r2, #8]
 8008d24:	0211      	lsls	r1, r2, #8
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68d2      	ldr	r2, [r2, #12]
 8008d2a:	06d2      	lsls	r2, r2, #27
 8008d2c:	4311      	orrs	r1, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6852      	ldr	r2, [r2, #4]
 8008d32:	3a01      	subs	r2, #1
 8008d34:	0112      	lsls	r2, r2, #4
 8008d36:	430a      	orrs	r2, r1
 8008d38:	492d      	ldr	r1, [pc, #180]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	610b      	str	r3, [r1, #16]
 8008d3e:	e02d      	b.n	8008d9c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d115      	bne.n	8008d72 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d46:	4b2a      	ldr	r3, [pc, #168]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d48:	691a      	ldr	r2, [r3, #16]
 8008d4a:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6892      	ldr	r2, [r2, #8]
 8008d52:	0211      	lsls	r1, r2, #8
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6912      	ldr	r2, [r2, #16]
 8008d58:	0852      	lsrs	r2, r2, #1
 8008d5a:	3a01      	subs	r2, #1
 8008d5c:	0552      	lsls	r2, r2, #21
 8008d5e:	4311      	orrs	r1, r2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6852      	ldr	r2, [r2, #4]
 8008d64:	3a01      	subs	r2, #1
 8008d66:	0112      	lsls	r2, r2, #4
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	4921      	ldr	r1, [pc, #132]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	610b      	str	r3, [r1, #16]
 8008d70:	e014      	b.n	8008d9c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d72:	4b1f      	ldr	r3, [pc, #124]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6892      	ldr	r2, [r2, #8]
 8008d7e:	0211      	lsls	r1, r2, #8
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6952      	ldr	r2, [r2, #20]
 8008d84:	0852      	lsrs	r2, r2, #1
 8008d86:	3a01      	subs	r2, #1
 8008d88:	0652      	lsls	r2, r2, #25
 8008d8a:	4311      	orrs	r1, r2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6852      	ldr	r2, [r2, #4]
 8008d90:	3a01      	subs	r2, #1
 8008d92:	0112      	lsls	r2, r2, #4
 8008d94:	430a      	orrs	r2, r1
 8008d96:	4916      	ldr	r1, [pc, #88]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d9c:	4b14      	ldr	r3, [pc, #80]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a13      	ldr	r2, [pc, #76]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da8:	f7fb f8d8 	bl	8003f5c <HAL_GetTick>
 8008dac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008dae:	e009      	b.n	8008dc4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008db0:	f7fb f8d4 	bl	8003f5c <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d902      	bls.n	8008dc4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	73fb      	strb	r3, [r7, #15]
          break;
 8008dc2:	e005      	b.n	8008dd0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0ef      	beq.n	8008db0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008dd6:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	4904      	ldr	r1, [pc, #16]	; (8008df0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40021000 	.word	0x40021000
 8008df4:	07ff800f 	.word	0x07ff800f
 8008df8:	ff9f800f 	.word	0xff9f800f
 8008dfc:	f9ff800f 	.word	0xf9ff800f

08008e00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e0e:	4b72      	ldr	r3, [pc, #456]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008e1a:	4b6f      	ldr	r3, [pc, #444]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f003 0203 	and.w	r2, r3, #3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d103      	bne.n	8008e32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d142      	bne.n	8008eb8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
 8008e36:	e03f      	b.n	8008eb8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d018      	beq.n	8008e72 <RCCEx_PLLSAI2_Config+0x72>
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d825      	bhi.n	8008e90 <RCCEx_PLLSAI2_Config+0x90>
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d002      	beq.n	8008e4e <RCCEx_PLLSAI2_Config+0x4e>
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d009      	beq.n	8008e60 <RCCEx_PLLSAI2_Config+0x60>
 8008e4c:	e020      	b.n	8008e90 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008e4e:	4b62      	ldr	r3, [pc, #392]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d11d      	bne.n	8008e96 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e5e:	e01a      	b.n	8008e96 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e60:	4b5d      	ldr	r3, [pc, #372]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d116      	bne.n	8008e9a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e70:	e013      	b.n	8008e9a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e72:	4b59      	ldr	r3, [pc, #356]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10f      	bne.n	8008e9e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e7e:	4b56      	ldr	r3, [pc, #344]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e8e:	e006      	b.n	8008e9e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
      break;
 8008e94:	e004      	b.n	8008ea0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d108      	bne.n	8008eb8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008ea6:	4b4c      	ldr	r3, [pc, #304]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f023 0203 	bic.w	r2, r3, #3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4949      	ldr	r1, [pc, #292]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 8086 	bne.w	8008fcc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008ec0:	4b45      	ldr	r3, [pc, #276]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a44      	ldr	r2, [pc, #272]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ecc:	f7fb f846 	bl	8003f5c <HAL_GetTick>
 8008ed0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ed2:	e009      	b.n	8008ee8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ed4:	f7fb f842 	bl	8003f5c <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d902      	bls.n	8008ee8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ee6:	e005      	b.n	8008ef4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ee8:	4b3b      	ldr	r3, [pc, #236]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1ef      	bne.n	8008ed4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d168      	bne.n	8008fcc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d113      	bne.n	8008f28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f00:	4b35      	ldr	r3, [pc, #212]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f02:	695a      	ldr	r2, [r3, #20]
 8008f04:	4b35      	ldr	r3, [pc, #212]	; (8008fdc <RCCEx_PLLSAI2_Config+0x1dc>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6892      	ldr	r2, [r2, #8]
 8008f0c:	0211      	lsls	r1, r2, #8
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	68d2      	ldr	r2, [r2, #12]
 8008f12:	06d2      	lsls	r2, r2, #27
 8008f14:	4311      	orrs	r1, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6852      	ldr	r2, [r2, #4]
 8008f1a:	3a01      	subs	r2, #1
 8008f1c:	0112      	lsls	r2, r2, #4
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	492d      	ldr	r1, [pc, #180]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	614b      	str	r3, [r1, #20]
 8008f26:	e02d      	b.n	8008f84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d115      	bne.n	8008f5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	4b2b      	ldr	r3, [pc, #172]	; (8008fe0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	6892      	ldr	r2, [r2, #8]
 8008f3a:	0211      	lsls	r1, r2, #8
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6912      	ldr	r2, [r2, #16]
 8008f40:	0852      	lsrs	r2, r2, #1
 8008f42:	3a01      	subs	r2, #1
 8008f44:	0552      	lsls	r2, r2, #21
 8008f46:	4311      	orrs	r1, r2
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6852      	ldr	r2, [r2, #4]
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	0112      	lsls	r2, r2, #4
 8008f50:	430a      	orrs	r2, r1
 8008f52:	4921      	ldr	r1, [pc, #132]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	614b      	str	r3, [r1, #20]
 8008f58:	e014      	b.n	8008f84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f5a:	4b1f      	ldr	r3, [pc, #124]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6892      	ldr	r2, [r2, #8]
 8008f66:	0211      	lsls	r1, r2, #8
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6952      	ldr	r2, [r2, #20]
 8008f6c:	0852      	lsrs	r2, r2, #1
 8008f6e:	3a01      	subs	r2, #1
 8008f70:	0652      	lsls	r2, r2, #25
 8008f72:	4311      	orrs	r1, r2
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6852      	ldr	r2, [r2, #4]
 8008f78:	3a01      	subs	r2, #1
 8008f7a:	0112      	lsls	r2, r2, #4
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	4916      	ldr	r1, [pc, #88]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008f84:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f90:	f7fa ffe4 	bl	8003f5c <HAL_GetTick>
 8008f94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f96:	e009      	b.n	8008fac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f98:	f7fa ffe0 	bl	8003f5c <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d902      	bls.n	8008fac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
          break;
 8008faa:	e005      	b.n	8008fb8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0ef      	beq.n	8008f98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fc0:	695a      	ldr	r2, [r3, #20]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	4904      	ldr	r1, [pc, #16]	; (8008fd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40021000 	.word	0x40021000
 8008fdc:	07ff800f 	.word	0x07ff800f
 8008fe0:	ff9f800f 	.word	0xff9f800f
 8008fe4:	f9ff800f 	.word	0xf9ff800f

08008fe8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009004:	d10b      	bne.n	800901e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009006:	4b7e      	ldr	r3, [pc, #504]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800900c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009010:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b60      	cmp	r3, #96	; 0x60
 8009016:	d112      	bne.n	800903e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009018:	4b7a      	ldr	r3, [pc, #488]	; (8009204 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e00f      	b.n	800903e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009024:	d10b      	bne.n	800903e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009026:	4b76      	ldr	r3, [pc, #472]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800902c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009030:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009038:	d101      	bne.n	800903e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800903a:	4b72      	ldr	r3, [pc, #456]	; (8009204 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800903c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 80d6 	bne.w	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d003      	beq.n	8009058 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009056:	d13b      	bne.n	80090d0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009058:	4b69      	ldr	r3, [pc, #420]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009064:	f040 80c4 	bne.w	80091f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8009068:	4b65      	ldr	r3, [pc, #404]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80bd 	beq.w	80091f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009076:	4b62      	ldr	r3, [pc, #392]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	091b      	lsrs	r3, r3, #4
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	3301      	adds	r3, #1
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	fbb2 f3f3 	udiv	r3, r2, r3
 8009088:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800908a:	4b5d      	ldr	r3, [pc, #372]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009094:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009096:	4b5a      	ldr	r3, [pc, #360]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	0edb      	lsrs	r3, r3, #27
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80090a8:	4b55      	ldr	r3, [pc, #340]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80090b4:	2311      	movs	r3, #17
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e001      	b.n	80090be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80090ba:	2307      	movs	r3, #7
 80090bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	fb03 f202 	mul.w	r2, r3, r2
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090cc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80090ce:	e08f      	b.n	80091f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d13a      	bne.n	800914c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80090d6:	4b4a      	ldr	r3, [pc, #296]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e2:	f040 8086 	bne.w	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80090e6:	4b46      	ldr	r3, [pc, #280]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d07f      	beq.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80090f2:	4b43      	ldr	r3, [pc, #268]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	f003 030f 	and.w	r3, r3, #15
 80090fc:	3301      	adds	r3, #1
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	fbb2 f3f3 	udiv	r3, r2, r3
 8009104:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009106:	4b3e      	ldr	r3, [pc, #248]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009110:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009112:	4b3b      	ldr	r3, [pc, #236]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	0edb      	lsrs	r3, r3, #27
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009124:	4b36      	ldr	r3, [pc, #216]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8009130:	2311      	movs	r3, #17
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e001      	b.n	800913a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8009136:	2307      	movs	r3, #7
 8009138:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	fb03 f202 	mul.w	r2, r3, r2
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	fbb2 f3f3 	udiv	r3, r2, r3
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e052      	b.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b80      	cmp	r3, #128	; 0x80
 8009150:	d003      	beq.n	800915a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009158:	d109      	bne.n	800916e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800915a:	4b29      	ldr	r3, [pc, #164]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009166:	d144      	bne.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800916a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800916c:	e041      	b.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b20      	cmp	r3, #32
 8009172:	d003      	beq.n	800917c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917a:	d13a      	bne.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800917c:	4b20      	ldr	r3, [pc, #128]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009188:	d133      	bne.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d02d      	beq.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	091b      	lsrs	r3, r3, #4
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	3301      	adds	r3, #1
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	0a1b      	lsrs	r3, r3, #8
 80091b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	0edb      	lsrs	r3, r3, #27
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80091c8:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80091d4:	2311      	movs	r3, #17
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e001      	b.n	80091de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80091da:	2307      	movs	r3, #7
 80091dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	fb03 f202 	mul.w	r2, r3, r2
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ec:	61fb      	str	r3, [r7, #28]
 80091ee:	e000      	b.n	80091f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80091f0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80091f2:	69fb      	ldr	r3, [r7, #28]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3724      	adds	r7, #36	; 0x24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	40021000 	.word	0x40021000
 8009204:	001fff68 	.word	0x001fff68
 8009208:	00f42400 	.word	0x00f42400

0800920c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e078      	b.n	8009310 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7fa fbb9 	bl	80039a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2203      	movs	r2, #3
 800923a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f86a 	bl	8009318 <HAL_SD_InitCard>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e060      	b.n	8009310 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fdcd 	bl	8009df4 <HAL_SD_GetCardStatus>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e055      	b.n	8009310 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009264:	7e3b      	ldrb	r3, [r7, #24]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800926a:	7e7b      	ldrb	r3, [r7, #25]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d10a      	bne.n	800928e <HAL_SD_Init+0x82>
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <HAL_SD_Init+0x78>
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800928a:	65da      	str	r2, [r3, #92]	; 0x5c
 800928c:	e00b      	b.n	80092a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009292:	2b01      	cmp	r3, #1
 8009294:	d104      	bne.n	80092a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800929c:	65da      	str	r2, [r3, #92]	; 0x5c
 800929e:	e002      	b.n	80092a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fe83 	bl	8009fb8 <HAL_SD_ConfigWideBusOperation>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e029      	b.n	8009310 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80092bc:	f7fa fe4e 	bl	8003f5c <HAL_GetTick>
 80092c0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80092c2:	e014      	b.n	80092ee <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80092c4:	f7fa fe4a 	bl	8003f5c <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092d2:	d10c      	bne.n	80092ee <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e010      	b.n	8009310 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 ff76 	bl	800a1e0 <HAL_SD_GetCardState>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d1e4      	bne.n	80092c4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3728      	adds	r7, #40	; 0x28
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009318:	b5b0      	push	{r4, r5, r7, lr}
 800931a:	b08e      	sub	sp, #56	; 0x38
 800931c:	af04      	add	r7, sp, #16
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009320:	2300      	movs	r3, #0
 8009322:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009330:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009334:	f7fe fd4e 	bl	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009338:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e079      	b.n	8009448 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	4a3d      	ldr	r2, [pc, #244]	; (8009450 <HAL_SD_InitCard+0x138>)
 800935a:	fba2 2303 	umull	r2, r3, r2, r3
 800935e:	091b      	lsrs	r3, r3, #4
 8009360:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d107      	bne.n	8009380 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0210 	orr.w	r2, r2, #16
 800937e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681d      	ldr	r5, [r3, #0]
 8009384:	466c      	mov	r4, sp
 8009386:	f107 0314 	add.w	r3, r7, #20
 800938a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800938e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009398:	4628      	mov	r0, r5
 800939a:	f003 fd1b 	bl	800cdd4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f003 fd5e 	bl	800ce64 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80093b4:	4a27      	ldr	r2, [pc, #156]	; (8009454 <HAL_SD_InitCard+0x13c>)
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093bc:	3301      	adds	r3, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fa fdd8 	bl	8003f74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 ffeb 	bl	800a3a0 <SD_PowerON>
 80093ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e02e      	b.n	8009448 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 ff18 	bl	800a220 <SD_InitCard>
 80093f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e01b      	b.n	8009448 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009418:	4618      	mov	r0, r3
 800941a:	f003 fdb9 	bl	800cf90 <SDMMC_CmdBlockLength>
 800941e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a0b      	ldr	r2, [pc, #44]	; (8009458 <HAL_SD_InitCard+0x140>)
 800942c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	431a      	orrs	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3728      	adds	r7, #40	; 0x28
 800944c:	46bd      	mov	sp, r7
 800944e:	bdb0      	pop	{r4, r5, r7, pc}
 8009450:	014f8b59 	.word	0x014f8b59
 8009454:	00012110 	.word	0x00012110
 8009458:	1fe00fff 	.word	0x1fe00fff

0800945c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b092      	sub	sp, #72	; 0x48
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800946a:	f7fa fd77 	bl	8003f5c <HAL_GetTick>
 800946e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d107      	bne.n	800948e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e170      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b01      	cmp	r3, #1
 8009498:	f040 8163 	bne.w	8009762 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d907      	bls.n	80094c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e157      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d002      	beq.n	80094de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	025b      	lsls	r3, r3, #9
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	025b      	lsls	r3, r3, #9
 80094e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80094ea:	2390      	movs	r3, #144	; 0x90
 80094ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094ee:	2302      	movs	r3, #2
 80094f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f107 0214 	add.w	r2, r7, #20
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f003 fd17 	bl	800cf38 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009518:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d90a      	bls.n	8009536 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2202      	movs	r2, #2
 8009524:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800952c:	4618      	mov	r0, r3
 800952e:	f003 fd75 	bl	800d01c <SDMMC_CmdReadMultiBlock>
 8009532:	6478      	str	r0, [r7, #68]	; 0x44
 8009534:	e009      	b.n	800954a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009542:	4618      	mov	r0, r3
 8009544:	f003 fd47 	bl	800cfd6 <SDMMC_CmdReadSingleBlock>
 8009548:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800954a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a88      	ldr	r2, [pc, #544]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800955e:	431a      	orrs	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e0fc      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800957a:	e061      	b.n	8009640 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d03c      	beq.n	8009604 <HAL_SD_ReadBlocks+0x1a8>
 800958a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d039      	beq.n	8009604 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009590:	2300      	movs	r3, #0
 8009592:	643b      	str	r3, [r7, #64]	; 0x40
 8009594:	e033      	b.n	80095fe <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f003 fc44 	bl	800ce28 <SDMMC_ReadFIFO>
 80095a0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	3301      	adds	r3, #1
 80095ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	3b01      	subs	r3, #1
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	0a1b      	lsrs	r3, r3, #8
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	3301      	adds	r3, #1
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c8:	3b01      	subs	r3, #1
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	0c1b      	lsrs	r3, r3, #16
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d8:	3301      	adds	r3, #1
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095de:	3b01      	subs	r3, #1
 80095e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	0e1b      	lsrs	r3, r3, #24
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	3301      	adds	r3, #1
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	3b01      	subs	r3, #1
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80095f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095fa:	3301      	adds	r3, #1
 80095fc:	643b      	str	r3, [r7, #64]	; 0x40
 80095fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009600:	2b07      	cmp	r3, #7
 8009602:	d9c8      	bls.n	8009596 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009604:	f7fa fcaa 	bl	8003f5c <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009610:	429a      	cmp	r2, r3
 8009612:	d902      	bls.n	800961a <HAL_SD_ReadBlocks+0x1be>
 8009614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009616:	2b00      	cmp	r3, #0
 8009618:	d112      	bne.n	8009640 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a56      	ldr	r2, [pc, #344]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e097      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009646:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800964a:	2b00      	cmp	r3, #0
 800964c:	d096      	beq.n	800957c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800965c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d022      	beq.n	80096b2 <HAL_SD_ReadBlocks+0x256>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d91f      	bls.n	80096b2 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	2b03      	cmp	r3, #3
 8009678:	d01b      	beq.n	80096b2 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4618      	mov	r0, r3
 8009680:	f003 fd36 	bl	800d0f0 <SDMMC_CmdStopTransfer>
 8009684:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009688:	2b00      	cmp	r3, #0
 800968a:	d012      	beq.n	80096b2 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a39      	ldr	r2, [pc, #228]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 8009692:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969a:	431a      	orrs	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e05e      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d012      	beq.n	80096e6 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a2c      	ldr	r2, [pc, #176]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096cc:	f043 0208 	orr.w	r2, r3, #8
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e044      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d012      	beq.n	800971a <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1f      	ldr	r2, [pc, #124]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	f043 0202 	orr.w	r2, r3, #2
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e02a      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a12      	ldr	r2, [pc, #72]	; (8009778 <HAL_SD_ReadBlocks+0x31c>)
 800972e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e010      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a0a      	ldr	r2, [pc, #40]	; (800977c <HAL_SD_ReadBlocks+0x320>)
 8009754:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	e006      	b.n	8009770 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009766:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
  }
}
 8009770:	4618      	mov	r0, r3
 8009772:	3748      	adds	r7, #72	; 0x48
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	1fe00fff 	.word	0x1fe00fff
 800977c:	18000f3a 	.word	0x18000f3a

08009780 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b092      	sub	sp, #72	; 0x48
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800978e:	f7fa fbe5 	bl	8003f5c <HAL_GetTick>
 8009792:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d107      	bne.n	80097b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e174      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	f040 8167 	bne.w	8009a8e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	441a      	add	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d907      	bls.n	80097e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e15b      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2203      	movs	r2, #3
 80097e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2200      	movs	r2, #0
 80097f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d002      	beq.n	8009802 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	025b      	lsls	r3, r3, #9
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009806:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	025b      	lsls	r3, r3, #9
 800980c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800980e:	2390      	movs	r3, #144	; 0x90
 8009810:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009816:	2300      	movs	r3, #0
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800981a:	2300      	movs	r3, #0
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f107 0218 	add.w	r2, r7, #24
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f003 fb85 	bl	800cf38 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d90a      	bls.n	800985a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009850:	4618      	mov	r0, r3
 8009852:	f003 fc29 	bl	800d0a8 <SDMMC_CmdWriteMultiBlock>
 8009856:	6478      	str	r0, [r7, #68]	; 0x44
 8009858:	e009      	b.n	800986e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2210      	movs	r2, #16
 800985e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009866:	4618      	mov	r0, r3
 8009868:	f003 fbfb 	bl	800d062 <SDMMC_CmdWriteSingleBlock>
 800986c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800986e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009870:	2b00      	cmp	r3, #0
 8009872:	d012      	beq.n	800989a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a8a      	ldr	r2, [pc, #552]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 800987a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009882:	431a      	orrs	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e100      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800989e:	e065      	b.n	800996c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d040      	beq.n	8009930 <HAL_SD_WriteBlocks+0x1b0>
 80098ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d03d      	beq.n	8009930 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80098b4:	2300      	movs	r3, #0
 80098b6:	643b      	str	r3, [r7, #64]	; 0x40
 80098b8:	e037      	b.n	800992a <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80098ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c2:	3301      	adds	r3, #1
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	3b01      	subs	r3, #1
 80098ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	021a      	lsls	r2, r3, #8
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	3301      	adds	r3, #1
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e0:	3b01      	subs	r3, #1
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80098e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	041a      	lsls	r2, r3, #16
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	3301      	adds	r3, #1
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f8:	3b01      	subs	r3, #1
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	061a      	lsls	r2, r3, #24
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	3301      	adds	r3, #1
 800990c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800990e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009910:	3b01      	subs	r3, #1
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f107 0214 	add.w	r2, r7, #20
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f003 fa8f 	bl	800ce42 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009926:	3301      	adds	r3, #1
 8009928:	643b      	str	r3, [r7, #64]	; 0x40
 800992a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992c:	2b07      	cmp	r3, #7
 800992e:	d9c4      	bls.n	80098ba <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009930:	f7fa fb14 	bl	8003f5c <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800993c:	429a      	cmp	r2, r3
 800993e:	d902      	bls.n	8009946 <HAL_SD_WriteBlocks+0x1c6>
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	2b00      	cmp	r3, #0
 8009944:	d112      	bne.n	800996c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a56      	ldr	r2, [pc, #344]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 800994c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009954:	431a      	orrs	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e097      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009976:	2b00      	cmp	r3, #0
 8009978:	d092      	beq.n	80098a0 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009988:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009994:	2b00      	cmp	r3, #0
 8009996:	d022      	beq.n	80099de <HAL_SD_WriteBlocks+0x25e>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d91f      	bls.n	80099de <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d01b      	beq.n	80099de <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f003 fba0 	bl	800d0f0 <SDMMC_CmdStopTransfer>
 80099b0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80099b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d012      	beq.n	80099de <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a39      	ldr	r2, [pc, #228]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c6:	431a      	orrs	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e05e      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d012      	beq.n	8009a12 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a2c      	ldr	r2, [pc, #176]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	f043 0208 	orr.w	r2, r3, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e044      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d012      	beq.n	8009a46 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a1f      	ldr	r2, [pc, #124]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	f043 0202 	orr.w	r2, r3, #2
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e02a      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d012      	beq.n	8009a7a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a12      	ldr	r2, [pc, #72]	; (8009aa4 <HAL_SD_WriteBlocks+0x324>)
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	f043 0210 	orr.w	r2, r3, #16
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e010      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a0a      	ldr	r2, [pc, #40]	; (8009aa8 <HAL_SD_WriteBlocks+0x328>)
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e006      	b.n	8009a9c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
  }
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3748      	adds	r7, #72	; 0x48
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	1fe00fff 	.word	0x1fe00fff
 8009aa8:	18000f3a 	.word	0x18000f3a

08009aac <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aba:	0f9b      	lsrs	r3, r3, #30
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac6:	0e9b      	lsrs	r3, r3, #26
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 030f 	and.w	r3, r3, #15
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aea:	0c1b      	lsrs	r3, r3, #16
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af6:	0a1b      	lsrs	r3, r3, #8
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0c:	0d1b      	lsrs	r3, r3, #20
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b18:	0c1b      	lsrs	r3, r3, #16
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2a:	0bdb      	lsrs	r3, r3, #15
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b3c:	0b9b      	lsrs	r3, r3, #14
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b4e:	0b5b      	lsrs	r3, r3, #13
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b60:	0b1b      	lsrs	r3, r3, #12
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d163      	bne.n	8009c44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b80:	009a      	lsls	r2, r3, #2
 8009b82:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b86:	4013      	ands	r3, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009b8c:	0f92      	lsrs	r2, r2, #30
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b98:	0edb      	lsrs	r3, r3, #27
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009baa:	0e1b      	lsrs	r3, r3, #24
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bbc:	0d5b      	lsrs	r3, r3, #21
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bce:	0c9b      	lsrs	r3, r3, #18
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009be0:	0bdb      	lsrs	r3, r3, #15
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0307 	and.w	r3, r3, #7
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	7e1b      	ldrb	r3, [r3, #24]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	3302      	adds	r3, #2
 8009c04:	2201      	movs	r2, #1
 8009c06:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009c0e:	fb03 f202 	mul.w	r2, r3, r2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	7a1b      	ldrb	r3, [r3, #8]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	2201      	movs	r2, #1
 8009c22:	409a      	lsls	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c30:	0a52      	lsrs	r2, r2, #9
 8009c32:	fb03 f202 	mul.w	r2, r3, r2
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c40:	659a      	str	r2, [r3, #88]	; 0x58
 8009c42:	e031      	b.n	8009ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d11d      	bne.n	8009c88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c50:	041b      	lsls	r3, r3, #16
 8009c52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	3301      	adds	r3, #1
 8009c68:	029a      	lsls	r2, r3, #10
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c7c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	659a      	str	r2, [r3, #88]	; 0x58
 8009c86:	e00f      	b.n	8009ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a58      	ldr	r2, [pc, #352]	; (8009df0 <HAL_SD_GetCardCSD+0x344>)
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e09d      	b.n	8009de4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cac:	0b9b      	lsrs	r3, r3, #14
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cbe:	09db      	lsrs	r3, r3, #7
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce0:	0fdb      	lsrs	r3, r3, #31
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cec:	0f5b      	lsrs	r3, r3, #29
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfe:	0e9b      	lsrs	r3, r3, #26
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d10:	0d9b      	lsrs	r3, r3, #22
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d22:	0d5b      	lsrs	r3, r3, #21
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d52:	0bdb      	lsrs	r3, r3, #15
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d66:	0b9b      	lsrs	r3, r3, #14
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d7a:	0b5b      	lsrs	r3, r3, #13
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8e:	0b1b      	lsrs	r3, r3, #12
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da2:	0a9b      	lsrs	r3, r3, #10
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db6:	0a1b      	lsrs	r3, r3, #8
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	1fe00fff 	.word	0x1fe00fff

08009df4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b094      	sub	sp, #80	; 0x50
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fbd4 	bl	800a5b8 <SD_SendSDStatus>
 8009e10:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d011      	beq.n	8009e3c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a4f      	ldr	r2, [pc, #316]	; (8009f5c <HAL_SD_GetCardStatus+0x168>)
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009e3a:	e070      	b.n	8009f1e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	099b      	lsrs	r3, r3, #6
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	061a      	lsls	r2, r3, #24
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e82:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e8c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	0e1b      	lsrs	r3, r3, #24
 8009e92:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	0d1b      	lsrs	r3, r3, #20
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	0a9b      	lsrs	r3, r3, #10
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0303 	and.w	r3, r3, #3
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	091b      	lsrs	r3, r3, #4
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 030f 	and.w	r3, r3, #15
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	0e1b      	lsrs	r3, r3, #24
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f26:	4618      	mov	r0, r3
 8009f28:	f003 f832 	bl	800cf90 <SDMMC_CmdBlockLength>
 8009f2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a08      	ldr	r2, [pc, #32]	; (8009f5c <HAL_SD_GetCardStatus+0x168>)
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009f50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3750      	adds	r7, #80	; 0x50
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	1fe00fff 	.word	0x1fe00fff

08009f60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009fb8:	b5b0      	push	{r4, r5, r7, lr}
 8009fba:	b090      	sub	sp, #64	; 0x40
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d02e      	beq.n	800a036 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fde:	d106      	bne.n	8009fee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
 8009fec:	e029      	b.n	800a042 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ff4:	d10a      	bne.n	800a00c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fbd6 	bl	800a7a8 <SD_WideBus_Enable>
 8009ffc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	639a      	str	r2, [r3, #56]	; 0x38
 800a00a:	e01a      	b.n	800a042 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fc13 	bl	800a83e <SD_WideBus_Disable>
 800a018:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	639a      	str	r2, [r3, #56]	; 0x38
 800a026:	e00c      	b.n	800a042 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	639a      	str	r2, [r3, #56]	; 0x38
 800a034:	e005      	b.n	800a042 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a60      	ldr	r2, [pc, #384]	; (800a1d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a050:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a058:	e097      	b.n	800a18a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a05a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a05e:	f7fd feb9 	bl	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a062:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8086 	beq.w	800a178 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	4952      	ldr	r1, [pc, #328]	; (800a1d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a08a:	fba1 1303 	umull	r1, r3, r1, r3
 800a08e:	0e1b      	lsrs	r3, r3, #24
 800a090:	429a      	cmp	r2, r3
 800a092:	d303      	bcc.n	800a09c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e05a      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a4:	d103      	bne.n	800a0ae <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e051      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b6:	d126      	bne.n	800a106 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10e      	bne.n	800a0de <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	4a45      	ldr	r2, [pc, #276]	; (800a1d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d906      	bls.n	800a0d6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	4a42      	ldr	r2, [pc, #264]	; (800a1d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d0:	0e5b      	lsrs	r3, r3, #25
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	e03d      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	61fb      	str	r3, [r7, #28]
 800a0dc:	e039      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ea:	4a3b      	ldr	r2, [pc, #236]	; (800a1d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d906      	bls.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	4a38      	ldr	r2, [pc, #224]	; (800a1d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f8:	0e5b      	lsrs	r3, r3, #25
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e029      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	61fb      	str	r3, [r7, #28]
 800a104:	e025      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10e      	bne.n	800a12c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	4a32      	ldr	r2, [pc, #200]	; (800a1dc <HAL_SD_ConfigWideBusOperation+0x224>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d906      	bls.n	800a124 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	4a2e      	ldr	r2, [pc, #184]	; (800a1d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a11a:	fba2 2303 	umull	r2, r3, r2, r3
 800a11e:	0e1b      	lsrs	r3, r3, #24
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	e016      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	61fb      	str	r3, [r7, #28]
 800a12a:	e012      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a134:	fbb2 f3f3 	udiv	r3, r2, r3
 800a138:	4a28      	ldr	r2, [pc, #160]	; (800a1dc <HAL_SD_ConfigWideBusOperation+0x224>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d906      	bls.n	800a14c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	4a24      	ldr	r2, [pc, #144]	; (800a1d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a142:	fba2 2303 	umull	r2, r3, r2, r3
 800a146:	0e1b      	lsrs	r3, r3, #24
 800a148:	61fb      	str	r3, [r7, #28]
 800a14a:	e002      	b.n	800a152 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681d      	ldr	r5, [r3, #0]
 800a15c:	466c      	mov	r4, sp
 800a15e:	f107 0318 	add.w	r3, r7, #24
 800a162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a16a:	f107 030c 	add.w	r3, r7, #12
 800a16e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a170:	4628      	mov	r0, r5
 800a172:	f002 fe2f 	bl	800cdd4 <SDMMC_Init>
 800a176:	e008      	b.n	800a18a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a192:	4618      	mov	r0, r3
 800a194:	f002 fefc 	bl	800cf90 <SDMMC_CmdBlockLength>
 800a198:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00c      	beq.n	800a1ba <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3730      	adds	r7, #48	; 0x30
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	1fe00fff 	.word	0x1fe00fff
 800a1d4:	55e63b89 	.word	0x55e63b89
 800a1d8:	02faf080 	.word	0x02faf080
 800a1dc:	017d7840 	.word	0x017d7840

0800a1e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a1ec:	f107 030c 	add.w	r3, r7, #12
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fab0 	bl	800a758 <SD_SendStatus>
 800a1f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	0a5b      	lsrs	r3, r3, #9
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a216:	693b      	ldr	r3, [r7, #16]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a220:	b5b0      	push	{r4, r5, r7, lr}
 800a222:	b090      	sub	sp, #64	; 0x40
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a228:	2301      	movs	r3, #1
 800a22a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4618      	mov	r0, r3
 800a232:	f002 fe29 	bl	800ce88 <SDMMC_GetPowerState>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a23c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a240:	e0a9      	b.n	800a396 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a246:	2b03      	cmp	r3, #3
 800a248:	d02e      	beq.n	800a2a8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f003 f86e 	bl	800d330 <SDMMC_CmdSendCID>
 800a254:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <SD_InitCard+0x40>
    {
      return errorstate;
 800a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25e:	e09a      	b.n	800a396 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2100      	movs	r1, #0
 800a266:	4618      	mov	r0, r3
 800a268:	f002 fe53 	bl	800cf12 <SDMMC_GetResponse>
 800a26c:	4602      	mov	r2, r0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2104      	movs	r1, #4
 800a278:	4618      	mov	r0, r3
 800a27a:	f002 fe4a 	bl	800cf12 <SDMMC_GetResponse>
 800a27e:	4602      	mov	r2, r0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2108      	movs	r1, #8
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 fe41 	bl	800cf12 <SDMMC_GetResponse>
 800a290:	4602      	mov	r2, r0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	210c      	movs	r1, #12
 800a29c:	4618      	mov	r0, r3
 800a29e:	f002 fe38 	bl	800cf12 <SDMMC_GetResponse>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d00d      	beq.n	800a2cc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f107 020e 	add.w	r2, r7, #14
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f003 f877 	bl	800d3ae <SDMMC_CmdSetRelAdd>
 800a2c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <SD_InitCard+0xac>
    {
      return errorstate;
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ca:	e064      	b.n	800a396 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d036      	beq.n	800a342 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e4:	041b      	lsls	r3, r3, #16
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f003 f840 	bl	800d36e <SDMMC_CmdSendCSD>
 800a2ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <SD_InitCard+0xda>
    {
      return errorstate;
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f8:	e04d      	b.n	800a396 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f002 fe06 	bl	800cf12 <SDMMC_GetResponse>
 800a306:	4602      	mov	r2, r0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2104      	movs	r1, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f002 fdfd 	bl	800cf12 <SDMMC_GetResponse>
 800a318:	4602      	mov	r2, r0
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2108      	movs	r1, #8
 800a324:	4618      	mov	r0, r3
 800a326:	f002 fdf4 	bl	800cf12 <SDMMC_GetResponse>
 800a32a:	4602      	mov	r2, r0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	210c      	movs	r1, #12
 800a336:	4618      	mov	r0, r3
 800a338:	f002 fdeb 	bl	800cf12 <SDMMC_GetResponse>
 800a33c:	4602      	mov	r2, r0
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2104      	movs	r1, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f002 fde2 	bl	800cf12 <SDMMC_GetResponse>
 800a34e:	4603      	mov	r3, r0
 800a350:	0d1a      	lsrs	r2, r3, #20
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a356:	f107 0310 	add.w	r3, r7, #16
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fba5 	bl	8009aac <HAL_SD_GetCardCSD>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a36c:	e013      	b.n	800a396 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	2200      	movs	r2, #0
 800a37a:	461c      	mov	r4, r3
 800a37c:	4615      	mov	r5, r2
 800a37e:	4622      	mov	r2, r4
 800a380:	462b      	mov	r3, r5
 800a382:	4608      	mov	r0, r1
 800a384:	f002 feea 	bl	800d15c <SDMMC_CmdSelDesel>
 800a388:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <SD_InitCard+0x174>
  {
    return errorstate;
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a392:	e000      	b.n	800a396 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3740      	adds	r7, #64	; 0x40
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a3a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800a3b4:	f7f9 fdd2 	bl	8003f5c <HAL_GetTick>
 800a3b8:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f002 fef0 	bl	800d1a4 <SDMMC_CmdGoIdleState>
 800a3c4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <SD_PowerON+0x30>
  {
    return errorstate;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	e0ed      	b.n	800a5ac <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f002 ff03 	bl	800d1e0 <SDMMC_CmdOperCond>
 800a3da:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 fed9 	bl	800d1a4 <SDMMC_CmdGoIdleState>
 800a3f2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <SD_PowerON+0x64>
    {
      return errorstate;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	e0d6      	b.n	800a5ac <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d137      	bne.n	800a47c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f002 ff04 	bl	800d220 <SDMMC_CmdAppCommand>
 800a418:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d02d      	beq.n	800a47c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a424:	e0c2      	b.n	800a5ac <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f002 fef7 	bl	800d220 <SDMMC_CmdAppCommand>
 800a432:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <SD_PowerON+0x9e>
    {
      return errorstate;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	e0b6      	b.n	800a5ac <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	495c      	ldr	r1, [pc, #368]	; (800a5b4 <SD_PowerON+0x214>)
 800a444:	4618      	mov	r0, r3
 800a446:	f002 ff0e 	bl	800d266 <SDMMC_CmdAppOperCommand>
 800a44a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a456:	e0a9      	b.n	800a5ac <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2100      	movs	r1, #0
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 fd57 	bl	800cf12 <SDMMC_GetResponse>
 800a464:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	0fdb      	lsrs	r3, r3, #31
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <SD_PowerON+0xd2>
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <SD_PowerON+0xd4>
 800a472:	2300      	movs	r3, #0
 800a474:	61bb      	str	r3, [r7, #24]

    count++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a482:	4293      	cmp	r3, r2
 800a484:	d802      	bhi.n	800a48c <SD_PowerON+0xec>
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0cc      	beq.n	800a426 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a492:	4293      	cmp	r3, r2
 800a494:	d902      	bls.n	800a49c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a49a:	e087      	b.n	800a5ac <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d07e      	beq.n	800a5a4 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d17a      	bne.n	800a5aa <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d075      	beq.n	800a5aa <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4c4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0208 	orr.w	r2, r2, #8
 800a4d4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f002 ffce 	bl	800d47c <SDMMC_CmdVoltageSwitch>
 800a4e0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00c      	beq.n	800a502 <SD_PowerON+0x162>
        {
          return errorstate;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	e05f      	b.n	800a5ac <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4ec:	f7f9 fd36 	bl	8003f5c <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4fa:	d102      	bne.n	800a502 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a4fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a500:	e054      	b.n	800a5ac <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a50c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a510:	d1ec      	bne.n	800a4ec <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52a:	d002      	beq.n	800a532 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a52c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a530:	e03c      	b.n	800a5ac <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800a532:	2001      	movs	r0, #1
 800a534:	f000 fa9e 	bl	800aa74 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f042 0204 	orr.w	r2, r2, #4
 800a546:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a548:	e00a      	b.n	800a560 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a54a:	f7f9 fd07 	bl	8003f5c <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a558:	d102      	bne.n	800a560 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a55a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a55e:	e025      	b.n	800a5ac <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56e:	d1ec      	bne.n	800a54a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a578:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a588:	d102      	bne.n	800a590 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a58a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a58e:	e00d      	b.n	800a5ac <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2213      	movs	r2, #19
 800a596:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5a0:	639a      	str	r2, [r3, #56]	; 0x38
 800a5a2:	e002      	b.n	800a5aa <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	c1100000 	.word	0xc1100000

0800a5b8 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08c      	sub	sp, #48	; 0x30
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5c2:	f7f9 fccb 	bl	8003f5c <HAL_GetTick>
 800a5c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 fc9d 	bl	800cf12 <SDMMC_GetResponse>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e2:	d102      	bne.n	800a5ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5e8:	e0b0      	b.n	800a74c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2140      	movs	r1, #64	; 0x40
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f002 fccd 	bl	800cf90 <SDMMC_CmdBlockLength>
 800a5f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	e0a0      	b.n	800a74c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a612:	041b      	lsls	r3, r3, #16
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f002 fe02 	bl	800d220 <SDMMC_CmdAppCommand>
 800a61c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	e08d      	b.n	800a74c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a634:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a636:	2340      	movs	r3, #64	; 0x40
 800a638:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a63a:	2360      	movs	r3, #96	; 0x60
 800a63c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a63e:	2302      	movs	r3, #2
 800a640:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a646:	2301      	movs	r3, #1
 800a648:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f107 0208 	add.w	r2, r7, #8
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f002 fc6f 	bl	800cf38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 feea 	bl	800d438 <SDMMC_CmdStatusRegister>
 800a664:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d02b      	beq.n	800a6c4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	e069      	b.n	800a74c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d013      	beq.n	800a6ae <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a686:	2300      	movs	r3, #0
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a68a:	e00d      	b.n	800a6a8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4618      	mov	r0, r3
 800a692:	f002 fbc9 	bl	800ce28 <SDMMC_ReadFIFO>
 800a696:	4602      	mov	r2, r0
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	601a      	str	r2, [r3, #0]
        pData++;
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	3304      	adds	r3, #4
 800a6a0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	2b07      	cmp	r3, #7
 800a6ac:	d9ee      	bls.n	800a68c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6ae:	f7f9 fc55 	bl	8003f5c <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d102      	bne.n	800a6c4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6c2:	e043      	b.n	800a74c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0d2      	beq.n	800a678 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d8:	f003 0308 	and.w	r3, r3, #8
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a6e0:	2308      	movs	r3, #8
 800a6e2:	e033      	b.n	800a74c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e02a      	b.n	800a74c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fc:	f003 0320 	and.w	r3, r3, #32
 800a700:	2b00      	cmp	r3, #0
 800a702:	d017      	beq.n	800a734 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a704:	2320      	movs	r3, #32
 800a706:	e021      	b.n	800a74c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f002 fb8b 	bl	800ce28 <SDMMC_ReadFIFO>
 800a712:	4602      	mov	r2, r0
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	601a      	str	r2, [r3, #0]
    pData++;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	3304      	adds	r3, #4
 800a71c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a71e:	f7f9 fc1d 	bl	8003f5c <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a72c:	d102      	bne.n	800a734 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a72e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a732:	e00b      	b.n	800a74c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e2      	bne.n	800a708 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a03      	ldr	r2, [pc, #12]	; (800a754 <SD_SendSDStatus+0x19c>)
 800a748:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3730      	adds	r7, #48	; 0x30
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	18000f3a 	.word	0x18000f3a

0800a758 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a76c:	e018      	b.n	800a7a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f002 fe39 	bl	800d3f2 <SDMMC_CmdSendStatus>
 800a780:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	e009      	b.n	800a7a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f002 fbbd 	bl	800cf12 <SDMMC_GetResponse>
 800a798:	4602      	mov	r2, r0
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 fba7 	bl	800cf12 <SDMMC_GetResponse>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ce:	d102      	bne.n	800a7d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7d4:	e02f      	b.n	800a836 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f879 	bl	800a8d4 <SD_FindSCR>
 800a7e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	e023      	b.n	800a836 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01c      	beq.n	800a832 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a800:	041b      	lsls	r3, r3, #16
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f002 fd0b 	bl	800d220 <SDMMC_CmdAppCommand>
 800a80a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	e00f      	b.n	800a836 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2102      	movs	r1, #2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f002 fd42 	bl	800d2a6 <SDMMC_CmdBusWidth>
 800a822:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	e003      	b.n	800a836 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a82e:	2300      	movs	r3, #0
 800a830:	e001      	b.n	800a836 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2100      	movs	r1, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f002 fb5c 	bl	800cf12 <SDMMC_GetResponse>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a864:	d102      	bne.n	800a86c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a86a:	e02f      	b.n	800a8cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f82e 	bl	800a8d4 <SD_FindSCR>
 800a878:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	e023      	b.n	800a8cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d01c      	beq.n	800a8c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f002 fcc0 	bl	800d220 <SDMMC_CmdAppCommand>
 800a8a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	e00f      	b.n	800a8cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f002 fcf7 	bl	800d2a6 <SDMMC_CmdBusWidth>
 800a8b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	e003      	b.n	800a8cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e001      	b.n	800a8cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	; 0x38
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a8de:	f7f9 fb3d 	bl	8003f5c <HAL_GetTick>
 800a8e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60bb      	str	r3, [r7, #8]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2108      	movs	r1, #8
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f002 fb48 	bl	800cf90 <SDMMC_CmdBlockLength>
 800a900:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	e0ad      	b.n	800aa68 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a914:	041b      	lsls	r3, r3, #16
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f002 fc81 	bl	800d220 <SDMMC_CmdAppCommand>
 800a91e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a928:	e09e      	b.n	800aa68 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a92e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a930:	2308      	movs	r3, #8
 800a932:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a934:	2330      	movs	r3, #48	; 0x30
 800a936:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a938:	2302      	movs	r3, #2
 800a93a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a940:	2301      	movs	r3, #1
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f107 0210 	add.w	r2, r7, #16
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f002 faf2 	bl	800cf38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4618      	mov	r0, r3
 800a95a:	f002 fcc7 	bl	800d2ec <SDMMC_CmdSendSCR>
 800a95e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d027      	beq.n	800a9b6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	e07e      	b.n	800aa68 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d113      	bne.n	800a9a0 <SD_FindSCR+0xcc>
 800a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d110      	bne.n	800a9a0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f002 fa50 	bl	800ce28 <SDMMC_ReadFIFO>
 800a988:	4603      	mov	r3, r0
 800a98a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f002 fa49 	bl	800ce28 <SDMMC_ReadFIFO>
 800a996:	4603      	mov	r3, r0
 800a998:	60fb      	str	r3, [r7, #12]
      index++;
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	3301      	adds	r3, #1
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9a0:	f7f9 fadc 	bl	8003f5c <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ae:	d102      	bne.n	800a9b6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9b4:	e058      	b.n	800aa68 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9bc:	f240 532a 	movw	r3, #1322	; 0x52a
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0d1      	beq.n	800a96a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2208      	movs	r2, #8
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a9dc:	2308      	movs	r3, #8
 800a9de:	e043      	b.n	800aa68 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e036      	b.n	800aa68 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa10:	2320      	movs	r3, #32
 800aa12:	e029      	b.n	800aa68 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <SD_FindSCR+0x19c>)
 800aa1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	061a      	lsls	r2, r3, #24
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	0a1b      	lsrs	r3, r3, #8
 800aa2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	0e1b      	lsrs	r3, r3, #24
 800aa38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	601a      	str	r2, [r3, #0]
    scr++;
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	3304      	adds	r3, #4
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	061a      	lsls	r2, r3, #24
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	0e1b      	lsrs	r3, r3, #24
 800aa60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3738      	adds	r7, #56	; 0x38
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	18000f3a 	.word	0x18000f3a

0800aa74 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800aa7e:	bf00      	nop
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e095      	b.n	800abc8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d108      	bne.n	800aab6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaac:	d009      	beq.n	800aac2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	61da      	str	r2, [r3, #28]
 800aab4:	e005      	b.n	800aac2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7f8 ffe7 	bl	8003ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2202      	movs	r2, #2
 800aae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaf8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab02:	d902      	bls.n	800ab0a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	e002      	b.n	800ab10 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ab0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ab18:	d007      	beq.n	800ab2a <HAL_SPI_Init+0xa0>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab22:	d002      	beq.n	800ab2a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	431a      	orrs	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6c:	ea42 0103 	orr.w	r1, r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	0c1b      	lsrs	r3, r3, #16
 800ab86:	f003 0204 	and.w	r2, r3, #4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	f003 0310 	and.w	r3, r3, #16
 800ab92:	431a      	orrs	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aba6:	ea42 0103 	orr.w	r1, r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e049      	b.n	800ac76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d106      	bne.n	800abfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7f8 ff9c 	bl	8003b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2202      	movs	r2, #2
 800ac00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f000 fad2 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d001      	beq.n	800ac98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e04f      	b.n	800ad38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f042 0201 	orr.w	r2, r2, #1
 800acae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a23      	ldr	r2, [pc, #140]	; (800ad44 <HAL_TIM_Base_Start_IT+0xc4>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d01d      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc2:	d018      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1f      	ldr	r2, [pc, #124]	; (800ad48 <HAL_TIM_Base_Start_IT+0xc8>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <HAL_TIM_Base_Start_IT+0xcc>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00e      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a1c      	ldr	r2, [pc, #112]	; (800ad50 <HAL_TIM_Base_Start_IT+0xd0>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d009      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <HAL_TIM_Base_Start_IT+0xd4>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d004      	beq.n	800acf6 <HAL_TIM_Base_Start_IT+0x76>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a19      	ldr	r2, [pc, #100]	; (800ad58 <HAL_TIM_Base_Start_IT+0xd8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d115      	bne.n	800ad22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	4b17      	ldr	r3, [pc, #92]	; (800ad5c <HAL_TIM_Base_Start_IT+0xdc>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b06      	cmp	r3, #6
 800ad06:	d015      	beq.n	800ad34 <HAL_TIM_Base_Start_IT+0xb4>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad0e:	d011      	beq.n	800ad34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad20:	e008      	b.n	800ad34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e000      	b.n	800ad36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40000400 	.word	0x40000400
 800ad4c:	40000800 	.word	0x40000800
 800ad50:	40000c00 	.word	0x40000c00
 800ad54:	40013400 	.word	0x40013400
 800ad58:	40014000 	.word	0x40014000
 800ad5c:	00010007 	.word	0x00010007

0800ad60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e049      	b.n	800ae06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d106      	bne.n	800ad8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f841 	bl	800ae0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f000 fa0a 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d122      	bne.n	800ae7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d11b      	bne.n	800ae7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f06f 0202 	mvn.w	r2, #2
 800ae4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f989 	bl	800b17c <HAL_TIM_IC_CaptureCallback>
 800ae6a:	e005      	b.n	800ae78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f97b 	bl	800b168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f98c 	bl	800b190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d122      	bne.n	800aed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d11b      	bne.n	800aed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f06f 0204 	mvn.w	r2, #4
 800aea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f95f 	bl	800b17c <HAL_TIM_IC_CaptureCallback>
 800aebe:	e005      	b.n	800aecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f951 	bl	800b168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f962 	bl	800b190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d122      	bne.n	800af26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	d11b      	bne.n	800af26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f06f 0208 	mvn.w	r2, #8
 800aef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2204      	movs	r2, #4
 800aefc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f935 	bl	800b17c <HAL_TIM_IC_CaptureCallback>
 800af12:	e005      	b.n	800af20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f927 	bl	800b168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f938 	bl	800b190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	f003 0310 	and.w	r3, r3, #16
 800af30:	2b10      	cmp	r3, #16
 800af32:	d122      	bne.n	800af7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d11b      	bne.n	800af7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f06f 0210 	mvn.w	r2, #16
 800af4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2208      	movs	r2, #8
 800af50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f90b 	bl	800b17c <HAL_TIM_IC_CaptureCallback>
 800af66:	e005      	b.n	800af74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f8fd 	bl	800b168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f90e 	bl	800b190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b01      	cmp	r3, #1
 800af86:	d10e      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b01      	cmp	r3, #1
 800af94:	d107      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f06f 0201 	mvn.w	r2, #1
 800af9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f8d7 	bl	800b154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb0:	2b80      	cmp	r3, #128	; 0x80
 800afb2:	d10e      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afbe:	2b80      	cmp	r3, #128	; 0x80
 800afc0:	d107      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fceb 	bl	800b9a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe0:	d10e      	bne.n	800b000 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afec:	2b80      	cmp	r3, #128	; 0x80
 800afee:	d107      	bne.n	800b000 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fcde 	bl	800b9bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00a:	2b40      	cmp	r3, #64	; 0x40
 800b00c:	d10e      	bne.n	800b02c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b018:	2b40      	cmp	r3, #64	; 0x40
 800b01a:	d107      	bne.n	800b02c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f8bc 	bl	800b1a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b20      	cmp	r3, #32
 800b038:	d10e      	bne.n	800b058 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b20      	cmp	r3, #32
 800b046:	d107      	bne.n	800b058 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f06f 0220 	mvn.w	r2, #32
 800b050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fc9e 	bl	800b994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_TIM_OC_ConfigChannel+0x1e>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e066      	b.n	800b14c <HAL_TIM_OC_ConfigChannel+0xec>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b14      	cmp	r3, #20
 800b08a:	d857      	bhi.n	800b13c <HAL_TIM_OC_ConfigChannel+0xdc>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0e9 	.word	0x0800b0e9
 800b098:	0800b13d 	.word	0x0800b13d
 800b09c:	0800b13d 	.word	0x0800b13d
 800b0a0:	0800b13d 	.word	0x0800b13d
 800b0a4:	0800b0f7 	.word	0x0800b0f7
 800b0a8:	0800b13d 	.word	0x0800b13d
 800b0ac:	0800b13d 	.word	0x0800b13d
 800b0b0:	0800b13d 	.word	0x0800b13d
 800b0b4:	0800b105 	.word	0x0800b105
 800b0b8:	0800b13d 	.word	0x0800b13d
 800b0bc:	0800b13d 	.word	0x0800b13d
 800b0c0:	0800b13d 	.word	0x0800b13d
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b13d 	.word	0x0800b13d
 800b0cc:	0800b13d 	.word	0x0800b13d
 800b0d0:	0800b13d 	.word	0x0800b13d
 800b0d4:	0800b121 	.word	0x0800b121
 800b0d8:	0800b13d 	.word	0x0800b13d
 800b0dc:	0800b13d 	.word	0x0800b13d
 800b0e0:	0800b13d 	.word	0x0800b13d
 800b0e4:	0800b12f 	.word	0x0800b12f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 f8fc 	bl	800b2ec <TIM_OC1_SetConfig>
      break;
 800b0f4:	e025      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f985 	bl	800b40c <TIM_OC2_SetConfig>
      break;
 800b102:	e01e      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fa08 	bl	800b520 <TIM_OC3_SetConfig>
      break;
 800b110:	e017      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fa89 	bl	800b630 <TIM_OC4_SetConfig>
      break;
 800b11e:	e010      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68b9      	ldr	r1, [r7, #8]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 faec 	bl	800b704 <TIM_OC5_SetConfig>
      break;
 800b12c:	e009      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fb49 	bl	800b7cc <TIM_OC6_SetConfig>
      break;
 800b13a:	e002      	b.n	800b142 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	75fb      	strb	r3, [r7, #23]
      break;
 800b140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a40      	ldr	r2, [pc, #256]	; (800b2cc <TIM_Base_SetConfig+0x114>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d013      	beq.n	800b1f8 <TIM_Base_SetConfig+0x40>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d6:	d00f      	beq.n	800b1f8 <TIM_Base_SetConfig+0x40>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a3d      	ldr	r2, [pc, #244]	; (800b2d0 <TIM_Base_SetConfig+0x118>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d00b      	beq.n	800b1f8 <TIM_Base_SetConfig+0x40>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a3c      	ldr	r2, [pc, #240]	; (800b2d4 <TIM_Base_SetConfig+0x11c>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d007      	beq.n	800b1f8 <TIM_Base_SetConfig+0x40>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a3b      	ldr	r2, [pc, #236]	; (800b2d8 <TIM_Base_SetConfig+0x120>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_Base_SetConfig+0x40>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a3a      	ldr	r2, [pc, #232]	; (800b2dc <TIM_Base_SetConfig+0x124>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d108      	bne.n	800b20a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4313      	orrs	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a2f      	ldr	r2, [pc, #188]	; (800b2cc <TIM_Base_SetConfig+0x114>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d01f      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b218:	d01b      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a2c      	ldr	r2, [pc, #176]	; (800b2d0 <TIM_Base_SetConfig+0x118>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d017      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a2b      	ldr	r2, [pc, #172]	; (800b2d4 <TIM_Base_SetConfig+0x11c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d013      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a2a      	ldr	r2, [pc, #168]	; (800b2d8 <TIM_Base_SetConfig+0x120>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d00f      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a29      	ldr	r2, [pc, #164]	; (800b2dc <TIM_Base_SetConfig+0x124>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d00b      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a28      	ldr	r2, [pc, #160]	; (800b2e0 <TIM_Base_SetConfig+0x128>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d007      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a27      	ldr	r2, [pc, #156]	; (800b2e4 <TIM_Base_SetConfig+0x12c>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d003      	beq.n	800b252 <TIM_Base_SetConfig+0x9a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a26      	ldr	r2, [pc, #152]	; (800b2e8 <TIM_Base_SetConfig+0x130>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d108      	bne.n	800b264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4313      	orrs	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	689a      	ldr	r2, [r3, #8]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a10      	ldr	r2, [pc, #64]	; (800b2cc <TIM_Base_SetConfig+0x114>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00f      	beq.n	800b2b0 <TIM_Base_SetConfig+0xf8>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a12      	ldr	r2, [pc, #72]	; (800b2dc <TIM_Base_SetConfig+0x124>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00b      	beq.n	800b2b0 <TIM_Base_SetConfig+0xf8>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a11      	ldr	r2, [pc, #68]	; (800b2e0 <TIM_Base_SetConfig+0x128>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d007      	beq.n	800b2b0 <TIM_Base_SetConfig+0xf8>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a10      	ldr	r2, [pc, #64]	; (800b2e4 <TIM_Base_SetConfig+0x12c>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d003      	beq.n	800b2b0 <TIM_Base_SetConfig+0xf8>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <TIM_Base_SetConfig+0x130>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d103      	bne.n	800b2b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	691a      	ldr	r2, [r3, #16]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	615a      	str	r2, [r3, #20]
}
 800b2be:	bf00      	nop
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	40012c00 	.word	0x40012c00
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	40000800 	.word	0x40000800
 800b2d8:	40000c00 	.word	0x40000c00
 800b2dc:	40013400 	.word	0x40013400
 800b2e0:	40014000 	.word	0x40014000
 800b2e4:	40014400 	.word	0x40014400
 800b2e8:	40014800 	.word	0x40014800

0800b2ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	f023 0201 	bic.w	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 0303 	bic.w	r3, r3, #3
 800b326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f023 0302 	bic.w	r3, r3, #2
 800b338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a2c      	ldr	r2, [pc, #176]	; (800b3f8 <TIM_OC1_SetConfig+0x10c>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d00f      	beq.n	800b36c <TIM_OC1_SetConfig+0x80>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a2b      	ldr	r2, [pc, #172]	; (800b3fc <TIM_OC1_SetConfig+0x110>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d00b      	beq.n	800b36c <TIM_OC1_SetConfig+0x80>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <TIM_OC1_SetConfig+0x114>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d007      	beq.n	800b36c <TIM_OC1_SetConfig+0x80>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a29      	ldr	r2, [pc, #164]	; (800b404 <TIM_OC1_SetConfig+0x118>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d003      	beq.n	800b36c <TIM_OC1_SetConfig+0x80>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a28      	ldr	r2, [pc, #160]	; (800b408 <TIM_OC1_SetConfig+0x11c>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d10c      	bne.n	800b386 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f023 0308 	bic.w	r3, r3, #8
 800b372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f023 0304 	bic.w	r3, r3, #4
 800b384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a1b      	ldr	r2, [pc, #108]	; (800b3f8 <TIM_OC1_SetConfig+0x10c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00f      	beq.n	800b3ae <TIM_OC1_SetConfig+0xc2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a1a      	ldr	r2, [pc, #104]	; (800b3fc <TIM_OC1_SetConfig+0x110>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00b      	beq.n	800b3ae <TIM_OC1_SetConfig+0xc2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a19      	ldr	r2, [pc, #100]	; (800b400 <TIM_OC1_SetConfig+0x114>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d007      	beq.n	800b3ae <TIM_OC1_SetConfig+0xc2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a18      	ldr	r2, [pc, #96]	; (800b404 <TIM_OC1_SetConfig+0x118>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d003      	beq.n	800b3ae <TIM_OC1_SetConfig+0xc2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a17      	ldr	r2, [pc, #92]	; (800b408 <TIM_OC1_SetConfig+0x11c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d111      	bne.n	800b3d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	621a      	str	r2, [r3, #32]
}
 800b3ec:	bf00      	nop
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	40012c00 	.word	0x40012c00
 800b3fc:	40013400 	.word	0x40013400
 800b400:	40014000 	.word	0x40014000
 800b404:	40014400 	.word	0x40014400
 800b408:	40014800 	.word	0x40014800

0800b40c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b087      	sub	sp, #28
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f023 0210 	bic.w	r2, r3, #16
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	021b      	lsls	r3, r3, #8
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f023 0320 	bic.w	r3, r3, #32
 800b45a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a28      	ldr	r2, [pc, #160]	; (800b50c <TIM_OC2_SetConfig+0x100>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d003      	beq.n	800b478 <TIM_OC2_SetConfig+0x6c>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a27      	ldr	r2, [pc, #156]	; (800b510 <TIM_OC2_SetConfig+0x104>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d10d      	bne.n	800b494 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b47e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	4313      	orrs	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a1d      	ldr	r2, [pc, #116]	; (800b50c <TIM_OC2_SetConfig+0x100>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d00f      	beq.n	800b4bc <TIM_OC2_SetConfig+0xb0>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a1c      	ldr	r2, [pc, #112]	; (800b510 <TIM_OC2_SetConfig+0x104>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00b      	beq.n	800b4bc <TIM_OC2_SetConfig+0xb0>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a1b      	ldr	r2, [pc, #108]	; (800b514 <TIM_OC2_SetConfig+0x108>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d007      	beq.n	800b4bc <TIM_OC2_SetConfig+0xb0>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a1a      	ldr	r2, [pc, #104]	; (800b518 <TIM_OC2_SetConfig+0x10c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d003      	beq.n	800b4bc <TIM_OC2_SetConfig+0xb0>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a19      	ldr	r2, [pc, #100]	; (800b51c <TIM_OC2_SetConfig+0x110>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d113      	bne.n	800b4e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	693a      	ldr	r2, [r7, #16]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	621a      	str	r2, [r3, #32]
}
 800b4fe:	bf00      	nop
 800b500:	371c      	adds	r7, #28
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	40012c00 	.word	0x40012c00
 800b510:	40013400 	.word	0x40013400
 800b514:	40014000 	.word	0x40014000
 800b518:	40014400 	.word	0x40014400
 800b51c:	40014800 	.word	0x40014800

0800b520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 0303 	bic.w	r3, r3, #3
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b56c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	4313      	orrs	r3, r2
 800b578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a27      	ldr	r2, [pc, #156]	; (800b61c <TIM_OC3_SetConfig+0xfc>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d003      	beq.n	800b58a <TIM_OC3_SetConfig+0x6a>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a26      	ldr	r2, [pc, #152]	; (800b620 <TIM_OC3_SetConfig+0x100>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d10d      	bne.n	800b5a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a1c      	ldr	r2, [pc, #112]	; (800b61c <TIM_OC3_SetConfig+0xfc>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d00f      	beq.n	800b5ce <TIM_OC3_SetConfig+0xae>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a1b      	ldr	r2, [pc, #108]	; (800b620 <TIM_OC3_SetConfig+0x100>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00b      	beq.n	800b5ce <TIM_OC3_SetConfig+0xae>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a1a      	ldr	r2, [pc, #104]	; (800b624 <TIM_OC3_SetConfig+0x104>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d007      	beq.n	800b5ce <TIM_OC3_SetConfig+0xae>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a19      	ldr	r2, [pc, #100]	; (800b628 <TIM_OC3_SetConfig+0x108>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d003      	beq.n	800b5ce <TIM_OC3_SetConfig+0xae>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a18      	ldr	r2, [pc, #96]	; (800b62c <TIM_OC3_SetConfig+0x10c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d113      	bne.n	800b5f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	011b      	lsls	r3, r3, #4
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	621a      	str	r2, [r3, #32]
}
 800b610:	bf00      	nop
 800b612:	371c      	adds	r7, #28
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	40012c00 	.word	0x40012c00
 800b620:	40013400 	.word	0x40013400
 800b624:	40014000 	.word	0x40014000
 800b628:	40014400 	.word	0x40014400
 800b62c:	40014800 	.word	0x40014800

0800b630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b67e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	031b      	lsls	r3, r3, #12
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4313      	orrs	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a18      	ldr	r2, [pc, #96]	; (800b6f0 <TIM_OC4_SetConfig+0xc0>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00f      	beq.n	800b6b4 <TIM_OC4_SetConfig+0x84>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a17      	ldr	r2, [pc, #92]	; (800b6f4 <TIM_OC4_SetConfig+0xc4>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00b      	beq.n	800b6b4 <TIM_OC4_SetConfig+0x84>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a16      	ldr	r2, [pc, #88]	; (800b6f8 <TIM_OC4_SetConfig+0xc8>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d007      	beq.n	800b6b4 <TIM_OC4_SetConfig+0x84>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a15      	ldr	r2, [pc, #84]	; (800b6fc <TIM_OC4_SetConfig+0xcc>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d003      	beq.n	800b6b4 <TIM_OC4_SetConfig+0x84>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a14      	ldr	r2, [pc, #80]	; (800b700 <TIM_OC4_SetConfig+0xd0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d109      	bne.n	800b6c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	019b      	lsls	r3, r3, #6
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	40012c00 	.word	0x40012c00
 800b6f4:	40013400 	.word	0x40013400
 800b6f8:	40014000 	.word	0x40014000
 800b6fc:	40014400 	.word	0x40014400
 800b700:	40014800 	.word	0x40014800

0800b704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	041b      	lsls	r3, r3, #16
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	4313      	orrs	r3, r2
 800b754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a17      	ldr	r2, [pc, #92]	; (800b7b8 <TIM_OC5_SetConfig+0xb4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00f      	beq.n	800b77e <TIM_OC5_SetConfig+0x7a>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a16      	ldr	r2, [pc, #88]	; (800b7bc <TIM_OC5_SetConfig+0xb8>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00b      	beq.n	800b77e <TIM_OC5_SetConfig+0x7a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a15      	ldr	r2, [pc, #84]	; (800b7c0 <TIM_OC5_SetConfig+0xbc>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d007      	beq.n	800b77e <TIM_OC5_SetConfig+0x7a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a14      	ldr	r2, [pc, #80]	; (800b7c4 <TIM_OC5_SetConfig+0xc0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d003      	beq.n	800b77e <TIM_OC5_SetConfig+0x7a>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a13      	ldr	r2, [pc, #76]	; (800b7c8 <TIM_OC5_SetConfig+0xc4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d109      	bne.n	800b792 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	021b      	lsls	r3, r3, #8
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	621a      	str	r2, [r3, #32]
}
 800b7ac:	bf00      	nop
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	40012c00 	.word	0x40012c00
 800b7bc:	40013400 	.word	0x40013400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	021b      	lsls	r3, r3, #8
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	051b      	lsls	r3, r3, #20
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a18      	ldr	r2, [pc, #96]	; (800b884 <TIM_OC6_SetConfig+0xb8>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d00f      	beq.n	800b848 <TIM_OC6_SetConfig+0x7c>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a17      	ldr	r2, [pc, #92]	; (800b888 <TIM_OC6_SetConfig+0xbc>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00b      	beq.n	800b848 <TIM_OC6_SetConfig+0x7c>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a16      	ldr	r2, [pc, #88]	; (800b88c <TIM_OC6_SetConfig+0xc0>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d007      	beq.n	800b848 <TIM_OC6_SetConfig+0x7c>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a15      	ldr	r2, [pc, #84]	; (800b890 <TIM_OC6_SetConfig+0xc4>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_OC6_SetConfig+0x7c>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a14      	ldr	r2, [pc, #80]	; (800b894 <TIM_OC6_SetConfig+0xc8>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d109      	bne.n	800b85c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b84e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	029b      	lsls	r3, r3, #10
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	4313      	orrs	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	621a      	str	r2, [r3, #32]
}
 800b876:	bf00      	nop
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40012c00 	.word	0x40012c00
 800b888:	40013400 	.word	0x40013400
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800

0800b898 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d101      	bne.n	800b8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e065      	b.n	800b980 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	041b      	lsls	r3, r3, #16
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a16      	ldr	r2, [pc, #88]	; (800b98c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d004      	beq.n	800b942 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a14      	ldr	r2, [pc, #80]	; (800b990 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d115      	bne.n	800b96e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	051b      	lsls	r3, r3, #20
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	69db      	ldr	r3, [r3, #28]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	40012c00 	.word	0x40012c00
 800b990:	40013400 	.word	0x40013400

0800b994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e042      	b.n	800ba68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7f8 f8bd 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2224      	movs	r2, #36	; 0x24
 800b9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 0201 	bic.w	r2, r2, #1
 800ba10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fb64 	bl	800c0e0 <UART_SetConfig>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d101      	bne.n	800ba22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e022      	b.n	800ba68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fe54 	bl	800c6d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689a      	ldr	r2, [r3, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fedb 	bl	800c81c <UART_CheckIdleState>
 800ba66:	4603      	mov	r3, r0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b0ba      	sub	sp, #232	; 0xe8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba9a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba9e:	4013      	ands	r3, r2
 800baa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800baa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d11b      	bne.n	800bae4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d015      	beq.n	800bae4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800babc:	f003 0320 	and.w	r3, r3, #32
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d105      	bne.n	800bad0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d009      	beq.n	800bae4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 82d6 	beq.w	800c086 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	4798      	blx	r3
      }
      return;
 800bae2:	e2d0      	b.n	800c086 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800bae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 811f 	beq.w	800bd2c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800baee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800baf2:	4b8b      	ldr	r3, [pc, #556]	; (800bd20 <HAL_UART_IRQHandler+0x2b0>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d106      	bne.n	800bb08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bafa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bafe:	4b89      	ldr	r3, [pc, #548]	; (800bd24 <HAL_UART_IRQHandler+0x2b4>)
 800bb00:	4013      	ands	r3, r2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8112 	beq.w	800bd2c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d011      	beq.n	800bb38 <HAL_UART_IRQHandler+0xc8>
 800bb14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb2e:	f043 0201 	orr.w	r2, r3, #1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb3c:	f003 0302 	and.w	r3, r3, #2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d011      	beq.n	800bb68 <HAL_UART_IRQHandler+0xf8>
 800bb44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2202      	movs	r2, #2
 800bb56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb5e:	f043 0204 	orr.w	r2, r3, #4
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6c:	f003 0304 	and.w	r3, r3, #4
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d011      	beq.n	800bb98 <HAL_UART_IRQHandler+0x128>
 800bb74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2204      	movs	r2, #4
 800bb86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8e:	f043 0202 	orr.w	r2, r3, #2
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9c:	f003 0308 	and.w	r3, r3, #8
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d017      	beq.n	800bbd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba8:	f003 0320 	and.w	r3, r3, #32
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d105      	bne.n	800bbbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbb4:	4b5a      	ldr	r3, [pc, #360]	; (800bd20 <HAL_UART_IRQHandler+0x2b0>)
 800bbb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbca:	f043 0208 	orr.w	r2, r3, #8
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d012      	beq.n	800bc06 <HAL_UART_IRQHandler+0x196>
 800bbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00c      	beq.n	800bc06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfc:	f043 0220 	orr.w	r2, r3, #32
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 823c 	beq.w	800c08a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d013      	beq.n	800bc46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d007      	beq.n	800bc46 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5a:	2b40      	cmp	r3, #64	; 0x40
 800bc5c:	d005      	beq.n	800bc6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d04f      	beq.n	800bd0a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fee9 	bl	800ca42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7a:	2b40      	cmp	r3, #64	; 0x40
 800bc7c:	d141      	bne.n	800bd02 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3308      	adds	r3, #8
 800bc84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3308      	adds	r3, #8
 800bca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1d9      	bne.n	800bc7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d013      	beq.n	800bcfa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd6:	4a14      	ldr	r2, [pc, #80]	; (800bd28 <HAL_UART_IRQHandler+0x2b8>)
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f8 fad9 	bl	8004296 <HAL_DMA_Abort_IT>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d017      	beq.n	800bd1a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf8:	e00f      	b.n	800bd1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f9da 	bl	800c0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd00:	e00b      	b.n	800bd1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f9d6 	bl	800c0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd08:	e007      	b.n	800bd1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f9d2 	bl	800c0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd18:	e1b7      	b.n	800c08a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd1a:	bf00      	nop
    return;
 800bd1c:	e1b5      	b.n	800c08a <HAL_UART_IRQHandler+0x61a>
 800bd1e:	bf00      	nop
 800bd20:	10000001 	.word	0x10000001
 800bd24:	04000120 	.word	0x04000120
 800bd28:	0800cb0f 	.word	0x0800cb0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	f040 814a 	bne.w	800bfca <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3a:	f003 0310 	and.w	r3, r3, #16
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 8143 	beq.w	800bfca <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd48:	f003 0310 	and.w	r3, r3, #16
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 813c 	beq.w	800bfca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2210      	movs	r2, #16
 800bd58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	f040 80b5 	bne.w	800bed4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 8187 	beq.w	800c08e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	f080 817f 	bcs.w	800c08e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0320 	and.w	r3, r3, #32
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f040 8086 	bne.w	800beb8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bde2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1da      	bne.n	800bdac <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3308      	adds	r3, #8
 800be16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be26:	e841 2300 	strex	r3, r2, [r1]
 800be2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e1      	bne.n	800bdf6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3308      	adds	r3, #8
 800be38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3308      	adds	r3, #8
 800be52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be56:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e3      	bne.n	800be32 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be88:	f023 0310 	bic.w	r3, r3, #16
 800be8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e4      	bne.n	800be78 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f8 f993 	bl	80041de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f8fb 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bed2:	e0dc      	b.n	800c08e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800beee:	b29b      	uxth	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 80ce 	beq.w	800c092 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 80c9 	beq.w	800c092 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf08:	e853 3f00 	ldrex	r3, [r3]
 800bf0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
 800bf24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf2a:	e841 2300 	strex	r3, r2, [r1]
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1e4      	bne.n	800bf00 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	623b      	str	r3, [r7, #32]
   return(result);
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	f023 0301 	bic.w	r3, r3, #1
 800bf50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf5e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e1      	bne.n	800bf36 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0310 	bic.w	r3, r3, #16
 800bf9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	69b9      	ldr	r1, [r7, #24]
 800bfae:	69fa      	ldr	r2, [r7, #28]
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f880 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfc8:	e063      	b.n	800c092 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00e      	beq.n	800bff4 <HAL_UART_IRQHandler+0x584>
 800bfd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bfea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fdcf 	bl	800cb90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bff2:	e051      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d014      	beq.n	800c02a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d008      	beq.n	800c02a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d03a      	beq.n	800c096 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	4798      	blx	r3
    }
    return;
 800c028:	e035      	b.n	800c096 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <HAL_UART_IRQHandler+0x5da>
 800c036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fd79 	bl	800cb3a <UART_EndTransmit_IT>
    return;
 800c048:	e026      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <HAL_UART_IRQHandler+0x5fa>
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c05a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fda8 	bl	800cbb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c068:	e016      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d010      	beq.n	800c098 <HAL_UART_IRQHandler+0x628>
 800c076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	da0c      	bge.n	800c098 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fd90 	bl	800cba4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c084:	e008      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
      return;
 800c086:	bf00      	nop
 800c088:	e006      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
    return;
 800c08a:	bf00      	nop
 800c08c:	e004      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
      return;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
      return;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <HAL_UART_IRQHandler+0x628>
    return;
 800c096:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800c098:	37e8      	adds	r7, #232	; 0xe8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop

0800c0a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e4:	b08c      	sub	sp, #48	; 0x30
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	4313      	orrs	r3, r2
 800c106:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4baa      	ldr	r3, [pc, #680]	; (800c3b8 <UART_SetConfig+0x2d8>)
 800c110:	4013      	ands	r3, r2
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c118:	430b      	orrs	r3, r1
 800c11a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a9f      	ldr	r2, [pc, #636]	; (800c3bc <UART_SetConfig+0x2dc>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d004      	beq.n	800c14c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c148:	4313      	orrs	r3, r2
 800c14a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c156:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c160:	430b      	orrs	r3, r1
 800c162:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16a:	f023 010f 	bic.w	r1, r3, #15
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a90      	ldr	r2, [pc, #576]	; (800c3c0 <UART_SetConfig+0x2e0>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d125      	bne.n	800c1d0 <UART_SetConfig+0xf0>
 800c184:	4b8f      	ldr	r3, [pc, #572]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18a:	f003 0303 	and.w	r3, r3, #3
 800c18e:	2b03      	cmp	r3, #3
 800c190:	d81a      	bhi.n	800c1c8 <UART_SetConfig+0xe8>
 800c192:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <UART_SetConfig+0xb8>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c1a9 	.word	0x0800c1a9
 800c19c:	0800c1b9 	.word	0x0800c1b9
 800c1a0:	0800c1b1 	.word	0x0800c1b1
 800c1a4:	0800c1c1 	.word	0x0800c1c1
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ae:	e116      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b6:	e112      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c1b8:	2304      	movs	r3, #4
 800c1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1be:	e10e      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c6:	e10a      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c1c8:	2310      	movs	r3, #16
 800c1ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ce:	e106      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a7c      	ldr	r2, [pc, #496]	; (800c3c8 <UART_SetConfig+0x2e8>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d138      	bne.n	800c24c <UART_SetConfig+0x16c>
 800c1da:	4b7a      	ldr	r3, [pc, #488]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e0:	f003 030c 	and.w	r3, r3, #12
 800c1e4:	2b0c      	cmp	r3, #12
 800c1e6:	d82d      	bhi.n	800c244 <UART_SetConfig+0x164>
 800c1e8:	a201      	add	r2, pc, #4	; (adr r2, 800c1f0 <UART_SetConfig+0x110>)
 800c1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ee:	bf00      	nop
 800c1f0:	0800c225 	.word	0x0800c225
 800c1f4:	0800c245 	.word	0x0800c245
 800c1f8:	0800c245 	.word	0x0800c245
 800c1fc:	0800c245 	.word	0x0800c245
 800c200:	0800c235 	.word	0x0800c235
 800c204:	0800c245 	.word	0x0800c245
 800c208:	0800c245 	.word	0x0800c245
 800c20c:	0800c245 	.word	0x0800c245
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c245 	.word	0x0800c245
 800c218:	0800c245 	.word	0x0800c245
 800c21c:	0800c245 	.word	0x0800c245
 800c220:	0800c23d 	.word	0x0800c23d
 800c224:	2300      	movs	r3, #0
 800c226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c22a:	e0d8      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c22c:	2302      	movs	r3, #2
 800c22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c232:	e0d4      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c234:	2304      	movs	r3, #4
 800c236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c23a:	e0d0      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c242:	e0cc      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c24a:	e0c8      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a5e      	ldr	r2, [pc, #376]	; (800c3cc <UART_SetConfig+0x2ec>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d125      	bne.n	800c2a2 <UART_SetConfig+0x1c2>
 800c256:	4b5b      	ldr	r3, [pc, #364]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c260:	2b30      	cmp	r3, #48	; 0x30
 800c262:	d016      	beq.n	800c292 <UART_SetConfig+0x1b2>
 800c264:	2b30      	cmp	r3, #48	; 0x30
 800c266:	d818      	bhi.n	800c29a <UART_SetConfig+0x1ba>
 800c268:	2b20      	cmp	r3, #32
 800c26a:	d00a      	beq.n	800c282 <UART_SetConfig+0x1a2>
 800c26c:	2b20      	cmp	r3, #32
 800c26e:	d814      	bhi.n	800c29a <UART_SetConfig+0x1ba>
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <UART_SetConfig+0x19a>
 800c274:	2b10      	cmp	r3, #16
 800c276:	d008      	beq.n	800c28a <UART_SetConfig+0x1aa>
 800c278:	e00f      	b.n	800c29a <UART_SetConfig+0x1ba>
 800c27a:	2300      	movs	r3, #0
 800c27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c280:	e0ad      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c282:	2302      	movs	r3, #2
 800c284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c288:	e0a9      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c28a:	2304      	movs	r3, #4
 800c28c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c290:	e0a5      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c292:	2308      	movs	r3, #8
 800c294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c298:	e0a1      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c29a:	2310      	movs	r3, #16
 800c29c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2a0:	e09d      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a4a      	ldr	r2, [pc, #296]	; (800c3d0 <UART_SetConfig+0x2f0>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d125      	bne.n	800c2f8 <UART_SetConfig+0x218>
 800c2ac:	4b45      	ldr	r3, [pc, #276]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2b6:	2bc0      	cmp	r3, #192	; 0xc0
 800c2b8:	d016      	beq.n	800c2e8 <UART_SetConfig+0x208>
 800c2ba:	2bc0      	cmp	r3, #192	; 0xc0
 800c2bc:	d818      	bhi.n	800c2f0 <UART_SetConfig+0x210>
 800c2be:	2b80      	cmp	r3, #128	; 0x80
 800c2c0:	d00a      	beq.n	800c2d8 <UART_SetConfig+0x1f8>
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d814      	bhi.n	800c2f0 <UART_SetConfig+0x210>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <UART_SetConfig+0x1f0>
 800c2ca:	2b40      	cmp	r3, #64	; 0x40
 800c2cc:	d008      	beq.n	800c2e0 <UART_SetConfig+0x200>
 800c2ce:	e00f      	b.n	800c2f0 <UART_SetConfig+0x210>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2d6:	e082      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2d8:	2302      	movs	r3, #2
 800c2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2de:	e07e      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2e0:	2304      	movs	r3, #4
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e6:	e07a      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2e8:	2308      	movs	r3, #8
 800c2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2ee:	e076      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2f0:	2310      	movs	r3, #16
 800c2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2f6:	e072      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a35      	ldr	r2, [pc, #212]	; (800c3d4 <UART_SetConfig+0x2f4>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d12a      	bne.n	800c358 <UART_SetConfig+0x278>
 800c302:	4b30      	ldr	r3, [pc, #192]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c310:	d01a      	beq.n	800c348 <UART_SetConfig+0x268>
 800c312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c316:	d81b      	bhi.n	800c350 <UART_SetConfig+0x270>
 800c318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31c:	d00c      	beq.n	800c338 <UART_SetConfig+0x258>
 800c31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c322:	d815      	bhi.n	800c350 <UART_SetConfig+0x270>
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <UART_SetConfig+0x250>
 800c328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c32c:	d008      	beq.n	800c340 <UART_SetConfig+0x260>
 800c32e:	e00f      	b.n	800c350 <UART_SetConfig+0x270>
 800c330:	2300      	movs	r3, #0
 800c332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c336:	e052      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c338:	2302      	movs	r3, #2
 800c33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33e:	e04e      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c340:	2304      	movs	r3, #4
 800c342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c346:	e04a      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c348:	2308      	movs	r3, #8
 800c34a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c34e:	e046      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c350:	2310      	movs	r3, #16
 800c352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c356:	e042      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a17      	ldr	r2, [pc, #92]	; (800c3bc <UART_SetConfig+0x2dc>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d13a      	bne.n	800c3d8 <UART_SetConfig+0x2f8>
 800c362:	4b18      	ldr	r3, [pc, #96]	; (800c3c4 <UART_SetConfig+0x2e4>)
 800c364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c368:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c36c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c370:	d01a      	beq.n	800c3a8 <UART_SetConfig+0x2c8>
 800c372:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c376:	d81b      	bhi.n	800c3b0 <UART_SetConfig+0x2d0>
 800c378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c37c:	d00c      	beq.n	800c398 <UART_SetConfig+0x2b8>
 800c37e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c382:	d815      	bhi.n	800c3b0 <UART_SetConfig+0x2d0>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d003      	beq.n	800c390 <UART_SetConfig+0x2b0>
 800c388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c38c:	d008      	beq.n	800c3a0 <UART_SetConfig+0x2c0>
 800c38e:	e00f      	b.n	800c3b0 <UART_SetConfig+0x2d0>
 800c390:	2300      	movs	r3, #0
 800c392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c396:	e022      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c398:	2302      	movs	r3, #2
 800c39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39e:	e01e      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3a6:	e01a      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ae:	e016      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3b6:	e012      	b.n	800c3de <UART_SetConfig+0x2fe>
 800c3b8:	cfff69f3 	.word	0xcfff69f3
 800c3bc:	40008000 	.word	0x40008000
 800c3c0:	40013800 	.word	0x40013800
 800c3c4:	40021000 	.word	0x40021000
 800c3c8:	40004400 	.word	0x40004400
 800c3cc:	40004800 	.word	0x40004800
 800c3d0:	40004c00 	.word	0x40004c00
 800c3d4:	40005000 	.word	0x40005000
 800c3d8:	2310      	movs	r3, #16
 800c3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4aae      	ldr	r2, [pc, #696]	; (800c69c <UART_SetConfig+0x5bc>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	f040 8097 	bne.w	800c518 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3ee:	2b08      	cmp	r3, #8
 800c3f0:	d823      	bhi.n	800c43a <UART_SetConfig+0x35a>
 800c3f2:	a201      	add	r2, pc, #4	; (adr r2, 800c3f8 <UART_SetConfig+0x318>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c43b 	.word	0x0800c43b
 800c400:	0800c425 	.word	0x0800c425
 800c404:	0800c43b 	.word	0x0800c43b
 800c408:	0800c42b 	.word	0x0800c42b
 800c40c:	0800c43b 	.word	0x0800c43b
 800c410:	0800c43b 	.word	0x0800c43b
 800c414:	0800c43b 	.word	0x0800c43b
 800c418:	0800c433 	.word	0x0800c433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c41c:	f7fb f892 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800c420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c422:	e010      	b.n	800c446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c424:	4b9e      	ldr	r3, [pc, #632]	; (800c6a0 <UART_SetConfig+0x5c0>)
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c428:	e00d      	b.n	800c446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c42a:	f7fa fff3 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 800c42e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c430:	e009      	b.n	800c446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c438:	e005      	b.n	800c446 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c43a:	2300      	movs	r3, #0
 800c43c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 8130 	beq.w	800c6ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c452:	4a94      	ldr	r2, [pc, #592]	; (800c6a4 <UART_SetConfig+0x5c4>)
 800c454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c458:	461a      	mov	r2, r3
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c460:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	4613      	mov	r3, r2
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	4413      	add	r3, r2
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d305      	bcc.n	800c47e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c478:	69ba      	ldr	r2, [r7, #24]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d903      	bls.n	800c486 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c484:	e113      	b.n	800c6ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	2200      	movs	r2, #0
 800c48a:	60bb      	str	r3, [r7, #8]
 800c48c:	60fa      	str	r2, [r7, #12]
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c492:	4a84      	ldr	r2, [pc, #528]	; (800c6a4 <UART_SetConfig+0x5c4>)
 800c494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2200      	movs	r2, #0
 800c49c:	603b      	str	r3, [r7, #0]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4a8:	f7f4 fbe6 	bl	8000c78 <__aeabi_uldivmod>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	f04f 0300 	mov.w	r3, #0
 800c4bc:	020b      	lsls	r3, r1, #8
 800c4be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4c2:	0202      	lsls	r2, r0, #8
 800c4c4:	6979      	ldr	r1, [r7, #20]
 800c4c6:	6849      	ldr	r1, [r1, #4]
 800c4c8:	0849      	lsrs	r1, r1, #1
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	eb12 0804 	adds.w	r8, r2, r4
 800c4d4:	eb43 0905 	adc.w	r9, r3, r5
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	469a      	mov	sl, r3
 800c4e0:	4693      	mov	fp, r2
 800c4e2:	4652      	mov	r2, sl
 800c4e4:	465b      	mov	r3, fp
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	f7f4 fbc5 	bl	8000c78 <__aeabi_uldivmod>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4fc:	d308      	bcc.n	800c510 <UART_SetConfig+0x430>
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c504:	d204      	bcs.n	800c510 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6a3a      	ldr	r2, [r7, #32]
 800c50c:	60da      	str	r2, [r3, #12]
 800c50e:	e0ce      	b.n	800c6ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c516:	e0ca      	b.n	800c6ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c520:	d166      	bne.n	800c5f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c526:	2b08      	cmp	r3, #8
 800c528:	d827      	bhi.n	800c57a <UART_SetConfig+0x49a>
 800c52a:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <UART_SetConfig+0x450>)
 800c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c530:	0800c555 	.word	0x0800c555
 800c534:	0800c55d 	.word	0x0800c55d
 800c538:	0800c565 	.word	0x0800c565
 800c53c:	0800c57b 	.word	0x0800c57b
 800c540:	0800c56b 	.word	0x0800c56b
 800c544:	0800c57b 	.word	0x0800c57b
 800c548:	0800c57b 	.word	0x0800c57b
 800c54c:	0800c57b 	.word	0x0800c57b
 800c550:	0800c573 	.word	0x0800c573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c554:	f7fa fff6 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800c558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c55a:	e014      	b.n	800c586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c55c:	f7fb f808 	bl	8007570 <HAL_RCC_GetPCLK2Freq>
 800c560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c562:	e010      	b.n	800c586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c564:	4b4e      	ldr	r3, [pc, #312]	; (800c6a0 <UART_SetConfig+0x5c0>)
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c568:	e00d      	b.n	800c586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c56a:	f7fa ff53 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 800c56e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c570:	e009      	b.n	800c586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c578:	e005      	b.n	800c586 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c57a:	2300      	movs	r3, #0
 800c57c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8090 	beq.w	800c6ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	4a44      	ldr	r2, [pc, #272]	; (800c6a4 <UART_SetConfig+0x5c4>)
 800c594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c598:	461a      	mov	r2, r3
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a0:	005a      	lsls	r2, r3, #1
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	085b      	lsrs	r3, r3, #1
 800c5a8:	441a      	add	r2, r3
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	2b0f      	cmp	r3, #15
 800c5b8:	d916      	bls.n	800c5e8 <UART_SetConfig+0x508>
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c0:	d212      	bcs.n	800c5e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f023 030f 	bic.w	r3, r3, #15
 800c5ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f003 0307 	and.w	r3, r3, #7
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	8bfb      	ldrh	r3, [r7, #30]
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	8bfa      	ldrh	r2, [r7, #30]
 800c5e4:	60da      	str	r2, [r3, #12]
 800c5e6:	e062      	b.n	800c6ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c5ee:	e05e      	b.n	800c6ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5f4:	2b08      	cmp	r3, #8
 800c5f6:	d828      	bhi.n	800c64a <UART_SetConfig+0x56a>
 800c5f8:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <UART_SetConfig+0x520>)
 800c5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fe:	bf00      	nop
 800c600:	0800c625 	.word	0x0800c625
 800c604:	0800c62d 	.word	0x0800c62d
 800c608:	0800c635 	.word	0x0800c635
 800c60c:	0800c64b 	.word	0x0800c64b
 800c610:	0800c63b 	.word	0x0800c63b
 800c614:	0800c64b 	.word	0x0800c64b
 800c618:	0800c64b 	.word	0x0800c64b
 800c61c:	0800c64b 	.word	0x0800c64b
 800c620:	0800c643 	.word	0x0800c643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c624:	f7fa ff8e 	bl	8007544 <HAL_RCC_GetPCLK1Freq>
 800c628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c62a:	e014      	b.n	800c656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c62c:	f7fa ffa0 	bl	8007570 <HAL_RCC_GetPCLK2Freq>
 800c630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c632:	e010      	b.n	800c656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c634:	4b1a      	ldr	r3, [pc, #104]	; (800c6a0 <UART_SetConfig+0x5c0>)
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c638:	e00d      	b.n	800c656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c63a:	f7fa feeb 	bl	8007414 <HAL_RCC_GetSysClockFreq>
 800c63e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c640:	e009      	b.n	800c656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c648:	e005      	b.n	800c656 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c654:	bf00      	nop
    }

    if (pclk != 0U)
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d028      	beq.n	800c6ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	4a10      	ldr	r2, [pc, #64]	; (800c6a4 <UART_SetConfig+0x5c4>)
 800c662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c666:	461a      	mov	r2, r3
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	085b      	lsrs	r3, r3, #1
 800c674:	441a      	add	r2, r3
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c67e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	2b0f      	cmp	r3, #15
 800c684:	d910      	bls.n	800c6a8 <UART_SetConfig+0x5c8>
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68c:	d20c      	bcs.n	800c6a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	b29a      	uxth	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60da      	str	r2, [r3, #12]
 800c698:	e009      	b.n	800c6ae <UART_SetConfig+0x5ce>
 800c69a:	bf00      	nop
 800c69c:	40008000 	.word	0x40008000
 800c6a0:	00f42400 	.word	0x00f42400
 800c6a4:	080178ac 	.word	0x080178ac
      }
      else
      {
        ret = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c6ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3730      	adds	r7, #48	; 0x30
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00a      	beq.n	800c702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00a      	beq.n	800c724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74a:	f003 0308 	and.w	r3, r3, #8
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	f003 0310 	and.w	r3, r3, #16
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00a      	beq.n	800c78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	430a      	orrs	r2, r1
 800c788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01a      	beq.n	800c7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7d6:	d10a      	bne.n	800c7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	430a      	orrs	r2, r1
 800c80e:	605a      	str	r2, [r3, #4]
  }
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af02      	add	r7, sp, #8
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c82c:	f7f7 fb96 	bl	8003f5c <HAL_GetTick>
 800c830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0308 	and.w	r3, r3, #8
 800c83c:	2b08      	cmp	r3, #8
 800c83e:	d10e      	bne.n	800c85e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f82f 	bl	800c8b2 <UART_WaitOnFlagUntilTimeout>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e025      	b.n	800c8aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 0304 	and.w	r3, r3, #4
 800c868:	2b04      	cmp	r3, #4
 800c86a:	d10e      	bne.n	800c88a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c86c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f819 	bl	800c8b2 <UART_WaitOnFlagUntilTimeout>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e00f      	b.n	800c8aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2220      	movs	r2, #32
 800c88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2220      	movs	r2, #32
 800c896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b09c      	sub	sp, #112	; 0x70
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	60f8      	str	r0, [r7, #12]
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	603b      	str	r3, [r7, #0]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8c2:	e0a9      	b.n	800ca18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ca:	f000 80a5 	beq.w	800ca18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8ce:	f7f7 fb45 	bl	8003f5c <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d302      	bcc.n	800c8e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d140      	bne.n	800c966 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c904:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e6      	bne.n	800c8e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3308      	adds	r3, #8
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c920:	e853 3f00 	ldrex	r3, [r3]
 800c924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	f023 0301 	bic.w	r3, r3, #1
 800c92c:	663b      	str	r3, [r7, #96]	; 0x60
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3308      	adds	r3, #8
 800c934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c936:	64ba      	str	r2, [r7, #72]	; 0x48
 800c938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c93c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e5      	bne.n	800c916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2220      	movs	r2, #32
 800c94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2220      	movs	r2, #32
 800c956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e069      	b.n	800ca3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d051      	beq.n	800ca18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c97e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c982:	d149      	bne.n	800ca18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c98c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	e853 3f00 	ldrex	r3, [r3]
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b4:	e841 2300 	strex	r3, r2, [r1]
 800c9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e6      	bne.n	800c98e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	e853 3f00 	ldrex	r3, [r3]
 800c9ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f023 0301 	bic.w	r3, r3, #1
 800c9d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9e0:	623a      	str	r2, [r7, #32]
 800c9e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	69f9      	ldr	r1, [r7, #28]
 800c9e6:	6a3a      	ldr	r2, [r7, #32]
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e5      	bne.n	800c9c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2220      	movs	r2, #32
 800ca00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2220      	movs	r2, #32
 800ca08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e010      	b.n	800ca3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	69da      	ldr	r2, [r3, #28]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	4013      	ands	r3, r2
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	bf0c      	ite	eq
 800ca28:	2301      	moveq	r3, #1
 800ca2a:	2300      	movne	r3, #0
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	461a      	mov	r2, r3
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	f43f af46 	beq.w	800c8c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3770      	adds	r7, #112	; 0x70
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b095      	sub	sp, #84	; 0x54
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	643b      	str	r3, [r7, #64]	; 0x40
 800ca6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e6      	bne.n	800ca4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3308      	adds	r3, #8
 800ca82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca92:	f023 0301 	bic.w	r3, r3, #1
 800ca96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3308      	adds	r3, #8
 800ca9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800caa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa8:	e841 2300 	strex	r3, r2, [r1]
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e3      	bne.n	800ca7c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d118      	bne.n	800caee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	e853 3f00 	ldrex	r3, [r3]
 800cac8:	60bb      	str	r3, [r7, #8]
   return(result);
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	f023 0310 	bic.w	r3, r3, #16
 800cad0:	647b      	str	r3, [r7, #68]	; 0x44
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
 800cad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cada:	61bb      	str	r3, [r7, #24]
 800cadc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	6979      	ldr	r1, [r7, #20]
 800cae0:	69ba      	ldr	r2, [r7, #24]
 800cae2:	e841 2300 	strex	r3, r2, [r1]
 800cae6:	613b      	str	r3, [r7, #16]
   return(result);
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e6      	bne.n	800cabc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2220      	movs	r2, #32
 800caf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb02:	bf00      	nop
 800cb04:	3754      	adds	r7, #84	; 0x54
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff fac1 	bl	800c0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb32:	bf00      	nop
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b088      	sub	sp, #32
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	e853 3f00 	ldrex	r3, [r3]
 800cb4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb64:	6979      	ldr	r1, [r7, #20]
 800cb66:	69ba      	ldr	r2, [r7, #24]
 800cb68:	e841 2300 	strex	r3, r2, [r1]
 800cb6c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e6      	bne.n	800cb42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2220      	movs	r2, #32
 800cb78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fa8c 	bl	800c0a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb88:	bf00      	nop
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d101      	bne.n	800cbe2 <HAL_UARTEx_DisableFifoMode+0x16>
 800cbde:	2302      	movs	r3, #2
 800cbe0:	e027      	b.n	800cc32 <HAL_UARTEx_DisableFifoMode+0x66>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2224      	movs	r2, #36	; 0x24
 800cbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f022 0201 	bic.w	r2, r2, #1
 800cc08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2220      	movs	r2, #32
 800cc24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d101      	bne.n	800cc56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc52:	2302      	movs	r3, #2
 800cc54:	e02d      	b.n	800ccb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2224      	movs	r2, #36	; 0x24
 800cc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 0201 	bic.w	r2, r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f850 	bl	800cd38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d101      	bne.n	800ccd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e02d      	b.n	800cd2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2224      	movs	r2, #36	; 0x24
 800ccde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f022 0201 	bic.w	r2, r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f812 	bl	800cd38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d108      	bne.n	800cd5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd58:	e031      	b.n	800cdbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd5a:	2308      	movs	r3, #8
 800cd5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd5e:	2308      	movs	r3, #8
 800cd60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	0e5b      	lsrs	r3, r3, #25
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	f003 0307 	and.w	r3, r3, #7
 800cd70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	0f5b      	lsrs	r3, r3, #29
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	f003 0307 	and.w	r3, r3, #7
 800cd80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	7b3a      	ldrb	r2, [r7, #12]
 800cd86:	4911      	ldr	r1, [pc, #68]	; (800cdcc <UARTEx_SetNbDataToProcess+0x94>)
 800cd88:	5c8a      	ldrb	r2, [r1, r2]
 800cd8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd8e:	7b3a      	ldrb	r2, [r7, #12]
 800cd90:	490f      	ldr	r1, [pc, #60]	; (800cdd0 <UARTEx_SetNbDataToProcess+0x98>)
 800cd92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd94:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cda0:	7bfb      	ldrb	r3, [r7, #15]
 800cda2:	7b7a      	ldrb	r2, [r7, #13]
 800cda4:	4909      	ldr	r1, [pc, #36]	; (800cdcc <UARTEx_SetNbDataToProcess+0x94>)
 800cda6:	5c8a      	ldrb	r2, [r1, r2]
 800cda8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdac:	7b7a      	ldrb	r2, [r7, #13]
 800cdae:	4908      	ldr	r1, [pc, #32]	; (800cdd0 <UARTEx_SetNbDataToProcess+0x98>)
 800cdb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	080178c4 	.word	0x080178c4
 800cdd0:	080178cc 	.word	0x080178cc

0800cdd4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	b480      	push	{r7}
 800cdd8:	b085      	sub	sp, #20
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	f107 001c 	add.w	r0, r7, #28
 800cde2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800cdea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800cdec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cdee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800cdf2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800cdf6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800cdfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	4b07      	ldr	r3, [pc, #28]	; (800ce24 <SDMMC_Init+0x50>)
 800ce08:	4013      	ands	r3, r2
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	431a      	orrs	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	b004      	add	sp, #16
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	ffc02c00 	.word	0xffc02c00

0800ce28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b083      	sub	sp, #12
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f043 0203 	orr.w	r2, r3, #3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ce78:	2002      	movs	r0, #2
 800ce7a:	f7f7 f87b 	bl	8003f74 <HAL_Delay>

  return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 0303 	and.w	r3, r3, #3
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cec2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cec8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cece:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68da      	ldr	r2, [r3, #12]
 800ceda:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <SDMMC_SendCommand+0x50>)
 800cedc:	4013      	ands	r3, r2
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	431a      	orrs	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	fffee0c0 	.word	0xfffee0c0

0800cef8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	b2db      	uxtb	r3, r3
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b085      	sub	sp, #20
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3314      	adds	r3, #20
 800cf20:	461a      	mov	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	4413      	add	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf5e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cf64:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cf6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cf82:	2300      	movs	r3, #0

}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf9e:	2310      	movs	r3, #16
 800cfa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfb2:	f107 0308 	add.w	r3, r7, #8
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ff73 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cfbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfc2:	2110      	movs	r1, #16
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fa7b 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800cfca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfcc:	69fb      	ldr	r3, [r7, #28]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b088      	sub	sp, #32
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
 800cfde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cfe4:	2311      	movs	r3, #17
 800cfe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cff8:	f107 0308 	add.w	r3, r7, #8
 800cffc:	4619      	mov	r1, r3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff ff50 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d004:	f241 3288 	movw	r2, #5000	; 0x1388
 800d008:	2111      	movs	r1, #17
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa58 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d012:	69fb      	ldr	r3, [r7, #28]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3720      	adds	r7, #32
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d02a:	2312      	movs	r3, #18
 800d02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d02e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d034:	2300      	movs	r3, #0
 800d036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d03e:	f107 0308 	add.w	r3, r7, #8
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff ff2d 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d04e:	2112      	movs	r1, #18
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fa35 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d058:	69fb      	ldr	r3, [r7, #28]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b088      	sub	sp, #32
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d070:	2318      	movs	r3, #24
 800d072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d074:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d07a:	2300      	movs	r3, #0
 800d07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d084:	f107 0308 	add.w	r3, r7, #8
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff ff0a 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d090:	f241 3288 	movw	r2, #5000	; 0x1388
 800d094:	2118      	movs	r1, #24
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fa12 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d09e:	69fb      	ldr	r3, [r7, #28]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3720      	adds	r7, #32
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d0b6:	2319      	movs	r3, #25
 800d0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ca:	f107 0308 	add.w	r3, r7, #8
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff fee7 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0da:	2119      	movs	r1, #25
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f9ef 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d0e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0e4:	69fb      	ldr	r3, [r7, #28]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3720      	adds	r7, #32
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
	...

0800d0f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b088      	sub	sp, #32
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d100:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d106:	2300      	movs	r3, #0
 800d108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d10a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d10e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d128:	f107 0308 	add.w	r3, r7, #8
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff feb8 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d134:	4a08      	ldr	r2, [pc, #32]	; (800d158 <SDMMC_CmdStopTransfer+0x68>)
 800d136:	210c      	movs	r1, #12
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f9c1 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d13e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800d14c:	69fb      	ldr	r3, [r7, #28]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3720      	adds	r7, #32
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	05f5e100 	.word	0x05f5e100

0800d15c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08a      	sub	sp, #40	; 0x28
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d16c:	2307      	movs	r3, #7
 800d16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d170:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d174:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d176:	2300      	movs	r3, #0
 800d178:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d17a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d17e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d180:	f107 0310 	add.w	r3, r7, #16
 800d184:	4619      	mov	r1, r3
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff fe8c 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d18c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d190:	2107      	movs	r1, #7
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f994 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d198:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3728      	adds	r7, #40	; 0x28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1c2:	f107 0308 	add.w	r3, r7, #8
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff fe6b 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fbb8 	bl	800d944 <SDMMC_GetCmdError>
 800d1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3720      	adds	r7, #32
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d1e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d1ee:	2308      	movs	r3, #8
 800d1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d202:	f107 0308 	add.w	r3, r7, #8
 800d206:	4619      	mov	r1, r3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff fe4b 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fb4a 	bl	800d8a8 <SDMMC_GetCmdResp7>
 800d214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d216:	69fb      	ldr	r3, [r7, #28]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3720      	adds	r7, #32
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d22e:	2337      	movs	r3, #55	; 0x37
 800d230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d232:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d238:	2300      	movs	r3, #0
 800d23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d242:	f107 0308 	add.w	r3, r7, #8
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff fe2b 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d252:	2137      	movs	r1, #55	; 0x37
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f933 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d25c:	69fb      	ldr	r3, [r7, #28]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3720      	adds	r7, #32
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b088      	sub	sp, #32
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d274:	2329      	movs	r3, #41	; 0x29
 800d276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d27e:	2300      	movs	r3, #0
 800d280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d288:	f107 0308 	add.w	r3, r7, #8
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff fe08 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fa4f 	bl	800d738 <SDMMC_GetCmdResp3>
 800d29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d29c:	69fb      	ldr	r3, [r7, #28]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b088      	sub	sp, #32
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d2b4:	2306      	movs	r3, #6
 800d2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7ff fde8 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2d8:	2106      	movs	r1, #6
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f8f0 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3720      	adds	r7, #32
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d2f8:	2333      	movs	r3, #51	; 0x33
 800d2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d302:	2300      	movs	r3, #0
 800d304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d30a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d30c:	f107 0308 	add.w	r3, r7, #8
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff fdc6 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d318:	f241 3288 	movw	r2, #5000	; 0x1388
 800d31c:	2133      	movs	r1, #51	; 0x33
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f8ce 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d326:	69fb      	ldr	r3, [r7, #28]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d33c:	2302      	movs	r3, #2
 800d33e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d340:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d34e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d350:	f107 0308 	add.w	r3, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff fda4 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f9a1 	bl	800d6a4 <SDMMC_GetCmdResp2>
 800d362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d364:	69fb      	ldr	r3, [r7, #28]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3720      	adds	r7, #32
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b088      	sub	sp, #32
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d37c:	2309      	movs	r3, #9
 800d37e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d380:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d38e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d390:	f107 0308 	add.w	r3, r7, #8
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fd84 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f981 	bl	800d6a4 <SDMMC_GetCmdResp2>
 800d3a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3720      	adds	r7, #32
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b088      	sub	sp, #32
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff fd64 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	2103      	movs	r1, #3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f9e9 	bl	800d7b8 <SDMMC_GetCmdResp6>
 800d3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b088      	sub	sp, #32
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d400:	230d      	movs	r3, #13
 800d402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d404:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d414:	f107 0308 	add.w	r3, r7, #8
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fd42 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d420:	f241 3288 	movw	r2, #5000	; 0x1388
 800d424:	210d      	movs	r1, #13
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f84a 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d42e:	69fb      	ldr	r3, [r7, #28]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3720      	adds	r7, #32
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d444:	230d      	movs	r3, #13
 800d446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fd20 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d464:	f241 3288 	movw	r2, #5000	; 0x1388
 800d468:	210d      	movs	r1, #13
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f828 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d472:	69fb      	ldr	r3, [r7, #28]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d484:	2300      	movs	r3, #0
 800d486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d488:	230b      	movs	r3, #11
 800d48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d48c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d49a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d49c:	f107 0308 	add.w	r3, r7, #8
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fcfe 	bl	800cea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ac:	210b      	movs	r1, #11
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f806 	bl	800d4c0 <SDMMC_GetCmdResp1>
 800d4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d4ce:	4b70      	ldr	r3, [pc, #448]	; (800d690 <SDMMC_GetCmdResp1+0x1d0>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a70      	ldr	r2, [pc, #448]	; (800d694 <SDMMC_GetCmdResp1+0x1d4>)
 800d4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d8:	0a5a      	lsrs	r2, r3, #9
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	fb02 f303 	mul.w	r3, r2, r3
 800d4e0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	1e5a      	subs	r2, r3, #1
 800d4e6:	61fa      	str	r2, [r7, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4f0:	e0c9      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	4b67      	ldr	r3, [pc, #412]	; (800d698 <SDMMC_GetCmdResp1+0x1d8>)
 800d4fc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0ef      	beq.n	800d4e2 <SDMMC_GetCmdResp1+0x22>
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1ea      	bne.n	800d4e2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d510:	f003 0304 	and.w	r3, r3, #4
 800d514:	2b00      	cmp	r3, #0
 800d516:	d004      	beq.n	800d522 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2204      	movs	r2, #4
 800d51c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d51e:	2304      	movs	r3, #4
 800d520:	e0b1      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2201      	movs	r2, #1
 800d532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d534:	2301      	movs	r3, #1
 800d536:	e0a6      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	4a58      	ldr	r2, [pc, #352]	; (800d69c <SDMMC_GetCmdResp1+0x1dc>)
 800d53c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f7ff fcda 	bl	800cef8 <SDMMC_GetCommandResponse>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	7afb      	ldrb	r3, [r7, #11]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d001      	beq.n	800d552 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d54e:	2301      	movs	r3, #1
 800d550:	e099      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d552:	2100      	movs	r1, #0
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff fcdc 	bl	800cf12 <SDMMC_GetResponse>
 800d55a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	4b50      	ldr	r3, [pc, #320]	; (800d6a0 <SDMMC_GetCmdResp1+0x1e0>)
 800d560:	4013      	ands	r3, r2
 800d562:	2b00      	cmp	r3, #0
 800d564:	d101      	bne.n	800d56a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d566:	2300      	movs	r3, #0
 800d568:	e08d      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	da02      	bge.n	800d576 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d574:	e087      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d580:	2340      	movs	r3, #64	; 0x40
 800d582:	e080      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d58e:	2380      	movs	r3, #128	; 0x80
 800d590:	e079      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d59c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5a0:	e071      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5b0:	e069      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5c0:	e061      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d5cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5d0:	e059      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5e0:	e051      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5f0:	e049      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d5fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d600:	e041      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d60c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d610:	e039      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d61c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d620:	e031      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d62c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d630:	e029      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d63c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d640:	e021      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d64c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d650:	e019      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d65c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d660:	e011      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d66c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d670:	e009      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d67c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d680:	e001      	b.n	800d686 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d686:	4618      	mov	r0, r3
 800d688:	3720      	adds	r7, #32
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000004 	.word	0x20000004
 800d694:	10624dd3 	.word	0x10624dd3
 800d698:	00200045 	.word	0x00200045
 800d69c:	002000c5 	.word	0x002000c5
 800d6a0:	fdffe008 	.word	0xfdffe008

0800d6a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6ac:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <SDMMC_GetCmdResp2+0x88>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a1f      	ldr	r2, [pc, #124]	; (800d730 <SDMMC_GetCmdResp2+0x8c>)
 800d6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6b6:	0a5b      	lsrs	r3, r3, #9
 800d6b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6bc:	fb02 f303 	mul.w	r3, r2, r3
 800d6c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	1e5a      	subs	r2, r3, #1
 800d6c6:	60fa      	str	r2, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6d0:	e026      	b.n	800d720 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d0ef      	beq.n	800d6c2 <SDMMC_GetCmdResp2+0x1e>
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1ea      	bne.n	800d6c2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f0:	f003 0304 	and.w	r3, r3, #4
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2204      	movs	r2, #4
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6fe:	2304      	movs	r3, #4
 800d700:	e00e      	b.n	800d720 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d706:	f003 0301 	and.w	r3, r3, #1
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d004      	beq.n	800d718 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d714:	2301      	movs	r3, #1
 800d716:	e003      	b.n	800d720 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4a06      	ldr	r2, [pc, #24]	; (800d734 <SDMMC_GetCmdResp2+0x90>)
 800d71c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	20000004 	.word	0x20000004
 800d730:	10624dd3 	.word	0x10624dd3
 800d734:	002000c5 	.word	0x002000c5

0800d738 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d740:	4b1a      	ldr	r3, [pc, #104]	; (800d7ac <SDMMC_GetCmdResp3+0x74>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a1a      	ldr	r2, [pc, #104]	; (800d7b0 <SDMMC_GetCmdResp3+0x78>)
 800d746:	fba2 2303 	umull	r2, r3, r2, r3
 800d74a:	0a5b      	lsrs	r3, r3, #9
 800d74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d750:	fb02 f303 	mul.w	r3, r2, r3
 800d754:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	1e5a      	subs	r2, r3, #1
 800d75a:	60fa      	str	r2, [r7, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d102      	bne.n	800d766 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d764:	e01b      	b.n	800d79e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d772:	2b00      	cmp	r3, #0
 800d774:	d0ef      	beq.n	800d756 <SDMMC_GetCmdResp3+0x1e>
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1ea      	bne.n	800d756 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	f003 0304 	and.w	r3, r3, #4
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2204      	movs	r2, #4
 800d790:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d792:	2304      	movs	r3, #4
 800d794:	e003      	b.n	800d79e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a06      	ldr	r2, [pc, #24]	; (800d7b4 <SDMMC_GetCmdResp3+0x7c>)
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20000004 	.word	0x20000004
 800d7b0:	10624dd3 	.word	0x10624dd3
 800d7b4:	002000c5 	.word	0x002000c5

0800d7b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7c6:	4b35      	ldr	r3, [pc, #212]	; (800d89c <SDMMC_GetCmdResp6+0xe4>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a35      	ldr	r2, [pc, #212]	; (800d8a0 <SDMMC_GetCmdResp6+0xe8>)
 800d7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d0:	0a5b      	lsrs	r3, r3, #9
 800d7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7d6:	fb02 f303 	mul.w	r3, r2, r3
 800d7da:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	1e5a      	subs	r2, r3, #1
 800d7e0:	61fa      	str	r2, [r7, #28]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7ea:	e052      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0ef      	beq.n	800d7dc <SDMMC_GetCmdResp6+0x24>
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1ea      	bne.n	800d7dc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80a:	f003 0304 	and.w	r3, r3, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2204      	movs	r2, #4
 800d816:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d818:	2304      	movs	r3, #4
 800d81a:	e03a      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d82e:	2301      	movs	r3, #1
 800d830:	e02f      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fb60 	bl	800cef8 <SDMMC_GetCommandResponse>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	4293      	cmp	r3, r2
 800d840:	d001      	beq.n	800d846 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d842:	2301      	movs	r3, #1
 800d844:	e025      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4a16      	ldr	r2, [pc, #88]	; (800d8a4 <SDMMC_GetCmdResp6+0xec>)
 800d84a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fb5f 	bl	800cf12 <SDMMC_GetResponse>
 800d854:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d106      	bne.n	800d86e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	b29a      	uxth	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d86a:	2300      	movs	r3, #0
 800d86c:	e011      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d87c:	e009      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d88c:	e001      	b.n	800d892 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d88e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d892:	4618      	mov	r0, r3
 800d894:	3720      	adds	r7, #32
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	20000004 	.word	0x20000004
 800d8a0:	10624dd3 	.word	0x10624dd3
 800d8a4:	002000c5 	.word	0x002000c5

0800d8a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8b0:	4b22      	ldr	r3, [pc, #136]	; (800d93c <SDMMC_GetCmdResp7+0x94>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a22      	ldr	r2, [pc, #136]	; (800d940 <SDMMC_GetCmdResp7+0x98>)
 800d8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ba:	0a5b      	lsrs	r3, r3, #9
 800d8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8c0:	fb02 f303 	mul.w	r3, r2, r3
 800d8c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	1e5a      	subs	r2, r3, #1
 800d8ca:	60fa      	str	r2, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8d4:	e02c      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d0ef      	beq.n	800d8c6 <SDMMC_GetCmdResp7+0x1e>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1ea      	bne.n	800d8c6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d004      	beq.n	800d906 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2204      	movs	r2, #4
 800d900:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d902:	2304      	movs	r3, #4
 800d904:	e014      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d004      	beq.n	800d91c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d918:	2301      	movs	r3, #1
 800d91a:	e009      	b.n	800d930 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2240      	movs	r2, #64	; 0x40
 800d92c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0

}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	20000004 	.word	0x20000004
 800d940:	10624dd3 	.word	0x10624dd3

0800d944 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d94c:	4b11      	ldr	r3, [pc, #68]	; (800d994 <SDMMC_GetCmdError+0x50>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a11      	ldr	r2, [pc, #68]	; (800d998 <SDMMC_GetCmdError+0x54>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	0a5b      	lsrs	r3, r3, #9
 800d958:	f241 3288 	movw	r2, #5000	; 0x1388
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1e5a      	subs	r2, r3, #1
 800d966:	60fa      	str	r2, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d970:	e009      	b.n	800d986 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0f1      	beq.n	800d962 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a06      	ldr	r2, [pc, #24]	; (800d99c <SDMMC_GetCmdError+0x58>)
 800d982:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	20000004 	.word	0x20000004
 800d998:	10624dd3 	.word	0x10624dd3
 800d99c:	002000c5 	.word	0x002000c5

0800d9a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	f107 001c 	add.w	r0, r7, #28
 800d9ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 faf6 	bl	800efb0 <USB_CoreReset>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d9da:	e005      	b.n	800d9e8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9f4:	b004      	add	sp, #16
 800d9f6:	4770      	bx	lr

0800d9f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4613      	mov	r3, r2
 800da04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d165      	bne.n	800dad8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	4a3e      	ldr	r2, [pc, #248]	; (800db08 <USB_SetTurnaroundTime+0x110>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d906      	bls.n	800da22 <USB_SetTurnaroundTime+0x2a>
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4a3d      	ldr	r2, [pc, #244]	; (800db0c <USB_SetTurnaroundTime+0x114>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d202      	bcs.n	800da22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800da1c:	230f      	movs	r3, #15
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	e05c      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	4a39      	ldr	r2, [pc, #228]	; (800db0c <USB_SetTurnaroundTime+0x114>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d306      	bcc.n	800da38 <USB_SetTurnaroundTime+0x40>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	4a38      	ldr	r2, [pc, #224]	; (800db10 <USB_SetTurnaroundTime+0x118>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d202      	bcs.n	800da38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800da32:	230e      	movs	r3, #14
 800da34:	617b      	str	r3, [r7, #20]
 800da36:	e051      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	4a35      	ldr	r2, [pc, #212]	; (800db10 <USB_SetTurnaroundTime+0x118>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d306      	bcc.n	800da4e <USB_SetTurnaroundTime+0x56>
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	4a34      	ldr	r2, [pc, #208]	; (800db14 <USB_SetTurnaroundTime+0x11c>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d202      	bcs.n	800da4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800da48:	230d      	movs	r3, #13
 800da4a:	617b      	str	r3, [r7, #20]
 800da4c:	e046      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	4a30      	ldr	r2, [pc, #192]	; (800db14 <USB_SetTurnaroundTime+0x11c>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d306      	bcc.n	800da64 <USB_SetTurnaroundTime+0x6c>
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	4a2f      	ldr	r2, [pc, #188]	; (800db18 <USB_SetTurnaroundTime+0x120>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d802      	bhi.n	800da64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800da5e:	230c      	movs	r3, #12
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	e03b      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	4a2c      	ldr	r2, [pc, #176]	; (800db18 <USB_SetTurnaroundTime+0x120>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d906      	bls.n	800da7a <USB_SetTurnaroundTime+0x82>
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	4a2b      	ldr	r2, [pc, #172]	; (800db1c <USB_SetTurnaroundTime+0x124>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d802      	bhi.n	800da7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800da74:	230b      	movs	r3, #11
 800da76:	617b      	str	r3, [r7, #20]
 800da78:	e030      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	4a27      	ldr	r2, [pc, #156]	; (800db1c <USB_SetTurnaroundTime+0x124>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d906      	bls.n	800da90 <USB_SetTurnaroundTime+0x98>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	4a26      	ldr	r2, [pc, #152]	; (800db20 <USB_SetTurnaroundTime+0x128>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d802      	bhi.n	800da90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800da8a:	230a      	movs	r3, #10
 800da8c:	617b      	str	r3, [r7, #20]
 800da8e:	e025      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	4a23      	ldr	r2, [pc, #140]	; (800db20 <USB_SetTurnaroundTime+0x128>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d906      	bls.n	800daa6 <USB_SetTurnaroundTime+0xae>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	4a22      	ldr	r2, [pc, #136]	; (800db24 <USB_SetTurnaroundTime+0x12c>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d202      	bcs.n	800daa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800daa0:	2309      	movs	r3, #9
 800daa2:	617b      	str	r3, [r7, #20]
 800daa4:	e01a      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	4a1e      	ldr	r2, [pc, #120]	; (800db24 <USB_SetTurnaroundTime+0x12c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d306      	bcc.n	800dabc <USB_SetTurnaroundTime+0xc4>
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	4a1d      	ldr	r2, [pc, #116]	; (800db28 <USB_SetTurnaroundTime+0x130>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d802      	bhi.n	800dabc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dab6:	2308      	movs	r3, #8
 800dab8:	617b      	str	r3, [r7, #20]
 800daba:	e00f      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	4a1a      	ldr	r2, [pc, #104]	; (800db28 <USB_SetTurnaroundTime+0x130>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d906      	bls.n	800dad2 <USB_SetTurnaroundTime+0xda>
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	4a19      	ldr	r2, [pc, #100]	; (800db2c <USB_SetTurnaroundTime+0x134>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d202      	bcs.n	800dad2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dacc:	2307      	movs	r3, #7
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	e004      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dad2:	2306      	movs	r3, #6
 800dad4:	617b      	str	r3, [r7, #20]
 800dad6:	e001      	b.n	800dadc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dad8:	2309      	movs	r3, #9
 800dada:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	029b      	lsls	r3, r3, #10
 800daf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800daf4:	431a      	orrs	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	371c      	adds	r7, #28
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	00d8acbf 	.word	0x00d8acbf
 800db0c:	00e4e1c0 	.word	0x00e4e1c0
 800db10:	00f42400 	.word	0x00f42400
 800db14:	01067380 	.word	0x01067380
 800db18:	011a499f 	.word	0x011a499f
 800db1c:	01312cff 	.word	0x01312cff
 800db20:	014ca43f 	.word	0x014ca43f
 800db24:	016e3600 	.word	0x016e3600
 800db28:	01a6ab1f 	.word	0x01a6ab1f
 800db2c:	01e84800 	.word	0x01e84800

0800db30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f043 0201 	orr.w	r2, r3, #1
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db52:	b480      	push	{r7}
 800db54:	b083      	sub	sp, #12
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f023 0201 	bic.w	r2, r3, #1
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db90:	78fb      	ldrb	r3, [r7, #3]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d115      	bne.n	800dbc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dba2:	2001      	movs	r0, #1
 800dba4:	f7f6 f9e6 	bl	8003f74 <HAL_Delay>
      ms++;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f001 f985 	bl	800eebe <USB_GetMode>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d01e      	beq.n	800dbf8 <USB_SetCurrentMode+0x84>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b31      	cmp	r3, #49	; 0x31
 800dbbe:	d9f0      	bls.n	800dba2 <USB_SetCurrentMode+0x2e>
 800dbc0:	e01a      	b.n	800dbf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dbc2:	78fb      	ldrb	r3, [r7, #3]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d115      	bne.n	800dbf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dbd4:	2001      	movs	r0, #1
 800dbd6:	f7f6 f9cd 	bl	8003f74 <HAL_Delay>
      ms++;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f001 f96c 	bl	800eebe <USB_GetMode>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <USB_SetCurrentMode+0x84>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b31      	cmp	r3, #49	; 0x31
 800dbf0:	d9f0      	bls.n	800dbd4 <USB_SetCurrentMode+0x60>
 800dbf2:	e001      	b.n	800dbf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e005      	b.n	800dc04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b32      	cmp	r3, #50	; 0x32
 800dbfc:	d101      	bne.n	800dc02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e000      	b.n	800dc04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dc26:	2300      	movs	r3, #0
 800dc28:	613b      	str	r3, [r7, #16]
 800dc2a:	e009      	b.n	800dc40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	3340      	adds	r3, #64	; 0x40
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4413      	add	r3, r2
 800dc36:	2200      	movs	r2, #0
 800dc38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	613b      	str	r3, [r7, #16]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b0e      	cmp	r3, #14
 800dc44:	d9f2      	bls.n	800dc2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d11c      	bne.n	800dc86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc5a:	f043 0302 	orr.w	r3, r3, #2
 800dc5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e005      	b.n	800dc92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc98:	461a      	mov	r2, r3
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca4:	4619      	mov	r1, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcac:	461a      	mov	r2, r3
 800dcae:	680b      	ldr	r3, [r1, #0]
 800dcb0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dcb2:	2103      	movs	r1, #3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f959 	bl	800df6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dcba:	2110      	movs	r1, #16
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f8f1 	bl	800dea4 <USB_FlushTxFifo>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f91d 	bl	800df0c <USB_FlushRxFifo>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dce2:	461a      	mov	r2, r3
 800dce4:	2300      	movs	r3, #0
 800dce6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcee:	461a      	mov	r2, r3
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd00:	2300      	movs	r3, #0
 800dd02:	613b      	str	r3, [r7, #16]
 800dd04:	e043      	b.n	800dd8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	015a      	lsls	r2, r3, #5
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd1c:	d118      	bne.n	800dd50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10a      	bne.n	800dd3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd30:	461a      	mov	r2, r3
 800dd32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	e013      	b.n	800dd62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	015a      	lsls	r2, r3, #5
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	4413      	add	r3, r2
 800dd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd46:	461a      	mov	r2, r3
 800dd48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	e008      	b.n	800dd62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	2300      	movs	r3, #0
 800dd60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	015a      	lsls	r2, r3, #5
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6e:	461a      	mov	r2, r3
 800dd70:	2300      	movs	r3, #0
 800dd72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd80:	461a      	mov	r2, r3
 800dd82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d3b7      	bcc.n	800dd06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd96:	2300      	movs	r3, #0
 800dd98:	613b      	str	r3, [r7, #16]
 800dd9a:	e043      	b.n	800de24 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddb2:	d118      	bne.n	800dde6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10a      	bne.n	800ddd0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ddcc:	6013      	str	r3, [r2, #0]
 800ddce:	e013      	b.n	800ddf8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dddc:	461a      	mov	r2, r3
 800ddde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	e008      	b.n	800ddf8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	015a      	lsls	r2, r3, #5
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	4413      	add	r3, r2
 800ddee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de04:	461a      	mov	r2, r3
 800de06:	2300      	movs	r3, #0
 800de08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	015a      	lsls	r2, r3, #5
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	4413      	add	r3, r2
 800de12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de16:	461a      	mov	r2, r3
 800de18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	3301      	adds	r3, #1
 800de22:	613b      	str	r3, [r7, #16]
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d3b7      	bcc.n	800dd9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800de4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	f043 0210 	orr.w	r2, r3, #16
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699a      	ldr	r2, [r3, #24]
 800de5e:	4b10      	ldr	r3, [pc, #64]	; (800dea0 <USB_DevInit+0x294>)
 800de60:	4313      	orrs	r3, r2
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d005      	beq.n	800de78 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	f043 0208 	orr.w	r2, r3, #8
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d107      	bne.n	800de8e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de86:	f043 0304 	orr.w	r3, r3, #4
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de9a:	b004      	add	sp, #16
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	803c3800 	.word	0x803c3800

0800dea4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3301      	adds	r3, #1
 800deb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4a13      	ldr	r2, [pc, #76]	; (800df08 <USB_FlushTxFifo+0x64>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d901      	bls.n	800dec4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dec0:	2303      	movs	r3, #3
 800dec2:	e01b      	b.n	800defc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	daf2      	bge.n	800deb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	019b      	lsls	r3, r3, #6
 800ded4:	f043 0220 	orr.w	r2, r3, #32
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	4a08      	ldr	r2, [pc, #32]	; (800df08 <USB_FlushTxFifo+0x64>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d901      	bls.n	800deee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e006      	b.n	800defc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	f003 0320 	and.w	r3, r3, #32
 800def6:	2b20      	cmp	r3, #32
 800def8:	d0f0      	beq.n	800dedc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3714      	adds	r7, #20
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	00030d40 	.word	0x00030d40

0800df0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	3301      	adds	r3, #1
 800df1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	4a11      	ldr	r2, [pc, #68]	; (800df68 <USB_FlushRxFifo+0x5c>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d901      	bls.n	800df2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e018      	b.n	800df5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	daf2      	bge.n	800df18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2210      	movs	r2, #16
 800df3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3301      	adds	r3, #1
 800df40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	4a08      	ldr	r2, [pc, #32]	; (800df68 <USB_FlushRxFifo+0x5c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d901      	bls.n	800df4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df4a:	2303      	movs	r3, #3
 800df4c:	e006      	b.n	800df5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	f003 0310 	and.w	r3, r3, #16
 800df56:	2b10      	cmp	r3, #16
 800df58:	d0f0      	beq.n	800df3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	00030d40 	.word	0x00030d40

0800df6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	78fb      	ldrb	r3, [r7, #3]
 800df86:	68f9      	ldr	r1, [r7, #12]
 800df88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df8c:	4313      	orrs	r3, r2
 800df8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b087      	sub	sp, #28
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	f003 0306 	and.w	r3, r3, #6
 800dfb6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d002      	beq.n	800dfc4 <USB_GetDevSpeed+0x26>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2b06      	cmp	r3, #6
 800dfc2:	d102      	bne.n	800dfca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	75fb      	strb	r3, [r7, #23]
 800dfc8:	e001      	b.n	800dfce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800dfca:	230f      	movs	r3, #15
 800dfcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dfce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	371c      	adds	r7, #28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d13a      	bne.n	800e06e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dffe:	69da      	ldr	r2, [r3, #28]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f003 030f 	and.w	r3, r3, #15
 800e008:	2101      	movs	r1, #1
 800e00a:	fa01 f303 	lsl.w	r3, r1, r3
 800e00e:	b29b      	uxth	r3, r3
 800e010:	68f9      	ldr	r1, [r7, #12]
 800e012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e016:	4313      	orrs	r3, r2
 800e018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	4413      	add	r3, r2
 800e022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d155      	bne.n	800e0dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	791b      	ldrb	r3, [r3, #4]
 800e04a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e04c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	059b      	lsls	r3, r3, #22
 800e052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e054:	4313      	orrs	r3, r2
 800e056:	68ba      	ldr	r2, [r7, #8]
 800e058:	0151      	lsls	r1, r2, #5
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	440a      	add	r2, r1
 800e05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	e036      	b.n	800e0dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e074:	69da      	ldr	r2, [r3, #28]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	f003 030f 	and.w	r3, r3, #15
 800e07e:	2101      	movs	r1, #1
 800e080:	fa01 f303 	lsl.w	r3, r1, r3
 800e084:	041b      	lsls	r3, r3, #16
 800e086:	68f9      	ldr	r1, [r7, #12]
 800e088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e08c:	4313      	orrs	r3, r2
 800e08e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4413      	add	r3, r2
 800e098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d11a      	bne.n	800e0dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	791b      	ldrb	r3, [r3, #4]
 800e0c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e0c2:	430b      	orrs	r3, r1
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	0151      	lsls	r1, r2, #5
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	440a      	add	r2, r1
 800e0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
	...

0800e0ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	785b      	ldrb	r3, [r3, #1]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d161      	bne.n	800e1cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e11a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e11e:	d11f      	bne.n	800e160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	015a      	lsls	r2, r3, #5
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	4413      	add	r3, r2
 800e128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	0151      	lsls	r1, r2, #5
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	440a      	add	r2, r1
 800e136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e13a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e13e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	015a      	lsls	r2, r3, #5
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	4413      	add	r3, r2
 800e148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	0151      	lsls	r1, r2, #5
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	440a      	add	r2, r1
 800e156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e15a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e15e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	2101      	movs	r1, #1
 800e172:	fa01 f303 	lsl.w	r3, r1, r3
 800e176:	b29b      	uxth	r3, r3
 800e178:	43db      	mvns	r3, r3
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e180:	4013      	ands	r3, r2
 800e182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e18a:	69da      	ldr	r2, [r3, #28]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	f003 030f 	and.w	r3, r3, #15
 800e194:	2101      	movs	r1, #1
 800e196:	fa01 f303 	lsl.w	r3, r1, r3
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	43db      	mvns	r3, r3
 800e19e:	68f9      	ldr	r1, [r7, #12]
 800e1a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	015a      	lsls	r2, r3, #5
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	0159      	lsls	r1, r3, #5
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	440b      	add	r3, r1
 800e1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4b35      	ldr	r3, [pc, #212]	; (800e29c <USB_DeactivateEndpoint+0x1b0>)
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	600b      	str	r3, [r1, #0]
 800e1ca:	e060      	b.n	800e28e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1e2:	d11f      	bne.n	800e224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	015a      	lsls	r2, r3, #5
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	0151      	lsls	r1, r2, #5
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	440a      	add	r2, r1
 800e1fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	015a      	lsls	r2, r3, #5
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	0151      	lsls	r1, r2, #5
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	440a      	add	r2, r1
 800e21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e21e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e22a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	2101      	movs	r1, #1
 800e236:	fa01 f303 	lsl.w	r3, r1, r3
 800e23a:	041b      	lsls	r3, r3, #16
 800e23c:	43db      	mvns	r3, r3
 800e23e:	68f9      	ldr	r1, [r7, #12]
 800e240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e244:	4013      	ands	r3, r2
 800e246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e24e:	69da      	ldr	r2, [r3, #28]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	f003 030f 	and.w	r3, r3, #15
 800e258:	2101      	movs	r1, #1
 800e25a:	fa01 f303 	lsl.w	r3, r1, r3
 800e25e:	041b      	lsls	r3, r3, #16
 800e260:	43db      	mvns	r3, r3
 800e262:	68f9      	ldr	r1, [r7, #12]
 800e264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e268:	4013      	ands	r3, r2
 800e26a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	015a      	lsls	r2, r3, #5
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	0159      	lsls	r1, r3, #5
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	440b      	add	r3, r1
 800e282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e286:	4619      	mov	r1, r3
 800e288:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <USB_DeactivateEndpoint+0x1b4>)
 800e28a:	4013      	ands	r3, r2
 800e28c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	ec337800 	.word	0xec337800
 800e2a0:	eff37800 	.word	0xeff37800

0800e2a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	785b      	ldrb	r3, [r3, #1]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	f040 810a 	bne.w	800e4d6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d132      	bne.n	800e330 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	693a      	ldr	r2, [r7, #16]
 800e2da:	0151      	lsls	r1, r2, #5
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	440a      	add	r2, r1
 800e2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	015a      	lsls	r2, r3, #5
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	693a      	ldr	r2, [r7, #16]
 800e2fe:	0151      	lsls	r1, r2, #5
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	440a      	add	r2, r1
 800e304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e30c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	440a      	add	r2, r1
 800e324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e328:	0cdb      	lsrs	r3, r3, #19
 800e32a:	04db      	lsls	r3, r3, #19
 800e32c:	6113      	str	r3, [r2, #16]
 800e32e:	e074      	b.n	800e41a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	015a      	lsls	r2, r3, #5
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	4413      	add	r3, r2
 800e338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	693a      	ldr	r2, [r7, #16]
 800e340:	0151      	lsls	r1, r2, #5
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	440a      	add	r2, r1
 800e346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e34a:	0cdb      	lsrs	r3, r3, #19
 800e34c:	04db      	lsls	r3, r3, #19
 800e34e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	015a      	lsls	r2, r3, #5
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	4413      	add	r3, r2
 800e358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	0151      	lsls	r1, r2, #5
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	440a      	add	r2, r1
 800e366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e36a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e36e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	015a      	lsls	r2, r3, #5
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	4413      	add	r3, r2
 800e37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e380:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	6999      	ldr	r1, [r3, #24]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	440b      	add	r3, r1
 800e38c:	1e59      	subs	r1, r3, #1
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	fbb1 f3f3 	udiv	r3, r1, r3
 800e396:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e398:	4b9e      	ldr	r3, [pc, #632]	; (800e614 <USB_EPStartXfer+0x370>)
 800e39a:	400b      	ands	r3, r1
 800e39c:	6939      	ldr	r1, [r7, #16]
 800e39e:	0148      	lsls	r0, r1, #5
 800e3a0:	6979      	ldr	r1, [r7, #20]
 800e3a2:	4401      	add	r1, r0
 800e3a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b8:	691a      	ldr	r2, [r3, #16]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3c2:	6939      	ldr	r1, [r7, #16]
 800e3c4:	0148      	lsls	r0, r1, #5
 800e3c6:	6979      	ldr	r1, [r7, #20]
 800e3c8:	4401      	add	r1, r0
 800e3ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	791b      	ldrb	r3, [r3, #4]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d11f      	bne.n	800e41a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	015a      	lsls	r2, r3, #5
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	0151      	lsls	r1, r2, #5
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	440a      	add	r2, r1
 800e3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e3f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4413      	add	r3, r2
 800e402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	0151      	lsls	r1, r2, #5
 800e40c:	697a      	ldr	r2, [r7, #20]
 800e40e:	440a      	add	r2, r1
 800e410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e418:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	015a      	lsls	r2, r3, #5
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	4413      	add	r3, r2
 800e422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	693a      	ldr	r2, [r7, #16]
 800e42a:	0151      	lsls	r1, r2, #5
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	440a      	add	r2, r1
 800e430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e434:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e438:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	791b      	ldrb	r3, [r3, #4]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d015      	beq.n	800e46e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	699b      	ldr	r3, [r3, #24]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 8106 	beq.w	800e658 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 030f 	and.w	r3, r3, #15
 800e45c:	2101      	movs	r1, #1
 800e45e:	fa01 f303 	lsl.w	r3, r1, r3
 800e462:	6979      	ldr	r1, [r7, #20]
 800e464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e468:	4313      	orrs	r3, r2
 800e46a:	634b      	str	r3, [r1, #52]	; 0x34
 800e46c:	e0f4      	b.n	800e658 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d110      	bne.n	800e4a0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	0151      	lsls	r1, r2, #5
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	440a      	add	r2, r1
 800e494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	e00f      	b.n	800e4c0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	0151      	lsls	r1, r2, #5
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	440a      	add	r2, r1
 800e4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4be:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	6919      	ldr	r1, [r3, #16]
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	781a      	ldrb	r2, [r3, #0]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fa94 	bl	800e9fc <USB_WritePacket>
 800e4d4:	e0c0      	b.n	800e658 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	015a      	lsls	r2, r3, #5
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	4413      	add	r3, r2
 800e4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e2:	691b      	ldr	r3, [r3, #16]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	0151      	lsls	r1, r2, #5
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	440a      	add	r2, r1
 800e4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4f0:	0cdb      	lsrs	r3, r3, #19
 800e4f2:	04db      	lsls	r3, r3, #19
 800e4f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	015a      	lsls	r2, r3, #5
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	0151      	lsls	r1, r2, #5
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	440a      	add	r2, r1
 800e50c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e518:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d123      	bne.n	800e56a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e52e:	691a      	ldr	r2, [r3, #16]
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e538:	6939      	ldr	r1, [r7, #16]
 800e53a:	0148      	lsls	r0, r1, #5
 800e53c:	6979      	ldr	r1, [r7, #20]
 800e53e:	4401      	add	r1, r0
 800e540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e544:	4313      	orrs	r3, r2
 800e546:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	015a      	lsls	r2, r3, #5
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	4413      	add	r3, r2
 800e550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	0151      	lsls	r1, r2, #5
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	440a      	add	r2, r1
 800e55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e566:	6113      	str	r3, [r2, #16]
 800e568:	e037      	b.n	800e5da <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	699a      	ldr	r2, [r3, #24]
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	4413      	add	r3, r2
 800e574:	1e5a      	subs	r2, r3, #1
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	89fa      	ldrh	r2, [r7, #14]
 800e586:	fb03 f202 	mul.w	r2, r3, r2
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	4413      	add	r3, r2
 800e596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e59a:	691a      	ldr	r2, [r3, #16]
 800e59c:	89fb      	ldrh	r3, [r7, #14]
 800e59e:	04d9      	lsls	r1, r3, #19
 800e5a0:	4b1c      	ldr	r3, [pc, #112]	; (800e614 <USB_EPStartXfer+0x370>)
 800e5a2:	400b      	ands	r3, r1
 800e5a4:	6939      	ldr	r1, [r7, #16]
 800e5a6:	0148      	lsls	r0, r1, #5
 800e5a8:	6979      	ldr	r1, [r7, #20]
 800e5aa:	4401      	add	r1, r0
 800e5ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	015a      	lsls	r2, r3, #5
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c0:	691a      	ldr	r2, [r3, #16]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	69db      	ldr	r3, [r3, #28]
 800e5c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5ca:	6939      	ldr	r1, [r7, #16]
 800e5cc:	0148      	lsls	r0, r1, #5
 800e5ce:	6979      	ldr	r1, [r7, #20]
 800e5d0:	4401      	add	r1, r0
 800e5d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	791b      	ldrb	r3, [r3, #4]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d12a      	bne.n	800e638 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d112      	bne.n	800e618 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	015a      	lsls	r2, r3, #5
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	0151      	lsls	r1, r2, #5
 800e604:	697a      	ldr	r2, [r7, #20]
 800e606:	440a      	add	r2, r1
 800e608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e60c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	e011      	b.n	800e638 <USB_EPStartXfer+0x394>
 800e614:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	0151      	lsls	r1, r2, #5
 800e62a:	697a      	ldr	r2, [r7, #20]
 800e62c:	440a      	add	r2, r1
 800e62e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e636:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	4413      	add	r3, r2
 800e640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	0151      	lsls	r1, r2, #5
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	440a      	add	r2, r1
 800e64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e652:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop

0800e664 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	785b      	ldrb	r3, [r3, #1]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	f040 80ab 	bne.w	800e7d8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	699b      	ldr	r3, [r3, #24]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d132      	bne.n	800e6f0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	015a      	lsls	r2, r3, #5
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	4413      	add	r3, r2
 800e692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	0151      	lsls	r1, r2, #5
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	440a      	add	r2, r1
 800e6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	015a      	lsls	r2, r3, #5
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	0151      	lsls	r1, r2, #5
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	440a      	add	r2, r1
 800e6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e6cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	015a      	lsls	r2, r3, #5
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	0151      	lsls	r1, r2, #5
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	440a      	add	r2, r1
 800e6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e8:	0cdb      	lsrs	r3, r3, #19
 800e6ea:	04db      	lsls	r3, r3, #19
 800e6ec:	6113      	str	r3, [r2, #16]
 800e6ee:	e04e      	b.n	800e78e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	0151      	lsls	r1, r2, #5
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	440a      	add	r2, r1
 800e706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e70a:	0cdb      	lsrs	r3, r3, #19
 800e70c:	04db      	lsls	r3, r3, #19
 800e70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	015a      	lsls	r2, r3, #5
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4413      	add	r3, r2
 800e718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	0151      	lsls	r1, r2, #5
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	440a      	add	r2, r1
 800e726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e72a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e72e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e732:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	699a      	ldr	r2, [r3, #24]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d903      	bls.n	800e748 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	68da      	ldr	r2, [r3, #12]
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	0151      	lsls	r1, r2, #5
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	440a      	add	r2, r1
 800e75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	015a      	lsls	r2, r3, #5
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	4413      	add	r3, r2
 800e770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e774:	691a      	ldr	r2, [r3, #16]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	0148      	lsls	r0, r1, #5
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	4401      	add	r1, r0
 800e786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e78a:	4313      	orrs	r3, r2
 800e78c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	015a      	lsls	r2, r3, #5
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4413      	add	r3, r2
 800e796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	0151      	lsls	r1, r2, #5
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	440a      	add	r2, r1
 800e7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7ac:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d071      	beq.n	800e89a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 030f 	and.w	r3, r3, #15
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7cc:	68f9      	ldr	r1, [r7, #12]
 800e7ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	634b      	str	r3, [r1, #52]	; 0x34
 800e7d6:	e060      	b.n	800e89a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	0151      	lsls	r1, r2, #5
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	440a      	add	r2, r1
 800e7ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7f2:	0cdb      	lsrs	r3, r3, #19
 800e7f4:	04db      	lsls	r3, r3, #19
 800e7f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	0151      	lsls	r1, r2, #5
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	440a      	add	r2, r1
 800e80e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e812:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e816:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e81a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d003      	beq.n	800e82c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	68da      	ldr	r2, [r3, #12]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	0151      	lsls	r1, r2, #5
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	440a      	add	r2, r1
 800e84a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e84e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e852:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	015a      	lsls	r2, r3, #5
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e860:	691a      	ldr	r2, [r3, #16]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	69db      	ldr	r3, [r3, #28]
 800e866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e86a:	68b9      	ldr	r1, [r7, #8]
 800e86c:	0148      	lsls	r0, r1, #5
 800e86e:	68f9      	ldr	r1, [r7, #12]
 800e870:	4401      	add	r1, r0
 800e872:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e876:	4313      	orrs	r3, r2
 800e878:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	0151      	lsls	r1, r2, #5
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	440a      	add	r2, r1
 800e890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e898:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d14a      	bne.n	800e95c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	015a      	lsls	r2, r3, #5
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8de:	f040 8086 	bne.w	800e9ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	015a      	lsls	r2, r3, #5
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	7812      	ldrb	r2, [r2, #0]
 800e8f6:	0151      	lsls	r1, r2, #5
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	440a      	add	r2, r1
 800e8fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e900:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e904:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	015a      	lsls	r2, r3, #5
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	7812      	ldrb	r2, [r2, #0]
 800e91a:	0151      	lsls	r1, r2, #5
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	440a      	add	r2, r1
 800e920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e928:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3301      	adds	r3, #1
 800e92e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f242 7210 	movw	r2, #10000	; 0x2710
 800e936:	4293      	cmp	r3, r2
 800e938:	d902      	bls.n	800e940 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	75fb      	strb	r3, [r7, #23]
          break;
 800e93e:	e056      	b.n	800e9ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	015a      	lsls	r2, r3, #5
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	4413      	add	r3, r2
 800e94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e958:	d0e7      	beq.n	800e92a <USB_EPStopXfer+0x82>
 800e95a:	e048      	b.n	800e9ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	015a      	lsls	r2, r3, #5
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	4413      	add	r3, r2
 800e966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e974:	d13b      	bne.n	800e9ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	015a      	lsls	r2, r3, #5
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	4413      	add	r3, r2
 800e980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	683a      	ldr	r2, [r7, #0]
 800e988:	7812      	ldrb	r2, [r2, #0]
 800e98a:	0151      	lsls	r1, r2, #5
 800e98c:	693a      	ldr	r2, [r7, #16]
 800e98e:	440a      	add	r2, r1
 800e990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e994:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e998:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	7812      	ldrb	r2, [r2, #0]
 800e9ae:	0151      	lsls	r1, r2, #5
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	440a      	add	r2, r1
 800e9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f242 7210 	movw	r2, #10000	; 0x2710
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d902      	bls.n	800e9d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	75fb      	strb	r3, [r7, #23]
          break;
 800e9d2:	e00c      	b.n	800e9ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9ec:	d0e7      	beq.n	800e9be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	371c      	adds	r7, #28
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b089      	sub	sp, #36	; 0x24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	4611      	mov	r1, r2
 800ea08:	461a      	mov	r2, r3
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	71fb      	strb	r3, [r7, #7]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ea1a:	88bb      	ldrh	r3, [r7, #4]
 800ea1c:	3303      	adds	r3, #3
 800ea1e:	089b      	lsrs	r3, r3, #2
 800ea20:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ea22:	2300      	movs	r3, #0
 800ea24:	61bb      	str	r3, [r7, #24]
 800ea26:	e018      	b.n	800ea5a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	031a      	lsls	r2, r3, #12
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	4413      	add	r3, r2
 800ea30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea34:	461a      	mov	r2, r3
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	3301      	adds	r3, #1
 800ea46:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	3301      	adds	r3, #1
 800ea52:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	3301      	adds	r3, #1
 800ea58:	61bb      	str	r3, [r7, #24]
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d3e2      	bcc.n	800ea28 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3724      	adds	r7, #36	; 0x24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b08b      	sub	sp, #44	; 0x2c
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	089b      	lsrs	r3, r3, #2
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ea8e:	88fb      	ldrh	r3, [r7, #6]
 800ea90:	f003 0303 	and.w	r3, r3, #3
 800ea94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ea96:	2300      	movs	r3, #0
 800ea98:	623b      	str	r3, [r7, #32]
 800ea9a:	e014      	b.n	800eac6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	601a      	str	r2, [r3, #0]
    pDest++;
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaaa:	3301      	adds	r3, #1
 800eaac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	3301      	adds	r3, #1
 800eab2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	3301      	adds	r3, #1
 800eab8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	3301      	adds	r3, #1
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	3301      	adds	r3, #1
 800eac4:	623b      	str	r3, [r7, #32]
 800eac6:	6a3a      	ldr	r2, [r7, #32]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3e6      	bcc.n	800ea9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eace:	8bfb      	ldrh	r3, [r7, #30]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d01e      	beq.n	800eb12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ead4:	2300      	movs	r3, #0
 800ead6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eade:	461a      	mov	r2, r3
 800eae0:	f107 0310 	add.w	r3, r7, #16
 800eae4:	6812      	ldr	r2, [r2, #0]
 800eae6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	fa22 f303 	lsr.w	r3, r2, r3
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	701a      	strb	r2, [r3, #0]
      i++;
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	3301      	adds	r3, #1
 800eafe:	623b      	str	r3, [r7, #32]
      pDest++;
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	3301      	adds	r3, #1
 800eb04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800eb06:	8bfb      	ldrh	r3, [r7, #30]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eb0c:	8bfb      	ldrh	r3, [r7, #30]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1ea      	bne.n	800eae8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	372c      	adds	r7, #44	; 0x2c
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	785b      	ldrb	r3, [r3, #1]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d12c      	bne.n	800eb96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	db12      	blt.n	800eb74 <USB_EPSetStall+0x54>
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00f      	beq.n	800eb74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	0151      	lsls	r1, r2, #5
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	440a      	add	r2, r1
 800eb6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eb72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	015a      	lsls	r2, r3, #5
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	0151      	lsls	r1, r2, #5
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	440a      	add	r2, r1
 800eb8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	e02b      	b.n	800ebee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	015a      	lsls	r2, r3, #5
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	db12      	blt.n	800ebce <USB_EPSetStall+0xae>
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00f      	beq.n	800ebce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	0151      	lsls	r1, r2, #5
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	440a      	add	r2, r1
 800ebc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ebcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	015a      	lsls	r2, r3, #5
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	0151      	lsls	r1, r2, #5
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	440a      	add	r2, r1
 800ebe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ebec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	785b      	ldrb	r3, [r3, #1]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d128      	bne.n	800ec6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	0151      	lsls	r1, r2, #5
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	440a      	add	r2, r1
 800ec2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	791b      	ldrb	r3, [r3, #4]
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d003      	beq.n	800ec48 <USB_EPClearStall+0x4c>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	791b      	ldrb	r3, [r3, #4]
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d138      	bne.n	800ecba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	0151      	lsls	r1, r2, #5
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	440a      	add	r2, r1
 800ec5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec66:	6013      	str	r3, [r2, #0]
 800ec68:	e027      	b.n	800ecba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	015a      	lsls	r2, r3, #5
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	4413      	add	r3, r2
 800ec72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	0151      	lsls	r1, r2, #5
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	440a      	add	r2, r1
 800ec80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	791b      	ldrb	r3, [r3, #4]
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d003      	beq.n	800ec9a <USB_EPClearStall+0x9e>
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	791b      	ldrb	r3, [r3, #4]
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	d10f      	bne.n	800ecba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	015a      	lsls	r2, r3, #5
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	4413      	add	r3, r2
 800eca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	0151      	lsls	r1, r2, #5
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	440a      	add	r2, r1
 800ecb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ece6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ecea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ecfc:	68f9      	ldr	r1, [r7, #12]
 800ecfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed02:	4313      	orrs	r3, r2
 800ed04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3714      	adds	r7, #20
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed2e:	f023 0303 	bic.w	r3, r3, #3
 800ed32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed42:	f023 0302 	bic.w	r3, r3, #2
 800ed46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed84:	f043 0302 	orr.w	r3, r3, #2
 800ed88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3714      	adds	r7, #20
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	4013      	ands	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800edb0:	68fb      	ldr	r3, [r7, #12]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3714      	adds	r7, #20
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800edbe:	b480      	push	{r7}
 800edc0:	b085      	sub	sp, #20
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	68ba      	ldr	r2, [r7, #8]
 800edde:	4013      	ands	r3, r2
 800ede0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	0c1b      	lsrs	r3, r3, #16
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3714      	adds	r7, #20
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b085      	sub	sp, #20
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee04:	699b      	ldr	r3, [r3, #24]
 800ee06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee0e:	69db      	ldr	r3, [r3, #28]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	4013      	ands	r3, r2
 800ee14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	b29b      	uxth	r3, r3
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3714      	adds	r7, #20
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee26:	b480      	push	{r7}
 800ee28:	b085      	sub	sp, #20
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ee36:	78fb      	ldrb	r3, [r7, #3]
 800ee38:	015a      	lsls	r2, r3, #5
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4013      	ands	r3, r2
 800ee52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee54:	68bb      	ldr	r3, [r7, #8]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr

0800ee62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee62:	b480      	push	{r7}
 800ee64:	b087      	sub	sp, #28
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ee86:	78fb      	ldrb	r3, [r7, #3]
 800ee88:	f003 030f 	and.w	r3, r3, #15
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ee92:	01db      	lsls	r3, r3, #7
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ee9c:	78fb      	ldrb	r3, [r7, #3]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	693a      	ldr	r2, [r7, #16]
 800eeac:	4013      	ands	r3, r2
 800eeae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	371c      	adds	r7, #28
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b083      	sub	sp, #12
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	695b      	ldr	r3, [r3, #20]
 800eeca:	f003 0301 	and.w	r3, r3, #1
}
 800eece:	4618      	mov	r0, r3
 800eed0:	370c      	adds	r7, #12
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eeda:	b480      	push	{r7}
 800eedc:	b085      	sub	sp, #20
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eef8:	f023 0307 	bic.w	r3, r3, #7
 800eefc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	333c      	adds	r3, #60	; 0x3c
 800ef32:	3304      	adds	r3, #4
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	4a1c      	ldr	r2, [pc, #112]	; (800efac <USB_EP0_OutStart+0x8c>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d90a      	bls.n	800ef56 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef50:	d101      	bne.n	800ef56 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	e024      	b.n	800efa0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	2300      	movs	r3, #0
 800ef60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef84:	f043 0318 	orr.w	r3, r3, #24
 800ef88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ef9c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	4f54300a 	.word	0x4f54300a

0800efb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800efb8:	2300      	movs	r3, #0
 800efba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	3301      	adds	r3, #1
 800efc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4a13      	ldr	r2, [pc, #76]	; (800f014 <USB_CoreReset+0x64>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d901      	bls.n	800efce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800efca:	2303      	movs	r3, #3
 800efcc:	e01b      	b.n	800f006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	daf2      	bge.n	800efbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	f043 0201 	orr.w	r2, r3, #1
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4a09      	ldr	r2, [pc, #36]	; (800f014 <USB_CoreReset+0x64>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d901      	bls.n	800eff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eff4:	2303      	movs	r3, #3
 800eff6:	e006      	b.n	800f006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	f003 0301 	and.w	r3, r3, #1
 800f000:	2b01      	cmp	r3, #1
 800f002:	d0f0      	beq.n	800efe6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	00030d40 	.word	0x00030d40

0800f018 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f01c:	4904      	ldr	r1, [pc, #16]	; (800f030 <MX_FATFS_Init+0x18>)
 800f01e:	4805      	ldr	r0, [pc, #20]	; (800f034 <MX_FATFS_Init+0x1c>)
 800f020:	f004 fd46 	bl	8013ab0 <FATFS_LinkDriver>
 800f024:	4603      	mov	r3, r0
 800f026:	461a      	mov	r2, r3
 800f028:	4b03      	ldr	r3, [pc, #12]	; (800f038 <MX_FATFS_Init+0x20>)
 800f02a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f02c:	bf00      	nop
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	20000ec4 	.word	0x20000ec4
 800f034:	080178d4 	.word	0x080178d4
 800f038:	20000ec0 	.word	0x20000ec0

0800f03c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f03c:	b480      	push	{r7}
 800f03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f040:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f042:	4618      	mov	r0, r3
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f052:	2300      	movs	r3, #0
 800f054:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f056:	f000 f879 	bl	800f14c <BSP_SD_IsDetected>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d001      	beq.n	800f064 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f060:	2302      	movs	r3, #2
 800f062:	e012      	b.n	800f08a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f064:	480b      	ldr	r0, [pc, #44]	; (800f094 <BSP_SD_Init+0x48>)
 800f066:	f7fa f8d1 	bl	800920c <HAL_SD_Init>
 800f06a:	4603      	mov	r3, r0
 800f06c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d109      	bne.n	800f088 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f078:	4806      	ldr	r0, [pc, #24]	; (800f094 <BSP_SD_Init+0x48>)
 800f07a:	f7fa ff9d 	bl	8009fb8 <HAL_SD_ConfigWideBusOperation>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d001      	beq.n	800f088 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f088:	79fb      	ldrb	r3, [r7, #7]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	2000061c 	.word	0x2000061c

0800f098 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	68f9      	ldr	r1, [r7, #12]
 800f0b4:	4806      	ldr	r0, [pc, #24]	; (800f0d0 <BSP_SD_ReadBlocks+0x38>)
 800f0b6:	f7fa f9d1 	bl	800945c <HAL_SD_ReadBlocks>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2000061c 	.word	0x2000061c

0800f0d4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b088      	sub	sp, #32
 800f0d8:	af02      	add	r7, sp, #8
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	68f9      	ldr	r1, [r7, #12]
 800f0f0:	4806      	ldr	r0, [pc, #24]	; (800f10c <BSP_SD_WriteBlocks+0x38>)
 800f0f2:	f7fa fb45 	bl	8009780 <HAL_SD_WriteBlocks>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	2000061c 	.word	0x2000061c

0800f110 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f114:	4805      	ldr	r0, [pc, #20]	; (800f12c <BSP_SD_GetCardState+0x1c>)
 800f116:	f7fb f863 	bl	800a1e0 <HAL_SD_GetCardState>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	bf14      	ite	ne
 800f120:	2301      	movne	r3, #1
 800f122:	2300      	moveq	r3, #0
 800f124:	b2db      	uxtb	r3, r3
}
 800f126:	4618      	mov	r0, r3
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	2000061c 	.word	0x2000061c

0800f130 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f138:	6879      	ldr	r1, [r7, #4]
 800f13a:	4803      	ldr	r0, [pc, #12]	; (800f148 <BSP_SD_GetCardInfo+0x18>)
 800f13c:	f7fa ff10 	bl	8009f60 <HAL_SD_GetCardInfo>
}
 800f140:	bf00      	nop
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	2000061c 	.word	0x2000061c

0800f14c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f152:	2301      	movs	r3, #1
 800f154:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f156:	f000 f80b 	bl	800f170 <BSP_PlatformIsDetected>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f160:	2300      	movs	r3, #0
 800f162:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	b2db      	uxtb	r3, r3
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f176:	2301      	movs	r3, #1
 800f178:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f17a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f17e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f182:	f7f5 fa79 	bl	8004678 <HAL_GPIO_ReadPin>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800f18c:	2300      	movs	r3, #0
 800f18e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f190:	79fb      	ldrb	r3, [r7, #7]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f1a6:	4b0b      	ldr	r3, [pc, #44]	; (800f1d4 <SD_CheckStatus+0x38>)
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f1ac:	f7ff ffb0 	bl	800f110 <BSP_SD_GetCardState>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d107      	bne.n	800f1c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f1b6:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <SD_CheckStatus+0x38>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	f023 0301 	bic.w	r3, r3, #1
 800f1c0:	b2da      	uxtb	r2, r3
 800f1c2:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <SD_CheckStatus+0x38>)
 800f1c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f1c6:	4b03      	ldr	r3, [pc, #12]	; (800f1d4 <SD_CheckStatus+0x38>)
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	b2db      	uxtb	r3, r3
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	2000000d 	.word	0x2000000d

0800f1d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f1e2:	4b0b      	ldr	r3, [pc, #44]	; (800f210 <SD_initialize+0x38>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f1e8:	f7ff ff30 	bl	800f04c <BSP_SD_Init>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d107      	bne.n	800f202 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f1f2:	79fb      	ldrb	r3, [r7, #7]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff ffd1 	bl	800f19c <SD_CheckStatus>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	4b04      	ldr	r3, [pc, #16]	; (800f210 <SD_initialize+0x38>)
 800f200:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f202:	4b03      	ldr	r3, [pc, #12]	; (800f210 <SD_initialize+0x38>)
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	b2db      	uxtb	r3, r3
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	2000000d 	.word	0x2000000d

0800f214 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f21e:	79fb      	ldrb	r3, [r7, #7]
 800f220:	4618      	mov	r0, r3
 800f222:	f7ff ffbb 	bl	800f19c <SD_CheckStatus>
 800f226:	4603      	mov	r3, r0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60b9      	str	r1, [r7, #8]
 800f238:	607a      	str	r2, [r7, #4]
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f248:	683a      	ldr	r2, [r7, #0]
 800f24a:	6879      	ldr	r1, [r7, #4]
 800f24c:	68b8      	ldr	r0, [r7, #8]
 800f24e:	f7ff ff23 	bl	800f098 <BSP_SD_ReadBlocks>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d107      	bne.n	800f268 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f258:	bf00      	nop
 800f25a:	f7ff ff59 	bl	800f110 <BSP_SD_GetCardState>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1fa      	bne.n	800f25a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f268:	7dfb      	ldrb	r3, [r7, #23]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3718      	adds	r7, #24
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b086      	sub	sp, #24
 800f276:	af00      	add	r7, sp, #0
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
 800f27e:	4603      	mov	r3, r0
 800f280:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	68b8      	ldr	r0, [r7, #8]
 800f290:	f7ff ff20 	bl	800f0d4 <BSP_SD_WriteBlocks>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d107      	bne.n	800f2aa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f29a:	bf00      	nop
 800f29c:	f7ff ff38 	bl	800f110 <BSP_SD_GetCardState>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1fa      	bne.n	800f29c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3718      	adds	r7, #24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b08c      	sub	sp, #48	; 0x30
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	603a      	str	r2, [r7, #0]
 800f2be:	71fb      	strb	r3, [r7, #7]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f2ca:	4b25      	ldr	r3, [pc, #148]	; (800f360 <SD_ioctl+0xac>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <SD_ioctl+0x28>
 800f2d8:	2303      	movs	r3, #3
 800f2da:	e03c      	b.n	800f356 <SD_ioctl+0xa2>

  switch (cmd)
 800f2dc:	79bb      	ldrb	r3, [r7, #6]
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d834      	bhi.n	800f34c <SD_ioctl+0x98>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <SD_ioctl+0x34>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f2f9 	.word	0x0800f2f9
 800f2ec:	0800f301 	.word	0x0800f301
 800f2f0:	0800f319 	.word	0x0800f319
 800f2f4:	0800f333 	.word	0x0800f333
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f2fe:	e028      	b.n	800f352 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f300:	f107 0308 	add.w	r3, r7, #8
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff ff13 	bl	800f130 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f30a:	6a3a      	ldr	r2, [r7, #32]
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f316:	e01c      	b.n	800f352 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff ff07 	bl	800f130 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	b29a      	uxth	r2, r3
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f32a:	2300      	movs	r3, #0
 800f32c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f330:	e00f      	b.n	800f352 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f332:	f107 0308 	add.w	r3, r7, #8
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff fefa 	bl	800f130 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	0a5a      	lsrs	r2, r3, #9
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f34a:	e002      	b.n	800f352 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f34c:	2304      	movs	r3, #4
 800f34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f356:	4618      	mov	r0, r3
 800f358:	3730      	adds	r7, #48	; 0x30
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	2000000d 	.word	0x2000000d

0800f364 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f370:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f374:	f005 f978 	bl	8014668 <USBD_static_malloc>
 800f378:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d105      	bne.n	800f38c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f388:	2302      	movs	r3, #2
 800f38a:	e066      	b.n	800f45a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	7c1b      	ldrb	r3, [r3, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d119      	bne.n	800f3d0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f39c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	2181      	movs	r1, #129	; 0x81
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f004 ff99 	bl	80142dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f3b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3b4:	2202      	movs	r2, #2
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f004 ff8f 	bl	80142dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2210      	movs	r2, #16
 800f3ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f3ce:	e016      	b.n	800f3fe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f3d0:	2340      	movs	r3, #64	; 0x40
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	2181      	movs	r1, #129	; 0x81
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f004 ff80 	bl	80142dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f3e2:	2340      	movs	r3, #64	; 0x40
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f004 ff77 	bl	80142dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2210      	movs	r2, #16
 800f3fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3fe:	2308      	movs	r3, #8
 800f400:	2203      	movs	r2, #3
 800f402:	2182      	movs	r1, #130	; 0x82
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f004 ff69 	bl	80142dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2200      	movs	r2, #0
 800f428:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	7c1b      	ldrb	r3, [r3, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f43a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f43e:	2101      	movs	r1, #1
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f005 f8c5 	bl	80145d0 <USBD_LL_PrepareReceive>
 800f446:	e007      	b.n	800f458 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	2101      	movs	r1, #1
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f005 f8bc 	bl	80145d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3710      	adds	r7, #16
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b082      	sub	sp, #8
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
 800f46a:	460b      	mov	r3, r1
 800f46c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f46e:	2181      	movs	r1, #129	; 0x81
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f004 ff71 	bl	8014358 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f47c:	2101      	movs	r1, #1
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f004 ff6a 	bl	8014358 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f48c:	2182      	movs	r1, #130	; 0x82
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f004 ff62 	bl	8014358 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00e      	beq.n	800f4cc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f005 f8e0 	bl	8014684 <USBD_static_free>
    pdev->pClassData = NULL;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
	...

0800f4d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e0af      	b.n	800f660 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d03f      	beq.n	800f58c <USBD_CDC_Setup+0xb4>
 800f50c:	2b20      	cmp	r3, #32
 800f50e:	f040 809f 	bne.w	800f650 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	88db      	ldrh	r3, [r3, #6]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d02e      	beq.n	800f578 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	b25b      	sxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	da16      	bge.n	800f552 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f530:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	88d2      	ldrh	r2, [r2, #6]
 800f536:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	88db      	ldrh	r3, [r3, #6]
 800f53c:	2b07      	cmp	r3, #7
 800f53e:	bf28      	it	cs
 800f540:	2307      	movcs	r3, #7
 800f542:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	89fa      	ldrh	r2, [r7, #14]
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f001 fb19 	bl	8010b82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f550:	e085      	b.n	800f65e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	785a      	ldrb	r2, [r3, #1]
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	88db      	ldrh	r3, [r3, #6]
 800f560:	b2da      	uxtb	r2, r3
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f568:	6939      	ldr	r1, [r7, #16]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	88db      	ldrh	r3, [r3, #6]
 800f56e:	461a      	mov	r2, r3
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f001 fb32 	bl	8010bda <USBD_CtlPrepareRx>
      break;
 800f576:	e072      	b.n	800f65e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	7850      	ldrb	r0, [r2, #1]
 800f584:	2200      	movs	r2, #0
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	4798      	blx	r3
      break;
 800f58a:	e068      	b.n	800f65e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	785b      	ldrb	r3, [r3, #1]
 800f590:	2b0b      	cmp	r3, #11
 800f592:	d852      	bhi.n	800f63a <USBD_CDC_Setup+0x162>
 800f594:	a201      	add	r2, pc, #4	; (adr r2, 800f59c <USBD_CDC_Setup+0xc4>)
 800f596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f59a:	bf00      	nop
 800f59c:	0800f5cd 	.word	0x0800f5cd
 800f5a0:	0800f649 	.word	0x0800f649
 800f5a4:	0800f63b 	.word	0x0800f63b
 800f5a8:	0800f63b 	.word	0x0800f63b
 800f5ac:	0800f63b 	.word	0x0800f63b
 800f5b0:	0800f63b 	.word	0x0800f63b
 800f5b4:	0800f63b 	.word	0x0800f63b
 800f5b8:	0800f63b 	.word	0x0800f63b
 800f5bc:	0800f63b 	.word	0x0800f63b
 800f5c0:	0800f63b 	.word	0x0800f63b
 800f5c4:	0800f5f7 	.word	0x0800f5f7
 800f5c8:	0800f621 	.word	0x0800f621
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b03      	cmp	r3, #3
 800f5d6:	d107      	bne.n	800f5e8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f5d8:	f107 030a 	add.w	r3, r7, #10
 800f5dc:	2202      	movs	r2, #2
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f001 face 	bl	8010b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5e6:	e032      	b.n	800f64e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f001 fa58 	bl	8010aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	75fb      	strb	r3, [r7, #23]
          break;
 800f5f4:	e02b      	b.n	800f64e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	d107      	bne.n	800f612 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f602:	f107 030d 	add.w	r3, r7, #13
 800f606:	2201      	movs	r2, #1
 800f608:	4619      	mov	r1, r3
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f001 fab9 	bl	8010b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f610:	e01d      	b.n	800f64e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f001 fa43 	bl	8010aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f61a:	2303      	movs	r3, #3
 800f61c:	75fb      	strb	r3, [r7, #23]
          break;
 800f61e:	e016      	b.n	800f64e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b03      	cmp	r3, #3
 800f62a:	d00f      	beq.n	800f64c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f001 fa36 	bl	8010aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f634:	2303      	movs	r3, #3
 800f636:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f638:	e008      	b.n	800f64c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f001 fa2f 	bl	8010aa0 <USBD_CtlError>
          ret = USBD_FAIL;
 800f642:	2303      	movs	r3, #3
 800f644:	75fb      	strb	r3, [r7, #23]
          break;
 800f646:	e002      	b.n	800f64e <USBD_CDC_Setup+0x176>
          break;
 800f648:	bf00      	nop
 800f64a:	e008      	b.n	800f65e <USBD_CDC_Setup+0x186>
          break;
 800f64c:	bf00      	nop
      }
      break;
 800f64e:	e006      	b.n	800f65e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f001 fa24 	bl	8010aa0 <USBD_CtlError>
      ret = USBD_FAIL;
 800f658:	2303      	movs	r3, #3
 800f65a:	75fb      	strb	r3, [r7, #23]
      break;
 800f65c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	460b      	mov	r3, r1
 800f672:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f67a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f686:	2303      	movs	r3, #3
 800f688:	e04f      	b.n	800f72a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f690:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f692:	78fa      	ldrb	r2, [r7, #3]
 800f694:	6879      	ldr	r1, [r7, #4]
 800f696:	4613      	mov	r3, r2
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4413      	add	r3, r2
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	440b      	add	r3, r1
 800f6a0:	3318      	adds	r3, #24
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d029      	beq.n	800f6fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f6a8:	78fa      	ldrb	r2, [r7, #3]
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	440b      	add	r3, r1
 800f6b6:	3318      	adds	r3, #24
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	78f9      	ldrb	r1, [r7, #3]
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	460b      	mov	r3, r1
 800f6c0:	00db      	lsls	r3, r3, #3
 800f6c2:	440b      	add	r3, r1
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4403      	add	r3, r0
 800f6c8:	3348      	adds	r3, #72	; 0x48
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f6d0:	fb01 f303 	mul.w	r3, r1, r3
 800f6d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d110      	bne.n	800f6fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f6da:	78fa      	ldrb	r2, [r7, #3]
 800f6dc:	6879      	ldr	r1, [r7, #4]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3318      	adds	r3, #24
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f6ee:	78f9      	ldrb	r1, [r7, #3]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f004 ff33 	bl	8014560 <USBD_LL_Transmit>
 800f6fa:	e015      	b.n	800f728 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	2200      	movs	r2, #0
 800f700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00b      	beq.n	800f728 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f724:	78fa      	ldrb	r2, [r7, #3]
 800f726:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	460b      	mov	r3, r1
 800f73c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f744:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f750:	2303      	movs	r3, #3
 800f752:	e015      	b.n	800f780 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f754:	78fb      	ldrb	r3, [r7, #3]
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f004 ff71 	bl	8014640 <USBD_LL_GetRxDataSize>
 800f75e:	4602      	mov	r2, r0
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f77a:	4611      	mov	r1, r2
 800f77c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f796:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d101      	bne.n	800f7a2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	e01b      	b.n	800f7da <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d015      	beq.n	800f7d8 <USBD_CDC_EP0_RxReady+0x50>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f7b2:	2bff      	cmp	r3, #255	; 0xff
 800f7b4:	d010      	beq.n	800f7d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f7c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f7cc:	b292      	uxth	r2, r2
 800f7ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	22ff      	movs	r2, #255	; 0xff
 800f7d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
	...

0800f7e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2243      	movs	r2, #67	; 0x43
 800f7f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f7f2:	4b03      	ldr	r3, [pc, #12]	; (800f800 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr
 800f800:	20000098 	.word	0x20000098

0800f804 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2243      	movs	r2, #67	; 0x43
 800f810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f812:	4b03      	ldr	r3, [pc, #12]	; (800f820 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	20000054 	.word	0x20000054

0800f824 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2243      	movs	r2, #67	; 0x43
 800f830:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f832:	4b03      	ldr	r3, [pc, #12]	; (800f840 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	200000dc 	.word	0x200000dc

0800f844 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	220a      	movs	r2, #10
 800f850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f852:	4b03      	ldr	r3, [pc, #12]	; (800f860 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f854:	4618      	mov	r0, r3
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	20000010 	.word	0x20000010

0800f864 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f874:	2303      	movs	r3, #3
 800f876:	e004      	b.n	800f882 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	370c      	adds	r7, #12
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f88e:	b480      	push	{r7}
 800f890:	b087      	sub	sp, #28
 800f892:	af00      	add	r7, sp, #0
 800f894:	60f8      	str	r0, [r7, #12]
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f8a8:	2303      	movs	r3, #3
 800f8aa:	e008      	b.n	800f8be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	371c      	adds	r7, #28
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	e004      	b.n	800f8f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f90a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f90c:	2301      	movs	r3, #1
 800f90e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f91a:	2303      	movs	r3, #3
 800f91c:	e01a      	b.n	800f954 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f924:	2b00      	cmp	r3, #0
 800f926:	d114      	bne.n	800f952 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f946:	2181      	movs	r1, #129	; 0x81
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f004 fe09 	bl	8014560 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f952:	7bfb      	ldrb	r3, [r7, #15]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f96a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f976:	2303      	movs	r3, #3
 800f978:	e016      	b.n	800f9a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	7c1b      	ldrb	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d109      	bne.n	800f996 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f98c:	2101      	movs	r1, #1
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f004 fe1e 	bl	80145d0 <USBD_LL_PrepareReceive>
 800f994:	e007      	b.n	800f9a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f99c:	2340      	movs	r3, #64	; 0x40
 800f99e:	2101      	movs	r1, #1
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f004 fe15 	bl	80145d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d101      	bne.n	800f9c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	e01f      	b.n	800fa08 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d003      	beq.n	800f9ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	79fa      	ldrb	r2, [r7, #7]
 800f9fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f004 fbf1 	bl	80141e4 <USBD_LL_Init>
 800fa02:	4603      	mov	r3, r0
 800fa04:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fa06:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3718      	adds	r7, #24
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e016      	b.n	800fa56 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d00b      	beq.n	800fa54 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	f107 020e 	add.w	r2, r7, #14
 800fa48:	4610      	mov	r0, r2
 800fa4a:	4798      	blx	r3
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f004 fc06 	bl	8014278 <USBD_LL_Start>
 800fa6c:	4603      	mov	r3, r0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fa76:	b480      	push	{r7}
 800fa78:	b083      	sub	sp, #12
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fa98:	2303      	movs	r3, #3
 800fa9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d009      	beq.n	800faba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	78fa      	ldrb	r2, [r7, #3]
 800fab0:	4611      	mov	r1, r2
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	4798      	blx	r3
 800fab6:	4603      	mov	r3, r0
 800fab8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d007      	beq.n	800faea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	78fa      	ldrb	r2, [r7, #3]
 800fae4:	4611      	mov	r1, r2
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	4798      	blx	r3
  }

  return USBD_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 ff90 	bl	8010a2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fb28:	f003 031f 	and.w	r3, r3, #31
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d01a      	beq.n	800fb66 <USBD_LL_SetupStage+0x72>
 800fb30:	2b02      	cmp	r3, #2
 800fb32:	d822      	bhi.n	800fb7a <USBD_LL_SetupStage+0x86>
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d002      	beq.n	800fb3e <USBD_LL_SetupStage+0x4a>
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d00a      	beq.n	800fb52 <USBD_LL_SetupStage+0x5e>
 800fb3c:	e01d      	b.n	800fb7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fa62 	bl	8010010 <USBD_StdDevReq>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb50:	e020      	b.n	800fb94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb58:	4619      	mov	r1, r3
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fac6 	bl	80100ec <USBD_StdItfReq>
 800fb60:	4603      	mov	r3, r0
 800fb62:	73fb      	strb	r3, [r7, #15]
      break;
 800fb64:	e016      	b.n	800fb94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fb05 	bl	801017e <USBD_StdEPReq>
 800fb74:	4603      	mov	r3, r0
 800fb76:	73fb      	strb	r3, [r7, #15]
      break;
 800fb78:	e00c      	b.n	800fb94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fb80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f004 fc1b 	bl	80143c4 <USBD_LL_StallEP>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73fb      	strb	r3, [r7, #15]
      break;
 800fb92:	bf00      	nop
  }

  return ret;
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b086      	sub	sp, #24
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	60f8      	str	r0, [r7, #12]
 800fba6:	460b      	mov	r3, r1
 800fba8:	607a      	str	r2, [r7, #4]
 800fbaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fbac:	7afb      	ldrb	r3, [r7, #11]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d138      	bne.n	800fc24 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fbb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fbc0:	2b03      	cmp	r3, #3
 800fbc2:	d14a      	bne.n	800fc5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	689a      	ldr	r2, [r3, #8]
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d913      	bls.n	800fbf8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	689a      	ldr	r2, [r3, #8]
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	1ad2      	subs	r2, r2, r3
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	68da      	ldr	r2, [r3, #12]
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bf28      	it	cs
 800fbea:	4613      	movcs	r3, r2
 800fbec:	461a      	mov	r2, r3
 800fbee:	6879      	ldr	r1, [r7, #4]
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f001 f80f 	bl	8010c14 <USBD_CtlContinueRx>
 800fbf6:	e030      	b.n	800fc5a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	2b03      	cmp	r3, #3
 800fc02:	d10b      	bne.n	800fc1c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d005      	beq.n	800fc1c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f001 f80a 	bl	8010c36 <USBD_CtlSendStatus>
 800fc22:	e01a      	b.n	800fc5a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b03      	cmp	r3, #3
 800fc2e:	d114      	bne.n	800fc5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00e      	beq.n	800fc5a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	7afa      	ldrb	r2, [r7, #11]
 800fc46:	4611      	mov	r1, r2
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	4798      	blx	r3
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fc50:	7dfb      	ldrb	r3, [r7, #23]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fc56:	7dfb      	ldrb	r3, [r7, #23]
 800fc58:	e000      	b.n	800fc5c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fc5a:	2300      	movs	r3, #0
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3718      	adds	r7, #24
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	607a      	str	r2, [r7, #4]
 800fc70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fc72:	7afb      	ldrb	r3, [r7, #11]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d16b      	bne.n	800fd50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	3314      	adds	r3, #20
 800fc7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d156      	bne.n	800fd36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	689a      	ldr	r2, [r3, #8]
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d914      	bls.n	800fcbe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	1ad2      	subs	r2, r2, r3
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	461a      	mov	r2, r3
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f000 ff84 	bl	8010bb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f004 fc8a 	bl	80145d0 <USBD_LL_PrepareReceive>
 800fcbc:	e03b      	b.n	800fd36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	68da      	ldr	r2, [r3, #12]
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d11c      	bne.n	800fd04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d316      	bcc.n	800fd04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d20f      	bcs.n	800fd04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fce4:	2200      	movs	r2, #0
 800fce6:	2100      	movs	r1, #0
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f000 ff65 	bl	8010bb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f004 fc67 	bl	80145d0 <USBD_LL_PrepareReceive>
 800fd02:	e018      	b.n	800fd36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b03      	cmp	r3, #3
 800fd0e:	d10b      	bne.n	800fd28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d005      	beq.n	800fd28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	68f8      	ldr	r0, [r7, #12]
 800fd26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd28:	2180      	movs	r1, #128	; 0x80
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f004 fb4a 	bl	80143c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f000 ff93 	bl	8010c5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d122      	bne.n	800fd86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f7ff fe98 	bl	800fa76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fd4e:	e01a      	b.n	800fd86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d114      	bne.n	800fd86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00e      	beq.n	800fd86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	7afa      	ldrb	r2, [r7, #11]
 800fd72:	4611      	mov	r1, r2
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	4798      	blx	r3
 800fd78:	4603      	mov	r3, r0
 800fd7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
 800fd84:	e000      	b.n	800fd88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	e02f      	b.n	800fe24 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00f      	beq.n	800fdee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d009      	beq.n	800fdee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	6852      	ldr	r2, [r2, #4]
 800fde6:	b2d2      	uxtb	r2, r2
 800fde8:	4611      	mov	r1, r2
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdee:	2340      	movs	r3, #64	; 0x40
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f004 fa71 	bl	80142dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2240      	movs	r2, #64	; 0x40
 800fe06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe0a:	2340      	movs	r3, #64	; 0x40
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	2180      	movs	r1, #128	; 0x80
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f004 fa63 	bl	80142dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2240      	movs	r2, #64	; 0x40
 800fe20:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	78fa      	ldrb	r2, [r7, #3]
 800fe3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2204      	movs	r2, #4
 800fe66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	2b04      	cmp	r3, #4
 800fe8a:	d106      	bne.n	800fe9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fe9a:	2300      	movs	r3, #0
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d101      	bne.n	800febe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800feba:	2303      	movs	r3, #3
 800febc:	e012      	b.n	800fee4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	2b03      	cmp	r3, #3
 800fec8:	d10b      	bne.n	800fee2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d005      	beq.n	800fee2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fedc:	69db      	ldr	r3, [r3, #28]
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	460b      	mov	r3, r1
 800fef6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ff02:	2303      	movs	r3, #3
 800ff04:	e014      	b.n	800ff30 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	d10d      	bne.n	800ff2e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d007      	beq.n	800ff2e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff24:	6a1b      	ldr	r3, [r3, #32]
 800ff26:	78fa      	ldrb	r2, [r7, #3]
 800ff28:	4611      	mov	r1, r2
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	460b      	mov	r3, r1
 800ff42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ff4e:	2303      	movs	r3, #3
 800ff50:	e014      	b.n	800ff7c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b03      	cmp	r3, #3
 800ff5c:	d10d      	bne.n	800ff7a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d007      	beq.n	800ff7a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff72:	78fa      	ldrb	r2, [r7, #3]
 800ff74:	4611      	mov	r1, r2
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b083      	sub	sp, #12
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff8c:	2300      	movs	r3, #0
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d009      	beq.n	800ffc8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	6852      	ldr	r2, [r2, #4]
 800ffc0:	b2d2      	uxtb	r2, r2
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	4798      	blx	r3
  }

  return USBD_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b087      	sub	sp, #28
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fff0:	8a3b      	ldrh	r3, [r7, #16]
 800fff2:	021b      	lsls	r3, r3, #8
 800fff4:	b21a      	sxth	r2, r3
 800fff6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	b21b      	sxth	r3, r3
 800fffe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010000:	89fb      	ldrh	r3, [r7, #14]
}
 8010002:	4618      	mov	r0, r3
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
	...

08010010 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010026:	2b40      	cmp	r3, #64	; 0x40
 8010028:	d005      	beq.n	8010036 <USBD_StdDevReq+0x26>
 801002a:	2b40      	cmp	r3, #64	; 0x40
 801002c:	d853      	bhi.n	80100d6 <USBD_StdDevReq+0xc6>
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00b      	beq.n	801004a <USBD_StdDevReq+0x3a>
 8010032:	2b20      	cmp	r3, #32
 8010034:	d14f      	bne.n	80100d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	4798      	blx	r3
 8010044:	4603      	mov	r3, r0
 8010046:	73fb      	strb	r3, [r7, #15]
      break;
 8010048:	e04a      	b.n	80100e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	785b      	ldrb	r3, [r3, #1]
 801004e:	2b09      	cmp	r3, #9
 8010050:	d83b      	bhi.n	80100ca <USBD_StdDevReq+0xba>
 8010052:	a201      	add	r2, pc, #4	; (adr r2, 8010058 <USBD_StdDevReq+0x48>)
 8010054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010058:	080100ad 	.word	0x080100ad
 801005c:	080100c1 	.word	0x080100c1
 8010060:	080100cb 	.word	0x080100cb
 8010064:	080100b7 	.word	0x080100b7
 8010068:	080100cb 	.word	0x080100cb
 801006c:	0801008b 	.word	0x0801008b
 8010070:	08010081 	.word	0x08010081
 8010074:	080100cb 	.word	0x080100cb
 8010078:	080100a3 	.word	0x080100a3
 801007c:	08010095 	.word	0x08010095
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 f9de 	bl	8010444 <USBD_GetDescriptor>
          break;
 8010088:	e024      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801008a:	6839      	ldr	r1, [r7, #0]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 fb43 	bl	8010718 <USBD_SetAddress>
          break;
 8010092:	e01f      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fb82 	bl	80107a0 <USBD_SetConfig>
 801009c:	4603      	mov	r3, r0
 801009e:	73fb      	strb	r3, [r7, #15]
          break;
 80100a0:	e018      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fc21 	bl	80108ec <USBD_GetConfig>
          break;
 80100aa:	e013      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 fc52 	bl	8010958 <USBD_GetStatus>
          break;
 80100b4:	e00e      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fc81 	bl	80109c0 <USBD_SetFeature>
          break;
 80100be:	e009      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 fc90 	bl	80109e8 <USBD_ClrFeature>
          break;
 80100c8:	e004      	b.n	80100d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fce7 	bl	8010aa0 <USBD_CtlError>
          break;
 80100d2:	bf00      	nop
      }
      break;
 80100d4:	e004      	b.n	80100e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fce1 	bl	8010aa0 <USBD_CtlError>
      break;
 80100de:	bf00      	nop
  }

  return ret;
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop

080100ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010102:	2b40      	cmp	r3, #64	; 0x40
 8010104:	d005      	beq.n	8010112 <USBD_StdItfReq+0x26>
 8010106:	2b40      	cmp	r3, #64	; 0x40
 8010108:	d82f      	bhi.n	801016a <USBD_StdItfReq+0x7e>
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <USBD_StdItfReq+0x26>
 801010e:	2b20      	cmp	r3, #32
 8010110:	d12b      	bne.n	801016a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010118:	b2db      	uxtb	r3, r3
 801011a:	3b01      	subs	r3, #1
 801011c:	2b02      	cmp	r3, #2
 801011e:	d81d      	bhi.n	801015c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	889b      	ldrh	r3, [r3, #4]
 8010124:	b2db      	uxtb	r3, r3
 8010126:	2b01      	cmp	r3, #1
 8010128:	d813      	bhi.n	8010152 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	4798      	blx	r3
 8010138:	4603      	mov	r3, r0
 801013a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	88db      	ldrh	r3, [r3, #6]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d110      	bne.n	8010166 <USBD_StdItfReq+0x7a>
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10d      	bne.n	8010166 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fd73 	bl	8010c36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010150:	e009      	b.n	8010166 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010152:	6839      	ldr	r1, [r7, #0]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fca3 	bl	8010aa0 <USBD_CtlError>
          break;
 801015a:	e004      	b.n	8010166 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801015c:	6839      	ldr	r1, [r7, #0]
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 fc9e 	bl	8010aa0 <USBD_CtlError>
          break;
 8010164:	e000      	b.n	8010168 <USBD_StdItfReq+0x7c>
          break;
 8010166:	bf00      	nop
      }
      break;
 8010168:	e004      	b.n	8010174 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801016a:	6839      	ldr	r1, [r7, #0]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fc97 	bl	8010aa0 <USBD_CtlError>
      break;
 8010172:	bf00      	nop
  }

  return ret;
 8010174:	7bfb      	ldrb	r3, [r7, #15]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b084      	sub	sp, #16
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	889b      	ldrh	r3, [r3, #4]
 8010190:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801019a:	2b40      	cmp	r3, #64	; 0x40
 801019c:	d007      	beq.n	80101ae <USBD_StdEPReq+0x30>
 801019e:	2b40      	cmp	r3, #64	; 0x40
 80101a0:	f200 8145 	bhi.w	801042e <USBD_StdEPReq+0x2b0>
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00c      	beq.n	80101c2 <USBD_StdEPReq+0x44>
 80101a8:	2b20      	cmp	r3, #32
 80101aa:	f040 8140 	bne.w	801042e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	4798      	blx	r3
 80101bc:	4603      	mov	r3, r0
 80101be:	73fb      	strb	r3, [r7, #15]
      break;
 80101c0:	e13a      	b.n	8010438 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	785b      	ldrb	r3, [r3, #1]
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d007      	beq.n	80101da <USBD_StdEPReq+0x5c>
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	f300 8129 	bgt.w	8010422 <USBD_StdEPReq+0x2a4>
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d07f      	beq.n	80102d4 <USBD_StdEPReq+0x156>
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d03c      	beq.n	8010252 <USBD_StdEPReq+0xd4>
 80101d8:	e123      	b.n	8010422 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d002      	beq.n	80101ec <USBD_StdEPReq+0x6e>
 80101e6:	2b03      	cmp	r3, #3
 80101e8:	d016      	beq.n	8010218 <USBD_StdEPReq+0x9a>
 80101ea:	e02c      	b.n	8010246 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101ec:	7bbb      	ldrb	r3, [r7, #14]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00d      	beq.n	801020e <USBD_StdEPReq+0x90>
 80101f2:	7bbb      	ldrb	r3, [r7, #14]
 80101f4:	2b80      	cmp	r3, #128	; 0x80
 80101f6:	d00a      	beq.n	801020e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80101f8:	7bbb      	ldrb	r3, [r7, #14]
 80101fa:	4619      	mov	r1, r3
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f004 f8e1 	bl	80143c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010202:	2180      	movs	r1, #128	; 0x80
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f004 f8dd 	bl	80143c4 <USBD_LL_StallEP>
 801020a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801020c:	e020      	b.n	8010250 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fc45 	bl	8010aa0 <USBD_CtlError>
              break;
 8010216:	e01b      	b.n	8010250 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	885b      	ldrh	r3, [r3, #2]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10e      	bne.n	801023e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00b      	beq.n	801023e <USBD_StdEPReq+0xc0>
 8010226:	7bbb      	ldrb	r3, [r7, #14]
 8010228:	2b80      	cmp	r3, #128	; 0x80
 801022a:	d008      	beq.n	801023e <USBD_StdEPReq+0xc0>
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	88db      	ldrh	r3, [r3, #6]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d104      	bne.n	801023e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010234:	7bbb      	ldrb	r3, [r7, #14]
 8010236:	4619      	mov	r1, r3
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f004 f8c3 	bl	80143c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fcf9 	bl	8010c36 <USBD_CtlSendStatus>

              break;
 8010244:	e004      	b.n	8010250 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 fc29 	bl	8010aa0 <USBD_CtlError>
              break;
 801024e:	bf00      	nop
          }
          break;
 8010250:	e0ec      	b.n	801042c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b02      	cmp	r3, #2
 801025c:	d002      	beq.n	8010264 <USBD_StdEPReq+0xe6>
 801025e:	2b03      	cmp	r3, #3
 8010260:	d016      	beq.n	8010290 <USBD_StdEPReq+0x112>
 8010262:	e030      	b.n	80102c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010264:	7bbb      	ldrb	r3, [r7, #14]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00d      	beq.n	8010286 <USBD_StdEPReq+0x108>
 801026a:	7bbb      	ldrb	r3, [r7, #14]
 801026c:	2b80      	cmp	r3, #128	; 0x80
 801026e:	d00a      	beq.n	8010286 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010270:	7bbb      	ldrb	r3, [r7, #14]
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f004 f8a5 	bl	80143c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801027a:	2180      	movs	r1, #128	; 0x80
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f004 f8a1 	bl	80143c4 <USBD_LL_StallEP>
 8010282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010284:	e025      	b.n	80102d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010286:	6839      	ldr	r1, [r7, #0]
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fc09 	bl	8010aa0 <USBD_CtlError>
              break;
 801028e:	e020      	b.n	80102d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	885b      	ldrh	r3, [r3, #2]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d11b      	bne.n	80102d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010298:	7bbb      	ldrb	r3, [r7, #14]
 801029a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d004      	beq.n	80102ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80102a2:	7bbb      	ldrb	r3, [r7, #14]
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f004 f8c2 	bl	8014430 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 fcc2 	bl	8010c36 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	4798      	blx	r3
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80102c4:	e004      	b.n	80102d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80102c6:	6839      	ldr	r1, [r7, #0]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fbe9 	bl	8010aa0 <USBD_CtlError>
              break;
 80102ce:	e000      	b.n	80102d2 <USBD_StdEPReq+0x154>
              break;
 80102d0:	bf00      	nop
          }
          break;
 80102d2:	e0ab      	b.n	801042c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d002      	beq.n	80102e6 <USBD_StdEPReq+0x168>
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d032      	beq.n	801034a <USBD_StdEPReq+0x1cc>
 80102e4:	e097      	b.n	8010416 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d007      	beq.n	80102fc <USBD_StdEPReq+0x17e>
 80102ec:	7bbb      	ldrb	r3, [r7, #14]
 80102ee:	2b80      	cmp	r3, #128	; 0x80
 80102f0:	d004      	beq.n	80102fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80102f2:	6839      	ldr	r1, [r7, #0]
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f000 fbd3 	bl	8010aa0 <USBD_CtlError>
                break;
 80102fa:	e091      	b.n	8010420 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010300:	2b00      	cmp	r3, #0
 8010302:	da0b      	bge.n	801031c <USBD_StdEPReq+0x19e>
 8010304:	7bbb      	ldrb	r3, [r7, #14]
 8010306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801030a:	4613      	mov	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	3310      	adds	r3, #16
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	4413      	add	r3, r2
 8010318:	3304      	adds	r3, #4
 801031a:	e00b      	b.n	8010334 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801031c:	7bbb      	ldrb	r3, [r7, #14]
 801031e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010322:	4613      	mov	r3, r2
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4413      	add	r3, r2
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	4413      	add	r3, r2
 8010332:	3304      	adds	r3, #4
 8010334:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2200      	movs	r2, #0
 801033a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2202      	movs	r2, #2
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fc1d 	bl	8010b82 <USBD_CtlSendData>
              break;
 8010348:	e06a      	b.n	8010420 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801034a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801034e:	2b00      	cmp	r3, #0
 8010350:	da11      	bge.n	8010376 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010352:	7bbb      	ldrb	r3, [r7, #14]
 8010354:	f003 020f 	and.w	r2, r3, #15
 8010358:	6879      	ldr	r1, [r7, #4]
 801035a:	4613      	mov	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4413      	add	r3, r2
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	440b      	add	r3, r1
 8010364:	3324      	adds	r3, #36	; 0x24
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d117      	bne.n	801039c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fb96 	bl	8010aa0 <USBD_CtlError>
                  break;
 8010374:	e054      	b.n	8010420 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010376:	7bbb      	ldrb	r3, [r7, #14]
 8010378:	f003 020f 	and.w	r2, r3, #15
 801037c:	6879      	ldr	r1, [r7, #4]
 801037e:	4613      	mov	r3, r2
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	4413      	add	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	440b      	add	r3, r1
 8010388:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d104      	bne.n	801039c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010392:	6839      	ldr	r1, [r7, #0]
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 fb83 	bl	8010aa0 <USBD_CtlError>
                  break;
 801039a:	e041      	b.n	8010420 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801039c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	da0b      	bge.n	80103bc <USBD_StdEPReq+0x23e>
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103aa:	4613      	mov	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	4413      	add	r3, r2
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	3310      	adds	r3, #16
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	4413      	add	r3, r2
 80103b8:	3304      	adds	r3, #4
 80103ba:	e00b      	b.n	80103d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103bc:	7bbb      	ldrb	r3, [r7, #14]
 80103be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103c2:	4613      	mov	r3, r2
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	4413      	add	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4413      	add	r3, r2
 80103d2:	3304      	adds	r3, #4
 80103d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103d6:	7bbb      	ldrb	r3, [r7, #14]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d002      	beq.n	80103e2 <USBD_StdEPReq+0x264>
 80103dc:	7bbb      	ldrb	r3, [r7, #14]
 80103de:	2b80      	cmp	r3, #128	; 0x80
 80103e0:	d103      	bne.n	80103ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	e00e      	b.n	8010408 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80103ea:	7bbb      	ldrb	r3, [r7, #14]
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f004 f854 	bl	801449c <USBD_LL_IsStallEP>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d003      	beq.n	8010402 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	2201      	movs	r2, #1
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	e002      	b.n	8010408 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2200      	movs	r2, #0
 8010406:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2202      	movs	r2, #2
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fbb7 	bl	8010b82 <USBD_CtlSendData>
              break;
 8010414:	e004      	b.n	8010420 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 fb41 	bl	8010aa0 <USBD_CtlError>
              break;
 801041e:	bf00      	nop
          }
          break;
 8010420:	e004      	b.n	801042c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f000 fb3b 	bl	8010aa0 <USBD_CtlError>
          break;
 801042a:	bf00      	nop
      }
      break;
 801042c:	e004      	b.n	8010438 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801042e:	6839      	ldr	r1, [r7, #0]
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fb35 	bl	8010aa0 <USBD_CtlError>
      break;
 8010436:	bf00      	nop
  }

  return ret;
 8010438:	7bfb      	ldrb	r3, [r7, #15]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
	...

08010444 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801044e:	2300      	movs	r3, #0
 8010450:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010452:	2300      	movs	r3, #0
 8010454:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010456:	2300      	movs	r3, #0
 8010458:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	885b      	ldrh	r3, [r3, #2]
 801045e:	0a1b      	lsrs	r3, r3, #8
 8010460:	b29b      	uxth	r3, r3
 8010462:	3b01      	subs	r3, #1
 8010464:	2b06      	cmp	r3, #6
 8010466:	f200 8128 	bhi.w	80106ba <USBD_GetDescriptor+0x276>
 801046a:	a201      	add	r2, pc, #4	; (adr r2, 8010470 <USBD_GetDescriptor+0x2c>)
 801046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010470:	0801048d 	.word	0x0801048d
 8010474:	080104a5 	.word	0x080104a5
 8010478:	080104e5 	.word	0x080104e5
 801047c:	080106bb 	.word	0x080106bb
 8010480:	080106bb 	.word	0x080106bb
 8010484:	0801065b 	.word	0x0801065b
 8010488:	08010687 	.word	0x08010687
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	7c12      	ldrb	r2, [r2, #16]
 8010498:	f107 0108 	add.w	r1, r7, #8
 801049c:	4610      	mov	r0, r2
 801049e:	4798      	blx	r3
 80104a0:	60f8      	str	r0, [r7, #12]
      break;
 80104a2:	e112      	b.n	80106ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	7c1b      	ldrb	r3, [r3, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10d      	bne.n	80104c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b4:	f107 0208 	add.w	r2, r7, #8
 80104b8:	4610      	mov	r0, r2
 80104ba:	4798      	blx	r3
 80104bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	3301      	adds	r3, #1
 80104c2:	2202      	movs	r2, #2
 80104c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80104c6:	e100      	b.n	80106ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104d0:	f107 0208 	add.w	r2, r7, #8
 80104d4:	4610      	mov	r0, r2
 80104d6:	4798      	blx	r3
 80104d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3301      	adds	r3, #1
 80104de:	2202      	movs	r2, #2
 80104e0:	701a      	strb	r2, [r3, #0]
      break;
 80104e2:	e0f2      	b.n	80106ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	885b      	ldrh	r3, [r3, #2]
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b05      	cmp	r3, #5
 80104ec:	f200 80ac 	bhi.w	8010648 <USBD_GetDescriptor+0x204>
 80104f0:	a201      	add	r2, pc, #4	; (adr r2, 80104f8 <USBD_GetDescriptor+0xb4>)
 80104f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f6:	bf00      	nop
 80104f8:	08010511 	.word	0x08010511
 80104fc:	08010545 	.word	0x08010545
 8010500:	08010579 	.word	0x08010579
 8010504:	080105ad 	.word	0x080105ad
 8010508:	080105e1 	.word	0x080105e1
 801050c:	08010615 	.word	0x08010615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00b      	beq.n	8010534 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	7c12      	ldrb	r2, [r2, #16]
 8010528:	f107 0108 	add.w	r1, r7, #8
 801052c:	4610      	mov	r0, r2
 801052e:	4798      	blx	r3
 8010530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010532:	e091      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fab2 	bl	8010aa0 <USBD_CtlError>
            err++;
 801053c:	7afb      	ldrb	r3, [r7, #11]
 801053e:	3301      	adds	r3, #1
 8010540:	72fb      	strb	r3, [r7, #11]
          break;
 8010542:	e089      	b.n	8010658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00b      	beq.n	8010568 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	7c12      	ldrb	r2, [r2, #16]
 801055c:	f107 0108 	add.w	r1, r7, #8
 8010560:	4610      	mov	r0, r2
 8010562:	4798      	blx	r3
 8010564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010566:	e077      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010568:	6839      	ldr	r1, [r7, #0]
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 fa98 	bl	8010aa0 <USBD_CtlError>
            err++;
 8010570:	7afb      	ldrb	r3, [r7, #11]
 8010572:	3301      	adds	r3, #1
 8010574:	72fb      	strb	r3, [r7, #11]
          break;
 8010576:	e06f      	b.n	8010658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00b      	beq.n	801059c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	7c12      	ldrb	r2, [r2, #16]
 8010590:	f107 0108 	add.w	r1, r7, #8
 8010594:	4610      	mov	r0, r2
 8010596:	4798      	blx	r3
 8010598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801059a:	e05d      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801059c:	6839      	ldr	r1, [r7, #0]
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f000 fa7e 	bl	8010aa0 <USBD_CtlError>
            err++;
 80105a4:	7afb      	ldrb	r3, [r7, #11]
 80105a6:	3301      	adds	r3, #1
 80105a8:	72fb      	strb	r3, [r7, #11]
          break;
 80105aa:	e055      	b.n	8010658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00b      	beq.n	80105d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	7c12      	ldrb	r2, [r2, #16]
 80105c4:	f107 0108 	add.w	r1, r7, #8
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
 80105cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105ce:	e043      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105d0:	6839      	ldr	r1, [r7, #0]
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fa64 	bl	8010aa0 <USBD_CtlError>
            err++;
 80105d8:	7afb      	ldrb	r3, [r7, #11]
 80105da:	3301      	adds	r3, #1
 80105dc:	72fb      	strb	r3, [r7, #11]
          break;
 80105de:	e03b      	b.n	8010658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105e6:	695b      	ldr	r3, [r3, #20]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00b      	beq.n	8010604 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	7c12      	ldrb	r2, [r2, #16]
 80105f8:	f107 0108 	add.w	r1, r7, #8
 80105fc:	4610      	mov	r0, r2
 80105fe:	4798      	blx	r3
 8010600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010602:	e029      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010604:	6839      	ldr	r1, [r7, #0]
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fa4a 	bl	8010aa0 <USBD_CtlError>
            err++;
 801060c:	7afb      	ldrb	r3, [r7, #11]
 801060e:	3301      	adds	r3, #1
 8010610:	72fb      	strb	r3, [r7, #11]
          break;
 8010612:	e021      	b.n	8010658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801061a:	699b      	ldr	r3, [r3, #24]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00b      	beq.n	8010638 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010626:	699b      	ldr	r3, [r3, #24]
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	7c12      	ldrb	r2, [r2, #16]
 801062c:	f107 0108 	add.w	r1, r7, #8
 8010630:	4610      	mov	r0, r2
 8010632:	4798      	blx	r3
 8010634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010636:	e00f      	b.n	8010658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 fa30 	bl	8010aa0 <USBD_CtlError>
            err++;
 8010640:	7afb      	ldrb	r3, [r7, #11]
 8010642:	3301      	adds	r3, #1
 8010644:	72fb      	strb	r3, [r7, #11]
          break;
 8010646:	e007      	b.n	8010658 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa28 	bl	8010aa0 <USBD_CtlError>
          err++;
 8010650:	7afb      	ldrb	r3, [r7, #11]
 8010652:	3301      	adds	r3, #1
 8010654:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010656:	bf00      	nop
      }
      break;
 8010658:	e037      	b.n	80106ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	7c1b      	ldrb	r3, [r3, #16]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d109      	bne.n	8010676 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801066a:	f107 0208 	add.w	r2, r7, #8
 801066e:	4610      	mov	r0, r2
 8010670:	4798      	blx	r3
 8010672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010674:	e029      	b.n	80106ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010676:	6839      	ldr	r1, [r7, #0]
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 fa11 	bl	8010aa0 <USBD_CtlError>
        err++;
 801067e:	7afb      	ldrb	r3, [r7, #11]
 8010680:	3301      	adds	r3, #1
 8010682:	72fb      	strb	r3, [r7, #11]
      break;
 8010684:	e021      	b.n	80106ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	7c1b      	ldrb	r3, [r3, #16]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10d      	bne.n	80106aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010696:	f107 0208 	add.w	r2, r7, #8
 801069a:	4610      	mov	r0, r2
 801069c:	4798      	blx	r3
 801069e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	3301      	adds	r3, #1
 80106a4:	2207      	movs	r2, #7
 80106a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106a8:	e00f      	b.n	80106ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 f9f7 	bl	8010aa0 <USBD_CtlError>
        err++;
 80106b2:	7afb      	ldrb	r3, [r7, #11]
 80106b4:	3301      	adds	r3, #1
 80106b6:	72fb      	strb	r3, [r7, #11]
      break;
 80106b8:	e007      	b.n	80106ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f9ef 	bl	8010aa0 <USBD_CtlError>
      err++;
 80106c2:	7afb      	ldrb	r3, [r7, #11]
 80106c4:	3301      	adds	r3, #1
 80106c6:	72fb      	strb	r3, [r7, #11]
      break;
 80106c8:	bf00      	nop
  }

  if (err != 0U)
 80106ca:	7afb      	ldrb	r3, [r7, #11]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d11e      	bne.n	801070e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	88db      	ldrh	r3, [r3, #6]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d016      	beq.n	8010706 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80106d8:	893b      	ldrh	r3, [r7, #8]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00e      	beq.n	80106fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	88da      	ldrh	r2, [r3, #6]
 80106e2:	893b      	ldrh	r3, [r7, #8]
 80106e4:	4293      	cmp	r3, r2
 80106e6:	bf28      	it	cs
 80106e8:	4613      	movcs	r3, r2
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80106ee:	893b      	ldrh	r3, [r7, #8]
 80106f0:	461a      	mov	r2, r3
 80106f2:	68f9      	ldr	r1, [r7, #12]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fa44 	bl	8010b82 <USBD_CtlSendData>
 80106fa:	e009      	b.n	8010710 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f9ce 	bl	8010aa0 <USBD_CtlError>
 8010704:	e004      	b.n	8010710 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 fa95 	bl	8010c36 <USBD_CtlSendStatus>
 801070c:	e000      	b.n	8010710 <USBD_GetDescriptor+0x2cc>
    return;
 801070e:	bf00      	nop
  }
}
 8010710:	3710      	adds	r7, #16
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop

08010718 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	889b      	ldrh	r3, [r3, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d131      	bne.n	801078e <USBD_SetAddress+0x76>
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	88db      	ldrh	r3, [r3, #6]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d12d      	bne.n	801078e <USBD_SetAddress+0x76>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	885b      	ldrh	r3, [r3, #2]
 8010736:	2b7f      	cmp	r3, #127	; 0x7f
 8010738:	d829      	bhi.n	801078e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	885b      	ldrh	r3, [r3, #2]
 801073e:	b2db      	uxtb	r3, r3
 8010740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b03      	cmp	r3, #3
 8010750:	d104      	bne.n	801075c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010752:	6839      	ldr	r1, [r7, #0]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f9a3 	bl	8010aa0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801075a:	e01d      	b.n	8010798 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	7bfa      	ldrb	r2, [r7, #15]
 8010760:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010764:	7bfb      	ldrb	r3, [r7, #15]
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f003 fec3 	bl	80144f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa61 	bl	8010c36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010774:	7bfb      	ldrb	r3, [r7, #15]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d004      	beq.n	8010784 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2202      	movs	r2, #2
 801077e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010782:	e009      	b.n	8010798 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801078c:	e004      	b.n	8010798 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801078e:	6839      	ldr	r1, [r7, #0]
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 f985 	bl	8010aa0 <USBD_CtlError>
  }
}
 8010796:	bf00      	nop
 8010798:	bf00      	nop
 801079a:	3710      	adds	r7, #16
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107aa:	2300      	movs	r3, #0
 80107ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	885b      	ldrh	r3, [r3, #2]
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	4b4c      	ldr	r3, [pc, #304]	; (80108e8 <USBD_SetConfig+0x148>)
 80107b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80107b8:	4b4b      	ldr	r3, [pc, #300]	; (80108e8 <USBD_SetConfig+0x148>)
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d905      	bls.n	80107cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80107c0:	6839      	ldr	r1, [r7, #0]
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 f96c 	bl	8010aa0 <USBD_CtlError>
    return USBD_FAIL;
 80107c8:	2303      	movs	r3, #3
 80107ca:	e088      	b.n	80108de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d002      	beq.n	80107de <USBD_SetConfig+0x3e>
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d025      	beq.n	8010828 <USBD_SetConfig+0x88>
 80107dc:	e071      	b.n	80108c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80107de:	4b42      	ldr	r3, [pc, #264]	; (80108e8 <USBD_SetConfig+0x148>)
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d01c      	beq.n	8010820 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80107e6:	4b40      	ldr	r3, [pc, #256]	; (80108e8 <USBD_SetConfig+0x148>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	461a      	mov	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80107f0:	4b3d      	ldr	r3, [pc, #244]	; (80108e8 <USBD_SetConfig+0x148>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	4619      	mov	r1, r3
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7ff f948 	bl	800fa8c <USBD_SetClassConfig>
 80107fc:	4603      	mov	r3, r0
 80107fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010800:	7bfb      	ldrb	r3, [r7, #15]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d004      	beq.n	8010810 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f949 	bl	8010aa0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801080e:	e065      	b.n	80108dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fa10 	bl	8010c36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2203      	movs	r2, #3
 801081a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801081e:	e05d      	b.n	80108dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fa08 	bl	8010c36 <USBD_CtlSendStatus>
      break;
 8010826:	e059      	b.n	80108dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010828:	4b2f      	ldr	r3, [pc, #188]	; (80108e8 <USBD_SetConfig+0x148>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d112      	bne.n	8010856 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2202      	movs	r2, #2
 8010834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010838:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <USBD_SetConfig+0x148>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	461a      	mov	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010842:	4b29      	ldr	r3, [pc, #164]	; (80108e8 <USBD_SetConfig+0x148>)
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	4619      	mov	r1, r3
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff f93b 	bl	800fac4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 f9f1 	bl	8010c36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010854:	e042      	b.n	80108dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010856:	4b24      	ldr	r3, [pc, #144]	; (80108e8 <USBD_SetConfig+0x148>)
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d02a      	beq.n	80108ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	b2db      	uxtb	r3, r3
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff f929 	bl	800fac4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010872:	4b1d      	ldr	r3, [pc, #116]	; (80108e8 <USBD_SetConfig+0x148>)
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	461a      	mov	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801087c:	4b1a      	ldr	r3, [pc, #104]	; (80108e8 <USBD_SetConfig+0x148>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	4619      	mov	r1, r3
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7ff f902 	bl	800fa8c <USBD_SetClassConfig>
 8010888:	4603      	mov	r3, r0
 801088a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801088c:	7bfb      	ldrb	r3, [r7, #15]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00f      	beq.n	80108b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010892:	6839      	ldr	r1, [r7, #0]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 f903 	bl	8010aa0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	4619      	mov	r1, r3
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff f90e 	bl	800fac4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2202      	movs	r2, #2
 80108ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80108b0:	e014      	b.n	80108dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 f9bf 	bl	8010c36 <USBD_CtlSendStatus>
      break;
 80108b8:	e010      	b.n	80108dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f9bb 	bl	8010c36 <USBD_CtlSendStatus>
      break;
 80108c0:	e00c      	b.n	80108dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80108c2:	6839      	ldr	r1, [r7, #0]
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f000 f8eb 	bl	8010aa0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80108ca:	4b07      	ldr	r3, [pc, #28]	; (80108e8 <USBD_SetConfig+0x148>)
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	4619      	mov	r1, r3
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7ff f8f7 	bl	800fac4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80108d6:	2303      	movs	r3, #3
 80108d8:	73fb      	strb	r3, [r7, #15]
      break;
 80108da:	bf00      	nop
  }

  return ret;
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	20001328 	.word	0x20001328

080108ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	88db      	ldrh	r3, [r3, #6]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d004      	beq.n	8010908 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 f8cd 	bl	8010aa0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010906:	e023      	b.n	8010950 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801090e:	b2db      	uxtb	r3, r3
 8010910:	2b02      	cmp	r3, #2
 8010912:	dc02      	bgt.n	801091a <USBD_GetConfig+0x2e>
 8010914:	2b00      	cmp	r3, #0
 8010916:	dc03      	bgt.n	8010920 <USBD_GetConfig+0x34>
 8010918:	e015      	b.n	8010946 <USBD_GetConfig+0x5a>
 801091a:	2b03      	cmp	r3, #3
 801091c:	d00b      	beq.n	8010936 <USBD_GetConfig+0x4a>
 801091e:	e012      	b.n	8010946 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3308      	adds	r3, #8
 801092a:	2201      	movs	r2, #1
 801092c:	4619      	mov	r1, r3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f927 	bl	8010b82 <USBD_CtlSendData>
        break;
 8010934:	e00c      	b.n	8010950 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	3304      	adds	r3, #4
 801093a:	2201      	movs	r2, #1
 801093c:	4619      	mov	r1, r3
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 f91f 	bl	8010b82 <USBD_CtlSendData>
        break;
 8010944:	e004      	b.n	8010950 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010946:	6839      	ldr	r1, [r7, #0]
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 f8a9 	bl	8010aa0 <USBD_CtlError>
        break;
 801094e:	bf00      	nop
}
 8010950:	bf00      	nop
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010968:	b2db      	uxtb	r3, r3
 801096a:	3b01      	subs	r3, #1
 801096c:	2b02      	cmp	r3, #2
 801096e:	d81e      	bhi.n	80109ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	88db      	ldrh	r3, [r3, #6]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d004      	beq.n	8010982 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010978:	6839      	ldr	r1, [r7, #0]
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 f890 	bl	8010aa0 <USBD_CtlError>
        break;
 8010980:	e01a      	b.n	80109b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801098e:	2b00      	cmp	r3, #0
 8010990:	d005      	beq.n	801099e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	f043 0202 	orr.w	r2, r3, #2
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	330c      	adds	r3, #12
 80109a2:	2202      	movs	r2, #2
 80109a4:	4619      	mov	r1, r3
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 f8eb 	bl	8010b82 <USBD_CtlSendData>
      break;
 80109ac:	e004      	b.n	80109b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80109ae:	6839      	ldr	r1, [r7, #0]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 f875 	bl	8010aa0 <USBD_CtlError>
      break;
 80109b6:	bf00      	nop
  }
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	885b      	ldrh	r3, [r3, #2]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d106      	bne.n	80109e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f92b 	bl	8010c36 <USBD_CtlSendStatus>
  }
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	3b01      	subs	r3, #1
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d80b      	bhi.n	8010a18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	885b      	ldrh	r3, [r3, #2]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d10c      	bne.n	8010a22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 f910 	bl	8010c36 <USBD_CtlSendStatus>
      }
      break;
 8010a16:	e004      	b.n	8010a22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f840 	bl	8010aa0 <USBD_CtlError>
      break;
 8010a20:	e000      	b.n	8010a24 <USBD_ClrFeature+0x3c>
      break;
 8010a22:	bf00      	nop
  }
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	781a      	ldrb	r2, [r3, #0]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	3301      	adds	r3, #1
 8010a46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	781a      	ldrb	r2, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	3301      	adds	r3, #1
 8010a54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f7ff fabb 	bl	800ffd2 <SWAPBYTE>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	461a      	mov	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3301      	adds	r3, #1
 8010a68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	f7ff faae 	bl	800ffd2 <SWAPBYTE>
 8010a76:	4603      	mov	r3, r0
 8010a78:	461a      	mov	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	3301      	adds	r3, #1
 8010a82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	3301      	adds	r3, #1
 8010a88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010a8a:	68f8      	ldr	r0, [r7, #12]
 8010a8c:	f7ff faa1 	bl	800ffd2 <SWAPBYTE>
 8010a90:	4603      	mov	r3, r0
 8010a92:	461a      	mov	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	80da      	strh	r2, [r3, #6]
}
 8010a98:	bf00      	nop
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010aaa:	2180      	movs	r1, #128	; 0x80
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f003 fc89 	bl	80143c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f003 fc85 	bl	80143c4 <USBD_LL_StallEP>
}
 8010aba:	bf00      	nop
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b086      	sub	sp, #24
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	60f8      	str	r0, [r7, #12]
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d036      	beq.n	8010b46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010adc:	6938      	ldr	r0, [r7, #16]
 8010ade:	f000 f836 	bl	8010b4e <USBD_GetLen>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010af0:	7dfb      	ldrb	r3, [r7, #23]
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	4413      	add	r3, r2
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	7812      	ldrb	r2, [r2, #0]
 8010afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8010afc:	7dfb      	ldrb	r3, [r7, #23]
 8010afe:	3301      	adds	r3, #1
 8010b00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010b02:	7dfb      	ldrb	r3, [r7, #23]
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	4413      	add	r3, r2
 8010b08:	2203      	movs	r2, #3
 8010b0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b0c:	7dfb      	ldrb	r3, [r7, #23]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010b12:	e013      	b.n	8010b3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010b14:	7dfb      	ldrb	r3, [r7, #23]
 8010b16:	68ba      	ldr	r2, [r7, #8]
 8010b18:	4413      	add	r3, r2
 8010b1a:	693a      	ldr	r2, [r7, #16]
 8010b1c:	7812      	ldrb	r2, [r2, #0]
 8010b1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	3301      	adds	r3, #1
 8010b24:	613b      	str	r3, [r7, #16]
    idx++;
 8010b26:	7dfb      	ldrb	r3, [r7, #23]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010b2c:	7dfb      	ldrb	r3, [r7, #23]
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	4413      	add	r3, r2
 8010b32:	2200      	movs	r2, #0
 8010b34:	701a      	strb	r2, [r3, #0]
    idx++;
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1e7      	bne.n	8010b14 <USBD_GetString+0x52>
 8010b44:	e000      	b.n	8010b48 <USBD_GetString+0x86>
    return;
 8010b46:	bf00      	nop
  }
}
 8010b48:	3718      	adds	r7, #24
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010b4e:	b480      	push	{r7}
 8010b50:	b085      	sub	sp, #20
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010b5e:	e005      	b.n	8010b6c <USBD_GetLen+0x1e>
  {
    len++;
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
 8010b62:	3301      	adds	r3, #1
 8010b64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d1f5      	bne.n	8010b60 <USBD_GetLen+0x12>
  }

  return len;
 8010b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3714      	adds	r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	60f8      	str	r0, [r7, #12]
 8010b8a:	60b9      	str	r1, [r7, #8]
 8010b8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2202      	movs	r2, #2
 8010b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f003 fcd9 	bl	8014560 <USBD_LL_Transmit>

  return USBD_OK;
 8010bae:	2300      	movs	r3, #0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68ba      	ldr	r2, [r7, #8]
 8010bc8:	2100      	movs	r1, #0
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f003 fcc8 	bl	8014560 <USBD_LL_Transmit>

  return USBD_OK;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	60f8      	str	r0, [r7, #12]
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2203      	movs	r2, #3
 8010bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	68ba      	ldr	r2, [r7, #8]
 8010c02:	2100      	movs	r1, #0
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f003 fce3 	bl	80145d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	2100      	movs	r1, #0
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f003 fcd2 	bl	80145d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c2c:	2300      	movs	r3, #0
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b082      	sub	sp, #8
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2204      	movs	r2, #4
 8010c42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010c46:	2300      	movs	r3, #0
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f003 fc87 	bl	8014560 <USBD_LL_Transmit>

  return USBD_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2205      	movs	r2, #5
 8010c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2100      	movs	r1, #0
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f003 fcac 	bl	80145d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
	...

08010c84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	4a08      	ldr	r2, [pc, #32]	; (8010cb4 <disk_status+0x30>)
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	4413      	add	r3, r2
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	79fa      	ldrb	r2, [r7, #7]
 8010c9c:	4905      	ldr	r1, [pc, #20]	; (8010cb4 <disk_status+0x30>)
 8010c9e:	440a      	add	r2, r1
 8010ca0:	7a12      	ldrb	r2, [r2, #8]
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	4798      	blx	r3
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	20001354 	.word	0x20001354

08010cb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010cc6:	79fb      	ldrb	r3, [r7, #7]
 8010cc8:	4a0d      	ldr	r2, [pc, #52]	; (8010d00 <disk_initialize+0x48>)
 8010cca:	5cd3      	ldrb	r3, [r2, r3]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d111      	bne.n	8010cf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010cd0:	79fb      	ldrb	r3, [r7, #7]
 8010cd2:	4a0b      	ldr	r2, [pc, #44]	; (8010d00 <disk_initialize+0x48>)
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	4a09      	ldr	r2, [pc, #36]	; (8010d00 <disk_initialize+0x48>)
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	79fa      	ldrb	r2, [r7, #7]
 8010ce6:	4906      	ldr	r1, [pc, #24]	; (8010d00 <disk_initialize+0x48>)
 8010ce8:	440a      	add	r2, r1
 8010cea:	7a12      	ldrb	r2, [r2, #8]
 8010cec:	4610      	mov	r0, r2
 8010cee:	4798      	blx	r3
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20001354 	.word	0x20001354

08010d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d04:	b590      	push	{r4, r7, lr}
 8010d06:	b087      	sub	sp, #28
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60b9      	str	r1, [r7, #8]
 8010d0c:	607a      	str	r2, [r7, #4]
 8010d0e:	603b      	str	r3, [r7, #0]
 8010d10:	4603      	mov	r3, r0
 8010d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
 8010d16:	4a0a      	ldr	r2, [pc, #40]	; (8010d40 <disk_read+0x3c>)
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	4413      	add	r3, r2
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	689c      	ldr	r4, [r3, #8]
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	4a07      	ldr	r2, [pc, #28]	; (8010d40 <disk_read+0x3c>)
 8010d24:	4413      	add	r3, r2
 8010d26:	7a18      	ldrb	r0, [r3, #8]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	68b9      	ldr	r1, [r7, #8]
 8010d2e:	47a0      	blx	r4
 8010d30:	4603      	mov	r3, r0
 8010d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	371c      	adds	r7, #28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	20001354 	.word	0x20001354

08010d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60b9      	str	r1, [r7, #8]
 8010d4c:	607a      	str	r2, [r7, #4]
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	4603      	mov	r3, r0
 8010d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	4a0a      	ldr	r2, [pc, #40]	; (8010d80 <disk_write+0x3c>)
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	4413      	add	r3, r2
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	68dc      	ldr	r4, [r3, #12]
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	4a07      	ldr	r2, [pc, #28]	; (8010d80 <disk_write+0x3c>)
 8010d64:	4413      	add	r3, r2
 8010d66:	7a18      	ldrb	r0, [r3, #8]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	47a0      	blx	r4
 8010d70:	4603      	mov	r3, r0
 8010d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd90      	pop	{r4, r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	20001354 	.word	0x20001354

08010d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	603a      	str	r2, [r7, #0]
 8010d8e:	71fb      	strb	r3, [r7, #7]
 8010d90:	460b      	mov	r3, r1
 8010d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010d94:	79fb      	ldrb	r3, [r7, #7]
 8010d96:	4a09      	ldr	r2, [pc, #36]	; (8010dbc <disk_ioctl+0x38>)
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	79fa      	ldrb	r2, [r7, #7]
 8010da2:	4906      	ldr	r1, [pc, #24]	; (8010dbc <disk_ioctl+0x38>)
 8010da4:	440a      	add	r2, r1
 8010da6:	7a10      	ldrb	r0, [r2, #8]
 8010da8:	79b9      	ldrb	r1, [r7, #6]
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	4798      	blx	r3
 8010dae:	4603      	mov	r3, r0
 8010db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	20001354 	.word	0x20001354

08010dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b085      	sub	sp, #20
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010dd0:	89fb      	ldrh	r3, [r7, #14]
 8010dd2:	021b      	lsls	r3, r3, #8
 8010dd4:	b21a      	sxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	b21b      	sxth	r3, r3
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	b21b      	sxth	r3, r3
 8010de0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010de2:	89fb      	ldrh	r3, [r7, #14]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3714      	adds	r7, #20
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3303      	adds	r3, #3
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	021b      	lsls	r3, r3, #8
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	3202      	adds	r2, #2
 8010e08:	7812      	ldrb	r2, [r2, #0]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	021b      	lsls	r3, r3, #8
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	3201      	adds	r2, #1
 8010e16:	7812      	ldrb	r2, [r2, #0]
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	021b      	lsls	r3, r3, #8
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	7812      	ldrb	r2, [r2, #0]
 8010e24:	4313      	orrs	r3, r2
 8010e26:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e28:	68fb      	ldr	r3, [r7, #12]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e36:	b480      	push	{r7}
 8010e38:	b083      	sub	sp, #12
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	1c5a      	adds	r2, r3, #1
 8010e46:	607a      	str	r2, [r7, #4]
 8010e48:	887a      	ldrh	r2, [r7, #2]
 8010e4a:	b2d2      	uxtb	r2, r2
 8010e4c:	701a      	strb	r2, [r3, #0]
 8010e4e:	887b      	ldrh	r3, [r7, #2]
 8010e50:	0a1b      	lsrs	r3, r3, #8
 8010e52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	1c5a      	adds	r2, r3, #1
 8010e58:	607a      	str	r2, [r7, #4]
 8010e5a:	887a      	ldrh	r2, [r7, #2]
 8010e5c:	b2d2      	uxtb	r2, r2
 8010e5e:	701a      	strb	r2, [r3, #0]
}
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	1c5a      	adds	r2, r3, #1
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	683a      	ldr	r2, [r7, #0]
 8010e7e:	b2d2      	uxtb	r2, r2
 8010e80:	701a      	strb	r2, [r3, #0]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	0a1b      	lsrs	r3, r3, #8
 8010e86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	1c5a      	adds	r2, r3, #1
 8010e8c:	607a      	str	r2, [r7, #4]
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	b2d2      	uxtb	r2, r2
 8010e92:	701a      	strb	r2, [r3, #0]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	0a1b      	lsrs	r3, r3, #8
 8010e98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	1c5a      	adds	r2, r3, #1
 8010e9e:	607a      	str	r2, [r7, #4]
 8010ea0:	683a      	ldr	r2, [r7, #0]
 8010ea2:	b2d2      	uxtb	r2, r2
 8010ea4:	701a      	strb	r2, [r3, #0]
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	0a1b      	lsrs	r3, r3, #8
 8010eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	607a      	str	r2, [r7, #4]
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	b2d2      	uxtb	r2, r2
 8010eb6:	701a      	strb	r2, [r3, #0]
}
 8010eb8:	bf00      	nop
 8010eba:	370c      	adds	r7, #12
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ec4:	b480      	push	{r7}
 8010ec6:	b087      	sub	sp, #28
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00d      	beq.n	8010efa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	1c53      	adds	r3, r2, #1
 8010ee2:	613b      	str	r3, [r7, #16]
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	1c59      	adds	r1, r3, #1
 8010ee8:	6179      	str	r1, [r7, #20]
 8010eea:	7812      	ldrb	r2, [r2, #0]
 8010eec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	3b01      	subs	r3, #1
 8010ef2:	607b      	str	r3, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1f1      	bne.n	8010ede <mem_cpy+0x1a>
	}
}
 8010efa:	bf00      	nop
 8010efc:	371c      	adds	r7, #28
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f06:	b480      	push	{r7}
 8010f08:	b087      	sub	sp, #28
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	60f8      	str	r0, [r7, #12]
 8010f0e:	60b9      	str	r1, [r7, #8]
 8010f10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	617a      	str	r2, [r7, #20]
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	b2d2      	uxtb	r2, r2
 8010f20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3b01      	subs	r3, #1
 8010f26:	607b      	str	r3, [r7, #4]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1f3      	bne.n	8010f16 <mem_set+0x10>
}
 8010f2e:	bf00      	nop
 8010f30:	bf00      	nop
 8010f32:	371c      	adds	r7, #28
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f3c:	b480      	push	{r7}
 8010f3e:	b089      	sub	sp, #36	; 0x24
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	61fb      	str	r3, [r7, #28]
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	61fa      	str	r2, [r7, #28]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	61ba      	str	r2, [r7, #24]
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	1acb      	subs	r3, r1, r3
 8010f68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	607b      	str	r3, [r7, #4]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d002      	beq.n	8010f7c <mem_cmp+0x40>
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d0eb      	beq.n	8010f54 <mem_cmp+0x18>

	return r;
 8010f7c:	697b      	ldr	r3, [r7, #20]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3724      	adds	r7, #36	; 0x24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010f8a:	b480      	push	{r7}
 8010f8c:	b083      	sub	sp, #12
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010f94:	e002      	b.n	8010f9c <chk_chr+0x12>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	607b      	str	r3, [r7, #4]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d005      	beq.n	8010fb0 <chk_chr+0x26>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	461a      	mov	r2, r3
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d1f2      	bne.n	8010f96 <chk_chr+0xc>
	return *str;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	781b      	ldrb	r3, [r3, #0]
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr

08010fc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b085      	sub	sp, #20
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60bb      	str	r3, [r7, #8]
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	e029      	b.n	8011028 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010fd4:	4a27      	ldr	r2, [pc, #156]	; (8011074 <chk_lock+0xb4>)
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	011b      	lsls	r3, r3, #4
 8010fda:	4413      	add	r3, r2
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d01d      	beq.n	801101e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010fe2:	4a24      	ldr	r2, [pc, #144]	; (8011074 <chk_lock+0xb4>)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	011b      	lsls	r3, r3, #4
 8010fe8:	4413      	add	r3, r2
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d116      	bne.n	8011022 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ff4:	4a1f      	ldr	r2, [pc, #124]	; (8011074 <chk_lock+0xb4>)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	011b      	lsls	r3, r3, #4
 8010ffa:	4413      	add	r3, r2
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011004:	429a      	cmp	r2, r3
 8011006:	d10c      	bne.n	8011022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011008:	4a1a      	ldr	r2, [pc, #104]	; (8011074 <chk_lock+0xb4>)
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	011b      	lsls	r3, r3, #4
 801100e:	4413      	add	r3, r2
 8011010:	3308      	adds	r3, #8
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011018:	429a      	cmp	r2, r3
 801101a:	d102      	bne.n	8011022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801101c:	e007      	b.n	801102e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801101e:	2301      	movs	r3, #1
 8011020:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d9d2      	bls.n	8010fd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2b02      	cmp	r3, #2
 8011032:	d109      	bne.n	8011048 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <chk_lock+0x80>
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b02      	cmp	r3, #2
 801103e:	d101      	bne.n	8011044 <chk_lock+0x84>
 8011040:	2300      	movs	r3, #0
 8011042:	e010      	b.n	8011066 <chk_lock+0xa6>
 8011044:	2312      	movs	r3, #18
 8011046:	e00e      	b.n	8011066 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d108      	bne.n	8011060 <chk_lock+0xa0>
 801104e:	4a09      	ldr	r2, [pc, #36]	; (8011074 <chk_lock+0xb4>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	011b      	lsls	r3, r3, #4
 8011054:	4413      	add	r3, r2
 8011056:	330c      	adds	r3, #12
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801105e:	d101      	bne.n	8011064 <chk_lock+0xa4>
 8011060:	2310      	movs	r3, #16
 8011062:	e000      	b.n	8011066 <chk_lock+0xa6>
 8011064:	2300      	movs	r3, #0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3714      	adds	r7, #20
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	20001334 	.word	0x20001334

08011078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801107e:	2300      	movs	r3, #0
 8011080:	607b      	str	r3, [r7, #4]
 8011082:	e002      	b.n	801108a <enq_lock+0x12>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3301      	adds	r3, #1
 8011088:	607b      	str	r3, [r7, #4]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b01      	cmp	r3, #1
 801108e:	d806      	bhi.n	801109e <enq_lock+0x26>
 8011090:	4a09      	ldr	r2, [pc, #36]	; (80110b8 <enq_lock+0x40>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	011b      	lsls	r3, r3, #4
 8011096:	4413      	add	r3, r2
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1f2      	bne.n	8011084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	bf14      	ite	ne
 80110a4:	2301      	movne	r3, #1
 80110a6:	2300      	moveq	r3, #0
 80110a8:	b2db      	uxtb	r3, r3
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	20001334 	.word	0x20001334

080110bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110c6:	2300      	movs	r3, #0
 80110c8:	60fb      	str	r3, [r7, #12]
 80110ca:	e01f      	b.n	801110c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80110cc:	4a41      	ldr	r2, [pc, #260]	; (80111d4 <inc_lock+0x118>)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	011b      	lsls	r3, r3, #4
 80110d2:	4413      	add	r3, r2
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d113      	bne.n	8011106 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80110de:	4a3d      	ldr	r2, [pc, #244]	; (80111d4 <inc_lock+0x118>)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	011b      	lsls	r3, r3, #4
 80110e4:	4413      	add	r3, r2
 80110e6:	3304      	adds	r3, #4
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d109      	bne.n	8011106 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80110f2:	4a38      	ldr	r2, [pc, #224]	; (80111d4 <inc_lock+0x118>)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	011b      	lsls	r3, r3, #4
 80110f8:	4413      	add	r3, r2
 80110fa:	3308      	adds	r3, #8
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011102:	429a      	cmp	r2, r3
 8011104:	d006      	beq.n	8011114 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	3301      	adds	r3, #1
 801110a:	60fb      	str	r3, [r7, #12]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d9dc      	bls.n	80110cc <inc_lock+0x10>
 8011112:	e000      	b.n	8011116 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011114:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2b02      	cmp	r3, #2
 801111a:	d132      	bne.n	8011182 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801111c:	2300      	movs	r3, #0
 801111e:	60fb      	str	r3, [r7, #12]
 8011120:	e002      	b.n	8011128 <inc_lock+0x6c>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	3301      	adds	r3, #1
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d806      	bhi.n	801113c <inc_lock+0x80>
 801112e:	4a29      	ldr	r2, [pc, #164]	; (80111d4 <inc_lock+0x118>)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	011b      	lsls	r3, r3, #4
 8011134:	4413      	add	r3, r2
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1f2      	bne.n	8011122 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b02      	cmp	r3, #2
 8011140:	d101      	bne.n	8011146 <inc_lock+0x8a>
 8011142:	2300      	movs	r3, #0
 8011144:	e040      	b.n	80111c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	4922      	ldr	r1, [pc, #136]	; (80111d4 <inc_lock+0x118>)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	011b      	lsls	r3, r3, #4
 8011150:	440b      	add	r3, r1
 8011152:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	689a      	ldr	r2, [r3, #8]
 8011158:	491e      	ldr	r1, [pc, #120]	; (80111d4 <inc_lock+0x118>)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	011b      	lsls	r3, r3, #4
 801115e:	440b      	add	r3, r1
 8011160:	3304      	adds	r3, #4
 8011162:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	695a      	ldr	r2, [r3, #20]
 8011168:	491a      	ldr	r1, [pc, #104]	; (80111d4 <inc_lock+0x118>)
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	011b      	lsls	r3, r3, #4
 801116e:	440b      	add	r3, r1
 8011170:	3308      	adds	r3, #8
 8011172:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011174:	4a17      	ldr	r2, [pc, #92]	; (80111d4 <inc_lock+0x118>)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	011b      	lsls	r3, r3, #4
 801117a:	4413      	add	r3, r2
 801117c:	330c      	adds	r3, #12
 801117e:	2200      	movs	r2, #0
 8011180:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d009      	beq.n	801119c <inc_lock+0xe0>
 8011188:	4a12      	ldr	r2, [pc, #72]	; (80111d4 <inc_lock+0x118>)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	011b      	lsls	r3, r3, #4
 801118e:	4413      	add	r3, r2
 8011190:	330c      	adds	r3, #12
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d001      	beq.n	801119c <inc_lock+0xe0>
 8011198:	2300      	movs	r3, #0
 801119a:	e015      	b.n	80111c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d108      	bne.n	80111b4 <inc_lock+0xf8>
 80111a2:	4a0c      	ldr	r2, [pc, #48]	; (80111d4 <inc_lock+0x118>)
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	011b      	lsls	r3, r3, #4
 80111a8:	4413      	add	r3, r2
 80111aa:	330c      	adds	r3, #12
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	3301      	adds	r3, #1
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	e001      	b.n	80111b8 <inc_lock+0xfc>
 80111b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111b8:	4906      	ldr	r1, [pc, #24]	; (80111d4 <inc_lock+0x118>)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	440b      	add	r3, r1
 80111c0:	330c      	adds	r3, #12
 80111c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	3301      	adds	r3, #1
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr
 80111d4:	20001334 	.word	0x20001334

080111d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80111d8:	b480      	push	{r7}
 80111da:	b085      	sub	sp, #20
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3b01      	subs	r3, #1
 80111e4:	607b      	str	r3, [r7, #4]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d825      	bhi.n	8011238 <dec_lock+0x60>
		n = Files[i].ctr;
 80111ec:	4a17      	ldr	r2, [pc, #92]	; (801124c <dec_lock+0x74>)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	011b      	lsls	r3, r3, #4
 80111f2:	4413      	add	r3, r2
 80111f4:	330c      	adds	r3, #12
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80111fa:	89fb      	ldrh	r3, [r7, #14]
 80111fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011200:	d101      	bne.n	8011206 <dec_lock+0x2e>
 8011202:	2300      	movs	r3, #0
 8011204:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011206:	89fb      	ldrh	r3, [r7, #14]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <dec_lock+0x3a>
 801120c:	89fb      	ldrh	r3, [r7, #14]
 801120e:	3b01      	subs	r3, #1
 8011210:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011212:	4a0e      	ldr	r2, [pc, #56]	; (801124c <dec_lock+0x74>)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	011b      	lsls	r3, r3, #4
 8011218:	4413      	add	r3, r2
 801121a:	330c      	adds	r3, #12
 801121c:	89fa      	ldrh	r2, [r7, #14]
 801121e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011220:	89fb      	ldrh	r3, [r7, #14]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d105      	bne.n	8011232 <dec_lock+0x5a>
 8011226:	4a09      	ldr	r2, [pc, #36]	; (801124c <dec_lock+0x74>)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	011b      	lsls	r3, r3, #4
 801122c:	4413      	add	r3, r2
 801122e:	2200      	movs	r2, #0
 8011230:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	737b      	strb	r3, [r7, #13]
 8011236:	e001      	b.n	801123c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011238:	2302      	movs	r3, #2
 801123a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801123c:	7b7b      	ldrb	r3, [r7, #13]
}
 801123e:	4618      	mov	r0, r3
 8011240:	3714      	adds	r7, #20
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	20001334 	.word	0x20001334

08011250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011258:	2300      	movs	r3, #0
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	e010      	b.n	8011280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801125e:	4a0d      	ldr	r2, [pc, #52]	; (8011294 <clear_lock+0x44>)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	4413      	add	r3, r2
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	429a      	cmp	r2, r3
 801126c:	d105      	bne.n	801127a <clear_lock+0x2a>
 801126e:	4a09      	ldr	r2, [pc, #36]	; (8011294 <clear_lock+0x44>)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	011b      	lsls	r3, r3, #4
 8011274:	4413      	add	r3, r2
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	3301      	adds	r3, #1
 801127e:	60fb      	str	r3, [r7, #12]
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d9eb      	bls.n	801125e <clear_lock+0xe>
	}
}
 8011286:	bf00      	nop
 8011288:	bf00      	nop
 801128a:	3714      	adds	r7, #20
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr
 8011294:	20001334 	.word	0x20001334

08011298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b086      	sub	sp, #24
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	78db      	ldrb	r3, [r3, #3]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d034      	beq.n	8011316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	7858      	ldrb	r0, [r3, #1]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112bc:	2301      	movs	r3, #1
 80112be:	697a      	ldr	r2, [r7, #20]
 80112c0:	f7ff fd40 	bl	8010d44 <disk_write>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d002      	beq.n	80112d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	73fb      	strb	r3, [r7, #15]
 80112ce:	e022      	b.n	8011316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	697a      	ldr	r2, [r7, #20]
 80112dc:	1ad2      	subs	r2, r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d217      	bcs.n	8011316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	789b      	ldrb	r3, [r3, #2]
 80112ea:	613b      	str	r3, [r7, #16]
 80112ec:	e010      	b.n	8011310 <sync_window+0x78>
					wsect += fs->fsize;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	699b      	ldr	r3, [r3, #24]
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	4413      	add	r3, r2
 80112f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	7858      	ldrb	r0, [r3, #1]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011302:	2301      	movs	r3, #1
 8011304:	697a      	ldr	r2, [r7, #20]
 8011306:	f7ff fd1d 	bl	8010d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	3b01      	subs	r3, #1
 801130e:	613b      	str	r3, [r7, #16]
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	2b01      	cmp	r3, #1
 8011314:	d8eb      	bhi.n	80112ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011316:	7bfb      	ldrb	r3, [r7, #15]
}
 8011318:	4618      	mov	r0, r3
 801131a:	3718      	adds	r7, #24
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	429a      	cmp	r2, r3
 8011336:	d01b      	beq.n	8011370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7ff ffad 	bl	8011298 <sync_window>
 801133e:	4603      	mov	r3, r0
 8011340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011342:	7bfb      	ldrb	r3, [r7, #15]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d113      	bne.n	8011370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	7858      	ldrb	r0, [r3, #1]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011352:	2301      	movs	r3, #1
 8011354:	683a      	ldr	r2, [r7, #0]
 8011356:	f7ff fcd5 	bl	8010d04 <disk_read>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d004      	beq.n	801136a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011366:	2301      	movs	r3, #1
 8011368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	683a      	ldr	r2, [r7, #0]
 801136e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8011370:	7bfb      	ldrb	r3, [r7, #15]
}
 8011372:	4618      	mov	r0, r3
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
	...

0801137c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff ff87 	bl	8011298 <sync_window>
 801138a:	4603      	mov	r3, r0
 801138c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d158      	bne.n	8011446 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	2b03      	cmp	r3, #3
 801139a:	d148      	bne.n	801142e <sync_fs+0xb2>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	791b      	ldrb	r3, [r3, #4]
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d144      	bne.n	801142e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	3330      	adds	r3, #48	; 0x30
 80113a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113ac:	2100      	movs	r1, #0
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff fda9 	bl	8010f06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	3330      	adds	r3, #48	; 0x30
 80113b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7ff fd38 	bl	8010e36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3330      	adds	r3, #48	; 0x30
 80113ca:	4921      	ldr	r1, [pc, #132]	; (8011450 <sync_fs+0xd4>)
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff fd4d 	bl	8010e6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	3330      	adds	r3, #48	; 0x30
 80113d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80113da:	491e      	ldr	r1, [pc, #120]	; (8011454 <sync_fs+0xd8>)
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff fd45 	bl	8010e6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3330      	adds	r3, #48	; 0x30
 80113e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	4619      	mov	r1, r3
 80113f0:	4610      	mov	r0, r2
 80113f2:	f7ff fd3b 	bl	8010e6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	3330      	adds	r3, #48	; 0x30
 80113fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	4619      	mov	r1, r3
 8011404:	4610      	mov	r0, r2
 8011406:	f7ff fd31 	bl	8010e6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	69db      	ldr	r3, [r3, #28]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7858      	ldrb	r0, [r3, #1]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011422:	2301      	movs	r3, #1
 8011424:	f7ff fc8e 	bl	8010d44 <disk_write>
			fs->fsi_flag = 0;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	785b      	ldrb	r3, [r3, #1]
 8011432:	2200      	movs	r2, #0
 8011434:	2100      	movs	r1, #0
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff fca4 	bl	8010d84 <disk_ioctl>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <sync_fs+0xca>
 8011442:	2301      	movs	r3, #1
 8011444:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011446:	7bfb      	ldrb	r3, [r7, #15]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	41615252 	.word	0x41615252
 8011454:	61417272 	.word	0x61417272

08011458 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011458:	b480      	push	{r7}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	3b02      	subs	r3, #2
 8011466:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	3b02      	subs	r3, #2
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d301      	bcc.n	8011478 <clust2sect+0x20>
 8011474:	2300      	movs	r3, #0
 8011476:	e008      	b.n	801148a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	895b      	ldrh	r3, [r3, #10]
 801147c:	461a      	mov	r2, r3
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	fb03 f202 	mul.w	r2, r3, r2
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011488:	4413      	add	r3, r2
}
 801148a:	4618      	mov	r0, r3
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011496:	b580      	push	{r7, lr}
 8011498:	b086      	sub	sp, #24
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
 801149e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d904      	bls.n	80114b6 <get_fat+0x20>
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	683a      	ldr	r2, [r7, #0]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d302      	bcc.n	80114bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80114b6:	2301      	movs	r3, #1
 80114b8:	617b      	str	r3, [r7, #20]
 80114ba:	e08f      	b.n	80115dc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80114bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2b03      	cmp	r3, #3
 80114c8:	d062      	beq.n	8011590 <get_fat+0xfa>
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	dc7c      	bgt.n	80115c8 <get_fat+0x132>
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d002      	beq.n	80114d8 <get_fat+0x42>
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d042      	beq.n	801155c <get_fat+0xc6>
 80114d6:	e077      	b.n	80115c8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	60fb      	str	r3, [r7, #12]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	085b      	lsrs	r3, r3, #1
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	4413      	add	r3, r2
 80114e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	6a1a      	ldr	r2, [r3, #32]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	0a5b      	lsrs	r3, r3, #9
 80114ee:	4413      	add	r3, r2
 80114f0:	4619      	mov	r1, r3
 80114f2:	6938      	ldr	r0, [r7, #16]
 80114f4:	f7ff ff14 	bl	8011320 <move_window>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d167      	bne.n	80115ce <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	1c5a      	adds	r2, r3, #1
 8011502:	60fa      	str	r2, [r7, #12]
 8011504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	4413      	add	r3, r2
 801150c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011510:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	6a1a      	ldr	r2, [r3, #32]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	0a5b      	lsrs	r3, r3, #9
 801151a:	4413      	add	r3, r2
 801151c:	4619      	mov	r1, r3
 801151e:	6938      	ldr	r0, [r7, #16]
 8011520:	f7ff fefe 	bl	8011320 <move_window>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d153      	bne.n	80115d2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011530:	693a      	ldr	r2, [r7, #16]
 8011532:	4413      	add	r3, r2
 8011534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011538:	021b      	lsls	r3, r3, #8
 801153a:	461a      	mov	r2, r3
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	4313      	orrs	r3, r2
 8011540:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <get_fat+0xbc>
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	091b      	lsrs	r3, r3, #4
 8011550:	e002      	b.n	8011558 <get_fat+0xc2>
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011558:	617b      	str	r3, [r7, #20]
			break;
 801155a:	e03f      	b.n	80115dc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	6a1a      	ldr	r2, [r3, #32]
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	0a1b      	lsrs	r3, r3, #8
 8011564:	4413      	add	r3, r2
 8011566:	4619      	mov	r1, r3
 8011568:	6938      	ldr	r0, [r7, #16]
 801156a:	f7ff fed9 	bl	8011320 <move_window>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d130      	bne.n	80115d6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011582:	4413      	add	r3, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7ff fc1b 	bl	8010dc0 <ld_word>
 801158a:	4603      	mov	r3, r0
 801158c:	617b      	str	r3, [r7, #20]
			break;
 801158e:	e025      	b.n	80115dc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	6a1a      	ldr	r2, [r3, #32]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	09db      	lsrs	r3, r3, #7
 8011598:	4413      	add	r3, r2
 801159a:	4619      	mov	r1, r3
 801159c:	6938      	ldr	r0, [r7, #16]
 801159e:	f7ff febf 	bl	8011320 <move_window>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d118      	bne.n	80115da <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80115b6:	4413      	add	r3, r2
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7ff fc19 	bl	8010df0 <ld_dword>
 80115be:	4603      	mov	r3, r0
 80115c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80115c4:	617b      	str	r3, [r7, #20]
			break;
 80115c6:	e009      	b.n	80115dc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80115c8:	2301      	movs	r3, #1
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	e006      	b.n	80115dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115ce:	bf00      	nop
 80115d0:	e004      	b.n	80115dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115d2:	bf00      	nop
 80115d4:	e002      	b.n	80115dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115d6:	bf00      	nop
 80115d8:	e000      	b.n	80115dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115da:	bf00      	nop
		}
	}

	return val;
 80115dc:	697b      	ldr	r3, [r7, #20]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3718      	adds	r7, #24
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}

080115e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80115e6:	b590      	push	{r4, r7, lr}
 80115e8:	b089      	sub	sp, #36	; 0x24
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	60f8      	str	r0, [r7, #12]
 80115ee:	60b9      	str	r1, [r7, #8]
 80115f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80115f2:	2302      	movs	r3, #2
 80115f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	f240 80d2 	bls.w	80117a2 <put_fat+0x1bc>
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	695b      	ldr	r3, [r3, #20]
 8011602:	68ba      	ldr	r2, [r7, #8]
 8011604:	429a      	cmp	r2, r3
 8011606:	f080 80cc 	bcs.w	80117a2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	2b03      	cmp	r3, #3
 8011610:	f000 8096 	beq.w	8011740 <put_fat+0x15a>
 8011614:	2b03      	cmp	r3, #3
 8011616:	f300 80cd 	bgt.w	80117b4 <put_fat+0x1ce>
 801161a:	2b01      	cmp	r3, #1
 801161c:	d002      	beq.n	8011624 <put_fat+0x3e>
 801161e:	2b02      	cmp	r3, #2
 8011620:	d06e      	beq.n	8011700 <put_fat+0x11a>
 8011622:	e0c7      	b.n	80117b4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	61bb      	str	r3, [r7, #24]
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	085b      	lsrs	r3, r3, #1
 801162c:	69ba      	ldr	r2, [r7, #24]
 801162e:	4413      	add	r3, r2
 8011630:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6a1a      	ldr	r2, [r3, #32]
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	0a5b      	lsrs	r3, r3, #9
 801163a:	4413      	add	r3, r2
 801163c:	4619      	mov	r1, r3
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fe6e 	bl	8011320 <move_window>
 8011644:	4603      	mov	r3, r0
 8011646:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011648:	7ffb      	ldrb	r3, [r7, #31]
 801164a:	2b00      	cmp	r3, #0
 801164c:	f040 80ab 	bne.w	80117a6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	1c59      	adds	r1, r3, #1
 801165a:	61b9      	str	r1, [r7, #24]
 801165c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011660:	4413      	add	r3, r2
 8011662:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	f003 0301 	and.w	r3, r3, #1
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00d      	beq.n	801168a <put_fat+0xa4>
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	b25b      	sxtb	r3, r3
 8011674:	f003 030f 	and.w	r3, r3, #15
 8011678:	b25a      	sxtb	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	b2db      	uxtb	r3, r3
 801167e:	011b      	lsls	r3, r3, #4
 8011680:	b25b      	sxtb	r3, r3
 8011682:	4313      	orrs	r3, r2
 8011684:	b25b      	sxtb	r3, r3
 8011686:	b2db      	uxtb	r3, r3
 8011688:	e001      	b.n	801168e <put_fat+0xa8>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	697a      	ldr	r2, [r7, #20]
 8011690:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2201      	movs	r2, #1
 8011696:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	6a1a      	ldr	r2, [r3, #32]
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	0a5b      	lsrs	r3, r3, #9
 80116a0:	4413      	add	r3, r2
 80116a2:	4619      	mov	r1, r3
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7ff fe3b 	bl	8011320 <move_window>
 80116aa:	4603      	mov	r3, r0
 80116ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116ae:	7ffb      	ldrb	r3, [r7, #31]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d17a      	bne.n	80117aa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116c0:	4413      	add	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d003      	beq.n	80116d6 <put_fat+0xf0>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	091b      	lsrs	r3, r3, #4
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	e00e      	b.n	80116f4 <put_fat+0x10e>
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	b25b      	sxtb	r3, r3
 80116dc:	f023 030f 	bic.w	r3, r3, #15
 80116e0:	b25a      	sxtb	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	0a1b      	lsrs	r3, r3, #8
 80116e6:	b25b      	sxtb	r3, r3
 80116e8:	f003 030f 	and.w	r3, r3, #15
 80116ec:	b25b      	sxtb	r3, r3
 80116ee:	4313      	orrs	r3, r2
 80116f0:	b25b      	sxtb	r3, r3
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2201      	movs	r2, #1
 80116fc:	70da      	strb	r2, [r3, #3]
			break;
 80116fe:	e059      	b.n	80117b4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6a1a      	ldr	r2, [r3, #32]
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	0a1b      	lsrs	r3, r3, #8
 8011708:	4413      	add	r3, r2
 801170a:	4619      	mov	r1, r3
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	f7ff fe07 	bl	8011320 <move_window>
 8011712:	4603      	mov	r3, r0
 8011714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011716:	7ffb      	ldrb	r3, [r7, #31]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d148      	bne.n	80117ae <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801172a:	4413      	add	r3, r2
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	b292      	uxth	r2, r2
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff fb7f 	bl	8010e36 <st_word>
			fs->wflag = 1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2201      	movs	r2, #1
 801173c:	70da      	strb	r2, [r3, #3]
			break;
 801173e:	e039      	b.n	80117b4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6a1a      	ldr	r2, [r3, #32]
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	09db      	lsrs	r3, r3, #7
 8011748:	4413      	add	r3, r2
 801174a:	4619      	mov	r1, r3
 801174c:	68f8      	ldr	r0, [r7, #12]
 801174e:	f7ff fde7 	bl	8011320 <move_window>
 8011752:	4603      	mov	r3, r0
 8011754:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011756:	7ffb      	ldrb	r3, [r7, #31]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d12a      	bne.n	80117b2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011770:	4413      	add	r3, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fb3c 	bl	8010df0 <ld_dword>
 8011778:	4603      	mov	r3, r0
 801177a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801177e:	4323      	orrs	r3, r4
 8011780:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011790:	4413      	add	r3, r2
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	f7ff fb69 	bl	8010e6c <st_dword>
			fs->wflag = 1;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2201      	movs	r2, #1
 801179e:	70da      	strb	r2, [r3, #3]
			break;
 80117a0:	e008      	b.n	80117b4 <put_fat+0x1ce>
		}
	}
 80117a2:	bf00      	nop
 80117a4:	e006      	b.n	80117b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117a6:	bf00      	nop
 80117a8:	e004      	b.n	80117b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117aa:	bf00      	nop
 80117ac:	e002      	b.n	80117b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117ae:	bf00      	nop
 80117b0:	e000      	b.n	80117b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80117b2:	bf00      	nop
	return res;
 80117b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3724      	adds	r7, #36	; 0x24
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd90      	pop	{r4, r7, pc}

080117be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b088      	sub	sp, #32
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	60f8      	str	r0, [r7, #12]
 80117c6:	60b9      	str	r1, [r7, #8]
 80117c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d904      	bls.n	80117e4 <remove_chain+0x26>
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	695b      	ldr	r3, [r3, #20]
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d301      	bcc.n	80117e8 <remove_chain+0x2a>
 80117e4:	2302      	movs	r3, #2
 80117e6:	e04b      	b.n	8011880 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00c      	beq.n	8011808 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80117ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	69b8      	ldr	r0, [r7, #24]
 80117f6:	f7ff fef6 	bl	80115e6 <put_fat>
 80117fa:	4603      	mov	r3, r0
 80117fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80117fe:	7ffb      	ldrb	r3, [r7, #31]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <remove_chain+0x4a>
 8011804:	7ffb      	ldrb	r3, [r7, #31]
 8011806:	e03b      	b.n	8011880 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f7ff fe43 	bl	8011496 <get_fat>
 8011810:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d031      	beq.n	801187c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	2b01      	cmp	r3, #1
 801181c:	d101      	bne.n	8011822 <remove_chain+0x64>
 801181e:	2302      	movs	r3, #2
 8011820:	e02e      	b.n	8011880 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011828:	d101      	bne.n	801182e <remove_chain+0x70>
 801182a:	2301      	movs	r3, #1
 801182c:	e028      	b.n	8011880 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801182e:	2200      	movs	r2, #0
 8011830:	68b9      	ldr	r1, [r7, #8]
 8011832:	69b8      	ldr	r0, [r7, #24]
 8011834:	f7ff fed7 	bl	80115e6 <put_fat>
 8011838:	4603      	mov	r3, r0
 801183a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801183c:	7ffb      	ldrb	r3, [r7, #31]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <remove_chain+0x88>
 8011842:	7ffb      	ldrb	r3, [r7, #31]
 8011844:	e01c      	b.n	8011880 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	691a      	ldr	r2, [r3, #16]
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	3b02      	subs	r3, #2
 8011850:	429a      	cmp	r2, r3
 8011852:	d20b      	bcs.n	801186c <remove_chain+0xae>
			fs->free_clst++;
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	791b      	ldrb	r3, [r3, #4]
 8011862:	f043 0301 	orr.w	r3, r3, #1
 8011866:	b2da      	uxtb	r2, r3
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	429a      	cmp	r2, r3
 8011878:	d3c6      	bcc.n	8011808 <remove_chain+0x4a>
 801187a:	e000      	b.n	801187e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801187c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801187e:	2300      	movs	r3, #0
}
 8011880:	4618      	mov	r0, r3
 8011882:	3720      	adds	r7, #32
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b088      	sub	sp, #32
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10d      	bne.n	80118ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d004      	beq.n	80118b4 <create_chain+0x2c>
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	695b      	ldr	r3, [r3, #20]
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d31b      	bcc.n	80118ec <create_chain+0x64>
 80118b4:	2301      	movs	r3, #1
 80118b6:	61bb      	str	r3, [r7, #24]
 80118b8:	e018      	b.n	80118ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7ff fdea 	bl	8011496 <get_fat>
 80118c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d801      	bhi.n	80118ce <create_chain+0x46>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e070      	b.n	80119b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118d4:	d101      	bne.n	80118da <create_chain+0x52>
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	e06a      	b.n	80119b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d201      	bcs.n	80118e8 <create_chain+0x60>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	e063      	b.n	80119b0 <create_chain+0x128>
		scl = clst;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	3301      	adds	r3, #1
 80118f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	69fa      	ldr	r2, [r7, #28]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d307      	bcc.n	8011910 <create_chain+0x88>
				ncl = 2;
 8011900:	2302      	movs	r3, #2
 8011902:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011904:	69fa      	ldr	r2, [r7, #28]
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	429a      	cmp	r2, r3
 801190a:	d901      	bls.n	8011910 <create_chain+0x88>
 801190c:	2300      	movs	r3, #0
 801190e:	e04f      	b.n	80119b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011910:	69f9      	ldr	r1, [r7, #28]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff fdbf 	bl	8011496 <get_fat>
 8011918:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00e      	beq.n	801193e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d003      	beq.n	801192e <create_chain+0xa6>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801192c:	d101      	bne.n	8011932 <create_chain+0xaa>
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	e03e      	b.n	80119b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011932:	69fa      	ldr	r2, [r7, #28]
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	429a      	cmp	r2, r3
 8011938:	d1da      	bne.n	80118f0 <create_chain+0x68>
 801193a:	2300      	movs	r3, #0
 801193c:	e038      	b.n	80119b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801193e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011944:	69f9      	ldr	r1, [r7, #28]
 8011946:	6938      	ldr	r0, [r7, #16]
 8011948:	f7ff fe4d 	bl	80115e6 <put_fat>
 801194c:	4603      	mov	r3, r0
 801194e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011950:	7dfb      	ldrb	r3, [r7, #23]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d109      	bne.n	801196a <create_chain+0xe2>
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d006      	beq.n	801196a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801195c:	69fa      	ldr	r2, [r7, #28]
 801195e:	6839      	ldr	r1, [r7, #0]
 8011960:	6938      	ldr	r0, [r7, #16]
 8011962:	f7ff fe40 	bl	80115e6 <put_fat>
 8011966:	4603      	mov	r3, r0
 8011968:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801196a:	7dfb      	ldrb	r3, [r7, #23]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d116      	bne.n	801199e <create_chain+0x116>
		fs->last_clst = ncl;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	69fa      	ldr	r2, [r7, #28]
 8011974:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	691a      	ldr	r2, [r3, #16]
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	3b02      	subs	r3, #2
 8011980:	429a      	cmp	r2, r3
 8011982:	d804      	bhi.n	801198e <create_chain+0x106>
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	691b      	ldr	r3, [r3, #16]
 8011988:	1e5a      	subs	r2, r3, #1
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	791b      	ldrb	r3, [r3, #4]
 8011992:	f043 0301 	orr.w	r3, r3, #1
 8011996:	b2da      	uxtb	r2, r3
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	711a      	strb	r2, [r3, #4]
 801199c:	e007      	b.n	80119ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801199e:	7dfb      	ldrb	r3, [r7, #23]
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d102      	bne.n	80119aa <create_chain+0x122>
 80119a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119a8:	e000      	b.n	80119ac <create_chain+0x124>
 80119aa:	2301      	movs	r3, #1
 80119ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119ae:	69fb      	ldr	r3, [r7, #28]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3720      	adds	r7, #32
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119cc:	3304      	adds	r3, #4
 80119ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	0a5b      	lsrs	r3, r3, #9
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	8952      	ldrh	r2, [r2, #10]
 80119d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80119dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	1d1a      	adds	r2, r3, #4
 80119e2:	613a      	str	r2, [r7, #16]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <clmt_clust+0x3a>
 80119ee:	2300      	movs	r3, #0
 80119f0:	e010      	b.n	8011a14 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80119f2:	697a      	ldr	r2, [r7, #20]
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d307      	bcc.n	8011a0a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80119fa:	697a      	ldr	r2, [r7, #20]
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	617b      	str	r3, [r7, #20]
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	3304      	adds	r3, #4
 8011a06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a08:	e7e9      	b.n	80119de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011a0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	4413      	add	r3, r2
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	371c      	adds	r7, #28
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a36:	d204      	bcs.n	8011a42 <dir_sdi+0x22>
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	f003 031f 	and.w	r3, r3, #31
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a42:	2302      	movs	r3, #2
 8011a44:	e063      	b.n	8011b0e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	683a      	ldr	r2, [r7, #0]
 8011a4a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d106      	bne.n	8011a66 <dir_sdi+0x46>
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d902      	bls.n	8011a66 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a64:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d10c      	bne.n	8011a86 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	095b      	lsrs	r3, r3, #5
 8011a70:	693a      	ldr	r2, [r7, #16]
 8011a72:	8912      	ldrh	r2, [r2, #8]
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d301      	bcc.n	8011a7c <dir_sdi+0x5c>
 8011a78:	2302      	movs	r3, #2
 8011a7a:	e048      	b.n	8011b0e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	61da      	str	r2, [r3, #28]
 8011a84:	e029      	b.n	8011ada <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	895b      	ldrh	r3, [r3, #10]
 8011a8a:	025b      	lsls	r3, r3, #9
 8011a8c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011a8e:	e019      	b.n	8011ac4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6979      	ldr	r1, [r7, #20]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fcfe 	bl	8011496 <get_fat>
 8011a9a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aa2:	d101      	bne.n	8011aa8 <dir_sdi+0x88>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e032      	b.n	8011b0e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d904      	bls.n	8011ab8 <dir_sdi+0x98>
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	695b      	ldr	r3, [r3, #20]
 8011ab2:	697a      	ldr	r2, [r7, #20]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d301      	bcc.n	8011abc <dir_sdi+0x9c>
 8011ab8:	2302      	movs	r3, #2
 8011aba:	e028      	b.n	8011b0e <dir_sdi+0xee>
			ofs -= csz;
 8011abc:	683a      	ldr	r2, [r7, #0]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ac4:	683a      	ldr	r2, [r7, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d2e1      	bcs.n	8011a90 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011acc:	6979      	ldr	r1, [r7, #20]
 8011ace:	6938      	ldr	r0, [r7, #16]
 8011ad0:	f7ff fcc2 	bl	8011458 <clust2sect>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	69db      	ldr	r3, [r3, #28]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <dir_sdi+0xcc>
 8011ae8:	2302      	movs	r3, #2
 8011aea:	e010      	b.n	8011b0e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	69da      	ldr	r2, [r3, #28]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	0a5b      	lsrs	r3, r3, #9
 8011af4:	441a      	add	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b06:	441a      	add	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b086      	sub	sp, #24
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	695b      	ldr	r3, [r3, #20]
 8011b2a:	3320      	adds	r3, #32
 8011b2c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	69db      	ldr	r3, [r3, #28]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d003      	beq.n	8011b3e <dir_next+0x28>
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b3c:	d301      	bcc.n	8011b42 <dir_next+0x2c>
 8011b3e:	2304      	movs	r3, #4
 8011b40:	e0aa      	b.n	8011c98 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f040 8098 	bne.w	8011c7e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	69db      	ldr	r3, [r3, #28]
 8011b52:	1c5a      	adds	r2, r3, #1
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	699b      	ldr	r3, [r3, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10b      	bne.n	8011b78 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	095b      	lsrs	r3, r3, #5
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	8912      	ldrh	r2, [r2, #8]
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	f0c0 8088 	bcc.w	8011c7e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2200      	movs	r2, #0
 8011b72:	61da      	str	r2, [r3, #28]
 8011b74:	2304      	movs	r3, #4
 8011b76:	e08f      	b.n	8011c98 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	0a5b      	lsrs	r3, r3, #9
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	8952      	ldrh	r2, [r2, #10]
 8011b80:	3a01      	subs	r2, #1
 8011b82:	4013      	ands	r3, r2
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d17a      	bne.n	8011c7e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	4610      	mov	r0, r2
 8011b92:	f7ff fc80 	bl	8011496 <get_fat>
 8011b96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d801      	bhi.n	8011ba2 <dir_next+0x8c>
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	e07a      	b.n	8011c98 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ba8:	d101      	bne.n	8011bae <dir_next+0x98>
 8011baa:	2301      	movs	r3, #1
 8011bac:	e074      	b.n	8011c98 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	695b      	ldr	r3, [r3, #20]
 8011bb2:	697a      	ldr	r2, [r7, #20]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d358      	bcc.n	8011c6a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d104      	bne.n	8011bc8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	61da      	str	r2, [r3, #28]
 8011bc4:	2304      	movs	r3, #4
 8011bc6:	e067      	b.n	8011c98 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	4619      	mov	r1, r3
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	f7ff fe59 	bl	8011888 <create_chain>
 8011bd6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d101      	bne.n	8011be2 <dir_next+0xcc>
 8011bde:	2307      	movs	r3, #7
 8011be0:	e05a      	b.n	8011c98 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d101      	bne.n	8011bec <dir_next+0xd6>
 8011be8:	2302      	movs	r3, #2
 8011bea:	e055      	b.n	8011c98 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bf2:	d101      	bne.n	8011bf8 <dir_next+0xe2>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	e04f      	b.n	8011c98 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f7ff fb4d 	bl	8011298 <sync_window>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <dir_next+0xf2>
 8011c04:	2301      	movs	r3, #1
 8011c06:	e047      	b.n	8011c98 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3330      	adds	r3, #48	; 0x30
 8011c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c10:	2100      	movs	r1, #0
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff f977 	bl	8010f06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c18:	2300      	movs	r3, #0
 8011c1a:	613b      	str	r3, [r7, #16]
 8011c1c:	6979      	ldr	r1, [r7, #20]
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ff fc1a 	bl	8011458 <clust2sect>
 8011c24:	4602      	mov	r2, r0
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c2a:	e012      	b.n	8011c52 <dir_next+0x13c>
						fs->wflag = 1;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2201      	movs	r2, #1
 8011c30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f7ff fb30 	bl	8011298 <sync_window>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d001      	beq.n	8011c42 <dir_next+0x12c>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e02a      	b.n	8011c98 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	3301      	adds	r3, #1
 8011c46:	613b      	str	r3, [r7, #16]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4c:	1c5a      	adds	r2, r3, #1
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	895b      	ldrh	r3, [r3, #10]
 8011c56:	461a      	mov	r2, r3
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d3e6      	bcc.n	8011c2c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	1ad2      	subs	r2, r2, r3
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	697a      	ldr	r2, [r7, #20]
 8011c6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011c70:	6979      	ldr	r1, [r7, #20]
 8011c72:	68f8      	ldr	r0, [r7, #12]
 8011c74:	f7ff fbf0 	bl	8011458 <clust2sect>
 8011c78:	4602      	mov	r2, r0
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c90:	441a      	add	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011c96:	2300      	movs	r3, #0
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3718      	adds	r7, #24
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ff feb4 	bl	8011a20 <dir_sdi>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011cbc:	7dfb      	ldrb	r3, [r7, #23]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d12b      	bne.n	8011d1a <dir_alloc+0x7a>
		n = 0;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	69db      	ldr	r3, [r3, #28]
 8011cca:	4619      	mov	r1, r3
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f7ff fb27 	bl	8011320 <move_window>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d11d      	bne.n	8011d18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a1b      	ldr	r3, [r3, #32]
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	2be5      	cmp	r3, #229	; 0xe5
 8011ce4:	d004      	beq.n	8011cf0 <dir_alloc+0x50>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a1b      	ldr	r3, [r3, #32]
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d107      	bne.n	8011d00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	613b      	str	r3, [r7, #16]
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d102      	bne.n	8011d04 <dir_alloc+0x64>
 8011cfe:	e00c      	b.n	8011d1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d00:	2300      	movs	r3, #0
 8011d02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d04:	2101      	movs	r1, #1
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7ff ff05 	bl	8011b16 <dir_next>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d10:	7dfb      	ldrb	r3, [r7, #23]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d0d7      	beq.n	8011cc6 <dir_alloc+0x26>
 8011d16:	e000      	b.n	8011d1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	2b04      	cmp	r3, #4
 8011d1e:	d101      	bne.n	8011d24 <dir_alloc+0x84>
 8011d20:	2307      	movs	r3, #7
 8011d22:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3718      	adds	r7, #24
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	331a      	adds	r3, #26
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff f83f 	bl	8010dc0 <ld_word>
 8011d42:	4603      	mov	r3, r0
 8011d44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d109      	bne.n	8011d62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	3314      	adds	r3, #20
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7ff f834 	bl	8010dc0 <ld_word>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	041b      	lsls	r3, r3, #16
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011d62:	68fb      	ldr	r3, [r7, #12]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	331a      	adds	r3, #26
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	b292      	uxth	r2, r2
 8011d80:	4611      	mov	r1, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff f857 	bl	8010e36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	2b03      	cmp	r3, #3
 8011d8e:	d109      	bne.n	8011da4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	f103 0214 	add.w	r2, r3, #20
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	0c1b      	lsrs	r3, r3, #16
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	4610      	mov	r0, r2
 8011da0:	f7ff f849 	bl	8010e36 <st_word>
	}
}
 8011da4:	bf00      	nop
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011dba:	2100      	movs	r1, #0
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7ff fe2f 	bl	8011a20 <dir_sdi>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d001      	beq.n	8011dd0 <dir_find+0x24>
 8011dcc:	7dfb      	ldrb	r3, [r7, #23]
 8011dce:	e03e      	b.n	8011e4e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	69db      	ldr	r3, [r3, #28]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6938      	ldr	r0, [r7, #16]
 8011dd8:	f7ff faa2 	bl	8011320 <move_window>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d12f      	bne.n	8011e46 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d102      	bne.n	8011dfa <dir_find+0x4e>
 8011df4:	2304      	movs	r3, #4
 8011df6:	75fb      	strb	r3, [r7, #23]
 8011df8:	e028      	b.n	8011e4c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a1b      	ldr	r3, [r3, #32]
 8011dfe:	330b      	adds	r3, #11
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a1b      	ldr	r3, [r3, #32]
 8011e10:	330b      	adds	r3, #11
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	f003 0308 	and.w	r3, r3, #8
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d10a      	bne.n	8011e32 <dir_find+0x86>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a18      	ldr	r0, [r3, #32]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	3324      	adds	r3, #36	; 0x24
 8011e24:	220b      	movs	r2, #11
 8011e26:	4619      	mov	r1, r3
 8011e28:	f7ff f888 	bl	8010f3c <mem_cmp>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00b      	beq.n	8011e4a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011e32:	2100      	movs	r1, #0
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff fe6e 	bl	8011b16 <dir_next>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011e3e:	7dfb      	ldrb	r3, [r7, #23]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d0c5      	beq.n	8011dd0 <dir_find+0x24>
 8011e44:	e002      	b.n	8011e4c <dir_find+0xa0>
		if (res != FR_OK) break;
 8011e46:	bf00      	nop
 8011e48:	e000      	b.n	8011e4c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e4a:	bf00      	nop

	return res;
 8011e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3718      	adds	r7, #24
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b084      	sub	sp, #16
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011e64:	2101      	movs	r1, #1
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ff1a 	bl	8011ca0 <dir_alloc>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d11c      	bne.n	8011eb0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	69db      	ldr	r3, [r3, #28]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	68b8      	ldr	r0, [r7, #8]
 8011e7e:	f7ff fa4f 	bl	8011320 <move_window>
 8011e82:	4603      	mov	r3, r0
 8011e84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e86:	7bfb      	ldrb	r3, [r7, #15]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d111      	bne.n	8011eb0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	2220      	movs	r2, #32
 8011e92:	2100      	movs	r1, #0
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff f836 	bl	8010f06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a18      	ldr	r0, [r3, #32]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3324      	adds	r3, #36	; 0x24
 8011ea2:	220b      	movs	r2, #11
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	f7ff f80d 	bl	8010ec4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2201      	movs	r2, #1
 8011eae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b088      	sub	sp, #32
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	60fb      	str	r3, [r7, #12]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	3324      	adds	r3, #36	; 0x24
 8011ed0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011ed2:	220b      	movs	r2, #11
 8011ed4:	2120      	movs	r1, #32
 8011ed6:	68b8      	ldr	r0, [r7, #8]
 8011ed8:	f7ff f815 	bl	8010f06 <mem_set>
	si = i = 0; ni = 8;
 8011edc:	2300      	movs	r3, #0
 8011ede:	613b      	str	r3, [r7, #16]
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	61fb      	str	r3, [r7, #28]
 8011ee4:	2308      	movs	r3, #8
 8011ee6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	61fa      	str	r2, [r7, #28]
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011ef6:	7efb      	ldrb	r3, [r7, #27]
 8011ef8:	2b20      	cmp	r3, #32
 8011efa:	d94e      	bls.n	8011f9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011efc:	7efb      	ldrb	r3, [r7, #27]
 8011efe:	2b2f      	cmp	r3, #47	; 0x2f
 8011f00:	d006      	beq.n	8011f10 <create_name+0x54>
 8011f02:	7efb      	ldrb	r3, [r7, #27]
 8011f04:	2b5c      	cmp	r3, #92	; 0x5c
 8011f06:	d110      	bne.n	8011f2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011f08:	e002      	b.n	8011f10 <create_name+0x54>
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	61fb      	str	r3, [r7, #28]
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	4413      	add	r3, r2
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b2f      	cmp	r3, #47	; 0x2f
 8011f1a:	d0f6      	beq.n	8011f0a <create_name+0x4e>
 8011f1c:	68fa      	ldr	r2, [r7, #12]
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	4413      	add	r3, r2
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	2b5c      	cmp	r3, #92	; 0x5c
 8011f26:	d0f0      	beq.n	8011f0a <create_name+0x4e>
			break;
 8011f28:	e038      	b.n	8011f9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011f2a:	7efb      	ldrb	r3, [r7, #27]
 8011f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f2e:	d003      	beq.n	8011f38 <create_name+0x7c>
 8011f30:	693a      	ldr	r2, [r7, #16]
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d30c      	bcc.n	8011f52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2b0b      	cmp	r3, #11
 8011f3c:	d002      	beq.n	8011f44 <create_name+0x88>
 8011f3e:	7efb      	ldrb	r3, [r7, #27]
 8011f40:	2b2e      	cmp	r3, #46	; 0x2e
 8011f42:	d001      	beq.n	8011f48 <create_name+0x8c>
 8011f44:	2306      	movs	r3, #6
 8011f46:	e044      	b.n	8011fd2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011f48:	2308      	movs	r3, #8
 8011f4a:	613b      	str	r3, [r7, #16]
 8011f4c:	230b      	movs	r3, #11
 8011f4e:	617b      	str	r3, [r7, #20]
			continue;
 8011f50:	e022      	b.n	8011f98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011f52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	da04      	bge.n	8011f64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011f5a:	7efb      	ldrb	r3, [r7, #27]
 8011f5c:	3b80      	subs	r3, #128	; 0x80
 8011f5e:	4a1f      	ldr	r2, [pc, #124]	; (8011fdc <create_name+0x120>)
 8011f60:	5cd3      	ldrb	r3, [r2, r3]
 8011f62:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011f64:	7efb      	ldrb	r3, [r7, #27]
 8011f66:	4619      	mov	r1, r3
 8011f68:	481d      	ldr	r0, [pc, #116]	; (8011fe0 <create_name+0x124>)
 8011f6a:	f7ff f80e 	bl	8010f8a <chk_chr>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <create_name+0xbc>
 8011f74:	2306      	movs	r3, #6
 8011f76:	e02c      	b.n	8011fd2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011f78:	7efb      	ldrb	r3, [r7, #27]
 8011f7a:	2b60      	cmp	r3, #96	; 0x60
 8011f7c:	d905      	bls.n	8011f8a <create_name+0xce>
 8011f7e:	7efb      	ldrb	r3, [r7, #27]
 8011f80:	2b7a      	cmp	r3, #122	; 0x7a
 8011f82:	d802      	bhi.n	8011f8a <create_name+0xce>
 8011f84:	7efb      	ldrb	r3, [r7, #27]
 8011f86:	3b20      	subs	r3, #32
 8011f88:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	1c5a      	adds	r2, r3, #1
 8011f8e:	613a      	str	r2, [r7, #16]
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	4413      	add	r3, r2
 8011f94:	7efa      	ldrb	r2, [r7, #27]
 8011f96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011f98:	e7a6      	b.n	8011ee8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011f9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	441a      	add	r2, r3
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d101      	bne.n	8011fb0 <create_name+0xf4>
 8011fac:	2306      	movs	r3, #6
 8011fae:	e010      	b.n	8011fd2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2be5      	cmp	r3, #229	; 0xe5
 8011fb6:	d102      	bne.n	8011fbe <create_name+0x102>
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2205      	movs	r2, #5
 8011fbc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011fbe:	7efb      	ldrb	r3, [r7, #27]
 8011fc0:	2b20      	cmp	r3, #32
 8011fc2:	d801      	bhi.n	8011fc8 <create_name+0x10c>
 8011fc4:	2204      	movs	r2, #4
 8011fc6:	e000      	b.n	8011fca <create_name+0x10e>
 8011fc8:	2200      	movs	r2, #0
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	330b      	adds	r3, #11
 8011fce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011fd0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3720      	adds	r7, #32
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	080178e8 	.word	0x080178e8
 8011fe0:	080177d8 	.word	0x080177d8

08011fe4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011ff8:	e002      	b.n	8012000 <follow_path+0x1c>
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	603b      	str	r3, [r7, #0]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	2b2f      	cmp	r3, #47	; 0x2f
 8012006:	d0f8      	beq.n	8011ffa <follow_path+0x16>
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b5c      	cmp	r3, #92	; 0x5c
 801200e:	d0f4      	beq.n	8011ffa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	2200      	movs	r2, #0
 8012014:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b1f      	cmp	r3, #31
 801201c:	d80a      	bhi.n	8012034 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2280      	movs	r2, #128	; 0x80
 8012022:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012026:	2100      	movs	r1, #0
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7ff fcf9 	bl	8011a20 <dir_sdi>
 801202e:	4603      	mov	r3, r0
 8012030:	75fb      	strb	r3, [r7, #23]
 8012032:	e043      	b.n	80120bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012034:	463b      	mov	r3, r7
 8012036:	4619      	mov	r1, r3
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f7ff ff3f 	bl	8011ebc <create_name>
 801203e:	4603      	mov	r3, r0
 8012040:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012042:	7dfb      	ldrb	r3, [r7, #23]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d134      	bne.n	80120b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff feaf 	bl	8011dac <dir_find>
 801204e:	4603      	mov	r3, r0
 8012050:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012058:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801205a:	7dfb      	ldrb	r3, [r7, #23]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00a      	beq.n	8012076 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	2b04      	cmp	r3, #4
 8012064:	d127      	bne.n	80120b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012066:	7afb      	ldrb	r3, [r7, #11]
 8012068:	f003 0304 	and.w	r3, r3, #4
 801206c:	2b00      	cmp	r3, #0
 801206e:	d122      	bne.n	80120b6 <follow_path+0xd2>
 8012070:	2305      	movs	r3, #5
 8012072:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012074:	e01f      	b.n	80120b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012076:	7afb      	ldrb	r3, [r7, #11]
 8012078:	f003 0304 	and.w	r3, r3, #4
 801207c:	2b00      	cmp	r3, #0
 801207e:	d11c      	bne.n	80120ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	799b      	ldrb	r3, [r3, #6]
 8012084:	f003 0310 	and.w	r3, r3, #16
 8012088:	2b00      	cmp	r3, #0
 801208a:	d102      	bne.n	8012092 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801208c:	2305      	movs	r3, #5
 801208e:	75fb      	strb	r3, [r7, #23]
 8012090:	e014      	b.n	80120bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	695b      	ldr	r3, [r3, #20]
 801209c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120a0:	4413      	add	r3, r2
 80120a2:	4619      	mov	r1, r3
 80120a4:	68f8      	ldr	r0, [r7, #12]
 80120a6:	f7ff fe42 	bl	8011d2e <ld_clust>
 80120aa:	4602      	mov	r2, r0
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80120b0:	e7c0      	b.n	8012034 <follow_path+0x50>
			if (res != FR_OK) break;
 80120b2:	bf00      	nop
 80120b4:	e002      	b.n	80120bc <follow_path+0xd8>
				break;
 80120b6:	bf00      	nop
 80120b8:	e000      	b.n	80120bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80120ba:	bf00      	nop
			}
		}
	}

	return res;
 80120bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80120c6:	b480      	push	{r7}
 80120c8:	b087      	sub	sp, #28
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80120ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d031      	beq.n	8012140 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	617b      	str	r3, [r7, #20]
 80120e2:	e002      	b.n	80120ea <get_ldnumber+0x24>
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	3301      	adds	r3, #1
 80120e8:	617b      	str	r3, [r7, #20]
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	2b20      	cmp	r3, #32
 80120f0:	d903      	bls.n	80120fa <get_ldnumber+0x34>
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	2b3a      	cmp	r3, #58	; 0x3a
 80120f8:	d1f4      	bne.n	80120e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	2b3a      	cmp	r3, #58	; 0x3a
 8012100:	d11c      	bne.n	801213c <get_ldnumber+0x76>
			tp = *path;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	60fa      	str	r2, [r7, #12]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	3b30      	subs	r3, #48	; 0x30
 8012112:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	2b09      	cmp	r3, #9
 8012118:	d80e      	bhi.n	8012138 <get_ldnumber+0x72>
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	429a      	cmp	r2, r3
 8012120:	d10a      	bne.n	8012138 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d107      	bne.n	8012138 <get_ldnumber+0x72>
					vol = (int)i;
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	3301      	adds	r3, #1
 8012130:	617b      	str	r3, [r7, #20]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	697a      	ldr	r2, [r7, #20]
 8012136:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	e002      	b.n	8012142 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801213c:	2300      	movs	r3, #0
 801213e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012140:	693b      	ldr	r3, [r7, #16]
}
 8012142:	4618      	mov	r0, r3
 8012144:	371c      	adds	r7, #28
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
	...

08012150 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	70da      	strb	r2, [r3, #3]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012166:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7ff f8d8 	bl	8011320 <move_window>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d001      	beq.n	801217a <check_fs+0x2a>
 8012176:	2304      	movs	r3, #4
 8012178:	e038      	b.n	80121ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	3330      	adds	r3, #48	; 0x30
 801217e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012182:	4618      	mov	r0, r3
 8012184:	f7fe fe1c 	bl	8010dc0 <ld_word>
 8012188:	4603      	mov	r3, r0
 801218a:	461a      	mov	r2, r3
 801218c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012190:	429a      	cmp	r2, r3
 8012192:	d001      	beq.n	8012198 <check_fs+0x48>
 8012194:	2303      	movs	r3, #3
 8012196:	e029      	b.n	80121ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801219e:	2be9      	cmp	r3, #233	; 0xe9
 80121a0:	d009      	beq.n	80121b6 <check_fs+0x66>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121a8:	2beb      	cmp	r3, #235	; 0xeb
 80121aa:	d11e      	bne.n	80121ea <check_fs+0x9a>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80121b2:	2b90      	cmp	r3, #144	; 0x90
 80121b4:	d119      	bne.n	80121ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	3330      	adds	r3, #48	; 0x30
 80121ba:	3336      	adds	r3, #54	; 0x36
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fe17 	bl	8010df0 <ld_dword>
 80121c2:	4603      	mov	r3, r0
 80121c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80121c8:	4a0a      	ldr	r2, [pc, #40]	; (80121f4 <check_fs+0xa4>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d101      	bne.n	80121d2 <check_fs+0x82>
 80121ce:	2300      	movs	r3, #0
 80121d0:	e00c      	b.n	80121ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	3330      	adds	r3, #48	; 0x30
 80121d6:	3352      	adds	r3, #82	; 0x52
 80121d8:	4618      	mov	r0, r3
 80121da:	f7fe fe09 	bl	8010df0 <ld_dword>
 80121de:	4603      	mov	r3, r0
 80121e0:	4a05      	ldr	r2, [pc, #20]	; (80121f8 <check_fs+0xa8>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d101      	bne.n	80121ea <check_fs+0x9a>
 80121e6:	2300      	movs	r3, #0
 80121e8:	e000      	b.n	80121ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80121ea:	2302      	movs	r3, #2
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	00544146 	.word	0x00544146
 80121f8:	33544146 	.word	0x33544146

080121fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b096      	sub	sp, #88	; 0x58
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	4613      	mov	r3, r2
 8012208:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	2200      	movs	r2, #0
 801220e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff ff58 	bl	80120c6 <get_ldnumber>
 8012216:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801221a:	2b00      	cmp	r3, #0
 801221c:	da01      	bge.n	8012222 <find_volume+0x26>
 801221e:	230b      	movs	r3, #11
 8012220:	e22d      	b.n	801267e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012222:	4aa1      	ldr	r2, [pc, #644]	; (80124a8 <find_volume+0x2ac>)
 8012224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801222a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	2b00      	cmp	r3, #0
 8012230:	d101      	bne.n	8012236 <find_volume+0x3a>
 8012232:	230c      	movs	r3, #12
 8012234:	e223      	b.n	801267e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801223a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	f023 0301 	bic.w	r3, r3, #1
 8012242:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d01a      	beq.n	8012282 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224e:	785b      	ldrb	r3, [r3, #1]
 8012250:	4618      	mov	r0, r3
 8012252:	f7fe fd17 	bl	8010c84 <disk_status>
 8012256:	4603      	mov	r3, r0
 8012258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801225c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012260:	f003 0301 	and.w	r3, r3, #1
 8012264:	2b00      	cmp	r3, #0
 8012266:	d10c      	bne.n	8012282 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012268:	79fb      	ldrb	r3, [r7, #7]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d007      	beq.n	801227e <find_volume+0x82>
 801226e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012272:	f003 0304 	and.w	r3, r3, #4
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801227a:	230a      	movs	r3, #10
 801227c:	e1ff      	b.n	801267e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801227e:	2300      	movs	r3, #0
 8012280:	e1fd      	b.n	801267e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012284:	2200      	movs	r2, #0
 8012286:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801228a:	b2da      	uxtb	r2, r3
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	785b      	ldrb	r3, [r3, #1]
 8012294:	4618      	mov	r0, r3
 8012296:	f7fe fd0f 	bl	8010cb8 <disk_initialize>
 801229a:	4603      	mov	r3, r0
 801229c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80122a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80122ac:	2303      	movs	r3, #3
 80122ae:	e1e6      	b.n	801267e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80122b0:	79fb      	ldrb	r3, [r7, #7]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d007      	beq.n	80122c6 <find_volume+0xca>
 80122b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122ba:	f003 0304 	and.w	r3, r3, #4
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d001      	beq.n	80122c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80122c2:	230a      	movs	r3, #10
 80122c4:	e1db      	b.n	801267e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80122ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80122ce:	f7ff ff3f 	bl	8012150 <check_fs>
 80122d2:	4603      	mov	r3, r0
 80122d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80122d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122dc:	2b02      	cmp	r3, #2
 80122de:	d149      	bne.n	8012374 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80122e0:	2300      	movs	r3, #0
 80122e2:	643b      	str	r3, [r7, #64]	; 0x40
 80122e4:	e01e      	b.n	8012324 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80122e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80122ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122ee:	011b      	lsls	r3, r3, #4
 80122f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80122f4:	4413      	add	r3, r2
 80122f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80122f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fa:	3304      	adds	r3, #4
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d006      	beq.n	8012310 <find_volume+0x114>
 8012302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012304:	3308      	adds	r3, #8
 8012306:	4618      	mov	r0, r3
 8012308:	f7fe fd72 	bl	8010df0 <ld_dword>
 801230c:	4602      	mov	r2, r0
 801230e:	e000      	b.n	8012312 <find_volume+0x116>
 8012310:	2200      	movs	r2, #0
 8012312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	3358      	adds	r3, #88	; 0x58
 8012318:	443b      	add	r3, r7
 801231a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012320:	3301      	adds	r3, #1
 8012322:	643b      	str	r3, [r7, #64]	; 0x40
 8012324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012326:	2b03      	cmp	r3, #3
 8012328:	d9dd      	bls.n	80122e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801232a:	2300      	movs	r3, #0
 801232c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801232e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012330:	2b00      	cmp	r3, #0
 8012332:	d002      	beq.n	801233a <find_volume+0x13e>
 8012334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012336:	3b01      	subs	r3, #1
 8012338:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	3358      	adds	r3, #88	; 0x58
 8012340:	443b      	add	r3, r7
 8012342:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012346:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234a:	2b00      	cmp	r3, #0
 801234c:	d005      	beq.n	801235a <find_volume+0x15e>
 801234e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012352:	f7ff fefd 	bl	8012150 <check_fs>
 8012356:	4603      	mov	r3, r0
 8012358:	e000      	b.n	801235c <find_volume+0x160>
 801235a:	2303      	movs	r3, #3
 801235c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012364:	2b01      	cmp	r3, #1
 8012366:	d905      	bls.n	8012374 <find_volume+0x178>
 8012368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801236a:	3301      	adds	r3, #1
 801236c:	643b      	str	r3, [r7, #64]	; 0x40
 801236e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012370:	2b03      	cmp	r3, #3
 8012372:	d9e2      	bls.n	801233a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012378:	2b04      	cmp	r3, #4
 801237a:	d101      	bne.n	8012380 <find_volume+0x184>
 801237c:	2301      	movs	r3, #1
 801237e:	e17e      	b.n	801267e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012384:	2b01      	cmp	r3, #1
 8012386:	d901      	bls.n	801238c <find_volume+0x190>
 8012388:	230d      	movs	r3, #13
 801238a:	e178      	b.n	801267e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238e:	3330      	adds	r3, #48	; 0x30
 8012390:	330b      	adds	r3, #11
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe fd14 	bl	8010dc0 <ld_word>
 8012398:	4603      	mov	r3, r0
 801239a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801239e:	d001      	beq.n	80123a4 <find_volume+0x1a8>
 80123a0:	230d      	movs	r3, #13
 80123a2:	e16c      	b.n	801267e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80123a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a6:	3330      	adds	r3, #48	; 0x30
 80123a8:	3316      	adds	r3, #22
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe fd08 	bl	8010dc0 <ld_word>
 80123b0:	4603      	mov	r3, r0
 80123b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80123b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <find_volume+0x1cc>
 80123ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123bc:	3330      	adds	r3, #48	; 0x30
 80123be:	3324      	adds	r3, #36	; 0x24
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fe fd15 	bl	8010df0 <ld_dword>
 80123c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80123ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80123d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80123d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123da:	789b      	ldrb	r3, [r3, #2]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d005      	beq.n	80123ec <find_volume+0x1f0>
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	789b      	ldrb	r3, [r3, #2]
 80123e4:	2b02      	cmp	r3, #2
 80123e6:	d001      	beq.n	80123ec <find_volume+0x1f0>
 80123e8:	230d      	movs	r3, #13
 80123ea:	e148      	b.n	801267e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	789b      	ldrb	r3, [r3, #2]
 80123f0:	461a      	mov	r2, r3
 80123f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123f4:	fb02 f303 	mul.w	r3, r2, r3
 80123f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012400:	b29a      	uxth	r2, r3
 8012402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012404:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	895b      	ldrh	r3, [r3, #10]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d008      	beq.n	8012420 <find_volume+0x224>
 801240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012410:	895b      	ldrh	r3, [r3, #10]
 8012412:	461a      	mov	r2, r3
 8012414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012416:	895b      	ldrh	r3, [r3, #10]
 8012418:	3b01      	subs	r3, #1
 801241a:	4013      	ands	r3, r2
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <find_volume+0x228>
 8012420:	230d      	movs	r3, #13
 8012422:	e12c      	b.n	801267e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012426:	3330      	adds	r3, #48	; 0x30
 8012428:	3311      	adds	r3, #17
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe fcc8 	bl	8010dc0 <ld_word>
 8012430:	4603      	mov	r3, r0
 8012432:	461a      	mov	r2, r3
 8012434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012436:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243a:	891b      	ldrh	r3, [r3, #8]
 801243c:	f003 030f 	and.w	r3, r3, #15
 8012440:	b29b      	uxth	r3, r3
 8012442:	2b00      	cmp	r3, #0
 8012444:	d001      	beq.n	801244a <find_volume+0x24e>
 8012446:	230d      	movs	r3, #13
 8012448:	e119      	b.n	801267e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244c:	3330      	adds	r3, #48	; 0x30
 801244e:	3313      	adds	r3, #19
 8012450:	4618      	mov	r0, r3
 8012452:	f7fe fcb5 	bl	8010dc0 <ld_word>
 8012456:	4603      	mov	r3, r0
 8012458:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801245a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <find_volume+0x272>
 8012460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012462:	3330      	adds	r3, #48	; 0x30
 8012464:	3320      	adds	r3, #32
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe fcc2 	bl	8010df0 <ld_dword>
 801246c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012470:	3330      	adds	r3, #48	; 0x30
 8012472:	330e      	adds	r3, #14
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe fca3 	bl	8010dc0 <ld_word>
 801247a:	4603      	mov	r3, r0
 801247c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801247e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012480:	2b00      	cmp	r3, #0
 8012482:	d101      	bne.n	8012488 <find_volume+0x28c>
 8012484:	230d      	movs	r3, #13
 8012486:	e0fa      	b.n	801267e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012488:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801248c:	4413      	add	r3, r2
 801248e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012490:	8912      	ldrh	r2, [r2, #8]
 8012492:	0912      	lsrs	r2, r2, #4
 8012494:	b292      	uxth	r2, r2
 8012496:	4413      	add	r3, r2
 8012498:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801249a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249e:	429a      	cmp	r2, r3
 80124a0:	d204      	bcs.n	80124ac <find_volume+0x2b0>
 80124a2:	230d      	movs	r3, #13
 80124a4:	e0eb      	b.n	801267e <find_volume+0x482>
 80124a6:	bf00      	nop
 80124a8:	2000132c 	.word	0x2000132c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80124ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124b4:	8952      	ldrh	r2, [r2, #10]
 80124b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80124ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d101      	bne.n	80124c6 <find_volume+0x2ca>
 80124c2:	230d      	movs	r3, #13
 80124c4:	e0db      	b.n	801267e <find_volume+0x482>
		fmt = FS_FAT32;
 80124c6:	2303      	movs	r3, #3
 80124c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80124d2:	4293      	cmp	r3, r2
 80124d4:	d802      	bhi.n	80124dc <find_volume+0x2e0>
 80124d6:	2302      	movs	r3, #2
 80124d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d802      	bhi.n	80124ec <find_volume+0x2f0>
 80124e6:	2301      	movs	r3, #1
 80124e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	1c9a      	adds	r2, r3, #2
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80124f8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80124fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80124fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124fe:	441a      	add	r2, r3
 8012500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012502:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012504:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	441a      	add	r2, r3
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801250e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012512:	2b03      	cmp	r3, #3
 8012514:	d11e      	bne.n	8012554 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012518:	3330      	adds	r3, #48	; 0x30
 801251a:	332a      	adds	r3, #42	; 0x2a
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fc4f 	bl	8010dc0 <ld_word>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d001      	beq.n	801252c <find_volume+0x330>
 8012528:	230d      	movs	r3, #13
 801252a:	e0a8      	b.n	801267e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	891b      	ldrh	r3, [r3, #8]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <find_volume+0x33c>
 8012534:	230d      	movs	r3, #13
 8012536:	e0a2      	b.n	801267e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	3330      	adds	r3, #48	; 0x30
 801253c:	332c      	adds	r3, #44	; 0x2c
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fc56 	bl	8010df0 <ld_dword>
 8012544:	4602      	mov	r2, r0
 8012546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012548:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254c:	695b      	ldr	r3, [r3, #20]
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	647b      	str	r3, [r7, #68]	; 0x44
 8012552:	e01f      	b.n	8012594 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	891b      	ldrh	r3, [r3, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <find_volume+0x364>
 801255c:	230d      	movs	r3, #13
 801255e:	e08e      	b.n	801267e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012562:	6a1a      	ldr	r2, [r3, #32]
 8012564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012566:	441a      	add	r2, r3
 8012568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801256c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012570:	2b02      	cmp	r3, #2
 8012572:	d103      	bne.n	801257c <find_volume+0x380>
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	e00a      	b.n	8012592 <find_volume+0x396>
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	695a      	ldr	r2, [r3, #20]
 8012580:	4613      	mov	r3, r2
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	4413      	add	r3, r2
 8012586:	085a      	lsrs	r2, r3, #1
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012592:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012596:	699a      	ldr	r2, [r3, #24]
 8012598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801259a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801259e:	0a5b      	lsrs	r3, r3, #9
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d201      	bcs.n	80125a8 <find_volume+0x3ac>
 80125a4:	230d      	movs	r3, #13
 80125a6:	e06a      	b.n	801267e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125ae:	611a      	str	r2, [r3, #16]
 80125b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b2:	691a      	ldr	r2, [r3, #16]
 80125b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	2280      	movs	r2, #128	; 0x80
 80125bc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80125be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125c2:	2b03      	cmp	r3, #3
 80125c4:	d149      	bne.n	801265a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80125c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c8:	3330      	adds	r3, #48	; 0x30
 80125ca:	3330      	adds	r3, #48	; 0x30
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7fe fbf7 	bl	8010dc0 <ld_word>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d140      	bne.n	801265a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80125d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125da:	3301      	adds	r3, #1
 80125dc:	4619      	mov	r1, r3
 80125de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125e0:	f7fe fe9e 	bl	8011320 <move_window>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d137      	bne.n	801265a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80125ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ec:	2200      	movs	r2, #0
 80125ee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80125f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f2:	3330      	adds	r3, #48	; 0x30
 80125f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fe fbe1 	bl	8010dc0 <ld_word>
 80125fe:	4603      	mov	r3, r0
 8012600:	461a      	mov	r2, r3
 8012602:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012606:	429a      	cmp	r2, r3
 8012608:	d127      	bne.n	801265a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260c:	3330      	adds	r3, #48	; 0x30
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fbee 	bl	8010df0 <ld_dword>
 8012614:	4603      	mov	r3, r0
 8012616:	4a1c      	ldr	r2, [pc, #112]	; (8012688 <find_volume+0x48c>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d11e      	bne.n	801265a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261e:	3330      	adds	r3, #48	; 0x30
 8012620:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012624:	4618      	mov	r0, r3
 8012626:	f7fe fbe3 	bl	8010df0 <ld_dword>
 801262a:	4603      	mov	r3, r0
 801262c:	4a17      	ldr	r2, [pc, #92]	; (801268c <find_volume+0x490>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d113      	bne.n	801265a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	3330      	adds	r3, #48	; 0x30
 8012636:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe fbd8 	bl	8010df0 <ld_dword>
 8012640:	4602      	mov	r2, r0
 8012642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012644:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012648:	3330      	adds	r3, #48	; 0x30
 801264a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe fbce 	bl	8010df0 <ld_dword>
 8012654:	4602      	mov	r2, r0
 8012656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012658:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012660:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012662:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <find_volume+0x494>)
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	3301      	adds	r3, #1
 8012668:	b29a      	uxth	r2, r3
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <find_volume+0x494>)
 801266c:	801a      	strh	r2, [r3, #0]
 801266e:	4b08      	ldr	r3, [pc, #32]	; (8012690 <find_volume+0x494>)
 8012670:	881a      	ldrh	r2, [r3, #0]
 8012672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012674:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012678:	f7fe fdea 	bl	8011250 <clear_lock>
#endif
	return FR_OK;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3758      	adds	r7, #88	; 0x58
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	41615252 	.word	0x41615252
 801268c:	61417272 	.word	0x61417272
 8012690:	20001330 	.word	0x20001330

08012694 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801269e:	2309      	movs	r3, #9
 80126a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d01c      	beq.n	80126e2 <validate+0x4e>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d018      	beq.n	80126e2 <validate+0x4e>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d013      	beq.n	80126e2 <validate+0x4e>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	889a      	ldrh	r2, [r3, #4]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	88db      	ldrh	r3, [r3, #6]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d10c      	bne.n	80126e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	785b      	ldrb	r3, [r3, #1]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fe fad8 	bl	8010c84 <disk_status>
 80126d4:	4603      	mov	r3, r0
 80126d6:	f003 0301 	and.w	r3, r3, #1
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d101      	bne.n	80126e2 <validate+0x4e>
			res = FR_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80126e2:	7bfb      	ldrb	r3, [r7, #15]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d102      	bne.n	80126ee <validate+0x5a>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	e000      	b.n	80126f0 <validate+0x5c>
 80126ee:	2300      	movs	r3, #0
 80126f0:	683a      	ldr	r2, [r7, #0]
 80126f2:	6013      	str	r3, [r2, #0]
	return res;
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
	...

08012700 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b088      	sub	sp, #32
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	4613      	mov	r3, r2
 801270c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012712:	f107 0310 	add.w	r3, r7, #16
 8012716:	4618      	mov	r0, r3
 8012718:	f7ff fcd5 	bl	80120c6 <get_ldnumber>
 801271c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	2b00      	cmp	r3, #0
 8012722:	da01      	bge.n	8012728 <f_mount+0x28>
 8012724:	230b      	movs	r3, #11
 8012726:	e02b      	b.n	8012780 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012728:	4a17      	ldr	r2, [pc, #92]	; (8012788 <f_mount+0x88>)
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012730:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d005      	beq.n	8012744 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012738:	69b8      	ldr	r0, [r7, #24]
 801273a:	f7fe fd89 	bl	8011250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	2200      	movs	r2, #0
 8012742:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d002      	beq.n	8012750 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	490d      	ldr	r1, [pc, #52]	; (8012788 <f_mount+0x88>)
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <f_mount+0x66>
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d001      	beq.n	801276a <f_mount+0x6a>
 8012766:	2300      	movs	r3, #0
 8012768:	e00a      	b.n	8012780 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801276a:	f107 010c 	add.w	r1, r7, #12
 801276e:	f107 0308 	add.w	r3, r7, #8
 8012772:	2200      	movs	r2, #0
 8012774:	4618      	mov	r0, r3
 8012776:	f7ff fd41 	bl	80121fc <find_volume>
 801277a:	4603      	mov	r3, r0
 801277c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3720      	adds	r7, #32
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	2000132c 	.word	0x2000132c

0801278c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b09a      	sub	sp, #104	; 0x68
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	4613      	mov	r3, r2
 8012798:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <f_open+0x18>
 80127a0:	2309      	movs	r3, #9
 80127a2:	e1ad      	b.n	8012b00 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80127ac:	79fa      	ldrb	r2, [r7, #7]
 80127ae:	f107 0114 	add.w	r1, r7, #20
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7ff fd20 	bl	80121fc <find_volume>
 80127bc:	4603      	mov	r3, r0
 80127be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80127c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	f040 8191 	bne.w	8012aee <f_open+0x362>
		dj.obj.fs = fs;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	f107 0318 	add.w	r3, r7, #24
 80127d6:	4611      	mov	r1, r2
 80127d8:	4618      	mov	r0, r3
 80127da:	f7ff fc03 	bl	8011fe4 <follow_path>
 80127de:	4603      	mov	r3, r0
 80127e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80127e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d11a      	bne.n	8012822 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80127ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80127f0:	b25b      	sxtb	r3, r3
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	da03      	bge.n	80127fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80127f6:	2306      	movs	r3, #6
 80127f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80127fc:	e011      	b.n	8012822 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	f023 0301 	bic.w	r3, r3, #1
 8012804:	2b00      	cmp	r3, #0
 8012806:	bf14      	ite	ne
 8012808:	2301      	movne	r3, #1
 801280a:	2300      	moveq	r3, #0
 801280c:	b2db      	uxtb	r3, r3
 801280e:	461a      	mov	r2, r3
 8012810:	f107 0318 	add.w	r3, r7, #24
 8012814:	4611      	mov	r1, r2
 8012816:	4618      	mov	r0, r3
 8012818:	f7fe fbd2 	bl	8010fc0 <chk_lock>
 801281c:	4603      	mov	r3, r0
 801281e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012822:	79fb      	ldrb	r3, [r7, #7]
 8012824:	f003 031c 	and.w	r3, r3, #28
 8012828:	2b00      	cmp	r3, #0
 801282a:	d07f      	beq.n	801292c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801282c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012830:	2b00      	cmp	r3, #0
 8012832:	d017      	beq.n	8012864 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012838:	2b04      	cmp	r3, #4
 801283a:	d10e      	bne.n	801285a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801283c:	f7fe fc1c 	bl	8011078 <enq_lock>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d006      	beq.n	8012854 <f_open+0xc8>
 8012846:	f107 0318 	add.w	r3, r7, #24
 801284a:	4618      	mov	r0, r3
 801284c:	f7ff fb03 	bl	8011e56 <dir_register>
 8012850:	4603      	mov	r3, r0
 8012852:	e000      	b.n	8012856 <f_open+0xca>
 8012854:	2312      	movs	r3, #18
 8012856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801285a:	79fb      	ldrb	r3, [r7, #7]
 801285c:	f043 0308 	orr.w	r3, r3, #8
 8012860:	71fb      	strb	r3, [r7, #7]
 8012862:	e010      	b.n	8012886 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012864:	7fbb      	ldrb	r3, [r7, #30]
 8012866:	f003 0311 	and.w	r3, r3, #17
 801286a:	2b00      	cmp	r3, #0
 801286c:	d003      	beq.n	8012876 <f_open+0xea>
					res = FR_DENIED;
 801286e:	2307      	movs	r3, #7
 8012870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012874:	e007      	b.n	8012886 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012876:	79fb      	ldrb	r3, [r7, #7]
 8012878:	f003 0304 	and.w	r3, r3, #4
 801287c:	2b00      	cmp	r3, #0
 801287e:	d002      	beq.n	8012886 <f_open+0xfa>
 8012880:	2308      	movs	r3, #8
 8012882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801288a:	2b00      	cmp	r3, #0
 801288c:	d168      	bne.n	8012960 <f_open+0x1d4>
 801288e:	79fb      	ldrb	r3, [r7, #7]
 8012890:	f003 0308 	and.w	r3, r3, #8
 8012894:	2b00      	cmp	r3, #0
 8012896:	d063      	beq.n	8012960 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012898:	f7fc fbd0 	bl	800f03c <get_fattime>
 801289c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	330e      	adds	r3, #14
 80128a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fe fae1 	bl	8010e6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80128aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ac:	3316      	adds	r3, #22
 80128ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fe fadb 	bl	8010e6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80128b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b8:	330b      	adds	r3, #11
 80128ba:	2220      	movs	r2, #32
 80128bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128c2:	4611      	mov	r1, r2
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7ff fa32 	bl	8011d2e <ld_clust>
 80128ca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128d0:	2200      	movs	r2, #0
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7ff fa4a 	bl	8011d6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80128d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128da:	331c      	adds	r3, #28
 80128dc:	2100      	movs	r1, #0
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fe fac4 	bl	8010e6c <st_dword>
					fs->wflag = 1;
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	2201      	movs	r2, #1
 80128e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80128ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d037      	beq.n	8012960 <f_open+0x1d4>
						dw = fs->winsect;
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80128f6:	f107 0318 	add.w	r3, r7, #24
 80128fa:	2200      	movs	r2, #0
 80128fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fe ff5d 	bl	80117be <remove_chain>
 8012904:	4603      	mov	r3, r0
 8012906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801290a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801290e:	2b00      	cmp	r3, #0
 8012910:	d126      	bne.n	8012960 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012916:	4618      	mov	r0, r3
 8012918:	f7fe fd02 	bl	8011320 <move_window>
 801291c:	4603      	mov	r3, r0
 801291e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012926:	3a01      	subs	r2, #1
 8012928:	60da      	str	r2, [r3, #12]
 801292a:	e019      	b.n	8012960 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801292c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012930:	2b00      	cmp	r3, #0
 8012932:	d115      	bne.n	8012960 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012934:	7fbb      	ldrb	r3, [r7, #30]
 8012936:	f003 0310 	and.w	r3, r3, #16
 801293a:	2b00      	cmp	r3, #0
 801293c:	d003      	beq.n	8012946 <f_open+0x1ba>
					res = FR_NO_FILE;
 801293e:	2304      	movs	r3, #4
 8012940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012944:	e00c      	b.n	8012960 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012946:	79fb      	ldrb	r3, [r7, #7]
 8012948:	f003 0302 	and.w	r3, r3, #2
 801294c:	2b00      	cmp	r3, #0
 801294e:	d007      	beq.n	8012960 <f_open+0x1d4>
 8012950:	7fbb      	ldrb	r3, [r7, #30]
 8012952:	f003 0301 	and.w	r3, r3, #1
 8012956:	2b00      	cmp	r3, #0
 8012958:	d002      	beq.n	8012960 <f_open+0x1d4>
						res = FR_DENIED;
 801295a:	2307      	movs	r3, #7
 801295c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012960:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012964:	2b00      	cmp	r3, #0
 8012966:	d128      	bne.n	80129ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012968:	79fb      	ldrb	r3, [r7, #7]
 801296a:	f003 0308 	and.w	r3, r3, #8
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012972:	79fb      	ldrb	r3, [r7, #7]
 8012974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012978:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012988:	79fb      	ldrb	r3, [r7, #7]
 801298a:	f023 0301 	bic.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	bf14      	ite	ne
 8012992:	2301      	movne	r3, #1
 8012994:	2300      	moveq	r3, #0
 8012996:	b2db      	uxtb	r3, r3
 8012998:	461a      	mov	r2, r3
 801299a:	f107 0318 	add.w	r3, r7, #24
 801299e:	4611      	mov	r1, r2
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fe fb8b 	bl	80110bc <inc_lock>
 80129a6:	4602      	mov	r2, r0
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	691b      	ldr	r3, [r3, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <f_open+0x22e>
 80129b4:	2302      	movs	r3, #2
 80129b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80129ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f040 8095 	bne.w	8012aee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff f9af 	bl	8011d2e <ld_clust>
 80129d0:	4602      	mov	r2, r0
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80129d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d8:	331c      	adds	r3, #28
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fe fa08 	bl	8010df0 <ld_dword>
 80129e0:	4602      	mov	r2, r0
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	2200      	movs	r2, #0
 80129ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80129ec:	697a      	ldr	r2, [r7, #20]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	88da      	ldrh	r2, [r3, #6]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	79fa      	ldrb	r2, [r7, #7]
 80129fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2200      	movs	r2, #0
 8012a04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	3330      	adds	r3, #48	; 0x30
 8012a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe fa72 	bl	8010f06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012a22:	79fb      	ldrb	r3, [r7, #7]
 8012a24:	f003 0320 	and.w	r3, r3, #32
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d060      	beq.n	8012aee <f_open+0x362>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d05c      	beq.n	8012aee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	68da      	ldr	r2, [r3, #12]
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	895b      	ldrh	r3, [r3, #10]
 8012a40:	025b      	lsls	r3, r3, #9
 8012a42:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a50:	e016      	b.n	8012a80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe fd1d 	bl	8011496 <get_fat>
 8012a5c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d802      	bhi.n	8012a6a <f_open+0x2de>
 8012a64:	2302      	movs	r3, #2
 8012a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a70:	d102      	bne.n	8012a78 <f_open+0x2ec>
 8012a72:	2301      	movs	r3, #1
 8012a74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7c:	1ad3      	subs	r3, r2, r3
 8012a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d103      	bne.n	8012a90 <f_open+0x304>
 8012a88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d8e0      	bhi.n	8012a52 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012a94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d127      	bne.n	8012aee <f_open+0x362>
 8012a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d022      	beq.n	8012aee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fe fcd3 	bl	8011458 <clust2sect>
 8012ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d103      	bne.n	8012ac2 <f_open+0x336>
						res = FR_INT_ERR;
 8012aba:	2302      	movs	r3, #2
 8012abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012ac0:	e015      	b.n	8012aee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ac4:	0a5a      	lsrs	r2, r3, #9
 8012ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac8:	441a      	add	r2, r3
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	7858      	ldrb	r0, [r3, #1]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	6a1a      	ldr	r2, [r3, #32]
 8012adc:	2301      	movs	r3, #1
 8012ade:	f7fe f911 	bl	8010d04 <disk_read>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <f_open+0x362>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012aee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d002      	beq.n	8012afc <f_open+0x370>
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2200      	movs	r2, #0
 8012afa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012afc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3768      	adds	r7, #104	; 0x68
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b08e      	sub	sp, #56	; 0x38
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	607a      	str	r2, [r7, #4]
 8012b14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f107 0214 	add.w	r2, r7, #20
 8012b26:	4611      	mov	r1, r2
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7ff fdb3 	bl	8012694 <validate>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d107      	bne.n	8012b4c <f_read+0x44>
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	7d5b      	ldrb	r3, [r3, #21]
 8012b40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <f_read+0x4a>
 8012b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b50:	e115      	b.n	8012d7e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	7d1b      	ldrb	r3, [r3, #20]
 8012b56:	f003 0301 	and.w	r3, r3, #1
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d101      	bne.n	8012b62 <f_read+0x5a>
 8012b5e:	2307      	movs	r3, #7
 8012b60:	e10d      	b.n	8012d7e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	68da      	ldr	r2, [r3, #12]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	699b      	ldr	r3, [r3, #24]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	f240 80fe 	bls.w	8012d74 <f_read+0x26c>
 8012b78:	6a3b      	ldr	r3, [r7, #32]
 8012b7a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012b7c:	e0fa      	b.n	8012d74 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	699b      	ldr	r3, [r3, #24]
 8012b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f040 80c6 	bne.w	8012d18 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	0a5b      	lsrs	r3, r3, #9
 8012b92:	697a      	ldr	r2, [r7, #20]
 8012b94:	8952      	ldrh	r2, [r2, #10]
 8012b96:	3a01      	subs	r2, #1
 8012b98:	4013      	ands	r3, r2
 8012b9a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d12f      	bne.n	8012c02 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	699b      	ldr	r3, [r3, #24]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d103      	bne.n	8012bb2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	689b      	ldr	r3, [r3, #8]
 8012bae:	633b      	str	r3, [r7, #48]	; 0x30
 8012bb0:	e013      	b.n	8012bda <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d007      	beq.n	8012bca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	68f8      	ldr	r0, [r7, #12]
 8012bc2:	f7fe fef9 	bl	80119b8 <clmt_clust>
 8012bc6:	6338      	str	r0, [r7, #48]	; 0x30
 8012bc8:	e007      	b.n	8012bda <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	69db      	ldr	r3, [r3, #28]
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	f7fe fc5f 	bl	8011496 <get_fat>
 8012bd8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d804      	bhi.n	8012bea <f_read+0xe2>
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	2202      	movs	r2, #2
 8012be4:	755a      	strb	r2, [r3, #21]
 8012be6:	2302      	movs	r3, #2
 8012be8:	e0c9      	b.n	8012d7e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bf0:	d104      	bne.n	8012bfc <f_read+0xf4>
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	755a      	strb	r2, [r3, #21]
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e0c0      	b.n	8012d7e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c00:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012c02:	697a      	ldr	r2, [r7, #20]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7fe fc24 	bl	8011458 <clust2sect>
 8012c10:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d104      	bne.n	8012c22 <f_read+0x11a>
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2202      	movs	r2, #2
 8012c1c:	755a      	strb	r2, [r3, #21]
 8012c1e:	2302      	movs	r3, #2
 8012c20:	e0ad      	b.n	8012d7e <f_read+0x276>
			sect += csect;
 8012c22:	69ba      	ldr	r2, [r7, #24]
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	4413      	add	r3, r2
 8012c28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	0a5b      	lsrs	r3, r3, #9
 8012c2e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d039      	beq.n	8012caa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012c36:	69fa      	ldr	r2, [r7, #28]
 8012c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3a:	4413      	add	r3, r2
 8012c3c:	697a      	ldr	r2, [r7, #20]
 8012c3e:	8952      	ldrh	r2, [r2, #10]
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d905      	bls.n	8012c50 <f_read+0x148>
					cc = fs->csize - csect;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	895b      	ldrh	r3, [r3, #10]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	7858      	ldrb	r0, [r3, #1]
 8012c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c56:	69ba      	ldr	r2, [r7, #24]
 8012c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c5a:	f7fe f853 	bl	8010d04 <disk_read>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d004      	beq.n	8012c6e <f_read+0x166>
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2201      	movs	r2, #1
 8012c68:	755a      	strb	r2, [r3, #21]
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e087      	b.n	8012d7e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	7d1b      	ldrb	r3, [r3, #20]
 8012c72:	b25b      	sxtb	r3, r3
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	da14      	bge.n	8012ca2 <f_read+0x19a>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6a1a      	ldr	r2, [r3, #32]
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d90d      	bls.n	8012ca2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6a1a      	ldr	r2, [r3, #32]
 8012c8a:	69bb      	ldr	r3, [r7, #24]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	025b      	lsls	r3, r3, #9
 8012c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c92:	18d0      	adds	r0, r2, r3
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	3330      	adds	r3, #48	; 0x30
 8012c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	f7fe f911 	bl	8010ec4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca4:	025b      	lsls	r3, r3, #9
 8012ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012ca8:	e050      	b.n	8012d4c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6a1b      	ldr	r3, [r3, #32]
 8012cae:	69ba      	ldr	r2, [r7, #24]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d02e      	beq.n	8012d12 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	b25b      	sxtb	r3, r3
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	da18      	bge.n	8012cf0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	7858      	ldrb	r0, [r3, #1]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	6a1a      	ldr	r2, [r3, #32]
 8012ccc:	2301      	movs	r3, #1
 8012cce:	f7fe f839 	bl	8010d44 <disk_write>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d004      	beq.n	8012ce2 <f_read+0x1da>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2201      	movs	r2, #1
 8012cdc:	755a      	strb	r2, [r3, #21]
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e04d      	b.n	8012d7e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	7d1b      	ldrb	r3, [r3, #20]
 8012ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	7858      	ldrb	r0, [r3, #1]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	69ba      	ldr	r2, [r7, #24]
 8012cfe:	f7fe f801 	bl	8010d04 <disk_read>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d004      	beq.n	8012d12 <f_read+0x20a>
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	755a      	strb	r2, [r3, #21]
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e035      	b.n	8012d7e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	69ba      	ldr	r2, [r7, #24]
 8012d16:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	699b      	ldr	r3, [r3, #24]
 8012d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012d24:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d901      	bls.n	8012d32 <f_read+0x22a>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	699b      	ldr	r3, [r3, #24]
 8012d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d40:	4413      	add	r3, r2
 8012d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d44:	4619      	mov	r1, r3
 8012d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d48:	f7fe f8bc 	bl	8010ec4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d50:	4413      	add	r3, r2
 8012d52:	627b      	str	r3, [r7, #36]	; 0x24
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	699a      	ldr	r2, [r3, #24]
 8012d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5a:	441a      	add	r2, r3
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	619a      	str	r2, [r3, #24]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d66:	441a      	add	r2, r3
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	601a      	str	r2, [r3, #0]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f47f af01 	bne.w	8012b7e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012d7c:	2300      	movs	r3, #0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3738      	adds	r7, #56	; 0x38
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b08c      	sub	sp, #48	; 0x30
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	60f8      	str	r0, [r7, #12]
 8012d8e:	60b9      	str	r1, [r7, #8]
 8012d90:	607a      	str	r2, [r7, #4]
 8012d92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	f107 0210 	add.w	r2, r7, #16
 8012da4:	4611      	mov	r1, r2
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff fc74 	bl	8012694 <validate>
 8012dac:	4603      	mov	r3, r0
 8012dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d107      	bne.n	8012dca <f_write+0x44>
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	7d5b      	ldrb	r3, [r3, #21]
 8012dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d002      	beq.n	8012dd0 <f_write+0x4a>
 8012dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dce:	e14b      	b.n	8013068 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	7d1b      	ldrb	r3, [r3, #20]
 8012dd4:	f003 0302 	and.w	r3, r3, #2
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d101      	bne.n	8012de0 <f_write+0x5a>
 8012ddc:	2307      	movs	r3, #7
 8012dde:	e143      	b.n	8013068 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	699a      	ldr	r2, [r3, #24]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	441a      	add	r2, r3
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	699b      	ldr	r3, [r3, #24]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	f080 812d 	bcs.w	801304c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	699b      	ldr	r3, [r3, #24]
 8012df6:	43db      	mvns	r3, r3
 8012df8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012dfa:	e127      	b.n	801304c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	699b      	ldr	r3, [r3, #24]
 8012e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	f040 80e3 	bne.w	8012fd0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	699b      	ldr	r3, [r3, #24]
 8012e0e:	0a5b      	lsrs	r3, r3, #9
 8012e10:	693a      	ldr	r2, [r7, #16]
 8012e12:	8952      	ldrh	r2, [r2, #10]
 8012e14:	3a01      	subs	r2, #1
 8012e16:	4013      	ands	r3, r2
 8012e18:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d143      	bne.n	8012ea8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	699b      	ldr	r3, [r3, #24]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10c      	bne.n	8012e42 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d11a      	bne.n	8012e6a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2100      	movs	r1, #0
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fe fd25 	bl	8011888 <create_chain>
 8012e3e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012e40:	e013      	b.n	8012e6a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d007      	beq.n	8012e5a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	699b      	ldr	r3, [r3, #24]
 8012e4e:	4619      	mov	r1, r3
 8012e50:	68f8      	ldr	r0, [r7, #12]
 8012e52:	f7fe fdb1 	bl	80119b8 <clmt_clust>
 8012e56:	62b8      	str	r0, [r7, #40]	; 0x28
 8012e58:	e007      	b.n	8012e6a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	69db      	ldr	r3, [r3, #28]
 8012e60:	4619      	mov	r1, r3
 8012e62:	4610      	mov	r0, r2
 8012e64:	f7fe fd10 	bl	8011888 <create_chain>
 8012e68:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f000 80f2 	beq.w	8013056 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d104      	bne.n	8012e82 <f_write+0xfc>
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2202      	movs	r2, #2
 8012e7c:	755a      	strb	r2, [r3, #21]
 8012e7e:	2302      	movs	r3, #2
 8012e80:	e0f2      	b.n	8013068 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e88:	d104      	bne.n	8012e94 <f_write+0x10e>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	755a      	strb	r2, [r3, #21]
 8012e90:	2301      	movs	r3, #1
 8012e92:	e0e9      	b.n	8013068 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e98:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d102      	bne.n	8012ea8 <f_write+0x122>
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ea6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	7d1b      	ldrb	r3, [r3, #20]
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	da18      	bge.n	8012ee4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	7858      	ldrb	r0, [r3, #1]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6a1a      	ldr	r2, [r3, #32]
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	f7fd ff3f 	bl	8010d44 <disk_write>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d004      	beq.n	8012ed6 <f_write+0x150>
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	755a      	strb	r2, [r3, #21]
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e0c8      	b.n	8013068 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	7d1b      	ldrb	r3, [r3, #20]
 8012eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012ee4:	693a      	ldr	r2, [r7, #16]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	69db      	ldr	r3, [r3, #28]
 8012eea:	4619      	mov	r1, r3
 8012eec:	4610      	mov	r0, r2
 8012eee:	f7fe fab3 	bl	8011458 <clust2sect>
 8012ef2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d104      	bne.n	8012f04 <f_write+0x17e>
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2202      	movs	r2, #2
 8012efe:	755a      	strb	r2, [r3, #21]
 8012f00:	2302      	movs	r3, #2
 8012f02:	e0b1      	b.n	8013068 <f_write+0x2e2>
			sect += csect;
 8012f04:	697a      	ldr	r2, [r7, #20]
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	4413      	add	r3, r2
 8012f0a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	0a5b      	lsrs	r3, r3, #9
 8012f10:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012f12:	6a3b      	ldr	r3, [r7, #32]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d03c      	beq.n	8012f92 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f18:	69ba      	ldr	r2, [r7, #24]
 8012f1a:	6a3b      	ldr	r3, [r7, #32]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	693a      	ldr	r2, [r7, #16]
 8012f20:	8952      	ldrh	r2, [r2, #10]
 8012f22:	4293      	cmp	r3, r2
 8012f24:	d905      	bls.n	8012f32 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	895b      	ldrh	r3, [r3, #10]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	1ad3      	subs	r3, r2, r3
 8012f30:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	7858      	ldrb	r0, [r3, #1]
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	697a      	ldr	r2, [r7, #20]
 8012f3a:	69f9      	ldr	r1, [r7, #28]
 8012f3c:	f7fd ff02 	bl	8010d44 <disk_write>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d004      	beq.n	8012f50 <f_write+0x1ca>
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2201      	movs	r2, #1
 8012f4a:	755a      	strb	r2, [r3, #21]
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e08b      	b.n	8013068 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	6a1a      	ldr	r2, [r3, #32]
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	6a3a      	ldr	r2, [r7, #32]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d915      	bls.n	8012f8a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6a1a      	ldr	r2, [r3, #32]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	1ad3      	subs	r3, r2, r3
 8012f6c:	025b      	lsls	r3, r3, #9
 8012f6e:	69fa      	ldr	r2, [r7, #28]
 8012f70:	4413      	add	r3, r2
 8012f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f76:	4619      	mov	r1, r3
 8012f78:	f7fd ffa4 	bl	8010ec4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	7d1b      	ldrb	r3, [r3, #20]
 8012f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012f8a:	6a3b      	ldr	r3, [r7, #32]
 8012f8c:	025b      	lsls	r3, r3, #9
 8012f8e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012f90:	e03f      	b.n	8013012 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	6a1b      	ldr	r3, [r3, #32]
 8012f96:	697a      	ldr	r2, [r7, #20]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d016      	beq.n	8012fca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	699a      	ldr	r2, [r3, #24]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d210      	bcs.n	8012fca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	7858      	ldrb	r0, [r3, #1]
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	f7fd fea5 	bl	8010d04 <disk_read>
 8012fba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d004      	beq.n	8012fca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	755a      	strb	r2, [r3, #21]
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e04e      	b.n	8013068 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	697a      	ldr	r2, [r7, #20]
 8012fce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	699b      	ldr	r3, [r3, #24]
 8012fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012fdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d901      	bls.n	8012fea <f_write+0x264>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	699b      	ldr	r3, [r3, #24]
 8012ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ff8:	4413      	add	r3, r2
 8012ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ffc:	69f9      	ldr	r1, [r7, #28]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fd ff60 	bl	8010ec4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	7d1b      	ldrb	r3, [r3, #20]
 8013008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801300c:	b2da      	uxtb	r2, r3
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013012:	69fa      	ldr	r2, [r7, #28]
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	4413      	add	r3, r2
 8013018:	61fb      	str	r3, [r7, #28]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	699a      	ldr	r2, [r3, #24]
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	441a      	add	r2, r3
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	619a      	str	r2, [r3, #24]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	68da      	ldr	r2, [r3, #12]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	699b      	ldr	r3, [r3, #24]
 801302e:	429a      	cmp	r2, r3
 8013030:	bf38      	it	cc
 8013032:	461a      	movcc	r2, r3
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	60da      	str	r2, [r3, #12]
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303e:	441a      	add	r2, r3
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	601a      	str	r2, [r3, #0]
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013048:	1ad3      	subs	r3, r2, r3
 801304a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	f47f aed4 	bne.w	8012dfc <f_write+0x76>
 8013054:	e000      	b.n	8013058 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013056:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	7d1b      	ldrb	r3, [r3, #20]
 801305c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013060:	b2da      	uxtb	r2, r3
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3730      	adds	r7, #48	; 0x30
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b086      	sub	sp, #24
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f107 0208 	add.w	r2, r7, #8
 801307e:	4611      	mov	r1, r2
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff fb07 	bl	8012694 <validate>
 8013086:	4603      	mov	r3, r0
 8013088:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801308a:	7dfb      	ldrb	r3, [r7, #23]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d168      	bne.n	8013162 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	7d1b      	ldrb	r3, [r3, #20]
 8013094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013098:	2b00      	cmp	r3, #0
 801309a:	d062      	beq.n	8013162 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	7d1b      	ldrb	r3, [r3, #20]
 80130a0:	b25b      	sxtb	r3, r3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	da15      	bge.n	80130d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	7858      	ldrb	r0, [r3, #1]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6a1a      	ldr	r2, [r3, #32]
 80130b4:	2301      	movs	r3, #1
 80130b6:	f7fd fe45 	bl	8010d44 <disk_write>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d001      	beq.n	80130c4 <f_sync+0x54>
 80130c0:	2301      	movs	r3, #1
 80130c2:	e04f      	b.n	8013164 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	7d1b      	ldrb	r3, [r3, #20]
 80130c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130cc:	b2da      	uxtb	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80130d2:	f7fb ffb3 	bl	800f03c <get_fattime>
 80130d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80130d8:	68ba      	ldr	r2, [r7, #8]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130de:	4619      	mov	r1, r3
 80130e0:	4610      	mov	r0, r2
 80130e2:	f7fe f91d 	bl	8011320 <move_window>
 80130e6:	4603      	mov	r3, r0
 80130e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80130ea:	7dfb      	ldrb	r3, [r7, #23]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d138      	bne.n	8013162 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	330b      	adds	r3, #11
 80130fa:	781a      	ldrb	r2, [r3, #0]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	330b      	adds	r3, #11
 8013100:	f042 0220 	orr.w	r2, r2, #32
 8013104:	b2d2      	uxtb	r2, r2
 8013106:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6818      	ldr	r0, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	689b      	ldr	r3, [r3, #8]
 8013110:	461a      	mov	r2, r3
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	f7fe fe2a 	bl	8011d6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f103 021c 	add.w	r2, r3, #28
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	4619      	mov	r1, r3
 8013124:	4610      	mov	r0, r2
 8013126:	f7fd fea1 	bl	8010e6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	3316      	adds	r3, #22
 801312e:	6939      	ldr	r1, [r7, #16]
 8013130:	4618      	mov	r0, r3
 8013132:	f7fd fe9b 	bl	8010e6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	3312      	adds	r3, #18
 801313a:	2100      	movs	r1, #0
 801313c:	4618      	mov	r0, r3
 801313e:	f7fd fe7a 	bl	8010e36 <st_word>
					fs->wflag = 1;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	2201      	movs	r2, #1
 8013146:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	4618      	mov	r0, r3
 801314c:	f7fe f916 	bl	801137c <sync_fs>
 8013150:	4603      	mov	r3, r0
 8013152:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	7d1b      	ldrb	r3, [r3, #20]
 8013158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801315c:	b2da      	uxtb	r2, r3
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013162:	7dfb      	ldrb	r3, [r7, #23]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff ff7b 	bl	8013070 <f_sync>
 801317a:	4603      	mov	r3, r0
 801317c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801317e:	7bfb      	ldrb	r3, [r7, #15]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d118      	bne.n	80131b6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f107 0208 	add.w	r2, r7, #8
 801318a:	4611      	mov	r1, r2
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fa81 	bl	8012694 <validate>
 8013192:	4603      	mov	r3, r0
 8013194:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013196:	7bfb      	ldrb	r3, [r7, #15]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d10c      	bne.n	80131b6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fe f819 	bl	80111d8 <dec_lock>
 80131a6:	4603      	mov	r3, r0
 80131a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80131c0:	b590      	push	{r4, r7, lr}
 80131c2:	b09d      	sub	sp, #116	; 0x74
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	607a      	str	r2, [r7, #4]
 80131ca:	603b      	str	r3, [r7, #0]
 80131cc:	460b      	mov	r3, r1
 80131ce:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80131d0:	2301      	movs	r3, #1
 80131d2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80131d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131d8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80131da:	f107 030c 	add.w	r3, r7, #12
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fe ff71 	bl	80120c6 <get_ldnumber>
 80131e4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80131e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	da02      	bge.n	80131f2 <f_mkfs+0x32>
 80131ec:	230b      	movs	r3, #11
 80131ee:	f000 bc0d 	b.w	8013a0c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80131f2:	4a94      	ldr	r2, [pc, #592]	; (8013444 <f_mkfs+0x284>)
 80131f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d005      	beq.n	801320a <f_mkfs+0x4a>
 80131fe:	4a91      	ldr	r2, [pc, #580]	; (8013444 <f_mkfs+0x284>)
 8013200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013206:	2200      	movs	r2, #0
 8013208:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801320a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801320c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013210:	2300      	movs	r3, #0
 8013212:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8013216:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801321a:	4618      	mov	r0, r3
 801321c:	f7fd fd4c 	bl	8010cb8 <disk_initialize>
 8013220:	4603      	mov	r3, r0
 8013222:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013226:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801322a:	f003 0301 	and.w	r3, r3, #1
 801322e:	2b00      	cmp	r3, #0
 8013230:	d001      	beq.n	8013236 <f_mkfs+0x76>
 8013232:	2303      	movs	r3, #3
 8013234:	e3ea      	b.n	8013a0c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013236:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801323a:	f003 0304 	and.w	r3, r3, #4
 801323e:	2b00      	cmp	r3, #0
 8013240:	d001      	beq.n	8013246 <f_mkfs+0x86>
 8013242:	230a      	movs	r3, #10
 8013244:	e3e2      	b.n	8013a0c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013246:	f107 0214 	add.w	r2, r7, #20
 801324a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801324e:	2103      	movs	r1, #3
 8013250:	4618      	mov	r0, r3
 8013252:	f7fd fd97 	bl	8010d84 <disk_ioctl>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d10c      	bne.n	8013276 <f_mkfs+0xb6>
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d009      	beq.n	8013276 <f_mkfs+0xb6>
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013268:	d805      	bhi.n	8013276 <f_mkfs+0xb6>
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	1e5a      	subs	r2, r3, #1
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	4013      	ands	r3, r2
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <f_mkfs+0xba>
 8013276:	2301      	movs	r3, #1
 8013278:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801327a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801327e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d003      	beq.n	801328e <f_mkfs+0xce>
 8013286:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	429a      	cmp	r2, r3
 801328c:	d309      	bcc.n	80132a2 <f_mkfs+0xe2>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013294:	d805      	bhi.n	80132a2 <f_mkfs+0xe2>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	1e5a      	subs	r2, r3, #1
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4013      	ands	r3, r2
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d001      	beq.n	80132a6 <f_mkfs+0xe6>
 80132a2:	2313      	movs	r3, #19
 80132a4:	e3b2      	b.n	8013a0c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80132a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80132ae:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80132b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80132ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80132be:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80132c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80132c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c4:	fb02 f303 	mul.w	r3, r2, r3
 80132c8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80132ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d101      	bne.n	80132d4 <f_mkfs+0x114>
 80132d0:	230e      	movs	r3, #14
 80132d2:	e39b      	b.n	8013a0c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80132d4:	f107 0210 	add.w	r2, r7, #16
 80132d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80132dc:	2101      	movs	r1, #1
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fd fd50 	bl	8010d84 <disk_ioctl>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d001      	beq.n	80132ee <f_mkfs+0x12e>
 80132ea:	2301      	movs	r3, #1
 80132ec:	e38e      	b.n	8013a0c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80132ee:	7afb      	ldrb	r3, [r7, #11]
 80132f0:	f003 0308 	and.w	r3, r3, #8
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d001      	beq.n	80132fc <f_mkfs+0x13c>
 80132f8:	2300      	movs	r3, #0
 80132fa:	e000      	b.n	80132fe <f_mkfs+0x13e>
 80132fc:	233f      	movs	r3, #63	; 0x3f
 80132fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013304:	429a      	cmp	r2, r3
 8013306:	d901      	bls.n	801330c <f_mkfs+0x14c>
 8013308:	230e      	movs	r3, #14
 801330a:	e37f      	b.n	8013a0c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 801330c:	693a      	ldr	r2, [r7, #16]
 801330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	2b7f      	cmp	r3, #127	; 0x7f
 8013318:	d801      	bhi.n	801331e <f_mkfs+0x15e>
 801331a:	230e      	movs	r3, #14
 801331c:	e376      	b.n	8013a0c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2b80      	cmp	r3, #128	; 0x80
 8013322:	d901      	bls.n	8013328 <f_mkfs+0x168>
 8013324:	2313      	movs	r3, #19
 8013326:	e371      	b.n	8013a0c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013328:	7afb      	ldrb	r3, [r7, #11]
 801332a:	f003 0302 	and.w	r3, r3, #2
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00d      	beq.n	801334e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013332:	7afb      	ldrb	r3, [r7, #11]
 8013334:	f003 0307 	and.w	r3, r3, #7
 8013338:	2b02      	cmp	r3, #2
 801333a:	d004      	beq.n	8013346 <f_mkfs+0x186>
 801333c:	7afb      	ldrb	r3, [r7, #11]
 801333e:	f003 0301 	and.w	r3, r3, #1
 8013342:	2b00      	cmp	r3, #0
 8013344:	d103      	bne.n	801334e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8013346:	2303      	movs	r3, #3
 8013348:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801334c:	e009      	b.n	8013362 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801334e:	7afb      	ldrb	r3, [r7, #11]
 8013350:	f003 0301 	and.w	r3, r3, #1
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <f_mkfs+0x19c>
 8013358:	2313      	movs	r3, #19
 801335a:	e357      	b.n	8013a0c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 801335c:	2302      	movs	r3, #2
 801335e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8013366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801336a:	2b03      	cmp	r3, #3
 801336c:	d13c      	bne.n	80133e8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801336e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013370:	2b00      	cmp	r3, #0
 8013372:	d11b      	bne.n	80133ac <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	0c5b      	lsrs	r3, r3, #17
 8013378:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801337a:	2300      	movs	r3, #0
 801337c:	64bb      	str	r3, [r7, #72]	; 0x48
 801337e:	2301      	movs	r3, #1
 8013380:	653b      	str	r3, [r7, #80]	; 0x50
 8013382:	e005      	b.n	8013390 <f_mkfs+0x1d0>
 8013384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013386:	3301      	adds	r3, #1
 8013388:	64bb      	str	r3, [r7, #72]	; 0x48
 801338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	653b      	str	r3, [r7, #80]	; 0x50
 8013390:	4a2d      	ldr	r2, [pc, #180]	; (8013448 <f_mkfs+0x288>)
 8013392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d007      	beq.n	80133ac <f_mkfs+0x1ec>
 801339c:	4a2a      	ldr	r2, [pc, #168]	; (8013448 <f_mkfs+0x288>)
 801339e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133a4:	461a      	mov	r2, r3
 80133a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133a8:	4293      	cmp	r3, r2
 80133aa:	d2eb      	bcs.n	8013384 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80133ac:	693a      	ldr	r2, [r7, #16]
 80133ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80133b4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	3302      	adds	r3, #2
 80133ba:	009a      	lsls	r2, r3, #2
 80133bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80133be:	4413      	add	r3, r2
 80133c0:	1e5a      	subs	r2, r3, #1
 80133c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80133c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80133c8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80133ca:	2320      	movs	r3, #32
 80133cc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80133ce:	2300      	movs	r3, #0
 80133d0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80133d2:	6a3b      	ldr	r3, [r7, #32]
 80133d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80133d8:	4293      	cmp	r3, r2
 80133da:	d903      	bls.n	80133e4 <f_mkfs+0x224>
 80133dc:	6a3b      	ldr	r3, [r7, #32]
 80133de:	4a1b      	ldr	r2, [pc, #108]	; (801344c <f_mkfs+0x28c>)
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d952      	bls.n	801348a <f_mkfs+0x2ca>
 80133e4:	230e      	movs	r3, #14
 80133e6:	e311      	b.n	8013a0c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80133e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d11b      	bne.n	8013426 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	0b1b      	lsrs	r3, r3, #12
 80133f2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80133f4:	2300      	movs	r3, #0
 80133f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80133f8:	2301      	movs	r3, #1
 80133fa:	653b      	str	r3, [r7, #80]	; 0x50
 80133fc:	e005      	b.n	801340a <f_mkfs+0x24a>
 80133fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013400:	3301      	adds	r3, #1
 8013402:	64bb      	str	r3, [r7, #72]	; 0x48
 8013404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013406:	005b      	lsls	r3, r3, #1
 8013408:	653b      	str	r3, [r7, #80]	; 0x50
 801340a:	4a11      	ldr	r2, [pc, #68]	; (8013450 <f_mkfs+0x290>)
 801340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801340e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d007      	beq.n	8013426 <f_mkfs+0x266>
 8013416:	4a0e      	ldr	r2, [pc, #56]	; (8013450 <f_mkfs+0x290>)
 8013418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801341a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801341e:	461a      	mov	r2, r3
 8013420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013422:	4293      	cmp	r3, r2
 8013424:	d2eb      	bcs.n	80133fe <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8013426:	693a      	ldr	r2, [r7, #16]
 8013428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801342a:	fbb2 f3f3 	udiv	r3, r2, r3
 801342e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013430:	6a3b      	ldr	r3, [r7, #32]
 8013432:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013436:	4293      	cmp	r3, r2
 8013438:	d90c      	bls.n	8013454 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	3302      	adds	r3, #2
 801343e:	005b      	lsls	r3, r3, #1
 8013440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013442:	e012      	b.n	801346a <f_mkfs+0x2aa>
 8013444:	2000132c 	.word	0x2000132c
 8013448:	08017968 	.word	0x08017968
 801344c:	0ffffff5 	.word	0x0ffffff5
 8013450:	08017978 	.word	0x08017978
				} else {
					fmt = FS_FAT12;
 8013454:	2301      	movs	r3, #1
 8013456:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801345a:	6a3a      	ldr	r2, [r7, #32]
 801345c:	4613      	mov	r3, r2
 801345e:	005b      	lsls	r3, r3, #1
 8013460:	4413      	add	r3, r2
 8013462:	3301      	adds	r3, #1
 8013464:	085b      	lsrs	r3, r3, #1
 8013466:	3303      	adds	r3, #3
 8013468:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801346a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801346c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801346e:	4413      	add	r3, r2
 8013470:	1e5a      	subs	r2, r3, #1
 8013472:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013474:	fbb2 f3f3 	udiv	r3, r2, r3
 8013478:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801347a:	2301      	movs	r3, #1
 801347c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801347e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013480:	015a      	lsls	r2, r3, #5
 8013482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013484:	fbb2 f3f3 	udiv	r3, r2, r3
 8013488:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801348e:	4413      	add	r3, r2
 8013490:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013496:	fb03 f202 	mul.w	r2, r3, r2
 801349a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801349c:	4413      	add	r3, r2
 801349e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134a0:	4413      	add	r3, r2
 80134a2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80134a4:	697a      	ldr	r2, [r7, #20]
 80134a6:	69fb      	ldr	r3, [r7, #28]
 80134a8:	4413      	add	r3, r2
 80134aa:	1e5a      	subs	r2, r3, #1
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	425b      	negs	r3, r3
 80134b0:	401a      	ands	r2, r3
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80134b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80134bc:	2b03      	cmp	r3, #3
 80134be:	d108      	bne.n	80134d2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80134c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134c4:	4413      	add	r3, r2
 80134c6:	657b      	str	r3, [r7, #84]	; 0x54
 80134c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80134ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134cc:	4413      	add	r3, r2
 80134ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80134d0:	e006      	b.n	80134e0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80134d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80134d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80134da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80134dc:	4413      	add	r3, r2
 80134de:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80134e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134e2:	011a      	lsls	r2, r3, #4
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	441a      	add	r2, r3
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	1ad2      	subs	r2, r2, r3
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d901      	bls.n	80134f6 <f_mkfs+0x336>
 80134f2:	230e      	movs	r3, #14
 80134f4:	e28a      	b.n	8013a0c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80134f6:	693a      	ldr	r2, [r7, #16]
 80134f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134fa:	1ad2      	subs	r2, r2, r3
 80134fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013500:	fb01 f303 	mul.w	r3, r1, r3
 8013504:	1ad2      	subs	r2, r2, r3
 8013506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013508:	1ad2      	subs	r2, r2, r3
 801350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013510:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013512:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013516:	2b03      	cmp	r3, #3
 8013518:	d10f      	bne.n	801353a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801351a:	6a3b      	ldr	r3, [r7, #32]
 801351c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013520:	4293      	cmp	r3, r2
 8013522:	d80a      	bhi.n	801353a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d105      	bne.n	8013536 <f_mkfs+0x376>
 801352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801352c:	085b      	lsrs	r3, r3, #1
 801352e:	607b      	str	r3, [r7, #4]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d144      	bne.n	80135c0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013536:	230e      	movs	r3, #14
 8013538:	e268      	b.n	8013a0c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801353a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801353e:	2b02      	cmp	r3, #2
 8013540:	d133      	bne.n	80135aa <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013542:	6a3b      	ldr	r3, [r7, #32]
 8013544:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013548:	4293      	cmp	r3, r2
 801354a:	d91e      	bls.n	801358a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d107      	bne.n	8013562 <f_mkfs+0x3a2>
 8013552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	2b40      	cmp	r3, #64	; 0x40
 8013558:	d803      	bhi.n	8013562 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	607b      	str	r3, [r7, #4]
 8013560:	e033      	b.n	80135ca <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013562:	7afb      	ldrb	r3, [r7, #11]
 8013564:	f003 0302 	and.w	r3, r3, #2
 8013568:	2b00      	cmp	r3, #0
 801356a:	d003      	beq.n	8013574 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801356c:	2303      	movs	r3, #3
 801356e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013572:	e02a      	b.n	80135ca <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d105      	bne.n	8013586 <f_mkfs+0x3c6>
 801357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801357c:	005b      	lsls	r3, r3, #1
 801357e:	607b      	str	r3, [r7, #4]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2b80      	cmp	r3, #128	; 0x80
 8013584:	d91e      	bls.n	80135c4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013586:	230e      	movs	r3, #14
 8013588:	e240      	b.n	8013a0c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801358a:	6a3b      	ldr	r3, [r7, #32]
 801358c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013590:	4293      	cmp	r3, r2
 8013592:	d80a      	bhi.n	80135aa <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d105      	bne.n	80135a6 <f_mkfs+0x3e6>
 801359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	607b      	str	r3, [r7, #4]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2b80      	cmp	r3, #128	; 0x80
 80135a4:	d910      	bls.n	80135c8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80135a6:	230e      	movs	r3, #14
 80135a8:	e230      	b.n	8013a0c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80135aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d10c      	bne.n	80135cc <f_mkfs+0x40c>
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80135b8:	4293      	cmp	r3, r2
 80135ba:	d907      	bls.n	80135cc <f_mkfs+0x40c>
 80135bc:	230e      	movs	r3, #14
 80135be:	e225      	b.n	8013a0c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80135c0:	bf00      	nop
 80135c2:	e6ce      	b.n	8013362 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80135c4:	bf00      	nop
 80135c6:	e6cc      	b.n	8013362 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80135c8:	bf00      	nop
			pau = au;
 80135ca:	e6ca      	b.n	8013362 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80135cc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80135ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80135d0:	461a      	mov	r2, r3
 80135d2:	2100      	movs	r1, #0
 80135d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d6:	f7fd fc96 	bl	8010f06 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80135da:	220b      	movs	r2, #11
 80135dc:	49b2      	ldr	r1, [pc, #712]	; (80138a8 <f_mkfs+0x6e8>)
 80135de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135e0:	f7fd fc70 	bl	8010ec4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80135e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e6:	330b      	adds	r3, #11
 80135e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80135ea:	4611      	mov	r1, r2
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7fd fc22 	bl	8010e36 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80135f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f4:	330d      	adds	r3, #13
 80135f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135f8:	b2d2      	uxtb	r2, r2
 80135fa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	330e      	adds	r3, #14
 8013600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013602:	b292      	uxth	r2, r2
 8013604:	4611      	mov	r1, r2
 8013606:	4618      	mov	r0, r3
 8013608:	f7fd fc15 	bl	8010e36 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	3310      	adds	r3, #16
 8013610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013612:	b2d2      	uxtb	r2, r2
 8013614:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	f103 0211 	add.w	r2, r3, #17
 801361c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013620:	2b03      	cmp	r3, #3
 8013622:	d002      	beq.n	801362a <f_mkfs+0x46a>
 8013624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013626:	b29b      	uxth	r3, r3
 8013628:	e000      	b.n	801362c <f_mkfs+0x46c>
 801362a:	2300      	movs	r3, #0
 801362c:	4619      	mov	r1, r3
 801362e:	4610      	mov	r0, r2
 8013630:	f7fd fc01 	bl	8010e36 <st_word>
		if (sz_vol < 0x10000) {
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801363a:	d208      	bcs.n	801364e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363e:	3313      	adds	r3, #19
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	b292      	uxth	r2, r2
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f7fd fbf5 	bl	8010e36 <st_word>
 801364c:	e006      	b.n	801365c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013650:	3320      	adds	r3, #32
 8013652:	693a      	ldr	r2, [r7, #16]
 8013654:	4611      	mov	r1, r2
 8013656:	4618      	mov	r0, r3
 8013658:	f7fd fc08 	bl	8010e6c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	3315      	adds	r3, #21
 8013660:	22f8      	movs	r2, #248	; 0xf8
 8013662:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	3318      	adds	r3, #24
 8013668:	213f      	movs	r1, #63	; 0x3f
 801366a:	4618      	mov	r0, r3
 801366c:	f7fd fbe3 	bl	8010e36 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	331a      	adds	r3, #26
 8013674:	21ff      	movs	r1, #255	; 0xff
 8013676:	4618      	mov	r0, r3
 8013678:	f7fd fbdd 	bl	8010e36 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367e:	331c      	adds	r3, #28
 8013680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013682:	4618      	mov	r0, r3
 8013684:	f7fd fbf2 	bl	8010e6c <st_dword>
		if (fmt == FS_FAT32) {
 8013688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801368c:	2b03      	cmp	r3, #3
 801368e:	d131      	bne.n	80136f4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013692:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8013696:	f7fb fcd1 	bl	800f03c <get_fattime>
 801369a:	4603      	mov	r3, r0
 801369c:	4619      	mov	r1, r3
 801369e:	4620      	mov	r0, r4
 80136a0:	f7fd fbe4 	bl	8010e6c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	3324      	adds	r3, #36	; 0x24
 80136a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fd fbde 	bl	8010e6c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80136b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b2:	332c      	adds	r3, #44	; 0x2c
 80136b4:	2102      	movs	r1, #2
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7fd fbd8 	bl	8010e6c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80136bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136be:	3330      	adds	r3, #48	; 0x30
 80136c0:	2101      	movs	r1, #1
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fd fbb7 	bl	8010e36 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	3332      	adds	r3, #50	; 0x32
 80136cc:	2106      	movs	r1, #6
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7fd fbb1 	bl	8010e36 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80136d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d6:	3340      	adds	r3, #64	; 0x40
 80136d8:	2280      	movs	r2, #128	; 0x80
 80136da:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80136dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136de:	3342      	adds	r3, #66	; 0x42
 80136e0:	2229      	movs	r2, #41	; 0x29
 80136e2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	3347      	adds	r3, #71	; 0x47
 80136e8:	2213      	movs	r2, #19
 80136ea:	4970      	ldr	r1, [pc, #448]	; (80138ac <f_mkfs+0x6ec>)
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7fd fbe9 	bl	8010ec4 <mem_cpy>
 80136f2:	e020      	b.n	8013736 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80136f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80136fa:	f7fb fc9f 	bl	800f03c <get_fattime>
 80136fe:	4603      	mov	r3, r0
 8013700:	4619      	mov	r1, r3
 8013702:	4620      	mov	r0, r4
 8013704:	f7fd fbb2 	bl	8010e6c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370a:	3316      	adds	r3, #22
 801370c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801370e:	b292      	uxth	r2, r2
 8013710:	4611      	mov	r1, r2
 8013712:	4618      	mov	r0, r3
 8013714:	f7fd fb8f 	bl	8010e36 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371a:	3324      	adds	r3, #36	; 0x24
 801371c:	2280      	movs	r2, #128	; 0x80
 801371e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	3326      	adds	r3, #38	; 0x26
 8013724:	2229      	movs	r2, #41	; 0x29
 8013726:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	332b      	adds	r3, #43	; 0x2b
 801372c:	2213      	movs	r2, #19
 801372e:	4960      	ldr	r1, [pc, #384]	; (80138b0 <f_mkfs+0x6f0>)
 8013730:	4618      	mov	r0, r3
 8013732:	f7fd fbc7 	bl	8010ec4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801373c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013740:	4618      	mov	r0, r3
 8013742:	f7fd fb78 	bl	8010e36 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013746:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801374a:	2301      	movs	r3, #1
 801374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801374e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013750:	f7fd faf8 	bl	8010d44 <disk_write>
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d001      	beq.n	801375e <f_mkfs+0x59e>
 801375a:	2301      	movs	r3, #1
 801375c:	e156      	b.n	8013a0c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801375e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013762:	2b03      	cmp	r3, #3
 8013764:	d140      	bne.n	80137e8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	1d9a      	adds	r2, r3, #6
 801376a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801376e:	2301      	movs	r3, #1
 8013770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013772:	f7fd fae7 	bl	8010d44 <disk_write>
			mem_set(buf, 0, ss);
 8013776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013778:	461a      	mov	r2, r3
 801377a:	2100      	movs	r1, #0
 801377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801377e:	f7fd fbc2 	bl	8010f06 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013782:	494c      	ldr	r1, [pc, #304]	; (80138b4 <f_mkfs+0x6f4>)
 8013784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013786:	f7fd fb71 	bl	8010e6c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013790:	4949      	ldr	r1, [pc, #292]	; (80138b8 <f_mkfs+0x6f8>)
 8013792:	4618      	mov	r0, r3
 8013794:	f7fd fb6a 	bl	8010e6c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801379e:	6a3b      	ldr	r3, [r7, #32]
 80137a0:	3b01      	subs	r3, #1
 80137a2:	4619      	mov	r1, r3
 80137a4:	4610      	mov	r0, r2
 80137a6:	f7fd fb61 	bl	8010e6c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80137aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80137b0:	2102      	movs	r1, #2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fd fb5a 	bl	8010e6c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80137be:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fd fb37 	bl	8010e36 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	1dda      	adds	r2, r3, #7
 80137cc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80137d0:	2301      	movs	r3, #1
 80137d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137d4:	f7fd fab6 	bl	8010d44 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80137d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137da:	1c5a      	adds	r2, r3, #1
 80137dc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80137e0:	2301      	movs	r3, #1
 80137e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137e4:	f7fd faae 	bl	8010d44 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80137e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137ea:	2100      	movs	r1, #0
 80137ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ee:	f7fd fb8a 	bl	8010f06 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80137f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137f4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80137f6:	2300      	movs	r3, #0
 80137f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80137fa:	e04b      	b.n	8013894 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80137fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013800:	2b03      	cmp	r3, #3
 8013802:	d113      	bne.n	801382c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013804:	f06f 0107 	mvn.w	r1, #7
 8013808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801380a:	f7fd fb2f 	bl	8010e6c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	3304      	adds	r3, #4
 8013812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013816:	4618      	mov	r0, r3
 8013818:	f7fd fb28 	bl	8010e6c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 801381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381e:	3308      	adds	r3, #8
 8013820:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013824:	4618      	mov	r0, r3
 8013826:	f7fd fb21 	bl	8010e6c <st_dword>
 801382a:	e00b      	b.n	8013844 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801382c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013830:	2b01      	cmp	r3, #1
 8013832:	d101      	bne.n	8013838 <f_mkfs+0x678>
 8013834:	4b21      	ldr	r3, [pc, #132]	; (80138bc <f_mkfs+0x6fc>)
 8013836:	e001      	b.n	801383c <f_mkfs+0x67c>
 8013838:	f06f 0307 	mvn.w	r3, #7
 801383c:	4619      	mov	r1, r3
 801383e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013840:	f7fd fb14 	bl	8010e6c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013846:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384c:	4293      	cmp	r3, r2
 801384e:	bf28      	it	cs
 8013850:	4613      	movcs	r3, r2
 8013852:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013854:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801385a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801385c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801385e:	f7fd fa71 	bl	8010d44 <disk_write>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d001      	beq.n	801386c <f_mkfs+0x6ac>
 8013868:	2301      	movs	r3, #1
 801386a:	e0cf      	b.n	8013a0c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801386c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801386e:	461a      	mov	r2, r3
 8013870:	2100      	movs	r1, #0
 8013872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013874:	f7fd fb47 	bl	8010f06 <mem_set>
				sect += n; nsect -= n;
 8013878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801387a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801387c:	4413      	add	r3, r2
 801387e:	667b      	str	r3, [r7, #100]	; 0x64
 8013880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013884:	1ad3      	subs	r3, r2, r3
 8013886:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8013888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1dc      	bne.n	8013848 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013890:	3301      	adds	r3, #1
 8013892:	64bb      	str	r3, [r7, #72]	; 0x48
 8013894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013898:	429a      	cmp	r2, r3
 801389a:	d3af      	bcc.n	80137fc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801389c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80138a0:	2b03      	cmp	r3, #3
 80138a2:	d10d      	bne.n	80138c0 <f_mkfs+0x700>
 80138a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a6:	e00c      	b.n	80138c2 <f_mkfs+0x702>
 80138a8:	080177e8 	.word	0x080177e8
 80138ac:	080177f4 	.word	0x080177f4
 80138b0:	08017808 	.word	0x08017808
 80138b4:	41615252 	.word	0x41615252
 80138b8:	61417272 	.word	0x61417272
 80138bc:	00fffff8 	.word	0x00fffff8
 80138c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138c2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80138c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80138c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c8:	4293      	cmp	r3, r2
 80138ca:	bf28      	it	cs
 80138cc:	4613      	movcs	r3, r2
 80138ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80138d0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80138d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138da:	f7fd fa33 	bl	8010d44 <disk_write>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d001      	beq.n	80138e8 <f_mkfs+0x728>
 80138e4:	2301      	movs	r3, #1
 80138e6:	e091      	b.n	8013a0c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80138e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138ec:	4413      	add	r3, r2
 80138ee:	667b      	str	r3, [r7, #100]	; 0x64
 80138f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80138f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80138f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d1e2      	bne.n	80138c4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80138fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013902:	2b03      	cmp	r3, #3
 8013904:	d103      	bne.n	801390e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8013906:	230c      	movs	r3, #12
 8013908:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801390c:	e010      	b.n	8013930 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013914:	d303      	bcc.n	801391e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8013916:	2306      	movs	r3, #6
 8013918:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801391c:	e008      	b.n	8013930 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801391e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013922:	2b02      	cmp	r3, #2
 8013924:	d101      	bne.n	801392a <f_mkfs+0x76a>
 8013926:	2304      	movs	r3, #4
 8013928:	e000      	b.n	801392c <f_mkfs+0x76c>
 801392a:	2301      	movs	r3, #1
 801392c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013930:	7afb      	ldrb	r3, [r7, #11]
 8013932:	f003 0308 	and.w	r3, r3, #8
 8013936:	2b00      	cmp	r3, #0
 8013938:	d15b      	bne.n	80139f2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801393a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801393c:	461a      	mov	r2, r3
 801393e:	2100      	movs	r1, #0
 8013940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013942:	f7fd fae0 	bl	8010f06 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8013946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013948:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801394c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013950:	4618      	mov	r0, r3
 8013952:	f7fd fa70 	bl	8010e36 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8013956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013958:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801395c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	2200      	movs	r2, #0
 8013962:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	3301      	adds	r3, #1
 8013968:	2201      	movs	r2, #1
 801396a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	3302      	adds	r3, #2
 8013970:	2201      	movs	r2, #1
 8013972:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	3303      	adds	r3, #3
 8013978:	2200      	movs	r2, #0
 801397a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	3304      	adds	r3, #4
 8013980:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8013984:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8013986:	693a      	ldr	r2, [r7, #16]
 8013988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398a:	441a      	add	r2, r3
 801398c:	4b21      	ldr	r3, [pc, #132]	; (8013a14 <f_mkfs+0x854>)
 801398e:	fba3 1302 	umull	r1, r3, r3, r2
 8013992:	1ad2      	subs	r2, r2, r3
 8013994:	0852      	lsrs	r2, r2, #1
 8013996:	4413      	add	r3, r2
 8013998:	0b5b      	lsrs	r3, r3, #13
 801399a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	3305      	adds	r3, #5
 80139a0:	22fe      	movs	r2, #254	; 0xfe
 80139a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80139a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139a6:	089b      	lsrs	r3, r3, #2
 80139a8:	b2da      	uxtb	r2, r3
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	3306      	adds	r3, #6
 80139ae:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80139b2:	b2d2      	uxtb	r2, r2
 80139b4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	3307      	adds	r3, #7
 80139ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80139bc:	b2d2      	uxtb	r2, r2
 80139be:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	3308      	adds	r3, #8
 80139c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fd fa50 	bl	8010e6c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	330c      	adds	r3, #12
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	4611      	mov	r1, r2
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7fd fa49 	bl	8010e6c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80139da:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80139de:	2301      	movs	r3, #1
 80139e0:	2200      	movs	r2, #0
 80139e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80139e4:	f7fd f9ae 	bl	8010d44 <disk_write>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d001      	beq.n	80139f2 <f_mkfs+0x832>
 80139ee:	2301      	movs	r3, #1
 80139f0:	e00c      	b.n	8013a0c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80139f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80139f6:	2200      	movs	r2, #0
 80139f8:	2100      	movs	r1, #0
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fd f9c2 	bl	8010d84 <disk_ioctl>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d001      	beq.n	8013a0a <f_mkfs+0x84a>
 8013a06:	2301      	movs	r3, #1
 8013a08:	e000      	b.n	8013a0c <f_mkfs+0x84c>

	return FR_OK;
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3774      	adds	r7, #116	; 0x74
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd90      	pop	{r4, r7, pc}
 8013a14:	0515565b 	.word	0x0515565b

08013a18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b087      	sub	sp, #28
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	4613      	mov	r3, r2
 8013a24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a26:	2301      	movs	r3, #1
 8013a28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a2e:	4b1f      	ldr	r3, [pc, #124]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a30:	7a5b      	ldrb	r3, [r3, #9]
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d131      	bne.n	8013a9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a38:	4b1c      	ldr	r3, [pc, #112]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a3a:	7a5b      	ldrb	r3, [r3, #9]
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	461a      	mov	r2, r3
 8013a40:	4b1a      	ldr	r3, [pc, #104]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a42:	2100      	movs	r1, #0
 8013a44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a46:	4b19      	ldr	r3, [pc, #100]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a48:	7a5b      	ldrb	r3, [r3, #9]
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	4a17      	ldr	r2, [pc, #92]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4413      	add	r3, r2
 8013a52:	68fa      	ldr	r2, [r7, #12]
 8013a54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a56:	4b15      	ldr	r3, [pc, #84]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a58:	7a5b      	ldrb	r3, [r3, #9]
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4b13      	ldr	r3, [pc, #76]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a60:	4413      	add	r3, r2
 8013a62:	79fa      	ldrb	r2, [r7, #7]
 8013a64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013a66:	4b11      	ldr	r3, [pc, #68]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a68:	7a5b      	ldrb	r3, [r3, #9]
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	b2d1      	uxtb	r1, r2
 8013a70:	4a0e      	ldr	r2, [pc, #56]	; (8013aac <FATFS_LinkDriverEx+0x94>)
 8013a72:	7251      	strb	r1, [r2, #9]
 8013a74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013a76:	7dbb      	ldrb	r3, [r7, #22]
 8013a78:	3330      	adds	r3, #48	; 0x30
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	3301      	adds	r3, #1
 8013a84:	223a      	movs	r2, #58	; 0x3a
 8013a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	3302      	adds	r3, #2
 8013a8c:	222f      	movs	r2, #47	; 0x2f
 8013a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	3303      	adds	r3, #3
 8013a94:	2200      	movs	r2, #0
 8013a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	371c      	adds	r7, #28
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	20001354 	.word	0x20001354

08013ab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013aba:	2200      	movs	r2, #0
 8013abc:	6839      	ldr	r1, [r7, #0]
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f7ff ffaa 	bl	8013a18 <FATFS_LinkDriverEx>
 8013ac4:	4603      	mov	r3, r0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	4912      	ldr	r1, [pc, #72]	; (8013b20 <MX_USB_DEVICE_Init+0x50>)
 8013ad8:	4812      	ldr	r0, [pc, #72]	; (8013b24 <MX_USB_DEVICE_Init+0x54>)
 8013ada:	f7fb ff69 	bl	800f9b0 <USBD_Init>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d001      	beq.n	8013ae8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013ae4:	f7ef fe90 	bl	8003808 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013ae8:	490f      	ldr	r1, [pc, #60]	; (8013b28 <MX_USB_DEVICE_Init+0x58>)
 8013aea:	480e      	ldr	r0, [pc, #56]	; (8013b24 <MX_USB_DEVICE_Init+0x54>)
 8013aec:	f7fb ff90 	bl	800fa10 <USBD_RegisterClass>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d001      	beq.n	8013afa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013af6:	f7ef fe87 	bl	8003808 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013afa:	490c      	ldr	r1, [pc, #48]	; (8013b2c <MX_USB_DEVICE_Init+0x5c>)
 8013afc:	4809      	ldr	r0, [pc, #36]	; (8013b24 <MX_USB_DEVICE_Init+0x54>)
 8013afe:	f7fb feb1 	bl	800f864 <USBD_CDC_RegisterInterface>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013b08:	f7ef fe7e 	bl	8003808 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013b0c:	4805      	ldr	r0, [pc, #20]	; (8013b24 <MX_USB_DEVICE_Init+0x54>)
 8013b0e:	f7fb ffa6 	bl	800fa5e <USBD_Start>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013b18:	f7ef fe76 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013b1c:	bf00      	nop
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	20000134 	.word	0x20000134
 8013b24:	20001360 	.word	0x20001360
 8013b28:	2000001c 	.word	0x2000001c
 8013b2c:	20000120 	.word	0x20000120

08013b30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013b34:	2200      	movs	r2, #0
 8013b36:	4905      	ldr	r1, [pc, #20]	; (8013b4c <CDC_Init_FS+0x1c>)
 8013b38:	4805      	ldr	r0, [pc, #20]	; (8013b50 <CDC_Init_FS+0x20>)
 8013b3a:	f7fb fea8 	bl	800f88e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013b3e:	4905      	ldr	r1, [pc, #20]	; (8013b54 <CDC_Init_FS+0x24>)
 8013b40:	4803      	ldr	r0, [pc, #12]	; (8013b50 <CDC_Init_FS+0x20>)
 8013b42:	f7fb fec2 	bl	800f8ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013b46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	20001e30 	.word	0x20001e30
 8013b50:	20001360 	.word	0x20001360
 8013b54:	20001630 	.word	0x20001630

08013b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr

08013b68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	4603      	mov	r3, r0
 8013b70:	6039      	str	r1, [r7, #0]
 8013b72:	71fb      	strb	r3, [r7, #7]
 8013b74:	4613      	mov	r3, r2
 8013b76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013b78:	79fb      	ldrb	r3, [r7, #7]
 8013b7a:	2b23      	cmp	r3, #35	; 0x23
 8013b7c:	d84a      	bhi.n	8013c14 <CDC_Control_FS+0xac>
 8013b7e:	a201      	add	r2, pc, #4	; (adr r2, 8013b84 <CDC_Control_FS+0x1c>)
 8013b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b84:	08013c15 	.word	0x08013c15
 8013b88:	08013c15 	.word	0x08013c15
 8013b8c:	08013c15 	.word	0x08013c15
 8013b90:	08013c15 	.word	0x08013c15
 8013b94:	08013c15 	.word	0x08013c15
 8013b98:	08013c15 	.word	0x08013c15
 8013b9c:	08013c15 	.word	0x08013c15
 8013ba0:	08013c15 	.word	0x08013c15
 8013ba4:	08013c15 	.word	0x08013c15
 8013ba8:	08013c15 	.word	0x08013c15
 8013bac:	08013c15 	.word	0x08013c15
 8013bb0:	08013c15 	.word	0x08013c15
 8013bb4:	08013c15 	.word	0x08013c15
 8013bb8:	08013c15 	.word	0x08013c15
 8013bbc:	08013c15 	.word	0x08013c15
 8013bc0:	08013c15 	.word	0x08013c15
 8013bc4:	08013c15 	.word	0x08013c15
 8013bc8:	08013c15 	.word	0x08013c15
 8013bcc:	08013c15 	.word	0x08013c15
 8013bd0:	08013c15 	.word	0x08013c15
 8013bd4:	08013c15 	.word	0x08013c15
 8013bd8:	08013c15 	.word	0x08013c15
 8013bdc:	08013c15 	.word	0x08013c15
 8013be0:	08013c15 	.word	0x08013c15
 8013be4:	08013c15 	.word	0x08013c15
 8013be8:	08013c15 	.word	0x08013c15
 8013bec:	08013c15 	.word	0x08013c15
 8013bf0:	08013c15 	.word	0x08013c15
 8013bf4:	08013c15 	.word	0x08013c15
 8013bf8:	08013c15 	.word	0x08013c15
 8013bfc:	08013c15 	.word	0x08013c15
 8013c00:	08013c15 	.word	0x08013c15
 8013c04:	08013c15 	.word	0x08013c15
 8013c08:	08013c15 	.word	0x08013c15
 8013c0c:	08013c15 	.word	0x08013c15
 8013c10:	08013c15 	.word	0x08013c15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013c14:	bf00      	nop
  }

  return (USBD_OK);
 8013c16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013c2e:	6879      	ldr	r1, [r7, #4]
 8013c30:	4805      	ldr	r0, [pc, #20]	; (8013c48 <CDC_Receive_FS+0x24>)
 8013c32:	f7fb fe4a 	bl	800f8ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013c36:	4804      	ldr	r0, [pc, #16]	; (8013c48 <CDC_Receive_FS+0x24>)
 8013c38:	f7fb fe90 	bl	800f95c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013c3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3708      	adds	r7, #8
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	20001360 	.word	0x20001360

08013c4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	460b      	mov	r3, r1
 8013c56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013c5c:	4b0d      	ldr	r3, [pc, #52]	; (8013c94 <CDC_Transmit_FS+0x48>)
 8013c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d001      	beq.n	8013c72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	e00b      	b.n	8013c8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013c72:	887b      	ldrh	r3, [r7, #2]
 8013c74:	461a      	mov	r2, r3
 8013c76:	6879      	ldr	r1, [r7, #4]
 8013c78:	4806      	ldr	r0, [pc, #24]	; (8013c94 <CDC_Transmit_FS+0x48>)
 8013c7a:	f7fb fe08 	bl	800f88e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013c7e:	4805      	ldr	r0, [pc, #20]	; (8013c94 <CDC_Transmit_FS+0x48>)
 8013c80:	f7fb fe3c 	bl	800f8fc <USBD_CDC_TransmitPacket>
 8013c84:	4603      	mov	r3, r0
 8013c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	20001360 	.word	0x20001360

08013c98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b087      	sub	sp, #28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr
	...

08013cbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	6039      	str	r1, [r7, #0]
 8013cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	2212      	movs	r2, #18
 8013ccc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013cce:	4b03      	ldr	r3, [pc, #12]	; (8013cdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr
 8013cdc:	20000150 	.word	0x20000150

08013ce0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b083      	sub	sp, #12
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	6039      	str	r1, [r7, #0]
 8013cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	2204      	movs	r2, #4
 8013cf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013cf2:	4b03      	ldr	r3, [pc, #12]	; (8013d00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr
 8013d00:	20000164 	.word	0x20000164

08013d04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	6039      	str	r1, [r7, #0]
 8013d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d10:	79fb      	ldrb	r3, [r7, #7]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d105      	bne.n	8013d22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	4907      	ldr	r1, [pc, #28]	; (8013d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8013d1a:	4808      	ldr	r0, [pc, #32]	; (8013d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8013d1c:	f7fc fed1 	bl	8010ac2 <USBD_GetString>
 8013d20:	e004      	b.n	8013d2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d22:	683a      	ldr	r2, [r7, #0]
 8013d24:	4904      	ldr	r1, [pc, #16]	; (8013d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8013d26:	4805      	ldr	r0, [pc, #20]	; (8013d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8013d28:	f7fc fecb 	bl	8010ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d2c:	4b02      	ldr	r3, [pc, #8]	; (8013d38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3708      	adds	r7, #8
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20002630 	.word	0x20002630
 8013d3c:	0801781c 	.word	0x0801781c

08013d40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	4603      	mov	r3, r0
 8013d48:	6039      	str	r1, [r7, #0]
 8013d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	4904      	ldr	r1, [pc, #16]	; (8013d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013d50:	4804      	ldr	r0, [pc, #16]	; (8013d64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013d52:	f7fc feb6 	bl	8010ac2 <USBD_GetString>
  return USBD_StrDesc;
 8013d56:	4b02      	ldr	r3, [pc, #8]	; (8013d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	20002630 	.word	0x20002630
 8013d64:	08017834 	.word	0x08017834

08013d68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	4603      	mov	r3, r0
 8013d70:	6039      	str	r1, [r7, #0]
 8013d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	221a      	movs	r2, #26
 8013d78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013d7a:	f000 f843 	bl	8013e04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013d7e:	4b02      	ldr	r3, [pc, #8]	; (8013d88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	20000168 	.word	0x20000168

08013d8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	6039      	str	r1, [r7, #0]
 8013d96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013d98:	79fb      	ldrb	r3, [r7, #7]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d105      	bne.n	8013daa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d9e:	683a      	ldr	r2, [r7, #0]
 8013da0:	4907      	ldr	r1, [pc, #28]	; (8013dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013da2:	4808      	ldr	r0, [pc, #32]	; (8013dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013da4:	f7fc fe8d 	bl	8010ac2 <USBD_GetString>
 8013da8:	e004      	b.n	8013db4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013daa:	683a      	ldr	r2, [r7, #0]
 8013dac:	4904      	ldr	r1, [pc, #16]	; (8013dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013dae:	4805      	ldr	r0, [pc, #20]	; (8013dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013db0:	f7fc fe87 	bl	8010ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013db4:	4b02      	ldr	r3, [pc, #8]	; (8013dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	20002630 	.word	0x20002630
 8013dc4:	08017848 	.word	0x08017848

08013dc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	6039      	str	r1, [r7, #0]
 8013dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013dd4:	79fb      	ldrb	r3, [r7, #7]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d105      	bne.n	8013de6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	4907      	ldr	r1, [pc, #28]	; (8013dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013dde:	4808      	ldr	r0, [pc, #32]	; (8013e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013de0:	f7fc fe6f 	bl	8010ac2 <USBD_GetString>
 8013de4:	e004      	b.n	8013df0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013de6:	683a      	ldr	r2, [r7, #0]
 8013de8:	4904      	ldr	r1, [pc, #16]	; (8013dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013dea:	4805      	ldr	r0, [pc, #20]	; (8013e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013dec:	f7fc fe69 	bl	8010ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013df0:	4b02      	ldr	r3, [pc, #8]	; (8013dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	20002630 	.word	0x20002630
 8013e00:	08017854 	.word	0x08017854

08013e04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013e0a:	4b0f      	ldr	r3, [pc, #60]	; (8013e48 <Get_SerialNum+0x44>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013e10:	4b0e      	ldr	r3, [pc, #56]	; (8013e4c <Get_SerialNum+0x48>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013e16:	4b0e      	ldr	r3, [pc, #56]	; (8013e50 <Get_SerialNum+0x4c>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	4413      	add	r3, r2
 8013e22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d009      	beq.n	8013e3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013e2a:	2208      	movs	r2, #8
 8013e2c:	4909      	ldr	r1, [pc, #36]	; (8013e54 <Get_SerialNum+0x50>)
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	f000 f814 	bl	8013e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013e34:	2204      	movs	r2, #4
 8013e36:	4908      	ldr	r1, [pc, #32]	; (8013e58 <Get_SerialNum+0x54>)
 8013e38:	68b8      	ldr	r0, [r7, #8]
 8013e3a:	f000 f80f 	bl	8013e5c <IntToUnicode>
  }
}
 8013e3e:	bf00      	nop
 8013e40:	3710      	adds	r7, #16
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	1fff7590 	.word	0x1fff7590
 8013e4c:	1fff7594 	.word	0x1fff7594
 8013e50:	1fff7598 	.word	0x1fff7598
 8013e54:	2000016a 	.word	0x2000016a
 8013e58:	2000017a 	.word	0x2000017a

08013e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	4613      	mov	r3, r2
 8013e68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013e6e:	2300      	movs	r3, #0
 8013e70:	75fb      	strb	r3, [r7, #23]
 8013e72:	e027      	b.n	8013ec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	0f1b      	lsrs	r3, r3, #28
 8013e78:	2b09      	cmp	r3, #9
 8013e7a:	d80b      	bhi.n	8013e94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	0f1b      	lsrs	r3, r3, #28
 8013e80:	b2da      	uxtb	r2, r3
 8013e82:	7dfb      	ldrb	r3, [r7, #23]
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	4619      	mov	r1, r3
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	440b      	add	r3, r1
 8013e8c:	3230      	adds	r2, #48	; 0x30
 8013e8e:	b2d2      	uxtb	r2, r2
 8013e90:	701a      	strb	r2, [r3, #0]
 8013e92:	e00a      	b.n	8013eaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	0f1b      	lsrs	r3, r3, #28
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	440b      	add	r3, r1
 8013ea4:	3237      	adds	r2, #55	; 0x37
 8013ea6:	b2d2      	uxtb	r2, r2
 8013ea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	011b      	lsls	r3, r3, #4
 8013eae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013eb0:	7dfb      	ldrb	r3, [r7, #23]
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	68ba      	ldr	r2, [r7, #8]
 8013eb8:	4413      	add	r3, r2
 8013eba:	2200      	movs	r2, #0
 8013ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013ebe:	7dfb      	ldrb	r3, [r7, #23]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	75fb      	strb	r3, [r7, #23]
 8013ec4:	7dfa      	ldrb	r2, [r7, #23]
 8013ec6:	79fb      	ldrb	r3, [r7, #7]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d3d3      	bcc.n	8013e74 <IntToUnicode+0x18>
  }
}
 8013ecc:	bf00      	nop
 8013ece:	bf00      	nop
 8013ed0:	371c      	adds	r7, #28
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr
	...

08013edc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b0b0      	sub	sp, #192	; 0xc0
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ee4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ee8:	2200      	movs	r2, #0
 8013eea:	601a      	str	r2, [r3, #0]
 8013eec:	605a      	str	r2, [r3, #4]
 8013eee:	609a      	str	r2, [r3, #8]
 8013ef0:	60da      	str	r2, [r3, #12]
 8013ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013ef4:	f107 0318 	add.w	r3, r7, #24
 8013ef8:	2294      	movs	r2, #148	; 0x94
 8013efa:	2100      	movs	r1, #0
 8013efc:	4618      	mov	r0, r3
 8013efe:	f000 fc0b 	bl	8014718 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013f0a:	d163      	bne.n	8013fd4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013f12:	2300      	movs	r3, #0
 8013f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013f18:	f107 0318 	add.w	r3, r7, #24
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7f3 fc29 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d001      	beq.n	8013f2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013f28:	f7ef fc6e 	bl	8003808 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f2c:	4b2b      	ldr	r3, [pc, #172]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f30:	4a2a      	ldr	r2, [pc, #168]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f32:	f043 0301 	orr.w	r3, r3, #1
 8013f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013f38:	4b28      	ldr	r3, [pc, #160]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f3c:	f003 0301 	and.w	r3, r3, #1
 8013f40:	617b      	str	r3, [r7, #20]
 8013f42:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f4c:	2302      	movs	r3, #2
 8013f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f52:	2300      	movs	r3, #0
 8013f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f58:	2303      	movs	r3, #3
 8013f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013f5e:	230a      	movs	r3, #10
 8013f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013f68:	4619      	mov	r1, r3
 8013f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013f6e:	f7f0 f9f1 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013f72:	4b1a      	ldr	r3, [pc, #104]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f76:	4a19      	ldr	r2, [pc, #100]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013f7e:	4b17      	ldr	r3, [pc, #92]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013f86:	613b      	str	r3, [r7, #16]
 8013f88:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013f8a:	4b14      	ldr	r3, [pc, #80]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d114      	bne.n	8013fc0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013f96:	4b11      	ldr	r3, [pc, #68]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f9a:	4a10      	ldr	r2, [pc, #64]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8013fa2:	4b0e      	ldr	r3, [pc, #56]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013faa:	60fb      	str	r3, [r7, #12]
 8013fac:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8013fae:	f7f2 fccd 	bl	800694c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013fb2:	4b0a      	ldr	r3, [pc, #40]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fb6:	4a09      	ldr	r2, [pc, #36]	; (8013fdc <HAL_PCD_MspInit+0x100>)
 8013fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8013fbe:	e001      	b.n	8013fc4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8013fc0:	f7f2 fcc4 	bl	800694c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	2043      	movs	r0, #67	; 0x43
 8013fca:	f7f0 f8d2 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013fce:	2043      	movs	r0, #67	; 0x43
 8013fd0:	f7f0 f8eb 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013fd4:	bf00      	nop
 8013fd6:	37c0      	adds	r7, #192	; 0xc0
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	40021000 	.word	0x40021000

08013fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	4610      	mov	r0, r2
 8013ff8:	f7fb fd7c 	bl	800faf4 <USBD_LL_SetupStage>
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	460b      	mov	r3, r1
 801400e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014016:	78fa      	ldrb	r2, [r7, #3]
 8014018:	6879      	ldr	r1, [r7, #4]
 801401a:	4613      	mov	r3, r2
 801401c:	00db      	lsls	r3, r3, #3
 801401e:	4413      	add	r3, r2
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	440b      	add	r3, r1
 8014024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	78fb      	ldrb	r3, [r7, #3]
 801402c:	4619      	mov	r1, r3
 801402e:	f7fb fdb6 	bl	800fb9e <USBD_LL_DataOutStage>
}
 8014032:	bf00      	nop
 8014034:	3708      	adds	r7, #8
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}

0801403a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801403a:	b580      	push	{r7, lr}
 801403c:	b082      	sub	sp, #8
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
 8014042:	460b      	mov	r3, r1
 8014044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801404c:	78fa      	ldrb	r2, [r7, #3]
 801404e:	6879      	ldr	r1, [r7, #4]
 8014050:	4613      	mov	r3, r2
 8014052:	00db      	lsls	r3, r3, #3
 8014054:	4413      	add	r3, r2
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	440b      	add	r3, r1
 801405a:	334c      	adds	r3, #76	; 0x4c
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	78fb      	ldrb	r3, [r7, #3]
 8014060:	4619      	mov	r1, r3
 8014062:	f7fb fdff 	bl	800fc64 <USBD_LL_DataInStage>
}
 8014066:	bf00      	nop
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b082      	sub	sp, #8
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801407c:	4618      	mov	r0, r3
 801407e:	f7fb ff13 	bl	800fea8 <USBD_LL_SOF>
}
 8014082:	bf00      	nop
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b084      	sub	sp, #16
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014092:	2301      	movs	r3, #1
 8014094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	2b02      	cmp	r3, #2
 801409c:	d001      	beq.n	80140a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801409e:	f7ef fbb3 	bl	8003808 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140a8:	7bfa      	ldrb	r2, [r7, #15]
 80140aa:	4611      	mov	r1, r2
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fb febd 	bl	800fe2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7fb fe69 	bl	800fd90 <USBD_LL_Reset>
}
 80140be:	bf00      	nop
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
	...

080140c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	6812      	ldr	r2, [r2, #0]
 80140de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140e2:	f043 0301 	orr.w	r3, r3, #1
 80140e6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fb feac 	bl	800fe4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6a1b      	ldr	r3, [r3, #32]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d005      	beq.n	8014108 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80140fc:	4b04      	ldr	r3, [pc, #16]	; (8014110 <HAL_PCD_SuspendCallback+0x48>)
 80140fe:	691b      	ldr	r3, [r3, #16]
 8014100:	4a03      	ldr	r2, [pc, #12]	; (8014110 <HAL_PCD_SuspendCallback+0x48>)
 8014102:	f043 0306 	orr.w	r3, r3, #6
 8014106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014108:	bf00      	nop
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	e000ed00 	.word	0xe000ed00

08014114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	6812      	ldr	r2, [r2, #0]
 801412a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801412e:	f023 0301 	bic.w	r3, r3, #1
 8014132:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6a1b      	ldr	r3, [r3, #32]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d007      	beq.n	801414c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801413c:	4b08      	ldr	r3, [pc, #32]	; (8014160 <HAL_PCD_ResumeCallback+0x4c>)
 801413e:	691b      	ldr	r3, [r3, #16]
 8014140:	4a07      	ldr	r2, [pc, #28]	; (8014160 <HAL_PCD_ResumeCallback+0x4c>)
 8014142:	f023 0306 	bic.w	r3, r3, #6
 8014146:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014148:	f000 faa6 	bl	8014698 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014152:	4618      	mov	r0, r3
 8014154:	f7fb fe90 	bl	800fe78 <USBD_LL_Resume>
}
 8014158:	bf00      	nop
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	e000ed00 	.word	0xe000ed00

08014164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	460b      	mov	r3, r1
 801416e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014176:	78fa      	ldrb	r2, [r7, #3]
 8014178:	4611      	mov	r1, r2
 801417a:	4618      	mov	r0, r3
 801417c:	f7fb fedc 	bl	800ff38 <USBD_LL_IsoOUTIncomplete>
}
 8014180:	bf00      	nop
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	460b      	mov	r3, r1
 8014192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801419a:	78fa      	ldrb	r2, [r7, #3]
 801419c:	4611      	mov	r1, r2
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fb fea4 	bl	800feec <USBD_LL_IsoINIncomplete>
}
 80141a4:	bf00      	nop
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fb fee2 	bl	800ff84 <USBD_LL_DevConnected>
}
 80141c0:	bf00      	nop
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fb fedf 	bl	800ff9a <USBD_LL_DevDisconnected>
}
 80141dc:	bf00      	nop
 80141de:	3708      	adds	r7, #8
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d139      	bne.n	8014268 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80141f4:	4a1f      	ldr	r2, [pc, #124]	; (8014274 <USBD_LL_Init+0x90>)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4a1d      	ldr	r2, [pc, #116]	; (8014274 <USBD_LL_Init+0x90>)
 8014200:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014204:	4b1b      	ldr	r3, [pc, #108]	; (8014274 <USBD_LL_Init+0x90>)
 8014206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801420a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801420c:	4b19      	ldr	r3, [pc, #100]	; (8014274 <USBD_LL_Init+0x90>)
 801420e:	2206      	movs	r2, #6
 8014210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014212:	4b18      	ldr	r3, [pc, #96]	; (8014274 <USBD_LL_Init+0x90>)
 8014214:	2202      	movs	r2, #2
 8014216:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014218:	4b16      	ldr	r3, [pc, #88]	; (8014274 <USBD_LL_Init+0x90>)
 801421a:	2200      	movs	r2, #0
 801421c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801421e:	4b15      	ldr	r3, [pc, #84]	; (8014274 <USBD_LL_Init+0x90>)
 8014220:	2200      	movs	r2, #0
 8014222:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014224:	4b13      	ldr	r3, [pc, #76]	; (8014274 <USBD_LL_Init+0x90>)
 8014226:	2200      	movs	r2, #0
 8014228:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801422a:	4b12      	ldr	r3, [pc, #72]	; (8014274 <USBD_LL_Init+0x90>)
 801422c:	2200      	movs	r2, #0
 801422e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014230:	4b10      	ldr	r3, [pc, #64]	; (8014274 <USBD_LL_Init+0x90>)
 8014232:	2200      	movs	r2, #0
 8014234:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014236:	4b0f      	ldr	r3, [pc, #60]	; (8014274 <USBD_LL_Init+0x90>)
 8014238:	2200      	movs	r2, #0
 801423a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801423c:	480d      	ldr	r0, [pc, #52]	; (8014274 <USBD_LL_Init+0x90>)
 801423e:	f7f1 f8f6 	bl	800542e <HAL_PCD_Init>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d001      	beq.n	801424c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8014248:	f7ef fade 	bl	8003808 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801424c:	2180      	movs	r1, #128	; 0x80
 801424e:	4809      	ldr	r0, [pc, #36]	; (8014274 <USBD_LL_Init+0x90>)
 8014250:	f7f2 fa77 	bl	8006742 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014254:	2240      	movs	r2, #64	; 0x40
 8014256:	2100      	movs	r1, #0
 8014258:	4806      	ldr	r0, [pc, #24]	; (8014274 <USBD_LL_Init+0x90>)
 801425a:	f7f2 fa2b 	bl	80066b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801425e:	2280      	movs	r2, #128	; 0x80
 8014260:	2101      	movs	r1, #1
 8014262:	4804      	ldr	r0, [pc, #16]	; (8014274 <USBD_LL_Init+0x90>)
 8014264:	f7f2 fa26 	bl	80066b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014268:	2300      	movs	r3, #0
}
 801426a:	4618      	mov	r0, r3
 801426c:	3708      	adds	r7, #8
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	20002830 	.word	0x20002830

08014278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014280:	2300      	movs	r3, #0
 8014282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014284:	2300      	movs	r3, #0
 8014286:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801428e:	4618      	mov	r0, r3
 8014290:	f7f1 f9f1 	bl	8005676 <HAL_PCD_Start>
 8014294:	4603      	mov	r3, r0
 8014296:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014298:	7bbb      	ldrb	r3, [r7, #14]
 801429a:	2b03      	cmp	r3, #3
 801429c:	d816      	bhi.n	80142cc <USBD_LL_Start+0x54>
 801429e:	a201      	add	r2, pc, #4	; (adr r2, 80142a4 <USBD_LL_Start+0x2c>)
 80142a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a4:	080142b5 	.word	0x080142b5
 80142a8:	080142bb 	.word	0x080142bb
 80142ac:	080142c1 	.word	0x080142c1
 80142b0:	080142c7 	.word	0x080142c7
    case HAL_OK :
      usb_status = USBD_OK;
 80142b4:	2300      	movs	r3, #0
 80142b6:	73fb      	strb	r3, [r7, #15]
    break;
 80142b8:	e00b      	b.n	80142d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80142ba:	2303      	movs	r3, #3
 80142bc:	73fb      	strb	r3, [r7, #15]
    break;
 80142be:	e008      	b.n	80142d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80142c0:	2301      	movs	r3, #1
 80142c2:	73fb      	strb	r3, [r7, #15]
    break;
 80142c4:	e005      	b.n	80142d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80142c6:	2303      	movs	r3, #3
 80142c8:	73fb      	strb	r3, [r7, #15]
    break;
 80142ca:	e002      	b.n	80142d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80142cc:	2303      	movs	r3, #3
 80142ce:	73fb      	strb	r3, [r7, #15]
    break;
 80142d0:	bf00      	nop
  }
  return usb_status;
 80142d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3710      	adds	r7, #16
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	4608      	mov	r0, r1
 80142e6:	4611      	mov	r1, r2
 80142e8:	461a      	mov	r2, r3
 80142ea:	4603      	mov	r3, r0
 80142ec:	70fb      	strb	r3, [r7, #3]
 80142ee:	460b      	mov	r3, r1
 80142f0:	70bb      	strb	r3, [r7, #2]
 80142f2:	4613      	mov	r3, r2
 80142f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142f6:	2300      	movs	r3, #0
 80142f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142fa:	2300      	movs	r3, #0
 80142fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014304:	78bb      	ldrb	r3, [r7, #2]
 8014306:	883a      	ldrh	r2, [r7, #0]
 8014308:	78f9      	ldrb	r1, [r7, #3]
 801430a:	f7f1 fe9b 	bl	8006044 <HAL_PCD_EP_Open>
 801430e:	4603      	mov	r3, r0
 8014310:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014312:	7bbb      	ldrb	r3, [r7, #14]
 8014314:	2b03      	cmp	r3, #3
 8014316:	d817      	bhi.n	8014348 <USBD_LL_OpenEP+0x6c>
 8014318:	a201      	add	r2, pc, #4	; (adr r2, 8014320 <USBD_LL_OpenEP+0x44>)
 801431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801431e:	bf00      	nop
 8014320:	08014331 	.word	0x08014331
 8014324:	08014337 	.word	0x08014337
 8014328:	0801433d 	.word	0x0801433d
 801432c:	08014343 	.word	0x08014343
    case HAL_OK :
      usb_status = USBD_OK;
 8014330:	2300      	movs	r3, #0
 8014332:	73fb      	strb	r3, [r7, #15]
    break;
 8014334:	e00b      	b.n	801434e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014336:	2303      	movs	r3, #3
 8014338:	73fb      	strb	r3, [r7, #15]
    break;
 801433a:	e008      	b.n	801434e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801433c:	2301      	movs	r3, #1
 801433e:	73fb      	strb	r3, [r7, #15]
    break;
 8014340:	e005      	b.n	801434e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014342:	2303      	movs	r3, #3
 8014344:	73fb      	strb	r3, [r7, #15]
    break;
 8014346:	e002      	b.n	801434e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014348:	2303      	movs	r3, #3
 801434a:	73fb      	strb	r3, [r7, #15]
    break;
 801434c:	bf00      	nop
  }
  return usb_status;
 801434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014364:	2300      	movs	r3, #0
 8014366:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014372:	78fa      	ldrb	r2, [r7, #3]
 8014374:	4611      	mov	r1, r2
 8014376:	4618      	mov	r0, r3
 8014378:	f7f1 fecc 	bl	8006114 <HAL_PCD_EP_Close>
 801437c:	4603      	mov	r3, r0
 801437e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014380:	7bbb      	ldrb	r3, [r7, #14]
 8014382:	2b03      	cmp	r3, #3
 8014384:	d816      	bhi.n	80143b4 <USBD_LL_CloseEP+0x5c>
 8014386:	a201      	add	r2, pc, #4	; (adr r2, 801438c <USBD_LL_CloseEP+0x34>)
 8014388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801438c:	0801439d 	.word	0x0801439d
 8014390:	080143a3 	.word	0x080143a3
 8014394:	080143a9 	.word	0x080143a9
 8014398:	080143af 	.word	0x080143af
    case HAL_OK :
      usb_status = USBD_OK;
 801439c:	2300      	movs	r3, #0
 801439e:	73fb      	strb	r3, [r7, #15]
    break;
 80143a0:	e00b      	b.n	80143ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80143a2:	2303      	movs	r3, #3
 80143a4:	73fb      	strb	r3, [r7, #15]
    break;
 80143a6:	e008      	b.n	80143ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80143a8:	2301      	movs	r3, #1
 80143aa:	73fb      	strb	r3, [r7, #15]
    break;
 80143ac:	e005      	b.n	80143ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80143ae:	2303      	movs	r3, #3
 80143b0:	73fb      	strb	r3, [r7, #15]
    break;
 80143b2:	e002      	b.n	80143ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80143b4:	2303      	movs	r3, #3
 80143b6:	73fb      	strb	r3, [r7, #15]
    break;
 80143b8:	bf00      	nop
  }
  return usb_status;
 80143ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	460b      	mov	r3, r1
 80143ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143d0:	2300      	movs	r3, #0
 80143d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143d4:	2300      	movs	r3, #0
 80143d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143de:	78fa      	ldrb	r2, [r7, #3]
 80143e0:	4611      	mov	r1, r2
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7f1 ff73 	bl	80062ce <HAL_PCD_EP_SetStall>
 80143e8:	4603      	mov	r3, r0
 80143ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80143ec:	7bbb      	ldrb	r3, [r7, #14]
 80143ee:	2b03      	cmp	r3, #3
 80143f0:	d816      	bhi.n	8014420 <USBD_LL_StallEP+0x5c>
 80143f2:	a201      	add	r2, pc, #4	; (adr r2, 80143f8 <USBD_LL_StallEP+0x34>)
 80143f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143f8:	08014409 	.word	0x08014409
 80143fc:	0801440f 	.word	0x0801440f
 8014400:	08014415 	.word	0x08014415
 8014404:	0801441b 	.word	0x0801441b
    case HAL_OK :
      usb_status = USBD_OK;
 8014408:	2300      	movs	r3, #0
 801440a:	73fb      	strb	r3, [r7, #15]
    break;
 801440c:	e00b      	b.n	8014426 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801440e:	2303      	movs	r3, #3
 8014410:	73fb      	strb	r3, [r7, #15]
    break;
 8014412:	e008      	b.n	8014426 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014414:	2301      	movs	r3, #1
 8014416:	73fb      	strb	r3, [r7, #15]
    break;
 8014418:	e005      	b.n	8014426 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801441a:	2303      	movs	r3, #3
 801441c:	73fb      	strb	r3, [r7, #15]
    break;
 801441e:	e002      	b.n	8014426 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014420:	2303      	movs	r3, #3
 8014422:	73fb      	strb	r3, [r7, #15]
    break;
 8014424:	bf00      	nop
  }
  return usb_status;
 8014426:	7bfb      	ldrb	r3, [r7, #15]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	460b      	mov	r3, r1
 801443a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801444a:	78fa      	ldrb	r2, [r7, #3]
 801444c:	4611      	mov	r1, r2
 801444e:	4618      	mov	r0, r3
 8014450:	f7f1 ff9f 	bl	8006392 <HAL_PCD_EP_ClrStall>
 8014454:	4603      	mov	r3, r0
 8014456:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014458:	7bbb      	ldrb	r3, [r7, #14]
 801445a:	2b03      	cmp	r3, #3
 801445c:	d816      	bhi.n	801448c <USBD_LL_ClearStallEP+0x5c>
 801445e:	a201      	add	r2, pc, #4	; (adr r2, 8014464 <USBD_LL_ClearStallEP+0x34>)
 8014460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014464:	08014475 	.word	0x08014475
 8014468:	0801447b 	.word	0x0801447b
 801446c:	08014481 	.word	0x08014481
 8014470:	08014487 	.word	0x08014487
    case HAL_OK :
      usb_status = USBD_OK;
 8014474:	2300      	movs	r3, #0
 8014476:	73fb      	strb	r3, [r7, #15]
    break;
 8014478:	e00b      	b.n	8014492 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801447a:	2303      	movs	r3, #3
 801447c:	73fb      	strb	r3, [r7, #15]
    break;
 801447e:	e008      	b.n	8014492 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014480:	2301      	movs	r3, #1
 8014482:	73fb      	strb	r3, [r7, #15]
    break;
 8014484:	e005      	b.n	8014492 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014486:	2303      	movs	r3, #3
 8014488:	73fb      	strb	r3, [r7, #15]
    break;
 801448a:	e002      	b.n	8014492 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801448c:	2303      	movs	r3, #3
 801448e:	73fb      	strb	r3, [r7, #15]
    break;
 8014490:	bf00      	nop
  }
  return usb_status;
 8014492:	7bfb      	ldrb	r3, [r7, #15]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801449c:	b480      	push	{r7}
 801449e:	b085      	sub	sp, #20
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	460b      	mov	r3, r1
 80144a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80144ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80144b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	da0b      	bge.n	80144d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80144b8:	78fb      	ldrb	r3, [r7, #3]
 80144ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144be:	68f9      	ldr	r1, [r7, #12]
 80144c0:	4613      	mov	r3, r2
 80144c2:	00db      	lsls	r3, r3, #3
 80144c4:	4413      	add	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	440b      	add	r3, r1
 80144ca:	333e      	adds	r3, #62	; 0x3e
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	e00b      	b.n	80144e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80144d0:	78fb      	ldrb	r3, [r7, #3]
 80144d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144d6:	68f9      	ldr	r1, [r7, #12]
 80144d8:	4613      	mov	r3, r2
 80144da:	00db      	lsls	r3, r3, #3
 80144dc:	4413      	add	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	440b      	add	r3, r1
 80144e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80144e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3714      	adds	r7, #20
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	460b      	mov	r3, r1
 80144fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014500:	2300      	movs	r3, #0
 8014502:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801450e:	78fa      	ldrb	r2, [r7, #3]
 8014510:	4611      	mov	r1, r2
 8014512:	4618      	mov	r0, r3
 8014514:	f7f1 fd71 	bl	8005ffa <HAL_PCD_SetAddress>
 8014518:	4603      	mov	r3, r0
 801451a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801451c:	7bbb      	ldrb	r3, [r7, #14]
 801451e:	2b03      	cmp	r3, #3
 8014520:	d816      	bhi.n	8014550 <USBD_LL_SetUSBAddress+0x5c>
 8014522:	a201      	add	r2, pc, #4	; (adr r2, 8014528 <USBD_LL_SetUSBAddress+0x34>)
 8014524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014528:	08014539 	.word	0x08014539
 801452c:	0801453f 	.word	0x0801453f
 8014530:	08014545 	.word	0x08014545
 8014534:	0801454b 	.word	0x0801454b
    case HAL_OK :
      usb_status = USBD_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	73fb      	strb	r3, [r7, #15]
    break;
 801453c:	e00b      	b.n	8014556 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801453e:	2303      	movs	r3, #3
 8014540:	73fb      	strb	r3, [r7, #15]
    break;
 8014542:	e008      	b.n	8014556 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014544:	2301      	movs	r3, #1
 8014546:	73fb      	strb	r3, [r7, #15]
    break;
 8014548:	e005      	b.n	8014556 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801454a:	2303      	movs	r3, #3
 801454c:	73fb      	strb	r3, [r7, #15]
    break;
 801454e:	e002      	b.n	8014556 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014550:	2303      	movs	r3, #3
 8014552:	73fb      	strb	r3, [r7, #15]
    break;
 8014554:	bf00      	nop
  }
  return usb_status;
 8014556:	7bfb      	ldrb	r3, [r7, #15]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b086      	sub	sp, #24
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	607a      	str	r2, [r7, #4]
 801456a:	603b      	str	r3, [r7, #0]
 801456c:	460b      	mov	r3, r1
 801456e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014574:	2300      	movs	r3, #0
 8014576:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801457e:	7af9      	ldrb	r1, [r7, #11]
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	f7f1 fe66 	bl	8006254 <HAL_PCD_EP_Transmit>
 8014588:	4603      	mov	r3, r0
 801458a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801458c:	7dbb      	ldrb	r3, [r7, #22]
 801458e:	2b03      	cmp	r3, #3
 8014590:	d816      	bhi.n	80145c0 <USBD_LL_Transmit+0x60>
 8014592:	a201      	add	r2, pc, #4	; (adr r2, 8014598 <USBD_LL_Transmit+0x38>)
 8014594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014598:	080145a9 	.word	0x080145a9
 801459c:	080145af 	.word	0x080145af
 80145a0:	080145b5 	.word	0x080145b5
 80145a4:	080145bb 	.word	0x080145bb
    case HAL_OK :
      usb_status = USBD_OK;
 80145a8:	2300      	movs	r3, #0
 80145aa:	75fb      	strb	r3, [r7, #23]
    break;
 80145ac:	e00b      	b.n	80145c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145ae:	2303      	movs	r3, #3
 80145b0:	75fb      	strb	r3, [r7, #23]
    break;
 80145b2:	e008      	b.n	80145c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145b4:	2301      	movs	r3, #1
 80145b6:	75fb      	strb	r3, [r7, #23]
    break;
 80145b8:	e005      	b.n	80145c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145ba:	2303      	movs	r3, #3
 80145bc:	75fb      	strb	r3, [r7, #23]
    break;
 80145be:	e002      	b.n	80145c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80145c0:	2303      	movs	r3, #3
 80145c2:	75fb      	strb	r3, [r7, #23]
    break;
 80145c4:	bf00      	nop
  }
  return usb_status;
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b086      	sub	sp, #24
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	607a      	str	r2, [r7, #4]
 80145da:	603b      	str	r3, [r7, #0]
 80145dc:	460b      	mov	r3, r1
 80145de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145e4:	2300      	movs	r3, #0
 80145e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80145ee:	7af9      	ldrb	r1, [r7, #11]
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	f7f1 fdd8 	bl	80061a8 <HAL_PCD_EP_Receive>
 80145f8:	4603      	mov	r3, r0
 80145fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80145fc:	7dbb      	ldrb	r3, [r7, #22]
 80145fe:	2b03      	cmp	r3, #3
 8014600:	d816      	bhi.n	8014630 <USBD_LL_PrepareReceive+0x60>
 8014602:	a201      	add	r2, pc, #4	; (adr r2, 8014608 <USBD_LL_PrepareReceive+0x38>)
 8014604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014608:	08014619 	.word	0x08014619
 801460c:	0801461f 	.word	0x0801461f
 8014610:	08014625 	.word	0x08014625
 8014614:	0801462b 	.word	0x0801462b
    case HAL_OK :
      usb_status = USBD_OK;
 8014618:	2300      	movs	r3, #0
 801461a:	75fb      	strb	r3, [r7, #23]
    break;
 801461c:	e00b      	b.n	8014636 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801461e:	2303      	movs	r3, #3
 8014620:	75fb      	strb	r3, [r7, #23]
    break;
 8014622:	e008      	b.n	8014636 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014624:	2301      	movs	r3, #1
 8014626:	75fb      	strb	r3, [r7, #23]
    break;
 8014628:	e005      	b.n	8014636 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801462a:	2303      	movs	r3, #3
 801462c:	75fb      	strb	r3, [r7, #23]
    break;
 801462e:	e002      	b.n	8014636 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014630:	2303      	movs	r3, #3
 8014632:	75fb      	strb	r3, [r7, #23]
    break;
 8014634:	bf00      	nop
  }
  return usb_status;
 8014636:	7dfb      	ldrb	r3, [r7, #23]
}
 8014638:	4618      	mov	r0, r3
 801463a:	3718      	adds	r7, #24
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	460b      	mov	r3, r1
 801464a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014652:	78fa      	ldrb	r2, [r7, #3]
 8014654:	4611      	mov	r1, r2
 8014656:	4618      	mov	r0, r3
 8014658:	f7f1 fde4 	bl	8006224 <HAL_PCD_EP_GetRxCount>
 801465c:	4603      	mov	r3, r0
}
 801465e:	4618      	mov	r0, r3
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
	...

08014668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014668:	b480      	push	{r7}
 801466a:	b083      	sub	sp, #12
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014670:	4b03      	ldr	r3, [pc, #12]	; (8014680 <USBD_static_malloc+0x18>)
}
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop
 8014680:	20002d3c 	.word	0x20002d3c

08014684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]

}
 801468c:	bf00      	nop
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr

08014698 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801469c:	f7ee fd80 	bl	80031a0 <SystemClock_Config>
}
 80146a0:	bf00      	nop
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <__libc_init_array>:
 80146a4:	b570      	push	{r4, r5, r6, lr}
 80146a6:	4d0d      	ldr	r5, [pc, #52]	; (80146dc <__libc_init_array+0x38>)
 80146a8:	4c0d      	ldr	r4, [pc, #52]	; (80146e0 <__libc_init_array+0x3c>)
 80146aa:	1b64      	subs	r4, r4, r5
 80146ac:	10a4      	asrs	r4, r4, #2
 80146ae:	2600      	movs	r6, #0
 80146b0:	42a6      	cmp	r6, r4
 80146b2:	d109      	bne.n	80146c8 <__libc_init_array+0x24>
 80146b4:	4d0b      	ldr	r5, [pc, #44]	; (80146e4 <__libc_init_array+0x40>)
 80146b6:	4c0c      	ldr	r4, [pc, #48]	; (80146e8 <__libc_init_array+0x44>)
 80146b8:	f002 ff6e 	bl	8017598 <_init>
 80146bc:	1b64      	subs	r4, r4, r5
 80146be:	10a4      	asrs	r4, r4, #2
 80146c0:	2600      	movs	r6, #0
 80146c2:	42a6      	cmp	r6, r4
 80146c4:	d105      	bne.n	80146d2 <__libc_init_array+0x2e>
 80146c6:	bd70      	pop	{r4, r5, r6, pc}
 80146c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80146cc:	4798      	blx	r3
 80146ce:	3601      	adds	r6, #1
 80146d0:	e7ee      	b.n	80146b0 <__libc_init_array+0xc>
 80146d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80146d6:	4798      	blx	r3
 80146d8:	3601      	adds	r6, #1
 80146da:	e7f2      	b.n	80146c2 <__libc_init_array+0x1e>
 80146dc:	08017d70 	.word	0x08017d70
 80146e0:	08017d70 	.word	0x08017d70
 80146e4:	08017d70 	.word	0x08017d70
 80146e8:	08017d74 	.word	0x08017d74

080146ec <malloc>:
 80146ec:	4b02      	ldr	r3, [pc, #8]	; (80146f8 <malloc+0xc>)
 80146ee:	4601      	mov	r1, r0
 80146f0:	6818      	ldr	r0, [r3, #0]
 80146f2:	f000 b885 	b.w	8014800 <_malloc_r>
 80146f6:	bf00      	nop
 80146f8:	20000184 	.word	0x20000184

080146fc <memcpy>:
 80146fc:	440a      	add	r2, r1
 80146fe:	4291      	cmp	r1, r2
 8014700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014704:	d100      	bne.n	8014708 <memcpy+0xc>
 8014706:	4770      	bx	lr
 8014708:	b510      	push	{r4, lr}
 801470a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801470e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014712:	4291      	cmp	r1, r2
 8014714:	d1f9      	bne.n	801470a <memcpy+0xe>
 8014716:	bd10      	pop	{r4, pc}

08014718 <memset>:
 8014718:	4402      	add	r2, r0
 801471a:	4603      	mov	r3, r0
 801471c:	4293      	cmp	r3, r2
 801471e:	d100      	bne.n	8014722 <memset+0xa>
 8014720:	4770      	bx	lr
 8014722:	f803 1b01 	strb.w	r1, [r3], #1
 8014726:	e7f9      	b.n	801471c <memset+0x4>

08014728 <_free_r>:
 8014728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801472a:	2900      	cmp	r1, #0
 801472c:	d044      	beq.n	80147b8 <_free_r+0x90>
 801472e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014732:	9001      	str	r0, [sp, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	f1a1 0404 	sub.w	r4, r1, #4
 801473a:	bfb8      	it	lt
 801473c:	18e4      	addlt	r4, r4, r3
 801473e:	f001 fd3f 	bl	80161c0 <__malloc_lock>
 8014742:	4a1e      	ldr	r2, [pc, #120]	; (80147bc <_free_r+0x94>)
 8014744:	9801      	ldr	r0, [sp, #4]
 8014746:	6813      	ldr	r3, [r2, #0]
 8014748:	b933      	cbnz	r3, 8014758 <_free_r+0x30>
 801474a:	6063      	str	r3, [r4, #4]
 801474c:	6014      	str	r4, [r2, #0]
 801474e:	b003      	add	sp, #12
 8014750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014754:	f001 bd3a 	b.w	80161cc <__malloc_unlock>
 8014758:	42a3      	cmp	r3, r4
 801475a:	d908      	bls.n	801476e <_free_r+0x46>
 801475c:	6825      	ldr	r5, [r4, #0]
 801475e:	1961      	adds	r1, r4, r5
 8014760:	428b      	cmp	r3, r1
 8014762:	bf01      	itttt	eq
 8014764:	6819      	ldreq	r1, [r3, #0]
 8014766:	685b      	ldreq	r3, [r3, #4]
 8014768:	1949      	addeq	r1, r1, r5
 801476a:	6021      	streq	r1, [r4, #0]
 801476c:	e7ed      	b.n	801474a <_free_r+0x22>
 801476e:	461a      	mov	r2, r3
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	b10b      	cbz	r3, 8014778 <_free_r+0x50>
 8014774:	42a3      	cmp	r3, r4
 8014776:	d9fa      	bls.n	801476e <_free_r+0x46>
 8014778:	6811      	ldr	r1, [r2, #0]
 801477a:	1855      	adds	r5, r2, r1
 801477c:	42a5      	cmp	r5, r4
 801477e:	d10b      	bne.n	8014798 <_free_r+0x70>
 8014780:	6824      	ldr	r4, [r4, #0]
 8014782:	4421      	add	r1, r4
 8014784:	1854      	adds	r4, r2, r1
 8014786:	42a3      	cmp	r3, r4
 8014788:	6011      	str	r1, [r2, #0]
 801478a:	d1e0      	bne.n	801474e <_free_r+0x26>
 801478c:	681c      	ldr	r4, [r3, #0]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	6053      	str	r3, [r2, #4]
 8014792:	4421      	add	r1, r4
 8014794:	6011      	str	r1, [r2, #0]
 8014796:	e7da      	b.n	801474e <_free_r+0x26>
 8014798:	d902      	bls.n	80147a0 <_free_r+0x78>
 801479a:	230c      	movs	r3, #12
 801479c:	6003      	str	r3, [r0, #0]
 801479e:	e7d6      	b.n	801474e <_free_r+0x26>
 80147a0:	6825      	ldr	r5, [r4, #0]
 80147a2:	1961      	adds	r1, r4, r5
 80147a4:	428b      	cmp	r3, r1
 80147a6:	bf04      	itt	eq
 80147a8:	6819      	ldreq	r1, [r3, #0]
 80147aa:	685b      	ldreq	r3, [r3, #4]
 80147ac:	6063      	str	r3, [r4, #4]
 80147ae:	bf04      	itt	eq
 80147b0:	1949      	addeq	r1, r1, r5
 80147b2:	6021      	streq	r1, [r4, #0]
 80147b4:	6054      	str	r4, [r2, #4]
 80147b6:	e7ca      	b.n	801474e <_free_r+0x26>
 80147b8:	b003      	add	sp, #12
 80147ba:	bd30      	pop	{r4, r5, pc}
 80147bc:	20002f5c 	.word	0x20002f5c

080147c0 <sbrk_aligned>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	4e0e      	ldr	r6, [pc, #56]	; (80147fc <sbrk_aligned+0x3c>)
 80147c4:	460c      	mov	r4, r1
 80147c6:	6831      	ldr	r1, [r6, #0]
 80147c8:	4605      	mov	r5, r0
 80147ca:	b911      	cbnz	r1, 80147d2 <sbrk_aligned+0x12>
 80147cc:	f000 fd0e 	bl	80151ec <_sbrk_r>
 80147d0:	6030      	str	r0, [r6, #0]
 80147d2:	4621      	mov	r1, r4
 80147d4:	4628      	mov	r0, r5
 80147d6:	f000 fd09 	bl	80151ec <_sbrk_r>
 80147da:	1c43      	adds	r3, r0, #1
 80147dc:	d00a      	beq.n	80147f4 <sbrk_aligned+0x34>
 80147de:	1cc4      	adds	r4, r0, #3
 80147e0:	f024 0403 	bic.w	r4, r4, #3
 80147e4:	42a0      	cmp	r0, r4
 80147e6:	d007      	beq.n	80147f8 <sbrk_aligned+0x38>
 80147e8:	1a21      	subs	r1, r4, r0
 80147ea:	4628      	mov	r0, r5
 80147ec:	f000 fcfe 	bl	80151ec <_sbrk_r>
 80147f0:	3001      	adds	r0, #1
 80147f2:	d101      	bne.n	80147f8 <sbrk_aligned+0x38>
 80147f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80147f8:	4620      	mov	r0, r4
 80147fa:	bd70      	pop	{r4, r5, r6, pc}
 80147fc:	20002f60 	.word	0x20002f60

08014800 <_malloc_r>:
 8014800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014804:	1ccd      	adds	r5, r1, #3
 8014806:	f025 0503 	bic.w	r5, r5, #3
 801480a:	3508      	adds	r5, #8
 801480c:	2d0c      	cmp	r5, #12
 801480e:	bf38      	it	cc
 8014810:	250c      	movcc	r5, #12
 8014812:	2d00      	cmp	r5, #0
 8014814:	4607      	mov	r7, r0
 8014816:	db01      	blt.n	801481c <_malloc_r+0x1c>
 8014818:	42a9      	cmp	r1, r5
 801481a:	d905      	bls.n	8014828 <_malloc_r+0x28>
 801481c:	230c      	movs	r3, #12
 801481e:	603b      	str	r3, [r7, #0]
 8014820:	2600      	movs	r6, #0
 8014822:	4630      	mov	r0, r6
 8014824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014828:	4e2e      	ldr	r6, [pc, #184]	; (80148e4 <_malloc_r+0xe4>)
 801482a:	f001 fcc9 	bl	80161c0 <__malloc_lock>
 801482e:	6833      	ldr	r3, [r6, #0]
 8014830:	461c      	mov	r4, r3
 8014832:	bb34      	cbnz	r4, 8014882 <_malloc_r+0x82>
 8014834:	4629      	mov	r1, r5
 8014836:	4638      	mov	r0, r7
 8014838:	f7ff ffc2 	bl	80147c0 <sbrk_aligned>
 801483c:	1c43      	adds	r3, r0, #1
 801483e:	4604      	mov	r4, r0
 8014840:	d14d      	bne.n	80148de <_malloc_r+0xde>
 8014842:	6834      	ldr	r4, [r6, #0]
 8014844:	4626      	mov	r6, r4
 8014846:	2e00      	cmp	r6, #0
 8014848:	d140      	bne.n	80148cc <_malloc_r+0xcc>
 801484a:	6823      	ldr	r3, [r4, #0]
 801484c:	4631      	mov	r1, r6
 801484e:	4638      	mov	r0, r7
 8014850:	eb04 0803 	add.w	r8, r4, r3
 8014854:	f000 fcca 	bl	80151ec <_sbrk_r>
 8014858:	4580      	cmp	r8, r0
 801485a:	d13a      	bne.n	80148d2 <_malloc_r+0xd2>
 801485c:	6821      	ldr	r1, [r4, #0]
 801485e:	3503      	adds	r5, #3
 8014860:	1a6d      	subs	r5, r5, r1
 8014862:	f025 0503 	bic.w	r5, r5, #3
 8014866:	3508      	adds	r5, #8
 8014868:	2d0c      	cmp	r5, #12
 801486a:	bf38      	it	cc
 801486c:	250c      	movcc	r5, #12
 801486e:	4629      	mov	r1, r5
 8014870:	4638      	mov	r0, r7
 8014872:	f7ff ffa5 	bl	80147c0 <sbrk_aligned>
 8014876:	3001      	adds	r0, #1
 8014878:	d02b      	beq.n	80148d2 <_malloc_r+0xd2>
 801487a:	6823      	ldr	r3, [r4, #0]
 801487c:	442b      	add	r3, r5
 801487e:	6023      	str	r3, [r4, #0]
 8014880:	e00e      	b.n	80148a0 <_malloc_r+0xa0>
 8014882:	6822      	ldr	r2, [r4, #0]
 8014884:	1b52      	subs	r2, r2, r5
 8014886:	d41e      	bmi.n	80148c6 <_malloc_r+0xc6>
 8014888:	2a0b      	cmp	r2, #11
 801488a:	d916      	bls.n	80148ba <_malloc_r+0xba>
 801488c:	1961      	adds	r1, r4, r5
 801488e:	42a3      	cmp	r3, r4
 8014890:	6025      	str	r5, [r4, #0]
 8014892:	bf18      	it	ne
 8014894:	6059      	strne	r1, [r3, #4]
 8014896:	6863      	ldr	r3, [r4, #4]
 8014898:	bf08      	it	eq
 801489a:	6031      	streq	r1, [r6, #0]
 801489c:	5162      	str	r2, [r4, r5]
 801489e:	604b      	str	r3, [r1, #4]
 80148a0:	4638      	mov	r0, r7
 80148a2:	f104 060b 	add.w	r6, r4, #11
 80148a6:	f001 fc91 	bl	80161cc <__malloc_unlock>
 80148aa:	f026 0607 	bic.w	r6, r6, #7
 80148ae:	1d23      	adds	r3, r4, #4
 80148b0:	1af2      	subs	r2, r6, r3
 80148b2:	d0b6      	beq.n	8014822 <_malloc_r+0x22>
 80148b4:	1b9b      	subs	r3, r3, r6
 80148b6:	50a3      	str	r3, [r4, r2]
 80148b8:	e7b3      	b.n	8014822 <_malloc_r+0x22>
 80148ba:	6862      	ldr	r2, [r4, #4]
 80148bc:	42a3      	cmp	r3, r4
 80148be:	bf0c      	ite	eq
 80148c0:	6032      	streq	r2, [r6, #0]
 80148c2:	605a      	strne	r2, [r3, #4]
 80148c4:	e7ec      	b.n	80148a0 <_malloc_r+0xa0>
 80148c6:	4623      	mov	r3, r4
 80148c8:	6864      	ldr	r4, [r4, #4]
 80148ca:	e7b2      	b.n	8014832 <_malloc_r+0x32>
 80148cc:	4634      	mov	r4, r6
 80148ce:	6876      	ldr	r6, [r6, #4]
 80148d0:	e7b9      	b.n	8014846 <_malloc_r+0x46>
 80148d2:	230c      	movs	r3, #12
 80148d4:	603b      	str	r3, [r7, #0]
 80148d6:	4638      	mov	r0, r7
 80148d8:	f001 fc78 	bl	80161cc <__malloc_unlock>
 80148dc:	e7a1      	b.n	8014822 <_malloc_r+0x22>
 80148de:	6025      	str	r5, [r4, #0]
 80148e0:	e7de      	b.n	80148a0 <_malloc_r+0xa0>
 80148e2:	bf00      	nop
 80148e4:	20002f5c 	.word	0x20002f5c

080148e8 <__cvt>:
 80148e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148ec:	ec55 4b10 	vmov	r4, r5, d0
 80148f0:	2d00      	cmp	r5, #0
 80148f2:	460e      	mov	r6, r1
 80148f4:	4619      	mov	r1, r3
 80148f6:	462b      	mov	r3, r5
 80148f8:	bfbb      	ittet	lt
 80148fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80148fe:	461d      	movlt	r5, r3
 8014900:	2300      	movge	r3, #0
 8014902:	232d      	movlt	r3, #45	; 0x2d
 8014904:	700b      	strb	r3, [r1, #0]
 8014906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014908:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801490c:	4691      	mov	r9, r2
 801490e:	f023 0820 	bic.w	r8, r3, #32
 8014912:	bfbc      	itt	lt
 8014914:	4622      	movlt	r2, r4
 8014916:	4614      	movlt	r4, r2
 8014918:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801491c:	d005      	beq.n	801492a <__cvt+0x42>
 801491e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014922:	d100      	bne.n	8014926 <__cvt+0x3e>
 8014924:	3601      	adds	r6, #1
 8014926:	2102      	movs	r1, #2
 8014928:	e000      	b.n	801492c <__cvt+0x44>
 801492a:	2103      	movs	r1, #3
 801492c:	ab03      	add	r3, sp, #12
 801492e:	9301      	str	r3, [sp, #4]
 8014930:	ab02      	add	r3, sp, #8
 8014932:	9300      	str	r3, [sp, #0]
 8014934:	ec45 4b10 	vmov	d0, r4, r5
 8014938:	4653      	mov	r3, sl
 801493a:	4632      	mov	r2, r6
 801493c:	f000 fd30 	bl	80153a0 <_dtoa_r>
 8014940:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014944:	4607      	mov	r7, r0
 8014946:	d102      	bne.n	801494e <__cvt+0x66>
 8014948:	f019 0f01 	tst.w	r9, #1
 801494c:	d022      	beq.n	8014994 <__cvt+0xac>
 801494e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014952:	eb07 0906 	add.w	r9, r7, r6
 8014956:	d110      	bne.n	801497a <__cvt+0x92>
 8014958:	783b      	ldrb	r3, [r7, #0]
 801495a:	2b30      	cmp	r3, #48	; 0x30
 801495c:	d10a      	bne.n	8014974 <__cvt+0x8c>
 801495e:	2200      	movs	r2, #0
 8014960:	2300      	movs	r3, #0
 8014962:	4620      	mov	r0, r4
 8014964:	4629      	mov	r1, r5
 8014966:	f7ec f8c7 	bl	8000af8 <__aeabi_dcmpeq>
 801496a:	b918      	cbnz	r0, 8014974 <__cvt+0x8c>
 801496c:	f1c6 0601 	rsb	r6, r6, #1
 8014970:	f8ca 6000 	str.w	r6, [sl]
 8014974:	f8da 3000 	ldr.w	r3, [sl]
 8014978:	4499      	add	r9, r3
 801497a:	2200      	movs	r2, #0
 801497c:	2300      	movs	r3, #0
 801497e:	4620      	mov	r0, r4
 8014980:	4629      	mov	r1, r5
 8014982:	f7ec f8b9 	bl	8000af8 <__aeabi_dcmpeq>
 8014986:	b108      	cbz	r0, 801498c <__cvt+0xa4>
 8014988:	f8cd 900c 	str.w	r9, [sp, #12]
 801498c:	2230      	movs	r2, #48	; 0x30
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	454b      	cmp	r3, r9
 8014992:	d307      	bcc.n	80149a4 <__cvt+0xbc>
 8014994:	9b03      	ldr	r3, [sp, #12]
 8014996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014998:	1bdb      	subs	r3, r3, r7
 801499a:	4638      	mov	r0, r7
 801499c:	6013      	str	r3, [r2, #0]
 801499e:	b004      	add	sp, #16
 80149a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a4:	1c59      	adds	r1, r3, #1
 80149a6:	9103      	str	r1, [sp, #12]
 80149a8:	701a      	strb	r2, [r3, #0]
 80149aa:	e7f0      	b.n	801498e <__cvt+0xa6>

080149ac <__exponent>:
 80149ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149ae:	4603      	mov	r3, r0
 80149b0:	2900      	cmp	r1, #0
 80149b2:	bfb8      	it	lt
 80149b4:	4249      	neglt	r1, r1
 80149b6:	f803 2b02 	strb.w	r2, [r3], #2
 80149ba:	bfb4      	ite	lt
 80149bc:	222d      	movlt	r2, #45	; 0x2d
 80149be:	222b      	movge	r2, #43	; 0x2b
 80149c0:	2909      	cmp	r1, #9
 80149c2:	7042      	strb	r2, [r0, #1]
 80149c4:	dd2a      	ble.n	8014a1c <__exponent+0x70>
 80149c6:	f10d 0407 	add.w	r4, sp, #7
 80149ca:	46a4      	mov	ip, r4
 80149cc:	270a      	movs	r7, #10
 80149ce:	46a6      	mov	lr, r4
 80149d0:	460a      	mov	r2, r1
 80149d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80149d6:	fb07 1516 	mls	r5, r7, r6, r1
 80149da:	3530      	adds	r5, #48	; 0x30
 80149dc:	2a63      	cmp	r2, #99	; 0x63
 80149de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80149e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80149e6:	4631      	mov	r1, r6
 80149e8:	dcf1      	bgt.n	80149ce <__exponent+0x22>
 80149ea:	3130      	adds	r1, #48	; 0x30
 80149ec:	f1ae 0502 	sub.w	r5, lr, #2
 80149f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80149f4:	1c44      	adds	r4, r0, #1
 80149f6:	4629      	mov	r1, r5
 80149f8:	4561      	cmp	r1, ip
 80149fa:	d30a      	bcc.n	8014a12 <__exponent+0x66>
 80149fc:	f10d 0209 	add.w	r2, sp, #9
 8014a00:	eba2 020e 	sub.w	r2, r2, lr
 8014a04:	4565      	cmp	r5, ip
 8014a06:	bf88      	it	hi
 8014a08:	2200      	movhi	r2, #0
 8014a0a:	4413      	add	r3, r2
 8014a0c:	1a18      	subs	r0, r3, r0
 8014a0e:	b003      	add	sp, #12
 8014a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014a1a:	e7ed      	b.n	80149f8 <__exponent+0x4c>
 8014a1c:	2330      	movs	r3, #48	; 0x30
 8014a1e:	3130      	adds	r1, #48	; 0x30
 8014a20:	7083      	strb	r3, [r0, #2]
 8014a22:	70c1      	strb	r1, [r0, #3]
 8014a24:	1d03      	adds	r3, r0, #4
 8014a26:	e7f1      	b.n	8014a0c <__exponent+0x60>

08014a28 <_printf_float>:
 8014a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	ed2d 8b02 	vpush	{d8}
 8014a30:	b08d      	sub	sp, #52	; 0x34
 8014a32:	460c      	mov	r4, r1
 8014a34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014a38:	4616      	mov	r6, r2
 8014a3a:	461f      	mov	r7, r3
 8014a3c:	4605      	mov	r5, r0
 8014a3e:	f001 fba5 	bl	801618c <_localeconv_r>
 8014a42:	f8d0 a000 	ldr.w	sl, [r0]
 8014a46:	4650      	mov	r0, sl
 8014a48:	f7eb fbda 	bl	8000200 <strlen>
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	9305      	str	r3, [sp, #20]
 8014a54:	f8d8 3000 	ldr.w	r3, [r8]
 8014a58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014a5c:	3307      	adds	r3, #7
 8014a5e:	f023 0307 	bic.w	r3, r3, #7
 8014a62:	f103 0208 	add.w	r2, r3, #8
 8014a66:	f8c8 2000 	str.w	r2, [r8]
 8014a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014a72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014a76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014a7a:	9307      	str	r3, [sp, #28]
 8014a7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014a80:	ee08 0a10 	vmov	s16, r0
 8014a84:	4b9f      	ldr	r3, [pc, #636]	; (8014d04 <_printf_float+0x2dc>)
 8014a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a8e:	f7ec f865 	bl	8000b5c <__aeabi_dcmpun>
 8014a92:	bb88      	cbnz	r0, 8014af8 <_printf_float+0xd0>
 8014a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a98:	4b9a      	ldr	r3, [pc, #616]	; (8014d04 <_printf_float+0x2dc>)
 8014a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a9e:	f7ec f83f 	bl	8000b20 <__aeabi_dcmple>
 8014aa2:	bb48      	cbnz	r0, 8014af8 <_printf_float+0xd0>
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	4649      	mov	r1, r9
 8014aac:	f7ec f82e 	bl	8000b0c <__aeabi_dcmplt>
 8014ab0:	b110      	cbz	r0, 8014ab8 <_printf_float+0x90>
 8014ab2:	232d      	movs	r3, #45	; 0x2d
 8014ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ab8:	4b93      	ldr	r3, [pc, #588]	; (8014d08 <_printf_float+0x2e0>)
 8014aba:	4894      	ldr	r0, [pc, #592]	; (8014d0c <_printf_float+0x2e4>)
 8014abc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014ac0:	bf94      	ite	ls
 8014ac2:	4698      	movls	r8, r3
 8014ac4:	4680      	movhi	r8, r0
 8014ac6:	2303      	movs	r3, #3
 8014ac8:	6123      	str	r3, [r4, #16]
 8014aca:	9b05      	ldr	r3, [sp, #20]
 8014acc:	f023 0204 	bic.w	r2, r3, #4
 8014ad0:	6022      	str	r2, [r4, #0]
 8014ad2:	f04f 0900 	mov.w	r9, #0
 8014ad6:	9700      	str	r7, [sp, #0]
 8014ad8:	4633      	mov	r3, r6
 8014ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8014adc:	4621      	mov	r1, r4
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f000 f9d8 	bl	8014e94 <_printf_common>
 8014ae4:	3001      	adds	r0, #1
 8014ae6:	f040 8090 	bne.w	8014c0a <_printf_float+0x1e2>
 8014aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aee:	b00d      	add	sp, #52	; 0x34
 8014af0:	ecbd 8b02 	vpop	{d8}
 8014af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af8:	4642      	mov	r2, r8
 8014afa:	464b      	mov	r3, r9
 8014afc:	4640      	mov	r0, r8
 8014afe:	4649      	mov	r1, r9
 8014b00:	f7ec f82c 	bl	8000b5c <__aeabi_dcmpun>
 8014b04:	b140      	cbz	r0, 8014b18 <_printf_float+0xf0>
 8014b06:	464b      	mov	r3, r9
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	bfbc      	itt	lt
 8014b0c:	232d      	movlt	r3, #45	; 0x2d
 8014b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014b12:	487f      	ldr	r0, [pc, #508]	; (8014d10 <_printf_float+0x2e8>)
 8014b14:	4b7f      	ldr	r3, [pc, #508]	; (8014d14 <_printf_float+0x2ec>)
 8014b16:	e7d1      	b.n	8014abc <_printf_float+0x94>
 8014b18:	6863      	ldr	r3, [r4, #4]
 8014b1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014b1e:	9206      	str	r2, [sp, #24]
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	d13f      	bne.n	8014ba4 <_printf_float+0x17c>
 8014b24:	2306      	movs	r3, #6
 8014b26:	6063      	str	r3, [r4, #4]
 8014b28:	9b05      	ldr	r3, [sp, #20]
 8014b2a:	6861      	ldr	r1, [r4, #4]
 8014b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014b30:	2300      	movs	r3, #0
 8014b32:	9303      	str	r3, [sp, #12]
 8014b34:	ab0a      	add	r3, sp, #40	; 0x28
 8014b36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014b3a:	ab09      	add	r3, sp, #36	; 0x24
 8014b3c:	ec49 8b10 	vmov	d0, r8, r9
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	6022      	str	r2, [r4, #0]
 8014b44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f7ff fecd 	bl	80148e8 <__cvt>
 8014b4e:	9b06      	ldr	r3, [sp, #24]
 8014b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b52:	2b47      	cmp	r3, #71	; 0x47
 8014b54:	4680      	mov	r8, r0
 8014b56:	d108      	bne.n	8014b6a <_printf_float+0x142>
 8014b58:	1cc8      	adds	r0, r1, #3
 8014b5a:	db02      	blt.n	8014b62 <_printf_float+0x13a>
 8014b5c:	6863      	ldr	r3, [r4, #4]
 8014b5e:	4299      	cmp	r1, r3
 8014b60:	dd41      	ble.n	8014be6 <_printf_float+0x1be>
 8014b62:	f1ab 0b02 	sub.w	fp, fp, #2
 8014b66:	fa5f fb8b 	uxtb.w	fp, fp
 8014b6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014b6e:	d820      	bhi.n	8014bb2 <_printf_float+0x18a>
 8014b70:	3901      	subs	r1, #1
 8014b72:	465a      	mov	r2, fp
 8014b74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014b78:	9109      	str	r1, [sp, #36]	; 0x24
 8014b7a:	f7ff ff17 	bl	80149ac <__exponent>
 8014b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b80:	1813      	adds	r3, r2, r0
 8014b82:	2a01      	cmp	r2, #1
 8014b84:	4681      	mov	r9, r0
 8014b86:	6123      	str	r3, [r4, #16]
 8014b88:	dc02      	bgt.n	8014b90 <_printf_float+0x168>
 8014b8a:	6822      	ldr	r2, [r4, #0]
 8014b8c:	07d2      	lsls	r2, r2, #31
 8014b8e:	d501      	bpl.n	8014b94 <_printf_float+0x16c>
 8014b90:	3301      	adds	r3, #1
 8014b92:	6123      	str	r3, [r4, #16]
 8014b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d09c      	beq.n	8014ad6 <_printf_float+0xae>
 8014b9c:	232d      	movs	r3, #45	; 0x2d
 8014b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ba2:	e798      	b.n	8014ad6 <_printf_float+0xae>
 8014ba4:	9a06      	ldr	r2, [sp, #24]
 8014ba6:	2a47      	cmp	r2, #71	; 0x47
 8014ba8:	d1be      	bne.n	8014b28 <_printf_float+0x100>
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d1bc      	bne.n	8014b28 <_printf_float+0x100>
 8014bae:	2301      	movs	r3, #1
 8014bb0:	e7b9      	b.n	8014b26 <_printf_float+0xfe>
 8014bb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014bb6:	d118      	bne.n	8014bea <_printf_float+0x1c2>
 8014bb8:	2900      	cmp	r1, #0
 8014bba:	6863      	ldr	r3, [r4, #4]
 8014bbc:	dd0b      	ble.n	8014bd6 <_printf_float+0x1ae>
 8014bbe:	6121      	str	r1, [r4, #16]
 8014bc0:	b913      	cbnz	r3, 8014bc8 <_printf_float+0x1a0>
 8014bc2:	6822      	ldr	r2, [r4, #0]
 8014bc4:	07d0      	lsls	r0, r2, #31
 8014bc6:	d502      	bpl.n	8014bce <_printf_float+0x1a6>
 8014bc8:	3301      	adds	r3, #1
 8014bca:	440b      	add	r3, r1
 8014bcc:	6123      	str	r3, [r4, #16]
 8014bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8014bd0:	f04f 0900 	mov.w	r9, #0
 8014bd4:	e7de      	b.n	8014b94 <_printf_float+0x16c>
 8014bd6:	b913      	cbnz	r3, 8014bde <_printf_float+0x1b6>
 8014bd8:	6822      	ldr	r2, [r4, #0]
 8014bda:	07d2      	lsls	r2, r2, #31
 8014bdc:	d501      	bpl.n	8014be2 <_printf_float+0x1ba>
 8014bde:	3302      	adds	r3, #2
 8014be0:	e7f4      	b.n	8014bcc <_printf_float+0x1a4>
 8014be2:	2301      	movs	r3, #1
 8014be4:	e7f2      	b.n	8014bcc <_printf_float+0x1a4>
 8014be6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bec:	4299      	cmp	r1, r3
 8014bee:	db05      	blt.n	8014bfc <_printf_float+0x1d4>
 8014bf0:	6823      	ldr	r3, [r4, #0]
 8014bf2:	6121      	str	r1, [r4, #16]
 8014bf4:	07d8      	lsls	r0, r3, #31
 8014bf6:	d5ea      	bpl.n	8014bce <_printf_float+0x1a6>
 8014bf8:	1c4b      	adds	r3, r1, #1
 8014bfa:	e7e7      	b.n	8014bcc <_printf_float+0x1a4>
 8014bfc:	2900      	cmp	r1, #0
 8014bfe:	bfd4      	ite	le
 8014c00:	f1c1 0202 	rsble	r2, r1, #2
 8014c04:	2201      	movgt	r2, #1
 8014c06:	4413      	add	r3, r2
 8014c08:	e7e0      	b.n	8014bcc <_printf_float+0x1a4>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	055a      	lsls	r2, r3, #21
 8014c0e:	d407      	bmi.n	8014c20 <_printf_float+0x1f8>
 8014c10:	6923      	ldr	r3, [r4, #16]
 8014c12:	4642      	mov	r2, r8
 8014c14:	4631      	mov	r1, r6
 8014c16:	4628      	mov	r0, r5
 8014c18:	47b8      	blx	r7
 8014c1a:	3001      	adds	r0, #1
 8014c1c:	d12c      	bne.n	8014c78 <_printf_float+0x250>
 8014c1e:	e764      	b.n	8014aea <_printf_float+0xc2>
 8014c20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014c24:	f240 80e0 	bls.w	8014de8 <_printf_float+0x3c0>
 8014c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	2300      	movs	r3, #0
 8014c30:	f7eb ff62 	bl	8000af8 <__aeabi_dcmpeq>
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d034      	beq.n	8014ca2 <_printf_float+0x27a>
 8014c38:	4a37      	ldr	r2, [pc, #220]	; (8014d18 <_printf_float+0x2f0>)
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	4631      	mov	r1, r6
 8014c3e:	4628      	mov	r0, r5
 8014c40:	47b8      	blx	r7
 8014c42:	3001      	adds	r0, #1
 8014c44:	f43f af51 	beq.w	8014aea <_printf_float+0xc2>
 8014c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	db02      	blt.n	8014c56 <_printf_float+0x22e>
 8014c50:	6823      	ldr	r3, [r4, #0]
 8014c52:	07d8      	lsls	r0, r3, #31
 8014c54:	d510      	bpl.n	8014c78 <_printf_float+0x250>
 8014c56:	ee18 3a10 	vmov	r3, s16
 8014c5a:	4652      	mov	r2, sl
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4628      	mov	r0, r5
 8014c60:	47b8      	blx	r7
 8014c62:	3001      	adds	r0, #1
 8014c64:	f43f af41 	beq.w	8014aea <_printf_float+0xc2>
 8014c68:	f04f 0800 	mov.w	r8, #0
 8014c6c:	f104 091a 	add.w	r9, r4, #26
 8014c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c72:	3b01      	subs	r3, #1
 8014c74:	4543      	cmp	r3, r8
 8014c76:	dc09      	bgt.n	8014c8c <_printf_float+0x264>
 8014c78:	6823      	ldr	r3, [r4, #0]
 8014c7a:	079b      	lsls	r3, r3, #30
 8014c7c:	f100 8105 	bmi.w	8014e8a <_printf_float+0x462>
 8014c80:	68e0      	ldr	r0, [r4, #12]
 8014c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c84:	4298      	cmp	r0, r3
 8014c86:	bfb8      	it	lt
 8014c88:	4618      	movlt	r0, r3
 8014c8a:	e730      	b.n	8014aee <_printf_float+0xc6>
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	464a      	mov	r2, r9
 8014c90:	4631      	mov	r1, r6
 8014c92:	4628      	mov	r0, r5
 8014c94:	47b8      	blx	r7
 8014c96:	3001      	adds	r0, #1
 8014c98:	f43f af27 	beq.w	8014aea <_printf_float+0xc2>
 8014c9c:	f108 0801 	add.w	r8, r8, #1
 8014ca0:	e7e6      	b.n	8014c70 <_printf_float+0x248>
 8014ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	dc39      	bgt.n	8014d1c <_printf_float+0x2f4>
 8014ca8:	4a1b      	ldr	r2, [pc, #108]	; (8014d18 <_printf_float+0x2f0>)
 8014caa:	2301      	movs	r3, #1
 8014cac:	4631      	mov	r1, r6
 8014cae:	4628      	mov	r0, r5
 8014cb0:	47b8      	blx	r7
 8014cb2:	3001      	adds	r0, #1
 8014cb4:	f43f af19 	beq.w	8014aea <_printf_float+0xc2>
 8014cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cbc:	4313      	orrs	r3, r2
 8014cbe:	d102      	bne.n	8014cc6 <_printf_float+0x29e>
 8014cc0:	6823      	ldr	r3, [r4, #0]
 8014cc2:	07d9      	lsls	r1, r3, #31
 8014cc4:	d5d8      	bpl.n	8014c78 <_printf_float+0x250>
 8014cc6:	ee18 3a10 	vmov	r3, s16
 8014cca:	4652      	mov	r2, sl
 8014ccc:	4631      	mov	r1, r6
 8014cce:	4628      	mov	r0, r5
 8014cd0:	47b8      	blx	r7
 8014cd2:	3001      	adds	r0, #1
 8014cd4:	f43f af09 	beq.w	8014aea <_printf_float+0xc2>
 8014cd8:	f04f 0900 	mov.w	r9, #0
 8014cdc:	f104 0a1a 	add.w	sl, r4, #26
 8014ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce2:	425b      	negs	r3, r3
 8014ce4:	454b      	cmp	r3, r9
 8014ce6:	dc01      	bgt.n	8014cec <_printf_float+0x2c4>
 8014ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cea:	e792      	b.n	8014c12 <_printf_float+0x1ea>
 8014cec:	2301      	movs	r3, #1
 8014cee:	4652      	mov	r2, sl
 8014cf0:	4631      	mov	r1, r6
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	47b8      	blx	r7
 8014cf6:	3001      	adds	r0, #1
 8014cf8:	f43f aef7 	beq.w	8014aea <_printf_float+0xc2>
 8014cfc:	f109 0901 	add.w	r9, r9, #1
 8014d00:	e7ee      	b.n	8014ce0 <_printf_float+0x2b8>
 8014d02:	bf00      	nop
 8014d04:	7fefffff 	.word	0x7fefffff
 8014d08:	0801798c 	.word	0x0801798c
 8014d0c:	08017990 	.word	0x08017990
 8014d10:	08017998 	.word	0x08017998
 8014d14:	08017994 	.word	0x08017994
 8014d18:	0801799c 	.word	0x0801799c
 8014d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d20:	429a      	cmp	r2, r3
 8014d22:	bfa8      	it	ge
 8014d24:	461a      	movge	r2, r3
 8014d26:	2a00      	cmp	r2, #0
 8014d28:	4691      	mov	r9, r2
 8014d2a:	dc37      	bgt.n	8014d9c <_printf_float+0x374>
 8014d2c:	f04f 0b00 	mov.w	fp, #0
 8014d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d34:	f104 021a 	add.w	r2, r4, #26
 8014d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d3a:	9305      	str	r3, [sp, #20]
 8014d3c:	eba3 0309 	sub.w	r3, r3, r9
 8014d40:	455b      	cmp	r3, fp
 8014d42:	dc33      	bgt.n	8014dac <_printf_float+0x384>
 8014d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	db3b      	blt.n	8014dc4 <_printf_float+0x39c>
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	07da      	lsls	r2, r3, #31
 8014d50:	d438      	bmi.n	8014dc4 <_printf_float+0x39c>
 8014d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d54:	9a05      	ldr	r2, [sp, #20]
 8014d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d58:	1a9a      	subs	r2, r3, r2
 8014d5a:	eba3 0901 	sub.w	r9, r3, r1
 8014d5e:	4591      	cmp	r9, r2
 8014d60:	bfa8      	it	ge
 8014d62:	4691      	movge	r9, r2
 8014d64:	f1b9 0f00 	cmp.w	r9, #0
 8014d68:	dc35      	bgt.n	8014dd6 <_printf_float+0x3ae>
 8014d6a:	f04f 0800 	mov.w	r8, #0
 8014d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d72:	f104 0a1a 	add.w	sl, r4, #26
 8014d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d7a:	1a9b      	subs	r3, r3, r2
 8014d7c:	eba3 0309 	sub.w	r3, r3, r9
 8014d80:	4543      	cmp	r3, r8
 8014d82:	f77f af79 	ble.w	8014c78 <_printf_float+0x250>
 8014d86:	2301      	movs	r3, #1
 8014d88:	4652      	mov	r2, sl
 8014d8a:	4631      	mov	r1, r6
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	47b8      	blx	r7
 8014d90:	3001      	adds	r0, #1
 8014d92:	f43f aeaa 	beq.w	8014aea <_printf_float+0xc2>
 8014d96:	f108 0801 	add.w	r8, r8, #1
 8014d9a:	e7ec      	b.n	8014d76 <_printf_float+0x34e>
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	4631      	mov	r1, r6
 8014da0:	4642      	mov	r2, r8
 8014da2:	4628      	mov	r0, r5
 8014da4:	47b8      	blx	r7
 8014da6:	3001      	adds	r0, #1
 8014da8:	d1c0      	bne.n	8014d2c <_printf_float+0x304>
 8014daa:	e69e      	b.n	8014aea <_printf_float+0xc2>
 8014dac:	2301      	movs	r3, #1
 8014dae:	4631      	mov	r1, r6
 8014db0:	4628      	mov	r0, r5
 8014db2:	9205      	str	r2, [sp, #20]
 8014db4:	47b8      	blx	r7
 8014db6:	3001      	adds	r0, #1
 8014db8:	f43f ae97 	beq.w	8014aea <_printf_float+0xc2>
 8014dbc:	9a05      	ldr	r2, [sp, #20]
 8014dbe:	f10b 0b01 	add.w	fp, fp, #1
 8014dc2:	e7b9      	b.n	8014d38 <_printf_float+0x310>
 8014dc4:	ee18 3a10 	vmov	r3, s16
 8014dc8:	4652      	mov	r2, sl
 8014dca:	4631      	mov	r1, r6
 8014dcc:	4628      	mov	r0, r5
 8014dce:	47b8      	blx	r7
 8014dd0:	3001      	adds	r0, #1
 8014dd2:	d1be      	bne.n	8014d52 <_printf_float+0x32a>
 8014dd4:	e689      	b.n	8014aea <_printf_float+0xc2>
 8014dd6:	9a05      	ldr	r2, [sp, #20]
 8014dd8:	464b      	mov	r3, r9
 8014dda:	4442      	add	r2, r8
 8014ddc:	4631      	mov	r1, r6
 8014dde:	4628      	mov	r0, r5
 8014de0:	47b8      	blx	r7
 8014de2:	3001      	adds	r0, #1
 8014de4:	d1c1      	bne.n	8014d6a <_printf_float+0x342>
 8014de6:	e680      	b.n	8014aea <_printf_float+0xc2>
 8014de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dea:	2a01      	cmp	r2, #1
 8014dec:	dc01      	bgt.n	8014df2 <_printf_float+0x3ca>
 8014dee:	07db      	lsls	r3, r3, #31
 8014df0:	d538      	bpl.n	8014e64 <_printf_float+0x43c>
 8014df2:	2301      	movs	r3, #1
 8014df4:	4642      	mov	r2, r8
 8014df6:	4631      	mov	r1, r6
 8014df8:	4628      	mov	r0, r5
 8014dfa:	47b8      	blx	r7
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	f43f ae74 	beq.w	8014aea <_printf_float+0xc2>
 8014e02:	ee18 3a10 	vmov	r3, s16
 8014e06:	4652      	mov	r2, sl
 8014e08:	4631      	mov	r1, r6
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	47b8      	blx	r7
 8014e0e:	3001      	adds	r0, #1
 8014e10:	f43f ae6b 	beq.w	8014aea <_printf_float+0xc2>
 8014e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e18:	2200      	movs	r2, #0
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	f7eb fe6c 	bl	8000af8 <__aeabi_dcmpeq>
 8014e20:	b9d8      	cbnz	r0, 8014e5a <_printf_float+0x432>
 8014e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e24:	f108 0201 	add.w	r2, r8, #1
 8014e28:	3b01      	subs	r3, #1
 8014e2a:	4631      	mov	r1, r6
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	47b8      	blx	r7
 8014e30:	3001      	adds	r0, #1
 8014e32:	d10e      	bne.n	8014e52 <_printf_float+0x42a>
 8014e34:	e659      	b.n	8014aea <_printf_float+0xc2>
 8014e36:	2301      	movs	r3, #1
 8014e38:	4652      	mov	r2, sl
 8014e3a:	4631      	mov	r1, r6
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	47b8      	blx	r7
 8014e40:	3001      	adds	r0, #1
 8014e42:	f43f ae52 	beq.w	8014aea <_printf_float+0xc2>
 8014e46:	f108 0801 	add.w	r8, r8, #1
 8014e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e4c:	3b01      	subs	r3, #1
 8014e4e:	4543      	cmp	r3, r8
 8014e50:	dcf1      	bgt.n	8014e36 <_printf_float+0x40e>
 8014e52:	464b      	mov	r3, r9
 8014e54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e58:	e6dc      	b.n	8014c14 <_printf_float+0x1ec>
 8014e5a:	f04f 0800 	mov.w	r8, #0
 8014e5e:	f104 0a1a 	add.w	sl, r4, #26
 8014e62:	e7f2      	b.n	8014e4a <_printf_float+0x422>
 8014e64:	2301      	movs	r3, #1
 8014e66:	4642      	mov	r2, r8
 8014e68:	e7df      	b.n	8014e2a <_printf_float+0x402>
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	464a      	mov	r2, r9
 8014e6e:	4631      	mov	r1, r6
 8014e70:	4628      	mov	r0, r5
 8014e72:	47b8      	blx	r7
 8014e74:	3001      	adds	r0, #1
 8014e76:	f43f ae38 	beq.w	8014aea <_printf_float+0xc2>
 8014e7a:	f108 0801 	add.w	r8, r8, #1
 8014e7e:	68e3      	ldr	r3, [r4, #12]
 8014e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e82:	1a5b      	subs	r3, r3, r1
 8014e84:	4543      	cmp	r3, r8
 8014e86:	dcf0      	bgt.n	8014e6a <_printf_float+0x442>
 8014e88:	e6fa      	b.n	8014c80 <_printf_float+0x258>
 8014e8a:	f04f 0800 	mov.w	r8, #0
 8014e8e:	f104 0919 	add.w	r9, r4, #25
 8014e92:	e7f4      	b.n	8014e7e <_printf_float+0x456>

08014e94 <_printf_common>:
 8014e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e98:	4616      	mov	r6, r2
 8014e9a:	4699      	mov	r9, r3
 8014e9c:	688a      	ldr	r2, [r1, #8]
 8014e9e:	690b      	ldr	r3, [r1, #16]
 8014ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	bfb8      	it	lt
 8014ea8:	4613      	movlt	r3, r2
 8014eaa:	6033      	str	r3, [r6, #0]
 8014eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014eb0:	4607      	mov	r7, r0
 8014eb2:	460c      	mov	r4, r1
 8014eb4:	b10a      	cbz	r2, 8014eba <_printf_common+0x26>
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	6033      	str	r3, [r6, #0]
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	0699      	lsls	r1, r3, #26
 8014ebe:	bf42      	ittt	mi
 8014ec0:	6833      	ldrmi	r3, [r6, #0]
 8014ec2:	3302      	addmi	r3, #2
 8014ec4:	6033      	strmi	r3, [r6, #0]
 8014ec6:	6825      	ldr	r5, [r4, #0]
 8014ec8:	f015 0506 	ands.w	r5, r5, #6
 8014ecc:	d106      	bne.n	8014edc <_printf_common+0x48>
 8014ece:	f104 0a19 	add.w	sl, r4, #25
 8014ed2:	68e3      	ldr	r3, [r4, #12]
 8014ed4:	6832      	ldr	r2, [r6, #0]
 8014ed6:	1a9b      	subs	r3, r3, r2
 8014ed8:	42ab      	cmp	r3, r5
 8014eda:	dc26      	bgt.n	8014f2a <_printf_common+0x96>
 8014edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ee0:	1e13      	subs	r3, r2, #0
 8014ee2:	6822      	ldr	r2, [r4, #0]
 8014ee4:	bf18      	it	ne
 8014ee6:	2301      	movne	r3, #1
 8014ee8:	0692      	lsls	r2, r2, #26
 8014eea:	d42b      	bmi.n	8014f44 <_printf_common+0xb0>
 8014eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ef0:	4649      	mov	r1, r9
 8014ef2:	4638      	mov	r0, r7
 8014ef4:	47c0      	blx	r8
 8014ef6:	3001      	adds	r0, #1
 8014ef8:	d01e      	beq.n	8014f38 <_printf_common+0xa4>
 8014efa:	6823      	ldr	r3, [r4, #0]
 8014efc:	68e5      	ldr	r5, [r4, #12]
 8014efe:	6832      	ldr	r2, [r6, #0]
 8014f00:	f003 0306 	and.w	r3, r3, #6
 8014f04:	2b04      	cmp	r3, #4
 8014f06:	bf08      	it	eq
 8014f08:	1aad      	subeq	r5, r5, r2
 8014f0a:	68a3      	ldr	r3, [r4, #8]
 8014f0c:	6922      	ldr	r2, [r4, #16]
 8014f0e:	bf0c      	ite	eq
 8014f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f14:	2500      	movne	r5, #0
 8014f16:	4293      	cmp	r3, r2
 8014f18:	bfc4      	itt	gt
 8014f1a:	1a9b      	subgt	r3, r3, r2
 8014f1c:	18ed      	addgt	r5, r5, r3
 8014f1e:	2600      	movs	r6, #0
 8014f20:	341a      	adds	r4, #26
 8014f22:	42b5      	cmp	r5, r6
 8014f24:	d11a      	bne.n	8014f5c <_printf_common+0xc8>
 8014f26:	2000      	movs	r0, #0
 8014f28:	e008      	b.n	8014f3c <_printf_common+0xa8>
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	4652      	mov	r2, sl
 8014f2e:	4649      	mov	r1, r9
 8014f30:	4638      	mov	r0, r7
 8014f32:	47c0      	blx	r8
 8014f34:	3001      	adds	r0, #1
 8014f36:	d103      	bne.n	8014f40 <_printf_common+0xac>
 8014f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f40:	3501      	adds	r5, #1
 8014f42:	e7c6      	b.n	8014ed2 <_printf_common+0x3e>
 8014f44:	18e1      	adds	r1, r4, r3
 8014f46:	1c5a      	adds	r2, r3, #1
 8014f48:	2030      	movs	r0, #48	; 0x30
 8014f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f4e:	4422      	add	r2, r4
 8014f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f58:	3302      	adds	r3, #2
 8014f5a:	e7c7      	b.n	8014eec <_printf_common+0x58>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	4622      	mov	r2, r4
 8014f60:	4649      	mov	r1, r9
 8014f62:	4638      	mov	r0, r7
 8014f64:	47c0      	blx	r8
 8014f66:	3001      	adds	r0, #1
 8014f68:	d0e6      	beq.n	8014f38 <_printf_common+0xa4>
 8014f6a:	3601      	adds	r6, #1
 8014f6c:	e7d9      	b.n	8014f22 <_printf_common+0x8e>
	...

08014f70 <_printf_i>:
 8014f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f74:	7e0f      	ldrb	r7, [r1, #24]
 8014f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f78:	2f78      	cmp	r7, #120	; 0x78
 8014f7a:	4691      	mov	r9, r2
 8014f7c:	4680      	mov	r8, r0
 8014f7e:	460c      	mov	r4, r1
 8014f80:	469a      	mov	sl, r3
 8014f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f86:	d807      	bhi.n	8014f98 <_printf_i+0x28>
 8014f88:	2f62      	cmp	r7, #98	; 0x62
 8014f8a:	d80a      	bhi.n	8014fa2 <_printf_i+0x32>
 8014f8c:	2f00      	cmp	r7, #0
 8014f8e:	f000 80d8 	beq.w	8015142 <_printf_i+0x1d2>
 8014f92:	2f58      	cmp	r7, #88	; 0x58
 8014f94:	f000 80a3 	beq.w	80150de <_printf_i+0x16e>
 8014f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fa0:	e03a      	b.n	8015018 <_printf_i+0xa8>
 8014fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fa6:	2b15      	cmp	r3, #21
 8014fa8:	d8f6      	bhi.n	8014f98 <_printf_i+0x28>
 8014faa:	a101      	add	r1, pc, #4	; (adr r1, 8014fb0 <_printf_i+0x40>)
 8014fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014fb0:	08015009 	.word	0x08015009
 8014fb4:	0801501d 	.word	0x0801501d
 8014fb8:	08014f99 	.word	0x08014f99
 8014fbc:	08014f99 	.word	0x08014f99
 8014fc0:	08014f99 	.word	0x08014f99
 8014fc4:	08014f99 	.word	0x08014f99
 8014fc8:	0801501d 	.word	0x0801501d
 8014fcc:	08014f99 	.word	0x08014f99
 8014fd0:	08014f99 	.word	0x08014f99
 8014fd4:	08014f99 	.word	0x08014f99
 8014fd8:	08014f99 	.word	0x08014f99
 8014fdc:	08015129 	.word	0x08015129
 8014fe0:	0801504d 	.word	0x0801504d
 8014fe4:	0801510b 	.word	0x0801510b
 8014fe8:	08014f99 	.word	0x08014f99
 8014fec:	08014f99 	.word	0x08014f99
 8014ff0:	0801514b 	.word	0x0801514b
 8014ff4:	08014f99 	.word	0x08014f99
 8014ff8:	0801504d 	.word	0x0801504d
 8014ffc:	08014f99 	.word	0x08014f99
 8015000:	08014f99 	.word	0x08014f99
 8015004:	08015113 	.word	0x08015113
 8015008:	682b      	ldr	r3, [r5, #0]
 801500a:	1d1a      	adds	r2, r3, #4
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	602a      	str	r2, [r5, #0]
 8015010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015018:	2301      	movs	r3, #1
 801501a:	e0a3      	b.n	8015164 <_printf_i+0x1f4>
 801501c:	6820      	ldr	r0, [r4, #0]
 801501e:	6829      	ldr	r1, [r5, #0]
 8015020:	0606      	lsls	r6, r0, #24
 8015022:	f101 0304 	add.w	r3, r1, #4
 8015026:	d50a      	bpl.n	801503e <_printf_i+0xce>
 8015028:	680e      	ldr	r6, [r1, #0]
 801502a:	602b      	str	r3, [r5, #0]
 801502c:	2e00      	cmp	r6, #0
 801502e:	da03      	bge.n	8015038 <_printf_i+0xc8>
 8015030:	232d      	movs	r3, #45	; 0x2d
 8015032:	4276      	negs	r6, r6
 8015034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015038:	485e      	ldr	r0, [pc, #376]	; (80151b4 <_printf_i+0x244>)
 801503a:	230a      	movs	r3, #10
 801503c:	e019      	b.n	8015072 <_printf_i+0x102>
 801503e:	680e      	ldr	r6, [r1, #0]
 8015040:	602b      	str	r3, [r5, #0]
 8015042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015046:	bf18      	it	ne
 8015048:	b236      	sxthne	r6, r6
 801504a:	e7ef      	b.n	801502c <_printf_i+0xbc>
 801504c:	682b      	ldr	r3, [r5, #0]
 801504e:	6820      	ldr	r0, [r4, #0]
 8015050:	1d19      	adds	r1, r3, #4
 8015052:	6029      	str	r1, [r5, #0]
 8015054:	0601      	lsls	r1, r0, #24
 8015056:	d501      	bpl.n	801505c <_printf_i+0xec>
 8015058:	681e      	ldr	r6, [r3, #0]
 801505a:	e002      	b.n	8015062 <_printf_i+0xf2>
 801505c:	0646      	lsls	r6, r0, #25
 801505e:	d5fb      	bpl.n	8015058 <_printf_i+0xe8>
 8015060:	881e      	ldrh	r6, [r3, #0]
 8015062:	4854      	ldr	r0, [pc, #336]	; (80151b4 <_printf_i+0x244>)
 8015064:	2f6f      	cmp	r7, #111	; 0x6f
 8015066:	bf0c      	ite	eq
 8015068:	2308      	moveq	r3, #8
 801506a:	230a      	movne	r3, #10
 801506c:	2100      	movs	r1, #0
 801506e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015072:	6865      	ldr	r5, [r4, #4]
 8015074:	60a5      	str	r5, [r4, #8]
 8015076:	2d00      	cmp	r5, #0
 8015078:	bfa2      	ittt	ge
 801507a:	6821      	ldrge	r1, [r4, #0]
 801507c:	f021 0104 	bicge.w	r1, r1, #4
 8015080:	6021      	strge	r1, [r4, #0]
 8015082:	b90e      	cbnz	r6, 8015088 <_printf_i+0x118>
 8015084:	2d00      	cmp	r5, #0
 8015086:	d04d      	beq.n	8015124 <_printf_i+0x1b4>
 8015088:	4615      	mov	r5, r2
 801508a:	fbb6 f1f3 	udiv	r1, r6, r3
 801508e:	fb03 6711 	mls	r7, r3, r1, r6
 8015092:	5dc7      	ldrb	r7, [r0, r7]
 8015094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015098:	4637      	mov	r7, r6
 801509a:	42bb      	cmp	r3, r7
 801509c:	460e      	mov	r6, r1
 801509e:	d9f4      	bls.n	801508a <_printf_i+0x11a>
 80150a0:	2b08      	cmp	r3, #8
 80150a2:	d10b      	bne.n	80150bc <_printf_i+0x14c>
 80150a4:	6823      	ldr	r3, [r4, #0]
 80150a6:	07de      	lsls	r6, r3, #31
 80150a8:	d508      	bpl.n	80150bc <_printf_i+0x14c>
 80150aa:	6923      	ldr	r3, [r4, #16]
 80150ac:	6861      	ldr	r1, [r4, #4]
 80150ae:	4299      	cmp	r1, r3
 80150b0:	bfde      	ittt	le
 80150b2:	2330      	movle	r3, #48	; 0x30
 80150b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80150bc:	1b52      	subs	r2, r2, r5
 80150be:	6122      	str	r2, [r4, #16]
 80150c0:	f8cd a000 	str.w	sl, [sp]
 80150c4:	464b      	mov	r3, r9
 80150c6:	aa03      	add	r2, sp, #12
 80150c8:	4621      	mov	r1, r4
 80150ca:	4640      	mov	r0, r8
 80150cc:	f7ff fee2 	bl	8014e94 <_printf_common>
 80150d0:	3001      	adds	r0, #1
 80150d2:	d14c      	bne.n	801516e <_printf_i+0x1fe>
 80150d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d8:	b004      	add	sp, #16
 80150da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150de:	4835      	ldr	r0, [pc, #212]	; (80151b4 <_printf_i+0x244>)
 80150e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80150e4:	6829      	ldr	r1, [r5, #0]
 80150e6:	6823      	ldr	r3, [r4, #0]
 80150e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80150ec:	6029      	str	r1, [r5, #0]
 80150ee:	061d      	lsls	r5, r3, #24
 80150f0:	d514      	bpl.n	801511c <_printf_i+0x1ac>
 80150f2:	07df      	lsls	r7, r3, #31
 80150f4:	bf44      	itt	mi
 80150f6:	f043 0320 	orrmi.w	r3, r3, #32
 80150fa:	6023      	strmi	r3, [r4, #0]
 80150fc:	b91e      	cbnz	r6, 8015106 <_printf_i+0x196>
 80150fe:	6823      	ldr	r3, [r4, #0]
 8015100:	f023 0320 	bic.w	r3, r3, #32
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	2310      	movs	r3, #16
 8015108:	e7b0      	b.n	801506c <_printf_i+0xfc>
 801510a:	6823      	ldr	r3, [r4, #0]
 801510c:	f043 0320 	orr.w	r3, r3, #32
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	2378      	movs	r3, #120	; 0x78
 8015114:	4828      	ldr	r0, [pc, #160]	; (80151b8 <_printf_i+0x248>)
 8015116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801511a:	e7e3      	b.n	80150e4 <_printf_i+0x174>
 801511c:	0659      	lsls	r1, r3, #25
 801511e:	bf48      	it	mi
 8015120:	b2b6      	uxthmi	r6, r6
 8015122:	e7e6      	b.n	80150f2 <_printf_i+0x182>
 8015124:	4615      	mov	r5, r2
 8015126:	e7bb      	b.n	80150a0 <_printf_i+0x130>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	6826      	ldr	r6, [r4, #0]
 801512c:	6961      	ldr	r1, [r4, #20]
 801512e:	1d18      	adds	r0, r3, #4
 8015130:	6028      	str	r0, [r5, #0]
 8015132:	0635      	lsls	r5, r6, #24
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	d501      	bpl.n	801513c <_printf_i+0x1cc>
 8015138:	6019      	str	r1, [r3, #0]
 801513a:	e002      	b.n	8015142 <_printf_i+0x1d2>
 801513c:	0670      	lsls	r0, r6, #25
 801513e:	d5fb      	bpl.n	8015138 <_printf_i+0x1c8>
 8015140:	8019      	strh	r1, [r3, #0]
 8015142:	2300      	movs	r3, #0
 8015144:	6123      	str	r3, [r4, #16]
 8015146:	4615      	mov	r5, r2
 8015148:	e7ba      	b.n	80150c0 <_printf_i+0x150>
 801514a:	682b      	ldr	r3, [r5, #0]
 801514c:	1d1a      	adds	r2, r3, #4
 801514e:	602a      	str	r2, [r5, #0]
 8015150:	681d      	ldr	r5, [r3, #0]
 8015152:	6862      	ldr	r2, [r4, #4]
 8015154:	2100      	movs	r1, #0
 8015156:	4628      	mov	r0, r5
 8015158:	f7eb f85a 	bl	8000210 <memchr>
 801515c:	b108      	cbz	r0, 8015162 <_printf_i+0x1f2>
 801515e:	1b40      	subs	r0, r0, r5
 8015160:	6060      	str	r0, [r4, #4]
 8015162:	6863      	ldr	r3, [r4, #4]
 8015164:	6123      	str	r3, [r4, #16]
 8015166:	2300      	movs	r3, #0
 8015168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801516c:	e7a8      	b.n	80150c0 <_printf_i+0x150>
 801516e:	6923      	ldr	r3, [r4, #16]
 8015170:	462a      	mov	r2, r5
 8015172:	4649      	mov	r1, r9
 8015174:	4640      	mov	r0, r8
 8015176:	47d0      	blx	sl
 8015178:	3001      	adds	r0, #1
 801517a:	d0ab      	beq.n	80150d4 <_printf_i+0x164>
 801517c:	6823      	ldr	r3, [r4, #0]
 801517e:	079b      	lsls	r3, r3, #30
 8015180:	d413      	bmi.n	80151aa <_printf_i+0x23a>
 8015182:	68e0      	ldr	r0, [r4, #12]
 8015184:	9b03      	ldr	r3, [sp, #12]
 8015186:	4298      	cmp	r0, r3
 8015188:	bfb8      	it	lt
 801518a:	4618      	movlt	r0, r3
 801518c:	e7a4      	b.n	80150d8 <_printf_i+0x168>
 801518e:	2301      	movs	r3, #1
 8015190:	4632      	mov	r2, r6
 8015192:	4649      	mov	r1, r9
 8015194:	4640      	mov	r0, r8
 8015196:	47d0      	blx	sl
 8015198:	3001      	adds	r0, #1
 801519a:	d09b      	beq.n	80150d4 <_printf_i+0x164>
 801519c:	3501      	adds	r5, #1
 801519e:	68e3      	ldr	r3, [r4, #12]
 80151a0:	9903      	ldr	r1, [sp, #12]
 80151a2:	1a5b      	subs	r3, r3, r1
 80151a4:	42ab      	cmp	r3, r5
 80151a6:	dcf2      	bgt.n	801518e <_printf_i+0x21e>
 80151a8:	e7eb      	b.n	8015182 <_printf_i+0x212>
 80151aa:	2500      	movs	r5, #0
 80151ac:	f104 0619 	add.w	r6, r4, #25
 80151b0:	e7f5      	b.n	801519e <_printf_i+0x22e>
 80151b2:	bf00      	nop
 80151b4:	0801799e 	.word	0x0801799e
 80151b8:	080179af 	.word	0x080179af

080151bc <iprintf>:
 80151bc:	b40f      	push	{r0, r1, r2, r3}
 80151be:	4b0a      	ldr	r3, [pc, #40]	; (80151e8 <iprintf+0x2c>)
 80151c0:	b513      	push	{r0, r1, r4, lr}
 80151c2:	681c      	ldr	r4, [r3, #0]
 80151c4:	b124      	cbz	r4, 80151d0 <iprintf+0x14>
 80151c6:	69a3      	ldr	r3, [r4, #24]
 80151c8:	b913      	cbnz	r3, 80151d0 <iprintf+0x14>
 80151ca:	4620      	mov	r0, r4
 80151cc:	f000 ff2e 	bl	801602c <__sinit>
 80151d0:	ab05      	add	r3, sp, #20
 80151d2:	9a04      	ldr	r2, [sp, #16]
 80151d4:	68a1      	ldr	r1, [r4, #8]
 80151d6:	9301      	str	r3, [sp, #4]
 80151d8:	4620      	mov	r0, r4
 80151da:	f001 fd1d 	bl	8016c18 <_vfiprintf_r>
 80151de:	b002      	add	sp, #8
 80151e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151e4:	b004      	add	sp, #16
 80151e6:	4770      	bx	lr
 80151e8:	20000184 	.word	0x20000184

080151ec <_sbrk_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	4d06      	ldr	r5, [pc, #24]	; (8015208 <_sbrk_r+0x1c>)
 80151f0:	2300      	movs	r3, #0
 80151f2:	4604      	mov	r4, r0
 80151f4:	4608      	mov	r0, r1
 80151f6:	602b      	str	r3, [r5, #0]
 80151f8:	f002 f9b6 	bl	8017568 <_sbrk>
 80151fc:	1c43      	adds	r3, r0, #1
 80151fe:	d102      	bne.n	8015206 <_sbrk_r+0x1a>
 8015200:	682b      	ldr	r3, [r5, #0]
 8015202:	b103      	cbz	r3, 8015206 <_sbrk_r+0x1a>
 8015204:	6023      	str	r3, [r4, #0]
 8015206:	bd38      	pop	{r3, r4, r5, pc}
 8015208:	20002f68 	.word	0x20002f68

0801520c <siprintf>:
 801520c:	b40e      	push	{r1, r2, r3}
 801520e:	b500      	push	{lr}
 8015210:	b09c      	sub	sp, #112	; 0x70
 8015212:	ab1d      	add	r3, sp, #116	; 0x74
 8015214:	9002      	str	r0, [sp, #8]
 8015216:	9006      	str	r0, [sp, #24]
 8015218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801521c:	4809      	ldr	r0, [pc, #36]	; (8015244 <siprintf+0x38>)
 801521e:	9107      	str	r1, [sp, #28]
 8015220:	9104      	str	r1, [sp, #16]
 8015222:	4909      	ldr	r1, [pc, #36]	; (8015248 <siprintf+0x3c>)
 8015224:	f853 2b04 	ldr.w	r2, [r3], #4
 8015228:	9105      	str	r1, [sp, #20]
 801522a:	6800      	ldr	r0, [r0, #0]
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	a902      	add	r1, sp, #8
 8015230:	f001 fbc8 	bl	80169c4 <_svfiprintf_r>
 8015234:	9b02      	ldr	r3, [sp, #8]
 8015236:	2200      	movs	r2, #0
 8015238:	701a      	strb	r2, [r3, #0]
 801523a:	b01c      	add	sp, #112	; 0x70
 801523c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015240:	b003      	add	sp, #12
 8015242:	4770      	bx	lr
 8015244:	20000184 	.word	0x20000184
 8015248:	ffff0208 	.word	0xffff0208

0801524c <__assert_func>:
 801524c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801524e:	4614      	mov	r4, r2
 8015250:	461a      	mov	r2, r3
 8015252:	4b09      	ldr	r3, [pc, #36]	; (8015278 <__assert_func+0x2c>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	4605      	mov	r5, r0
 8015258:	68d8      	ldr	r0, [r3, #12]
 801525a:	b14c      	cbz	r4, 8015270 <__assert_func+0x24>
 801525c:	4b07      	ldr	r3, [pc, #28]	; (801527c <__assert_func+0x30>)
 801525e:	9100      	str	r1, [sp, #0]
 8015260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015264:	4906      	ldr	r1, [pc, #24]	; (8015280 <__assert_func+0x34>)
 8015266:	462b      	mov	r3, r5
 8015268:	f000 ff5e 	bl	8016128 <fiprintf>
 801526c:	f001 ff28 	bl	80170c0 <abort>
 8015270:	4b04      	ldr	r3, [pc, #16]	; (8015284 <__assert_func+0x38>)
 8015272:	461c      	mov	r4, r3
 8015274:	e7f3      	b.n	801525e <__assert_func+0x12>
 8015276:	bf00      	nop
 8015278:	20000184 	.word	0x20000184
 801527c:	080179c0 	.word	0x080179c0
 8015280:	080179cd 	.word	0x080179cd
 8015284:	080179fb 	.word	0x080179fb

08015288 <quorem>:
 8015288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801528c:	6903      	ldr	r3, [r0, #16]
 801528e:	690c      	ldr	r4, [r1, #16]
 8015290:	42a3      	cmp	r3, r4
 8015292:	4607      	mov	r7, r0
 8015294:	f2c0 8081 	blt.w	801539a <quorem+0x112>
 8015298:	3c01      	subs	r4, #1
 801529a:	f101 0814 	add.w	r8, r1, #20
 801529e:	f100 0514 	add.w	r5, r0, #20
 80152a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80152ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80152b0:	3301      	adds	r3, #1
 80152b2:	429a      	cmp	r2, r3
 80152b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80152b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80152bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80152c0:	d331      	bcc.n	8015326 <quorem+0x9e>
 80152c2:	f04f 0e00 	mov.w	lr, #0
 80152c6:	4640      	mov	r0, r8
 80152c8:	46ac      	mov	ip, r5
 80152ca:	46f2      	mov	sl, lr
 80152cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80152d0:	b293      	uxth	r3, r2
 80152d2:	fb06 e303 	mla	r3, r6, r3, lr
 80152d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80152da:	b29b      	uxth	r3, r3
 80152dc:	ebaa 0303 	sub.w	r3, sl, r3
 80152e0:	f8dc a000 	ldr.w	sl, [ip]
 80152e4:	0c12      	lsrs	r2, r2, #16
 80152e6:	fa13 f38a 	uxtah	r3, r3, sl
 80152ea:	fb06 e202 	mla	r2, r6, r2, lr
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	9b00      	ldr	r3, [sp, #0]
 80152f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80152f6:	b292      	uxth	r2, r2
 80152f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80152fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015300:	f8bd 3000 	ldrh.w	r3, [sp]
 8015304:	4581      	cmp	r9, r0
 8015306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801530a:	f84c 3b04 	str.w	r3, [ip], #4
 801530e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015312:	d2db      	bcs.n	80152cc <quorem+0x44>
 8015314:	f855 300b 	ldr.w	r3, [r5, fp]
 8015318:	b92b      	cbnz	r3, 8015326 <quorem+0x9e>
 801531a:	9b01      	ldr	r3, [sp, #4]
 801531c:	3b04      	subs	r3, #4
 801531e:	429d      	cmp	r5, r3
 8015320:	461a      	mov	r2, r3
 8015322:	d32e      	bcc.n	8015382 <quorem+0xfa>
 8015324:	613c      	str	r4, [r7, #16]
 8015326:	4638      	mov	r0, r7
 8015328:	f001 f9d8 	bl	80166dc <__mcmp>
 801532c:	2800      	cmp	r0, #0
 801532e:	db24      	blt.n	801537a <quorem+0xf2>
 8015330:	3601      	adds	r6, #1
 8015332:	4628      	mov	r0, r5
 8015334:	f04f 0c00 	mov.w	ip, #0
 8015338:	f858 2b04 	ldr.w	r2, [r8], #4
 801533c:	f8d0 e000 	ldr.w	lr, [r0]
 8015340:	b293      	uxth	r3, r2
 8015342:	ebac 0303 	sub.w	r3, ip, r3
 8015346:	0c12      	lsrs	r2, r2, #16
 8015348:	fa13 f38e 	uxtah	r3, r3, lr
 801534c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015354:	b29b      	uxth	r3, r3
 8015356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801535a:	45c1      	cmp	r9, r8
 801535c:	f840 3b04 	str.w	r3, [r0], #4
 8015360:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015364:	d2e8      	bcs.n	8015338 <quorem+0xb0>
 8015366:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801536a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801536e:	b922      	cbnz	r2, 801537a <quorem+0xf2>
 8015370:	3b04      	subs	r3, #4
 8015372:	429d      	cmp	r5, r3
 8015374:	461a      	mov	r2, r3
 8015376:	d30a      	bcc.n	801538e <quorem+0x106>
 8015378:	613c      	str	r4, [r7, #16]
 801537a:	4630      	mov	r0, r6
 801537c:	b003      	add	sp, #12
 801537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015382:	6812      	ldr	r2, [r2, #0]
 8015384:	3b04      	subs	r3, #4
 8015386:	2a00      	cmp	r2, #0
 8015388:	d1cc      	bne.n	8015324 <quorem+0x9c>
 801538a:	3c01      	subs	r4, #1
 801538c:	e7c7      	b.n	801531e <quorem+0x96>
 801538e:	6812      	ldr	r2, [r2, #0]
 8015390:	3b04      	subs	r3, #4
 8015392:	2a00      	cmp	r2, #0
 8015394:	d1f0      	bne.n	8015378 <quorem+0xf0>
 8015396:	3c01      	subs	r4, #1
 8015398:	e7eb      	b.n	8015372 <quorem+0xea>
 801539a:	2000      	movs	r0, #0
 801539c:	e7ee      	b.n	801537c <quorem+0xf4>
	...

080153a0 <_dtoa_r>:
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	ed2d 8b04 	vpush	{d8-d9}
 80153a8:	ec57 6b10 	vmov	r6, r7, d0
 80153ac:	b093      	sub	sp, #76	; 0x4c
 80153ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80153b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80153b4:	9106      	str	r1, [sp, #24]
 80153b6:	ee10 aa10 	vmov	sl, s0
 80153ba:	4604      	mov	r4, r0
 80153bc:	9209      	str	r2, [sp, #36]	; 0x24
 80153be:	930c      	str	r3, [sp, #48]	; 0x30
 80153c0:	46bb      	mov	fp, r7
 80153c2:	b975      	cbnz	r5, 80153e2 <_dtoa_r+0x42>
 80153c4:	2010      	movs	r0, #16
 80153c6:	f7ff f991 	bl	80146ec <malloc>
 80153ca:	4602      	mov	r2, r0
 80153cc:	6260      	str	r0, [r4, #36]	; 0x24
 80153ce:	b920      	cbnz	r0, 80153da <_dtoa_r+0x3a>
 80153d0:	4ba7      	ldr	r3, [pc, #668]	; (8015670 <_dtoa_r+0x2d0>)
 80153d2:	21ea      	movs	r1, #234	; 0xea
 80153d4:	48a7      	ldr	r0, [pc, #668]	; (8015674 <_dtoa_r+0x2d4>)
 80153d6:	f7ff ff39 	bl	801524c <__assert_func>
 80153da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80153de:	6005      	str	r5, [r0, #0]
 80153e0:	60c5      	str	r5, [r0, #12]
 80153e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153e4:	6819      	ldr	r1, [r3, #0]
 80153e6:	b151      	cbz	r1, 80153fe <_dtoa_r+0x5e>
 80153e8:	685a      	ldr	r2, [r3, #4]
 80153ea:	604a      	str	r2, [r1, #4]
 80153ec:	2301      	movs	r3, #1
 80153ee:	4093      	lsls	r3, r2
 80153f0:	608b      	str	r3, [r1, #8]
 80153f2:	4620      	mov	r0, r4
 80153f4:	f000 ff30 	bl	8016258 <_Bfree>
 80153f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153fa:	2200      	movs	r2, #0
 80153fc:	601a      	str	r2, [r3, #0]
 80153fe:	1e3b      	subs	r3, r7, #0
 8015400:	bfaa      	itet	ge
 8015402:	2300      	movge	r3, #0
 8015404:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015408:	f8c8 3000 	strge.w	r3, [r8]
 801540c:	4b9a      	ldr	r3, [pc, #616]	; (8015678 <_dtoa_r+0x2d8>)
 801540e:	bfbc      	itt	lt
 8015410:	2201      	movlt	r2, #1
 8015412:	f8c8 2000 	strlt.w	r2, [r8]
 8015416:	ea33 030b 	bics.w	r3, r3, fp
 801541a:	d11b      	bne.n	8015454 <_dtoa_r+0xb4>
 801541c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801541e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015422:	6013      	str	r3, [r2, #0]
 8015424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015428:	4333      	orrs	r3, r6
 801542a:	f000 8592 	beq.w	8015f52 <_dtoa_r+0xbb2>
 801542e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015430:	b963      	cbnz	r3, 801544c <_dtoa_r+0xac>
 8015432:	4b92      	ldr	r3, [pc, #584]	; (801567c <_dtoa_r+0x2dc>)
 8015434:	e022      	b.n	801547c <_dtoa_r+0xdc>
 8015436:	4b92      	ldr	r3, [pc, #584]	; (8015680 <_dtoa_r+0x2e0>)
 8015438:	9301      	str	r3, [sp, #4]
 801543a:	3308      	adds	r3, #8
 801543c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801543e:	6013      	str	r3, [r2, #0]
 8015440:	9801      	ldr	r0, [sp, #4]
 8015442:	b013      	add	sp, #76	; 0x4c
 8015444:	ecbd 8b04 	vpop	{d8-d9}
 8015448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544c:	4b8b      	ldr	r3, [pc, #556]	; (801567c <_dtoa_r+0x2dc>)
 801544e:	9301      	str	r3, [sp, #4]
 8015450:	3303      	adds	r3, #3
 8015452:	e7f3      	b.n	801543c <_dtoa_r+0x9c>
 8015454:	2200      	movs	r2, #0
 8015456:	2300      	movs	r3, #0
 8015458:	4650      	mov	r0, sl
 801545a:	4659      	mov	r1, fp
 801545c:	f7eb fb4c 	bl	8000af8 <__aeabi_dcmpeq>
 8015460:	ec4b ab19 	vmov	d9, sl, fp
 8015464:	4680      	mov	r8, r0
 8015466:	b158      	cbz	r0, 8015480 <_dtoa_r+0xe0>
 8015468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801546a:	2301      	movs	r3, #1
 801546c:	6013      	str	r3, [r2, #0]
 801546e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015470:	2b00      	cmp	r3, #0
 8015472:	f000 856b 	beq.w	8015f4c <_dtoa_r+0xbac>
 8015476:	4883      	ldr	r0, [pc, #524]	; (8015684 <_dtoa_r+0x2e4>)
 8015478:	6018      	str	r0, [r3, #0]
 801547a:	1e43      	subs	r3, r0, #1
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	e7df      	b.n	8015440 <_dtoa_r+0xa0>
 8015480:	ec4b ab10 	vmov	d0, sl, fp
 8015484:	aa10      	add	r2, sp, #64	; 0x40
 8015486:	a911      	add	r1, sp, #68	; 0x44
 8015488:	4620      	mov	r0, r4
 801548a:	f001 f9cd 	bl	8016828 <__d2b>
 801548e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015492:	ee08 0a10 	vmov	s16, r0
 8015496:	2d00      	cmp	r5, #0
 8015498:	f000 8084 	beq.w	80155a4 <_dtoa_r+0x204>
 801549c:	ee19 3a90 	vmov	r3, s19
 80154a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80154a8:	4656      	mov	r6, sl
 80154aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80154ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80154b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80154b6:	4b74      	ldr	r3, [pc, #464]	; (8015688 <_dtoa_r+0x2e8>)
 80154b8:	2200      	movs	r2, #0
 80154ba:	4630      	mov	r0, r6
 80154bc:	4639      	mov	r1, r7
 80154be:	f7ea fefb 	bl	80002b8 <__aeabi_dsub>
 80154c2:	a365      	add	r3, pc, #404	; (adr r3, 8015658 <_dtoa_r+0x2b8>)
 80154c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c8:	f7eb f8ae 	bl	8000628 <__aeabi_dmul>
 80154cc:	a364      	add	r3, pc, #400	; (adr r3, 8015660 <_dtoa_r+0x2c0>)
 80154ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d2:	f7ea fef3 	bl	80002bc <__adddf3>
 80154d6:	4606      	mov	r6, r0
 80154d8:	4628      	mov	r0, r5
 80154da:	460f      	mov	r7, r1
 80154dc:	f7eb f83a 	bl	8000554 <__aeabi_i2d>
 80154e0:	a361      	add	r3, pc, #388	; (adr r3, 8015668 <_dtoa_r+0x2c8>)
 80154e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e6:	f7eb f89f 	bl	8000628 <__aeabi_dmul>
 80154ea:	4602      	mov	r2, r0
 80154ec:	460b      	mov	r3, r1
 80154ee:	4630      	mov	r0, r6
 80154f0:	4639      	mov	r1, r7
 80154f2:	f7ea fee3 	bl	80002bc <__adddf3>
 80154f6:	4606      	mov	r6, r0
 80154f8:	460f      	mov	r7, r1
 80154fa:	f7eb fb45 	bl	8000b88 <__aeabi_d2iz>
 80154fe:	2200      	movs	r2, #0
 8015500:	9000      	str	r0, [sp, #0]
 8015502:	2300      	movs	r3, #0
 8015504:	4630      	mov	r0, r6
 8015506:	4639      	mov	r1, r7
 8015508:	f7eb fb00 	bl	8000b0c <__aeabi_dcmplt>
 801550c:	b150      	cbz	r0, 8015524 <_dtoa_r+0x184>
 801550e:	9800      	ldr	r0, [sp, #0]
 8015510:	f7eb f820 	bl	8000554 <__aeabi_i2d>
 8015514:	4632      	mov	r2, r6
 8015516:	463b      	mov	r3, r7
 8015518:	f7eb faee 	bl	8000af8 <__aeabi_dcmpeq>
 801551c:	b910      	cbnz	r0, 8015524 <_dtoa_r+0x184>
 801551e:	9b00      	ldr	r3, [sp, #0]
 8015520:	3b01      	subs	r3, #1
 8015522:	9300      	str	r3, [sp, #0]
 8015524:	9b00      	ldr	r3, [sp, #0]
 8015526:	2b16      	cmp	r3, #22
 8015528:	d85a      	bhi.n	80155e0 <_dtoa_r+0x240>
 801552a:	9a00      	ldr	r2, [sp, #0]
 801552c:	4b57      	ldr	r3, [pc, #348]	; (801568c <_dtoa_r+0x2ec>)
 801552e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015536:	ec51 0b19 	vmov	r0, r1, d9
 801553a:	f7eb fae7 	bl	8000b0c <__aeabi_dcmplt>
 801553e:	2800      	cmp	r0, #0
 8015540:	d050      	beq.n	80155e4 <_dtoa_r+0x244>
 8015542:	9b00      	ldr	r3, [sp, #0]
 8015544:	3b01      	subs	r3, #1
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	2300      	movs	r3, #0
 801554a:	930b      	str	r3, [sp, #44]	; 0x2c
 801554c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801554e:	1b5d      	subs	r5, r3, r5
 8015550:	1e6b      	subs	r3, r5, #1
 8015552:	9305      	str	r3, [sp, #20]
 8015554:	bf45      	ittet	mi
 8015556:	f1c5 0301 	rsbmi	r3, r5, #1
 801555a:	9304      	strmi	r3, [sp, #16]
 801555c:	2300      	movpl	r3, #0
 801555e:	2300      	movmi	r3, #0
 8015560:	bf4c      	ite	mi
 8015562:	9305      	strmi	r3, [sp, #20]
 8015564:	9304      	strpl	r3, [sp, #16]
 8015566:	9b00      	ldr	r3, [sp, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	db3d      	blt.n	80155e8 <_dtoa_r+0x248>
 801556c:	9b05      	ldr	r3, [sp, #20]
 801556e:	9a00      	ldr	r2, [sp, #0]
 8015570:	920a      	str	r2, [sp, #40]	; 0x28
 8015572:	4413      	add	r3, r2
 8015574:	9305      	str	r3, [sp, #20]
 8015576:	2300      	movs	r3, #0
 8015578:	9307      	str	r3, [sp, #28]
 801557a:	9b06      	ldr	r3, [sp, #24]
 801557c:	2b09      	cmp	r3, #9
 801557e:	f200 8089 	bhi.w	8015694 <_dtoa_r+0x2f4>
 8015582:	2b05      	cmp	r3, #5
 8015584:	bfc4      	itt	gt
 8015586:	3b04      	subgt	r3, #4
 8015588:	9306      	strgt	r3, [sp, #24]
 801558a:	9b06      	ldr	r3, [sp, #24]
 801558c:	f1a3 0302 	sub.w	r3, r3, #2
 8015590:	bfcc      	ite	gt
 8015592:	2500      	movgt	r5, #0
 8015594:	2501      	movle	r5, #1
 8015596:	2b03      	cmp	r3, #3
 8015598:	f200 8087 	bhi.w	80156aa <_dtoa_r+0x30a>
 801559c:	e8df f003 	tbb	[pc, r3]
 80155a0:	59383a2d 	.word	0x59383a2d
 80155a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80155a8:	441d      	add	r5, r3
 80155aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80155ae:	2b20      	cmp	r3, #32
 80155b0:	bfc1      	itttt	gt
 80155b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80155b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80155ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80155be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80155c2:	bfda      	itte	le
 80155c4:	f1c3 0320 	rsble	r3, r3, #32
 80155c8:	fa06 f003 	lslle.w	r0, r6, r3
 80155cc:	4318      	orrgt	r0, r3
 80155ce:	f7ea ffb1 	bl	8000534 <__aeabi_ui2d>
 80155d2:	2301      	movs	r3, #1
 80155d4:	4606      	mov	r6, r0
 80155d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80155da:	3d01      	subs	r5, #1
 80155dc:	930e      	str	r3, [sp, #56]	; 0x38
 80155de:	e76a      	b.n	80154b6 <_dtoa_r+0x116>
 80155e0:	2301      	movs	r3, #1
 80155e2:	e7b2      	b.n	801554a <_dtoa_r+0x1aa>
 80155e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80155e6:	e7b1      	b.n	801554c <_dtoa_r+0x1ac>
 80155e8:	9b04      	ldr	r3, [sp, #16]
 80155ea:	9a00      	ldr	r2, [sp, #0]
 80155ec:	1a9b      	subs	r3, r3, r2
 80155ee:	9304      	str	r3, [sp, #16]
 80155f0:	4253      	negs	r3, r2
 80155f2:	9307      	str	r3, [sp, #28]
 80155f4:	2300      	movs	r3, #0
 80155f6:	930a      	str	r3, [sp, #40]	; 0x28
 80155f8:	e7bf      	b.n	801557a <_dtoa_r+0x1da>
 80155fa:	2300      	movs	r3, #0
 80155fc:	9308      	str	r3, [sp, #32]
 80155fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015600:	2b00      	cmp	r3, #0
 8015602:	dc55      	bgt.n	80156b0 <_dtoa_r+0x310>
 8015604:	2301      	movs	r3, #1
 8015606:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801560a:	461a      	mov	r2, r3
 801560c:	9209      	str	r2, [sp, #36]	; 0x24
 801560e:	e00c      	b.n	801562a <_dtoa_r+0x28a>
 8015610:	2301      	movs	r3, #1
 8015612:	e7f3      	b.n	80155fc <_dtoa_r+0x25c>
 8015614:	2300      	movs	r3, #0
 8015616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015618:	9308      	str	r3, [sp, #32]
 801561a:	9b00      	ldr	r3, [sp, #0]
 801561c:	4413      	add	r3, r2
 801561e:	9302      	str	r3, [sp, #8]
 8015620:	3301      	adds	r3, #1
 8015622:	2b01      	cmp	r3, #1
 8015624:	9303      	str	r3, [sp, #12]
 8015626:	bfb8      	it	lt
 8015628:	2301      	movlt	r3, #1
 801562a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801562c:	2200      	movs	r2, #0
 801562e:	6042      	str	r2, [r0, #4]
 8015630:	2204      	movs	r2, #4
 8015632:	f102 0614 	add.w	r6, r2, #20
 8015636:	429e      	cmp	r6, r3
 8015638:	6841      	ldr	r1, [r0, #4]
 801563a:	d93d      	bls.n	80156b8 <_dtoa_r+0x318>
 801563c:	4620      	mov	r0, r4
 801563e:	f000 fdcb 	bl	80161d8 <_Balloc>
 8015642:	9001      	str	r0, [sp, #4]
 8015644:	2800      	cmp	r0, #0
 8015646:	d13b      	bne.n	80156c0 <_dtoa_r+0x320>
 8015648:	4b11      	ldr	r3, [pc, #68]	; (8015690 <_dtoa_r+0x2f0>)
 801564a:	4602      	mov	r2, r0
 801564c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015650:	e6c0      	b.n	80153d4 <_dtoa_r+0x34>
 8015652:	2301      	movs	r3, #1
 8015654:	e7df      	b.n	8015616 <_dtoa_r+0x276>
 8015656:	bf00      	nop
 8015658:	636f4361 	.word	0x636f4361
 801565c:	3fd287a7 	.word	0x3fd287a7
 8015660:	8b60c8b3 	.word	0x8b60c8b3
 8015664:	3fc68a28 	.word	0x3fc68a28
 8015668:	509f79fb 	.word	0x509f79fb
 801566c:	3fd34413 	.word	0x3fd34413
 8015670:	08017b0a 	.word	0x08017b0a
 8015674:	08017b21 	.word	0x08017b21
 8015678:	7ff00000 	.word	0x7ff00000
 801567c:	08017b06 	.word	0x08017b06
 8015680:	08017afd 	.word	0x08017afd
 8015684:	0801799d 	.word	0x0801799d
 8015688:	3ff80000 	.word	0x3ff80000
 801568c:	08017c80 	.word	0x08017c80
 8015690:	08017b7c 	.word	0x08017b7c
 8015694:	2501      	movs	r5, #1
 8015696:	2300      	movs	r3, #0
 8015698:	9306      	str	r3, [sp, #24]
 801569a:	9508      	str	r5, [sp, #32]
 801569c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80156a4:	2200      	movs	r2, #0
 80156a6:	2312      	movs	r3, #18
 80156a8:	e7b0      	b.n	801560c <_dtoa_r+0x26c>
 80156aa:	2301      	movs	r3, #1
 80156ac:	9308      	str	r3, [sp, #32]
 80156ae:	e7f5      	b.n	801569c <_dtoa_r+0x2fc>
 80156b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80156b6:	e7b8      	b.n	801562a <_dtoa_r+0x28a>
 80156b8:	3101      	adds	r1, #1
 80156ba:	6041      	str	r1, [r0, #4]
 80156bc:	0052      	lsls	r2, r2, #1
 80156be:	e7b8      	b.n	8015632 <_dtoa_r+0x292>
 80156c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156c2:	9a01      	ldr	r2, [sp, #4]
 80156c4:	601a      	str	r2, [r3, #0]
 80156c6:	9b03      	ldr	r3, [sp, #12]
 80156c8:	2b0e      	cmp	r3, #14
 80156ca:	f200 809d 	bhi.w	8015808 <_dtoa_r+0x468>
 80156ce:	2d00      	cmp	r5, #0
 80156d0:	f000 809a 	beq.w	8015808 <_dtoa_r+0x468>
 80156d4:	9b00      	ldr	r3, [sp, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	dd32      	ble.n	8015740 <_dtoa_r+0x3a0>
 80156da:	4ab7      	ldr	r2, [pc, #732]	; (80159b8 <_dtoa_r+0x618>)
 80156dc:	f003 030f 	and.w	r3, r3, #15
 80156e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80156e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80156e8:	9b00      	ldr	r3, [sp, #0]
 80156ea:	05d8      	lsls	r0, r3, #23
 80156ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80156f0:	d516      	bpl.n	8015720 <_dtoa_r+0x380>
 80156f2:	4bb2      	ldr	r3, [pc, #712]	; (80159bc <_dtoa_r+0x61c>)
 80156f4:	ec51 0b19 	vmov	r0, r1, d9
 80156f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80156fc:	f7eb f8be 	bl	800087c <__aeabi_ddiv>
 8015700:	f007 070f 	and.w	r7, r7, #15
 8015704:	4682      	mov	sl, r0
 8015706:	468b      	mov	fp, r1
 8015708:	2503      	movs	r5, #3
 801570a:	4eac      	ldr	r6, [pc, #688]	; (80159bc <_dtoa_r+0x61c>)
 801570c:	b957      	cbnz	r7, 8015724 <_dtoa_r+0x384>
 801570e:	4642      	mov	r2, r8
 8015710:	464b      	mov	r3, r9
 8015712:	4650      	mov	r0, sl
 8015714:	4659      	mov	r1, fp
 8015716:	f7eb f8b1 	bl	800087c <__aeabi_ddiv>
 801571a:	4682      	mov	sl, r0
 801571c:	468b      	mov	fp, r1
 801571e:	e028      	b.n	8015772 <_dtoa_r+0x3d2>
 8015720:	2502      	movs	r5, #2
 8015722:	e7f2      	b.n	801570a <_dtoa_r+0x36a>
 8015724:	07f9      	lsls	r1, r7, #31
 8015726:	d508      	bpl.n	801573a <_dtoa_r+0x39a>
 8015728:	4640      	mov	r0, r8
 801572a:	4649      	mov	r1, r9
 801572c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015730:	f7ea ff7a 	bl	8000628 <__aeabi_dmul>
 8015734:	3501      	adds	r5, #1
 8015736:	4680      	mov	r8, r0
 8015738:	4689      	mov	r9, r1
 801573a:	107f      	asrs	r7, r7, #1
 801573c:	3608      	adds	r6, #8
 801573e:	e7e5      	b.n	801570c <_dtoa_r+0x36c>
 8015740:	f000 809b 	beq.w	801587a <_dtoa_r+0x4da>
 8015744:	9b00      	ldr	r3, [sp, #0]
 8015746:	4f9d      	ldr	r7, [pc, #628]	; (80159bc <_dtoa_r+0x61c>)
 8015748:	425e      	negs	r6, r3
 801574a:	4b9b      	ldr	r3, [pc, #620]	; (80159b8 <_dtoa_r+0x618>)
 801574c:	f006 020f 	and.w	r2, r6, #15
 8015750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015758:	ec51 0b19 	vmov	r0, r1, d9
 801575c:	f7ea ff64 	bl	8000628 <__aeabi_dmul>
 8015760:	1136      	asrs	r6, r6, #4
 8015762:	4682      	mov	sl, r0
 8015764:	468b      	mov	fp, r1
 8015766:	2300      	movs	r3, #0
 8015768:	2502      	movs	r5, #2
 801576a:	2e00      	cmp	r6, #0
 801576c:	d17a      	bne.n	8015864 <_dtoa_r+0x4c4>
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1d3      	bne.n	801571a <_dtoa_r+0x37a>
 8015772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 8082 	beq.w	801587e <_dtoa_r+0x4de>
 801577a:	4b91      	ldr	r3, [pc, #580]	; (80159c0 <_dtoa_r+0x620>)
 801577c:	2200      	movs	r2, #0
 801577e:	4650      	mov	r0, sl
 8015780:	4659      	mov	r1, fp
 8015782:	f7eb f9c3 	bl	8000b0c <__aeabi_dcmplt>
 8015786:	2800      	cmp	r0, #0
 8015788:	d079      	beq.n	801587e <_dtoa_r+0x4de>
 801578a:	9b03      	ldr	r3, [sp, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d076      	beq.n	801587e <_dtoa_r+0x4de>
 8015790:	9b02      	ldr	r3, [sp, #8]
 8015792:	2b00      	cmp	r3, #0
 8015794:	dd36      	ble.n	8015804 <_dtoa_r+0x464>
 8015796:	9b00      	ldr	r3, [sp, #0]
 8015798:	4650      	mov	r0, sl
 801579a:	4659      	mov	r1, fp
 801579c:	1e5f      	subs	r7, r3, #1
 801579e:	2200      	movs	r2, #0
 80157a0:	4b88      	ldr	r3, [pc, #544]	; (80159c4 <_dtoa_r+0x624>)
 80157a2:	f7ea ff41 	bl	8000628 <__aeabi_dmul>
 80157a6:	9e02      	ldr	r6, [sp, #8]
 80157a8:	4682      	mov	sl, r0
 80157aa:	468b      	mov	fp, r1
 80157ac:	3501      	adds	r5, #1
 80157ae:	4628      	mov	r0, r5
 80157b0:	f7ea fed0 	bl	8000554 <__aeabi_i2d>
 80157b4:	4652      	mov	r2, sl
 80157b6:	465b      	mov	r3, fp
 80157b8:	f7ea ff36 	bl	8000628 <__aeabi_dmul>
 80157bc:	4b82      	ldr	r3, [pc, #520]	; (80159c8 <_dtoa_r+0x628>)
 80157be:	2200      	movs	r2, #0
 80157c0:	f7ea fd7c 	bl	80002bc <__adddf3>
 80157c4:	46d0      	mov	r8, sl
 80157c6:	46d9      	mov	r9, fp
 80157c8:	4682      	mov	sl, r0
 80157ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80157ce:	2e00      	cmp	r6, #0
 80157d0:	d158      	bne.n	8015884 <_dtoa_r+0x4e4>
 80157d2:	4b7e      	ldr	r3, [pc, #504]	; (80159cc <_dtoa_r+0x62c>)
 80157d4:	2200      	movs	r2, #0
 80157d6:	4640      	mov	r0, r8
 80157d8:	4649      	mov	r1, r9
 80157da:	f7ea fd6d 	bl	80002b8 <__aeabi_dsub>
 80157de:	4652      	mov	r2, sl
 80157e0:	465b      	mov	r3, fp
 80157e2:	4680      	mov	r8, r0
 80157e4:	4689      	mov	r9, r1
 80157e6:	f7eb f9af 	bl	8000b48 <__aeabi_dcmpgt>
 80157ea:	2800      	cmp	r0, #0
 80157ec:	f040 8295 	bne.w	8015d1a <_dtoa_r+0x97a>
 80157f0:	4652      	mov	r2, sl
 80157f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157f6:	4640      	mov	r0, r8
 80157f8:	4649      	mov	r1, r9
 80157fa:	f7eb f987 	bl	8000b0c <__aeabi_dcmplt>
 80157fe:	2800      	cmp	r0, #0
 8015800:	f040 8289 	bne.w	8015d16 <_dtoa_r+0x976>
 8015804:	ec5b ab19 	vmov	sl, fp, d9
 8015808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801580a:	2b00      	cmp	r3, #0
 801580c:	f2c0 8148 	blt.w	8015aa0 <_dtoa_r+0x700>
 8015810:	9a00      	ldr	r2, [sp, #0]
 8015812:	2a0e      	cmp	r2, #14
 8015814:	f300 8144 	bgt.w	8015aa0 <_dtoa_r+0x700>
 8015818:	4b67      	ldr	r3, [pc, #412]	; (80159b8 <_dtoa_r+0x618>)
 801581a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801581e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015824:	2b00      	cmp	r3, #0
 8015826:	f280 80d5 	bge.w	80159d4 <_dtoa_r+0x634>
 801582a:	9b03      	ldr	r3, [sp, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	f300 80d1 	bgt.w	80159d4 <_dtoa_r+0x634>
 8015832:	f040 826f 	bne.w	8015d14 <_dtoa_r+0x974>
 8015836:	4b65      	ldr	r3, [pc, #404]	; (80159cc <_dtoa_r+0x62c>)
 8015838:	2200      	movs	r2, #0
 801583a:	4640      	mov	r0, r8
 801583c:	4649      	mov	r1, r9
 801583e:	f7ea fef3 	bl	8000628 <__aeabi_dmul>
 8015842:	4652      	mov	r2, sl
 8015844:	465b      	mov	r3, fp
 8015846:	f7eb f975 	bl	8000b34 <__aeabi_dcmpge>
 801584a:	9e03      	ldr	r6, [sp, #12]
 801584c:	4637      	mov	r7, r6
 801584e:	2800      	cmp	r0, #0
 8015850:	f040 8245 	bne.w	8015cde <_dtoa_r+0x93e>
 8015854:	9d01      	ldr	r5, [sp, #4]
 8015856:	2331      	movs	r3, #49	; 0x31
 8015858:	f805 3b01 	strb.w	r3, [r5], #1
 801585c:	9b00      	ldr	r3, [sp, #0]
 801585e:	3301      	adds	r3, #1
 8015860:	9300      	str	r3, [sp, #0]
 8015862:	e240      	b.n	8015ce6 <_dtoa_r+0x946>
 8015864:	07f2      	lsls	r2, r6, #31
 8015866:	d505      	bpl.n	8015874 <_dtoa_r+0x4d4>
 8015868:	e9d7 2300 	ldrd	r2, r3, [r7]
 801586c:	f7ea fedc 	bl	8000628 <__aeabi_dmul>
 8015870:	3501      	adds	r5, #1
 8015872:	2301      	movs	r3, #1
 8015874:	1076      	asrs	r6, r6, #1
 8015876:	3708      	adds	r7, #8
 8015878:	e777      	b.n	801576a <_dtoa_r+0x3ca>
 801587a:	2502      	movs	r5, #2
 801587c:	e779      	b.n	8015772 <_dtoa_r+0x3d2>
 801587e:	9f00      	ldr	r7, [sp, #0]
 8015880:	9e03      	ldr	r6, [sp, #12]
 8015882:	e794      	b.n	80157ae <_dtoa_r+0x40e>
 8015884:	9901      	ldr	r1, [sp, #4]
 8015886:	4b4c      	ldr	r3, [pc, #304]	; (80159b8 <_dtoa_r+0x618>)
 8015888:	4431      	add	r1, r6
 801588a:	910d      	str	r1, [sp, #52]	; 0x34
 801588c:	9908      	ldr	r1, [sp, #32]
 801588e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015896:	2900      	cmp	r1, #0
 8015898:	d043      	beq.n	8015922 <_dtoa_r+0x582>
 801589a:	494d      	ldr	r1, [pc, #308]	; (80159d0 <_dtoa_r+0x630>)
 801589c:	2000      	movs	r0, #0
 801589e:	f7ea ffed 	bl	800087c <__aeabi_ddiv>
 80158a2:	4652      	mov	r2, sl
 80158a4:	465b      	mov	r3, fp
 80158a6:	f7ea fd07 	bl	80002b8 <__aeabi_dsub>
 80158aa:	9d01      	ldr	r5, [sp, #4]
 80158ac:	4682      	mov	sl, r0
 80158ae:	468b      	mov	fp, r1
 80158b0:	4649      	mov	r1, r9
 80158b2:	4640      	mov	r0, r8
 80158b4:	f7eb f968 	bl	8000b88 <__aeabi_d2iz>
 80158b8:	4606      	mov	r6, r0
 80158ba:	f7ea fe4b 	bl	8000554 <__aeabi_i2d>
 80158be:	4602      	mov	r2, r0
 80158c0:	460b      	mov	r3, r1
 80158c2:	4640      	mov	r0, r8
 80158c4:	4649      	mov	r1, r9
 80158c6:	f7ea fcf7 	bl	80002b8 <__aeabi_dsub>
 80158ca:	3630      	adds	r6, #48	; 0x30
 80158cc:	f805 6b01 	strb.w	r6, [r5], #1
 80158d0:	4652      	mov	r2, sl
 80158d2:	465b      	mov	r3, fp
 80158d4:	4680      	mov	r8, r0
 80158d6:	4689      	mov	r9, r1
 80158d8:	f7eb f918 	bl	8000b0c <__aeabi_dcmplt>
 80158dc:	2800      	cmp	r0, #0
 80158de:	d163      	bne.n	80159a8 <_dtoa_r+0x608>
 80158e0:	4642      	mov	r2, r8
 80158e2:	464b      	mov	r3, r9
 80158e4:	4936      	ldr	r1, [pc, #216]	; (80159c0 <_dtoa_r+0x620>)
 80158e6:	2000      	movs	r0, #0
 80158e8:	f7ea fce6 	bl	80002b8 <__aeabi_dsub>
 80158ec:	4652      	mov	r2, sl
 80158ee:	465b      	mov	r3, fp
 80158f0:	f7eb f90c 	bl	8000b0c <__aeabi_dcmplt>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	f040 80b5 	bne.w	8015a64 <_dtoa_r+0x6c4>
 80158fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158fc:	429d      	cmp	r5, r3
 80158fe:	d081      	beq.n	8015804 <_dtoa_r+0x464>
 8015900:	4b30      	ldr	r3, [pc, #192]	; (80159c4 <_dtoa_r+0x624>)
 8015902:	2200      	movs	r2, #0
 8015904:	4650      	mov	r0, sl
 8015906:	4659      	mov	r1, fp
 8015908:	f7ea fe8e 	bl	8000628 <__aeabi_dmul>
 801590c:	4b2d      	ldr	r3, [pc, #180]	; (80159c4 <_dtoa_r+0x624>)
 801590e:	4682      	mov	sl, r0
 8015910:	468b      	mov	fp, r1
 8015912:	4640      	mov	r0, r8
 8015914:	4649      	mov	r1, r9
 8015916:	2200      	movs	r2, #0
 8015918:	f7ea fe86 	bl	8000628 <__aeabi_dmul>
 801591c:	4680      	mov	r8, r0
 801591e:	4689      	mov	r9, r1
 8015920:	e7c6      	b.n	80158b0 <_dtoa_r+0x510>
 8015922:	4650      	mov	r0, sl
 8015924:	4659      	mov	r1, fp
 8015926:	f7ea fe7f 	bl	8000628 <__aeabi_dmul>
 801592a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801592c:	9d01      	ldr	r5, [sp, #4]
 801592e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015930:	4682      	mov	sl, r0
 8015932:	468b      	mov	fp, r1
 8015934:	4649      	mov	r1, r9
 8015936:	4640      	mov	r0, r8
 8015938:	f7eb f926 	bl	8000b88 <__aeabi_d2iz>
 801593c:	4606      	mov	r6, r0
 801593e:	f7ea fe09 	bl	8000554 <__aeabi_i2d>
 8015942:	3630      	adds	r6, #48	; 0x30
 8015944:	4602      	mov	r2, r0
 8015946:	460b      	mov	r3, r1
 8015948:	4640      	mov	r0, r8
 801594a:	4649      	mov	r1, r9
 801594c:	f7ea fcb4 	bl	80002b8 <__aeabi_dsub>
 8015950:	f805 6b01 	strb.w	r6, [r5], #1
 8015954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015956:	429d      	cmp	r5, r3
 8015958:	4680      	mov	r8, r0
 801595a:	4689      	mov	r9, r1
 801595c:	f04f 0200 	mov.w	r2, #0
 8015960:	d124      	bne.n	80159ac <_dtoa_r+0x60c>
 8015962:	4b1b      	ldr	r3, [pc, #108]	; (80159d0 <_dtoa_r+0x630>)
 8015964:	4650      	mov	r0, sl
 8015966:	4659      	mov	r1, fp
 8015968:	f7ea fca8 	bl	80002bc <__adddf3>
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	4640      	mov	r0, r8
 8015972:	4649      	mov	r1, r9
 8015974:	f7eb f8e8 	bl	8000b48 <__aeabi_dcmpgt>
 8015978:	2800      	cmp	r0, #0
 801597a:	d173      	bne.n	8015a64 <_dtoa_r+0x6c4>
 801597c:	4652      	mov	r2, sl
 801597e:	465b      	mov	r3, fp
 8015980:	4913      	ldr	r1, [pc, #76]	; (80159d0 <_dtoa_r+0x630>)
 8015982:	2000      	movs	r0, #0
 8015984:	f7ea fc98 	bl	80002b8 <__aeabi_dsub>
 8015988:	4602      	mov	r2, r0
 801598a:	460b      	mov	r3, r1
 801598c:	4640      	mov	r0, r8
 801598e:	4649      	mov	r1, r9
 8015990:	f7eb f8bc 	bl	8000b0c <__aeabi_dcmplt>
 8015994:	2800      	cmp	r0, #0
 8015996:	f43f af35 	beq.w	8015804 <_dtoa_r+0x464>
 801599a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801599c:	1e6b      	subs	r3, r5, #1
 801599e:	930f      	str	r3, [sp, #60]	; 0x3c
 80159a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80159a4:	2b30      	cmp	r3, #48	; 0x30
 80159a6:	d0f8      	beq.n	801599a <_dtoa_r+0x5fa>
 80159a8:	9700      	str	r7, [sp, #0]
 80159aa:	e049      	b.n	8015a40 <_dtoa_r+0x6a0>
 80159ac:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <_dtoa_r+0x624>)
 80159ae:	f7ea fe3b 	bl	8000628 <__aeabi_dmul>
 80159b2:	4680      	mov	r8, r0
 80159b4:	4689      	mov	r9, r1
 80159b6:	e7bd      	b.n	8015934 <_dtoa_r+0x594>
 80159b8:	08017c80 	.word	0x08017c80
 80159bc:	08017c58 	.word	0x08017c58
 80159c0:	3ff00000 	.word	0x3ff00000
 80159c4:	40240000 	.word	0x40240000
 80159c8:	401c0000 	.word	0x401c0000
 80159cc:	40140000 	.word	0x40140000
 80159d0:	3fe00000 	.word	0x3fe00000
 80159d4:	9d01      	ldr	r5, [sp, #4]
 80159d6:	4656      	mov	r6, sl
 80159d8:	465f      	mov	r7, fp
 80159da:	4642      	mov	r2, r8
 80159dc:	464b      	mov	r3, r9
 80159de:	4630      	mov	r0, r6
 80159e0:	4639      	mov	r1, r7
 80159e2:	f7ea ff4b 	bl	800087c <__aeabi_ddiv>
 80159e6:	f7eb f8cf 	bl	8000b88 <__aeabi_d2iz>
 80159ea:	4682      	mov	sl, r0
 80159ec:	f7ea fdb2 	bl	8000554 <__aeabi_i2d>
 80159f0:	4642      	mov	r2, r8
 80159f2:	464b      	mov	r3, r9
 80159f4:	f7ea fe18 	bl	8000628 <__aeabi_dmul>
 80159f8:	4602      	mov	r2, r0
 80159fa:	460b      	mov	r3, r1
 80159fc:	4630      	mov	r0, r6
 80159fe:	4639      	mov	r1, r7
 8015a00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015a04:	f7ea fc58 	bl	80002b8 <__aeabi_dsub>
 8015a08:	f805 6b01 	strb.w	r6, [r5], #1
 8015a0c:	9e01      	ldr	r6, [sp, #4]
 8015a0e:	9f03      	ldr	r7, [sp, #12]
 8015a10:	1bae      	subs	r6, r5, r6
 8015a12:	42b7      	cmp	r7, r6
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	d135      	bne.n	8015a86 <_dtoa_r+0x6e6>
 8015a1a:	f7ea fc4f 	bl	80002bc <__adddf3>
 8015a1e:	4642      	mov	r2, r8
 8015a20:	464b      	mov	r3, r9
 8015a22:	4606      	mov	r6, r0
 8015a24:	460f      	mov	r7, r1
 8015a26:	f7eb f88f 	bl	8000b48 <__aeabi_dcmpgt>
 8015a2a:	b9d0      	cbnz	r0, 8015a62 <_dtoa_r+0x6c2>
 8015a2c:	4642      	mov	r2, r8
 8015a2e:	464b      	mov	r3, r9
 8015a30:	4630      	mov	r0, r6
 8015a32:	4639      	mov	r1, r7
 8015a34:	f7eb f860 	bl	8000af8 <__aeabi_dcmpeq>
 8015a38:	b110      	cbz	r0, 8015a40 <_dtoa_r+0x6a0>
 8015a3a:	f01a 0f01 	tst.w	sl, #1
 8015a3e:	d110      	bne.n	8015a62 <_dtoa_r+0x6c2>
 8015a40:	4620      	mov	r0, r4
 8015a42:	ee18 1a10 	vmov	r1, s16
 8015a46:	f000 fc07 	bl	8016258 <_Bfree>
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	9800      	ldr	r0, [sp, #0]
 8015a4e:	702b      	strb	r3, [r5, #0]
 8015a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a52:	3001      	adds	r0, #1
 8015a54:	6018      	str	r0, [r3, #0]
 8015a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f43f acf1 	beq.w	8015440 <_dtoa_r+0xa0>
 8015a5e:	601d      	str	r5, [r3, #0]
 8015a60:	e4ee      	b.n	8015440 <_dtoa_r+0xa0>
 8015a62:	9f00      	ldr	r7, [sp, #0]
 8015a64:	462b      	mov	r3, r5
 8015a66:	461d      	mov	r5, r3
 8015a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a6c:	2a39      	cmp	r2, #57	; 0x39
 8015a6e:	d106      	bne.n	8015a7e <_dtoa_r+0x6de>
 8015a70:	9a01      	ldr	r2, [sp, #4]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d1f7      	bne.n	8015a66 <_dtoa_r+0x6c6>
 8015a76:	9901      	ldr	r1, [sp, #4]
 8015a78:	2230      	movs	r2, #48	; 0x30
 8015a7a:	3701      	adds	r7, #1
 8015a7c:	700a      	strb	r2, [r1, #0]
 8015a7e:	781a      	ldrb	r2, [r3, #0]
 8015a80:	3201      	adds	r2, #1
 8015a82:	701a      	strb	r2, [r3, #0]
 8015a84:	e790      	b.n	80159a8 <_dtoa_r+0x608>
 8015a86:	4ba6      	ldr	r3, [pc, #664]	; (8015d20 <_dtoa_r+0x980>)
 8015a88:	2200      	movs	r2, #0
 8015a8a:	f7ea fdcd 	bl	8000628 <__aeabi_dmul>
 8015a8e:	2200      	movs	r2, #0
 8015a90:	2300      	movs	r3, #0
 8015a92:	4606      	mov	r6, r0
 8015a94:	460f      	mov	r7, r1
 8015a96:	f7eb f82f 	bl	8000af8 <__aeabi_dcmpeq>
 8015a9a:	2800      	cmp	r0, #0
 8015a9c:	d09d      	beq.n	80159da <_dtoa_r+0x63a>
 8015a9e:	e7cf      	b.n	8015a40 <_dtoa_r+0x6a0>
 8015aa0:	9a08      	ldr	r2, [sp, #32]
 8015aa2:	2a00      	cmp	r2, #0
 8015aa4:	f000 80d7 	beq.w	8015c56 <_dtoa_r+0x8b6>
 8015aa8:	9a06      	ldr	r2, [sp, #24]
 8015aaa:	2a01      	cmp	r2, #1
 8015aac:	f300 80ba 	bgt.w	8015c24 <_dtoa_r+0x884>
 8015ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ab2:	2a00      	cmp	r2, #0
 8015ab4:	f000 80b2 	beq.w	8015c1c <_dtoa_r+0x87c>
 8015ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015abc:	9e07      	ldr	r6, [sp, #28]
 8015abe:	9d04      	ldr	r5, [sp, #16]
 8015ac0:	9a04      	ldr	r2, [sp, #16]
 8015ac2:	441a      	add	r2, r3
 8015ac4:	9204      	str	r2, [sp, #16]
 8015ac6:	9a05      	ldr	r2, [sp, #20]
 8015ac8:	2101      	movs	r1, #1
 8015aca:	441a      	add	r2, r3
 8015acc:	4620      	mov	r0, r4
 8015ace:	9205      	str	r2, [sp, #20]
 8015ad0:	f000 fc7a 	bl	80163c8 <__i2b>
 8015ad4:	4607      	mov	r7, r0
 8015ad6:	2d00      	cmp	r5, #0
 8015ad8:	dd0c      	ble.n	8015af4 <_dtoa_r+0x754>
 8015ada:	9b05      	ldr	r3, [sp, #20]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	dd09      	ble.n	8015af4 <_dtoa_r+0x754>
 8015ae0:	42ab      	cmp	r3, r5
 8015ae2:	9a04      	ldr	r2, [sp, #16]
 8015ae4:	bfa8      	it	ge
 8015ae6:	462b      	movge	r3, r5
 8015ae8:	1ad2      	subs	r2, r2, r3
 8015aea:	9204      	str	r2, [sp, #16]
 8015aec:	9a05      	ldr	r2, [sp, #20]
 8015aee:	1aed      	subs	r5, r5, r3
 8015af0:	1ad3      	subs	r3, r2, r3
 8015af2:	9305      	str	r3, [sp, #20]
 8015af4:	9b07      	ldr	r3, [sp, #28]
 8015af6:	b31b      	cbz	r3, 8015b40 <_dtoa_r+0x7a0>
 8015af8:	9b08      	ldr	r3, [sp, #32]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 80af 	beq.w	8015c5e <_dtoa_r+0x8be>
 8015b00:	2e00      	cmp	r6, #0
 8015b02:	dd13      	ble.n	8015b2c <_dtoa_r+0x78c>
 8015b04:	4639      	mov	r1, r7
 8015b06:	4632      	mov	r2, r6
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f000 fd1d 	bl	8016548 <__pow5mult>
 8015b0e:	ee18 2a10 	vmov	r2, s16
 8015b12:	4601      	mov	r1, r0
 8015b14:	4607      	mov	r7, r0
 8015b16:	4620      	mov	r0, r4
 8015b18:	f000 fc6c 	bl	80163f4 <__multiply>
 8015b1c:	ee18 1a10 	vmov	r1, s16
 8015b20:	4680      	mov	r8, r0
 8015b22:	4620      	mov	r0, r4
 8015b24:	f000 fb98 	bl	8016258 <_Bfree>
 8015b28:	ee08 8a10 	vmov	s16, r8
 8015b2c:	9b07      	ldr	r3, [sp, #28]
 8015b2e:	1b9a      	subs	r2, r3, r6
 8015b30:	d006      	beq.n	8015b40 <_dtoa_r+0x7a0>
 8015b32:	ee18 1a10 	vmov	r1, s16
 8015b36:	4620      	mov	r0, r4
 8015b38:	f000 fd06 	bl	8016548 <__pow5mult>
 8015b3c:	ee08 0a10 	vmov	s16, r0
 8015b40:	2101      	movs	r1, #1
 8015b42:	4620      	mov	r0, r4
 8015b44:	f000 fc40 	bl	80163c8 <__i2b>
 8015b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	4606      	mov	r6, r0
 8015b4e:	f340 8088 	ble.w	8015c62 <_dtoa_r+0x8c2>
 8015b52:	461a      	mov	r2, r3
 8015b54:	4601      	mov	r1, r0
 8015b56:	4620      	mov	r0, r4
 8015b58:	f000 fcf6 	bl	8016548 <__pow5mult>
 8015b5c:	9b06      	ldr	r3, [sp, #24]
 8015b5e:	2b01      	cmp	r3, #1
 8015b60:	4606      	mov	r6, r0
 8015b62:	f340 8081 	ble.w	8015c68 <_dtoa_r+0x8c8>
 8015b66:	f04f 0800 	mov.w	r8, #0
 8015b6a:	6933      	ldr	r3, [r6, #16]
 8015b6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b70:	6918      	ldr	r0, [r3, #16]
 8015b72:	f000 fbd9 	bl	8016328 <__hi0bits>
 8015b76:	f1c0 0020 	rsb	r0, r0, #32
 8015b7a:	9b05      	ldr	r3, [sp, #20]
 8015b7c:	4418      	add	r0, r3
 8015b7e:	f010 001f 	ands.w	r0, r0, #31
 8015b82:	f000 8092 	beq.w	8015caa <_dtoa_r+0x90a>
 8015b86:	f1c0 0320 	rsb	r3, r0, #32
 8015b8a:	2b04      	cmp	r3, #4
 8015b8c:	f340 808a 	ble.w	8015ca4 <_dtoa_r+0x904>
 8015b90:	f1c0 001c 	rsb	r0, r0, #28
 8015b94:	9b04      	ldr	r3, [sp, #16]
 8015b96:	4403      	add	r3, r0
 8015b98:	9304      	str	r3, [sp, #16]
 8015b9a:	9b05      	ldr	r3, [sp, #20]
 8015b9c:	4403      	add	r3, r0
 8015b9e:	4405      	add	r5, r0
 8015ba0:	9305      	str	r3, [sp, #20]
 8015ba2:	9b04      	ldr	r3, [sp, #16]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	dd07      	ble.n	8015bb8 <_dtoa_r+0x818>
 8015ba8:	ee18 1a10 	vmov	r1, s16
 8015bac:	461a      	mov	r2, r3
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f000 fd24 	bl	80165fc <__lshift>
 8015bb4:	ee08 0a10 	vmov	s16, r0
 8015bb8:	9b05      	ldr	r3, [sp, #20]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	dd05      	ble.n	8015bca <_dtoa_r+0x82a>
 8015bbe:	4631      	mov	r1, r6
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f000 fd1a 	bl	80165fc <__lshift>
 8015bc8:	4606      	mov	r6, r0
 8015bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d06e      	beq.n	8015cae <_dtoa_r+0x90e>
 8015bd0:	ee18 0a10 	vmov	r0, s16
 8015bd4:	4631      	mov	r1, r6
 8015bd6:	f000 fd81 	bl	80166dc <__mcmp>
 8015bda:	2800      	cmp	r0, #0
 8015bdc:	da67      	bge.n	8015cae <_dtoa_r+0x90e>
 8015bde:	9b00      	ldr	r3, [sp, #0]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	ee18 1a10 	vmov	r1, s16
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	220a      	movs	r2, #10
 8015bea:	2300      	movs	r3, #0
 8015bec:	4620      	mov	r0, r4
 8015bee:	f000 fb55 	bl	801629c <__multadd>
 8015bf2:	9b08      	ldr	r3, [sp, #32]
 8015bf4:	ee08 0a10 	vmov	s16, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	f000 81b1 	beq.w	8015f60 <_dtoa_r+0xbc0>
 8015bfe:	2300      	movs	r3, #0
 8015c00:	4639      	mov	r1, r7
 8015c02:	220a      	movs	r2, #10
 8015c04:	4620      	mov	r0, r4
 8015c06:	f000 fb49 	bl	801629c <__multadd>
 8015c0a:	9b02      	ldr	r3, [sp, #8]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	4607      	mov	r7, r0
 8015c10:	f300 808e 	bgt.w	8015d30 <_dtoa_r+0x990>
 8015c14:	9b06      	ldr	r3, [sp, #24]
 8015c16:	2b02      	cmp	r3, #2
 8015c18:	dc51      	bgt.n	8015cbe <_dtoa_r+0x91e>
 8015c1a:	e089      	b.n	8015d30 <_dtoa_r+0x990>
 8015c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015c22:	e74b      	b.n	8015abc <_dtoa_r+0x71c>
 8015c24:	9b03      	ldr	r3, [sp, #12]
 8015c26:	1e5e      	subs	r6, r3, #1
 8015c28:	9b07      	ldr	r3, [sp, #28]
 8015c2a:	42b3      	cmp	r3, r6
 8015c2c:	bfbf      	itttt	lt
 8015c2e:	9b07      	ldrlt	r3, [sp, #28]
 8015c30:	9607      	strlt	r6, [sp, #28]
 8015c32:	1af2      	sublt	r2, r6, r3
 8015c34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015c36:	bfb6      	itet	lt
 8015c38:	189b      	addlt	r3, r3, r2
 8015c3a:	1b9e      	subge	r6, r3, r6
 8015c3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015c3e:	9b03      	ldr	r3, [sp, #12]
 8015c40:	bfb8      	it	lt
 8015c42:	2600      	movlt	r6, #0
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	bfb7      	itett	lt
 8015c48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015c4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015c50:	1a9d      	sublt	r5, r3, r2
 8015c52:	2300      	movlt	r3, #0
 8015c54:	e734      	b.n	8015ac0 <_dtoa_r+0x720>
 8015c56:	9e07      	ldr	r6, [sp, #28]
 8015c58:	9d04      	ldr	r5, [sp, #16]
 8015c5a:	9f08      	ldr	r7, [sp, #32]
 8015c5c:	e73b      	b.n	8015ad6 <_dtoa_r+0x736>
 8015c5e:	9a07      	ldr	r2, [sp, #28]
 8015c60:	e767      	b.n	8015b32 <_dtoa_r+0x792>
 8015c62:	9b06      	ldr	r3, [sp, #24]
 8015c64:	2b01      	cmp	r3, #1
 8015c66:	dc18      	bgt.n	8015c9a <_dtoa_r+0x8fa>
 8015c68:	f1ba 0f00 	cmp.w	sl, #0
 8015c6c:	d115      	bne.n	8015c9a <_dtoa_r+0x8fa>
 8015c6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c72:	b993      	cbnz	r3, 8015c9a <_dtoa_r+0x8fa>
 8015c74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c78:	0d1b      	lsrs	r3, r3, #20
 8015c7a:	051b      	lsls	r3, r3, #20
 8015c7c:	b183      	cbz	r3, 8015ca0 <_dtoa_r+0x900>
 8015c7e:	9b04      	ldr	r3, [sp, #16]
 8015c80:	3301      	adds	r3, #1
 8015c82:	9304      	str	r3, [sp, #16]
 8015c84:	9b05      	ldr	r3, [sp, #20]
 8015c86:	3301      	adds	r3, #1
 8015c88:	9305      	str	r3, [sp, #20]
 8015c8a:	f04f 0801 	mov.w	r8, #1
 8015c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f47f af6a 	bne.w	8015b6a <_dtoa_r+0x7ca>
 8015c96:	2001      	movs	r0, #1
 8015c98:	e76f      	b.n	8015b7a <_dtoa_r+0x7da>
 8015c9a:	f04f 0800 	mov.w	r8, #0
 8015c9e:	e7f6      	b.n	8015c8e <_dtoa_r+0x8ee>
 8015ca0:	4698      	mov	r8, r3
 8015ca2:	e7f4      	b.n	8015c8e <_dtoa_r+0x8ee>
 8015ca4:	f43f af7d 	beq.w	8015ba2 <_dtoa_r+0x802>
 8015ca8:	4618      	mov	r0, r3
 8015caa:	301c      	adds	r0, #28
 8015cac:	e772      	b.n	8015b94 <_dtoa_r+0x7f4>
 8015cae:	9b03      	ldr	r3, [sp, #12]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	dc37      	bgt.n	8015d24 <_dtoa_r+0x984>
 8015cb4:	9b06      	ldr	r3, [sp, #24]
 8015cb6:	2b02      	cmp	r3, #2
 8015cb8:	dd34      	ble.n	8015d24 <_dtoa_r+0x984>
 8015cba:	9b03      	ldr	r3, [sp, #12]
 8015cbc:	9302      	str	r3, [sp, #8]
 8015cbe:	9b02      	ldr	r3, [sp, #8]
 8015cc0:	b96b      	cbnz	r3, 8015cde <_dtoa_r+0x93e>
 8015cc2:	4631      	mov	r1, r6
 8015cc4:	2205      	movs	r2, #5
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	f000 fae8 	bl	801629c <__multadd>
 8015ccc:	4601      	mov	r1, r0
 8015cce:	4606      	mov	r6, r0
 8015cd0:	ee18 0a10 	vmov	r0, s16
 8015cd4:	f000 fd02 	bl	80166dc <__mcmp>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	f73f adbb 	bgt.w	8015854 <_dtoa_r+0x4b4>
 8015cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce0:	9d01      	ldr	r5, [sp, #4]
 8015ce2:	43db      	mvns	r3, r3
 8015ce4:	9300      	str	r3, [sp, #0]
 8015ce6:	f04f 0800 	mov.w	r8, #0
 8015cea:	4631      	mov	r1, r6
 8015cec:	4620      	mov	r0, r4
 8015cee:	f000 fab3 	bl	8016258 <_Bfree>
 8015cf2:	2f00      	cmp	r7, #0
 8015cf4:	f43f aea4 	beq.w	8015a40 <_dtoa_r+0x6a0>
 8015cf8:	f1b8 0f00 	cmp.w	r8, #0
 8015cfc:	d005      	beq.n	8015d0a <_dtoa_r+0x96a>
 8015cfe:	45b8      	cmp	r8, r7
 8015d00:	d003      	beq.n	8015d0a <_dtoa_r+0x96a>
 8015d02:	4641      	mov	r1, r8
 8015d04:	4620      	mov	r0, r4
 8015d06:	f000 faa7 	bl	8016258 <_Bfree>
 8015d0a:	4639      	mov	r1, r7
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f000 faa3 	bl	8016258 <_Bfree>
 8015d12:	e695      	b.n	8015a40 <_dtoa_r+0x6a0>
 8015d14:	2600      	movs	r6, #0
 8015d16:	4637      	mov	r7, r6
 8015d18:	e7e1      	b.n	8015cde <_dtoa_r+0x93e>
 8015d1a:	9700      	str	r7, [sp, #0]
 8015d1c:	4637      	mov	r7, r6
 8015d1e:	e599      	b.n	8015854 <_dtoa_r+0x4b4>
 8015d20:	40240000 	.word	0x40240000
 8015d24:	9b08      	ldr	r3, [sp, #32]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	f000 80ca 	beq.w	8015ec0 <_dtoa_r+0xb20>
 8015d2c:	9b03      	ldr	r3, [sp, #12]
 8015d2e:	9302      	str	r3, [sp, #8]
 8015d30:	2d00      	cmp	r5, #0
 8015d32:	dd05      	ble.n	8015d40 <_dtoa_r+0x9a0>
 8015d34:	4639      	mov	r1, r7
 8015d36:	462a      	mov	r2, r5
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f000 fc5f 	bl	80165fc <__lshift>
 8015d3e:	4607      	mov	r7, r0
 8015d40:	f1b8 0f00 	cmp.w	r8, #0
 8015d44:	d05b      	beq.n	8015dfe <_dtoa_r+0xa5e>
 8015d46:	6879      	ldr	r1, [r7, #4]
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f000 fa45 	bl	80161d8 <_Balloc>
 8015d4e:	4605      	mov	r5, r0
 8015d50:	b928      	cbnz	r0, 8015d5e <_dtoa_r+0x9be>
 8015d52:	4b87      	ldr	r3, [pc, #540]	; (8015f70 <_dtoa_r+0xbd0>)
 8015d54:	4602      	mov	r2, r0
 8015d56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015d5a:	f7ff bb3b 	b.w	80153d4 <_dtoa_r+0x34>
 8015d5e:	693a      	ldr	r2, [r7, #16]
 8015d60:	3202      	adds	r2, #2
 8015d62:	0092      	lsls	r2, r2, #2
 8015d64:	f107 010c 	add.w	r1, r7, #12
 8015d68:	300c      	adds	r0, #12
 8015d6a:	f7fe fcc7 	bl	80146fc <memcpy>
 8015d6e:	2201      	movs	r2, #1
 8015d70:	4629      	mov	r1, r5
 8015d72:	4620      	mov	r0, r4
 8015d74:	f000 fc42 	bl	80165fc <__lshift>
 8015d78:	9b01      	ldr	r3, [sp, #4]
 8015d7a:	f103 0901 	add.w	r9, r3, #1
 8015d7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015d82:	4413      	add	r3, r2
 8015d84:	9305      	str	r3, [sp, #20]
 8015d86:	f00a 0301 	and.w	r3, sl, #1
 8015d8a:	46b8      	mov	r8, r7
 8015d8c:	9304      	str	r3, [sp, #16]
 8015d8e:	4607      	mov	r7, r0
 8015d90:	4631      	mov	r1, r6
 8015d92:	ee18 0a10 	vmov	r0, s16
 8015d96:	f7ff fa77 	bl	8015288 <quorem>
 8015d9a:	4641      	mov	r1, r8
 8015d9c:	9002      	str	r0, [sp, #8]
 8015d9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015da2:	ee18 0a10 	vmov	r0, s16
 8015da6:	f000 fc99 	bl	80166dc <__mcmp>
 8015daa:	463a      	mov	r2, r7
 8015dac:	9003      	str	r0, [sp, #12]
 8015dae:	4631      	mov	r1, r6
 8015db0:	4620      	mov	r0, r4
 8015db2:	f000 fcaf 	bl	8016714 <__mdiff>
 8015db6:	68c2      	ldr	r2, [r0, #12]
 8015db8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	bb02      	cbnz	r2, 8015e02 <_dtoa_r+0xa62>
 8015dc0:	4601      	mov	r1, r0
 8015dc2:	ee18 0a10 	vmov	r0, s16
 8015dc6:	f000 fc89 	bl	80166dc <__mcmp>
 8015dca:	4602      	mov	r2, r0
 8015dcc:	4629      	mov	r1, r5
 8015dce:	4620      	mov	r0, r4
 8015dd0:	9207      	str	r2, [sp, #28]
 8015dd2:	f000 fa41 	bl	8016258 <_Bfree>
 8015dd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015dda:	ea43 0102 	orr.w	r1, r3, r2
 8015dde:	9b04      	ldr	r3, [sp, #16]
 8015de0:	430b      	orrs	r3, r1
 8015de2:	464d      	mov	r5, r9
 8015de4:	d10f      	bne.n	8015e06 <_dtoa_r+0xa66>
 8015de6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015dea:	d02a      	beq.n	8015e42 <_dtoa_r+0xaa2>
 8015dec:	9b03      	ldr	r3, [sp, #12]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	dd02      	ble.n	8015df8 <_dtoa_r+0xa58>
 8015df2:	9b02      	ldr	r3, [sp, #8]
 8015df4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015df8:	f88b a000 	strb.w	sl, [fp]
 8015dfc:	e775      	b.n	8015cea <_dtoa_r+0x94a>
 8015dfe:	4638      	mov	r0, r7
 8015e00:	e7ba      	b.n	8015d78 <_dtoa_r+0x9d8>
 8015e02:	2201      	movs	r2, #1
 8015e04:	e7e2      	b.n	8015dcc <_dtoa_r+0xa2c>
 8015e06:	9b03      	ldr	r3, [sp, #12]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	db04      	blt.n	8015e16 <_dtoa_r+0xa76>
 8015e0c:	9906      	ldr	r1, [sp, #24]
 8015e0e:	430b      	orrs	r3, r1
 8015e10:	9904      	ldr	r1, [sp, #16]
 8015e12:	430b      	orrs	r3, r1
 8015e14:	d122      	bne.n	8015e5c <_dtoa_r+0xabc>
 8015e16:	2a00      	cmp	r2, #0
 8015e18:	ddee      	ble.n	8015df8 <_dtoa_r+0xa58>
 8015e1a:	ee18 1a10 	vmov	r1, s16
 8015e1e:	2201      	movs	r2, #1
 8015e20:	4620      	mov	r0, r4
 8015e22:	f000 fbeb 	bl	80165fc <__lshift>
 8015e26:	4631      	mov	r1, r6
 8015e28:	ee08 0a10 	vmov	s16, r0
 8015e2c:	f000 fc56 	bl	80166dc <__mcmp>
 8015e30:	2800      	cmp	r0, #0
 8015e32:	dc03      	bgt.n	8015e3c <_dtoa_r+0xa9c>
 8015e34:	d1e0      	bne.n	8015df8 <_dtoa_r+0xa58>
 8015e36:	f01a 0f01 	tst.w	sl, #1
 8015e3a:	d0dd      	beq.n	8015df8 <_dtoa_r+0xa58>
 8015e3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e40:	d1d7      	bne.n	8015df2 <_dtoa_r+0xa52>
 8015e42:	2339      	movs	r3, #57	; 0x39
 8015e44:	f88b 3000 	strb.w	r3, [fp]
 8015e48:	462b      	mov	r3, r5
 8015e4a:	461d      	mov	r5, r3
 8015e4c:	3b01      	subs	r3, #1
 8015e4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e52:	2a39      	cmp	r2, #57	; 0x39
 8015e54:	d071      	beq.n	8015f3a <_dtoa_r+0xb9a>
 8015e56:	3201      	adds	r2, #1
 8015e58:	701a      	strb	r2, [r3, #0]
 8015e5a:	e746      	b.n	8015cea <_dtoa_r+0x94a>
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	dd07      	ble.n	8015e70 <_dtoa_r+0xad0>
 8015e60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e64:	d0ed      	beq.n	8015e42 <_dtoa_r+0xaa2>
 8015e66:	f10a 0301 	add.w	r3, sl, #1
 8015e6a:	f88b 3000 	strb.w	r3, [fp]
 8015e6e:	e73c      	b.n	8015cea <_dtoa_r+0x94a>
 8015e70:	9b05      	ldr	r3, [sp, #20]
 8015e72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015e76:	4599      	cmp	r9, r3
 8015e78:	d047      	beq.n	8015f0a <_dtoa_r+0xb6a>
 8015e7a:	ee18 1a10 	vmov	r1, s16
 8015e7e:	2300      	movs	r3, #0
 8015e80:	220a      	movs	r2, #10
 8015e82:	4620      	mov	r0, r4
 8015e84:	f000 fa0a 	bl	801629c <__multadd>
 8015e88:	45b8      	cmp	r8, r7
 8015e8a:	ee08 0a10 	vmov	s16, r0
 8015e8e:	f04f 0300 	mov.w	r3, #0
 8015e92:	f04f 020a 	mov.w	r2, #10
 8015e96:	4641      	mov	r1, r8
 8015e98:	4620      	mov	r0, r4
 8015e9a:	d106      	bne.n	8015eaa <_dtoa_r+0xb0a>
 8015e9c:	f000 f9fe 	bl	801629c <__multadd>
 8015ea0:	4680      	mov	r8, r0
 8015ea2:	4607      	mov	r7, r0
 8015ea4:	f109 0901 	add.w	r9, r9, #1
 8015ea8:	e772      	b.n	8015d90 <_dtoa_r+0x9f0>
 8015eaa:	f000 f9f7 	bl	801629c <__multadd>
 8015eae:	4639      	mov	r1, r7
 8015eb0:	4680      	mov	r8, r0
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	220a      	movs	r2, #10
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f000 f9f0 	bl	801629c <__multadd>
 8015ebc:	4607      	mov	r7, r0
 8015ebe:	e7f1      	b.n	8015ea4 <_dtoa_r+0xb04>
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	9302      	str	r3, [sp, #8]
 8015ec4:	9d01      	ldr	r5, [sp, #4]
 8015ec6:	ee18 0a10 	vmov	r0, s16
 8015eca:	4631      	mov	r1, r6
 8015ecc:	f7ff f9dc 	bl	8015288 <quorem>
 8015ed0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015ed4:	9b01      	ldr	r3, [sp, #4]
 8015ed6:	f805 ab01 	strb.w	sl, [r5], #1
 8015eda:	1aea      	subs	r2, r5, r3
 8015edc:	9b02      	ldr	r3, [sp, #8]
 8015ede:	4293      	cmp	r3, r2
 8015ee0:	dd09      	ble.n	8015ef6 <_dtoa_r+0xb56>
 8015ee2:	ee18 1a10 	vmov	r1, s16
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	220a      	movs	r2, #10
 8015eea:	4620      	mov	r0, r4
 8015eec:	f000 f9d6 	bl	801629c <__multadd>
 8015ef0:	ee08 0a10 	vmov	s16, r0
 8015ef4:	e7e7      	b.n	8015ec6 <_dtoa_r+0xb26>
 8015ef6:	9b02      	ldr	r3, [sp, #8]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	bfc8      	it	gt
 8015efc:	461d      	movgt	r5, r3
 8015efe:	9b01      	ldr	r3, [sp, #4]
 8015f00:	bfd8      	it	le
 8015f02:	2501      	movle	r5, #1
 8015f04:	441d      	add	r5, r3
 8015f06:	f04f 0800 	mov.w	r8, #0
 8015f0a:	ee18 1a10 	vmov	r1, s16
 8015f0e:	2201      	movs	r2, #1
 8015f10:	4620      	mov	r0, r4
 8015f12:	f000 fb73 	bl	80165fc <__lshift>
 8015f16:	4631      	mov	r1, r6
 8015f18:	ee08 0a10 	vmov	s16, r0
 8015f1c:	f000 fbde 	bl	80166dc <__mcmp>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	dc91      	bgt.n	8015e48 <_dtoa_r+0xaa8>
 8015f24:	d102      	bne.n	8015f2c <_dtoa_r+0xb8c>
 8015f26:	f01a 0f01 	tst.w	sl, #1
 8015f2a:	d18d      	bne.n	8015e48 <_dtoa_r+0xaa8>
 8015f2c:	462b      	mov	r3, r5
 8015f2e:	461d      	mov	r5, r3
 8015f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f34:	2a30      	cmp	r2, #48	; 0x30
 8015f36:	d0fa      	beq.n	8015f2e <_dtoa_r+0xb8e>
 8015f38:	e6d7      	b.n	8015cea <_dtoa_r+0x94a>
 8015f3a:	9a01      	ldr	r2, [sp, #4]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d184      	bne.n	8015e4a <_dtoa_r+0xaaa>
 8015f40:	9b00      	ldr	r3, [sp, #0]
 8015f42:	3301      	adds	r3, #1
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	2331      	movs	r3, #49	; 0x31
 8015f48:	7013      	strb	r3, [r2, #0]
 8015f4a:	e6ce      	b.n	8015cea <_dtoa_r+0x94a>
 8015f4c:	4b09      	ldr	r3, [pc, #36]	; (8015f74 <_dtoa_r+0xbd4>)
 8015f4e:	f7ff ba95 	b.w	801547c <_dtoa_r+0xdc>
 8015f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	f47f aa6e 	bne.w	8015436 <_dtoa_r+0x96>
 8015f5a:	4b07      	ldr	r3, [pc, #28]	; (8015f78 <_dtoa_r+0xbd8>)
 8015f5c:	f7ff ba8e 	b.w	801547c <_dtoa_r+0xdc>
 8015f60:	9b02      	ldr	r3, [sp, #8]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	dcae      	bgt.n	8015ec4 <_dtoa_r+0xb24>
 8015f66:	9b06      	ldr	r3, [sp, #24]
 8015f68:	2b02      	cmp	r3, #2
 8015f6a:	f73f aea8 	bgt.w	8015cbe <_dtoa_r+0x91e>
 8015f6e:	e7a9      	b.n	8015ec4 <_dtoa_r+0xb24>
 8015f70:	08017b7c 	.word	0x08017b7c
 8015f74:	0801799c 	.word	0x0801799c
 8015f78:	08017afd 	.word	0x08017afd

08015f7c <std>:
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	b510      	push	{r4, lr}
 8015f80:	4604      	mov	r4, r0
 8015f82:	e9c0 3300 	strd	r3, r3, [r0]
 8015f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f8a:	6083      	str	r3, [r0, #8]
 8015f8c:	8181      	strh	r1, [r0, #12]
 8015f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8015f90:	81c2      	strh	r2, [r0, #14]
 8015f92:	6183      	str	r3, [r0, #24]
 8015f94:	4619      	mov	r1, r3
 8015f96:	2208      	movs	r2, #8
 8015f98:	305c      	adds	r0, #92	; 0x5c
 8015f9a:	f7fe fbbd 	bl	8014718 <memset>
 8015f9e:	4b05      	ldr	r3, [pc, #20]	; (8015fb4 <std+0x38>)
 8015fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8015fa2:	4b05      	ldr	r3, [pc, #20]	; (8015fb8 <std+0x3c>)
 8015fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8015fa6:	4b05      	ldr	r3, [pc, #20]	; (8015fbc <std+0x40>)
 8015fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015faa:	4b05      	ldr	r3, [pc, #20]	; (8015fc0 <std+0x44>)
 8015fac:	6224      	str	r4, [r4, #32]
 8015fae:	6323      	str	r3, [r4, #48]	; 0x30
 8015fb0:	bd10      	pop	{r4, pc}
 8015fb2:	bf00      	nop
 8015fb4:	08016e79 	.word	0x08016e79
 8015fb8:	08016e9b 	.word	0x08016e9b
 8015fbc:	08016ed3 	.word	0x08016ed3
 8015fc0:	08016ef7 	.word	0x08016ef7

08015fc4 <_cleanup_r>:
 8015fc4:	4901      	ldr	r1, [pc, #4]	; (8015fcc <_cleanup_r+0x8>)
 8015fc6:	f000 b8c1 	b.w	801614c <_fwalk_reent>
 8015fca:	bf00      	nop
 8015fcc:	080171fd 	.word	0x080171fd

08015fd0 <__sfmoreglue>:
 8015fd0:	b570      	push	{r4, r5, r6, lr}
 8015fd2:	2268      	movs	r2, #104	; 0x68
 8015fd4:	1e4d      	subs	r5, r1, #1
 8015fd6:	4355      	muls	r5, r2
 8015fd8:	460e      	mov	r6, r1
 8015fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015fde:	f7fe fc0f 	bl	8014800 <_malloc_r>
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	b140      	cbz	r0, 8015ff8 <__sfmoreglue+0x28>
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8015fec:	300c      	adds	r0, #12
 8015fee:	60a0      	str	r0, [r4, #8]
 8015ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ff4:	f7fe fb90 	bl	8014718 <memset>
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	bd70      	pop	{r4, r5, r6, pc}

08015ffc <__sfp_lock_acquire>:
 8015ffc:	4801      	ldr	r0, [pc, #4]	; (8016004 <__sfp_lock_acquire+0x8>)
 8015ffe:	f000 b8ca 	b.w	8016196 <__retarget_lock_acquire_recursive>
 8016002:	bf00      	nop
 8016004:	20002f65 	.word	0x20002f65

08016008 <__sfp_lock_release>:
 8016008:	4801      	ldr	r0, [pc, #4]	; (8016010 <__sfp_lock_release+0x8>)
 801600a:	f000 b8c5 	b.w	8016198 <__retarget_lock_release_recursive>
 801600e:	bf00      	nop
 8016010:	20002f65 	.word	0x20002f65

08016014 <__sinit_lock_acquire>:
 8016014:	4801      	ldr	r0, [pc, #4]	; (801601c <__sinit_lock_acquire+0x8>)
 8016016:	f000 b8be 	b.w	8016196 <__retarget_lock_acquire_recursive>
 801601a:	bf00      	nop
 801601c:	20002f66 	.word	0x20002f66

08016020 <__sinit_lock_release>:
 8016020:	4801      	ldr	r0, [pc, #4]	; (8016028 <__sinit_lock_release+0x8>)
 8016022:	f000 b8b9 	b.w	8016198 <__retarget_lock_release_recursive>
 8016026:	bf00      	nop
 8016028:	20002f66 	.word	0x20002f66

0801602c <__sinit>:
 801602c:	b510      	push	{r4, lr}
 801602e:	4604      	mov	r4, r0
 8016030:	f7ff fff0 	bl	8016014 <__sinit_lock_acquire>
 8016034:	69a3      	ldr	r3, [r4, #24]
 8016036:	b11b      	cbz	r3, 8016040 <__sinit+0x14>
 8016038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801603c:	f7ff bff0 	b.w	8016020 <__sinit_lock_release>
 8016040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016044:	6523      	str	r3, [r4, #80]	; 0x50
 8016046:	4b13      	ldr	r3, [pc, #76]	; (8016094 <__sinit+0x68>)
 8016048:	4a13      	ldr	r2, [pc, #76]	; (8016098 <__sinit+0x6c>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	62a2      	str	r2, [r4, #40]	; 0x28
 801604e:	42a3      	cmp	r3, r4
 8016050:	bf04      	itt	eq
 8016052:	2301      	moveq	r3, #1
 8016054:	61a3      	streq	r3, [r4, #24]
 8016056:	4620      	mov	r0, r4
 8016058:	f000 f820 	bl	801609c <__sfp>
 801605c:	6060      	str	r0, [r4, #4]
 801605e:	4620      	mov	r0, r4
 8016060:	f000 f81c 	bl	801609c <__sfp>
 8016064:	60a0      	str	r0, [r4, #8]
 8016066:	4620      	mov	r0, r4
 8016068:	f000 f818 	bl	801609c <__sfp>
 801606c:	2200      	movs	r2, #0
 801606e:	60e0      	str	r0, [r4, #12]
 8016070:	2104      	movs	r1, #4
 8016072:	6860      	ldr	r0, [r4, #4]
 8016074:	f7ff ff82 	bl	8015f7c <std>
 8016078:	68a0      	ldr	r0, [r4, #8]
 801607a:	2201      	movs	r2, #1
 801607c:	2109      	movs	r1, #9
 801607e:	f7ff ff7d 	bl	8015f7c <std>
 8016082:	68e0      	ldr	r0, [r4, #12]
 8016084:	2202      	movs	r2, #2
 8016086:	2112      	movs	r1, #18
 8016088:	f7ff ff78 	bl	8015f7c <std>
 801608c:	2301      	movs	r3, #1
 801608e:	61a3      	str	r3, [r4, #24]
 8016090:	e7d2      	b.n	8016038 <__sinit+0xc>
 8016092:	bf00      	nop
 8016094:	08017988 	.word	0x08017988
 8016098:	08015fc5 	.word	0x08015fc5

0801609c <__sfp>:
 801609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609e:	4607      	mov	r7, r0
 80160a0:	f7ff ffac 	bl	8015ffc <__sfp_lock_acquire>
 80160a4:	4b1e      	ldr	r3, [pc, #120]	; (8016120 <__sfp+0x84>)
 80160a6:	681e      	ldr	r6, [r3, #0]
 80160a8:	69b3      	ldr	r3, [r6, #24]
 80160aa:	b913      	cbnz	r3, 80160b2 <__sfp+0x16>
 80160ac:	4630      	mov	r0, r6
 80160ae:	f7ff ffbd 	bl	801602c <__sinit>
 80160b2:	3648      	adds	r6, #72	; 0x48
 80160b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80160b8:	3b01      	subs	r3, #1
 80160ba:	d503      	bpl.n	80160c4 <__sfp+0x28>
 80160bc:	6833      	ldr	r3, [r6, #0]
 80160be:	b30b      	cbz	r3, 8016104 <__sfp+0x68>
 80160c0:	6836      	ldr	r6, [r6, #0]
 80160c2:	e7f7      	b.n	80160b4 <__sfp+0x18>
 80160c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80160c8:	b9d5      	cbnz	r5, 8016100 <__sfp+0x64>
 80160ca:	4b16      	ldr	r3, [pc, #88]	; (8016124 <__sfp+0x88>)
 80160cc:	60e3      	str	r3, [r4, #12]
 80160ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80160d2:	6665      	str	r5, [r4, #100]	; 0x64
 80160d4:	f000 f85e 	bl	8016194 <__retarget_lock_init_recursive>
 80160d8:	f7ff ff96 	bl	8016008 <__sfp_lock_release>
 80160dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80160e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80160e4:	6025      	str	r5, [r4, #0]
 80160e6:	61a5      	str	r5, [r4, #24]
 80160e8:	2208      	movs	r2, #8
 80160ea:	4629      	mov	r1, r5
 80160ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160f0:	f7fe fb12 	bl	8014718 <memset>
 80160f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160fc:	4620      	mov	r0, r4
 80160fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016100:	3468      	adds	r4, #104	; 0x68
 8016102:	e7d9      	b.n	80160b8 <__sfp+0x1c>
 8016104:	2104      	movs	r1, #4
 8016106:	4638      	mov	r0, r7
 8016108:	f7ff ff62 	bl	8015fd0 <__sfmoreglue>
 801610c:	4604      	mov	r4, r0
 801610e:	6030      	str	r0, [r6, #0]
 8016110:	2800      	cmp	r0, #0
 8016112:	d1d5      	bne.n	80160c0 <__sfp+0x24>
 8016114:	f7ff ff78 	bl	8016008 <__sfp_lock_release>
 8016118:	230c      	movs	r3, #12
 801611a:	603b      	str	r3, [r7, #0]
 801611c:	e7ee      	b.n	80160fc <__sfp+0x60>
 801611e:	bf00      	nop
 8016120:	08017988 	.word	0x08017988
 8016124:	ffff0001 	.word	0xffff0001

08016128 <fiprintf>:
 8016128:	b40e      	push	{r1, r2, r3}
 801612a:	b503      	push	{r0, r1, lr}
 801612c:	4601      	mov	r1, r0
 801612e:	ab03      	add	r3, sp, #12
 8016130:	4805      	ldr	r0, [pc, #20]	; (8016148 <fiprintf+0x20>)
 8016132:	f853 2b04 	ldr.w	r2, [r3], #4
 8016136:	6800      	ldr	r0, [r0, #0]
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	f000 fd6d 	bl	8016c18 <_vfiprintf_r>
 801613e:	b002      	add	sp, #8
 8016140:	f85d eb04 	ldr.w	lr, [sp], #4
 8016144:	b003      	add	sp, #12
 8016146:	4770      	bx	lr
 8016148:	20000184 	.word	0x20000184

0801614c <_fwalk_reent>:
 801614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016150:	4606      	mov	r6, r0
 8016152:	4688      	mov	r8, r1
 8016154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016158:	2700      	movs	r7, #0
 801615a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801615e:	f1b9 0901 	subs.w	r9, r9, #1
 8016162:	d505      	bpl.n	8016170 <_fwalk_reent+0x24>
 8016164:	6824      	ldr	r4, [r4, #0]
 8016166:	2c00      	cmp	r4, #0
 8016168:	d1f7      	bne.n	801615a <_fwalk_reent+0xe>
 801616a:	4638      	mov	r0, r7
 801616c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016170:	89ab      	ldrh	r3, [r5, #12]
 8016172:	2b01      	cmp	r3, #1
 8016174:	d907      	bls.n	8016186 <_fwalk_reent+0x3a>
 8016176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801617a:	3301      	adds	r3, #1
 801617c:	d003      	beq.n	8016186 <_fwalk_reent+0x3a>
 801617e:	4629      	mov	r1, r5
 8016180:	4630      	mov	r0, r6
 8016182:	47c0      	blx	r8
 8016184:	4307      	orrs	r7, r0
 8016186:	3568      	adds	r5, #104	; 0x68
 8016188:	e7e9      	b.n	801615e <_fwalk_reent+0x12>
	...

0801618c <_localeconv_r>:
 801618c:	4800      	ldr	r0, [pc, #0]	; (8016190 <_localeconv_r+0x4>)
 801618e:	4770      	bx	lr
 8016190:	200002d8 	.word	0x200002d8

08016194 <__retarget_lock_init_recursive>:
 8016194:	4770      	bx	lr

08016196 <__retarget_lock_acquire_recursive>:
 8016196:	4770      	bx	lr

08016198 <__retarget_lock_release_recursive>:
 8016198:	4770      	bx	lr

0801619a <__ascii_mbtowc>:
 801619a:	b082      	sub	sp, #8
 801619c:	b901      	cbnz	r1, 80161a0 <__ascii_mbtowc+0x6>
 801619e:	a901      	add	r1, sp, #4
 80161a0:	b142      	cbz	r2, 80161b4 <__ascii_mbtowc+0x1a>
 80161a2:	b14b      	cbz	r3, 80161b8 <__ascii_mbtowc+0x1e>
 80161a4:	7813      	ldrb	r3, [r2, #0]
 80161a6:	600b      	str	r3, [r1, #0]
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	1e10      	subs	r0, r2, #0
 80161ac:	bf18      	it	ne
 80161ae:	2001      	movne	r0, #1
 80161b0:	b002      	add	sp, #8
 80161b2:	4770      	bx	lr
 80161b4:	4610      	mov	r0, r2
 80161b6:	e7fb      	b.n	80161b0 <__ascii_mbtowc+0x16>
 80161b8:	f06f 0001 	mvn.w	r0, #1
 80161bc:	e7f8      	b.n	80161b0 <__ascii_mbtowc+0x16>
	...

080161c0 <__malloc_lock>:
 80161c0:	4801      	ldr	r0, [pc, #4]	; (80161c8 <__malloc_lock+0x8>)
 80161c2:	f7ff bfe8 	b.w	8016196 <__retarget_lock_acquire_recursive>
 80161c6:	bf00      	nop
 80161c8:	20002f64 	.word	0x20002f64

080161cc <__malloc_unlock>:
 80161cc:	4801      	ldr	r0, [pc, #4]	; (80161d4 <__malloc_unlock+0x8>)
 80161ce:	f7ff bfe3 	b.w	8016198 <__retarget_lock_release_recursive>
 80161d2:	bf00      	nop
 80161d4:	20002f64 	.word	0x20002f64

080161d8 <_Balloc>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80161dc:	4604      	mov	r4, r0
 80161de:	460d      	mov	r5, r1
 80161e0:	b976      	cbnz	r6, 8016200 <_Balloc+0x28>
 80161e2:	2010      	movs	r0, #16
 80161e4:	f7fe fa82 	bl	80146ec <malloc>
 80161e8:	4602      	mov	r2, r0
 80161ea:	6260      	str	r0, [r4, #36]	; 0x24
 80161ec:	b920      	cbnz	r0, 80161f8 <_Balloc+0x20>
 80161ee:	4b18      	ldr	r3, [pc, #96]	; (8016250 <_Balloc+0x78>)
 80161f0:	4818      	ldr	r0, [pc, #96]	; (8016254 <_Balloc+0x7c>)
 80161f2:	2166      	movs	r1, #102	; 0x66
 80161f4:	f7ff f82a 	bl	801524c <__assert_func>
 80161f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80161fc:	6006      	str	r6, [r0, #0]
 80161fe:	60c6      	str	r6, [r0, #12]
 8016200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016202:	68f3      	ldr	r3, [r6, #12]
 8016204:	b183      	cbz	r3, 8016228 <_Balloc+0x50>
 8016206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016208:	68db      	ldr	r3, [r3, #12]
 801620a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801620e:	b9b8      	cbnz	r0, 8016240 <_Balloc+0x68>
 8016210:	2101      	movs	r1, #1
 8016212:	fa01 f605 	lsl.w	r6, r1, r5
 8016216:	1d72      	adds	r2, r6, #5
 8016218:	0092      	lsls	r2, r2, #2
 801621a:	4620      	mov	r0, r4
 801621c:	f000 fb60 	bl	80168e0 <_calloc_r>
 8016220:	b160      	cbz	r0, 801623c <_Balloc+0x64>
 8016222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016226:	e00e      	b.n	8016246 <_Balloc+0x6e>
 8016228:	2221      	movs	r2, #33	; 0x21
 801622a:	2104      	movs	r1, #4
 801622c:	4620      	mov	r0, r4
 801622e:	f000 fb57 	bl	80168e0 <_calloc_r>
 8016232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016234:	60f0      	str	r0, [r6, #12]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1e4      	bne.n	8016206 <_Balloc+0x2e>
 801623c:	2000      	movs	r0, #0
 801623e:	bd70      	pop	{r4, r5, r6, pc}
 8016240:	6802      	ldr	r2, [r0, #0]
 8016242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016246:	2300      	movs	r3, #0
 8016248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801624c:	e7f7      	b.n	801623e <_Balloc+0x66>
 801624e:	bf00      	nop
 8016250:	08017b0a 	.word	0x08017b0a
 8016254:	08017bfa 	.word	0x08017bfa

08016258 <_Bfree>:
 8016258:	b570      	push	{r4, r5, r6, lr}
 801625a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801625c:	4605      	mov	r5, r0
 801625e:	460c      	mov	r4, r1
 8016260:	b976      	cbnz	r6, 8016280 <_Bfree+0x28>
 8016262:	2010      	movs	r0, #16
 8016264:	f7fe fa42 	bl	80146ec <malloc>
 8016268:	4602      	mov	r2, r0
 801626a:	6268      	str	r0, [r5, #36]	; 0x24
 801626c:	b920      	cbnz	r0, 8016278 <_Bfree+0x20>
 801626e:	4b09      	ldr	r3, [pc, #36]	; (8016294 <_Bfree+0x3c>)
 8016270:	4809      	ldr	r0, [pc, #36]	; (8016298 <_Bfree+0x40>)
 8016272:	218a      	movs	r1, #138	; 0x8a
 8016274:	f7fe ffea 	bl	801524c <__assert_func>
 8016278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801627c:	6006      	str	r6, [r0, #0]
 801627e:	60c6      	str	r6, [r0, #12]
 8016280:	b13c      	cbz	r4, 8016292 <_Bfree+0x3a>
 8016282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016284:	6862      	ldr	r2, [r4, #4]
 8016286:	68db      	ldr	r3, [r3, #12]
 8016288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801628c:	6021      	str	r1, [r4, #0]
 801628e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016292:	bd70      	pop	{r4, r5, r6, pc}
 8016294:	08017b0a 	.word	0x08017b0a
 8016298:	08017bfa 	.word	0x08017bfa

0801629c <__multadd>:
 801629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a0:	690d      	ldr	r5, [r1, #16]
 80162a2:	4607      	mov	r7, r0
 80162a4:	460c      	mov	r4, r1
 80162a6:	461e      	mov	r6, r3
 80162a8:	f101 0c14 	add.w	ip, r1, #20
 80162ac:	2000      	movs	r0, #0
 80162ae:	f8dc 3000 	ldr.w	r3, [ip]
 80162b2:	b299      	uxth	r1, r3
 80162b4:	fb02 6101 	mla	r1, r2, r1, r6
 80162b8:	0c1e      	lsrs	r6, r3, #16
 80162ba:	0c0b      	lsrs	r3, r1, #16
 80162bc:	fb02 3306 	mla	r3, r2, r6, r3
 80162c0:	b289      	uxth	r1, r1
 80162c2:	3001      	adds	r0, #1
 80162c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80162c8:	4285      	cmp	r5, r0
 80162ca:	f84c 1b04 	str.w	r1, [ip], #4
 80162ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80162d2:	dcec      	bgt.n	80162ae <__multadd+0x12>
 80162d4:	b30e      	cbz	r6, 801631a <__multadd+0x7e>
 80162d6:	68a3      	ldr	r3, [r4, #8]
 80162d8:	42ab      	cmp	r3, r5
 80162da:	dc19      	bgt.n	8016310 <__multadd+0x74>
 80162dc:	6861      	ldr	r1, [r4, #4]
 80162de:	4638      	mov	r0, r7
 80162e0:	3101      	adds	r1, #1
 80162e2:	f7ff ff79 	bl	80161d8 <_Balloc>
 80162e6:	4680      	mov	r8, r0
 80162e8:	b928      	cbnz	r0, 80162f6 <__multadd+0x5a>
 80162ea:	4602      	mov	r2, r0
 80162ec:	4b0c      	ldr	r3, [pc, #48]	; (8016320 <__multadd+0x84>)
 80162ee:	480d      	ldr	r0, [pc, #52]	; (8016324 <__multadd+0x88>)
 80162f0:	21b5      	movs	r1, #181	; 0xb5
 80162f2:	f7fe ffab 	bl	801524c <__assert_func>
 80162f6:	6922      	ldr	r2, [r4, #16]
 80162f8:	3202      	adds	r2, #2
 80162fa:	f104 010c 	add.w	r1, r4, #12
 80162fe:	0092      	lsls	r2, r2, #2
 8016300:	300c      	adds	r0, #12
 8016302:	f7fe f9fb 	bl	80146fc <memcpy>
 8016306:	4621      	mov	r1, r4
 8016308:	4638      	mov	r0, r7
 801630a:	f7ff ffa5 	bl	8016258 <_Bfree>
 801630e:	4644      	mov	r4, r8
 8016310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016314:	3501      	adds	r5, #1
 8016316:	615e      	str	r6, [r3, #20]
 8016318:	6125      	str	r5, [r4, #16]
 801631a:	4620      	mov	r0, r4
 801631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016320:	08017b7c 	.word	0x08017b7c
 8016324:	08017bfa 	.word	0x08017bfa

08016328 <__hi0bits>:
 8016328:	0c03      	lsrs	r3, r0, #16
 801632a:	041b      	lsls	r3, r3, #16
 801632c:	b9d3      	cbnz	r3, 8016364 <__hi0bits+0x3c>
 801632e:	0400      	lsls	r0, r0, #16
 8016330:	2310      	movs	r3, #16
 8016332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016336:	bf04      	itt	eq
 8016338:	0200      	lsleq	r0, r0, #8
 801633a:	3308      	addeq	r3, #8
 801633c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016340:	bf04      	itt	eq
 8016342:	0100      	lsleq	r0, r0, #4
 8016344:	3304      	addeq	r3, #4
 8016346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801634a:	bf04      	itt	eq
 801634c:	0080      	lsleq	r0, r0, #2
 801634e:	3302      	addeq	r3, #2
 8016350:	2800      	cmp	r0, #0
 8016352:	db05      	blt.n	8016360 <__hi0bits+0x38>
 8016354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016358:	f103 0301 	add.w	r3, r3, #1
 801635c:	bf08      	it	eq
 801635e:	2320      	moveq	r3, #32
 8016360:	4618      	mov	r0, r3
 8016362:	4770      	bx	lr
 8016364:	2300      	movs	r3, #0
 8016366:	e7e4      	b.n	8016332 <__hi0bits+0xa>

08016368 <__lo0bits>:
 8016368:	6803      	ldr	r3, [r0, #0]
 801636a:	f013 0207 	ands.w	r2, r3, #7
 801636e:	4601      	mov	r1, r0
 8016370:	d00b      	beq.n	801638a <__lo0bits+0x22>
 8016372:	07da      	lsls	r2, r3, #31
 8016374:	d423      	bmi.n	80163be <__lo0bits+0x56>
 8016376:	0798      	lsls	r0, r3, #30
 8016378:	bf49      	itett	mi
 801637a:	085b      	lsrmi	r3, r3, #1
 801637c:	089b      	lsrpl	r3, r3, #2
 801637e:	2001      	movmi	r0, #1
 8016380:	600b      	strmi	r3, [r1, #0]
 8016382:	bf5c      	itt	pl
 8016384:	600b      	strpl	r3, [r1, #0]
 8016386:	2002      	movpl	r0, #2
 8016388:	4770      	bx	lr
 801638a:	b298      	uxth	r0, r3
 801638c:	b9a8      	cbnz	r0, 80163ba <__lo0bits+0x52>
 801638e:	0c1b      	lsrs	r3, r3, #16
 8016390:	2010      	movs	r0, #16
 8016392:	b2da      	uxtb	r2, r3
 8016394:	b90a      	cbnz	r2, 801639a <__lo0bits+0x32>
 8016396:	3008      	adds	r0, #8
 8016398:	0a1b      	lsrs	r3, r3, #8
 801639a:	071a      	lsls	r2, r3, #28
 801639c:	bf04      	itt	eq
 801639e:	091b      	lsreq	r3, r3, #4
 80163a0:	3004      	addeq	r0, #4
 80163a2:	079a      	lsls	r2, r3, #30
 80163a4:	bf04      	itt	eq
 80163a6:	089b      	lsreq	r3, r3, #2
 80163a8:	3002      	addeq	r0, #2
 80163aa:	07da      	lsls	r2, r3, #31
 80163ac:	d403      	bmi.n	80163b6 <__lo0bits+0x4e>
 80163ae:	085b      	lsrs	r3, r3, #1
 80163b0:	f100 0001 	add.w	r0, r0, #1
 80163b4:	d005      	beq.n	80163c2 <__lo0bits+0x5a>
 80163b6:	600b      	str	r3, [r1, #0]
 80163b8:	4770      	bx	lr
 80163ba:	4610      	mov	r0, r2
 80163bc:	e7e9      	b.n	8016392 <__lo0bits+0x2a>
 80163be:	2000      	movs	r0, #0
 80163c0:	4770      	bx	lr
 80163c2:	2020      	movs	r0, #32
 80163c4:	4770      	bx	lr
	...

080163c8 <__i2b>:
 80163c8:	b510      	push	{r4, lr}
 80163ca:	460c      	mov	r4, r1
 80163cc:	2101      	movs	r1, #1
 80163ce:	f7ff ff03 	bl	80161d8 <_Balloc>
 80163d2:	4602      	mov	r2, r0
 80163d4:	b928      	cbnz	r0, 80163e2 <__i2b+0x1a>
 80163d6:	4b05      	ldr	r3, [pc, #20]	; (80163ec <__i2b+0x24>)
 80163d8:	4805      	ldr	r0, [pc, #20]	; (80163f0 <__i2b+0x28>)
 80163da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80163de:	f7fe ff35 	bl	801524c <__assert_func>
 80163e2:	2301      	movs	r3, #1
 80163e4:	6144      	str	r4, [r0, #20]
 80163e6:	6103      	str	r3, [r0, #16]
 80163e8:	bd10      	pop	{r4, pc}
 80163ea:	bf00      	nop
 80163ec:	08017b7c 	.word	0x08017b7c
 80163f0:	08017bfa 	.word	0x08017bfa

080163f4 <__multiply>:
 80163f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	4691      	mov	r9, r2
 80163fa:	690a      	ldr	r2, [r1, #16]
 80163fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016400:	429a      	cmp	r2, r3
 8016402:	bfb8      	it	lt
 8016404:	460b      	movlt	r3, r1
 8016406:	460c      	mov	r4, r1
 8016408:	bfbc      	itt	lt
 801640a:	464c      	movlt	r4, r9
 801640c:	4699      	movlt	r9, r3
 801640e:	6927      	ldr	r7, [r4, #16]
 8016410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016414:	68a3      	ldr	r3, [r4, #8]
 8016416:	6861      	ldr	r1, [r4, #4]
 8016418:	eb07 060a 	add.w	r6, r7, sl
 801641c:	42b3      	cmp	r3, r6
 801641e:	b085      	sub	sp, #20
 8016420:	bfb8      	it	lt
 8016422:	3101      	addlt	r1, #1
 8016424:	f7ff fed8 	bl	80161d8 <_Balloc>
 8016428:	b930      	cbnz	r0, 8016438 <__multiply+0x44>
 801642a:	4602      	mov	r2, r0
 801642c:	4b44      	ldr	r3, [pc, #272]	; (8016540 <__multiply+0x14c>)
 801642e:	4845      	ldr	r0, [pc, #276]	; (8016544 <__multiply+0x150>)
 8016430:	f240 115d 	movw	r1, #349	; 0x15d
 8016434:	f7fe ff0a 	bl	801524c <__assert_func>
 8016438:	f100 0514 	add.w	r5, r0, #20
 801643c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016440:	462b      	mov	r3, r5
 8016442:	2200      	movs	r2, #0
 8016444:	4543      	cmp	r3, r8
 8016446:	d321      	bcc.n	801648c <__multiply+0x98>
 8016448:	f104 0314 	add.w	r3, r4, #20
 801644c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016450:	f109 0314 	add.w	r3, r9, #20
 8016454:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016458:	9202      	str	r2, [sp, #8]
 801645a:	1b3a      	subs	r2, r7, r4
 801645c:	3a15      	subs	r2, #21
 801645e:	f022 0203 	bic.w	r2, r2, #3
 8016462:	3204      	adds	r2, #4
 8016464:	f104 0115 	add.w	r1, r4, #21
 8016468:	428f      	cmp	r7, r1
 801646a:	bf38      	it	cc
 801646c:	2204      	movcc	r2, #4
 801646e:	9201      	str	r2, [sp, #4]
 8016470:	9a02      	ldr	r2, [sp, #8]
 8016472:	9303      	str	r3, [sp, #12]
 8016474:	429a      	cmp	r2, r3
 8016476:	d80c      	bhi.n	8016492 <__multiply+0x9e>
 8016478:	2e00      	cmp	r6, #0
 801647a:	dd03      	ble.n	8016484 <__multiply+0x90>
 801647c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016480:	2b00      	cmp	r3, #0
 8016482:	d05a      	beq.n	801653a <__multiply+0x146>
 8016484:	6106      	str	r6, [r0, #16]
 8016486:	b005      	add	sp, #20
 8016488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648c:	f843 2b04 	str.w	r2, [r3], #4
 8016490:	e7d8      	b.n	8016444 <__multiply+0x50>
 8016492:	f8b3 a000 	ldrh.w	sl, [r3]
 8016496:	f1ba 0f00 	cmp.w	sl, #0
 801649a:	d024      	beq.n	80164e6 <__multiply+0xf2>
 801649c:	f104 0e14 	add.w	lr, r4, #20
 80164a0:	46a9      	mov	r9, r5
 80164a2:	f04f 0c00 	mov.w	ip, #0
 80164a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80164aa:	f8d9 1000 	ldr.w	r1, [r9]
 80164ae:	fa1f fb82 	uxth.w	fp, r2
 80164b2:	b289      	uxth	r1, r1
 80164b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80164b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80164bc:	f8d9 2000 	ldr.w	r2, [r9]
 80164c0:	4461      	add	r1, ip
 80164c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80164c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80164ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80164ce:	b289      	uxth	r1, r1
 80164d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80164d4:	4577      	cmp	r7, lr
 80164d6:	f849 1b04 	str.w	r1, [r9], #4
 80164da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80164de:	d8e2      	bhi.n	80164a6 <__multiply+0xb2>
 80164e0:	9a01      	ldr	r2, [sp, #4]
 80164e2:	f845 c002 	str.w	ip, [r5, r2]
 80164e6:	9a03      	ldr	r2, [sp, #12]
 80164e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80164ec:	3304      	adds	r3, #4
 80164ee:	f1b9 0f00 	cmp.w	r9, #0
 80164f2:	d020      	beq.n	8016536 <__multiply+0x142>
 80164f4:	6829      	ldr	r1, [r5, #0]
 80164f6:	f104 0c14 	add.w	ip, r4, #20
 80164fa:	46ae      	mov	lr, r5
 80164fc:	f04f 0a00 	mov.w	sl, #0
 8016500:	f8bc b000 	ldrh.w	fp, [ip]
 8016504:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016508:	fb09 220b 	mla	r2, r9, fp, r2
 801650c:	4492      	add	sl, r2
 801650e:	b289      	uxth	r1, r1
 8016510:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016514:	f84e 1b04 	str.w	r1, [lr], #4
 8016518:	f85c 2b04 	ldr.w	r2, [ip], #4
 801651c:	f8be 1000 	ldrh.w	r1, [lr]
 8016520:	0c12      	lsrs	r2, r2, #16
 8016522:	fb09 1102 	mla	r1, r9, r2, r1
 8016526:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801652a:	4567      	cmp	r7, ip
 801652c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016530:	d8e6      	bhi.n	8016500 <__multiply+0x10c>
 8016532:	9a01      	ldr	r2, [sp, #4]
 8016534:	50a9      	str	r1, [r5, r2]
 8016536:	3504      	adds	r5, #4
 8016538:	e79a      	b.n	8016470 <__multiply+0x7c>
 801653a:	3e01      	subs	r6, #1
 801653c:	e79c      	b.n	8016478 <__multiply+0x84>
 801653e:	bf00      	nop
 8016540:	08017b7c 	.word	0x08017b7c
 8016544:	08017bfa 	.word	0x08017bfa

08016548 <__pow5mult>:
 8016548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801654c:	4615      	mov	r5, r2
 801654e:	f012 0203 	ands.w	r2, r2, #3
 8016552:	4606      	mov	r6, r0
 8016554:	460f      	mov	r7, r1
 8016556:	d007      	beq.n	8016568 <__pow5mult+0x20>
 8016558:	4c25      	ldr	r4, [pc, #148]	; (80165f0 <__pow5mult+0xa8>)
 801655a:	3a01      	subs	r2, #1
 801655c:	2300      	movs	r3, #0
 801655e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016562:	f7ff fe9b 	bl	801629c <__multadd>
 8016566:	4607      	mov	r7, r0
 8016568:	10ad      	asrs	r5, r5, #2
 801656a:	d03d      	beq.n	80165e8 <__pow5mult+0xa0>
 801656c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801656e:	b97c      	cbnz	r4, 8016590 <__pow5mult+0x48>
 8016570:	2010      	movs	r0, #16
 8016572:	f7fe f8bb 	bl	80146ec <malloc>
 8016576:	4602      	mov	r2, r0
 8016578:	6270      	str	r0, [r6, #36]	; 0x24
 801657a:	b928      	cbnz	r0, 8016588 <__pow5mult+0x40>
 801657c:	4b1d      	ldr	r3, [pc, #116]	; (80165f4 <__pow5mult+0xac>)
 801657e:	481e      	ldr	r0, [pc, #120]	; (80165f8 <__pow5mult+0xb0>)
 8016580:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016584:	f7fe fe62 	bl	801524c <__assert_func>
 8016588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801658c:	6004      	str	r4, [r0, #0]
 801658e:	60c4      	str	r4, [r0, #12]
 8016590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016598:	b94c      	cbnz	r4, 80165ae <__pow5mult+0x66>
 801659a:	f240 2171 	movw	r1, #625	; 0x271
 801659e:	4630      	mov	r0, r6
 80165a0:	f7ff ff12 	bl	80163c8 <__i2b>
 80165a4:	2300      	movs	r3, #0
 80165a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80165aa:	4604      	mov	r4, r0
 80165ac:	6003      	str	r3, [r0, #0]
 80165ae:	f04f 0900 	mov.w	r9, #0
 80165b2:	07eb      	lsls	r3, r5, #31
 80165b4:	d50a      	bpl.n	80165cc <__pow5mult+0x84>
 80165b6:	4639      	mov	r1, r7
 80165b8:	4622      	mov	r2, r4
 80165ba:	4630      	mov	r0, r6
 80165bc:	f7ff ff1a 	bl	80163f4 <__multiply>
 80165c0:	4639      	mov	r1, r7
 80165c2:	4680      	mov	r8, r0
 80165c4:	4630      	mov	r0, r6
 80165c6:	f7ff fe47 	bl	8016258 <_Bfree>
 80165ca:	4647      	mov	r7, r8
 80165cc:	106d      	asrs	r5, r5, #1
 80165ce:	d00b      	beq.n	80165e8 <__pow5mult+0xa0>
 80165d0:	6820      	ldr	r0, [r4, #0]
 80165d2:	b938      	cbnz	r0, 80165e4 <__pow5mult+0x9c>
 80165d4:	4622      	mov	r2, r4
 80165d6:	4621      	mov	r1, r4
 80165d8:	4630      	mov	r0, r6
 80165da:	f7ff ff0b 	bl	80163f4 <__multiply>
 80165de:	6020      	str	r0, [r4, #0]
 80165e0:	f8c0 9000 	str.w	r9, [r0]
 80165e4:	4604      	mov	r4, r0
 80165e6:	e7e4      	b.n	80165b2 <__pow5mult+0x6a>
 80165e8:	4638      	mov	r0, r7
 80165ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165ee:	bf00      	nop
 80165f0:	08017d48 	.word	0x08017d48
 80165f4:	08017b0a 	.word	0x08017b0a
 80165f8:	08017bfa 	.word	0x08017bfa

080165fc <__lshift>:
 80165fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016600:	460c      	mov	r4, r1
 8016602:	6849      	ldr	r1, [r1, #4]
 8016604:	6923      	ldr	r3, [r4, #16]
 8016606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801660a:	68a3      	ldr	r3, [r4, #8]
 801660c:	4607      	mov	r7, r0
 801660e:	4691      	mov	r9, r2
 8016610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016614:	f108 0601 	add.w	r6, r8, #1
 8016618:	42b3      	cmp	r3, r6
 801661a:	db0b      	blt.n	8016634 <__lshift+0x38>
 801661c:	4638      	mov	r0, r7
 801661e:	f7ff fddb 	bl	80161d8 <_Balloc>
 8016622:	4605      	mov	r5, r0
 8016624:	b948      	cbnz	r0, 801663a <__lshift+0x3e>
 8016626:	4602      	mov	r2, r0
 8016628:	4b2a      	ldr	r3, [pc, #168]	; (80166d4 <__lshift+0xd8>)
 801662a:	482b      	ldr	r0, [pc, #172]	; (80166d8 <__lshift+0xdc>)
 801662c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016630:	f7fe fe0c 	bl	801524c <__assert_func>
 8016634:	3101      	adds	r1, #1
 8016636:	005b      	lsls	r3, r3, #1
 8016638:	e7ee      	b.n	8016618 <__lshift+0x1c>
 801663a:	2300      	movs	r3, #0
 801663c:	f100 0114 	add.w	r1, r0, #20
 8016640:	f100 0210 	add.w	r2, r0, #16
 8016644:	4618      	mov	r0, r3
 8016646:	4553      	cmp	r3, sl
 8016648:	db37      	blt.n	80166ba <__lshift+0xbe>
 801664a:	6920      	ldr	r0, [r4, #16]
 801664c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016650:	f104 0314 	add.w	r3, r4, #20
 8016654:	f019 091f 	ands.w	r9, r9, #31
 8016658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801665c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016660:	d02f      	beq.n	80166c2 <__lshift+0xc6>
 8016662:	f1c9 0e20 	rsb	lr, r9, #32
 8016666:	468a      	mov	sl, r1
 8016668:	f04f 0c00 	mov.w	ip, #0
 801666c:	681a      	ldr	r2, [r3, #0]
 801666e:	fa02 f209 	lsl.w	r2, r2, r9
 8016672:	ea42 020c 	orr.w	r2, r2, ip
 8016676:	f84a 2b04 	str.w	r2, [sl], #4
 801667a:	f853 2b04 	ldr.w	r2, [r3], #4
 801667e:	4298      	cmp	r0, r3
 8016680:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016684:	d8f2      	bhi.n	801666c <__lshift+0x70>
 8016686:	1b03      	subs	r3, r0, r4
 8016688:	3b15      	subs	r3, #21
 801668a:	f023 0303 	bic.w	r3, r3, #3
 801668e:	3304      	adds	r3, #4
 8016690:	f104 0215 	add.w	r2, r4, #21
 8016694:	4290      	cmp	r0, r2
 8016696:	bf38      	it	cc
 8016698:	2304      	movcc	r3, #4
 801669a:	f841 c003 	str.w	ip, [r1, r3]
 801669e:	f1bc 0f00 	cmp.w	ip, #0
 80166a2:	d001      	beq.n	80166a8 <__lshift+0xac>
 80166a4:	f108 0602 	add.w	r6, r8, #2
 80166a8:	3e01      	subs	r6, #1
 80166aa:	4638      	mov	r0, r7
 80166ac:	612e      	str	r6, [r5, #16]
 80166ae:	4621      	mov	r1, r4
 80166b0:	f7ff fdd2 	bl	8016258 <_Bfree>
 80166b4:	4628      	mov	r0, r5
 80166b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80166be:	3301      	adds	r3, #1
 80166c0:	e7c1      	b.n	8016646 <__lshift+0x4a>
 80166c2:	3904      	subs	r1, #4
 80166c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80166c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80166cc:	4298      	cmp	r0, r3
 80166ce:	d8f9      	bhi.n	80166c4 <__lshift+0xc8>
 80166d0:	e7ea      	b.n	80166a8 <__lshift+0xac>
 80166d2:	bf00      	nop
 80166d4:	08017b7c 	.word	0x08017b7c
 80166d8:	08017bfa 	.word	0x08017bfa

080166dc <__mcmp>:
 80166dc:	b530      	push	{r4, r5, lr}
 80166de:	6902      	ldr	r2, [r0, #16]
 80166e0:	690c      	ldr	r4, [r1, #16]
 80166e2:	1b12      	subs	r2, r2, r4
 80166e4:	d10e      	bne.n	8016704 <__mcmp+0x28>
 80166e6:	f100 0314 	add.w	r3, r0, #20
 80166ea:	3114      	adds	r1, #20
 80166ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80166f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80166f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80166f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80166fc:	42a5      	cmp	r5, r4
 80166fe:	d003      	beq.n	8016708 <__mcmp+0x2c>
 8016700:	d305      	bcc.n	801670e <__mcmp+0x32>
 8016702:	2201      	movs	r2, #1
 8016704:	4610      	mov	r0, r2
 8016706:	bd30      	pop	{r4, r5, pc}
 8016708:	4283      	cmp	r3, r0
 801670a:	d3f3      	bcc.n	80166f4 <__mcmp+0x18>
 801670c:	e7fa      	b.n	8016704 <__mcmp+0x28>
 801670e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016712:	e7f7      	b.n	8016704 <__mcmp+0x28>

08016714 <__mdiff>:
 8016714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016718:	460c      	mov	r4, r1
 801671a:	4606      	mov	r6, r0
 801671c:	4611      	mov	r1, r2
 801671e:	4620      	mov	r0, r4
 8016720:	4690      	mov	r8, r2
 8016722:	f7ff ffdb 	bl	80166dc <__mcmp>
 8016726:	1e05      	subs	r5, r0, #0
 8016728:	d110      	bne.n	801674c <__mdiff+0x38>
 801672a:	4629      	mov	r1, r5
 801672c:	4630      	mov	r0, r6
 801672e:	f7ff fd53 	bl	80161d8 <_Balloc>
 8016732:	b930      	cbnz	r0, 8016742 <__mdiff+0x2e>
 8016734:	4b3a      	ldr	r3, [pc, #232]	; (8016820 <__mdiff+0x10c>)
 8016736:	4602      	mov	r2, r0
 8016738:	f240 2132 	movw	r1, #562	; 0x232
 801673c:	4839      	ldr	r0, [pc, #228]	; (8016824 <__mdiff+0x110>)
 801673e:	f7fe fd85 	bl	801524c <__assert_func>
 8016742:	2301      	movs	r3, #1
 8016744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674c:	bfa4      	itt	ge
 801674e:	4643      	movge	r3, r8
 8016750:	46a0      	movge	r8, r4
 8016752:	4630      	mov	r0, r6
 8016754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016758:	bfa6      	itte	ge
 801675a:	461c      	movge	r4, r3
 801675c:	2500      	movge	r5, #0
 801675e:	2501      	movlt	r5, #1
 8016760:	f7ff fd3a 	bl	80161d8 <_Balloc>
 8016764:	b920      	cbnz	r0, 8016770 <__mdiff+0x5c>
 8016766:	4b2e      	ldr	r3, [pc, #184]	; (8016820 <__mdiff+0x10c>)
 8016768:	4602      	mov	r2, r0
 801676a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801676e:	e7e5      	b.n	801673c <__mdiff+0x28>
 8016770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016774:	6926      	ldr	r6, [r4, #16]
 8016776:	60c5      	str	r5, [r0, #12]
 8016778:	f104 0914 	add.w	r9, r4, #20
 801677c:	f108 0514 	add.w	r5, r8, #20
 8016780:	f100 0e14 	add.w	lr, r0, #20
 8016784:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801678c:	f108 0210 	add.w	r2, r8, #16
 8016790:	46f2      	mov	sl, lr
 8016792:	2100      	movs	r1, #0
 8016794:	f859 3b04 	ldr.w	r3, [r9], #4
 8016798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801679c:	fa1f f883 	uxth.w	r8, r3
 80167a0:	fa11 f18b 	uxtah	r1, r1, fp
 80167a4:	0c1b      	lsrs	r3, r3, #16
 80167a6:	eba1 0808 	sub.w	r8, r1, r8
 80167aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80167ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80167b2:	fa1f f888 	uxth.w	r8, r8
 80167b6:	1419      	asrs	r1, r3, #16
 80167b8:	454e      	cmp	r6, r9
 80167ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80167be:	f84a 3b04 	str.w	r3, [sl], #4
 80167c2:	d8e7      	bhi.n	8016794 <__mdiff+0x80>
 80167c4:	1b33      	subs	r3, r6, r4
 80167c6:	3b15      	subs	r3, #21
 80167c8:	f023 0303 	bic.w	r3, r3, #3
 80167cc:	3304      	adds	r3, #4
 80167ce:	3415      	adds	r4, #21
 80167d0:	42a6      	cmp	r6, r4
 80167d2:	bf38      	it	cc
 80167d4:	2304      	movcc	r3, #4
 80167d6:	441d      	add	r5, r3
 80167d8:	4473      	add	r3, lr
 80167da:	469e      	mov	lr, r3
 80167dc:	462e      	mov	r6, r5
 80167de:	4566      	cmp	r6, ip
 80167e0:	d30e      	bcc.n	8016800 <__mdiff+0xec>
 80167e2:	f10c 0203 	add.w	r2, ip, #3
 80167e6:	1b52      	subs	r2, r2, r5
 80167e8:	f022 0203 	bic.w	r2, r2, #3
 80167ec:	3d03      	subs	r5, #3
 80167ee:	45ac      	cmp	ip, r5
 80167f0:	bf38      	it	cc
 80167f2:	2200      	movcc	r2, #0
 80167f4:	441a      	add	r2, r3
 80167f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80167fa:	b17b      	cbz	r3, 801681c <__mdiff+0x108>
 80167fc:	6107      	str	r7, [r0, #16]
 80167fe:	e7a3      	b.n	8016748 <__mdiff+0x34>
 8016800:	f856 8b04 	ldr.w	r8, [r6], #4
 8016804:	fa11 f288 	uxtah	r2, r1, r8
 8016808:	1414      	asrs	r4, r2, #16
 801680a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801680e:	b292      	uxth	r2, r2
 8016810:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016814:	f84e 2b04 	str.w	r2, [lr], #4
 8016818:	1421      	asrs	r1, r4, #16
 801681a:	e7e0      	b.n	80167de <__mdiff+0xca>
 801681c:	3f01      	subs	r7, #1
 801681e:	e7ea      	b.n	80167f6 <__mdiff+0xe2>
 8016820:	08017b7c 	.word	0x08017b7c
 8016824:	08017bfa 	.word	0x08017bfa

08016828 <__d2b>:
 8016828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801682c:	4689      	mov	r9, r1
 801682e:	2101      	movs	r1, #1
 8016830:	ec57 6b10 	vmov	r6, r7, d0
 8016834:	4690      	mov	r8, r2
 8016836:	f7ff fccf 	bl	80161d8 <_Balloc>
 801683a:	4604      	mov	r4, r0
 801683c:	b930      	cbnz	r0, 801684c <__d2b+0x24>
 801683e:	4602      	mov	r2, r0
 8016840:	4b25      	ldr	r3, [pc, #148]	; (80168d8 <__d2b+0xb0>)
 8016842:	4826      	ldr	r0, [pc, #152]	; (80168dc <__d2b+0xb4>)
 8016844:	f240 310a 	movw	r1, #778	; 0x30a
 8016848:	f7fe fd00 	bl	801524c <__assert_func>
 801684c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016854:	bb35      	cbnz	r5, 80168a4 <__d2b+0x7c>
 8016856:	2e00      	cmp	r6, #0
 8016858:	9301      	str	r3, [sp, #4]
 801685a:	d028      	beq.n	80168ae <__d2b+0x86>
 801685c:	4668      	mov	r0, sp
 801685e:	9600      	str	r6, [sp, #0]
 8016860:	f7ff fd82 	bl	8016368 <__lo0bits>
 8016864:	9900      	ldr	r1, [sp, #0]
 8016866:	b300      	cbz	r0, 80168aa <__d2b+0x82>
 8016868:	9a01      	ldr	r2, [sp, #4]
 801686a:	f1c0 0320 	rsb	r3, r0, #32
 801686e:	fa02 f303 	lsl.w	r3, r2, r3
 8016872:	430b      	orrs	r3, r1
 8016874:	40c2      	lsrs	r2, r0
 8016876:	6163      	str	r3, [r4, #20]
 8016878:	9201      	str	r2, [sp, #4]
 801687a:	9b01      	ldr	r3, [sp, #4]
 801687c:	61a3      	str	r3, [r4, #24]
 801687e:	2b00      	cmp	r3, #0
 8016880:	bf14      	ite	ne
 8016882:	2202      	movne	r2, #2
 8016884:	2201      	moveq	r2, #1
 8016886:	6122      	str	r2, [r4, #16]
 8016888:	b1d5      	cbz	r5, 80168c0 <__d2b+0x98>
 801688a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801688e:	4405      	add	r5, r0
 8016890:	f8c9 5000 	str.w	r5, [r9]
 8016894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016898:	f8c8 0000 	str.w	r0, [r8]
 801689c:	4620      	mov	r0, r4
 801689e:	b003      	add	sp, #12
 80168a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168a8:	e7d5      	b.n	8016856 <__d2b+0x2e>
 80168aa:	6161      	str	r1, [r4, #20]
 80168ac:	e7e5      	b.n	801687a <__d2b+0x52>
 80168ae:	a801      	add	r0, sp, #4
 80168b0:	f7ff fd5a 	bl	8016368 <__lo0bits>
 80168b4:	9b01      	ldr	r3, [sp, #4]
 80168b6:	6163      	str	r3, [r4, #20]
 80168b8:	2201      	movs	r2, #1
 80168ba:	6122      	str	r2, [r4, #16]
 80168bc:	3020      	adds	r0, #32
 80168be:	e7e3      	b.n	8016888 <__d2b+0x60>
 80168c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80168c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80168c8:	f8c9 0000 	str.w	r0, [r9]
 80168cc:	6918      	ldr	r0, [r3, #16]
 80168ce:	f7ff fd2b 	bl	8016328 <__hi0bits>
 80168d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80168d6:	e7df      	b.n	8016898 <__d2b+0x70>
 80168d8:	08017b7c 	.word	0x08017b7c
 80168dc:	08017bfa 	.word	0x08017bfa

080168e0 <_calloc_r>:
 80168e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168e2:	fba1 2402 	umull	r2, r4, r1, r2
 80168e6:	b94c      	cbnz	r4, 80168fc <_calloc_r+0x1c>
 80168e8:	4611      	mov	r1, r2
 80168ea:	9201      	str	r2, [sp, #4]
 80168ec:	f7fd ff88 	bl	8014800 <_malloc_r>
 80168f0:	9a01      	ldr	r2, [sp, #4]
 80168f2:	4605      	mov	r5, r0
 80168f4:	b930      	cbnz	r0, 8016904 <_calloc_r+0x24>
 80168f6:	4628      	mov	r0, r5
 80168f8:	b003      	add	sp, #12
 80168fa:	bd30      	pop	{r4, r5, pc}
 80168fc:	220c      	movs	r2, #12
 80168fe:	6002      	str	r2, [r0, #0]
 8016900:	2500      	movs	r5, #0
 8016902:	e7f8      	b.n	80168f6 <_calloc_r+0x16>
 8016904:	4621      	mov	r1, r4
 8016906:	f7fd ff07 	bl	8014718 <memset>
 801690a:	e7f4      	b.n	80168f6 <_calloc_r+0x16>

0801690c <__ssputs_r>:
 801690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016910:	688e      	ldr	r6, [r1, #8]
 8016912:	429e      	cmp	r6, r3
 8016914:	4682      	mov	sl, r0
 8016916:	460c      	mov	r4, r1
 8016918:	4690      	mov	r8, r2
 801691a:	461f      	mov	r7, r3
 801691c:	d838      	bhi.n	8016990 <__ssputs_r+0x84>
 801691e:	898a      	ldrh	r2, [r1, #12]
 8016920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016924:	d032      	beq.n	801698c <__ssputs_r+0x80>
 8016926:	6825      	ldr	r5, [r4, #0]
 8016928:	6909      	ldr	r1, [r1, #16]
 801692a:	eba5 0901 	sub.w	r9, r5, r1
 801692e:	6965      	ldr	r5, [r4, #20]
 8016930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016938:	3301      	adds	r3, #1
 801693a:	444b      	add	r3, r9
 801693c:	106d      	asrs	r5, r5, #1
 801693e:	429d      	cmp	r5, r3
 8016940:	bf38      	it	cc
 8016942:	461d      	movcc	r5, r3
 8016944:	0553      	lsls	r3, r2, #21
 8016946:	d531      	bpl.n	80169ac <__ssputs_r+0xa0>
 8016948:	4629      	mov	r1, r5
 801694a:	f7fd ff59 	bl	8014800 <_malloc_r>
 801694e:	4606      	mov	r6, r0
 8016950:	b950      	cbnz	r0, 8016968 <__ssputs_r+0x5c>
 8016952:	230c      	movs	r3, #12
 8016954:	f8ca 3000 	str.w	r3, [sl]
 8016958:	89a3      	ldrh	r3, [r4, #12]
 801695a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801695e:	81a3      	strh	r3, [r4, #12]
 8016960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016968:	6921      	ldr	r1, [r4, #16]
 801696a:	464a      	mov	r2, r9
 801696c:	f7fd fec6 	bl	80146fc <memcpy>
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801697a:	81a3      	strh	r3, [r4, #12]
 801697c:	6126      	str	r6, [r4, #16]
 801697e:	6165      	str	r5, [r4, #20]
 8016980:	444e      	add	r6, r9
 8016982:	eba5 0509 	sub.w	r5, r5, r9
 8016986:	6026      	str	r6, [r4, #0]
 8016988:	60a5      	str	r5, [r4, #8]
 801698a:	463e      	mov	r6, r7
 801698c:	42be      	cmp	r6, r7
 801698e:	d900      	bls.n	8016992 <__ssputs_r+0x86>
 8016990:	463e      	mov	r6, r7
 8016992:	6820      	ldr	r0, [r4, #0]
 8016994:	4632      	mov	r2, r6
 8016996:	4641      	mov	r1, r8
 8016998:	f000 fce4 	bl	8017364 <memmove>
 801699c:	68a3      	ldr	r3, [r4, #8]
 801699e:	1b9b      	subs	r3, r3, r6
 80169a0:	60a3      	str	r3, [r4, #8]
 80169a2:	6823      	ldr	r3, [r4, #0]
 80169a4:	4433      	add	r3, r6
 80169a6:	6023      	str	r3, [r4, #0]
 80169a8:	2000      	movs	r0, #0
 80169aa:	e7db      	b.n	8016964 <__ssputs_r+0x58>
 80169ac:	462a      	mov	r2, r5
 80169ae:	f000 fcf3 	bl	8017398 <_realloc_r>
 80169b2:	4606      	mov	r6, r0
 80169b4:	2800      	cmp	r0, #0
 80169b6:	d1e1      	bne.n	801697c <__ssputs_r+0x70>
 80169b8:	6921      	ldr	r1, [r4, #16]
 80169ba:	4650      	mov	r0, sl
 80169bc:	f7fd feb4 	bl	8014728 <_free_r>
 80169c0:	e7c7      	b.n	8016952 <__ssputs_r+0x46>
	...

080169c4 <_svfiprintf_r>:
 80169c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	4698      	mov	r8, r3
 80169ca:	898b      	ldrh	r3, [r1, #12]
 80169cc:	061b      	lsls	r3, r3, #24
 80169ce:	b09d      	sub	sp, #116	; 0x74
 80169d0:	4607      	mov	r7, r0
 80169d2:	460d      	mov	r5, r1
 80169d4:	4614      	mov	r4, r2
 80169d6:	d50e      	bpl.n	80169f6 <_svfiprintf_r+0x32>
 80169d8:	690b      	ldr	r3, [r1, #16]
 80169da:	b963      	cbnz	r3, 80169f6 <_svfiprintf_r+0x32>
 80169dc:	2140      	movs	r1, #64	; 0x40
 80169de:	f7fd ff0f 	bl	8014800 <_malloc_r>
 80169e2:	6028      	str	r0, [r5, #0]
 80169e4:	6128      	str	r0, [r5, #16]
 80169e6:	b920      	cbnz	r0, 80169f2 <_svfiprintf_r+0x2e>
 80169e8:	230c      	movs	r3, #12
 80169ea:	603b      	str	r3, [r7, #0]
 80169ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169f0:	e0d1      	b.n	8016b96 <_svfiprintf_r+0x1d2>
 80169f2:	2340      	movs	r3, #64	; 0x40
 80169f4:	616b      	str	r3, [r5, #20]
 80169f6:	2300      	movs	r3, #0
 80169f8:	9309      	str	r3, [sp, #36]	; 0x24
 80169fa:	2320      	movs	r3, #32
 80169fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a04:	2330      	movs	r3, #48	; 0x30
 8016a06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016bb0 <_svfiprintf_r+0x1ec>
 8016a0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a0e:	f04f 0901 	mov.w	r9, #1
 8016a12:	4623      	mov	r3, r4
 8016a14:	469a      	mov	sl, r3
 8016a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a1a:	b10a      	cbz	r2, 8016a20 <_svfiprintf_r+0x5c>
 8016a1c:	2a25      	cmp	r2, #37	; 0x25
 8016a1e:	d1f9      	bne.n	8016a14 <_svfiprintf_r+0x50>
 8016a20:	ebba 0b04 	subs.w	fp, sl, r4
 8016a24:	d00b      	beq.n	8016a3e <_svfiprintf_r+0x7a>
 8016a26:	465b      	mov	r3, fp
 8016a28:	4622      	mov	r2, r4
 8016a2a:	4629      	mov	r1, r5
 8016a2c:	4638      	mov	r0, r7
 8016a2e:	f7ff ff6d 	bl	801690c <__ssputs_r>
 8016a32:	3001      	adds	r0, #1
 8016a34:	f000 80aa 	beq.w	8016b8c <_svfiprintf_r+0x1c8>
 8016a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a3a:	445a      	add	r2, fp
 8016a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8016a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	f000 80a2 	beq.w	8016b8c <_svfiprintf_r+0x1c8>
 8016a48:	2300      	movs	r3, #0
 8016a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a52:	f10a 0a01 	add.w	sl, sl, #1
 8016a56:	9304      	str	r3, [sp, #16]
 8016a58:	9307      	str	r3, [sp, #28]
 8016a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8016a60:	4654      	mov	r4, sl
 8016a62:	2205      	movs	r2, #5
 8016a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a68:	4851      	ldr	r0, [pc, #324]	; (8016bb0 <_svfiprintf_r+0x1ec>)
 8016a6a:	f7e9 fbd1 	bl	8000210 <memchr>
 8016a6e:	9a04      	ldr	r2, [sp, #16]
 8016a70:	b9d8      	cbnz	r0, 8016aaa <_svfiprintf_r+0xe6>
 8016a72:	06d0      	lsls	r0, r2, #27
 8016a74:	bf44      	itt	mi
 8016a76:	2320      	movmi	r3, #32
 8016a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a7c:	0711      	lsls	r1, r2, #28
 8016a7e:	bf44      	itt	mi
 8016a80:	232b      	movmi	r3, #43	; 0x2b
 8016a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a86:	f89a 3000 	ldrb.w	r3, [sl]
 8016a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8016a8c:	d015      	beq.n	8016aba <_svfiprintf_r+0xf6>
 8016a8e:	9a07      	ldr	r2, [sp, #28]
 8016a90:	4654      	mov	r4, sl
 8016a92:	2000      	movs	r0, #0
 8016a94:	f04f 0c0a 	mov.w	ip, #10
 8016a98:	4621      	mov	r1, r4
 8016a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a9e:	3b30      	subs	r3, #48	; 0x30
 8016aa0:	2b09      	cmp	r3, #9
 8016aa2:	d94e      	bls.n	8016b42 <_svfiprintf_r+0x17e>
 8016aa4:	b1b0      	cbz	r0, 8016ad4 <_svfiprintf_r+0x110>
 8016aa6:	9207      	str	r2, [sp, #28]
 8016aa8:	e014      	b.n	8016ad4 <_svfiprintf_r+0x110>
 8016aaa:	eba0 0308 	sub.w	r3, r0, r8
 8016aae:	fa09 f303 	lsl.w	r3, r9, r3
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	9304      	str	r3, [sp, #16]
 8016ab6:	46a2      	mov	sl, r4
 8016ab8:	e7d2      	b.n	8016a60 <_svfiprintf_r+0x9c>
 8016aba:	9b03      	ldr	r3, [sp, #12]
 8016abc:	1d19      	adds	r1, r3, #4
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	9103      	str	r1, [sp, #12]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	bfbb      	ittet	lt
 8016ac6:	425b      	neglt	r3, r3
 8016ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8016acc:	9307      	strge	r3, [sp, #28]
 8016ace:	9307      	strlt	r3, [sp, #28]
 8016ad0:	bfb8      	it	lt
 8016ad2:	9204      	strlt	r2, [sp, #16]
 8016ad4:	7823      	ldrb	r3, [r4, #0]
 8016ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8016ad8:	d10c      	bne.n	8016af4 <_svfiprintf_r+0x130>
 8016ada:	7863      	ldrb	r3, [r4, #1]
 8016adc:	2b2a      	cmp	r3, #42	; 0x2a
 8016ade:	d135      	bne.n	8016b4c <_svfiprintf_r+0x188>
 8016ae0:	9b03      	ldr	r3, [sp, #12]
 8016ae2:	1d1a      	adds	r2, r3, #4
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	9203      	str	r2, [sp, #12]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	bfb8      	it	lt
 8016aec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016af0:	3402      	adds	r4, #2
 8016af2:	9305      	str	r3, [sp, #20]
 8016af4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016bc0 <_svfiprintf_r+0x1fc>
 8016af8:	7821      	ldrb	r1, [r4, #0]
 8016afa:	2203      	movs	r2, #3
 8016afc:	4650      	mov	r0, sl
 8016afe:	f7e9 fb87 	bl	8000210 <memchr>
 8016b02:	b140      	cbz	r0, 8016b16 <_svfiprintf_r+0x152>
 8016b04:	2340      	movs	r3, #64	; 0x40
 8016b06:	eba0 000a 	sub.w	r0, r0, sl
 8016b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8016b0e:	9b04      	ldr	r3, [sp, #16]
 8016b10:	4303      	orrs	r3, r0
 8016b12:	3401      	adds	r4, #1
 8016b14:	9304      	str	r3, [sp, #16]
 8016b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b1a:	4826      	ldr	r0, [pc, #152]	; (8016bb4 <_svfiprintf_r+0x1f0>)
 8016b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b20:	2206      	movs	r2, #6
 8016b22:	f7e9 fb75 	bl	8000210 <memchr>
 8016b26:	2800      	cmp	r0, #0
 8016b28:	d038      	beq.n	8016b9c <_svfiprintf_r+0x1d8>
 8016b2a:	4b23      	ldr	r3, [pc, #140]	; (8016bb8 <_svfiprintf_r+0x1f4>)
 8016b2c:	bb1b      	cbnz	r3, 8016b76 <_svfiprintf_r+0x1b2>
 8016b2e:	9b03      	ldr	r3, [sp, #12]
 8016b30:	3307      	adds	r3, #7
 8016b32:	f023 0307 	bic.w	r3, r3, #7
 8016b36:	3308      	adds	r3, #8
 8016b38:	9303      	str	r3, [sp, #12]
 8016b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b3c:	4433      	add	r3, r6
 8016b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b40:	e767      	b.n	8016a12 <_svfiprintf_r+0x4e>
 8016b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b46:	460c      	mov	r4, r1
 8016b48:	2001      	movs	r0, #1
 8016b4a:	e7a5      	b.n	8016a98 <_svfiprintf_r+0xd4>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	3401      	adds	r4, #1
 8016b50:	9305      	str	r3, [sp, #20]
 8016b52:	4619      	mov	r1, r3
 8016b54:	f04f 0c0a 	mov.w	ip, #10
 8016b58:	4620      	mov	r0, r4
 8016b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b5e:	3a30      	subs	r2, #48	; 0x30
 8016b60:	2a09      	cmp	r2, #9
 8016b62:	d903      	bls.n	8016b6c <_svfiprintf_r+0x1a8>
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d0c5      	beq.n	8016af4 <_svfiprintf_r+0x130>
 8016b68:	9105      	str	r1, [sp, #20]
 8016b6a:	e7c3      	b.n	8016af4 <_svfiprintf_r+0x130>
 8016b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b70:	4604      	mov	r4, r0
 8016b72:	2301      	movs	r3, #1
 8016b74:	e7f0      	b.n	8016b58 <_svfiprintf_r+0x194>
 8016b76:	ab03      	add	r3, sp, #12
 8016b78:	9300      	str	r3, [sp, #0]
 8016b7a:	462a      	mov	r2, r5
 8016b7c:	4b0f      	ldr	r3, [pc, #60]	; (8016bbc <_svfiprintf_r+0x1f8>)
 8016b7e:	a904      	add	r1, sp, #16
 8016b80:	4638      	mov	r0, r7
 8016b82:	f7fd ff51 	bl	8014a28 <_printf_float>
 8016b86:	1c42      	adds	r2, r0, #1
 8016b88:	4606      	mov	r6, r0
 8016b8a:	d1d6      	bne.n	8016b3a <_svfiprintf_r+0x176>
 8016b8c:	89ab      	ldrh	r3, [r5, #12]
 8016b8e:	065b      	lsls	r3, r3, #25
 8016b90:	f53f af2c 	bmi.w	80169ec <_svfiprintf_r+0x28>
 8016b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b96:	b01d      	add	sp, #116	; 0x74
 8016b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b9c:	ab03      	add	r3, sp, #12
 8016b9e:	9300      	str	r3, [sp, #0]
 8016ba0:	462a      	mov	r2, r5
 8016ba2:	4b06      	ldr	r3, [pc, #24]	; (8016bbc <_svfiprintf_r+0x1f8>)
 8016ba4:	a904      	add	r1, sp, #16
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	f7fe f9e2 	bl	8014f70 <_printf_i>
 8016bac:	e7eb      	b.n	8016b86 <_svfiprintf_r+0x1c2>
 8016bae:	bf00      	nop
 8016bb0:	08017d54 	.word	0x08017d54
 8016bb4:	08017d5e 	.word	0x08017d5e
 8016bb8:	08014a29 	.word	0x08014a29
 8016bbc:	0801690d 	.word	0x0801690d
 8016bc0:	08017d5a 	.word	0x08017d5a

08016bc4 <__sfputc_r>:
 8016bc4:	6893      	ldr	r3, [r2, #8]
 8016bc6:	3b01      	subs	r3, #1
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	b410      	push	{r4}
 8016bcc:	6093      	str	r3, [r2, #8]
 8016bce:	da08      	bge.n	8016be2 <__sfputc_r+0x1e>
 8016bd0:	6994      	ldr	r4, [r2, #24]
 8016bd2:	42a3      	cmp	r3, r4
 8016bd4:	db01      	blt.n	8016bda <__sfputc_r+0x16>
 8016bd6:	290a      	cmp	r1, #10
 8016bd8:	d103      	bne.n	8016be2 <__sfputc_r+0x1e>
 8016bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bde:	f000 b98f 	b.w	8016f00 <__swbuf_r>
 8016be2:	6813      	ldr	r3, [r2, #0]
 8016be4:	1c58      	adds	r0, r3, #1
 8016be6:	6010      	str	r0, [r2, #0]
 8016be8:	7019      	strb	r1, [r3, #0]
 8016bea:	4608      	mov	r0, r1
 8016bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bf0:	4770      	bx	lr

08016bf2 <__sfputs_r>:
 8016bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bf4:	4606      	mov	r6, r0
 8016bf6:	460f      	mov	r7, r1
 8016bf8:	4614      	mov	r4, r2
 8016bfa:	18d5      	adds	r5, r2, r3
 8016bfc:	42ac      	cmp	r4, r5
 8016bfe:	d101      	bne.n	8016c04 <__sfputs_r+0x12>
 8016c00:	2000      	movs	r0, #0
 8016c02:	e007      	b.n	8016c14 <__sfputs_r+0x22>
 8016c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c08:	463a      	mov	r2, r7
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f7ff ffda 	bl	8016bc4 <__sfputc_r>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d1f3      	bne.n	8016bfc <__sfputs_r+0xa>
 8016c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c18 <_vfiprintf_r>:
 8016c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c1c:	460d      	mov	r5, r1
 8016c1e:	b09d      	sub	sp, #116	; 0x74
 8016c20:	4614      	mov	r4, r2
 8016c22:	4698      	mov	r8, r3
 8016c24:	4606      	mov	r6, r0
 8016c26:	b118      	cbz	r0, 8016c30 <_vfiprintf_r+0x18>
 8016c28:	6983      	ldr	r3, [r0, #24]
 8016c2a:	b90b      	cbnz	r3, 8016c30 <_vfiprintf_r+0x18>
 8016c2c:	f7ff f9fe 	bl	801602c <__sinit>
 8016c30:	4b89      	ldr	r3, [pc, #548]	; (8016e58 <_vfiprintf_r+0x240>)
 8016c32:	429d      	cmp	r5, r3
 8016c34:	d11b      	bne.n	8016c6e <_vfiprintf_r+0x56>
 8016c36:	6875      	ldr	r5, [r6, #4]
 8016c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c3a:	07d9      	lsls	r1, r3, #31
 8016c3c:	d405      	bmi.n	8016c4a <_vfiprintf_r+0x32>
 8016c3e:	89ab      	ldrh	r3, [r5, #12]
 8016c40:	059a      	lsls	r2, r3, #22
 8016c42:	d402      	bmi.n	8016c4a <_vfiprintf_r+0x32>
 8016c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c46:	f7ff faa6 	bl	8016196 <__retarget_lock_acquire_recursive>
 8016c4a:	89ab      	ldrh	r3, [r5, #12]
 8016c4c:	071b      	lsls	r3, r3, #28
 8016c4e:	d501      	bpl.n	8016c54 <_vfiprintf_r+0x3c>
 8016c50:	692b      	ldr	r3, [r5, #16]
 8016c52:	b9eb      	cbnz	r3, 8016c90 <_vfiprintf_r+0x78>
 8016c54:	4629      	mov	r1, r5
 8016c56:	4630      	mov	r0, r6
 8016c58:	f000 f9c4 	bl	8016fe4 <__swsetup_r>
 8016c5c:	b1c0      	cbz	r0, 8016c90 <_vfiprintf_r+0x78>
 8016c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c60:	07dc      	lsls	r4, r3, #31
 8016c62:	d50e      	bpl.n	8016c82 <_vfiprintf_r+0x6a>
 8016c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c68:	b01d      	add	sp, #116	; 0x74
 8016c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c6e:	4b7b      	ldr	r3, [pc, #492]	; (8016e5c <_vfiprintf_r+0x244>)
 8016c70:	429d      	cmp	r5, r3
 8016c72:	d101      	bne.n	8016c78 <_vfiprintf_r+0x60>
 8016c74:	68b5      	ldr	r5, [r6, #8]
 8016c76:	e7df      	b.n	8016c38 <_vfiprintf_r+0x20>
 8016c78:	4b79      	ldr	r3, [pc, #484]	; (8016e60 <_vfiprintf_r+0x248>)
 8016c7a:	429d      	cmp	r5, r3
 8016c7c:	bf08      	it	eq
 8016c7e:	68f5      	ldreq	r5, [r6, #12]
 8016c80:	e7da      	b.n	8016c38 <_vfiprintf_r+0x20>
 8016c82:	89ab      	ldrh	r3, [r5, #12]
 8016c84:	0598      	lsls	r0, r3, #22
 8016c86:	d4ed      	bmi.n	8016c64 <_vfiprintf_r+0x4c>
 8016c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c8a:	f7ff fa85 	bl	8016198 <__retarget_lock_release_recursive>
 8016c8e:	e7e9      	b.n	8016c64 <_vfiprintf_r+0x4c>
 8016c90:	2300      	movs	r3, #0
 8016c92:	9309      	str	r3, [sp, #36]	; 0x24
 8016c94:	2320      	movs	r3, #32
 8016c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c9e:	2330      	movs	r3, #48	; 0x30
 8016ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016e64 <_vfiprintf_r+0x24c>
 8016ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ca8:	f04f 0901 	mov.w	r9, #1
 8016cac:	4623      	mov	r3, r4
 8016cae:	469a      	mov	sl, r3
 8016cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cb4:	b10a      	cbz	r2, 8016cba <_vfiprintf_r+0xa2>
 8016cb6:	2a25      	cmp	r2, #37	; 0x25
 8016cb8:	d1f9      	bne.n	8016cae <_vfiprintf_r+0x96>
 8016cba:	ebba 0b04 	subs.w	fp, sl, r4
 8016cbe:	d00b      	beq.n	8016cd8 <_vfiprintf_r+0xc0>
 8016cc0:	465b      	mov	r3, fp
 8016cc2:	4622      	mov	r2, r4
 8016cc4:	4629      	mov	r1, r5
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	f7ff ff93 	bl	8016bf2 <__sfputs_r>
 8016ccc:	3001      	adds	r0, #1
 8016cce:	f000 80aa 	beq.w	8016e26 <_vfiprintf_r+0x20e>
 8016cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cd4:	445a      	add	r2, fp
 8016cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8016cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f000 80a2 	beq.w	8016e26 <_vfiprintf_r+0x20e>
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cec:	f10a 0a01 	add.w	sl, sl, #1
 8016cf0:	9304      	str	r3, [sp, #16]
 8016cf2:	9307      	str	r3, [sp, #28]
 8016cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8016cfa:	4654      	mov	r4, sl
 8016cfc:	2205      	movs	r2, #5
 8016cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d02:	4858      	ldr	r0, [pc, #352]	; (8016e64 <_vfiprintf_r+0x24c>)
 8016d04:	f7e9 fa84 	bl	8000210 <memchr>
 8016d08:	9a04      	ldr	r2, [sp, #16]
 8016d0a:	b9d8      	cbnz	r0, 8016d44 <_vfiprintf_r+0x12c>
 8016d0c:	06d1      	lsls	r1, r2, #27
 8016d0e:	bf44      	itt	mi
 8016d10:	2320      	movmi	r3, #32
 8016d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d16:	0713      	lsls	r3, r2, #28
 8016d18:	bf44      	itt	mi
 8016d1a:	232b      	movmi	r3, #43	; 0x2b
 8016d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d20:	f89a 3000 	ldrb.w	r3, [sl]
 8016d24:	2b2a      	cmp	r3, #42	; 0x2a
 8016d26:	d015      	beq.n	8016d54 <_vfiprintf_r+0x13c>
 8016d28:	9a07      	ldr	r2, [sp, #28]
 8016d2a:	4654      	mov	r4, sl
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	f04f 0c0a 	mov.w	ip, #10
 8016d32:	4621      	mov	r1, r4
 8016d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d38:	3b30      	subs	r3, #48	; 0x30
 8016d3a:	2b09      	cmp	r3, #9
 8016d3c:	d94e      	bls.n	8016ddc <_vfiprintf_r+0x1c4>
 8016d3e:	b1b0      	cbz	r0, 8016d6e <_vfiprintf_r+0x156>
 8016d40:	9207      	str	r2, [sp, #28]
 8016d42:	e014      	b.n	8016d6e <_vfiprintf_r+0x156>
 8016d44:	eba0 0308 	sub.w	r3, r0, r8
 8016d48:	fa09 f303 	lsl.w	r3, r9, r3
 8016d4c:	4313      	orrs	r3, r2
 8016d4e:	9304      	str	r3, [sp, #16]
 8016d50:	46a2      	mov	sl, r4
 8016d52:	e7d2      	b.n	8016cfa <_vfiprintf_r+0xe2>
 8016d54:	9b03      	ldr	r3, [sp, #12]
 8016d56:	1d19      	adds	r1, r3, #4
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	9103      	str	r1, [sp, #12]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	bfbb      	ittet	lt
 8016d60:	425b      	neglt	r3, r3
 8016d62:	f042 0202 	orrlt.w	r2, r2, #2
 8016d66:	9307      	strge	r3, [sp, #28]
 8016d68:	9307      	strlt	r3, [sp, #28]
 8016d6a:	bfb8      	it	lt
 8016d6c:	9204      	strlt	r2, [sp, #16]
 8016d6e:	7823      	ldrb	r3, [r4, #0]
 8016d70:	2b2e      	cmp	r3, #46	; 0x2e
 8016d72:	d10c      	bne.n	8016d8e <_vfiprintf_r+0x176>
 8016d74:	7863      	ldrb	r3, [r4, #1]
 8016d76:	2b2a      	cmp	r3, #42	; 0x2a
 8016d78:	d135      	bne.n	8016de6 <_vfiprintf_r+0x1ce>
 8016d7a:	9b03      	ldr	r3, [sp, #12]
 8016d7c:	1d1a      	adds	r2, r3, #4
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	9203      	str	r2, [sp, #12]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	bfb8      	it	lt
 8016d86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d8a:	3402      	adds	r4, #2
 8016d8c:	9305      	str	r3, [sp, #20]
 8016d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016e74 <_vfiprintf_r+0x25c>
 8016d92:	7821      	ldrb	r1, [r4, #0]
 8016d94:	2203      	movs	r2, #3
 8016d96:	4650      	mov	r0, sl
 8016d98:	f7e9 fa3a 	bl	8000210 <memchr>
 8016d9c:	b140      	cbz	r0, 8016db0 <_vfiprintf_r+0x198>
 8016d9e:	2340      	movs	r3, #64	; 0x40
 8016da0:	eba0 000a 	sub.w	r0, r0, sl
 8016da4:	fa03 f000 	lsl.w	r0, r3, r0
 8016da8:	9b04      	ldr	r3, [sp, #16]
 8016daa:	4303      	orrs	r3, r0
 8016dac:	3401      	adds	r4, #1
 8016dae:	9304      	str	r3, [sp, #16]
 8016db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016db4:	482c      	ldr	r0, [pc, #176]	; (8016e68 <_vfiprintf_r+0x250>)
 8016db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dba:	2206      	movs	r2, #6
 8016dbc:	f7e9 fa28 	bl	8000210 <memchr>
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	d03f      	beq.n	8016e44 <_vfiprintf_r+0x22c>
 8016dc4:	4b29      	ldr	r3, [pc, #164]	; (8016e6c <_vfiprintf_r+0x254>)
 8016dc6:	bb1b      	cbnz	r3, 8016e10 <_vfiprintf_r+0x1f8>
 8016dc8:	9b03      	ldr	r3, [sp, #12]
 8016dca:	3307      	adds	r3, #7
 8016dcc:	f023 0307 	bic.w	r3, r3, #7
 8016dd0:	3308      	adds	r3, #8
 8016dd2:	9303      	str	r3, [sp, #12]
 8016dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dd6:	443b      	add	r3, r7
 8016dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8016dda:	e767      	b.n	8016cac <_vfiprintf_r+0x94>
 8016ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016de0:	460c      	mov	r4, r1
 8016de2:	2001      	movs	r0, #1
 8016de4:	e7a5      	b.n	8016d32 <_vfiprintf_r+0x11a>
 8016de6:	2300      	movs	r3, #0
 8016de8:	3401      	adds	r4, #1
 8016dea:	9305      	str	r3, [sp, #20]
 8016dec:	4619      	mov	r1, r3
 8016dee:	f04f 0c0a 	mov.w	ip, #10
 8016df2:	4620      	mov	r0, r4
 8016df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016df8:	3a30      	subs	r2, #48	; 0x30
 8016dfa:	2a09      	cmp	r2, #9
 8016dfc:	d903      	bls.n	8016e06 <_vfiprintf_r+0x1ee>
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d0c5      	beq.n	8016d8e <_vfiprintf_r+0x176>
 8016e02:	9105      	str	r1, [sp, #20]
 8016e04:	e7c3      	b.n	8016d8e <_vfiprintf_r+0x176>
 8016e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	e7f0      	b.n	8016df2 <_vfiprintf_r+0x1da>
 8016e10:	ab03      	add	r3, sp, #12
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	462a      	mov	r2, r5
 8016e16:	4b16      	ldr	r3, [pc, #88]	; (8016e70 <_vfiprintf_r+0x258>)
 8016e18:	a904      	add	r1, sp, #16
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	f7fd fe04 	bl	8014a28 <_printf_float>
 8016e20:	4607      	mov	r7, r0
 8016e22:	1c78      	adds	r0, r7, #1
 8016e24:	d1d6      	bne.n	8016dd4 <_vfiprintf_r+0x1bc>
 8016e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e28:	07d9      	lsls	r1, r3, #31
 8016e2a:	d405      	bmi.n	8016e38 <_vfiprintf_r+0x220>
 8016e2c:	89ab      	ldrh	r3, [r5, #12]
 8016e2e:	059a      	lsls	r2, r3, #22
 8016e30:	d402      	bmi.n	8016e38 <_vfiprintf_r+0x220>
 8016e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e34:	f7ff f9b0 	bl	8016198 <__retarget_lock_release_recursive>
 8016e38:	89ab      	ldrh	r3, [r5, #12]
 8016e3a:	065b      	lsls	r3, r3, #25
 8016e3c:	f53f af12 	bmi.w	8016c64 <_vfiprintf_r+0x4c>
 8016e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e42:	e711      	b.n	8016c68 <_vfiprintf_r+0x50>
 8016e44:	ab03      	add	r3, sp, #12
 8016e46:	9300      	str	r3, [sp, #0]
 8016e48:	462a      	mov	r2, r5
 8016e4a:	4b09      	ldr	r3, [pc, #36]	; (8016e70 <_vfiprintf_r+0x258>)
 8016e4c:	a904      	add	r1, sp, #16
 8016e4e:	4630      	mov	r0, r6
 8016e50:	f7fe f88e 	bl	8014f70 <_printf_i>
 8016e54:	e7e4      	b.n	8016e20 <_vfiprintf_r+0x208>
 8016e56:	bf00      	nop
 8016e58:	08017bb0 	.word	0x08017bb0
 8016e5c:	08017bd0 	.word	0x08017bd0
 8016e60:	08017b90 	.word	0x08017b90
 8016e64:	08017d54 	.word	0x08017d54
 8016e68:	08017d5e 	.word	0x08017d5e
 8016e6c:	08014a29 	.word	0x08014a29
 8016e70:	08016bf3 	.word	0x08016bf3
 8016e74:	08017d5a 	.word	0x08017d5a

08016e78 <__sread>:
 8016e78:	b510      	push	{r4, lr}
 8016e7a:	460c      	mov	r4, r1
 8016e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e80:	f000 faba 	bl	80173f8 <_read_r>
 8016e84:	2800      	cmp	r0, #0
 8016e86:	bfab      	itete	ge
 8016e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8016e8c:	181b      	addge	r3, r3, r0
 8016e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e92:	bfac      	ite	ge
 8016e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e96:	81a3      	strhlt	r3, [r4, #12]
 8016e98:	bd10      	pop	{r4, pc}

08016e9a <__swrite>:
 8016e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9e:	461f      	mov	r7, r3
 8016ea0:	898b      	ldrh	r3, [r1, #12]
 8016ea2:	05db      	lsls	r3, r3, #23
 8016ea4:	4605      	mov	r5, r0
 8016ea6:	460c      	mov	r4, r1
 8016ea8:	4616      	mov	r6, r2
 8016eaa:	d505      	bpl.n	8016eb8 <__swrite+0x1e>
 8016eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eb0:	2302      	movs	r3, #2
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	f000 f9de 	bl	8017274 <_lseek_r>
 8016eb8:	89a3      	ldrh	r3, [r4, #12]
 8016eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016ec2:	81a3      	strh	r3, [r4, #12]
 8016ec4:	4632      	mov	r2, r6
 8016ec6:	463b      	mov	r3, r7
 8016ec8:	4628      	mov	r0, r5
 8016eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ece:	f000 b877 	b.w	8016fc0 <_write_r>

08016ed2 <__sseek>:
 8016ed2:	b510      	push	{r4, lr}
 8016ed4:	460c      	mov	r4, r1
 8016ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eda:	f000 f9cb 	bl	8017274 <_lseek_r>
 8016ede:	1c43      	adds	r3, r0, #1
 8016ee0:	89a3      	ldrh	r3, [r4, #12]
 8016ee2:	bf15      	itete	ne
 8016ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016eee:	81a3      	strheq	r3, [r4, #12]
 8016ef0:	bf18      	it	ne
 8016ef2:	81a3      	strhne	r3, [r4, #12]
 8016ef4:	bd10      	pop	{r4, pc}

08016ef6 <__sclose>:
 8016ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016efa:	f000 b8e9 	b.w	80170d0 <_close_r>
	...

08016f00 <__swbuf_r>:
 8016f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f02:	460e      	mov	r6, r1
 8016f04:	4614      	mov	r4, r2
 8016f06:	4605      	mov	r5, r0
 8016f08:	b118      	cbz	r0, 8016f12 <__swbuf_r+0x12>
 8016f0a:	6983      	ldr	r3, [r0, #24]
 8016f0c:	b90b      	cbnz	r3, 8016f12 <__swbuf_r+0x12>
 8016f0e:	f7ff f88d 	bl	801602c <__sinit>
 8016f12:	4b21      	ldr	r3, [pc, #132]	; (8016f98 <__swbuf_r+0x98>)
 8016f14:	429c      	cmp	r4, r3
 8016f16:	d12b      	bne.n	8016f70 <__swbuf_r+0x70>
 8016f18:	686c      	ldr	r4, [r5, #4]
 8016f1a:	69a3      	ldr	r3, [r4, #24]
 8016f1c:	60a3      	str	r3, [r4, #8]
 8016f1e:	89a3      	ldrh	r3, [r4, #12]
 8016f20:	071a      	lsls	r2, r3, #28
 8016f22:	d52f      	bpl.n	8016f84 <__swbuf_r+0x84>
 8016f24:	6923      	ldr	r3, [r4, #16]
 8016f26:	b36b      	cbz	r3, 8016f84 <__swbuf_r+0x84>
 8016f28:	6923      	ldr	r3, [r4, #16]
 8016f2a:	6820      	ldr	r0, [r4, #0]
 8016f2c:	1ac0      	subs	r0, r0, r3
 8016f2e:	6963      	ldr	r3, [r4, #20]
 8016f30:	b2f6      	uxtb	r6, r6
 8016f32:	4283      	cmp	r3, r0
 8016f34:	4637      	mov	r7, r6
 8016f36:	dc04      	bgt.n	8016f42 <__swbuf_r+0x42>
 8016f38:	4621      	mov	r1, r4
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	f000 f95e 	bl	80171fc <_fflush_r>
 8016f40:	bb30      	cbnz	r0, 8016f90 <__swbuf_r+0x90>
 8016f42:	68a3      	ldr	r3, [r4, #8]
 8016f44:	3b01      	subs	r3, #1
 8016f46:	60a3      	str	r3, [r4, #8]
 8016f48:	6823      	ldr	r3, [r4, #0]
 8016f4a:	1c5a      	adds	r2, r3, #1
 8016f4c:	6022      	str	r2, [r4, #0]
 8016f4e:	701e      	strb	r6, [r3, #0]
 8016f50:	6963      	ldr	r3, [r4, #20]
 8016f52:	3001      	adds	r0, #1
 8016f54:	4283      	cmp	r3, r0
 8016f56:	d004      	beq.n	8016f62 <__swbuf_r+0x62>
 8016f58:	89a3      	ldrh	r3, [r4, #12]
 8016f5a:	07db      	lsls	r3, r3, #31
 8016f5c:	d506      	bpl.n	8016f6c <__swbuf_r+0x6c>
 8016f5e:	2e0a      	cmp	r6, #10
 8016f60:	d104      	bne.n	8016f6c <__swbuf_r+0x6c>
 8016f62:	4621      	mov	r1, r4
 8016f64:	4628      	mov	r0, r5
 8016f66:	f000 f949 	bl	80171fc <_fflush_r>
 8016f6a:	b988      	cbnz	r0, 8016f90 <__swbuf_r+0x90>
 8016f6c:	4638      	mov	r0, r7
 8016f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f70:	4b0a      	ldr	r3, [pc, #40]	; (8016f9c <__swbuf_r+0x9c>)
 8016f72:	429c      	cmp	r4, r3
 8016f74:	d101      	bne.n	8016f7a <__swbuf_r+0x7a>
 8016f76:	68ac      	ldr	r4, [r5, #8]
 8016f78:	e7cf      	b.n	8016f1a <__swbuf_r+0x1a>
 8016f7a:	4b09      	ldr	r3, [pc, #36]	; (8016fa0 <__swbuf_r+0xa0>)
 8016f7c:	429c      	cmp	r4, r3
 8016f7e:	bf08      	it	eq
 8016f80:	68ec      	ldreq	r4, [r5, #12]
 8016f82:	e7ca      	b.n	8016f1a <__swbuf_r+0x1a>
 8016f84:	4621      	mov	r1, r4
 8016f86:	4628      	mov	r0, r5
 8016f88:	f000 f82c 	bl	8016fe4 <__swsetup_r>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d0cb      	beq.n	8016f28 <__swbuf_r+0x28>
 8016f90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f94:	e7ea      	b.n	8016f6c <__swbuf_r+0x6c>
 8016f96:	bf00      	nop
 8016f98:	08017bb0 	.word	0x08017bb0
 8016f9c:	08017bd0 	.word	0x08017bd0
 8016fa0:	08017b90 	.word	0x08017b90

08016fa4 <__ascii_wctomb>:
 8016fa4:	b149      	cbz	r1, 8016fba <__ascii_wctomb+0x16>
 8016fa6:	2aff      	cmp	r2, #255	; 0xff
 8016fa8:	bf85      	ittet	hi
 8016faa:	238a      	movhi	r3, #138	; 0x8a
 8016fac:	6003      	strhi	r3, [r0, #0]
 8016fae:	700a      	strbls	r2, [r1, #0]
 8016fb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016fb4:	bf98      	it	ls
 8016fb6:	2001      	movls	r0, #1
 8016fb8:	4770      	bx	lr
 8016fba:	4608      	mov	r0, r1
 8016fbc:	4770      	bx	lr
	...

08016fc0 <_write_r>:
 8016fc0:	b538      	push	{r3, r4, r5, lr}
 8016fc2:	4d07      	ldr	r5, [pc, #28]	; (8016fe0 <_write_r+0x20>)
 8016fc4:	4604      	mov	r4, r0
 8016fc6:	4608      	mov	r0, r1
 8016fc8:	4611      	mov	r1, r2
 8016fca:	2200      	movs	r2, #0
 8016fcc:	602a      	str	r2, [r5, #0]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	f000 fad8 	bl	8017584 <_write>
 8016fd4:	1c43      	adds	r3, r0, #1
 8016fd6:	d102      	bne.n	8016fde <_write_r+0x1e>
 8016fd8:	682b      	ldr	r3, [r5, #0]
 8016fda:	b103      	cbz	r3, 8016fde <_write_r+0x1e>
 8016fdc:	6023      	str	r3, [r4, #0]
 8016fde:	bd38      	pop	{r3, r4, r5, pc}
 8016fe0:	20002f68 	.word	0x20002f68

08016fe4 <__swsetup_r>:
 8016fe4:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <__swsetup_r+0xcc>)
 8016fe6:	b570      	push	{r4, r5, r6, lr}
 8016fe8:	681d      	ldr	r5, [r3, #0]
 8016fea:	4606      	mov	r6, r0
 8016fec:	460c      	mov	r4, r1
 8016fee:	b125      	cbz	r5, 8016ffa <__swsetup_r+0x16>
 8016ff0:	69ab      	ldr	r3, [r5, #24]
 8016ff2:	b913      	cbnz	r3, 8016ffa <__swsetup_r+0x16>
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f7ff f819 	bl	801602c <__sinit>
 8016ffa:	4b2e      	ldr	r3, [pc, #184]	; (80170b4 <__swsetup_r+0xd0>)
 8016ffc:	429c      	cmp	r4, r3
 8016ffe:	d10f      	bne.n	8017020 <__swsetup_r+0x3c>
 8017000:	686c      	ldr	r4, [r5, #4]
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017008:	0719      	lsls	r1, r3, #28
 801700a:	d42c      	bmi.n	8017066 <__swsetup_r+0x82>
 801700c:	06dd      	lsls	r5, r3, #27
 801700e:	d411      	bmi.n	8017034 <__swsetup_r+0x50>
 8017010:	2309      	movs	r3, #9
 8017012:	6033      	str	r3, [r6, #0]
 8017014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017018:	81a3      	strh	r3, [r4, #12]
 801701a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801701e:	e03e      	b.n	801709e <__swsetup_r+0xba>
 8017020:	4b25      	ldr	r3, [pc, #148]	; (80170b8 <__swsetup_r+0xd4>)
 8017022:	429c      	cmp	r4, r3
 8017024:	d101      	bne.n	801702a <__swsetup_r+0x46>
 8017026:	68ac      	ldr	r4, [r5, #8]
 8017028:	e7eb      	b.n	8017002 <__swsetup_r+0x1e>
 801702a:	4b24      	ldr	r3, [pc, #144]	; (80170bc <__swsetup_r+0xd8>)
 801702c:	429c      	cmp	r4, r3
 801702e:	bf08      	it	eq
 8017030:	68ec      	ldreq	r4, [r5, #12]
 8017032:	e7e6      	b.n	8017002 <__swsetup_r+0x1e>
 8017034:	0758      	lsls	r0, r3, #29
 8017036:	d512      	bpl.n	801705e <__swsetup_r+0x7a>
 8017038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801703a:	b141      	cbz	r1, 801704e <__swsetup_r+0x6a>
 801703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017040:	4299      	cmp	r1, r3
 8017042:	d002      	beq.n	801704a <__swsetup_r+0x66>
 8017044:	4630      	mov	r0, r6
 8017046:	f7fd fb6f 	bl	8014728 <_free_r>
 801704a:	2300      	movs	r3, #0
 801704c:	6363      	str	r3, [r4, #52]	; 0x34
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017054:	81a3      	strh	r3, [r4, #12]
 8017056:	2300      	movs	r3, #0
 8017058:	6063      	str	r3, [r4, #4]
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	89a3      	ldrh	r3, [r4, #12]
 8017060:	f043 0308 	orr.w	r3, r3, #8
 8017064:	81a3      	strh	r3, [r4, #12]
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	b94b      	cbnz	r3, 801707e <__swsetup_r+0x9a>
 801706a:	89a3      	ldrh	r3, [r4, #12]
 801706c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017074:	d003      	beq.n	801707e <__swsetup_r+0x9a>
 8017076:	4621      	mov	r1, r4
 8017078:	4630      	mov	r0, r6
 801707a:	f000 f933 	bl	80172e4 <__smakebuf_r>
 801707e:	89a0      	ldrh	r0, [r4, #12]
 8017080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017084:	f010 0301 	ands.w	r3, r0, #1
 8017088:	d00a      	beq.n	80170a0 <__swsetup_r+0xbc>
 801708a:	2300      	movs	r3, #0
 801708c:	60a3      	str	r3, [r4, #8]
 801708e:	6963      	ldr	r3, [r4, #20]
 8017090:	425b      	negs	r3, r3
 8017092:	61a3      	str	r3, [r4, #24]
 8017094:	6923      	ldr	r3, [r4, #16]
 8017096:	b943      	cbnz	r3, 80170aa <__swsetup_r+0xc6>
 8017098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801709c:	d1ba      	bne.n	8017014 <__swsetup_r+0x30>
 801709e:	bd70      	pop	{r4, r5, r6, pc}
 80170a0:	0781      	lsls	r1, r0, #30
 80170a2:	bf58      	it	pl
 80170a4:	6963      	ldrpl	r3, [r4, #20]
 80170a6:	60a3      	str	r3, [r4, #8]
 80170a8:	e7f4      	b.n	8017094 <__swsetup_r+0xb0>
 80170aa:	2000      	movs	r0, #0
 80170ac:	e7f7      	b.n	801709e <__swsetup_r+0xba>
 80170ae:	bf00      	nop
 80170b0:	20000184 	.word	0x20000184
 80170b4:	08017bb0 	.word	0x08017bb0
 80170b8:	08017bd0 	.word	0x08017bd0
 80170bc:	08017b90 	.word	0x08017b90

080170c0 <abort>:
 80170c0:	b508      	push	{r3, lr}
 80170c2:	2006      	movs	r0, #6
 80170c4:	f000 f9d2 	bl	801746c <raise>
 80170c8:	2001      	movs	r0, #1
 80170ca:	f000 fa63 	bl	8017594 <_exit>
	...

080170d0 <_close_r>:
 80170d0:	b538      	push	{r3, r4, r5, lr}
 80170d2:	4d06      	ldr	r5, [pc, #24]	; (80170ec <_close_r+0x1c>)
 80170d4:	2300      	movs	r3, #0
 80170d6:	4604      	mov	r4, r0
 80170d8:	4608      	mov	r0, r1
 80170da:	602b      	str	r3, [r5, #0]
 80170dc:	f000 fa0c 	bl	80174f8 <_close>
 80170e0:	1c43      	adds	r3, r0, #1
 80170e2:	d102      	bne.n	80170ea <_close_r+0x1a>
 80170e4:	682b      	ldr	r3, [r5, #0]
 80170e6:	b103      	cbz	r3, 80170ea <_close_r+0x1a>
 80170e8:	6023      	str	r3, [r4, #0]
 80170ea:	bd38      	pop	{r3, r4, r5, pc}
 80170ec:	20002f68 	.word	0x20002f68

080170f0 <__sflush_r>:
 80170f0:	898a      	ldrh	r2, [r1, #12]
 80170f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170f6:	4605      	mov	r5, r0
 80170f8:	0710      	lsls	r0, r2, #28
 80170fa:	460c      	mov	r4, r1
 80170fc:	d458      	bmi.n	80171b0 <__sflush_r+0xc0>
 80170fe:	684b      	ldr	r3, [r1, #4]
 8017100:	2b00      	cmp	r3, #0
 8017102:	dc05      	bgt.n	8017110 <__sflush_r+0x20>
 8017104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017106:	2b00      	cmp	r3, #0
 8017108:	dc02      	bgt.n	8017110 <__sflush_r+0x20>
 801710a:	2000      	movs	r0, #0
 801710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017112:	2e00      	cmp	r6, #0
 8017114:	d0f9      	beq.n	801710a <__sflush_r+0x1a>
 8017116:	2300      	movs	r3, #0
 8017118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801711c:	682f      	ldr	r7, [r5, #0]
 801711e:	602b      	str	r3, [r5, #0]
 8017120:	d032      	beq.n	8017188 <__sflush_r+0x98>
 8017122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017124:	89a3      	ldrh	r3, [r4, #12]
 8017126:	075a      	lsls	r2, r3, #29
 8017128:	d505      	bpl.n	8017136 <__sflush_r+0x46>
 801712a:	6863      	ldr	r3, [r4, #4]
 801712c:	1ac0      	subs	r0, r0, r3
 801712e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017130:	b10b      	cbz	r3, 8017136 <__sflush_r+0x46>
 8017132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017134:	1ac0      	subs	r0, r0, r3
 8017136:	2300      	movs	r3, #0
 8017138:	4602      	mov	r2, r0
 801713a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801713c:	6a21      	ldr	r1, [r4, #32]
 801713e:	4628      	mov	r0, r5
 8017140:	47b0      	blx	r6
 8017142:	1c43      	adds	r3, r0, #1
 8017144:	89a3      	ldrh	r3, [r4, #12]
 8017146:	d106      	bne.n	8017156 <__sflush_r+0x66>
 8017148:	6829      	ldr	r1, [r5, #0]
 801714a:	291d      	cmp	r1, #29
 801714c:	d82c      	bhi.n	80171a8 <__sflush_r+0xb8>
 801714e:	4a2a      	ldr	r2, [pc, #168]	; (80171f8 <__sflush_r+0x108>)
 8017150:	40ca      	lsrs	r2, r1
 8017152:	07d6      	lsls	r6, r2, #31
 8017154:	d528      	bpl.n	80171a8 <__sflush_r+0xb8>
 8017156:	2200      	movs	r2, #0
 8017158:	6062      	str	r2, [r4, #4]
 801715a:	04d9      	lsls	r1, r3, #19
 801715c:	6922      	ldr	r2, [r4, #16]
 801715e:	6022      	str	r2, [r4, #0]
 8017160:	d504      	bpl.n	801716c <__sflush_r+0x7c>
 8017162:	1c42      	adds	r2, r0, #1
 8017164:	d101      	bne.n	801716a <__sflush_r+0x7a>
 8017166:	682b      	ldr	r3, [r5, #0]
 8017168:	b903      	cbnz	r3, 801716c <__sflush_r+0x7c>
 801716a:	6560      	str	r0, [r4, #84]	; 0x54
 801716c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801716e:	602f      	str	r7, [r5, #0]
 8017170:	2900      	cmp	r1, #0
 8017172:	d0ca      	beq.n	801710a <__sflush_r+0x1a>
 8017174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017178:	4299      	cmp	r1, r3
 801717a:	d002      	beq.n	8017182 <__sflush_r+0x92>
 801717c:	4628      	mov	r0, r5
 801717e:	f7fd fad3 	bl	8014728 <_free_r>
 8017182:	2000      	movs	r0, #0
 8017184:	6360      	str	r0, [r4, #52]	; 0x34
 8017186:	e7c1      	b.n	801710c <__sflush_r+0x1c>
 8017188:	6a21      	ldr	r1, [r4, #32]
 801718a:	2301      	movs	r3, #1
 801718c:	4628      	mov	r0, r5
 801718e:	47b0      	blx	r6
 8017190:	1c41      	adds	r1, r0, #1
 8017192:	d1c7      	bne.n	8017124 <__sflush_r+0x34>
 8017194:	682b      	ldr	r3, [r5, #0]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d0c4      	beq.n	8017124 <__sflush_r+0x34>
 801719a:	2b1d      	cmp	r3, #29
 801719c:	d001      	beq.n	80171a2 <__sflush_r+0xb2>
 801719e:	2b16      	cmp	r3, #22
 80171a0:	d101      	bne.n	80171a6 <__sflush_r+0xb6>
 80171a2:	602f      	str	r7, [r5, #0]
 80171a4:	e7b1      	b.n	801710a <__sflush_r+0x1a>
 80171a6:	89a3      	ldrh	r3, [r4, #12]
 80171a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171ac:	81a3      	strh	r3, [r4, #12]
 80171ae:	e7ad      	b.n	801710c <__sflush_r+0x1c>
 80171b0:	690f      	ldr	r7, [r1, #16]
 80171b2:	2f00      	cmp	r7, #0
 80171b4:	d0a9      	beq.n	801710a <__sflush_r+0x1a>
 80171b6:	0793      	lsls	r3, r2, #30
 80171b8:	680e      	ldr	r6, [r1, #0]
 80171ba:	bf08      	it	eq
 80171bc:	694b      	ldreq	r3, [r1, #20]
 80171be:	600f      	str	r7, [r1, #0]
 80171c0:	bf18      	it	ne
 80171c2:	2300      	movne	r3, #0
 80171c4:	eba6 0807 	sub.w	r8, r6, r7
 80171c8:	608b      	str	r3, [r1, #8]
 80171ca:	f1b8 0f00 	cmp.w	r8, #0
 80171ce:	dd9c      	ble.n	801710a <__sflush_r+0x1a>
 80171d0:	6a21      	ldr	r1, [r4, #32]
 80171d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80171d4:	4643      	mov	r3, r8
 80171d6:	463a      	mov	r2, r7
 80171d8:	4628      	mov	r0, r5
 80171da:	47b0      	blx	r6
 80171dc:	2800      	cmp	r0, #0
 80171de:	dc06      	bgt.n	80171ee <__sflush_r+0xfe>
 80171e0:	89a3      	ldrh	r3, [r4, #12]
 80171e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171e6:	81a3      	strh	r3, [r4, #12]
 80171e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171ec:	e78e      	b.n	801710c <__sflush_r+0x1c>
 80171ee:	4407      	add	r7, r0
 80171f0:	eba8 0800 	sub.w	r8, r8, r0
 80171f4:	e7e9      	b.n	80171ca <__sflush_r+0xda>
 80171f6:	bf00      	nop
 80171f8:	20400001 	.word	0x20400001

080171fc <_fflush_r>:
 80171fc:	b538      	push	{r3, r4, r5, lr}
 80171fe:	690b      	ldr	r3, [r1, #16]
 8017200:	4605      	mov	r5, r0
 8017202:	460c      	mov	r4, r1
 8017204:	b913      	cbnz	r3, 801720c <_fflush_r+0x10>
 8017206:	2500      	movs	r5, #0
 8017208:	4628      	mov	r0, r5
 801720a:	bd38      	pop	{r3, r4, r5, pc}
 801720c:	b118      	cbz	r0, 8017216 <_fflush_r+0x1a>
 801720e:	6983      	ldr	r3, [r0, #24]
 8017210:	b90b      	cbnz	r3, 8017216 <_fflush_r+0x1a>
 8017212:	f7fe ff0b 	bl	801602c <__sinit>
 8017216:	4b14      	ldr	r3, [pc, #80]	; (8017268 <_fflush_r+0x6c>)
 8017218:	429c      	cmp	r4, r3
 801721a:	d11b      	bne.n	8017254 <_fflush_r+0x58>
 801721c:	686c      	ldr	r4, [r5, #4]
 801721e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d0ef      	beq.n	8017206 <_fflush_r+0xa>
 8017226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017228:	07d0      	lsls	r0, r2, #31
 801722a:	d404      	bmi.n	8017236 <_fflush_r+0x3a>
 801722c:	0599      	lsls	r1, r3, #22
 801722e:	d402      	bmi.n	8017236 <_fflush_r+0x3a>
 8017230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017232:	f7fe ffb0 	bl	8016196 <__retarget_lock_acquire_recursive>
 8017236:	4628      	mov	r0, r5
 8017238:	4621      	mov	r1, r4
 801723a:	f7ff ff59 	bl	80170f0 <__sflush_r>
 801723e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017240:	07da      	lsls	r2, r3, #31
 8017242:	4605      	mov	r5, r0
 8017244:	d4e0      	bmi.n	8017208 <_fflush_r+0xc>
 8017246:	89a3      	ldrh	r3, [r4, #12]
 8017248:	059b      	lsls	r3, r3, #22
 801724a:	d4dd      	bmi.n	8017208 <_fflush_r+0xc>
 801724c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801724e:	f7fe ffa3 	bl	8016198 <__retarget_lock_release_recursive>
 8017252:	e7d9      	b.n	8017208 <_fflush_r+0xc>
 8017254:	4b05      	ldr	r3, [pc, #20]	; (801726c <_fflush_r+0x70>)
 8017256:	429c      	cmp	r4, r3
 8017258:	d101      	bne.n	801725e <_fflush_r+0x62>
 801725a:	68ac      	ldr	r4, [r5, #8]
 801725c:	e7df      	b.n	801721e <_fflush_r+0x22>
 801725e:	4b04      	ldr	r3, [pc, #16]	; (8017270 <_fflush_r+0x74>)
 8017260:	429c      	cmp	r4, r3
 8017262:	bf08      	it	eq
 8017264:	68ec      	ldreq	r4, [r5, #12]
 8017266:	e7da      	b.n	801721e <_fflush_r+0x22>
 8017268:	08017bb0 	.word	0x08017bb0
 801726c:	08017bd0 	.word	0x08017bd0
 8017270:	08017b90 	.word	0x08017b90

08017274 <_lseek_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	4d07      	ldr	r5, [pc, #28]	; (8017294 <_lseek_r+0x20>)
 8017278:	4604      	mov	r4, r0
 801727a:	4608      	mov	r0, r1
 801727c:	4611      	mov	r1, r2
 801727e:	2200      	movs	r2, #0
 8017280:	602a      	str	r2, [r5, #0]
 8017282:	461a      	mov	r2, r3
 8017284:	f000 f960 	bl	8017548 <_lseek>
 8017288:	1c43      	adds	r3, r0, #1
 801728a:	d102      	bne.n	8017292 <_lseek_r+0x1e>
 801728c:	682b      	ldr	r3, [r5, #0]
 801728e:	b103      	cbz	r3, 8017292 <_lseek_r+0x1e>
 8017290:	6023      	str	r3, [r4, #0]
 8017292:	bd38      	pop	{r3, r4, r5, pc}
 8017294:	20002f68 	.word	0x20002f68

08017298 <__swhatbuf_r>:
 8017298:	b570      	push	{r4, r5, r6, lr}
 801729a:	460e      	mov	r6, r1
 801729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a0:	2900      	cmp	r1, #0
 80172a2:	b096      	sub	sp, #88	; 0x58
 80172a4:	4614      	mov	r4, r2
 80172a6:	461d      	mov	r5, r3
 80172a8:	da08      	bge.n	80172bc <__swhatbuf_r+0x24>
 80172aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80172ae:	2200      	movs	r2, #0
 80172b0:	602a      	str	r2, [r5, #0]
 80172b2:	061a      	lsls	r2, r3, #24
 80172b4:	d410      	bmi.n	80172d8 <__swhatbuf_r+0x40>
 80172b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172ba:	e00e      	b.n	80172da <__swhatbuf_r+0x42>
 80172bc:	466a      	mov	r2, sp
 80172be:	f000 f8f1 	bl	80174a4 <_fstat_r>
 80172c2:	2800      	cmp	r0, #0
 80172c4:	dbf1      	blt.n	80172aa <__swhatbuf_r+0x12>
 80172c6:	9a01      	ldr	r2, [sp, #4]
 80172c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172d0:	425a      	negs	r2, r3
 80172d2:	415a      	adcs	r2, r3
 80172d4:	602a      	str	r2, [r5, #0]
 80172d6:	e7ee      	b.n	80172b6 <__swhatbuf_r+0x1e>
 80172d8:	2340      	movs	r3, #64	; 0x40
 80172da:	2000      	movs	r0, #0
 80172dc:	6023      	str	r3, [r4, #0]
 80172de:	b016      	add	sp, #88	; 0x58
 80172e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080172e4 <__smakebuf_r>:
 80172e4:	898b      	ldrh	r3, [r1, #12]
 80172e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172e8:	079d      	lsls	r5, r3, #30
 80172ea:	4606      	mov	r6, r0
 80172ec:	460c      	mov	r4, r1
 80172ee:	d507      	bpl.n	8017300 <__smakebuf_r+0x1c>
 80172f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80172f4:	6023      	str	r3, [r4, #0]
 80172f6:	6123      	str	r3, [r4, #16]
 80172f8:	2301      	movs	r3, #1
 80172fa:	6163      	str	r3, [r4, #20]
 80172fc:	b002      	add	sp, #8
 80172fe:	bd70      	pop	{r4, r5, r6, pc}
 8017300:	ab01      	add	r3, sp, #4
 8017302:	466a      	mov	r2, sp
 8017304:	f7ff ffc8 	bl	8017298 <__swhatbuf_r>
 8017308:	9900      	ldr	r1, [sp, #0]
 801730a:	4605      	mov	r5, r0
 801730c:	4630      	mov	r0, r6
 801730e:	f7fd fa77 	bl	8014800 <_malloc_r>
 8017312:	b948      	cbnz	r0, 8017328 <__smakebuf_r+0x44>
 8017314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017318:	059a      	lsls	r2, r3, #22
 801731a:	d4ef      	bmi.n	80172fc <__smakebuf_r+0x18>
 801731c:	f023 0303 	bic.w	r3, r3, #3
 8017320:	f043 0302 	orr.w	r3, r3, #2
 8017324:	81a3      	strh	r3, [r4, #12]
 8017326:	e7e3      	b.n	80172f0 <__smakebuf_r+0xc>
 8017328:	4b0d      	ldr	r3, [pc, #52]	; (8017360 <__smakebuf_r+0x7c>)
 801732a:	62b3      	str	r3, [r6, #40]	; 0x28
 801732c:	89a3      	ldrh	r3, [r4, #12]
 801732e:	6020      	str	r0, [r4, #0]
 8017330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017334:	81a3      	strh	r3, [r4, #12]
 8017336:	9b00      	ldr	r3, [sp, #0]
 8017338:	6163      	str	r3, [r4, #20]
 801733a:	9b01      	ldr	r3, [sp, #4]
 801733c:	6120      	str	r0, [r4, #16]
 801733e:	b15b      	cbz	r3, 8017358 <__smakebuf_r+0x74>
 8017340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017344:	4630      	mov	r0, r6
 8017346:	f000 f8bf 	bl	80174c8 <_isatty_r>
 801734a:	b128      	cbz	r0, 8017358 <__smakebuf_r+0x74>
 801734c:	89a3      	ldrh	r3, [r4, #12]
 801734e:	f023 0303 	bic.w	r3, r3, #3
 8017352:	f043 0301 	orr.w	r3, r3, #1
 8017356:	81a3      	strh	r3, [r4, #12]
 8017358:	89a0      	ldrh	r0, [r4, #12]
 801735a:	4305      	orrs	r5, r0
 801735c:	81a5      	strh	r5, [r4, #12]
 801735e:	e7cd      	b.n	80172fc <__smakebuf_r+0x18>
 8017360:	08015fc5 	.word	0x08015fc5

08017364 <memmove>:
 8017364:	4288      	cmp	r0, r1
 8017366:	b510      	push	{r4, lr}
 8017368:	eb01 0402 	add.w	r4, r1, r2
 801736c:	d902      	bls.n	8017374 <memmove+0x10>
 801736e:	4284      	cmp	r4, r0
 8017370:	4623      	mov	r3, r4
 8017372:	d807      	bhi.n	8017384 <memmove+0x20>
 8017374:	1e43      	subs	r3, r0, #1
 8017376:	42a1      	cmp	r1, r4
 8017378:	d008      	beq.n	801738c <memmove+0x28>
 801737a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801737e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017382:	e7f8      	b.n	8017376 <memmove+0x12>
 8017384:	4402      	add	r2, r0
 8017386:	4601      	mov	r1, r0
 8017388:	428a      	cmp	r2, r1
 801738a:	d100      	bne.n	801738e <memmove+0x2a>
 801738c:	bd10      	pop	{r4, pc}
 801738e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017396:	e7f7      	b.n	8017388 <memmove+0x24>

08017398 <_realloc_r>:
 8017398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739c:	4680      	mov	r8, r0
 801739e:	4614      	mov	r4, r2
 80173a0:	460e      	mov	r6, r1
 80173a2:	b921      	cbnz	r1, 80173ae <_realloc_r+0x16>
 80173a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173a8:	4611      	mov	r1, r2
 80173aa:	f7fd ba29 	b.w	8014800 <_malloc_r>
 80173ae:	b92a      	cbnz	r2, 80173bc <_realloc_r+0x24>
 80173b0:	f7fd f9ba 	bl	8014728 <_free_r>
 80173b4:	4625      	mov	r5, r4
 80173b6:	4628      	mov	r0, r5
 80173b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173bc:	f000 f894 	bl	80174e8 <_malloc_usable_size_r>
 80173c0:	4284      	cmp	r4, r0
 80173c2:	4607      	mov	r7, r0
 80173c4:	d802      	bhi.n	80173cc <_realloc_r+0x34>
 80173c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80173ca:	d812      	bhi.n	80173f2 <_realloc_r+0x5a>
 80173cc:	4621      	mov	r1, r4
 80173ce:	4640      	mov	r0, r8
 80173d0:	f7fd fa16 	bl	8014800 <_malloc_r>
 80173d4:	4605      	mov	r5, r0
 80173d6:	2800      	cmp	r0, #0
 80173d8:	d0ed      	beq.n	80173b6 <_realloc_r+0x1e>
 80173da:	42bc      	cmp	r4, r7
 80173dc:	4622      	mov	r2, r4
 80173de:	4631      	mov	r1, r6
 80173e0:	bf28      	it	cs
 80173e2:	463a      	movcs	r2, r7
 80173e4:	f7fd f98a 	bl	80146fc <memcpy>
 80173e8:	4631      	mov	r1, r6
 80173ea:	4640      	mov	r0, r8
 80173ec:	f7fd f99c 	bl	8014728 <_free_r>
 80173f0:	e7e1      	b.n	80173b6 <_realloc_r+0x1e>
 80173f2:	4635      	mov	r5, r6
 80173f4:	e7df      	b.n	80173b6 <_realloc_r+0x1e>
	...

080173f8 <_read_r>:
 80173f8:	b538      	push	{r3, r4, r5, lr}
 80173fa:	4d07      	ldr	r5, [pc, #28]	; (8017418 <_read_r+0x20>)
 80173fc:	4604      	mov	r4, r0
 80173fe:	4608      	mov	r0, r1
 8017400:	4611      	mov	r1, r2
 8017402:	2200      	movs	r2, #0
 8017404:	602a      	str	r2, [r5, #0]
 8017406:	461a      	mov	r2, r3
 8017408:	f000 f8a6 	bl	8017558 <_read>
 801740c:	1c43      	adds	r3, r0, #1
 801740e:	d102      	bne.n	8017416 <_read_r+0x1e>
 8017410:	682b      	ldr	r3, [r5, #0]
 8017412:	b103      	cbz	r3, 8017416 <_read_r+0x1e>
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	bd38      	pop	{r3, r4, r5, pc}
 8017418:	20002f68 	.word	0x20002f68

0801741c <_raise_r>:
 801741c:	291f      	cmp	r1, #31
 801741e:	b538      	push	{r3, r4, r5, lr}
 8017420:	4604      	mov	r4, r0
 8017422:	460d      	mov	r5, r1
 8017424:	d904      	bls.n	8017430 <_raise_r+0x14>
 8017426:	2316      	movs	r3, #22
 8017428:	6003      	str	r3, [r0, #0]
 801742a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801742e:	bd38      	pop	{r3, r4, r5, pc}
 8017430:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017432:	b112      	cbz	r2, 801743a <_raise_r+0x1e>
 8017434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017438:	b94b      	cbnz	r3, 801744e <_raise_r+0x32>
 801743a:	4620      	mov	r0, r4
 801743c:	f000 f830 	bl	80174a0 <_getpid_r>
 8017440:	462a      	mov	r2, r5
 8017442:	4601      	mov	r1, r0
 8017444:	4620      	mov	r0, r4
 8017446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801744a:	f000 b817 	b.w	801747c <_kill_r>
 801744e:	2b01      	cmp	r3, #1
 8017450:	d00a      	beq.n	8017468 <_raise_r+0x4c>
 8017452:	1c59      	adds	r1, r3, #1
 8017454:	d103      	bne.n	801745e <_raise_r+0x42>
 8017456:	2316      	movs	r3, #22
 8017458:	6003      	str	r3, [r0, #0]
 801745a:	2001      	movs	r0, #1
 801745c:	e7e7      	b.n	801742e <_raise_r+0x12>
 801745e:	2400      	movs	r4, #0
 8017460:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017464:	4628      	mov	r0, r5
 8017466:	4798      	blx	r3
 8017468:	2000      	movs	r0, #0
 801746a:	e7e0      	b.n	801742e <_raise_r+0x12>

0801746c <raise>:
 801746c:	4b02      	ldr	r3, [pc, #8]	; (8017478 <raise+0xc>)
 801746e:	4601      	mov	r1, r0
 8017470:	6818      	ldr	r0, [r3, #0]
 8017472:	f7ff bfd3 	b.w	801741c <_raise_r>
 8017476:	bf00      	nop
 8017478:	20000184 	.word	0x20000184

0801747c <_kill_r>:
 801747c:	b538      	push	{r3, r4, r5, lr}
 801747e:	4d07      	ldr	r5, [pc, #28]	; (801749c <_kill_r+0x20>)
 8017480:	2300      	movs	r3, #0
 8017482:	4604      	mov	r4, r0
 8017484:	4608      	mov	r0, r1
 8017486:	4611      	mov	r1, r2
 8017488:	602b      	str	r3, [r5, #0]
 801748a:	f000 f855 	bl	8017538 <_kill>
 801748e:	1c43      	adds	r3, r0, #1
 8017490:	d102      	bne.n	8017498 <_kill_r+0x1c>
 8017492:	682b      	ldr	r3, [r5, #0]
 8017494:	b103      	cbz	r3, 8017498 <_kill_r+0x1c>
 8017496:	6023      	str	r3, [r4, #0]
 8017498:	bd38      	pop	{r3, r4, r5, pc}
 801749a:	bf00      	nop
 801749c:	20002f68 	.word	0x20002f68

080174a0 <_getpid_r>:
 80174a0:	f000 b83a 	b.w	8017518 <_getpid>

080174a4 <_fstat_r>:
 80174a4:	b538      	push	{r3, r4, r5, lr}
 80174a6:	4d07      	ldr	r5, [pc, #28]	; (80174c4 <_fstat_r+0x20>)
 80174a8:	2300      	movs	r3, #0
 80174aa:	4604      	mov	r4, r0
 80174ac:	4608      	mov	r0, r1
 80174ae:	4611      	mov	r1, r2
 80174b0:	602b      	str	r3, [r5, #0]
 80174b2:	f000 f829 	bl	8017508 <_fstat>
 80174b6:	1c43      	adds	r3, r0, #1
 80174b8:	d102      	bne.n	80174c0 <_fstat_r+0x1c>
 80174ba:	682b      	ldr	r3, [r5, #0]
 80174bc:	b103      	cbz	r3, 80174c0 <_fstat_r+0x1c>
 80174be:	6023      	str	r3, [r4, #0]
 80174c0:	bd38      	pop	{r3, r4, r5, pc}
 80174c2:	bf00      	nop
 80174c4:	20002f68 	.word	0x20002f68

080174c8 <_isatty_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4d06      	ldr	r5, [pc, #24]	; (80174e4 <_isatty_r+0x1c>)
 80174cc:	2300      	movs	r3, #0
 80174ce:	4604      	mov	r4, r0
 80174d0:	4608      	mov	r0, r1
 80174d2:	602b      	str	r3, [r5, #0]
 80174d4:	f000 f828 	bl	8017528 <_isatty>
 80174d8:	1c43      	adds	r3, r0, #1
 80174da:	d102      	bne.n	80174e2 <_isatty_r+0x1a>
 80174dc:	682b      	ldr	r3, [r5, #0]
 80174de:	b103      	cbz	r3, 80174e2 <_isatty_r+0x1a>
 80174e0:	6023      	str	r3, [r4, #0]
 80174e2:	bd38      	pop	{r3, r4, r5, pc}
 80174e4:	20002f68 	.word	0x20002f68

080174e8 <_malloc_usable_size_r>:
 80174e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174ec:	1f18      	subs	r0, r3, #4
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	bfbc      	itt	lt
 80174f2:	580b      	ldrlt	r3, [r1, r0]
 80174f4:	18c0      	addlt	r0, r0, r3
 80174f6:	4770      	bx	lr

080174f8 <_close>:
 80174f8:	4b02      	ldr	r3, [pc, #8]	; (8017504 <_close+0xc>)
 80174fa:	2258      	movs	r2, #88	; 0x58
 80174fc:	601a      	str	r2, [r3, #0]
 80174fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017502:	4770      	bx	lr
 8017504:	20002f68 	.word	0x20002f68

08017508 <_fstat>:
 8017508:	4b02      	ldr	r3, [pc, #8]	; (8017514 <_fstat+0xc>)
 801750a:	2258      	movs	r2, #88	; 0x58
 801750c:	601a      	str	r2, [r3, #0]
 801750e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017512:	4770      	bx	lr
 8017514:	20002f68 	.word	0x20002f68

08017518 <_getpid>:
 8017518:	4b02      	ldr	r3, [pc, #8]	; (8017524 <_getpid+0xc>)
 801751a:	2258      	movs	r2, #88	; 0x58
 801751c:	601a      	str	r2, [r3, #0]
 801751e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017522:	4770      	bx	lr
 8017524:	20002f68 	.word	0x20002f68

08017528 <_isatty>:
 8017528:	4b02      	ldr	r3, [pc, #8]	; (8017534 <_isatty+0xc>)
 801752a:	2258      	movs	r2, #88	; 0x58
 801752c:	601a      	str	r2, [r3, #0]
 801752e:	2000      	movs	r0, #0
 8017530:	4770      	bx	lr
 8017532:	bf00      	nop
 8017534:	20002f68 	.word	0x20002f68

08017538 <_kill>:
 8017538:	4b02      	ldr	r3, [pc, #8]	; (8017544 <_kill+0xc>)
 801753a:	2258      	movs	r2, #88	; 0x58
 801753c:	601a      	str	r2, [r3, #0]
 801753e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017542:	4770      	bx	lr
 8017544:	20002f68 	.word	0x20002f68

08017548 <_lseek>:
 8017548:	4b02      	ldr	r3, [pc, #8]	; (8017554 <_lseek+0xc>)
 801754a:	2258      	movs	r2, #88	; 0x58
 801754c:	601a      	str	r2, [r3, #0]
 801754e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017552:	4770      	bx	lr
 8017554:	20002f68 	.word	0x20002f68

08017558 <_read>:
 8017558:	4b02      	ldr	r3, [pc, #8]	; (8017564 <_read+0xc>)
 801755a:	2258      	movs	r2, #88	; 0x58
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017562:	4770      	bx	lr
 8017564:	20002f68 	.word	0x20002f68

08017568 <_sbrk>:
 8017568:	4a04      	ldr	r2, [pc, #16]	; (801757c <_sbrk+0x14>)
 801756a:	6811      	ldr	r1, [r2, #0]
 801756c:	4603      	mov	r3, r0
 801756e:	b909      	cbnz	r1, 8017574 <_sbrk+0xc>
 8017570:	4903      	ldr	r1, [pc, #12]	; (8017580 <_sbrk+0x18>)
 8017572:	6011      	str	r1, [r2, #0]
 8017574:	6810      	ldr	r0, [r2, #0]
 8017576:	4403      	add	r3, r0
 8017578:	6013      	str	r3, [r2, #0]
 801757a:	4770      	bx	lr
 801757c:	20002f6c 	.word	0x20002f6c
 8017580:	20002f70 	.word	0x20002f70

08017584 <_write>:
 8017584:	4b02      	ldr	r3, [pc, #8]	; (8017590 <_write+0xc>)
 8017586:	2258      	movs	r2, #88	; 0x58
 8017588:	601a      	str	r2, [r3, #0]
 801758a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801758e:	4770      	bx	lr
 8017590:	20002f68 	.word	0x20002f68

08017594 <_exit>:
 8017594:	e7fe      	b.n	8017594 <_exit>
	...

08017598 <_init>:
 8017598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759a:	bf00      	nop
 801759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801759e:	bc08      	pop	{r3}
 80175a0:	469e      	mov	lr, r3
 80175a2:	4770      	bx	lr

080175a4 <_fini>:
 80175a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a6:	bf00      	nop
 80175a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175aa:	bc08      	pop	{r3}
 80175ac:	469e      	mov	lr, r3
 80175ae:	4770      	bx	lr
