
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013484  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08013648  08013648  00023648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013da8  08013da8  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013da8  08013da8  00023da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013db0  08013db0  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013db0  08013db0  00023db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013db4  08013db4  00023db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08013db8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002674  200002d0  08014088  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20002944  08014088  00032944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d0f0  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058ef  00000000  00000000  0005d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  00062ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002018  00000000  00000000  00064f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000087da  00000000  00000000  00066f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cefa  00000000  00000000  0006f732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b68  00000000  00000000  0009c62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bd194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a324  00000000  00000000  001bd1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c7508  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c75d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801362c 	.word	0x0801362c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0801362c 	.word	0x0801362c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 fcdd 	bl	80038ba <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 fcd4 	bl	80038d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002ec 	.word	0x200002ec
 8000f50:	40005800 	.word	0x40005800
 8000f54:	20000340 	.word	0x20000340

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fbf2 	bl	8003784 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 fc92 	bl	80038d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 fcd4 	bl	800396c <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00f fda9 	bl	8010b48 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fe8a 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f002 f9c0 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f002 f9aa 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	f5ad 5d9a 	sub.w	sp, sp, #4928	; 0x1340
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "Start of operation\n"; /* File write buffer. */
 80010aa:	4bbb      	ldr	r3, [pc, #748]	; (8001398 <main+0x2f8>)
 80010ac:	f507 5497 	add.w	r4, r7, #4832	; 0x12e0
 80010b0:	f104 0414 	add.w	r4, r4, #20
 80010b4:	461d      	mov	r5, r3
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80010c2:	f103 0308 	add.w	r3, r3, #8
 80010c6:	221e      	movs	r2, #30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00f fd3c 	bl	8010b48 <memset>

	// Buffer for all data to be stored into in the same way as it has been printed to the PC
	uint8_t data_buffer[LORA_MAX_PACKET_SIZE]; //LORA_MAX_PACKET_SIZE

	uint8_t gps_buffer[1000];
	char *gps_buffer_ptr1 = gps_buffer;
 80010d0:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80010d4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80010d8:	f102 020c 	add.w	r2, r2, #12
 80010dc:	6013      	str	r3, [r2, #0]
	char *gps_buffer_ptr2 = gps_buffer;
 80010de:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 80010e2:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80010e6:	f102 0210 	add.w	r2, r2, #16
 80010ea:	6013      	str	r3, [r2, #0]
	uint8_t gps_parsed_buffer[1000];
	int parser_i;
	int parser_sub_i;
	gps_buffer[0] = '\0';
 80010ec:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80010f0:	f103 0308 	add.w	r3, r3, #8
 80010f4:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
	gps_parsed_buffer[0] = '\0';
 80010fc:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001100:	2200      	movs	r2, #0
 8001102:	f803 2c64 	strb.w	r2, [r3, #-100]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8001106:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800110a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800110e:	461a      	mov	r2, r3
 8001110:	2300      	movs	r3, #0
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	6053      	str	r3, [r2, #4]
 8001116:	6093      	str	r3, [r2, #8]
 8001118:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 800111a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800111e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 800112c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001130:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 800113c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001140:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001158:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800115c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8001174:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001178:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	3304      	adds	r3, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8001190:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001194:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <main+0x2fc>)
 800119a:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800119c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80011a0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2224      	movs	r2, #36	; 0x24
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00f fcca 	bl	8010b48 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80011b4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80011b8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2224      	movs	r2, #36	; 0x24
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00f fcbe 	bl	8010b48 <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80011d2:	f102 0206 	add.w	r2, r2, #6
 80011d6:	7013      	strb	r3, [r2, #0]
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 80011d8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80011dc:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 80011f0:	f101 0118 	add.w	r1, r1, #24
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011f8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80011fc:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	751a      	strb	r2, [r3, #20]
	static uint8_t USB_TIMERS = 0x07;

	static uint8_t USB_PING = 0x08;
	static uint8_t USB_FLIGHTMODE = 0x09;

	uint8_t lora_test_packet[10] = {0,1,2,3,4,5,6,7,8,9};
 8001214:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001218:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800121c:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <main+0x300>)
 800121e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001220:	c303      	stmia	r3!, {r0, r1}
 8001222:	801a      	strh	r2, [r3, #0]

	int PRINT_TOGGLE = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800122a:	f102 0214 	add.w	r2, r2, #20
 800122e:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001230:	f001 fbf3 	bl	8002a1a <HAL_Init>


	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8001234:	f001 f860 	bl	80022f8 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001238:	f7ff fe50 	bl	8000edc <BSP_I2C2_Init>


	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 800123c:	4859      	ldr	r0, [pc, #356]	; (80013a4 <main+0x304>)
 800123e:	f001 f9cb 	bl	80025d8 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8001242:	4859      	ldr	r0, [pc, #356]	; (80013a8 <main+0x308>)
 8001244:	f001 f9c8 	bl	80025d8 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001248:	f000 f8b6 	bl	80013b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	// Initialize SD card
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800124c:	f000 fb08 	bl	8001860 <MX_GPIO_Init>
	MX_DMA_Init();
 8001250:	f000 fae2 	bl	8001818 <MX_DMA_Init>
	MX_I2C1_Init();
 8001254:	f000 f92e 	bl	80014b4 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 8001258:	f000 f96c 	bl	8001534 <MX_SDMMC1_SD_Init>
	//BSP_SD_Init();
	MX_SPI1_Init();
 800125c:	f000 f98c 	bl	8001578 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001260:	f000 fa3e 	bl	80016e0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001264:	f000 fa88 	bl	8001778 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001268:	f00c fbce 	bl	800da08 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 800126c:	f00e fe36 	bl	800fedc <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 8001270:	f000 f9c0 	bl	80015f4 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001274:	f000 f8f2 	bl	800145c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// Power on LED
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001278:	2108      	movs	r1, #8
 800127a:	484c      	ldr	r0, [pc, #304]	; (80013ac <main+0x30c>)
 800127c:	f002 fa68 	bl	8003750 <HAL_GPIO_TogglePin>

	// WAIT FOR USB CONNECTION
	// Comment this out once build finished
	if (PRINT_TOGGLE == 1) {
 8001280:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001284:	f103 0314 	add.w	r3, r3, #20
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <main+0x1fe>
		while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY); }
 800128e:	bf00      	nop
 8001290:	2106      	movs	r1, #6
 8001292:	4847      	ldr	r0, [pc, #284]	; (80013b0 <main+0x310>)
 8001294:	f00e fef0 	bl	8010078 <CDC_Transmit_FS>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d0f8      	beq.n	8001290 <main+0x1f0>

	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////


	// Enable MIRA power from OBC
	HAL_GPIO_WritePin(MIRA_EN_PWR_GPIO_Port, MIRA_EN_PWR_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	4843      	ldr	r0, [pc, #268]	; (80013b4 <main+0x314>)
 80012a6:	f002 fa3b 	bl	8003720 <HAL_GPIO_WritePin>
	// Enable Over Current Protection at U4
	HAL_GPIO_WritePin(OCPEN_GPIO_Port, OCPEN_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4840      	ldr	r0, [pc, #256]	; (80013b4 <main+0x314>)
 80012b2:	f002 fa35 	bl	8003720 <HAL_GPIO_WritePin>

	// disable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2110      	movs	r1, #16
 80012ba:	483e      	ldr	r0, [pc, #248]	; (80013b4 <main+0x314>)
 80012bc:	f002 fa30 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2120      	movs	r1, #32
 80012c4:	483b      	ldr	r0, [pc, #236]	; (80013b4 <main+0x314>)
 80012c6:	f002 fa2b 	bl	8003720 <HAL_GPIO_WritePin>

	// enable channel 2
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2104      	movs	r1, #4
 80012ce:	4839      	ldr	r0, [pc, #228]	; (80013b4 <main+0x314>)
 80012d0:	f002 fa26 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2108      	movs	r1, #8
 80012d8:	4836      	ldr	r0, [pc, #216]	; (80013b4 <main+0x314>)
 80012da:	f002 fa21 	bl	8003720 <HAL_GPIO_WritePin>

	// Waiting for power distribution in all systems for 2 seconds
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80012de:	2120      	movs	r1, #32
 80012e0:	4832      	ldr	r0, [pc, #200]	; (80013ac <main+0x30c>)
 80012e2:	f002 fa35 	bl	8003750 <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 80012e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012ea:	f001 fc0b 	bl	8002b04 <HAL_Delay>
	HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80012ee:	2120      	movs	r1, #32
 80012f0:	482e      	ldr	r0, [pc, #184]	; (80013ac <main+0x30c>)
 80012f2:	f002 fa2d 	bl	8003750 <HAL_GPIO_TogglePin>


	status = mira_init(&huart1, 5000);
 80012f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80012fa:	482a      	ldr	r0, [pc, #168]	; (80013a4 <main+0x304>)
 80012fc:	f000 fdb0 	bl	8001e60 <mira_init>
 8001300:	4603      	mov	r3, r0
 8001302:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001306:	f102 0207 	add.w	r2, r2, #7
 800130a:	7013      	strb	r3, [r2, #0]
	while(status != HAL_OK){
 800130c:	e019      	b.n	8001342 <main+0x2a2>

		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <main+0x30c>)
 8001312:	f002 fa1d 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8001316:	f44f 7048 	mov.w	r0, #800	; 0x320
 800131a:	f001 fbf3 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	4822      	ldr	r0, [pc, #136]	; (80013ac <main+0x30c>)
 8001322:	f002 fa15 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001326:	20c8      	movs	r0, #200	; 0xc8
 8001328:	f001 fbec 	bl	8002b04 <HAL_Delay>
		status = mira_init(&huart1, 5000);
 800132c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <main+0x304>)
 8001332:	f000 fd95 	bl	8001e60 <mira_init>
 8001336:	4603      	mov	r3, r0
 8001338:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800133c:	f102 0207 	add.w	r2, r2, #7
 8001340:	7013      	strb	r3, [r2, #0]
	while(status != HAL_OK){
 8001342:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001346:	f103 0307 	add.w	r3, r3, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1de      	bne.n	800130e <main+0x26e>

	}

	while(1) {
		HAL_Delay(3000);
 8001350:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001354:	f001 fbd6 	bl	8002b04 <HAL_Delay>
		status = mira_science_data(&huart1, mira_science_Rx_buffer, sizeof(mira_science_Rx_buffer), 5000);
 8001358:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800135c:	3914      	subs	r1, #20
 800135e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001362:	228e      	movs	r2, #142	; 0x8e
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <main+0x304>)
 8001366:	f000 fd51 	bl	8001e0c <mira_science_data>
 800136a:	4603      	mov	r3, r0
 800136c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001370:	f102 0207 	add.w	r2, r2, #7
 8001374:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001376:	2120      	movs	r1, #32
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <main+0x30c>)
 800137a:	f002 f9e9 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800137e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001382:	f001 fbbf 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001386:	2120      	movs	r1, #32
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <main+0x30c>)
 800138a:	f002 f9e1 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800138e:	20c8      	movs	r0, #200	; 0xc8
 8001390:	f001 fbb8 	bl	8002b04 <HAL_Delay>
		HAL_Delay(3000);
 8001394:	e7dc      	b.n	8001350 <main+0x2b0>
 8001396:	bf00      	nop
 8001398:	08013654 	.word	0x08013654
 800139c:	00202d20 	.word	0x00202d20
 80013a0:	08013688 	.word	0x08013688
 80013a4:	200004c8 	.word	0x200004c8
 80013a8:	2000055c 	.word	0x2000055c
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	0801364c 	.word	0x0801364c
 80013b4:	48001000 	.word	0x48001000

080013b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2244      	movs	r2, #68	; 0x44
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00f fbbe 	bl	8010b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013da:	2000      	movs	r0, #0
 80013dc:	f003 fce6 	bl	8004dac <HAL_PWREx_ControlVoltageScaling>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x32>
	{
		Error_Handler();
 80013e6:	f000 fb19 	bl	8001a1c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013ea:	2321      	movs	r3, #33	; 0x21
 80013ec:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2302      	movs	r3, #2
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fc:	2303      	movs	r3, #3
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8001404:	231e      	movs	r3, #30
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fd7b 	bl	8004f14 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001424:	f000 fafa 	bl	8001a1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2303      	movs	r3, #3
 800142e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	2105      	movs	r1, #5
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f981 	bl	8005748 <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800144c:	f000 fae6 	bl	8001a1c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001450:	f004 fb78 	bl	8005b44 <HAL_RCC_EnableCSS>
}
 8001454:	bf00      	nop
 8001456:	3758      	adds	r7, #88	; 0x58
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	201a      	movs	r0, #26
 8001466:	f001 fc4c 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800146a:	201a      	movs	r0, #26
 800146c:	f001 fc65 	bl	8002d3a <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2026      	movs	r0, #38	; 0x26
 8001476:	f001 fc44 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800147a:	2026      	movs	r0, #38	; 0x26
 800147c:	f001 fc5d 	bl	8002d3a <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2025      	movs	r0, #37	; 0x25
 8001486:	f001 fc3c 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800148a:	2025      	movs	r0, #37	; 0x25
 800148c:	f001 fc55 	bl	8002d3a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	200b      	movs	r0, #11
 8001496:	f001 fc34 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800149a:	200b      	movs	r0, #11
 800149c:	f001 fc4d 	bl	8002d3a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	200c      	movs	r0, #12
 80014a6:	f001 fc2c 	bl	8002d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014aa:	200c      	movs	r0, #12
 80014ac:	f001 fc45 	bl	8002d3a <HAL_NVIC_EnableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MX_I2C1_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MX_I2C1_Init+0x7c>)
 80014c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_I2C1_Init+0x74>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_I2C1_Init+0x74>)
 80014f0:	f002 f948 	bl	8003784 <HAL_I2C_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80014fa:	f000 fa8f 	bl	8001a1c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <MX_I2C1_Init+0x74>)
 8001502:	f002 f9e8 	bl	80038d6 <HAL_I2CEx_ConfigAnalogFilter>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 800150c:	f000 fa86 	bl	8001a1c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001510:	2100      	movs	r1, #0
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_I2C1_Init+0x74>)
 8001514:	f002 fa2a 	bl	800396c <HAL_I2CEx_ConfigDigitalFilter>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800151e:	f000 fa7d 	bl	8001a1c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000344 	.word	0x20000344
 800152c:	40005400 	.word	0x40005400
 8001530:	307075b1 	.word	0x307075b1

08001534 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <MX_SDMMC1_SD_Init+0x40>)
 800153c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 800154c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001550:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <MX_SDMMC1_SD_Init+0x3c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000398 	.word	0x20000398
 8001574:	50062400 	.word	0x50062400

08001578 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_SPI1_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_SPI1_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_SPI1_Init+0x74>)
 8001584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001588:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_SPI1_Init+0x74>)
 8001592:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001596:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_SPI1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_SPI1_Init+0x74>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_SPI1_Init+0x74>)
 80015ae:	2228      	movs	r2, #40	; 0x28
 80015b0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_SPI1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_SPI1_Init+0x74>)
 80015c6:	2207      	movs	r2, #7
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI1_Init+0x74>)
 80015d2:	2208      	movs	r2, #8
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_SPI1_Init+0x74>)
 80015d8:	f007 fde1 	bl	800919e <HAL_SPI_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80015e2:	f000 fa1b 	bl	8001a1c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000418 	.word	0x20000418
 80015f0:	40013000 	.word	0x40013000

080015f4 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b092      	sub	sp, #72	; 0x48
 80015f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	222c      	movs	r2, #44	; 0x2c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00f fa97 	bl	8010b48 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800161c:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <MX_TIM17_Init+0xe8>)
 800161e:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <MX_TIM17_Init+0xe4>)
 8001622:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001626:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_TIM17_Init+0xe4>)
 8001630:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001634:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_TIM17_Init+0xe4>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_TIM17_Init+0xe4>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001648:	4823      	ldr	r0, [pc, #140]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800164a:	f007 fe4b 	bl	80092e4 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8001654:	f000 f9e2 	bl	8001a1c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001658:	481f      	ldr	r0, [pc, #124]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800165a:	f007 fe9a 	bl	8009392 <HAL_TIM_OC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8001664:	f000 f9da 	bl	8001a1c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <MX_TIM17_Init+0xe4>)
 800168e:	f007 ffe3 	bl	8009658 <HAL_TIM_OC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8001698:	f000 f9c0 	bl	8001a1c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM17_Init+0xe4>)
 80016c0:	f008 fbe6 	bl	8009e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 80016ca:	f000 f9a7 	bl	8001a1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3748      	adds	r7, #72	; 0x48
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000047c 	.word	0x2000047c
 80016dc:	40014800 	.word	0x40014800

080016e0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <MX_USART1_UART_Init+0x90>)
 80016e6:	4a23      	ldr	r2, [pc, #140]	; (8001774 <MX_USART1_UART_Init+0x94>)
 80016e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_USART1_UART_Init+0x90>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MX_USART1_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_USART1_UART_Init+0x90>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_USART1_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_USART1_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800172a:	f008 fc4d 	bl	8009fc8 <HAL_UART_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001734:	f000 f972 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800173c:	f00a f852 	bl	800b7e4 <HAL_UARTEx_SetTxFifoThreshold>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001746:	f000 f969 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174a:	2100      	movs	r1, #0
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800174e:	f00a f887 	bl	800b860 <HAL_UARTEx_SetRxFifoThreshold>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001758:	f000 f960 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_USART1_UART_Init+0x90>)
 800175e:	f00a f808 	bl	800b772 <HAL_UARTEx_DisableFifoMode>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001768:	f000 f958 	bl	8001a1c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200004c8 	.word	0x200004c8
 8001774:	40013800 	.word	0x40013800

08001778 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <MX_USART2_UART_Init+0x98>)
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <MX_USART2_UART_Init+0x9c>)
 8001780:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_USART2_UART_Init+0x98>)
 8001784:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001788:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_USART2_UART_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_USART2_UART_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_USART2_UART_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_USART2_UART_Init+0x98>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017bc:	2210      	movs	r2, #16
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017ca:	f008 fbfd 	bl	8009fc8 <HAL_UART_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 80017d4:	f000 f922 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d8:	2100      	movs	r1, #0
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017dc:	f00a f802 	bl	800b7e4 <HAL_UARTEx_SetTxFifoThreshold>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80017e6:	f000 f919 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017ee:	f00a f837 	bl	800b860 <HAL_UARTEx_SetRxFifoThreshold>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80017f8:	f000 f910 	bl	8001a1c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_USART2_UART_Init+0x98>)
 80017fe:	f009 ffb8 	bl	800b772 <HAL_UARTEx_DisableFifoMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 8001808:	f000 f908 	bl	8001a1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000055c 	.word	0x2000055c
 8001814:	40004400 	.word	0x40004400

08001818 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_DMA_Init+0x44>)
 8001820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <MX_DMA_Init+0x44>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6493      	str	r3, [r2, #72]	; 0x48
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x44>)
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x44>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <MX_DMA_Init+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6493      	str	r3, [r2, #72]	; 0x48
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_DMA_Init+0x44>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b64      	ldr	r3, [pc, #400]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a63      	ldr	r2, [pc, #396]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	4b58      	ldr	r3, [pc, #352]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b52      	ldr	r3, [pc, #328]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_GPIO_Init+0x1a8>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001906:	2200      	movs	r2, #0
 8001908:	f641 013c 	movw	r1, #6204	; 0x183c
 800190c:	483f      	ldr	r0, [pc, #252]	; (8001a0c <MX_GPIO_Init+0x1ac>)
 800190e:	f001 ff07 	bl	8003720 <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	2130      	movs	r1, #48	; 0x30
 8001916:	483e      	ldr	r0, [pc, #248]	; (8001a10 <MX_GPIO_Init+0x1b0>)
 8001918:	f001 ff02 	bl	8003720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2178      	movs	r1, #120	; 0x78
 8001920:	483c      	ldr	r0, [pc, #240]	; (8001a14 <MX_GPIO_Init+0x1b4>)
 8001922:	f001 fefd 	bl	8003720 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001926:	f641 033c 	movw	r3, #6204	; 0x183c
 800192a:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4833      	ldr	r0, [pc, #204]	; (8001a0c <MX_GPIO_Init+0x1ac>)
 8001940:	f001 fd44 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	482d      	ldr	r0, [pc, #180]	; (8001a10 <MX_GPIO_Init+0x1b0>)
 800195a:	f001 fd37 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_DIG0_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 800195e:	2302      	movs	r3, #2
 8001960:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f001 fd2a 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001978:	2330      	movs	r3, #48	; 0x30
 800197a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4820      	ldr	r0, [pc, #128]	; (8001a10 <MX_GPIO_Init+0x1b0>)
 8001990:	f001 fd1c 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_GPIO_Init+0x1ac>)
 80019aa:	f001 fd0f 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pin : CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 80019ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 fd01 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80019ca:	2378      	movs	r3, #120	; 0x78
 80019cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_GPIO_Init+0x1b4>)
 80019e2:	f001 fcf3 	bl	80033cc <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80019e6:	2320      	movs	r3, #32
 80019e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_GPIO_Init+0x1b8>)
 80019fa:	f001 fce7 	bl	80033cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	; 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	48000400 	.word	0x48000400

08001a1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8001a24:	4801      	ldr	r0, [pc, #4]	; (8001a2c <Error_Handler+0x10>)
 8001a26:	f00f fde1 	bl	80115ec <iprintf>
	while (1)
 8001a2a:	e7fe      	b.n	8001a2a <Error_Handler+0xe>
 8001a2c:	08013694 	.word	0x08013694

08001a30 <CRC16>:
 * @param *nData: pointer to the data array
 * @param wLength: length of the data array
 * @return 16-bit unsigned integer which is the computed CRC16 value.
 */
uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8001a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a40:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8001a42:	e011      	b.n	8001a68 <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4053      	eors	r3, r2
 8001a52:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 8001a5a:	7b7b      	ldrb	r3, [r7, #13]
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <CRC16+0x50>)
 8001a5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	4053      	eors	r3, r2
 8001a66:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	1e5a      	subs	r2, r3, #1
 8001a6c:	807a      	strh	r2, [r7, #2]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e8      	bne.n	8001a44 <CRC16+0x14>
	}
	return wCRCWord;
 8001a72:	89fb      	ldrh	r3, [r7, #14]

}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	08013740 	.word	0x08013740

08001a84 <mira_command_empty_payload>:
 * @param reg: the register address.
 * @param *rxBuffer: pointer to the buffer that stores the received data
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_command_empty_payload(UART_HandleTypeDef *huart, uint8_t command, uint8_t *rxBuffer, uint8_t rx_size, uint32_t Timeout){
 8001a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a88:	b08f      	sub	sp, #60	; 0x3c
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	460b      	mov	r3, r1
 8001a94:	72fb      	strb	r3, [r7, #11]
 8001a96:	4613      	mov	r3, r2
 8001a98:	72bb      	strb	r3, [r7, #10]
 8001a9a:	466b      	mov	r3, sp
 8001a9c:	461e      	mov	r6, r3
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	HAL_StatusTypeDef status;
	uint8_t message_len = 9;
 8001a9e:	2309      	movs	r3, #9
 8001aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t message[message_len];
 8001aa4:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aae:	b2cb      	uxtb	r3, r1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	4691      	mov	r9, r2
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aca:	b2cb      	uxtb	r3, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	461c      	mov	r4, r3
 8001ad0:	4615      	mov	r5, r2
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	00eb      	lsls	r3, r5, #3
 8001adc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae0:	00e2      	lsls	r2, r4, #3
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	08db      	lsrs	r3, r3, #3
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	ebad 0d03 	sub.w	sp, sp, r3
 8001aee:	466b      	mov	r3, sp
 8001af0:	3300      	adds	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
	int j;
	for (j = 0; j < message_len; j++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	e007      	b.n	8001b0a <mira_command_empty_payload+0x86>
		message[j] = 0;
 8001afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	4413      	add	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < message_len; j++) {
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	3301      	adds	r3, #1
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf2      	blt.n	8001afa <mira_command_empty_payload+0x76>
	}
	uint8_t sync[2] = {0x5a, 0xce};
 8001b14:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001b18:	843b      	strh	r3, [r7, #32]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, 0x00};
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 8001b1e:	23c1      	movs	r3, #193	; 0xc1
 8001b20:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001b22:	23e1      	movs	r3, #225	; 0xe1
 8001b24:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[0] = sync[0];
 8001b2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b30:	701a      	strb	r2, [r3, #0]
	message[1] = sync[1];
 8001b32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	705a      	strb	r2, [r3, #1]
	message[2] = length[0];
 8001b3a:	7f3a      	ldrb	r2, [r7, #28]
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	709a      	strb	r2, [r3, #2]
	message[3] = length[1];
 8001b40:	7f7a      	ldrb	r2, [r7, #29]
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	70da      	strb	r2, [r3, #3]
	message[4] = src[0];
 8001b46:	7e3a      	ldrb	r2, [r7, #24]
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	711a      	strb	r2, [r3, #4]
	message[5] = dest[0];
 8001b4c:	7d3a      	ldrb	r2, [r7, #20]
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	715a      	strb	r2, [r3, #5]
	message[6] = command;
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	7afa      	ldrb	r2, [r7, #11]
 8001b56:	719a      	strb	r2, [r3, #6]

	sum = CRC16(message+2, 7);
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff66 	bl	8001a30 <CRC16>
 8001b64:	4603      	mov	r3, r0
 8001b66:	84fb      	strh	r3, [r7, #38]	; 0x26

	message[7] = (sum&0xFF00)>>8;
 8001b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	71da      	strb	r2, [r3, #7]
	message[8] = (sum&0x00FF);
 8001b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	721a      	strb	r2, [r3, #8]

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2104      	movs	r1, #4
 8001b80:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <mira_command_empty_payload+0x16c>)
 8001b82:	f001 fdcd 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <mira_command_empty_payload+0x16c>)
 8001b8c:	f001 fdc8 	bl	8003720 <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 9, Timeout);
 8001b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b92:	2209      	movs	r2, #9
 8001b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f008 fa66 	bl	800a068 <HAL_UART_Transmit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <mira_command_empty_payload+0x16c>)
 8001ba8:	f001 fdba 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2108      	movs	r1, #8
 8001bb0:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <mira_command_empty_payload+0x16c>)
 8001bb2:	f001 fdb5 	bl	8003720 <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8001bb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <mira_command_empty_payload+0x140>
 8001bbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bc2:	e00e      	b.n	8001be2 <mira_command_empty_payload+0x15e>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, rx_size);
 8001bc4:	7abb      	ldrb	r3, [r7, #10]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f008 fadb 	bl	800a188 <HAL_UART_Receive_DMA>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(3);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 ff93 	bl	8002b04 <HAL_Delay>


	return status;
 8001bde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001be2:	46b5      	mov	sp, r6

}
 8001be4:	4618      	mov	r0, r3
 8001be6:	373c      	adds	r7, #60	; 0x3c
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bee:	bf00      	nop
 8001bf0:	48001000 	.word	0x48001000

08001bf4 <mira_command>:
 * @param *data: pointer to the buffer that has the payload of the message
 * @param *rxBuffer: pointer to the buffer that stores the received data
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t size_data, uint8_t *rxBuffer, uint32_t Timeout){
 8001bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf8:	b08e      	sub	sp, #56	; 0x38
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	72fb      	strb	r3, [r7, #11]
 8001c04:	4613      	mov	r3, r2
 8001c06:	72bb      	strb	r3, [r7, #10]
 8001c08:	466b      	mov	r3, sp
 8001c0a:	469a      	mov	sl, r3
	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	//while (!mira_ready_for_comm);//{HAL_Delay(100);}
//	HAL_Delay(500);
//	mira_ready_for_comm = 0;

	uint8_t payload_len = size_data;
 8001c0c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t message_len = payload_len + 10;
 8001c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c18:	330a      	adds	r3, #10
 8001c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	HAL_StatusTypeDef status;
	//uint8_t message[9+length_val];
	uint8_t message[message_len];
 8001c1e:	f897 602e 	ldrb.w	r6, [r7, #46]	; 0x2e
 8001c22:	4633      	mov	r3, r6
 8001c24:	3b01      	subs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	b2f3      	uxtb	r3, r6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4691      	mov	r9, r2
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c44:	b2f3      	uxtb	r3, r6
 8001c46:	2200      	movs	r2, #0
 8001c48:	461c      	mov	r4, r3
 8001c4a:	4615      	mov	r5, r2
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	00eb      	lsls	r3, r5, #3
 8001c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5a:	00e2      	lsls	r2, r4, #3
 8001c5c:	4633      	mov	r3, r6
 8001c5e:	3307      	adds	r3, #7
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	ebad 0d03 	sub.w	sp, sp, r3
 8001c68:	466b      	mov	r3, sp
 8001c6a:	3300      	adds	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
	int j;
	for (j = 0; j < sizeof(message); j++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	e007      	b.n	8001c84 <mira_command+0x90>
		message[j] = 0;
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	4413      	add	r3, r2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < sizeof(message); j++) {
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	3301      	adds	r3, #1
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
 8001c84:	4632      	mov	r2, r6
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f3      	bhi.n	8001c74 <mira_command+0x80>
	}
	uint8_t sync[2] = {0x5a, 0xce};
 8001c8c:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001c90:	83bb      	strh	r3, [r7, #28]
	// do this (below) properly some other time
	uint8_t length[2] = {0x00, payload_len+1};
 8001c92:	2300      	movs	r3, #0
 8001c94:	763b      	strb	r3, [r7, #24]
 8001c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	767b      	strb	r3, [r7, #25]
	uint8_t src[1] = {0xc1};
 8001ca0:	23c1      	movs	r3, #193	; 0xc1
 8001ca2:	753b      	strb	r3, [r7, #20]
	uint8_t dest[1] = {0xe1};
 8001ca4:	23e1      	movs	r3, #225	; 0xe1
 8001ca6:	743b      	strb	r3, [r7, #16]
	uint16_t sum = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	847b      	strh	r3, [r7, #34]	; 0x22

	message[sizeof(message) - message_len + 0] = sync[0];
 8001cac:	4632      	mov	r2, r6
 8001cae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	7f39      	ldrb	r1, [r7, #28]
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 1] = sync[1];
 8001cba:	4632      	mov	r2, r6
 8001cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	7f79      	ldrb	r1, [r7, #29]
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 2] = length[0];
 8001cca:	4632      	mov	r2, r6
 8001ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	7e39      	ldrb	r1, [r7, #24]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 3] = length[1];
 8001cda:	4632      	mov	r2, r6
 8001cdc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	7e79      	ldrb	r1, [r7, #25]
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce8:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 4] = src[0];
 8001cea:	4632      	mov	r2, r6
 8001cec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	7d39      	ldrb	r1, [r7, #20]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 5] = dest[0];
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	3305      	adds	r3, #5
 8001d04:	7c39      	ldrb	r1, [r7, #16]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 6] = command;
 8001d0a:	4632      	mov	r2, r6
 8001d0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	3306      	adds	r3, #6
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	7af9      	ldrb	r1, [r7, #11]
 8001d18:	54d1      	strb	r1, [r2, r3]
	message[sizeof(message) - message_len + 7] = reg;
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	3307      	adds	r3, #7
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	7ab9      	ldrb	r1, [r7, #10]
 8001d28:	54d1      	strb	r1, [r2, r3]

	int i;
	for (i = 0; i < payload_len; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2e:	e00f      	b.n	8001d50 <mira_command+0x15c>
		message[sizeof(message) - message_len + 8 + i] = data[i];
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	441a      	add	r2, r3
 8001d36:	4631      	mov	r1, r6
 8001d38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d3c:	1ac9      	subs	r1, r1, r3
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	440b      	add	r3, r1
 8001d42:	3308      	adds	r3, #8
 8001d44:	7811      	ldrb	r1, [r2, #0]
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < payload_len; i++) {
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dbea      	blt.n	8001d30 <mira_command+0x13c>
	}

	sum = CRC16(message + 2, message_len-2);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b02      	subs	r3, #2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff fe60 	bl	8001a30 <CRC16>
 8001d70:	4603      	mov	r3, r0
 8001d72:	847b      	strh	r3, [r7, #34]	; 0x22

	message[sizeof(message)] = (sum&0xFF00)>>8;
 8001d74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4632      	mov	r2, r6
 8001d7c:	b2d9      	uxtb	r1, r3
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	5499      	strb	r1, [r3, r2]
	message[sizeof(message) - message_len + 10 + i-1] = (sum&0x00FF);
 8001d82:	4632      	mov	r2, r6
 8001d84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d88:	1ad2      	subs	r2, r2, r3
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3309      	adds	r3, #9
 8001d90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d92:	b2d1      	uxtb	r1, r2
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	54d1      	strb	r1, [r2, r3]

	//while (huart->RxState != HAL_UART_STATE_READY) {HAL_Delay(1);}

	// Enable transmitter and disable receiver
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <mira_command+0x214>)
 8001d9e:	f001 fcbf 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	2108      	movs	r1, #8
 8001da6:	4818      	ldr	r0, [pc, #96]	; (8001e08 <mira_command+0x214>)
 8001da8:	f001 fcba 	bl	8003720 <HAL_GPIO_WritePin>

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8001dac:	b2b2      	uxth	r2, r6
 8001dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f008 f958 	bl	800a068 <HAL_UART_Transmit>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	// Enable receiver and disable transmitter
	HAL_GPIO_WritePin(RX_EN_2_GPIO_Port, RX_EN_2_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4811      	ldr	r0, [pc, #68]	; (8001e08 <mira_command+0x214>)
 8001dc4:	f001 fcac 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_2_GPIO_Port, TX_EN_2_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2108      	movs	r1, #8
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <mira_command+0x214>)
 8001dce:	f001 fca7 	bl	8003720 <HAL_GPIO_WritePin>
	if (status != HAL_OK) {return status;}
 8001dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <mira_command+0x1ec>
 8001dda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dde:	e00c      	b.n	8001dfa <mira_command+0x206>

	status = HAL_UART_Receive_DMA(huart, rxBuffer, (uint8_t)10);
 8001de0:	220a      	movs	r2, #10
 8001de2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f008 f9cf 	bl	800a188 <HAL_UART_Receive_DMA>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_Delay(3);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 fe87 	bl	8002b04 <HAL_Delay>


	return status;
 8001df6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dfa:	46d5      	mov	sp, sl

}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3738      	adds	r7, #56	; 0x38
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e06:	bf00      	nop
 8001e08:	48001000 	.word	0x48001000

08001e0c <mira_science_data>:
 * @param *science_Rx: pointer to the buffer that stores the science data
 * @param *response_Rx: pointer to the buffer that stores the response from MIRA
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_science_data(UART_HandleTypeDef *huart, uint8_t *science_Rx, uint8_t science_size, uint32_t Timeout){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;

	// Get the science data and save it to rxBuffer
	status = mira_command_empty_payload(huart, GET_SCIENCE_DATA, science_Rx, science_size, Timeout);
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fe2b 	bl	8001a84 <mira_command_empty_payload>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <mira_science_data+0x46>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001e38:	2120      	movs	r1, #32
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <mira_science_data+0x50>)
 8001e3c:	f001 fc88 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001e40:	2032      	movs	r0, #50	; 0x32
 8001e42:	f000 fe5f 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001e46:	2120      	movs	r1, #32
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <mira_science_data+0x50>)
 8001e4a:	f001 fc81 	bl	8003750 <HAL_GPIO_TogglePin>
		return status;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	e000      	b.n	8001e54 <mira_science_data+0x48>
	}

	// return status
	return status;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	48000c00 	.word	0x48000c00

08001e60 <mira_init>:
 * Initialization sequence for MIRA.
 * @param *huart: pointer to the UART handle structure
 * @param Timeout: timeout duration for UART communication in milliseconds
 * @return status: status of the UART operation
 */
HAL_StatusTypeDef mira_init(UART_HandleTypeDef *huart, uint32_t Timeout){
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b0ad      	sub	sp, #180	; 0xb4
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	uint8_t mira_Rx_buffer[10];

	// Set AD address
	uint8_t AD_addr = 0x03;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	uint8_t mira_write_AD_addr[3] = {0x00,0x00,0x02}; // set value 2
 8001e70:	4ac4      	ldr	r2, [pc, #784]	; (8002184 <mira_init+0x324>)
 8001e72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	8019      	strh	r1, [r3, #0]
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	0c12      	lsrs	r2, r2, #16
 8001e80:	701a      	strb	r2, [r3, #0]
	status =  mira_command(huart, WRITE_REGISTER, AD_addr, mira_write_AD_addr, sizeof(mira_write_AD_addr), mira_Rx_buffer, Timeout);
 8001e82:	2003      	movs	r0, #3
 8001e84:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001e88:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2303      	movs	r3, #3
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fea8 	bl	8001bf4 <mira_command>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8001eaa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <mira_init+0x58>
 8001eb2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001eb6:	e216      	b.n	80022e6 <mira_init+0x486>

	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001eb8:	2108      	movs	r1, #8
 8001eba:	48b3      	ldr	r0, [pc, #716]	; (8002188 <mira_init+0x328>)
 8001ebc:	f001 fc48 	bl	8003750 <HAL_GPIO_TogglePin>
	HAL_Delay(800);
 8001ec0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ec4:	f000 fe1e 	bl	8002b04 <HAL_Delay>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001ec8:	2108      	movs	r1, #8
 8001eca:	48af      	ldr	r0, [pc, #700]	; (8002188 <mira_init+0x328>)
 8001ecc:	f001 fc40 	bl	8003750 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001ed0:	20c8      	movs	r0, #200	; 0xc8
 8001ed2:	f000 fe17 	bl	8002b04 <HAL_Delay>

	// Enable AD converter
	uint8_t AD_en = 0x02;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	uint8_t mira_write_AD_en[1] = {0x01};
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	status =  mira_command(huart, WRITE_REGISTER, AD_en, mira_write_AD_en, sizeof(mira_write_AD_en), mira_Rx_buffer, Timeout);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001ee8:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	4601      	mov	r1, r0
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe78 	bl	8001bf4 <mira_command>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8001f0a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <mira_init+0xb8>
 8001f12:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001f16:	e1e6      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001f18:	2108      	movs	r1, #8
 8001f1a:	489b      	ldr	r0, [pc, #620]	; (8002188 <mira_init+0x328>)
 8001f1c:	f001 fc18 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8001f20:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001f24:	f000 fdee 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001f28:	2108      	movs	r1, #8
 8001f2a:	4897      	ldr	r0, [pc, #604]	; (8002188 <mira_init+0x328>)
 8001f2c:	f001 fc10 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001f30:	20c8      	movs	r0, #200	; 0xc8
 8001f32:	f000 fde7 	bl	8002b04 <HAL_Delay>
	HAL_Delay(1000);
 8001f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3a:	f000 fde3 	bl	8002b04 <HAL_Delay>

	// Enable high voltage
	uint8_t HV_enable = 0x14;
 8001f3e:	2314      	movs	r3, #20
 8001f40:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	uint8_t mira_write_HV_enable[1] = {0x01};
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	status =  mira_command(huart, WRITE_REGISTER, HV_enable, mira_write_HV_enable, sizeof(mira_write_HV_enable), mira_Rx_buffer, Timeout);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001f50:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	460b      	mov	r3, r1
 8001f64:	4601      	mov	r1, r0
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fe44 	bl	8001bf4 <mira_command>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8001f72:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <mira_init+0x120>
 8001f7a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001f7e:	e1b2      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001f80:	2108      	movs	r1, #8
 8001f82:	4881      	ldr	r0, [pc, #516]	; (8002188 <mira_init+0x328>)
 8001f84:	f001 fbe4 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8001f88:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001f8c:	f000 fdba 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001f90:	2108      	movs	r1, #8
 8001f92:	487d      	ldr	r0, [pc, #500]	; (8002188 <mira_init+0x328>)
 8001f94:	f001 fbdc 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001f98:	20c8      	movs	r0, #200	; 0xc8
 8001f9a:	f000 fdb3 	bl	8002b04 <HAL_Delay>
	HAL_Delay(1000);
 8001f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa2:	f000 fdaf 	bl	8002b04 <HAL_Delay>

	// Set calibration values regs 7-10, 14, 15
	// Set integration time IT
	uint8_t IT = 0x07;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t mira_write_IT[6] = {0x00,0x00,0x00,0x00,0x00, 0x0F}; // 15 s
 8001fac:	4a77      	ldr	r2, [pc, #476]	; (800218c <mira_init+0x32c>)
 8001fae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb6:	6018      	str	r0, [r3, #0]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	8019      	strh	r1, [r3, #0]
	status =  mira_command(huart, WRITE_REGISTER, IT, mira_write_IT, sizeof(mira_write_IT), mira_Rx_buffer, Timeout);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fc2:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fe0b 	bl	8001bf4 <mira_command>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8001fe4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <mira_init+0x192>
 8001fec:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001ff0:	e179      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4864      	ldr	r0, [pc, #400]	; (8002188 <mira_init+0x328>)
 8001ff6:	f001 fbab 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8001ffa:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ffe:	f000 fd81 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002002:	2108      	movs	r1, #8
 8002004:	4860      	ldr	r0, [pc, #384]	; (8002188 <mira_init+0x328>)
 8002006:	f001 fba3 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800200a:	20c8      	movs	r0, #200	; 0xc8
 800200c:	f000 fd7a 	bl	8002b04 <HAL_Delay>

	// Set main trigger level
	uint8_t Trigger = 0x0B;
 8002010:	230b      	movs	r3, #11
 8002012:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	uint8_t mira_write_Trigger[16] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x28}; // set value 40
 8002016:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <mira_init+0x330>)
 8002018:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800201c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800201e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	status =  mira_command(huart, WRITE_REGISTER, Trigger, mira_write_Trigger, sizeof(mira_write_Trigger), mira_Rx_buffer, Timeout);
 8002022:	2003      	movs	r0, #3
 8002024:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002028:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2310      	movs	r3, #16
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	460b      	mov	r3, r1
 800203c:	4601      	mov	r1, r0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fdd8 	bl	8001bf4 <mira_command>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 800204a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <mira_init+0x1f8>
 8002052:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002056:	e146      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002058:	2108      	movs	r1, #8
 800205a:	484b      	ldr	r0, [pc, #300]	; (8002188 <mira_init+0x328>)
 800205c:	f001 fb78 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8002060:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002064:	f000 fd4e 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002068:	2108      	movs	r1, #8
 800206a:	4847      	ldr	r0, [pc, #284]	; (8002188 <mira_init+0x328>)
 800206c:	f001 fb70 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002070:	20c8      	movs	r0, #200	; 0xc8
 8002072:	f000 fd47 	bl	8002b04 <HAL_Delay>

	// Set fast noise level
	uint8_t Fast_noise = 0x08;
 8002076:	2308      	movs	r3, #8
 8002078:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	uint8_t mira_write_Fast_noise[13] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x0C}; // set value 12
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <mira_init+0x334>)
 800207e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	c407      	stmia	r4!, {r0, r1, r2}
 8002086:	7023      	strb	r3, [r4, #0]
	status =  mira_command(huart, WRITE_REGISTER, Fast_noise, mira_write_Fast_noise, sizeof(mira_write_Fast_noise), mira_Rx_buffer, Timeout);
 8002088:	2003      	movs	r0, #3
 800208a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800208e:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	230d      	movs	r3, #13
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	4601      	mov	r1, r0
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fda5 	bl	8001bf4 <mira_command>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80020b0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <mira_init+0x25e>
 80020b8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80020bc:	e113      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80020be:	2108      	movs	r1, #8
 80020c0:	4831      	ldr	r0, [pc, #196]	; (8002188 <mira_init+0x328>)
 80020c2:	f001 fb45 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80020c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020ca:	f000 fd1b 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80020ce:	2108      	movs	r1, #8
 80020d0:	482d      	ldr	r0, [pc, #180]	; (8002188 <mira_init+0x328>)
 80020d2:	f001 fb3d 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80020d6:	20c8      	movs	r0, #200	; 0xc8
 80020d8:	f000 fd14 	bl	8002b04 <HAL_Delay>

	// Set fast trigger level
	uint8_t Fast_trigger = 0x09;
 80020dc:	2309      	movs	r3, #9
 80020de:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	uint8_t mira_write_Fast_trigger[13] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x14}; // set value 20
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <mira_init+0x338>)
 80020e4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ea:	c407      	stmia	r4!, {r0, r1, r2}
 80020ec:	7023      	strb	r3, [r4, #0]
	status =  mira_command(huart, WRITE_REGISTER, Fast_trigger, mira_write_Fast_trigger, sizeof(mira_write_Fast_trigger), mira_Rx_buffer, Timeout);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80020f4:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	9302      	str	r3, [sp, #8]
 80020fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	230d      	movs	r3, #13
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	4601      	mov	r1, r0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fd72 	bl	8001bf4 <mira_command>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8002116:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <mira_init+0x2c4>
 800211e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002122:	e0e0      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002124:	2108      	movs	r1, #8
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <mira_init+0x328>)
 8002128:	f001 fb12 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800212c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002130:	f000 fce8 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002134:	2108      	movs	r1, #8
 8002136:	4814      	ldr	r0, [pc, #80]	; (8002188 <mira_init+0x328>)
 8002138:	f001 fb0a 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800213c:	20c8      	movs	r0, #200	; 0xc8
 800213e:	f000 fce1 	bl	8002b04 <HAL_Delay>

	// Set filter settings to 0
	uint8_t Filter_settings = 0x0A;
 8002142:	230a      	movs	r3, #10
 8002144:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint8_t mira_write_Filter_settings[4] = {0x00,0x00,0x00,0x00};
 8002148:	2300      	movs	r3, #0
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
	status =  mira_command(huart, WRITE_REGISTER, Filter_settings, mira_write_Filter_settings, sizeof(mira_write_Filter_settings), mira_Rx_buffer, Timeout);
 800214c:	2003      	movs	r0, #3
 800214e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002152:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	2304      	movs	r3, #4
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	4601      	mov	r1, r0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fd43 	bl	8001bf4 <mira_command>
 800216e:	4603      	mov	r3, r0
 8002170:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8002174:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00f      	beq.n	800219c <mira_init+0x33c>
 800217c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002180:	e0b1      	b.n	80022e6 <mira_init+0x486>
 8002182:	bf00      	nop
 8002184:	080136ac 	.word	0x080136ac
 8002188:	48000c00 	.word	0x48000c00
 800218c:	080136b0 	.word	0x080136b0
 8002190:	080136b8 	.word	0x080136b8
 8002194:	080136c8 	.word	0x080136c8
 8002198:	080136d8 	.word	0x080136d8
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800219c:	2108      	movs	r1, #8
 800219e:	4854      	ldr	r0, [pc, #336]	; (80022f0 <mira_init+0x490>)
 80021a0:	f001 fad6 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80021a4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021a8:	f000 fcac 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80021ac:	2108      	movs	r1, #8
 80021ae:	4850      	ldr	r0, [pc, #320]	; (80022f0 <mira_init+0x490>)
 80021b0:	f001 face 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80021b4:	20c8      	movs	r0, #200	; 0xc8
 80021b6:	f000 fca5 	bl	8002b04 <HAL_Delay>

	// Set fast calibration multiplier
	uint8_t Calib_m = 0x0E;
 80021ba:	230e      	movs	r3, #14
 80021bc:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	uint8_t mira_write_Calib_m[16] = {0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x27, 0x10}; // set value 10000
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <mira_init+0x494>)
 80021c2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	status =  mira_command(huart, WRITE_REGISTER, Calib_m, mira_write_Calib_m, sizeof(mira_write_Calib_m), mira_Rx_buffer, Timeout);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80021d2:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2310      	movs	r3, #16
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	4601      	mov	r1, r0
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fd03 	bl	8001bf4 <mira_command>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80021f4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <mira_init+0x3a2>
 80021fc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002200:	e071      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002202:	2108      	movs	r1, #8
 8002204:	483a      	ldr	r0, [pc, #232]	; (80022f0 <mira_init+0x490>)
 8002206:	f001 faa3 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800220a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800220e:	f000 fc79 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002212:	2108      	movs	r1, #8
 8002214:	4836      	ldr	r0, [pc, #216]	; (80022f0 <mira_init+0x490>)
 8002216:	f001 fa9b 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800221a:	20c8      	movs	r0, #200	; 0xc8
 800221c:	f000 fc72 	bl	8002b04 <HAL_Delay>

	// Set time in unix time (s)
	uint8_t Time = 0x0F;
 8002220:	230f      	movs	r3, #15
 8002222:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	uint8_t mira_write_Time[32];
	int i;
	for (i = 0; i < 32; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800222c:	e00b      	b.n	8002246 <mira_init+0x3e6>
		mira_write_Time[i] = 0;
 800222e:	f107 020c 	add.w	r2, r7, #12
 8002232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002236:	4413      	add	r3, r2
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 32; i++) {
 800223c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002240:	3301      	adds	r3, #1
 8002242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800224a:	2b1f      	cmp	r3, #31
 800224c:	ddef      	ble.n	800222e <mira_init+0x3ce>
	}
	status =  mira_command(huart, WRITE_REGISTER, Time, mira_write_Time, sizeof(mira_write_Time), mira_Rx_buffer, Timeout);
 800224e:	2003      	movs	r0, #3
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9302      	str	r3, [sp, #8]
 800225c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2320      	movs	r3, #32
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	460b      	mov	r3, r1
 8002268:	4601      	mov	r1, r0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fcc2 	bl	8001bf4 <mira_command>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 8002276:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <mira_init+0x424>
 800227e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8002282:	e030      	b.n	80022e6 <mira_init+0x486>
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002284:	2108      	movs	r1, #8
 8002286:	481a      	ldr	r0, [pc, #104]	; (80022f0 <mira_init+0x490>)
 8002288:	f001 fa62 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800228c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002290:	f000 fc38 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002294:	2108      	movs	r1, #8
 8002296:	4816      	ldr	r0, [pc, #88]	; (80022f0 <mira_init+0x490>)
 8002298:	f001 fa5a 	bl	8003750 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800229c:	20c8      	movs	r0, #200	; 0xc8
 800229e:	f000 fc31 	bl	8002b04 <HAL_Delay>

	// Go to science mode
	uint8_t Science_mode = 0x06;
 80022a2:	2306      	movs	r3, #6
 80022a4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	uint8_t mira_write_Science_mode[1] = {0x01};
 80022a8:	2301      	movs	r3, #1
 80022aa:	723b      	strb	r3, [r7, #8]
	status =  mira_command(huart, WRITE_REGISTER, Science_mode, mira_write_Science_mode, sizeof(mira_write_Science_mode), mira_Rx_buffer, Timeout);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f107 0108 	add.w	r1, r7, #8
 80022b2:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	2301      	movs	r3, #1
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	460b      	mov	r3, r1
 80022c6:	4601      	mov	r1, r0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fc93 	bl	8001bf4 <mira_command>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	if (status != HAL_OK) {return status;}
 80022d4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <mira_init+0x482>
 80022dc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80022e0:	e001      	b.n	80022e6 <mira_init+0x486>


	return status;
 80022e2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a

}
 80022e6:	4618      	mov	r0, r3
 80022e8:	37a4      	adds	r7, #164	; 0xa4
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	080136e8 	.word	0x080136e8

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_MspInit+0x44>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6613      	str	r3, [r2, #96]	; 0x60
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_MspInit+0x44>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_MspInit+0x44>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MspInit+0x44>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ae      	sub	sp, #184	; 0xb8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2294      	movs	r2, #148	; 0x94
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00e fbf1 	bl	8010b48 <memset>
  if(hi2c->Instance==I2C1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_I2C_MspInit+0xb0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d13a      	bne.n	80023e6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002374:	2300      	movs	r3, #0
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fccd 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002388:	f7ff fb48 	bl	8001a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a4:	23c0      	movs	r3, #192	; 0xc0
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023bc:	2304      	movs	r3, #4
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023c6:	4619      	mov	r1, r3
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <HAL_I2C_MspInit+0xb8>)
 80023ca:	f000 ffff 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	37b8      	adds	r7, #184	; 0xb8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40005400 	.word	0x40005400
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000400 	.word	0x48000400

080023fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0b0      	sub	sp, #192	; 0xc0
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	2294      	movs	r2, #148	; 0x94
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f00e fb93 	bl	8010b48 <memset>
  if(hsd->Instance==SDMMC1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a37      	ldr	r2, [pc, #220]	; (8002504 <HAL_SD_MspInit+0x108>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d166      	bne.n	80024fa <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800242c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002430:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fc6d 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8002448:	f7ff fae8 	bl	8001a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_SD_MspInit+0x10c>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4a2d      	ldr	r2, [pc, #180]	; (8002508 <HAL_SD_MspInit+0x10c>)
 8002452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_SD_MspInit+0x10c>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_SD_MspInit+0x10c>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_SD_MspInit+0x10c>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_SD_MspInit+0x10c>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_SD_MspInit+0x10c>)
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <HAL_SD_MspInit+0x10c>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_SD_MspInit+0x10c>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002494:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024ae:	230c      	movs	r3, #12
 80024b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024b8:	4619      	mov	r1, r3
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <HAL_SD_MspInit+0x110>)
 80024bc:	f000 ff86 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024c0:	2304      	movs	r3, #4
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024d8:	230c      	movs	r3, #12
 80024da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024e2:	4619      	mov	r1, r3
 80024e4:	480a      	ldr	r0, [pc, #40]	; (8002510 <HAL_SD_MspInit+0x114>)
 80024e6:	f000 ff71 	bl	80033cc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2031      	movs	r0, #49	; 0x31
 80024f0:	f000 fc07 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80024f4:	2031      	movs	r0, #49	; 0x31
 80024f6:	f000 fc20 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	37c0      	adds	r7, #192	; 0xc0
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	50062400 	.word	0x50062400
 8002508:	40021000 	.word	0x40021000
 800250c:	48000800 	.word	0x48000800
 8002510:	48000c00 	.word	0x48000c00

08002514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_SPI_MspInit+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d128      	bne.n	8002588 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_SPI_MspInit+0x80>)
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_SPI_MspInit+0x80>)
 800253c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002540:	6613      	str	r3, [r2, #96]	; 0x60
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_SPI_MspInit+0x80>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_SPI_MspInit+0x80>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <HAL_SPI_MspInit+0x80>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_SPI_MspInit+0x80>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8002566:	23f0      	movs	r3, #240	; 0xf0
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002576:	2305      	movs	r3, #5
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f000 ff22 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013000 	.word	0x40013000
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x38>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10b      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6613      	str	r3, [r2, #96]	; 0x60
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40014800 	.word	0x40014800
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0b0      	sub	sp, #192	; 0xc0
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	2294      	movs	r2, #148	; 0x94
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00e faa5 	bl	8010b48 <memset>
  if(huart->Instance==USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6d      	ldr	r2, [pc, #436]	; (80027b8 <HAL_UART_MspInit+0x1e0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	f040 8091 	bne.w	800272c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800260e:	2300      	movs	r3, #0
 8002610:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fb80 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002622:	f7ff f9fb 	bl	8001a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	4a64      	ldr	r2, [pc, #400]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6613      	str	r3, [r2, #96]	; 0x60
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a5e      	ldr	r2, [pc, #376]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002656:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002670:	2307      	movs	r3, #7
 8002672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800267a:	4619      	mov	r1, r3
 800267c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002680:	f000 fea4 	bl	80033cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002684:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 8002686:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <HAL_UART_MspInit+0x1ec>)
 8002688:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 800268c:	2218      	movs	r2, #24
 800268e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a8:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b4:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026ba:	4841      	ldr	r0, [pc, #260]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026bc:	f000 fb58 	bl	8002d70 <HAL_DMA_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80026c6:	f7ff f9a9 	bl	8001a1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_UART_MspInit+0x1e8>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026da:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_UART_MspInit+0x1f4>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026e0:	2219      	movs	r2, #25
 80026e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026e6:	2210      	movs	r2, #16
 80026e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 8002704:	2200      	movs	r2, #0
 8002706:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800270e:	482e      	ldr	r0, [pc, #184]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 8002710:	f000 fb2e 	bl	8002d70 <HAL_DMA_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800271a:	f7ff f97f 	bl	8001a1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 8002722:	67da      	str	r2, [r3, #124]	; 0x7c
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_UART_MspInit+0x1f0>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272a:	e040      	b.n	80027ae <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_UART_MspInit+0x1f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d13b      	bne.n	80027ae <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4618      	mov	r0, r3
 8002744:	f003 faea 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 800274e:	f7ff f965 	bl	8001a1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a13      	ldr	r2, [pc, #76]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_UART_MspInit+0x1e4>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002782:	230c      	movs	r3, #12
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279a:	2307      	movs	r3, #7
 800279c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027a4:	4619      	mov	r1, r3
 80027a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027aa:	f000 fe0f 	bl	80033cc <HAL_GPIO_Init>
}
 80027ae:	bf00      	nop
 80027b0:	37c0      	adds	r7, #192	; 0xc0
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	200005f0 	.word	0x200005f0
 80027c4:	40020008 	.word	0x40020008
 80027c8:	20000650 	.word	0x20000650
 80027cc:	4002001c 	.word	0x4002001c
 80027d0:	40004400 	.word	0x40004400

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027d8:	f003 f9c4 	bl	8005b64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80027dc:	e7fe      	b.n	80027dc <NMI_Handler+0x8>

080027de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <MemManage_Handler+0x4>

080027ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002824:	f000 f94e 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}

0800282c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA1_Channel1_IRQHandler+0x10>)
 8002832:	f000 fc7b 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200005f0 	.word	0x200005f0

08002840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <DMA1_Channel2_IRQHandler+0x10>)
 8002846:	f000 fc71 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000650 	.word	0x20000650

08002854 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 800286e:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8002886:	701a      	strb	r2, [r3, #0]
	if (tickSync) {tickSync--;}
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x4c>
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800289e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80028a2:	f006 fdd7 	bl	8009454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000cfc 	.word	0x20000cfc
 80028b0:	20000cfd 	.word	0x20000cfd
 80028b4:	20000cfe 	.word	0x20000cfe
 80028b8:	2000047c 	.word	0x2000047c

080028bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <USART1_IRQHandler+0x10>)
 80028c2:	f007 fcad 	bl	800a220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200004c8 	.word	0x200004c8

080028d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <USART2_IRQHandler+0x90>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028dc:	b29b      	uxth	r3, r3
 80028de:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <USART2_IRQHandler+0x94>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 80028e4:	4b20      	ldr	r3, [pc, #128]	; (8002968 <USART2_IRQHandler+0x98>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <USART2_IRQHandler+0x94>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	b2c8      	uxtb	r0, r1
 80028f2:	491c      	ldr	r1, [pc, #112]	; (8002964 <USART2_IRQHandler+0x94>)
 80028f4:	7008      	strb	r0, [r1, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d126      	bne.n	8002950 <USART2_IRQHandler+0x80>
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <USART2_IRQHandler+0x9c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d022      	beq.n	8002950 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <USART2_IRQHandler+0x98>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <USART2_IRQHandler+0x94>)
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4413      	add	r3, r2
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <USART2_IRQHandler+0xa0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <USART2_IRQHandler+0xa0>)
 8002924:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <USART2_IRQHandler+0x9c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f083 0301 	eor.w	r3, r3, #1
 800292e:	4a0f      	ldr	r2, [pc, #60]	; (800296c <USART2_IRQHandler+0x9c>)
 8002930:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <USART2_IRQHandler+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <USART2_IRQHandler+0x98>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <USART2_IRQHandler+0xa4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d103      	bne.n	800294a <USART2_IRQHandler+0x7a>
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <USART2_IRQHandler+0x98>)
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <USART2_IRQHandler+0xa8>)
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e002      	b.n	8002950 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <USART2_IRQHandler+0x98>)
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <USART2_IRQHandler+0xa4>)
 800294e:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002950:	4803      	ldr	r0, [pc, #12]	; (8002960 <USART2_IRQHandler+0x90>)
 8002952:	f007 fc65 	bl	800a220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000055c 	.word	0x2000055c
 8002964:	20000cf4 	.word	0x20000cf4
 8002968:	20000cf0 	.word	0x20000cf0
 800296c:	20000000 	.word	0x20000000
 8002970:	20000cf8 	.word	0x20000cf8
 8002974:	200006b0 	.word	0x200006b0
 8002978:	200009d0 	.word	0x200009d0

0800297c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <SDMMC1_IRQHandler+0x10>)
 8002982:	f005 f98f 	bl	8007ca4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000398 	.word	0x20000398

08002990 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <OTG_FS_IRQHandler+0x10>)
 8002996:	f001 f988 	bl	8003caa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20002204 	.word	0x20002204

080029a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <SystemInit+0x20>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <SystemInit+0x20>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029cc:	f7ff ffea 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <LoopForever+0xe>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e8:	4c0a      	ldr	r4, [pc, #40]	; (8002a14 <LoopForever+0x16>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f6:	f00e f86d 	bl	8010ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fa:	f7fe fb51 	bl	80010a0 <main>

080029fe <LoopForever>:

LoopForever:
    b LoopForever
 80029fe:	e7fe      	b.n	80029fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a00:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002a0c:	08013db8 	.word	0x08013db8
  ldr r2, =_sbss
 8002a10:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002a14:	20002944 	.word	0x20002944

08002a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC1_IRQHandler>

08002a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f000 f961 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2a:	200f      	movs	r0, #15
 8002a2c:	f000 f80e 	bl	8002a4c <HAL_InitTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	71fb      	strb	r3, [r7, #7]
 8002a3a:	e001      	b.n	8002a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a3c:	f7ff fc5c 	bl	80022f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_InitTick+0x6c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d023      	beq.n	8002aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_InitTick+0x70>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_InitTick+0x6c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f96d 	bl	8002d56 <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d809      	bhi.n	8002a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a90:	f000 f937 	bl	8002d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_InitTick+0x74>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e007      	b.n	8002aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e004      	b.n	8002aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e001      	b.n	8002aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000000c 	.word	0x2000000c
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c
 8002ae8:	20000d00 	.word	0x20000d00

08002aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000d00 	.word	0x20000d00

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff ffee 	bl	8002aec <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2a:	bf00      	nop
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
  {
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000000c 	.word	0x2000000c

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
         );
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff29 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff3e 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff8e 	bl	8002c40 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff31 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffa2 	bl	8002ca8 <SysTick_Config>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e08d      	b.n	8002e9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_DMA_Init+0x138>)
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d80f      	bhi.n	8002dae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b45      	ldr	r3, [pc, #276]	; (8002eac <HAL_DMA_Init+0x13c>)
 8002d96:	4413      	add	r3, r2
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_DMA_Init+0x140>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_DMA_Init+0x144>)
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_DMA_Init+0x148>)
 8002db6:	4413      	add	r3, r2
 8002db8:	4a3d      	ldr	r2, [pc, #244]	; (8002eb0 <HAL_DMA_Init+0x140>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	009a      	lsls	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <HAL_DMA_Init+0x14c>)
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa72 	bl	8003308 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2c:	d102      	bne.n	8002e34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_DMA_Init+0x104>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d80c      	bhi.n	8002e74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa92 	bl	8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e008      	b.n	8002e86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40020407 	.word	0x40020407
 8002eac:	bffdfff8 	.word	0xbffdfff8
 8002eb0:	cccccccd 	.word	0xcccccccd
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	bffdfbf8 	.word	0xbffdfbf8
 8002ebc:	40020400 	.word	0x40020400

08002ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_DMA_Start_IT+0x20>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e066      	b.n	8002fae <HAL_DMA_Start_IT+0xee>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d155      	bne.n	8002fa0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f9b6 	bl	800328a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 020e 	orr.w	r2, r2, #14
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e00f      	b.n	8002f58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 020a 	orr.w	r2, r2, #10
 8002f56:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e005      	b.n	8002fac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d008      	beq.n	8002fe0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e040      	b.n	8003062 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 020e 	bic.w	r2, r2, #14
 8002fee:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffe:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f003 021c 	and.w	r2, r3, #28
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f202 	lsl.w	r2, r1, r2
 8003022:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800302c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800304e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d005      	beq.n	8003092 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e047      	b.n	8003122 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 020e 	bic.w	r2, r2, #14
 80030a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f003 021c 	and.w	r2, r3, #28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00c      	beq.n	8003102 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003100:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
    }
  }
  return status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 031c 	and.w	r3, r3, #28
 800314c:	2204      	movs	r2, #4
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f003 021c 	and.w	r2, r3, #28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2104      	movs	r1, #4
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031a4:	e06c      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f003 031c 	and.w	r3, r3, #28
 80031ae:	2202      	movs	r2, #2
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d029      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 020a 	bic.w	r2, r2, #10
 80031e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 021c 	and.w	r2, r3, #28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2102      	movs	r1, #2
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d038      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003216:	e033      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f003 031c 	and.w	r3, r3, #28
 8003220:	2208      	movs	r2, #8
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d025      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020e 	bic.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021c 	and.w	r2, r3, #28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003280:	bf00      	nop
 8003282:	bf00      	nop
}
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032b2:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f003 021c 	and.w	r2, r3, #28
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d108      	bne.n	80032ea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032e8:	e007      	b.n	80032fa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	60da      	str	r2, [r3, #12]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d80a      	bhi.n	8003332 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003328:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6493      	str	r3, [r2, #72]	; 0x48
 8003330:	e007      	b.n	8003342 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	009a      	lsls	r2, r3, #2
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800333c:	4413      	add	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3b08      	subs	r3, #8
 800334a:	4a0c      	ldr	r2, [pc, #48]	; (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003358:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40020407 	.word	0x40020407
 8003378:	4002081c 	.word	0x4002081c
 800337c:	cccccccd 	.word	0xcccccccd
 8003380:	40020880 	.word	0x40020880

08003384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	1000823f 	.word	0x1000823f
 80033c8:	40020940 	.word	0x40020940

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033da:	e166      	b.n	80036aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8158 	beq.w	80036a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d005      	beq.n	800340c <HAL_GPIO_Init+0x40>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d130      	bne.n	800346e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003442:	2201      	movs	r2, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 0201 	and.w	r2, r3, #1
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b03      	cmp	r3, #3
 8003478:	d017      	beq.n	80034aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d123      	bne.n	80034fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3208      	adds	r2, #8
 80034f8:	6939      	ldr	r1, [r7, #16]
 80034fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	2203      	movs	r2, #3
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0203 	and.w	r2, r3, #3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80b2 	beq.w	80036a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_GPIO_Init+0x2fc>)
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_GPIO_Init+0x2fc>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6613      	str	r3, [r2, #96]	; 0x60
 800354c:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <HAL_GPIO_Init+0x2fc>)
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003558:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_GPIO_Init+0x300>)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003582:	d02b      	beq.n	80035dc <HAL_GPIO_Init+0x210>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_GPIO_Init+0x304>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d025      	beq.n	80035d8 <HAL_GPIO_Init+0x20c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_GPIO_Init+0x308>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d01f      	beq.n	80035d4 <HAL_GPIO_Init+0x208>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_GPIO_Init+0x30c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d019      	beq.n	80035d0 <HAL_GPIO_Init+0x204>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <HAL_GPIO_Init+0x310>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_GPIO_Init+0x200>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <HAL_GPIO_Init+0x314>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00d      	beq.n	80035c8 <HAL_GPIO_Init+0x1fc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a4d      	ldr	r2, [pc, #308]	; (80036e4 <HAL_GPIO_Init+0x318>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <HAL_GPIO_Init+0x1f8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x31c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_GPIO_Init+0x1f4>
 80035bc:	2307      	movs	r3, #7
 80035be:	e00e      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035c0:	2308      	movs	r3, #8
 80035c2:	e00c      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035c4:	2306      	movs	r3, #6
 80035c6:	e00a      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035c8:	2305      	movs	r3, #5
 80035ca:	e008      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035cc:	2304      	movs	r3, #4
 80035ce:	e006      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035d0:	2303      	movs	r3, #3
 80035d2:	e004      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e002      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_GPIO_Init+0x212>
 80035dc:	2300      	movs	r3, #0
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	f002 0203 	and.w	r2, r2, #3
 80035e4:	0092      	lsls	r2, r2, #2
 80035e6:	4093      	lsls	r3, r2
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ee:	4937      	ldr	r1, [pc, #220]	; (80036cc <HAL_GPIO_Init+0x300>)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	3302      	adds	r3, #2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_GPIO_Init+0x320>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003620:	4a32      	ldr	r2, [pc, #200]	; (80036ec <HAL_GPIO_Init+0x320>)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_GPIO_Init+0x320>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <HAL_GPIO_Init+0x320>)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_GPIO_Init+0x320>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_GPIO_Init+0x320>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_GPIO_Init+0x320>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <HAL_GPIO_Init+0x320>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f ae91 	bne.w	80033dc <HAL_GPIO_Init+0x10>
  }
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40010000 	.word	0x40010000
 80036d0:	48000400 	.word	0x48000400
 80036d4:	48000800 	.word	0x48000800
 80036d8:	48000c00 	.word	0x48000c00
 80036dc:	48001000 	.word	0x48001000
 80036e0:	48001400 	.word	0x48001400
 80036e4:	48001800 	.word	0x48001800
 80036e8:	48001c00 	.word	0x48001c00
 80036ec:	40010400 	.word	0x40010400

080036f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e001      	b.n	8003712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800373c:	e002      	b.n	8003744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43d9      	mvns	r1, r3
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	400b      	ands	r3, r1
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e08d      	b.n	80038b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe fdc8 	bl	8002340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d107      	bne.n	80037fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	e006      	b.n	800380c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800380a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d108      	bne.n	8003826 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	e007      	b.n	8003836 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003834:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c8:	b2db      	uxtb	r3, r3
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d138      	bne.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e032      	b.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2224      	movs	r2, #36	; 0x24
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003928:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d139      	bne.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398c:	2302      	movs	r3, #2
 800398e:	e033      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	b08f      	sub	sp, #60	; 0x3c
 8003a08:	af0a      	add	r7, sp, #40	; 0x28
 8003a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e116      	b.n	8003c44 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f00c fc69 	bl	8010308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f008 fe4e 	bl	800c6f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	687e      	ldr	r6, [r7, #4]
 8003a62:	466d      	mov	r5, sp
 8003a64:	f106 0410 	add.w	r4, r6, #16
 8003a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a74:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a78:	1d33      	adds	r3, r6, #4
 8003a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f008 fd61 	bl	800c544 <USB_CoreInit>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0d7      	b.n	8003c44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f008 fe3c 	bl	800c718 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	e04a      	b.n	8003b3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	333d      	adds	r3, #61	; 0x3d
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	333c      	adds	r3, #60	; 0x3c
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	b298      	uxth	r0, r3
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3356      	adds	r3, #86	; 0x56
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3344      	adds	r3, #68	; 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3348      	adds	r3, #72	; 0x48
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	334c      	adds	r3, #76	; 0x4c
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3af      	bcc.n	8003aa6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e044      	b.n	8003bd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3b5      	bcc.n	8003b4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	687e      	ldr	r6, [r7, #4]
 8003be8:	466d      	mov	r5, sp
 8003bea:	f106 0410 	add.w	r4, r6, #16
 8003bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bfe:	1d33      	adds	r3, r6, #4
 8003c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f008 fdd4 	bl	800c7b0 <USB_DevInit>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e014      	b.n	8003c44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d102      	bne.n	8003c38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 f86a 	bl	8004d0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f009 fd82 	bl	800d746 <USB_DevDisconnect>

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_PCD_Start+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e01c      	b.n	8003ca2 <HAL_PCD_Start+0x56>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f008 fd23 	bl	800c6d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f009 fd36 	bl	800d704 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003caa:	b590      	push	{r4, r7, lr}
 8003cac:	b08d      	sub	sp, #52	; 0x34
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f009 fdf4 	bl	800d8ae <USB_GetMode>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 847e 	bne.w	80045ca <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f009 fd58 	bl	800d788 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8474 	beq.w	80045c8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f009 fd45 	bl	800d788 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d107      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f002 0202 	and.w	r2, r2, #2
 8003d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f009 fd33 	bl	800d788 <USB_ReadInterrupts>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d161      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0210 	bic.w	r2, r2, #16
 8003d3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	0c5b      	lsrs	r3, r3, #17
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d124      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d035      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	6a38      	ldr	r0, [r7, #32]
 8003d88:	f009 fb6a 	bl	800d460 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	441a      	add	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003daa:	441a      	add	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	615a      	str	r2, [r3, #20]
 8003db0:	e016      	b.n	8003de0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	0c5b      	lsrs	r3, r3, #17
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d110      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6a38      	ldr	r0, [r7, #32]
 8003dca:	f009 fb49 	bl	800d460 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dda:	441a      	add	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0210 	orr.w	r2, r2, #16
 8003dee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f009 fcc7 	bl	800d788 <USB_ReadInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e04:	f040 80a7 	bne.w	8003f56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f009 fccc 	bl	800d7ae <USB_ReadDevAllOutEpInterrupt>
 8003e16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e18:	e099      	b.n	8003f4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 808e 	beq.w	8003f42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f009 fcf0 	bl	800d816 <USB_ReadDevOutEPInterrupt>
 8003e36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2301      	movs	r3, #1
 8003e52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fe7e 	bl	8004b58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	2308      	movs	r3, #8
 8003e76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 feba 	bl	8004bf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	461a      	mov	r2, r3
 8003e98:	2310      	movs	r3, #16
 8003e9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d030      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d109      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	78db      	ldrb	r3, [r3, #3]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f00c fb4d 	bl	8010590 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	2302      	movs	r3, #2
 8003f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2320      	movs	r3, #32
 8003f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	3301      	adds	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f af62 	bne.w	8003e1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f009 fc14 	bl	800d788 <USB_ReadInterrupts>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f6a:	f040 80a4 	bne.w	80040b6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f009 fc35 	bl	800d7e2 <USB_ReadDevAllInEpInterrupt>
 8003f78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f7e:	e096      	b.n	80040ae <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 808b 	beq.w	80040a2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f009 fc5b 	bl	800d852 <USB_ReadDevInEPInterrupt>
 8003f9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc8:	4013      	ands	r3, r2
 8003fca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2301      	movs	r3, #1
 8003fdc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f00c fa3e 	bl	8010466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004000:	461a      	mov	r2, r3
 8004002:	2308      	movs	r3, #8
 8004004:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	461a      	mov	r2, r3
 800401e:	2310      	movs	r3, #16
 8004020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	461a      	mov	r2, r3
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404a:	6a38      	ldr	r0, [r7, #32]
 800404c:	f008 fcf2 	bl	800ca34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	3338      	adds	r3, #56	; 0x38
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	3304      	adds	r3, #4
 8004062:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d108      	bne.n	800407e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f00c fa9b 	bl	80105b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	2302      	movs	r3, #2
 800408e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fcd2 	bl	8004a46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	3301      	adds	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f af65 	bne.w	8003f80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f009 fb64 	bl	800d788 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ca:	d122      	bne.n	8004112 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d108      	bne.n	80040fc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fe2d 	bl	8004d54 <HAL_PCDEx_LPM_Callback>
 80040fa:	e002      	b.n	8004102 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f00c fa1f 	bl	8010540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f009 fb36 	bl	800d788 <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d112      	bne.n	800414e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d102      	bne.n	800413e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f00c f9db 	bl	80104f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800414c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f009 fb18 	bl	800d788 <USB_ReadInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004162:	d121      	bne.n	80041a8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004172:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d111      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004198:	2101      	movs	r1, #1
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fdda 	bl	8004d54 <HAL_PCDEx_LPM_Callback>
 80041a0:	e002      	b.n	80041a8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f00c f9a6 	bl	80104f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f009 faeb 	bl	800d788 <USB_ReadInterrupts>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	f040 80b5 	bne.w	800432a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2110      	movs	r1, #16
 80041da:	4618      	mov	r0, r3
 80041dc:	f008 fc2a 	bl	800ca34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e4:	e046      	b.n	8004274 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	461a      	mov	r2, r3
 80041f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004218:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800422c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004248:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800424c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004268:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800426c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	3301      	adds	r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d3b3      	bcc.n	80041e6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004290:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042aa:	f043 030b 	orr.w	r3, r3, #11
 80042ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c0:	f043 030b 	orr.w	r3, r3, #11
 80042c4:	6453      	str	r3, [r2, #68]	; 0x44
 80042c6:	e015      	b.n	80042f4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80042de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ee:	f043 030b 	orr.w	r3, r3, #11
 80042f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004302:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004306:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f009 fafb 	bl	800d910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f009 fa2a 	bl	800d788 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433e:	d124      	bne.n	800438a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f009 fac0 	bl	800d8ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f008 fbed 	bl	800cb2e <USB_GetDevSpeed>
 8004354:	4603      	mov	r3, r0
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681c      	ldr	r4, [r3, #0]
 8004360:	f001 fbb8 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8004364:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	4620      	mov	r0, r4
 8004370:	f008 f914 	bl	800c59c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f00c f89e 	bl	80104b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004388:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f009 f9fa 	bl	800d788 <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b08      	cmp	r3, #8
 800439c:	d10a      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f00c f87b 	bl	801049a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f002 0208 	and.w	r2, r2, #8
 80043b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f009 f9e5 	bl	800d788 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d122      	bne.n	800440e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d4:	2301      	movs	r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	e014      	b.n	8004404 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 faf3 	bl	80049e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	3301      	adds	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440a:	429a      	cmp	r2, r3
 800440c:	d3e5      	bcc.n	80043da <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f009 f9b8 	bl	800d788 <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d13b      	bne.n	800449c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004424:	2301      	movs	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
 8004428:	e02b      	b.n	8004482 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3340      	adds	r3, #64	; 0x40
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d115      	bne.n	800447c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004450:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004452:	2b00      	cmp	r3, #0
 8004454:	da12      	bge.n	800447c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	333f      	adds	r3, #63	; 0x3f
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fab4 	bl	80049e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	3301      	adds	r3, #1
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	429a      	cmp	r2, r3
 800448a:	d3ce      	bcc.n	800442a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800449a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f009 f971 	bl	800d788 <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b0:	d155      	bne.n	800455e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044b2:	2301      	movs	r3, #1
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e045      	b.n	8004544 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d12e      	bne.n	800453e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da2b      	bge.n	800453e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d121      	bne.n	800453e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453a:	6053      	str	r3, [r2, #4]
            break;
 800453c:	e007      	b.n	800454e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	3301      	adds	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	429a      	cmp	r2, r3
 800454c:	d3b4      	bcc.n	80044b8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800455c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f009 f910 	bl	800d788 <USB_ReadInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d10a      	bne.n	800458a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f00c f82f 	bl	80105d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f009 f8fa 	bl	800d788 <USB_ReadInterrupts>
 8004594:	4603      	mov	r3, r0
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d115      	bne.n	80045ca <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f00c f81f 	bl	80105f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e000      	b.n	80045ca <HAL_PCD_IRQHandler+0x920>
      return;
 80045c8:	bf00      	nop
    }
  }
}
 80045ca:	3734      	adds	r7, #52	; 0x34
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_PCD_SetAddress+0x1a>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e013      	b.n	8004612 <HAL_PCD_SetAddress+0x42>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f009 f858 	bl	800d6b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	4608      	mov	r0, r1
 8004624:	4611      	mov	r1, r2
 8004626:	461a      	mov	r2, r3
 8004628:	4603      	mov	r3, r0
 800462a:	70fb      	strb	r3, [r7, #3]
 800462c:	460b      	mov	r3, r1
 800462e:	803b      	strh	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da0f      	bge.n	8004660 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 020f 	and.w	r2, r3, #15
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	3338      	adds	r3, #56	; 0x38
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	3304      	adds	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	705a      	strb	r2, [r3, #1]
 800465e:	e00f      	b.n	8004680 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 020f 	and.w	r2, r3, #15
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	b2da      	uxtb	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800468c:	883a      	ldrh	r2, [r7, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	78ba      	ldrb	r2, [r7, #2]
 8004696:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046aa:	78bb      	ldrb	r3, [r7, #2]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d102      	bne.n	80046b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_PCD_EP_Open+0xaa>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e00e      	b.n	80046e2 <HAL_PCD_EP_Open+0xc8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f008 fa4a 	bl	800cb6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046e0:	7afb      	ldrb	r3, [r7, #11]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da0f      	bge.n	800471e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 020f 	and.w	r2, r3, #15
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	3338      	adds	r3, #56	; 0x38
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	3304      	adds	r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	705a      	strb	r2, [r3, #1]
 800471c:	e00f      	b.n	800473e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_PCD_EP_Close+0x6e>
 8004754:	2302      	movs	r3, #2
 8004756:	e00e      	b.n	8004776 <HAL_PCD_EP_Close+0x8c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f008 fa88 	bl	800cc7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	460b      	mov	r3, r1
 800478c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	3304      	adds	r3, #4
 80047a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c0:	7afb      	ldrb	r3, [r7, #11]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6979      	ldr	r1, [r7, #20]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f008 fb2e 	bl	800ce34 <USB_EPStartXfer>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f003 020f 	and.w	r2, r3, #15
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004804:	681b      	ldr	r3, [r3, #0]
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	460b      	mov	r3, r1
 8004820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2201      	movs	r2, #1
 8004850:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	4618      	mov	r0, r3
 8004866:	f008 fae5 	bl	800ce34 <USB_EPStartXfer>

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d901      	bls.n	8004892 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e04e      	b.n	8004930 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	da0f      	bge.n	80048ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3338      	adds	r3, #56	; 0x38
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	705a      	strb	r2, [r3, #1]
 80048b8:	e00d      	b.n	80048d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_PCD_EP_SetStall+0x82>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e01c      	b.n	8004930 <HAL_PCD_EP_SetStall+0xbc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	4618      	mov	r0, r3
 8004906:	f008 fe03 	bl	800d510 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f008 fff5 	bl	800d910 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d901      	bls.n	8004956 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e042      	b.n	80049dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	da0f      	bge.n	800497e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 020f 	and.w	r2, r3, #15
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3338      	adds	r3, #56	; 0x38
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	3304      	adds	r3, #4
 8004974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	705a      	strb	r2, [r3, #1]
 800497c:	e00f      	b.n	800499e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 020f 	and.w	r2, r3, #15
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_PCD_EP_ClrStall+0x86>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e00e      	b.n	80049dc <HAL_PCD_EP_ClrStall+0xa4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f008 fe0d 	bl	800d5ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	da0c      	bge.n	8004a12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	3338      	adds	r3, #56	; 0x38
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e00c      	b.n	8004a2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f008 fc30 	bl	800d298 <USB_EPStopXfer>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b088      	sub	sp, #32
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3338      	adds	r3, #56	; 0x38
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d901      	bls.n	8004a7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e067      	b.n	8004b4e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d902      	bls.n	8004a9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3303      	adds	r3, #3
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aa2:	e026      	b.n	8004af2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d902      	bls.n	8004ac0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3303      	adds	r3, #3
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68d9      	ldr	r1, [r3, #12]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	6978      	ldr	r0, [r7, #20]
 8004ad6:	f008 fc89 	bl	800d3ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	441a      	add	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d809      	bhi.n	8004b1c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d203      	bcs.n	8004b1c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1c3      	bne.n	8004aa4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d811      	bhi.n	8004b4c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	2201      	movs	r2, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	43db      	mvns	r3, r3
 8004b42:	6939      	ldr	r1, [r7, #16]
 8004b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b48:	4013      	ands	r3, r2
 8004b4a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	333c      	adds	r3, #60	; 0x3c
 8004b70:	3304      	adds	r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d124      	bne.n	8004bd8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	6093      	str	r3, [r2, #8]
 8004bac:	e01a      	b.n	8004be4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2320      	movs	r3, #32
 8004bc8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f00b fc2d 	bl	8010430 <HAL_PCD_DataOutStageCallback>
 8004bd6:	e005      	b.n	8004be4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f00b fc26 	bl	8010430 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	4f54310a 	.word	0x4f54310a

08004bf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	333c      	adds	r3, #60	; 0x3c
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d90e      	bls.n	8004c48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f00b fbdf 	bl	801040c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	4f54300a 	.word	0x4f54300a

08004c5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c7a:	883b      	ldrh	r3, [r7, #0]
 8004c7c:	0419      	lsls	r1, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
 8004c88:	e028      	b.n	8004cdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	e00d      	b.n	8004cba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	3340      	adds	r3, #64	; 0x40
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3ec      	bcc.n	8004c9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cc4:	883b      	ldrh	r3, [r7, #0]
 8004cc6:	0418      	lsls	r0, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4302      	orrs	r2, r0
 8004cd4:	3340      	adds	r3, #64	; 0x40
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	f043 0303 	orr.w	r3, r3, #3
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d102      	bne.n	8004d84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d82:	e00b      	b.n	8004d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d102      	bne.n	8004d9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d98:	e000      	b.n	8004d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40007000 	.word	0x40007000

08004dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d141      	bne.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dba:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d131      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc8:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dce:	4a46      	ldr	r2, [pc, #280]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004de0:	4a41      	ldr	r2, [pc, #260]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2232      	movs	r2, #50	; 0x32
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	4a3f      	ldr	r2, [pc, #252]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	0c9b      	lsrs	r3, r3, #18
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfe:	e002      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d102      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f2      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e26:	d158      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e057      	b.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e32:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e3c:	e04d      	b.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d141      	bne.n	8004eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e52:	d131      	bne.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e54:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e64:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2232      	movs	r2, #50	; 0x32
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8a:	e002      	b.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d102      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f2      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d112      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e011      	b.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ec8:	e007      	b.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	431bde83 	.word	0x431bde83

08004ef4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f02:	6053      	str	r3, [r2, #4]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40007000 	.word	0x40007000

08004f14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 bc08 	b.w	8005738 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f28:	4b96      	ldr	r3, [pc, #600]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f32:	4b94      	ldr	r3, [pc, #592]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80e4 	beq.w	8005112 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4c>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	f040 808b 	bne.w	800506e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	f040 8087 	bne.w	800506e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f60:	4b88      	ldr	r3, [pc, #544]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_OscConfig+0x64>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e3df      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	4b81      	ldr	r3, [pc, #516]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_RCC_OscConfig+0x7e>
 8004f88:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f90:	e005      	b.n	8004f9e <HAL_RCC_OscConfig+0x8a>
 8004f92:	4b7c      	ldr	r3, [pc, #496]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d223      	bcs.n	8004fea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fdf8 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e3c0      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb6:	4b73      	ldr	r3, [pc, #460]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a72      	ldr	r2, [pc, #456]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	f043 0308 	orr.w	r3, r3, #8
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b70      	ldr	r3, [pc, #448]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	496d      	ldr	r1, [pc, #436]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd4:	4b6b      	ldr	r3, [pc, #428]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4968      	ldr	r1, [pc, #416]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	e025      	b.n	8005036 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fea:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	f043 0308 	orr.w	r3, r3, #8
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	4960      	ldr	r1, [pc, #384]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005008:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	495b      	ldr	r1, [pc, #364]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fdb8 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e380      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005036:	f000 fcc1 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b51      	ldr	r3, [pc, #324]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	4950      	ldr	r1, [pc, #320]	; (8005188 <HAL_RCC_OscConfig+0x274>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	4a4e      	ldr	r2, [pc, #312]	; (800518c <HAL_RCC_OscConfig+0x278>)
 8005054:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_RCC_OscConfig+0x27c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fd fcf6 	bl	8002a4c <HAL_InitTick>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d052      	beq.n	8005110 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	e364      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d032      	beq.n	80050dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005076:	4b43      	ldr	r3, [pc, #268]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a42      	ldr	r2, [pc, #264]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005082:	f7fd fd33 	bl	8002aec <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800508a:	f7fd fd2f 	bl	8002aec <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e34d      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800509c:	4b39      	ldr	r3, [pc, #228]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a35      	ldr	r2, [pc, #212]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050ae:	f043 0308 	orr.w	r3, r3, #8
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4930      	ldr	r1, [pc, #192]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	492b      	ldr	r1, [pc, #172]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
 80050da:	e01a      	b.n	8005112 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050dc:	4b29      	ldr	r3, [pc, #164]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050e8:	f7fd fd00 	bl	8002aec <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050f0:	f7fd fcfc 	bl	8002aec <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e31a      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x1dc>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d073      	beq.n	8005206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d005      	beq.n	8005130 <HAL_RCC_OscConfig+0x21c>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d10e      	bne.n	8005148 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d10b      	bne.n	8005148 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d063      	beq.n	8005204 <HAL_RCC_OscConfig+0x2f0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d15f      	bne.n	8005204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e2f7      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x24c>
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e025      	b.n	80051ac <HAL_RCC_OscConfig+0x298>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005168:	d114      	bne.n	8005194 <HAL_RCC_OscConfig+0x280>
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a05      	ldr	r2, [pc, #20]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a02      	ldr	r2, [pc, #8]	; (8005184 <HAL_RCC_OscConfig+0x270>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e013      	b.n	80051ac <HAL_RCC_OscConfig+0x298>
 8005184:	40021000 	.word	0x40021000
 8005188:	08013940 	.word	0x08013940
 800518c:	20000004 	.word	0x20000004
 8005190:	20000008 	.word	0x20000008
 8005194:	4ba0      	ldr	r3, [pc, #640]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a9f      	ldr	r2, [pc, #636]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b9d      	ldr	r3, [pc, #628]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a9c      	ldr	r2, [pc, #624]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd fc9a 	bl	8002aec <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fd fc96 	bl	8002aec <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e2b4      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ce:	4b92      	ldr	r3, [pc, #584]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x2a8>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fc86 	bl	8002aec <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd fc82 	bl	8002aec <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e2a0      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051f6:	4b88      	ldr	r3, [pc, #544]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2d0>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d060      	beq.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d005      	beq.n	8005224 <HAL_RCC_OscConfig+0x310>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d119      	bne.n	8005252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d116      	bne.n	8005252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005224:	4b7c      	ldr	r3, [pc, #496]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x328>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e27d      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b76      	ldr	r3, [pc, #472]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	4973      	ldr	r1, [pc, #460]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e040      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d023      	beq.n	80052a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525a:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6e      	ldr	r2, [pc, #440]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fd fc41 	bl	8002aec <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526e:	f7fd fc3d 	bl	8002aec <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e25b      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005280:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	4b62      	ldr	r3, [pc, #392]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	495f      	ldr	r1, [pc, #380]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	e018      	b.n	80052d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fd fc1d 	bl	8002aec <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fd fc19 	bl	8002aec <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e237      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d03c      	beq.n	800535a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01c      	beq.n	8005322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e8:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fd fbf8 	bl	8002aec <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005300:	f7fd fbf4 	bl	8002aec <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e212      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ef      	beq.n	8005300 <HAL_RCC_OscConfig+0x3ec>
 8005320:	e01b      	b.n	800535a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005328:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fd fbdb 	bl	8002aec <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533a:	f7fd fbd7 	bl	8002aec <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1f5      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800534c:	4b32      	ldr	r3, [pc, #200]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ef      	bne.n	800533a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80a6 	beq.w	80054b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800536c:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	4a26      	ldr	r2, [pc, #152]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6593      	str	r3, [r2, #88]	; 0x58
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <HAL_RCC_OscConfig+0x508>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d118      	bne.n	80053d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ac:	f7fd fb9e 	bl	8002aec <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b4:	f7fd fb9a 	bl	8002aec <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1b8      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <HAL_RCC_OscConfig+0x508>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <HAL_RCC_OscConfig+0x4d8>
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ea:	e029      	b.n	8005440 <HAL_RCC_OscConfig+0x52c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d115      	bne.n	8005420 <HAL_RCC_OscConfig+0x50c>
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a03      	ldr	r2, [pc, #12]	; (8005418 <HAL_RCC_OscConfig+0x504>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005414:	e014      	b.n	8005440 <HAL_RCC_OscConfig+0x52c>
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	40007000 	.word	0x40007000
 8005420:	4b9d      	ldr	r3, [pc, #628]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a9c      	ldr	r2, [pc, #624]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005430:	4b99      	ldr	r3, [pc, #612]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a98      	ldr	r2, [pc, #608]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d016      	beq.n	8005476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fd fb50 	bl	8002aec <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005450:	f7fd fb4c 	bl	8002aec <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e168      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005466:	4b8c      	ldr	r3, [pc, #560]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ed      	beq.n	8005450 <HAL_RCC_OscConfig+0x53c>
 8005474:	e015      	b.n	80054a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fd fb39 	bl	8002aec <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800547c:	e00a      	b.n	8005494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547e:	f7fd fb35 	bl	8002aec <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f241 3288 	movw	r2, #5000	; 0x1388
 800548c:	4293      	cmp	r3, r2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e151      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005494:	4b80      	ldr	r3, [pc, #512]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ed      	bne.n	800547e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a2:	7ffb      	ldrb	r3, [r7, #31]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a8:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	4a7a      	ldr	r2, [pc, #488]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d03c      	beq.n	800553a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01c      	beq.n	8005502 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054c8:	4b73      	ldr	r3, [pc, #460]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ce:	4a72      	ldr	r2, [pc, #456]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fd fb08 	bl	8002aec <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e0:	f7fd fb04 	bl	8002aec <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e122      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054f2:	4b69      	ldr	r3, [pc, #420]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80054f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <HAL_RCC_OscConfig+0x5cc>
 8005500:	e01b      	b.n	800553a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005502:	4b65      	ldr	r3, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005508:	4a63      	ldr	r2, [pc, #396]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fd faeb 	bl	8002aec <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551a:	f7fd fae7 	bl	8002aec <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e105      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800552c:	4b5a      	ldr	r3, [pc, #360]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800552e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ef      	bne.n	800551a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80f9 	beq.w	8005736 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	2b02      	cmp	r3, #2
 800554a:	f040 80cf 	bne.w	80056ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800554e:	4b52      	ldr	r3, [pc, #328]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d12c      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	3b01      	subs	r3, #1
 800556e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d123      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d11b      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d113      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d109      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	3b01      	subs	r3, #1
 80055b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d071      	beq.n	80056a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d068      	beq.n	8005694 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055c2:	4b35      	ldr	r3, [pc, #212]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80055ce:	4b32      	ldr	r3, [pc, #200]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0ac      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055de:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 80055e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055ea:	f7fd fa7f 	bl	8002aec <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fd fa7b 	bl	8002aec <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e099      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f0      	bne.n	80055f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCC_OscConfig+0x788>)
 8005616:	4013      	ands	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005620:	3a01      	subs	r2, #1
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800562a:	0212      	lsls	r2, r2, #8
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005632:	0852      	lsrs	r2, r2, #1
 8005634:	3a01      	subs	r2, #1
 8005636:	0552      	lsls	r2, r2, #21
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0652      	lsls	r2, r2, #25
 8005644:	4311      	orrs	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800564a:	06d2      	lsls	r2, r2, #27
 800564c:	430a      	orrs	r2, r1
 800564e:	4912      	ldr	r1, [pc, #72]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005650:	4313      	orrs	r3, r2
 8005652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005654:	4b10      	ldr	r3, [pc, #64]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 800565a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005660:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800566a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800566c:	f7fd fa3e 	bl	8002aec <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005674:	f7fd fa3a 	bl	8002aec <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e058      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_RCC_OscConfig+0x784>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005692:	e050      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e04f      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
 8005698:	40021000 	.word	0x40021000
 800569c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d144      	bne.n	8005736 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a23      	ldr	r2, [pc, #140]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056c4:	f7fd fa12 	bl	8002aec <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fd fa0e 	bl	8002aec <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e02c      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056de:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x7b8>
 80056ea:	e024      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d01f      	beq.n	8005732 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 80056f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fd f9f5 	bl	8002aec <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005706:	f7fd f9f1 	bl	8002aec <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e00f      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	4905      	ldr	r1, [pc, #20]	; (8005740 <HAL_RCC_OscConfig+0x82c>)
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_OscConfig+0x830>)
 800572c:	4013      	ands	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
 8005730:	e001      	b.n	8005736 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	feeefffc 	.word	0xfeeefffc

08005748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e11d      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b90      	ldr	r3, [pc, #576]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	498b      	ldr	r1, [pc, #556]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b89      	ldr	r3, [pc, #548]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e105      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d908      	bls.n	80057be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ac:	4b7e      	ldr	r3, [pc, #504]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	497b      	ldr	r1, [pc, #492]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d079      	beq.n	80058be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d11e      	bne.n	8005810 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	4b75      	ldr	r3, [pc, #468]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0dc      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80057e2:	f000 fa35 	bl	8005c50 <RCC_GetSysClockFreqFromPLLSource>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d946      	bls.n	800587c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057ee:	4b6e      	ldr	r3, [pc, #440]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d140      	bne.n	800587c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fa:	4b6b      	ldr	r3, [pc, #428]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005802:	4a69      	ldr	r2, [pc, #420]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e035      	b.n	800587c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005818:	4b63      	ldr	r3, [pc, #396]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d115      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0b9      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005830:	4b5d      	ldr	r3, [pc, #372]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0ad      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005840:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0a5      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005850:	f000 f8b4 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8005854:	4603      	mov	r3, r0
 8005856:	4a55      	ldr	r2, [pc, #340]	; (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d90f      	bls.n	800587c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800585c:	4b52      	ldr	r3, [pc, #328]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005868:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005870:	4a4d      	ldr	r2, [pc, #308]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800587c:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 0203 	bic.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4947      	ldr	r1, [pc, #284]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588e:	f7fd f92d 	bl	8002aec <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005894:	e00a      	b.n	80058ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005896:	f7fd f929 	bl	8002aec <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e077      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 020c 	and.w	r2, r3, #12
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d1eb      	bne.n	8005896 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d105      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058c4:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a37      	ldr	r2, [pc, #220]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d208      	bcs.n	80058fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ec:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	492b      	ldr	r1, [pc, #172]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058fe:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d210      	bcs.n	800592e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 020f 	bic.w	r2, r3, #15
 8005914:	4923      	ldr	r1, [pc, #140]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591c:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <HAL_RCC_ClockConfig+0x25c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d001      	beq.n	800592e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e036      	b.n	800599c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4918      	ldr	r1, [pc, #96]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4910      	ldr	r1, [pc, #64]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800596c:	f000 f826 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8005970:	4602      	mov	r2, r0
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	490c      	ldr	r1, [pc, #48]	; (80059b0 <HAL_RCC_ClockConfig+0x268>)
 800597e:	5ccb      	ldrb	r3, [r1, r3]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <HAL_RCC_ClockConfig+0x26c>)
 800598a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x270>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd f85b 	bl	8002a4c <HAL_InitTick>
 8005996:	4603      	mov	r3, r0
 8005998:	73fb      	strb	r3, [r7, #15]

  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40022000 	.word	0x40022000
 80059a8:	40021000 	.word	0x40021000
 80059ac:	04c4b400 	.word	0x04c4b400
 80059b0:	08013940 	.word	0x08013940
 80059b4:	20000004 	.word	0x20000004
 80059b8:	20000008 	.word	0x20000008

080059bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ca:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d4:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x34>
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d121      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d11e      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059f0:	4b34      	ldr	r3, [pc, #208]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059fc:	4b31      	ldr	r3, [pc, #196]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e005      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a18:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10d      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e004      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d134      	bne.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0xac>
 8005a60:	e005      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_RCC_GetSysClockFreq+0x110>)
 8005a64:	617b      	str	r3, [r7, #20]
      break;
 8005a66:	e005      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a6a:	617b      	str	r3, [r7, #20]
      break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	617b      	str	r3, [r7, #20]
      break;
 8005a72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	3301      	adds	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	fb03 f202 	mul.w	r2, r3, r2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	0e5b      	lsrs	r3, r3, #25
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3724      	adds	r7, #36	; 0x24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	08013958 	.word	0x08013958
 8005acc:	00f42400 	.word	0x00f42400
 8005ad0:	007a1200 	.word	0x007a1200

08005ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000004 	.word	0x20000004

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005af0:	f7ff fff0 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4904      	ldr	r1, [pc, #16]	; (8005b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	08013950 	.word	0x08013950

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b1c:	f7ff ffda 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0adb      	lsrs	r3, r3, #11
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	08013950 	.word	0x08013950

08005b44 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_EnableCSS+0x1c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <HAL_RCC_EnableCSS+0x1c>)
 8005b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000

08005b64 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b76:	f000 f809 	bl	8005b8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b7a:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b80:	621a      	str	r2, [r3, #32]
  }
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000

08005b8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bb4:	f7ff f8da 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 8005bb8:	6178      	str	r0, [r7, #20]
 8005bba:	e014      	b.n	8005be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc8:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bd4:	f7ff f8ca 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 8005bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d10b      	bne.n	8005c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d913      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8005bf8:	d902      	bls.n	8005c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e00d      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e00a      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0a:	d902      	bls.n	8005c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e004      	b.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b70      	cmp	r3, #112	; 0x70
 8005c16:	d101      	bne.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c18:	2301      	movs	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 020f 	bic.w	r2, r3, #15
 8005c24:	4909      	ldr	r1, [pc, #36]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c2c:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40022000 	.word	0x40022000

08005c50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c56:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d00b      	beq.n	8005c7e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d825      	bhi.n	8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d008      	beq.n	8005c84 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d11f      	bne.n	8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c7a:	613b      	str	r3, [r7, #16]
    break;
 8005c7c:	e01f      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c80:	613b      	str	r3, [r7, #16]
    break;
 8005c82:	e01c      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e005      	b.n	8005cac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	613b      	str	r3, [r7, #16]
    break;
 8005cb6:	e002      	b.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
    break;
 8005cbc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	fb03 f202 	mul.w	r2, r3, r2
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	0e5b      	lsrs	r3, r3, #25
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005cfe:	683b      	ldr	r3, [r7, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	00f42400 	.word	0x00f42400
 8005d14:	007a1200 	.word	0x007a1200
 8005d18:	08013958 	.word	0x08013958

08005d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d24:	2300      	movs	r3, #0
 8005d26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d040      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d02a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d825      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d026      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d48:	2b60      	cmp	r3, #96	; 0x60
 8005d4a:	d821      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d006      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d81d      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d5c:	e018      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d5e:	4b89      	ldr	r3, [pc, #548]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4a88      	ldr	r2, [pc, #544]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d6a:	e015      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 fa24 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3320      	adds	r3, #32
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fb0f 	bl	80073a8 <RCCEx_PLLSAI2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	74fb      	strb	r3, [r7, #19]
      break;
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d9e:	4b79      	ldr	r3, [pc, #484]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dac:	4975      	ldr	r1, [pc, #468]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005db4:	e001      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d047      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d030      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d82a      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dda:	d02a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de0:	d824      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de6:	d008      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	d81e      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d010      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005df8:	e018      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dfa:	4b62      	ldr	r3, [pc, #392]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4a61      	ldr	r2, [pc, #388]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e06:	e015      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 f9d6 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3320      	adds	r3, #32
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fac1 	bl	80073a8 <RCCEx_PLLSAI2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	74fb      	strb	r3, [r7, #19]
      break;
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e3a:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	494e      	ldr	r1, [pc, #312]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e50:	e001      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 809f 	beq.w	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e64:	2300      	movs	r3, #0
 8005e66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e68:	4b46      	ldr	r3, [pc, #280]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e7e:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	4a40      	ldr	r2, [pc, #256]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e96:	2301      	movs	r3, #1
 8005e98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea6:	f7fc fe21 	bl	8002aec <HAL_GetTick>
 8005eaa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eac:	e009      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eae:	f7fc fe1d 	bl	8002aec <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d902      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8005ec0:	e005      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec2:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ef      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d15b      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01f      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d019      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005efe:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f1e:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d016      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fc fddc 	bl	8002aec <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f36:	e00b      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fc fdd8 	bl	8002aec <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d902      	bls.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8005f4e:	e006      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ec      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f5e:	7cfb      	ldrb	r3, [r7, #19]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	4903      	ldr	r1, [pc, #12]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	74bb      	strb	r3, [r7, #18]
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f90:	7c7b      	ldrb	r3, [r7, #17]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f96:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	4a9f      	ldr	r2, [pc, #636]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fae:	4b9a      	ldr	r3, [pc, #616]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f023 0203 	bic.w	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	4996      	ldr	r1, [pc, #600]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fd0:	4b91      	ldr	r3, [pc, #580]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	f023 020c 	bic.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	498e      	ldr	r1, [pc, #568]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	4985      	ldr	r1, [pc, #532]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006014:	4b80      	ldr	r3, [pc, #512]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	497d      	ldr	r1, [pc, #500]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006036:	4b78      	ldr	r3, [pc, #480]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	4974      	ldr	r1, [pc, #464]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006058:	4b6f      	ldr	r3, [pc, #444]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006066:	496c      	ldr	r1, [pc, #432]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800607a:	4b67      	ldr	r3, [pc, #412]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006088:	4963      	ldr	r1, [pc, #396]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800609c:	4b5e      	ldr	r3, [pc, #376]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060aa:	495b      	ldr	r1, [pc, #364]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	4952      	ldr	r1, [pc, #328]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060e0:	4b4d      	ldr	r3, [pc, #308]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	494a      	ldr	r1, [pc, #296]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006102:	4b45      	ldr	r3, [pc, #276]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	4941      	ldr	r1, [pc, #260]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f023 0203 	bic.w	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	4939      	ldr	r1, [pc, #228]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d028      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006146:	4b34      	ldr	r3, [pc, #208]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006154:	4930      	ldr	r1, [pc, #192]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006164:	d106      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006166:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006170:	60d3      	str	r3, [r2, #12]
 8006172:	e011      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800617c:	d10c      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	2101      	movs	r1, #1
 8006184:	4618      	mov	r0, r3
 8006186:	f001 f81b 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d04d      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ac:	d108      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061be:	e012      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061c0:	4b15      	ldr	r3, [pc, #84]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ee:	d106      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e020      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006206:	d109      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a02      	ldr	r2, [pc, #8]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006212:	60d3      	str	r3, [r2, #12]
 8006214:	e014      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006224:	d10c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f000 ffc7 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800623c:	7cfb      	ldrb	r3, [r7, #19]
 800623e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d028      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800624c:	4b4a      	ldr	r3, [pc, #296]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800625a:	4947      	ldr	r1, [pc, #284]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626a:	d106      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a41      	ldr	r2, [pc, #260]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006276:	60d3      	str	r3, [r2, #12]
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800627e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 ff98 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ba:	492f      	ldr	r1, [pc, #188]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ff73 	bl	80071c0 <RCCEx_PLLSAI1_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062de:	7cfb      	ldrb	r3, [r7, #19]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fa:	f023 0204 	bic.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	491c      	ldr	r1, [pc, #112]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800631e:	f023 0218 	bic.w	r2, r3, #24
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	4913      	ldr	r1, [pc, #76]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d017      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800635a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635e:	d105      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	4a04      	ldr	r2, [pc, #16]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800636a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800636c:	7cbb      	ldrb	r3, [r7, #18]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40021000 	.word	0x40021000

0800637c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638e:	d13e      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006390:	4bb6      	ldr	r3, [pc, #728]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a2:	d028      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063aa:	f200 86f4 	bhi.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b4:	d005      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063bc:	d00e      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80063be:	f000 beea 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063c2:	4baa      	ldr	r3, [pc, #680]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 86e4 	bne.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	61fb      	str	r3, [r7, #28]
      break;
 80063d8:	f000 bedf 	b.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063dc:	4ba3      	ldr	r3, [pc, #652]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	f040 86d9 	bne.w	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80063ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f0:	61fb      	str	r3, [r7, #28]
      break;
 80063f2:	f000 bed4 	b.w	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063f6:	4b9d      	ldr	r3, [pc, #628]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006402:	f040 86ce 	bne.w	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006406:	4b9a      	ldr	r3, [pc, #616]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006408:	61fb      	str	r3, [r7, #28]
      break;
 800640a:	f000 beca 	b.w	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800640e:	4b97      	ldr	r3, [pc, #604]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d036      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d840      	bhi.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d003      	beq.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d020      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006430:	e039      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006432:	4b8e      	ldr	r3, [pc, #568]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d116      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800643e:	4b8b      	ldr	r3, [pc, #556]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800644a:	4b88      	ldr	r3, [pc, #544]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	e005      	b.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006456:	4b85      	ldr	r3, [pc, #532]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	4a84      	ldr	r2, [pc, #528]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800646a:	e01f      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
      break;
 8006470:	e01c      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006472:	4b7e      	ldr	r3, [pc, #504]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647e:	d102      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006480:	4b7d      	ldr	r3, [pc, #500]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006482:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006484:	e012      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
      break;
 800648a:	e00f      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800648c:	4b77      	ldr	r3, [pc, #476]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006498:	d102      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800649a:	4b78      	ldr	r3, [pc, #480]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800649c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800649e:	e005      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
      break;
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
      break;
 80064aa:	bf00      	nop
    }

    switch(PeriphClk)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064b2:	f000 8606 	beq.w	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064bc:	f200 8673 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c6:	f000 8469 	beq.w	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d0:	f200 8669 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064da:	f000 8531 	beq.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e4:	f200 865f 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064ee:	f000 8187 	beq.w	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064f8:	f200 8655 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006502:	f000 80cd 	beq.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800650c:	f200 864b 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	f000 8430 	beq.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	f200 8641 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652a:	f000 83e4 	beq.w	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006534:	f200 8637 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653e:	f000 80af 	beq.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006548:	f200 862d 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	f000 809d 	beq.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	f200 8623 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006566:	f000 808b 	beq.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006570:	f200 8619 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657a:	f000 8554 	beq.w	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	f200 860f 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658e:	f000 8500 	beq.w	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006598:	f200 8605 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	f000 84a1 	beq.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ac:	f200 85fb 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	f000 846c 	beq.w	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	f200 85f3 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d84c      	bhi.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 85ec 	beq.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	2b1f      	cmp	r3, #31
 80065d4:	f200 85e7 	bhi.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	080069f5 	.word	0x080069f5
 80065e4:	08006a63 	.word	0x08006a63
 80065e8:	080071a7 	.word	0x080071a7
 80065ec:	08006af7 	.word	0x08006af7
 80065f0:	080071a7 	.word	0x080071a7
 80065f4:	080071a7 	.word	0x080071a7
 80065f8:	080071a7 	.word	0x080071a7
 80065fc:	08006b6f 	.word	0x08006b6f
 8006600:	080071a7 	.word	0x080071a7
 8006604:	080071a7 	.word	0x080071a7
 8006608:	080071a7 	.word	0x080071a7
 800660c:	080071a7 	.word	0x080071a7
 8006610:	080071a7 	.word	0x080071a7
 8006614:	080071a7 	.word	0x080071a7
 8006618:	080071a7 	.word	0x080071a7
 800661c:	08006bf3 	.word	0x08006bf3
 8006620:	080071a7 	.word	0x080071a7
 8006624:	080071a7 	.word	0x080071a7
 8006628:	080071a7 	.word	0x080071a7
 800662c:	080071a7 	.word	0x080071a7
 8006630:	080071a7 	.word	0x080071a7
 8006634:	080071a7 	.word	0x080071a7
 8006638:	080071a7 	.word	0x080071a7
 800663c:	080071a7 	.word	0x080071a7
 8006640:	080071a7 	.word	0x080071a7
 8006644:	080071a7 	.word	0x080071a7
 8006648:	080071a7 	.word	0x080071a7
 800664c:	080071a7 	.word	0x080071a7
 8006650:	080071a7 	.word	0x080071a7
 8006654:	080071a7 	.word	0x080071a7
 8006658:	080071a7 	.word	0x080071a7
 800665c:	08006c75 	.word	0x08006c75
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	f000 83e8 	beq.w	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006668:	f000 bd9d 	b.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800666c:	40021000 	.word	0x40021000
 8006670:	0003d090 	.word	0x0003d090
 8006674:	08013958 	.word	0x08013958
 8006678:	00f42400 	.word	0x00f42400
 800667c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006686:	f000 ff83 	bl	8007590 <RCCEx_GetSAIxPeriphCLKFreq>
 800668a:	61f8      	str	r0, [r7, #28]
      break;
 800668c:	f000 bd8e 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006690:	69b9      	ldr	r1, [r7, #24]
 8006692:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006696:	f000 ff7b 	bl	8007590 <RCCEx_GetSAIxPeriphCLKFreq>
 800669a:	61f8      	str	r0, [r7, #28]
      break;
 800669c:	f000 bd86 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80066a0:	4b9a      	ldr	r3, [pc, #616]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066b2:	d015      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066ba:	f200 8092 	bhi.w	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c4:	d029      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066cc:	f200 8089 	bhi.w	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d07b      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066dc:	d04a      	beq.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80066de:	e080      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066e0:	4b8a      	ldr	r3, [pc, #552]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d17d      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066ec:	4b87      	ldr	r3, [pc, #540]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80066f8:	4b84      	ldr	r3, [pc, #528]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	091b      	lsrs	r3, r3, #4
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	e005      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006704:	4b81      	ldr	r3, [pc, #516]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	4a7f      	ldr	r2, [pc, #508]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	61fb      	str	r3, [r7, #28]
          break;
 8006718:	e066      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800671a:	4b7c      	ldr	r3, [pc, #496]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006726:	d162      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006728:	4b78      	ldr	r3, [pc, #480]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006734:	d15b      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006736:	4b75      	ldr	r3, [pc, #468]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006740:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	fb03 f202 	mul.w	r2, r3, r2
 800674a:	4b70      	ldr	r3, [pc, #448]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	091b      	lsrs	r3, r3, #4
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	3301      	adds	r3, #1
 8006756:	fbb2 f3f3 	udiv	r3, r2, r3
 800675a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800675c:	4b6b      	ldr	r3, [pc, #428]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	0d5b      	lsrs	r3, r3, #21
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	3301      	adds	r3, #1
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	61fb      	str	r3, [r7, #28]
          break;
 8006772:	e03c      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006774:	4b65      	ldr	r3, [pc, #404]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006780:	d138      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006782:	4b62      	ldr	r3, [pc, #392]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678e:	d131      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006790:	4b5e      	ldr	r3, [pc, #376]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	fb03 f202 	mul.w	r2, r3, r2
 80067a4:	4b59      	ldr	r3, [pc, #356]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	3301      	adds	r3, #1
 80067b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80067b6:	4b55      	ldr	r3, [pc, #340]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	0d5b      	lsrs	r3, r3, #21
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	3301      	adds	r3, #1
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	61fb      	str	r3, [r7, #28]
          break;
 80067cc:	e012      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80067ce:	4b4f      	ldr	r3, [pc, #316]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d10e      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80067dc:	4b4d      	ldr	r3, [pc, #308]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067de:	61fb      	str	r3, [r7, #28]
          break;
 80067e0:	e00b      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80067e2:	bf00      	nop
 80067e4:	f000 bce2 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067e8:	bf00      	nop
 80067ea:	f000 bcdf 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067ee:	bf00      	nop
 80067f0:	f000 bcdc 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067f4:	bf00      	nop
 80067f6:	f000 bcd9 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067fa:	bf00      	nop
        break;
 80067fc:	f000 bcd6 	b.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006800:	4b42      	ldr	r3, [pc, #264]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680e:	d13d      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006810:	4b3e      	ldr	r3, [pc, #248]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800681c:	f040 84c5 	bne.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006820:	4b3a      	ldr	r3, [pc, #232]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	f040 84bd 	bne.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006830:	4b36      	ldr	r3, [pc, #216]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	fb03 f202 	mul.w	r2, r3, r2
 8006844:	4b31      	ldr	r3, [pc, #196]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3301      	adds	r3, #1
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006856:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	0edb      	lsrs	r3, r3, #27
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006868:	4b28      	ldr	r3, [pc, #160]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006874:	2311      	movs	r3, #17
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e001      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800687a:	2307      	movs	r3, #7
 800687c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	61fb      	str	r3, [r7, #28]
      break;
 8006888:	f000 bc8f 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800688c:	4b1f      	ldr	r3, [pc, #124]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006892:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800689e:	d016      	beq.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068a6:	f200 809b 	bhi.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b0:	d032      	beq.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b8:	f200 8092 	bhi.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8084 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ca:	d052      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80068cc:	e088      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	f040 8084 	bne.w	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	e005      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	4a03      	ldr	r2, [pc, #12]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006906:	61fb      	str	r3, [r7, #28]
          break;
 8006908:	e06c      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000
 8006910:	08013958 	.word	0x08013958
 8006914:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006918:	4ba5      	ldr	r3, [pc, #660]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006924:	d160      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006926:	4ba2      	ldr	r3, [pc, #648]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006932:	d159      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006934:	4b9e      	ldr	r3, [pc, #632]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	0a1b      	lsrs	r3, r3, #8
 800693a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	fb03 f202 	mul.w	r2, r3, r2
 8006948:	4b99      	ldr	r3, [pc, #612]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	3301      	adds	r3, #1
 8006954:	fbb2 f3f3 	udiv	r3, r2, r3
 8006958:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800695a:	4b95      	ldr	r3, [pc, #596]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	0d5b      	lsrs	r3, r3, #21
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	3301      	adds	r3, #1
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	61fb      	str	r3, [r7, #28]
          break;
 8006970:	e03a      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006972:	4b8f      	ldr	r3, [pc, #572]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800697a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697e:	d135      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006980:	4b8b      	ldr	r3, [pc, #556]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698c:	d12e      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800698e:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006998:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	fb03 f202 	mul.w	r2, r3, r2
 80069a2:	4b83      	ldr	r3, [pc, #524]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	3301      	adds	r3, #1
 80069ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80069b4:	4b7e      	ldr	r3, [pc, #504]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	0d5b      	lsrs	r3, r3, #21
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	3301      	adds	r3, #1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	61fb      	str	r3, [r7, #28]
          break;
 80069ca:	e00f      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80069cc:	4b78      	ldr	r3, [pc, #480]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d10a      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80069da:	4b76      	ldr	r3, [pc, #472]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069dc:	61fb      	str	r3, [r7, #28]
          break;
 80069de:	e007      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80069e0:	bf00      	nop
 80069e2:	e3e2      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069e4:	bf00      	nop
 80069e6:	e3e0      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069e8:	bf00      	nop
 80069ea:	e3de      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069ec:	bf00      	nop
 80069ee:	e3dc      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069f0:	bf00      	nop
      break;
 80069f2:	e3da      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069f4:	4b6e      	ldr	r3, [pc, #440]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d827      	bhi.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a25 	.word	0x08006a25
 8006a14:	08006a2d 	.word	0x08006a2d
 8006a18:	08006a41 	.word	0x08006a41
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7ff f87c 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
          break;
 8006a22:	e01d      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a24:	f7fe ffca 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006a28:	61f8      	str	r0, [r7, #28]
          break;
 8006a2a:	e019      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a2c:	4b60      	ldr	r3, [pc, #384]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d10f      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006a3a:	4b5f      	ldr	r3, [pc, #380]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a3c:	61fb      	str	r3, [r7, #28]
          break;
 8006a3e:	e00c      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a40:	4b5b      	ldr	r3, [pc, #364]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	61fb      	str	r3, [r7, #28]
          break;
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006a56:	bf00      	nop
 8006a58:	e3a8      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a5a:	bf00      	nop
 8006a5c:	e3a6      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a5e:	bf00      	nop
        break;
 8006a60:	e3a4      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a62:	4b53      	ldr	r3, [pc, #332]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d83a      	bhi.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006aeb 	.word	0x08006aeb
 8006a88:	08006aeb 	.word	0x08006aeb
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006aeb 	.word	0x08006aeb
 8006a94:	08006aeb 	.word	0x08006aeb
 8006a98:	08006aeb 	.word	0x08006aeb
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006aeb 	.word	0x08006aeb
 8006aa4:	08006aeb 	.word	0x08006aeb
 8006aa8:	08006aeb 	.word	0x08006aeb
 8006aac:	08006ad5 	.word	0x08006ad5
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7ff f81c 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006ab4:	61f8      	str	r0, [r7, #28]
          break;
 8006ab6:	e01d      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ab8:	f7fe ff80 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006abc:	61f8      	str	r0, [r7, #28]
          break;
 8006abe:	e019      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ac0:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006acc:	d10f      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006ace:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ad0:	61fb      	str	r3, [r7, #28]
          break;
 8006ad2:	e00c      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae6:	61fb      	str	r3, [r7, #28]
          break;
 8006ae8:	e003      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006aea:	bf00      	nop
 8006aec:	e35e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aee:	bf00      	nop
 8006af0:	e35c      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006af2:	bf00      	nop
        break;
 8006af4:	e35a      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d021      	beq.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b30      	cmp	r3, #48	; 0x30
 8006b0c:	d829      	bhi.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d011      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d823      	bhi.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d004      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006b26:	e01c      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b28:	f7fe ffe0 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006b2c:	61f8      	str	r0, [r7, #28]
          break;
 8006b2e:	e01d      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b30:	f7fe ff44 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006b34:	61f8      	str	r0, [r7, #28]
          break;
 8006b36:	e019      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b44:	d10f      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006b46:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b48:	61fb      	str	r3, [r7, #28]
          break;
 8006b4a:	e00c      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b4c:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d107      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b5e:	61fb      	str	r3, [r7, #28]
          break;
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006b62:	bf00      	nop
 8006b64:	e322      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b66:	bf00      	nop
 8006b68:	e320      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b6a:	bf00      	nop
        break;
 8006b6c:	e31e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b6e:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8006b7e:	d027      	beq.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d82f      	bhi.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d017      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d829      	bhi.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006b9e:	e022      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fe ffa4 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61f8      	str	r0, [r7, #28]
          break;
 8006ba6:	e023      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ba8:	f7fe ff08 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006bac:	61f8      	str	r0, [r7, #28]
          break;
 8006bae:	e01f      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	02dc6c00 	.word	0x02dc6c00
 8006bb8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bbc:	4b9b      	ldr	r3, [pc, #620]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc8:	d10f      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006bca:	4b99      	ldr	r3, [pc, #612]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006bcc:	61fb      	str	r3, [r7, #28]
          break;
 8006bce:	e00c      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bd0:	4b96      	ldr	r3, [pc, #600]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d107      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be2:	61fb      	str	r3, [r7, #28]
          break;
 8006be4:	e003      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006be6:	bf00      	nop
 8006be8:	e2e0      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bea:	bf00      	nop
 8006bec:	e2de      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bee:	bf00      	nop
        break;
 8006bf0:	e2dc      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006bf2:	4b8e      	ldr	r3, [pc, #568]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c04:	d025      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0c:	d82c      	bhi.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c14:	d013      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1c:	d824      	bhi.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2a:	d004      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006c2c:	e01c      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c2e:	f7fe ff5d 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006c32:	61f8      	str	r0, [r7, #28]
          break;
 8006c34:	e01d      	b.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fe fec1 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006c3a:	61f8      	str	r0, [r7, #28]
          break;
 8006c3c:	e019      	b.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4a:	d10f      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006c4c:	4b78      	ldr	r3, [pc, #480]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c4e:	61fb      	str	r3, [r7, #28]
          break;
 8006c50:	e00c      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c52:	4b76      	ldr	r3, [pc, #472]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c64:	61fb      	str	r3, [r7, #28]
          break;
 8006c66:	e003      	b.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006c68:	bf00      	nop
 8006c6a:	e29f      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c6c:	bf00      	nop
 8006c6e:	e29d      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c70:	bf00      	nop
        break;
 8006c72:	e29b      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c74:	4b6d      	ldr	r3, [pc, #436]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c86:	d025      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c8e:	d82c      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c96:	d013      	beq.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9e:	d824      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006cae:	e01c      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fe ff1c 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61f8      	str	r0, [r7, #28]
          break;
 8006cb6:	e01d      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cb8:	f7fe fe80 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006cbc:	61f8      	str	r0, [r7, #28]
          break;
 8006cbe:	e019      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cc0:	4b5a      	ldr	r3, [pc, #360]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d10f      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006cce:	4b58      	ldr	r3, [pc, #352]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006cd0:	61fb      	str	r3, [r7, #28]
          break;
 8006cd2:	e00c      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cd4:	4b55      	ldr	r3, [pc, #340]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce6:	61fb      	str	r3, [r7, #28]
          break;
 8006ce8:	e003      	b.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006cea:	bf00      	nop
 8006cec:	e25e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cee:	bf00      	nop
 8006cf0:	e25c      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cf2:	bf00      	nop
        break;
 8006cf4:	e25a      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cf6:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d08:	d007      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d10:	d12f      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d12:	f7fe fe53 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006d16:	61f8      	str	r0, [r7, #28]
          break;
 8006d18:	e02e      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006d1a:	4b44      	ldr	r3, [pc, #272]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d26:	d126      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006d28:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d020      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d34:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	fb03 f202 	mul.w	r2, r3, r2
 8006d48:	4b38      	ldr	r3, [pc, #224]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	091b      	lsrs	r3, r3, #4
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	3301      	adds	r3, #1
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006d5a:	4b34      	ldr	r3, [pc, #208]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	0e5b      	lsrs	r3, r3, #25
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	3301      	adds	r3, #1
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6e:	61fb      	str	r3, [r7, #28]
          break;
 8006d70:	e001      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006d72:	bf00      	nop
 8006d74:	e21a      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d76:	bf00      	nop
        break;
 8006d78:	e218      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d8c:	f7fe fec4 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e20b      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d94:	f7fe fe12 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006d98:	61f8      	str	r0, [r7, #28]
        break;
 8006d9a:	e207      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006d9c:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da2:	f003 0318 	and.w	r3, r3, #24
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d010      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d834      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d024      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006dc0:	e02d      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006dc2:	69b9      	ldr	r1, [r7, #24]
 8006dc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006dc8:	f000 fbe2 	bl	8007590 <RCCEx_GetSAIxPeriphCLKFreq>
 8006dcc:	61f8      	str	r0, [r7, #28]
          break;
 8006dce:	e02b      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006dd0:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d122      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	e005      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e06:	61fb      	str	r3, [r7, #28]
          break;
 8006e08:	e00b      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e16:	d106      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e1a:	61fb      	str	r3, [r7, #28]
          break;
 8006e1c:	e003      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006e1e:	bf00      	nop
 8006e20:	e1c4      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e22:	bf00      	nop
 8006e24:	e1c2      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e26:	bf00      	nop
        break;
 8006e28:	e1c0      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006e2a:	bf00      	nop
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	00f42400 	.word	0x00f42400
 8006e34:	08013958 	.word	0x08013958
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e38:	4b96      	ldr	r3, [pc, #600]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e4a:	d013      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e52:	d819      	bhi.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006e62:	e011      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fe fe42 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006e68:	61f8      	str	r0, [r7, #28]
          break;
 8006e6a:	e010      	b.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e6c:	f7fe fda6 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006e70:	61f8      	str	r0, [r7, #28]
          break;
 8006e72:	e00c      	b.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e74:	4b87      	ldr	r3, [pc, #540]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e80:	d104      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006e82:	4b85      	ldr	r3, [pc, #532]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006e84:	61fb      	str	r3, [r7, #28]
          break;
 8006e86:	e001      	b.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006e88:	bf00      	nop
 8006e8a:	e18f      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e8c:	bf00      	nop
        break;
 8006e8e:	e18d      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e90:	4b80      	ldr	r3, [pc, #512]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea2:	d013      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eaa:	d819      	bhi.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb8:	d004      	beq.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006eba:	e011      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe fe16 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006ec0:	61f8      	str	r0, [r7, #28]
          break;
 8006ec2:	e010      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ec4:	f7fe fd7a 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006ec8:	61f8      	str	r0, [r7, #28]
          break;
 8006eca:	e00c      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ecc:	4b71      	ldr	r3, [pc, #452]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed8:	d104      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006eda:	4b6f      	ldr	r3, [pc, #444]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006edc:	61fb      	str	r3, [r7, #28]
          break;
 8006ede:	e001      	b.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006ee0:	bf00      	nop
 8006ee2:	e163      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ee4:	bf00      	nop
        break;
 8006ee6:	e161      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ee8:	4b6a      	ldr	r3, [pc, #424]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efa:	d013      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f02:	d819      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d004      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006f12:	e011      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fe fdea 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006f18:	61f8      	str	r0, [r7, #28]
          break;
 8006f1a:	e010      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f1c:	f7fe fd4e 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006f20:	61f8      	str	r0, [r7, #28]
          break;
 8006f22:	e00c      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f24:	4b5b      	ldr	r3, [pc, #364]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f30:	d104      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006f32:	4b59      	ldr	r3, [pc, #356]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f34:	61fb      	str	r3, [r7, #28]
          break;
 8006f36:	e001      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006f38:	bf00      	nop
 8006f3a:	e137      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f3c:	bf00      	nop
        break;
 8006f3e:	e135      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f40:	4b54      	ldr	r3, [pc, #336]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d011      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d818      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d004      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006f64:	e011      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fe fdc1 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006f6a:	61f8      	str	r0, [r7, #28]
          break;
 8006f6c:	e010      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f6e:	f7fe fd25 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8006f72:	61f8      	str	r0, [r7, #28]
          break;
 8006f74:	e00c      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f76:	4b47      	ldr	r3, [pc, #284]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f82:	d104      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006f84:	4b44      	ldr	r3, [pc, #272]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f86:	61fb      	str	r3, [r7, #28]
          break;
 8006f88:	e001      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006f8a:	bf00      	nop
 8006f8c:	e10e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f8e:	bf00      	nop
        break;
 8006f90:	e10c      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f92:	4b40      	ldr	r3, [pc, #256]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fa4:	d02c      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fac:	d833      	bhi.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fb4:	d01a      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fbc:	d82b      	bhi.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006fcc:	e023      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fce:	f7fe fd8d 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8006fd2:	61f8      	str	r0, [r7, #28]
          break;
 8006fd4:	e026      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d11a      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006fe4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fe8:	61fb      	str	r3, [r7, #28]
          break;
 8006fea:	e016      	b.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fec:	4b29      	ldr	r3, [pc, #164]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff8:	d111      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006ffa:	4b27      	ldr	r3, [pc, #156]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006ffc:	61fb      	str	r3, [r7, #28]
          break;
 8006ffe:	e00e      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007000:	4b24      	ldr	r3, [pc, #144]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b02      	cmp	r3, #2
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800700e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007012:	61fb      	str	r3, [r7, #28]
          break;
 8007014:	e005      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007016:	bf00      	nop
 8007018:	e0c8      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800701a:	bf00      	nop
 800701c:	e0c6      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800701e:	bf00      	nop
 8007020:	e0c4      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007022:	bf00      	nop
        break;
 8007024:	e0c2      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007038:	d030      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007040:	d837      	bhi.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007048:	d01a      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007050:	d82f      	bhi.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d004      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007060:	e027      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007062:	f7fe fd43 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8007066:	61f8      	str	r0, [r7, #28]
          break;
 8007068:	e02a      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800706c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b02      	cmp	r3, #2
 8007076:	d11e      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007078:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800707c:	61fb      	str	r3, [r7, #28]
          break;
 800707e:	e01a      	b.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708c:	d115      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800708e:	4b02      	ldr	r3, [pc, #8]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007090:	61fb      	str	r3, [r7, #28]
          break;
 8007092:	e012      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007094:	40021000 	.word	0x40021000
 8007098:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800709c:	4b46      	ldr	r3, [pc, #280]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d109      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80070aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ae:	61fb      	str	r3, [r7, #28]
          break;
 80070b0:	e005      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80070b2:	bf00      	nop
 80070b4:	e07a      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070b6:	bf00      	nop
 80070b8:	e078      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070ba:	bf00      	nop
 80070bc:	e076      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070be:	bf00      	nop
        break;
 80070c0:	e074      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80070c2:	4b3d      	ldr	r3, [pc, #244]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070d4:	d02c      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070dc:	d855      	bhi.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ea:	d004      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80070ec:	e04d      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fe fc65 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 80070f2:	61f8      	str	r0, [r7, #28]
          break;
 80070f4:	e04e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80070f6:	4b30      	ldr	r3, [pc, #192]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d145      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007102:	4b2d      	ldr	r3, [pc, #180]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800710e:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	e005      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800711a:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800711c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712c:	61fb      	str	r3, [r7, #28]
          break;
 800712e:	e02e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800713c:	d129      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800714a:	d122      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800714c:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	fb03 f202 	mul.w	r2, r3, r2
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	3301      	adds	r3, #1
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007172:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	0d5b      	lsrs	r3, r3, #21
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	3301      	adds	r3, #1
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	61fb      	str	r3, [r7, #28]
          break;
 8007188:	e003      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800718a:	bf00      	nop
 800718c:	e00e      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800718e:	bf00      	nop
 8007190:	e00c      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007192:	bf00      	nop
        break;
 8007194:	e00a      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007196:	bf00      	nop
 8007198:	e008      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800719a:	bf00      	nop
 800719c:	e006      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800719e:	bf00      	nop
 80071a0:	e004      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071aa:	bf00      	nop
    }
  }

  return(frequency);
 80071ac:	69fb      	ldr	r3, [r7, #28]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40021000 	.word	0x40021000
 80071bc:	08013958 	.word	0x08013958

080071c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071ce:	4b72      	ldr	r3, [pc, #456]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071da:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0203 	and.w	r2, r3, #3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d103      	bne.n	80071f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
       ||
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d142      	bne.n	8007278 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	73fb      	strb	r3, [r7, #15]
 80071f6:	e03f      	b.n	8007278 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d018      	beq.n	8007232 <RCCEx_PLLSAI1_Config+0x72>
 8007200:	2b03      	cmp	r3, #3
 8007202:	d825      	bhi.n	8007250 <RCCEx_PLLSAI1_Config+0x90>
 8007204:	2b01      	cmp	r3, #1
 8007206:	d002      	beq.n	800720e <RCCEx_PLLSAI1_Config+0x4e>
 8007208:	2b02      	cmp	r3, #2
 800720a:	d009      	beq.n	8007220 <RCCEx_PLLSAI1_Config+0x60>
 800720c:	e020      	b.n	8007250 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800720e:	4b62      	ldr	r3, [pc, #392]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11d      	bne.n	8007256 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800721e:	e01a      	b.n	8007256 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007220:	4b5d      	ldr	r3, [pc, #372]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	2b00      	cmp	r3, #0
 800722a:	d116      	bne.n	800725a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007230:	e013      	b.n	800725a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007232:	4b59      	ldr	r3, [pc, #356]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10f      	bne.n	800725e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800723e:	4b56      	ldr	r3, [pc, #344]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800724e:	e006      	b.n	800725e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	e004      	b.n	8007260 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007256:	bf00      	nop
 8007258:	e002      	b.n	8007260 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800725a:	bf00      	nop
 800725c:	e000      	b.n	8007260 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800725e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d108      	bne.n	8007278 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007266:	4b4c      	ldr	r3, [pc, #304]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f023 0203 	bic.w	r2, r3, #3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4949      	ldr	r1, [pc, #292]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007274:	4313      	orrs	r3, r2
 8007276:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f040 8086 	bne.w	800738c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007280:	4b45      	ldr	r3, [pc, #276]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a44      	ldr	r2, [pc, #272]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800728a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800728c:	f7fb fc2e 	bl	8002aec <HAL_GetTick>
 8007290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007292:	e009      	b.n	80072a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007294:	f7fb fc2a 	bl	8002aec <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d902      	bls.n	80072a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	73fb      	strb	r3, [r7, #15]
        break;
 80072a6:	e005      	b.n	80072b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80072a8:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1ef      	bne.n	8007294 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d168      	bne.n	800738c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072c0:	4b35      	ldr	r3, [pc, #212]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	4b35      	ldr	r3, [pc, #212]	; (800739c <RCCEx_PLLSAI1_Config+0x1dc>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6892      	ldr	r2, [r2, #8]
 80072cc:	0211      	lsls	r1, r2, #8
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	68d2      	ldr	r2, [r2, #12]
 80072d2:	06d2      	lsls	r2, r2, #27
 80072d4:	4311      	orrs	r1, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	3a01      	subs	r2, #1
 80072dc:	0112      	lsls	r2, r2, #4
 80072de:	430a      	orrs	r2, r1
 80072e0:	492d      	ldr	r1, [pc, #180]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]
 80072e6:	e02d      	b.n	8007344 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d115      	bne.n	800731a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ee:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6892      	ldr	r2, [r2, #8]
 80072fa:	0211      	lsls	r1, r2, #8
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6912      	ldr	r2, [r2, #16]
 8007300:	0852      	lsrs	r2, r2, #1
 8007302:	3a01      	subs	r2, #1
 8007304:	0552      	lsls	r2, r2, #21
 8007306:	4311      	orrs	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6852      	ldr	r2, [r2, #4]
 800730c:	3a01      	subs	r2, #1
 800730e:	0112      	lsls	r2, r2, #4
 8007310:	430a      	orrs	r2, r1
 8007312:	4921      	ldr	r1, [pc, #132]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007314:	4313      	orrs	r3, r2
 8007316:	610b      	str	r3, [r1, #16]
 8007318:	e014      	b.n	8007344 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800731a:	4b1f      	ldr	r3, [pc, #124]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007320:	4013      	ands	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6892      	ldr	r2, [r2, #8]
 8007326:	0211      	lsls	r1, r2, #8
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6952      	ldr	r2, [r2, #20]
 800732c:	0852      	lsrs	r2, r2, #1
 800732e:	3a01      	subs	r2, #1
 8007330:	0652      	lsls	r2, r2, #25
 8007332:	4311      	orrs	r1, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6852      	ldr	r2, [r2, #4]
 8007338:	3a01      	subs	r2, #1
 800733a:	0112      	lsls	r2, r2, #4
 800733c:	430a      	orrs	r2, r1
 800733e:	4916      	ldr	r1, [pc, #88]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007340:	4313      	orrs	r3, r2
 8007342:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007344:	4b14      	ldr	r3, [pc, #80]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a13      	ldr	r2, [pc, #76]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 800734a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800734e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007350:	f7fb fbcc 	bl	8002aec <HAL_GetTick>
 8007354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007356:	e009      	b.n	800736c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007358:	f7fb fbc8 	bl	8002aec <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d902      	bls.n	800736c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
          break;
 800736a:	e005      	b.n	8007378 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ef      	beq.n	8007358 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	4904      	ldr	r1, [pc, #16]	; (8007398 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007388:	4313      	orrs	r3, r2
 800738a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40021000 	.word	0x40021000
 800739c:	07ff800f 	.word	0x07ff800f
 80073a0:	ff9f800f 	.word	0xff9f800f
 80073a4:	f9ff800f 	.word	0xf9ff800f

080073a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073b6:	4b72      	ldr	r3, [pc, #456]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80073c2:	4b6f      	ldr	r3, [pc, #444]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0203 	and.w	r2, r3, #3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d103      	bne.n	80073da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
       ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d142      	bne.n	8007460 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	e03f      	b.n	8007460 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d018      	beq.n	800741a <RCCEx_PLLSAI2_Config+0x72>
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d825      	bhi.n	8007438 <RCCEx_PLLSAI2_Config+0x90>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d002      	beq.n	80073f6 <RCCEx_PLLSAI2_Config+0x4e>
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d009      	beq.n	8007408 <RCCEx_PLLSAI2_Config+0x60>
 80073f4:	e020      	b.n	8007438 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073f6:	4b62      	ldr	r3, [pc, #392]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d11d      	bne.n	800743e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007406:	e01a      	b.n	800743e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007408:	4b5d      	ldr	r3, [pc, #372]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007410:	2b00      	cmp	r3, #0
 8007412:	d116      	bne.n	8007442 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007418:	e013      	b.n	8007442 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800741a:	4b59      	ldr	r3, [pc, #356]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007426:	4b56      	ldr	r3, [pc, #344]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007436:	e006      	b.n	8007446 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e004      	b.n	8007448 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800743e:	bf00      	nop
 8007440:	e002      	b.n	8007448 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007446:	bf00      	nop
    }

    if(status == HAL_OK)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800744e:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f023 0203 	bic.w	r2, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4949      	ldr	r1, [pc, #292]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800745c:	4313      	orrs	r3, r2
 800745e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8086 	bne.w	8007574 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007468:	4b45      	ldr	r3, [pc, #276]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a44      	ldr	r2, [pc, #272]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800746e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007474:	f7fb fb3a 	bl	8002aec <HAL_GetTick>
 8007478:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800747a:	e009      	b.n	8007490 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800747c:	f7fb fb36 	bl	8002aec <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d902      	bls.n	8007490 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	73fb      	strb	r3, [r7, #15]
        break;
 800748e:	e005      	b.n	800749c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007490:	4b3b      	ldr	r3, [pc, #236]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ef      	bne.n	800747c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d168      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d113      	bne.n	80074d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <RCCEx_PLLSAI2_Config+0x1dc>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6892      	ldr	r2, [r2, #8]
 80074b4:	0211      	lsls	r1, r2, #8
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68d2      	ldr	r2, [r2, #12]
 80074ba:	06d2      	lsls	r2, r2, #27
 80074bc:	4311      	orrs	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6852      	ldr	r2, [r2, #4]
 80074c2:	3a01      	subs	r2, #1
 80074c4:	0112      	lsls	r2, r2, #4
 80074c6:	430a      	orrs	r2, r1
 80074c8:	492d      	ldr	r1, [pc, #180]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	614b      	str	r3, [r1, #20]
 80074ce:	e02d      	b.n	800752c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d115      	bne.n	8007502 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074d6:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074d8:	695a      	ldr	r2, [r3, #20]
 80074da:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <RCCEx_PLLSAI2_Config+0x1e0>)
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	0211      	lsls	r1, r2, #8
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6912      	ldr	r2, [r2, #16]
 80074e8:	0852      	lsrs	r2, r2, #1
 80074ea:	3a01      	subs	r2, #1
 80074ec:	0552      	lsls	r2, r2, #21
 80074ee:	4311      	orrs	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	430a      	orrs	r2, r1
 80074fa:	4921      	ldr	r1, [pc, #132]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	614b      	str	r3, [r1, #20]
 8007500:	e014      	b.n	800752c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007502:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007504:	695a      	ldr	r2, [r3, #20]
 8007506:	4b21      	ldr	r3, [pc, #132]	; (800758c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007508:	4013      	ands	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6892      	ldr	r2, [r2, #8]
 800750e:	0211      	lsls	r1, r2, #8
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6952      	ldr	r2, [r2, #20]
 8007514:	0852      	lsrs	r2, r2, #1
 8007516:	3a01      	subs	r2, #1
 8007518:	0652      	lsls	r2, r2, #25
 800751a:	4311      	orrs	r1, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6852      	ldr	r2, [r2, #4]
 8007520:	3a01      	subs	r2, #1
 8007522:	0112      	lsls	r2, r2, #4
 8007524:	430a      	orrs	r2, r1
 8007526:	4916      	ldr	r1, [pc, #88]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a13      	ldr	r2, [pc, #76]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fb fad8 	bl	8002aec <HAL_GetTick>
 800753c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800753e:	e009      	b.n	8007554 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007540:	f7fb fad4 	bl	8002aec <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d902      	bls.n	8007554 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
          break;
 8007552:	e005      	b.n	8007560 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	4904      	ldr	r1, [pc, #16]	; (8007580 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007570:	4313      	orrs	r3, r2
 8007572:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000
 8007584:	07ff800f 	.word	0x07ff800f
 8007588:	ff9f800f 	.word	0xff9f800f
 800758c:	f9ff800f 	.word	0xf9ff800f

08007590 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ac:	d10b      	bne.n	80075c6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80075ae:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80075b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b60      	cmp	r3, #96	; 0x60
 80075be:	d112      	bne.n	80075e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075c0:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	e00f      	b.n	80075e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075cc:	d10b      	bne.n	80075e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80075ce:	4b76      	ldr	r3, [pc, #472]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075d8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e0:	d101      	bne.n	80075e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80075e2:	4b72      	ldr	r3, [pc, #456]	; (80077ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075e4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 80d6 	bne.w	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d003      	beq.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fe:	d13b      	bne.n	8007678 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007600:	4b69      	ldr	r3, [pc, #420]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800760c:	f040 80c4 	bne.w	8007798 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007610:	4b65      	ldr	r3, [pc, #404]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80bd 	beq.w	8007798 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800761e:	4b62      	ldr	r3, [pc, #392]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	3301      	adds	r3, #1
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007632:	4b5d      	ldr	r3, [pc, #372]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800763e:	4b5a      	ldr	r3, [pc, #360]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	0edb      	lsrs	r3, r3, #27
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007650:	4b55      	ldr	r3, [pc, #340]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800765c:	2311      	movs	r3, #17
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e001      	b.n	8007666 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007662:	2307      	movs	r3, #7
 8007664:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fb03 f202 	mul.w	r2, r3, r2
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007676:	e08f      	b.n	8007798 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d13a      	bne.n	80076f4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800767e:	4b4a      	ldr	r3, [pc, #296]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768a:	f040 8086 	bne.w	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800768e:	4b46      	ldr	r3, [pc, #280]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d07f      	beq.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800769a:	4b43      	ldr	r3, [pc, #268]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	3301      	adds	r3, #1
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80076ae:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80076ba:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	0edb      	lsrs	r3, r3, #27
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80076cc:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80076d8:	2311      	movs	r3, #17
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e001      	b.n	80076e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80076de:	2307      	movs	r3, #7
 80076e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	fb03 f202 	mul.w	r2, r3, r2
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	e052      	b.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d003      	beq.n	8007702 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007700:	d109      	bne.n	8007716 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007702:	4b29      	ldr	r3, [pc, #164]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800770a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770e:	d144      	bne.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007710:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007712:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007714:	e041      	b.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b20      	cmp	r3, #32
 800771a:	d003      	beq.n	8007724 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d13a      	bne.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007724:	4b20      	ldr	r3, [pc, #128]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007730:	d133      	bne.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d02d      	beq.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800773e:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	091b      	lsrs	r3, r3, #4
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	3301      	adds	r3, #1
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	0edb      	lsrs	r3, r3, #27
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800777c:	2311      	movs	r3, #17
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e001      	b.n	8007786 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007782:	2307      	movs	r3, #7
 8007784:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	fb03 f202 	mul.w	r2, r3, r2
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	fbb2 f3f3 	udiv	r3, r2, r3
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	e000      	b.n	800779a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007798:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800779a:	69fb      	ldr	r3, [r7, #28]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3724      	adds	r7, #36	; 0x24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	40021000 	.word	0x40021000
 80077ac:	001fff68 	.word	0x001fff68
 80077b0:	00f42400 	.word	0x00f42400

080077b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e078      	b.n	80078b8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fa fe0f 	bl	80023fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2203      	movs	r2, #3
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f86a 	bl	80078c0 <HAL_SD_InitCard>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e060      	b.n	80078b8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80077f6:	f107 0308 	add.w	r3, r7, #8
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fdb5 	bl	800836c <HAL_SD_GetCardStatus>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e055      	b.n	80078b8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800780c:	7e3b      	ldrb	r3, [r7, #24]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007812:	7e7b      	ldrb	r3, [r7, #25]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10a      	bne.n	8007836 <HAL_SD_Init+0x82>
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <HAL_SD_Init+0x78>
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007832:	65da      	str	r2, [r3, #92]	; 0x5c
 8007834:	e00b      	b.n	800784e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d104      	bne.n	8007848 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007844:	65da      	str	r2, [r3, #92]	; 0x5c
 8007846:	e002      	b.n	800784e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fe6b 	bl	8008530 <HAL_SD_ConfigWideBusOperation>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e029      	b.n	80078b8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007864:	f7fb f942 	bl	8002aec <HAL_GetTick>
 8007868:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800786a:	e014      	b.n	8007896 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800786c:	f7fb f93e 	bl	8002aec <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787a:	d10c      	bne.n	8007896 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e010      	b.n	80078b8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 ff5e 	bl	8008758 <HAL_SD_GetCardState>
 800789c:	4603      	mov	r3, r0
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d1e4      	bne.n	800786c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3728      	adds	r7, #40	; 0x28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078c0:	b5b0      	push	{r4, r5, r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af04      	add	r7, sp, #16
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80078d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80078dc:	f7fe fd4e 	bl	800637c <HAL_RCCEx_GetPeriphCLKFreq>
 80078e0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e079      	b.n	80079f0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	4a3d      	ldr	r2, [pc, #244]	; (80079f8 <HAL_SD_InitCard+0x138>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d107      	bne.n	8007928 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0210 	orr.w	r2, r2, #16
 8007926:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681d      	ldr	r5, [r3, #0]
 800792c:	466c      	mov	r4, sp
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007940:	4628      	mov	r0, r5
 8007942:	f004 f819 	bl	800b978 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f004 f85c 	bl	800ba08 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800795c:	4a27      	ldr	r2, [pc, #156]	; (80079fc <HAL_SD_InitCard+0x13c>)
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	3301      	adds	r3, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb f8cc 	bl	8002b04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 ffd3 	bl	8008918 <SD_PowerON>
 8007972:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e02e      	b.n	80079f0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 ff00 	bl	8008798 <SD_InitCard>
 8007998:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e01b      	b.n	80079f0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079c0:	4618      	mov	r0, r3
 80079c2:	f004 f8b7 	bl	800bb34 <SDMMC_CmdBlockLength>
 80079c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a0b      	ldr	r2, [pc, #44]	; (8007a00 <HAL_SD_InitCard+0x140>)
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3728      	adds	r7, #40	; 0x28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bdb0      	pop	{r4, r5, r7, pc}
 80079f8:	014f8b59 	.word	0x014f8b59
 80079fc:	00012110 	.word	0x00012110
 8007a00:	1fe00fff 	.word	0x1fe00fff

08007a04 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08c      	sub	sp, #48	; 0x30
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d107      	bne.n	8007a2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e08d      	b.n	8007b48 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	f040 8086 	bne.w	8007b46 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	441a      	add	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d907      	bls.n	8007a5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e074      	b.n	8007b48 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2203      	movs	r2, #3
 8007a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	025a      	lsls	r2, r3, #9
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d002      	beq.n	8007a8a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	025b      	lsls	r3, r3, #9
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	025b      	lsls	r3, r3, #9
 8007a94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a96:	2390      	movs	r3, #144	; 0x90
 8007a98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f107 0210 	add.w	r2, r7, #16
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f004 f813 	bl	800badc <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ac4:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d90a      	bls.n	8007af2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2282      	movs	r2, #130	; 0x82
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f004 f869 	bl	800bbc0 <SDMMC_CmdReadMultiBlock>
 8007aee:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007af0:	e009      	b.n	8007b06 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2281      	movs	r2, #129	; 0x81
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afe:	4618      	mov	r0, r3
 8007b00:	f004 f83b 	bl	800bb7a <SDMMC_CmdReadSingleBlock>
 8007b04:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d012      	beq.n	8007b32 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e00a      	b.n	8007b48 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b40:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007b46:	2302      	movs	r3, #2
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3730      	adds	r7, #48	; 0x30
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	1fe00fff 	.word	0x1fe00fff

08007b54 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08c      	sub	sp, #48	; 0x30
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e08d      	b.n	8007c98 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	f040 8086 	bne.w	8007c96 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d907      	bls.n	8007bae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e074      	b.n	8007c98 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	025a      	lsls	r2, r3, #9
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d002      	beq.n	8007bda <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	025b      	lsls	r3, r3, #9
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bde:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	025b      	lsls	r3, r3, #9
 8007be4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be6:	2390      	movs	r3, #144	; 0x90
 8007be8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f107 0210 	add.w	r2, r7, #16
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f003 ff6b 	bl	800badc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c14:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d90a      	bls.n	8007c42 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	22a0      	movs	r2, #160	; 0xa0
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f004 f807 	bl	800bc4c <SDMMC_CmdWriteMultiBlock>
 8007c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c40:	e009      	b.n	8007c56 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2290      	movs	r2, #144	; 0x90
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f003 ffd9 	bl	800bc06 <SDMMC_CmdWriteSingleBlock>
 8007c54:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d012      	beq.n	8007c82 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e00a      	b.n	8007c98 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3730      	adds	r7, #48	; 0x30
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	1fe00fff 	.word	0x1fe00fff

08007ca4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_SD_IRQHandler+0x2e>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f98e 	bl	8008fec <SD_Read_IT>
 8007cd0:	e199      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 80ae 	beq.w	8007e3e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6812      	ldr	r2, [r2, #0]
 8007cf6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007cfa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007cfe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d038      	beq.n	8007d9c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <HAL_SD_IRQHandler+0x9a>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d011      	beq.n	8007d62 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f003 ffa6 	bl	800bc94 <SDMMC_CmdStopTransfer>
 8007d48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f957 	bl	8008010 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a90      	ldr	r2, [pc, #576]	; (8007fa8 <HAL_SD_IRQHandler+0x304>)
 8007d68:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <HAL_SD_IRQHandler+0xe8>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f005 fecf 	bl	800db30 <HAL_SD_RxCpltCallback>
 8007d92:	e138      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f005 fec1 	bl	800db1c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007d9a:	e134      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 812f 	beq.w	8008006 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2200      	movs	r2, #0
 8007dae:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2200      	movs	r2, #0
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <HAL_SD_IRQHandler+0x130>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d011      	beq.n	8007df8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f003 ff5b 	bl	800bc94 <SDMMC_CmdStopTransfer>
 8007dde:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f90c 	bl	8008010 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <HAL_SD_IRQHandler+0x176>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f005 fe7e 	bl	800db1c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <HAL_SD_IRQHandler+0x192>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80e8 	beq.w	8008006 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f005 fe7a 	bl	800db30 <HAL_SD_RxCpltCallback>
}
 8007e3c:	e0e3      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <HAL_SD_IRQHandler+0x1ba>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 f919 	bl	800908e <SD_Write_IT>
 8007e5c:	e0d3      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 809f 	beq.w	8007fac <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	f043 0202 	orr.w	r2, r3, #2
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f043 0208 	orr.w	r2, r3, #8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	f043 0220 	orr.w	r2, r3, #32
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	f043 0210 	orr.w	r2, r3, #16
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a33      	ldr	r2, [pc, #204]	; (8007fa8 <HAL_SD_IRQHandler+0x304>)
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007eec:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f1c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f003 feb6 	bl	800bc94 <SDMMC_CmdStopTransfer>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f42:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f852 	bl	8008010 <HAL_SD_ErrorCallback>
}
 8007f6c:	e04b      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d046      	beq.n	8008006 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d042      	beq.n	8008006 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007f8e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2200      	movs	r2, #0
 8007f96:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f835 	bl	8008010 <HAL_SD_ErrorCallback>
}
 8007fa6:	e02e      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
 8007fa8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d025      	beq.n	8008006 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10c      	bne.n	8007fec <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f8d4 	bl	800918a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007fe2:	e010      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f8bc 	bl	8009162 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007fea:	e00c      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f8bd 	bl	8009176 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007ffc:	e003      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f8a5 	bl	800914e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8008004:	e7ff      	b.n	8008006 <HAL_SD_IRQHandler+0x362>
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop

08008010 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008032:	0f9b      	lsrs	r3, r3, #30
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803e:	0e9b      	lsrs	r3, r3, #26
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008050:	0e1b      	lsrs	r3, r3, #24
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	b2da      	uxtb	r2, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	b2da      	uxtb	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008084:	0d1b      	lsrs	r3, r3, #20
 8008086:	b29a      	uxth	r2, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a2:	0bdb      	lsrs	r3, r3, #15
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b4:	0b9b      	lsrs	r3, r3, #14
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c6:	0b5b      	lsrs	r3, r3, #13
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d8:	0b1b      	lsrs	r3, r3, #12
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2200      	movs	r2, #0
 80080ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d163      	bne.n	80081bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f8:	009a      	lsls	r2, r3, #2
 80080fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080fe:	4013      	ands	r3, r2
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008104:	0f92      	lsrs	r2, r2, #30
 8008106:	431a      	orrs	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008110:	0edb      	lsrs	r3, r3, #27
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	b2da      	uxtb	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008122:	0e1b      	lsrs	r3, r3, #24
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008134:	0d5b      	lsrs	r3, r3, #21
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008146:	0c9b      	lsrs	r3, r3, #18
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	b2da      	uxtb	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008158:	0bdb      	lsrs	r3, r3, #15
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	b2da      	uxtb	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	7e1b      	ldrb	r3, [r3, #24]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	3302      	adds	r3, #2
 800817c:	2201      	movs	r2, #1
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008186:	fb03 f202 	mul.w	r2, r3, r2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	7a1b      	ldrb	r3, [r3, #8]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80081a8:	0a52      	lsrs	r2, r2, #9
 80081aa:	fb03 f202 	mul.w	r2, r3, r2
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b8:	659a      	str	r2, [r3, #88]	; 0x58
 80081ba:	e031      	b.n	8008220 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d11d      	bne.n	8008200 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c8:	041b      	lsls	r3, r3, #16
 80081ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d2:	0c1b      	lsrs	r3, r3, #16
 80081d4:	431a      	orrs	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	3301      	adds	r3, #1
 80081e0:	029a      	lsls	r2, r3, #10
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	659a      	str	r2, [r3, #88]	; 0x58
 80081fe:	e00f      	b.n	8008220 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a58      	ldr	r2, [pc, #352]	; (8008368 <HAL_SD_GetCardCSD+0x344>)
 8008206:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e09d      	b.n	800835c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008224:	0b9b      	lsrs	r3, r3, #14
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	b2da      	uxtb	r2, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008236:	09db      	lsrs	r3, r3, #7
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008258:	0fdb      	lsrs	r3, r3, #31
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	0f5b      	lsrs	r3, r3, #29
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008276:	0e9b      	lsrs	r3, r3, #26
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	b2da      	uxtb	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008288:	0d9b      	lsrs	r3, r3, #22
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	b2da      	uxtb	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829a:	0d5b      	lsrs	r3, r3, #21
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b6:	0c1b      	lsrs	r3, r3, #16
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ca:	0bdb      	lsrs	r3, r3, #15
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082de:	0b9b      	lsrs	r3, r3, #14
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f2:	0b5b      	lsrs	r3, r3, #13
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008306:	0b1b      	lsrs	r3, r3, #12
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	b2da      	uxtb	r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831a:	0a9b      	lsrs	r3, r3, #10
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832e:	0a1b      	lsrs	r3, r3, #8
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	b2da      	uxtb	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834a:	b2da      	uxtb	r2, r3
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	1fe00fff 	.word	0x1fe00fff

0800836c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b094      	sub	sp, #80	; 0x50
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800837c:	f107 0308 	add.w	r3, r7, #8
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbd4 	bl	8008b30 <SD_SendSDStatus>
 8008388:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800838a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838c:	2b00      	cmp	r3, #0
 800838e:	d011      	beq.n	80083b4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a4f      	ldr	r2, [pc, #316]	; (80084d4 <HAL_SD_GetCardStatus+0x168>)
 8008396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800839c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80083b2:	e070      	b.n	8008496 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	095b      	lsrs	r3, r3, #5
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	0e1b      	lsrs	r3, r3, #24
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	4313      	orrs	r3, r2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	061a      	lsls	r2, r3, #24
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008404:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b2da      	uxtb	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	0d1b      	lsrs	r3, r3, #20
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	b29b      	uxth	r3, r3
 8008438:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800843c:	b29a      	uxth	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	b29b      	uxth	r3, r3
 8008442:	b2db      	uxtb	r3, r3
 8008444:	b29b      	uxth	r3, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	b29a      	uxth	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	0a9b      	lsrs	r3, r3, #10
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	b2da      	uxtb	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	0e1b      	lsrs	r3, r3, #24
 8008490:	b2da      	uxtb	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800849e:	4618      	mov	r0, r3
 80084a0:	f003 fb48 	bl	800bb34 <SDMMC_CmdBlockLength>
 80084a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <HAL_SD_GetCardStatus+0x168>)
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80084c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3750      	adds	r7, #80	; 0x50
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	1fe00fff 	.word	0x1fe00fff

080084d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008530:	b5b0      	push	{r4, r5, r7, lr}
 8008532:	b090      	sub	sp, #64	; 0x40
 8008534:	af04      	add	r7, sp, #16
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2203      	movs	r2, #3
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854c:	2b03      	cmp	r3, #3
 800854e:	d02e      	beq.n	80085ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d106      	bne.n	8008566 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	639a      	str	r2, [r3, #56]	; 0x38
 8008564:	e029      	b.n	80085ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856c:	d10a      	bne.n	8008584 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fbd6 	bl	8008d20 <SD_WideBus_Enable>
 8008574:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
 8008582:	e01a      	b.n	80085ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fc13 	bl	8008db6 <SD_WideBus_Disable>
 8008590:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
 800859e:	e00c      	b.n	80085ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
 80085ac:	e005      	b.n	80085ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a60      	ldr	r2, [pc, #384]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x218>)
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085d0:	e097      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80085d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80085d6:	f7fd fed1 	bl	800637c <HAL_RCCEx_GetPeriphCLKFreq>
 80085da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8086 	beq.w	80086f0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	4952      	ldr	r1, [pc, #328]	; (800874c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008602:	fba1 1303 	umull	r1, r3, r1, r3
 8008606:	0e1b      	lsrs	r3, r3, #24
 8008608:	429a      	cmp	r2, r3
 800860a:	d303      	bcc.n	8008614 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e05a      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861c:	d103      	bne.n	8008626 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e051      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862e:	d126      	bne.n	800867e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10e      	bne.n	8008656 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	4a45      	ldr	r2, [pc, #276]	; (8008750 <HAL_SD_ConfigWideBusOperation+0x220>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d906      	bls.n	800864e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	4a42      	ldr	r2, [pc, #264]	; (800874c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008644:	fba2 2303 	umull	r2, r3, r2, r3
 8008648:	0e5b      	lsrs	r3, r3, #25
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	e03d      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e039      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	4a3b      	ldr	r2, [pc, #236]	; (8008750 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d906      	bls.n	8008676 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	4a38      	ldr	r2, [pc, #224]	; (800874c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800866c:	fba2 2303 	umull	r2, r3, r2, r3
 8008670:	0e5b      	lsrs	r3, r3, #25
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e029      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	e025      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10e      	bne.n	80086a4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	4a32      	ldr	r2, [pc, #200]	; (8008754 <HAL_SD_ConfigWideBusOperation+0x224>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d906      	bls.n	800869c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	4a2e      	ldr	r2, [pc, #184]	; (800874c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	0e1b      	lsrs	r3, r3, #24
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e016      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	e012      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b0:	4a28      	ldr	r2, [pc, #160]	; (8008754 <HAL_SD_ConfigWideBusOperation+0x224>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d906      	bls.n	80086c4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	4a24      	ldr	r2, [pc, #144]	; (800874c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	0e1b      	lsrs	r3, r3, #24
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	e002      	b.n	80086ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681d      	ldr	r5, [r3, #0]
 80086d4:	466c      	mov	r4, sp
 80086d6:	f107 0318 	add.w	r3, r7, #24
 80086da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086e2:	f107 030c 	add.w	r3, r7, #12
 80086e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e8:	4628      	mov	r0, r5
 80086ea:	f003 f945 	bl	800b978 <SDMMC_Init>
 80086ee:	e008      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800870a:	4618      	mov	r0, r3
 800870c:	f003 fa12 	bl	800bb34 <SDMMC_CmdBlockLength>
 8008710:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x218>)
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800873a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800873e:	4618      	mov	r0, r3
 8008740:	3730      	adds	r7, #48	; 0x30
 8008742:	46bd      	mov	sp, r7
 8008744:	bdb0      	pop	{r4, r5, r7, pc}
 8008746:	bf00      	nop
 8008748:	1fe00fff 	.word	0x1fe00fff
 800874c:	55e63b89 	.word	0x55e63b89
 8008750:	02faf080 	.word	0x02faf080
 8008754:	017d7840 	.word	0x017d7840

08008758 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fab0 	bl	8008cd0 <SD_SendStatus>
 8008770:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	0a5b      	lsrs	r3, r3, #9
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800878e:	693b      	ldr	r3, [r7, #16]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008798:	b5b0      	push	{r4, r5, r7, lr}
 800879a:	b090      	sub	sp, #64	; 0x40
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087a0:	2301      	movs	r3, #1
 80087a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f003 f93f 	bl	800ba2c <SDMMC_GetPowerState>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087b8:	e0a9      	b.n	800890e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d02e      	beq.n	8008820 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 fb84 	bl	800bed4 <SDMMC_CmdSendCID>
 80087cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	e09a      	b.n	800890e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f003 f969 	bl	800bab6 <SDMMC_GetResponse>
 80087e4:	4602      	mov	r2, r0
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2104      	movs	r1, #4
 80087f0:	4618      	mov	r0, r3
 80087f2:	f003 f960 	bl	800bab6 <SDMMC_GetResponse>
 80087f6:	4602      	mov	r2, r0
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2108      	movs	r1, #8
 8008802:	4618      	mov	r0, r3
 8008804:	f003 f957 	bl	800bab6 <SDMMC_GetResponse>
 8008808:	4602      	mov	r2, r0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	210c      	movs	r1, #12
 8008814:	4618      	mov	r0, r3
 8008816:	f003 f94e 	bl	800bab6 <SDMMC_GetResponse>
 800881a:	4602      	mov	r2, r0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008824:	2b03      	cmp	r3, #3
 8008826:	d00d      	beq.n	8008844 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f107 020e 	add.w	r2, r7, #14
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f003 fb8d 	bl	800bf52 <SDMMC_CmdSetRelAdd>
 8008838:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800883a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <SD_InitCard+0xac>
    {
      return errorstate;
 8008840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008842:	e064      	b.n	800890e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008848:	2b03      	cmp	r3, #3
 800884a:	d036      	beq.n	80088ba <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800884c:	89fb      	ldrh	r3, [r7, #14]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885c:	041b      	lsls	r3, r3, #16
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f003 fb56 	bl	800bf12 <SDMMC_CmdSendCSD>
 8008866:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <SD_InitCard+0xda>
    {
      return errorstate;
 800886e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008870:	e04d      	b.n	800890e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f003 f91c 	bl	800bab6 <SDMMC_GetResponse>
 800887e:	4602      	mov	r2, r0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2104      	movs	r1, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f003 f913 	bl	800bab6 <SDMMC_GetResponse>
 8008890:	4602      	mov	r2, r0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2108      	movs	r1, #8
 800889c:	4618      	mov	r0, r3
 800889e:	f003 f90a 	bl	800bab6 <SDMMC_GetResponse>
 80088a2:	4602      	mov	r2, r0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	210c      	movs	r1, #12
 80088ae:	4618      	mov	r0, r3
 80088b0:	f003 f901 	bl	800bab6 <SDMMC_GetResponse>
 80088b4:	4602      	mov	r2, r0
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2104      	movs	r1, #4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f003 f8f8 	bl	800bab6 <SDMMC_GetResponse>
 80088c6:	4603      	mov	r3, r0
 80088c8:	0d1a      	lsrs	r2, r3, #20
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fba5 	bl	8008024 <HAL_SD_GetCardCSD>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088e4:	e013      	b.n	800890e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6819      	ldr	r1, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ee:	041b      	lsls	r3, r3, #16
 80088f0:	2200      	movs	r2, #0
 80088f2:	461c      	mov	r4, r3
 80088f4:	4615      	mov	r5, r2
 80088f6:	4622      	mov	r2, r4
 80088f8:	462b      	mov	r3, r5
 80088fa:	4608      	mov	r0, r1
 80088fc:	f003 fa00 	bl	800bd00 <SDMMC_CmdSelDesel>
 8008900:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <SD_InitCard+0x174>
  {
    return errorstate;
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	e000      	b.n	800890e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3740      	adds	r7, #64	; 0x40
 8008912:	46bd      	mov	sp, r7
 8008914:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008918 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800892c:	f7fa f8de 	bl	8002aec <HAL_GetTick>
 8008930:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f003 fa06 	bl	800bd48 <SDMMC_CmdGoIdleState>
 800893c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <SD_PowerON+0x30>
  {
    return errorstate;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	e0ed      	b.n	8008b24 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4618      	mov	r0, r3
 800894e:	f003 fa19 	bl	800bd84 <SDMMC_CmdOperCond>
 8008952:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f003 f9ef 	bl	800bd48 <SDMMC_CmdGoIdleState>
 800896a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <SD_PowerON+0x64>
    {
      return errorstate;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	e0d6      	b.n	8008b24 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	2b01      	cmp	r3, #1
 8008982:	d137      	bne.n	80089f4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2100      	movs	r1, #0
 800898a:	4618      	mov	r0, r3
 800898c:	f003 fa1a 	bl	800bdc4 <SDMMC_CmdAppCommand>
 8008990:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d02d      	beq.n	80089f4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800899c:	e0c2      	b.n	8008b24 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f003 fa0d 	bl	800bdc4 <SDMMC_CmdAppCommand>
 80089aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	e0b6      	b.n	8008b24 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	495c      	ldr	r1, [pc, #368]	; (8008b2c <SD_PowerON+0x214>)
 80089bc:	4618      	mov	r0, r3
 80089be:	f003 fa24 	bl	800be0a <SDMMC_CmdAppOperCommand>
 80089c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089ce:	e0a9      	b.n	8008b24 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f003 f86d 	bl	800bab6 <SDMMC_GetResponse>
 80089dc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	0fdb      	lsrs	r3, r3, #31
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <SD_PowerON+0xd2>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <SD_PowerON+0xd4>
 80089ea:	2300      	movs	r3, #0
 80089ec:	61bb      	str	r3, [r7, #24]

    count++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d802      	bhi.n	8008a04 <SD_PowerON+0xec>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0cc      	beq.n	800899e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d902      	bls.n	8008a14 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a12:	e087      	b.n	8008b24 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d07e      	beq.n	8008b1c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d17a      	bne.n	8008b22 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d075      	beq.n	8008b22 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a3c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f042 0208 	orr.w	r2, r2, #8
 8008a4c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f003 fae4 	bl	800c020 <SDMMC_CmdVoltageSwitch>
 8008a58:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <SD_PowerON+0x162>
        {
          return errorstate;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	e05f      	b.n	8008b24 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a64:	f7fa f842 	bl	8002aec <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a72:	d102      	bne.n	8008a7a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a78:	e054      	b.n	8008b24 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a88:	d1ec      	bne.n	8008a64 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aa2:	d002      	beq.n	8008aaa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008aa8:	e03c      	b.n	8008b24 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008aaa:	2001      	movs	r0, #1
 8008aac:	f000 fb44 	bl	8009138 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0204 	orr.w	r2, r2, #4
 8008abe:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008ac0:	e00a      	b.n	8008ad8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ac2:	f7fa f813 	bl	8002aec <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad0:	d102      	bne.n	8008ad8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ad6:	e025      	b.n	8008b24 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ae6:	d1ec      	bne.n	8008ac2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b00:	d102      	bne.n	8008b08 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b06:	e00d      	b.n	8008b24 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2213      	movs	r2, #19
 8008b0e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
 8008b1a:	e002      	b.n	8008b22 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	c1100000 	.word	0xc1100000

08008b30 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08c      	sub	sp, #48	; 0x30
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b3a:	f7f9 ffd7 	bl	8002aec <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 ffb3 	bl	800bab6 <SDMMC_GetResponse>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b5a:	d102      	bne.n	8008b62 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b60:	e0b0      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2140      	movs	r1, #64	; 0x40
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f002 ffe3 	bl	800bb34 <SDMMC_CmdBlockLength>
 8008b6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	e0a0      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f003 f918 	bl	800bdc4 <SDMMC_CmdAppCommand>
 8008b94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d005      	beq.n	8008ba8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	e08d      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008bb2:	2360      	movs	r3, #96	; 0x60
 8008bb4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f107 0208 	add.w	r2, r7, #8
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 ff85 	bl	800badc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f003 fa00 	bl	800bfdc <SDMMC_CmdStatusRegister>
 8008bdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d02b      	beq.n	8008c3c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	e069      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d013      	beq.n	8008c26 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c02:	e00d      	b.n	8008c20 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f002 fedf 	bl	800b9cc <SDMMC_ReadFIFO>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	601a      	str	r2, [r3, #0]
        pData++;
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	3304      	adds	r3, #4
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	2b07      	cmp	r3, #7
 8008c24:	d9ee      	bls.n	8008c04 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c26:	f7f9 ff61 	bl	8002aec <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c34:	d102      	bne.n	8008c3c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c3a:	e043      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0d2      	beq.n	8008bf0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c58:	2308      	movs	r3, #8
 8008c5a:	e033      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	e02a      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d017      	beq.n	8008cac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	e021      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fea1 	bl	800b9cc <SDMMC_ReadFIFO>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	601a      	str	r2, [r3, #0]
    pData++;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	3304      	adds	r3, #4
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c96:	f7f9 ff29 	bl	8002aec <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca4:	d102      	bne.n	8008cac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ca6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008caa:	e00b      	b.n	8008cc4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e2      	bne.n	8008c80 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a03      	ldr	r2, [pc, #12]	; (8008ccc <SD_SendSDStatus+0x19c>)
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3730      	adds	r7, #48	; 0x30
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	18000f3a 	.word	0x18000f3a

08008cd0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ce4:	e018      	b.n	8008d18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cee:	041b      	lsls	r3, r3, #16
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f003 f94f 	bl	800bf96 <SDMMC_CmdSendStatus>
 8008cf8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	e009      	b.n	8008d18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 fed3 	bl	800bab6 <SDMMC_GetResponse>
 8008d10:	4602      	mov	r2, r0
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 febd 	bl	800bab6 <SDMMC_GetResponse>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d46:	d102      	bne.n	8008d4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d4c:	e02f      	b.n	8008dae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f879 	bl	8008e4c <SD_FindSCR>
 8008d5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	e023      	b.n	8008dae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01c      	beq.n	8008daa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d78:	041b      	lsls	r3, r3, #16
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f003 f821 	bl	800bdc4 <SDMMC_CmdAppCommand>
 8008d82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	e00f      	b.n	8008dae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2102      	movs	r1, #2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f003 f858 	bl	800be4a <SDMMC_CmdBusWidth>
 8008d9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	e003      	b.n	8008dae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e001      	b.n	8008dae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008daa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 fe72 	bl	800bab6 <SDMMC_GetResponse>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ddc:	d102      	bne.n	8008de4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008de2:	e02f      	b.n	8008e44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008de4:	f107 030c 	add.w	r3, r7, #12
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f82e 	bl	8008e4c <SD_FindSCR>
 8008df0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	e023      	b.n	8008e44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01c      	beq.n	8008e40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f002 ffd6 	bl	800bdc4 <SDMMC_CmdAppCommand>
 8008e18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e00f      	b.n	8008e44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f003 f80d 	bl	800be4a <SDMMC_CmdBusWidth>
 8008e30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	e003      	b.n	8008e44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e001      	b.n	8008e44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	; 0x38
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e56:	f7f9 fe49 	bl	8002aec <HAL_GetTick>
 8008e5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008e60:	2300      	movs	r3, #0
 8008e62:	60bb      	str	r3, [r7, #8]
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2108      	movs	r1, #8
 8008e72:	4618      	mov	r0, r3
 8008e74:	f002 fe5e 	bl	800bb34 <SDMMC_CmdBlockLength>
 8008e78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	e0ad      	b.n	8008fe0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	041b      	lsls	r3, r3, #16
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f002 ff97 	bl	800bdc4 <SDMMC_CmdAppCommand>
 8008e96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	e09e      	b.n	8008fe0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ea6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008eac:	2330      	movs	r3, #48	; 0x30
 8008eae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f107 0210 	add.w	r2, r7, #16
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 fe08 	bl	800badc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 ffdd 	bl	800be90 <SDMMC_CmdSendSCR>
 8008ed6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d027      	beq.n	8008f2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	e07e      	b.n	8008fe0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d113      	bne.n	8008f18 <SD_FindSCR+0xcc>
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d110      	bne.n	8008f18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 fd66 	bl	800b9cc <SDMMC_ReadFIFO>
 8008f00:	4603      	mov	r3, r0
 8008f02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f002 fd5f 	bl	800b9cc <SDMMC_ReadFIFO>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	60fb      	str	r3, [r7, #12]
      index++;
 8008f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f14:	3301      	adds	r3, #1
 8008f16:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f18:	f7f9 fde8 	bl	8002aec <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f26:	d102      	bne.n	8008f2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f2c:	e058      	b.n	8008fe0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f34:	f240 532a 	movw	r3, #1322	; 0x52a
 8008f38:	4013      	ands	r3, r2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0d1      	beq.n	8008ee2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2208      	movs	r2, #8
 8008f52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f54:	2308      	movs	r3, #8
 8008f56:	e043      	b.n	8008fe0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d005      	beq.n	8008f72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e036      	b.n	8008fe0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2220      	movs	r2, #32
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008f88:	2320      	movs	r3, #32
 8008f8a:	e029      	b.n	8008fe0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <SD_FindSCR+0x19c>)
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	061a      	lsls	r2, r3, #24
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fa0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008faa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	0e1b      	lsrs	r3, r3, #24
 8008fb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	601a      	str	r2, [r3, #0]
    scr++;
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	3304      	adds	r3, #4
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	061a      	lsls	r2, r3, #24
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	0a1b      	lsrs	r3, r3, #8
 8008fce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fd2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	0e1b      	lsrs	r3, r3, #24
 8008fd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3738      	adds	r7, #56	; 0x38
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	18000f3a 	.word	0x18000f3a

08008fec <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d03f      	beq.n	8009086 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e033      	b.n	8009074 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fcdb 	bl	800b9cc <SDMMC_ReadFIFO>
 8009016:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3b01      	subs	r3, #1
 800902a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	b2da      	uxtb	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	3b01      	subs	r3, #1
 8009040:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	0c1b      	lsrs	r3, r3, #16
 8009046:	b2da      	uxtb	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3b01      	subs	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	0e1b      	lsrs	r3, r3, #24
 800905c:	b2da      	uxtb	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3301      	adds	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3b01      	subs	r3, #1
 800906c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	3301      	adds	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b07      	cmp	r3, #7
 8009078:	d9c8      	bls.n	800900c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d043      	beq.n	8009130 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e037      	b.n	800911e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3b01      	subs	r3, #1
 80090be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	021a      	lsls	r2, r3, #8
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	041a      	lsls	r2, r3, #16
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	061a      	lsls	r2, r3, #24
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	3b01      	subs	r3, #1
 8009106:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f107 0208 	add.w	r2, r7, #8
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f002 fc67 	bl	800b9e6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	3301      	adds	r3, #1
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b07      	cmp	r3, #7
 8009122:	d9c4      	bls.n	80090ae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009130:	bf00      	nop
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e095      	b.n	80092dc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d108      	bne.n	80091ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c0:	d009      	beq.n	80091d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	61da      	str	r2, [r3, #28]
 80091c8:	e005      	b.n	80091d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f9 f98f 	bl	8002514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009216:	d902      	bls.n	800921e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e002      	b.n	8009224 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800921e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009222:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800922c:	d007      	beq.n	800923e <HAL_SPI_Init+0xa0>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009236:	d002      	beq.n	800923e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	ea42 0103 	orr.w	r1, r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	f003 0204 	and.w	r2, r3, #4
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80092ba:	ea42 0103 	orr.w	r1, r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e049      	b.n	800938a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7f9 f944 	bl	8002598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f000 fa44 	bl	80097b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e049      	b.n	8009438 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f841 	bl	8009440 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2202      	movs	r2, #2
 80093c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f000 f9ed 	bl	80097b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d020      	beq.n	80094b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01b      	beq.n	80094b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0202 	mvn.w	r2, #2
 8009488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f968 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 80094a4:	e005      	b.n	80094b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f95a 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f96b 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d020      	beq.n	8009504 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01b      	beq.n	8009504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0204 	mvn.w	r2, #4
 80094d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f942 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 80094f0:	e005      	b.n	80094fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f934 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f945 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d020      	beq.n	8009550 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01b      	beq.n	8009550 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f06f 0208 	mvn.w	r2, #8
 8009520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2204      	movs	r2, #4
 8009526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f91c 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 800953c:	e005      	b.n	800954a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f90e 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f91f 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f003 0310 	and.w	r3, r3, #16
 8009556:	2b00      	cmp	r3, #0
 8009558:	d020      	beq.n	800959c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01b      	beq.n	800959c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0210 	mvn.w	r2, #16
 800956c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2208      	movs	r2, #8
 8009572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f8f6 	bl	8009774 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f8e8 	bl	8009760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8f9 	bl	8009788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00c      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f06f 0201 	mvn.w	r2, #1
 80095b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f8c6 	bl	800974c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d007      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fcde 	bl	8009fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00c      	beq.n	8009608 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fcd6 	bl	8009fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00c      	beq.n	800962c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f8b8 	bl	800979c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00c      	beq.n	8009650 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d007      	beq.n	8009650 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0220 	mvn.w	r2, #32
 8009648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fc9e 	bl	8009f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009672:	2302      	movs	r3, #2
 8009674:	e066      	b.n	8009744 <HAL_TIM_OC_ConfigChannel+0xec>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b14      	cmp	r3, #20
 8009682:	d857      	bhi.n	8009734 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009684:	a201      	add	r2, pc, #4	; (adr r2, 800968c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	080096e1 	.word	0x080096e1
 8009690:	08009735 	.word	0x08009735
 8009694:	08009735 	.word	0x08009735
 8009698:	08009735 	.word	0x08009735
 800969c:	080096ef 	.word	0x080096ef
 80096a0:	08009735 	.word	0x08009735
 80096a4:	08009735 	.word	0x08009735
 80096a8:	08009735 	.word	0x08009735
 80096ac:	080096fd 	.word	0x080096fd
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009735 	.word	0x08009735
 80096b8:	08009735 	.word	0x08009735
 80096bc:	0800970b 	.word	0x0800970b
 80096c0:	08009735 	.word	0x08009735
 80096c4:	08009735 	.word	0x08009735
 80096c8:	08009735 	.word	0x08009735
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009735 	.word	0x08009735
 80096d8:	08009735 	.word	0x08009735
 80096dc:	08009727 	.word	0x08009727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f8fc 	bl	80098e4 <TIM_OC1_SetConfig>
      break;
 80096ec:	e025      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f985 	bl	8009a04 <TIM_OC2_SetConfig>
      break;
 80096fa:	e01e      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fa08 	bl	8009b18 <TIM_OC3_SetConfig>
      break;
 8009708:	e017      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fa89 	bl	8009c28 <TIM_OC4_SetConfig>
      break;
 8009716:	e010      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 faec 	bl	8009cfc <TIM_OC5_SetConfig>
      break;
 8009724:	e009      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fb49 	bl	8009dc4 <TIM_OC6_SetConfig>
      break;
 8009732:	e002      	b.n	800973a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
      break;
 8009738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009742:	7dfb      	ldrb	r3, [r7, #23]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a40      	ldr	r2, [pc, #256]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d013      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ce:	d00f      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a3d      	ldr	r2, [pc, #244]	; (80098c8 <TIM_Base_SetConfig+0x118>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00b      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a3c      	ldr	r2, [pc, #240]	; (80098cc <TIM_Base_SetConfig+0x11c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d007      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3b      	ldr	r2, [pc, #236]	; (80098d0 <TIM_Base_SetConfig+0x120>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_Base_SetConfig+0x40>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a3a      	ldr	r2, [pc, #232]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d108      	bne.n	8009802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2f      	ldr	r2, [pc, #188]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d01f      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009810:	d01b      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2c      	ldr	r2, [pc, #176]	; (80098c8 <TIM_Base_SetConfig+0x118>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d017      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a2b      	ldr	r2, [pc, #172]	; (80098cc <TIM_Base_SetConfig+0x11c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <TIM_Base_SetConfig+0x120>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00f      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a29      	ldr	r2, [pc, #164]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00b      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a28      	ldr	r2, [pc, #160]	; (80098d8 <TIM_Base_SetConfig+0x128>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d007      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a27      	ldr	r2, [pc, #156]	; (80098dc <TIM_Base_SetConfig+0x12c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_Base_SetConfig+0x9a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a26      	ldr	r2, [pc, #152]	; (80098e0 <TIM_Base_SetConfig+0x130>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d108      	bne.n	800985c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <TIM_Base_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00f      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <TIM_Base_SetConfig+0x124>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00b      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a11      	ldr	r2, [pc, #68]	; (80098d8 <TIM_Base_SetConfig+0x128>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d007      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a10      	ldr	r2, [pc, #64]	; (80098dc <TIM_Base_SetConfig+0x12c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d003      	beq.n	80098a8 <TIM_Base_SetConfig+0xf8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a0f      	ldr	r2, [pc, #60]	; (80098e0 <TIM_Base_SetConfig+0x130>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d103      	bne.n	80098b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	615a      	str	r2, [r3, #20]
}
 80098b6:	bf00      	nop
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40012c00 	.word	0x40012c00
 80098c8:	40000400 	.word	0x40000400
 80098cc:	40000800 	.word	0x40000800
 80098d0:	40000c00 	.word	0x40000c00
 80098d4:	40013400 	.word	0x40013400
 80098d8:	40014000 	.word	0x40014000
 80098dc:	40014400 	.word	0x40014400
 80098e0:	40014800 	.word	0x40014800

080098e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	f023 0201 	bic.w	r2, r3, #1
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f023 0302 	bic.w	r3, r3, #2
 8009930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a2c      	ldr	r2, [pc, #176]	; (80099f0 <TIM_OC1_SetConfig+0x10c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00f      	beq.n	8009964 <TIM_OC1_SetConfig+0x80>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a2b      	ldr	r2, [pc, #172]	; (80099f4 <TIM_OC1_SetConfig+0x110>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00b      	beq.n	8009964 <TIM_OC1_SetConfig+0x80>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a2a      	ldr	r2, [pc, #168]	; (80099f8 <TIM_OC1_SetConfig+0x114>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d007      	beq.n	8009964 <TIM_OC1_SetConfig+0x80>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a29      	ldr	r2, [pc, #164]	; (80099fc <TIM_OC1_SetConfig+0x118>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_OC1_SetConfig+0x80>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a28      	ldr	r2, [pc, #160]	; (8009a00 <TIM_OC1_SetConfig+0x11c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d10c      	bne.n	800997e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f023 0308 	bic.w	r3, r3, #8
 800996a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 0304 	bic.w	r3, r3, #4
 800997c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a1b      	ldr	r2, [pc, #108]	; (80099f0 <TIM_OC1_SetConfig+0x10c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00f      	beq.n	80099a6 <TIM_OC1_SetConfig+0xc2>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <TIM_OC1_SetConfig+0x110>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d00b      	beq.n	80099a6 <TIM_OC1_SetConfig+0xc2>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <TIM_OC1_SetConfig+0x114>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d007      	beq.n	80099a6 <TIM_OC1_SetConfig+0xc2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a18      	ldr	r2, [pc, #96]	; (80099fc <TIM_OC1_SetConfig+0x118>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d003      	beq.n	80099a6 <TIM_OC1_SetConfig+0xc2>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <TIM_OC1_SetConfig+0x11c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d111      	bne.n	80099ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	621a      	str	r2, [r3, #32]
}
 80099e4:	bf00      	nop
 80099e6:	371c      	adds	r7, #28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40012c00 	.word	0x40012c00
 80099f4:	40013400 	.word	0x40013400
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40014400 	.word	0x40014400
 8009a00:	40014800 	.word	0x40014800

08009a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	f023 0210 	bic.w	r2, r3, #16
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f023 0320 	bic.w	r3, r3, #32
 8009a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a28      	ldr	r2, [pc, #160]	; (8009b04 <TIM_OC2_SetConfig+0x100>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC2_SetConfig+0x6c>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a27      	ldr	r2, [pc, #156]	; (8009b08 <TIM_OC2_SetConfig+0x104>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10d      	bne.n	8009a8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <TIM_OC2_SetConfig+0x100>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00f      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xb0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a1c      	ldr	r2, [pc, #112]	; (8009b08 <TIM_OC2_SetConfig+0x104>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00b      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xb0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <TIM_OC2_SetConfig+0x108>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d007      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xb0>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a1a      	ldr	r2, [pc, #104]	; (8009b10 <TIM_OC2_SetConfig+0x10c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xb0>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a19      	ldr	r2, [pc, #100]	; (8009b14 <TIM_OC2_SetConfig+0x110>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d113      	bne.n	8009adc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	621a      	str	r2, [r3, #32]
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40012c00 	.word	0x40012c00
 8009b08:	40013400 	.word	0x40013400
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	40014400 	.word	0x40014400
 8009b14:	40014800 	.word	0x40014800

08009b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a27      	ldr	r2, [pc, #156]	; (8009c14 <TIM_OC3_SetConfig+0xfc>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d003      	beq.n	8009b82 <TIM_OC3_SetConfig+0x6a>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a26      	ldr	r2, [pc, #152]	; (8009c18 <TIM_OC3_SetConfig+0x100>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d10d      	bne.n	8009b9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <TIM_OC3_SetConfig+0xfc>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d00f      	beq.n	8009bc6 <TIM_OC3_SetConfig+0xae>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a1b      	ldr	r2, [pc, #108]	; (8009c18 <TIM_OC3_SetConfig+0x100>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d00b      	beq.n	8009bc6 <TIM_OC3_SetConfig+0xae>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a1a      	ldr	r2, [pc, #104]	; (8009c1c <TIM_OC3_SetConfig+0x104>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d007      	beq.n	8009bc6 <TIM_OC3_SetConfig+0xae>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a19      	ldr	r2, [pc, #100]	; (8009c20 <TIM_OC3_SetConfig+0x108>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d003      	beq.n	8009bc6 <TIM_OC3_SetConfig+0xae>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a18      	ldr	r2, [pc, #96]	; (8009c24 <TIM_OC3_SetConfig+0x10c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d113      	bne.n	8009bee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	621a      	str	r2, [r3, #32]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	40012c00 	.word	0x40012c00
 8009c18:	40013400 	.word	0x40013400
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	40014400 	.word	0x40014400
 8009c24:	40014800 	.word	0x40014800

08009c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	031b      	lsls	r3, r3, #12
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <TIM_OC4_SetConfig+0xc0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d00f      	beq.n	8009cac <TIM_OC4_SetConfig+0x84>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a17      	ldr	r2, [pc, #92]	; (8009cec <TIM_OC4_SetConfig+0xc4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00b      	beq.n	8009cac <TIM_OC4_SetConfig+0x84>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a16      	ldr	r2, [pc, #88]	; (8009cf0 <TIM_OC4_SetConfig+0xc8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <TIM_OC4_SetConfig+0x84>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a15      	ldr	r2, [pc, #84]	; (8009cf4 <TIM_OC4_SetConfig+0xcc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_OC4_SetConfig+0x84>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a14      	ldr	r2, [pc, #80]	; (8009cf8 <TIM_OC4_SetConfig+0xd0>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d109      	bne.n	8009cc0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	019b      	lsls	r3, r3, #6
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	621a      	str	r2, [r3, #32]
}
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	40012c00 	.word	0x40012c00
 8009cec:	40013400 	.word	0x40013400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	40014800 	.word	0x40014800

08009cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <TIM_OC5_SetConfig+0xb4>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_OC5_SetConfig+0x7a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a16      	ldr	r2, [pc, #88]	; (8009db4 <TIM_OC5_SetConfig+0xb8>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <TIM_OC5_SetConfig+0x7a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <TIM_OC5_SetConfig+0xbc>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_OC5_SetConfig+0x7a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <TIM_OC5_SetConfig+0xc0>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_OC5_SetConfig+0x7a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a13      	ldr	r2, [pc, #76]	; (8009dc0 <TIM_OC5_SetConfig+0xc4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d109      	bne.n	8009d8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	621a      	str	r2, [r3, #32]
}
 8009da4:	bf00      	nop
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	40012c00 	.word	0x40012c00
 8009db4:	40013400 	.word	0x40013400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	40014800 	.word	0x40014800

08009dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	051b      	lsls	r3, r3, #20
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <TIM_OC6_SetConfig+0xb8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00f      	beq.n	8009e40 <TIM_OC6_SetConfig+0x7c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <TIM_OC6_SetConfig+0xbc>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00b      	beq.n	8009e40 <TIM_OC6_SetConfig+0x7c>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a16      	ldr	r2, [pc, #88]	; (8009e84 <TIM_OC6_SetConfig+0xc0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d007      	beq.n	8009e40 <TIM_OC6_SetConfig+0x7c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <TIM_OC6_SetConfig+0xc4>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_OC6_SetConfig+0x7c>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a14      	ldr	r2, [pc, #80]	; (8009e8c <TIM_OC6_SetConfig+0xc8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d109      	bne.n	8009e54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	029b      	lsls	r3, r3, #10
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	621a      	str	r2, [r3, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	40012c00 	.word	0x40012c00
 8009e80:	40013400 	.word	0x40013400
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800

08009e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e065      	b.n	8009f78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	041b      	lsls	r3, r3, #16
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a16      	ldr	r2, [pc, #88]	; (8009f84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d004      	beq.n	8009f3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d115      	bne.n	8009f66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	051b      	lsls	r3, r3, #20
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	40013400 	.word	0x40013400

08009f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e042      	b.n	800a060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7f8 faf3 	bl	80025d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	; 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 0201 	bic.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 ff58 	bl	800aec8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fc59 	bl	800a8d0 <UART_SetConfig>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e01b      	b.n	800a060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 ffd7 	bl	800b00c <UART_CheckIdleState>
 800a05e:	4603      	mov	r3, r0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d17c      	bne.n	800a17c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <HAL_UART_Transmit+0x26>
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e075      	b.n	800a17e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2221      	movs	r2, #33	; 0x21
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0a2:	f7f8 fd23 	bl	8002aec <HAL_GetTick>
 800a0a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	88fa      	ldrh	r2, [r7, #6]
 800a0ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c0:	d108      	bne.n	800a0d4 <HAL_UART_Transmit+0x6c>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61bb      	str	r3, [r7, #24]
 800a0d2:	e003      	b.n	800a0dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0dc:	e031      	b.n	800a142 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2180      	movs	r1, #128	; 0x80
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f001 f839 	bl	800b160 <UART_WaitOnFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e03e      	b.n	800a17e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	881a      	ldrh	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a112:	b292      	uxth	r2, r2
 800a114:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	3302      	adds	r3, #2
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e008      	b.n	800a130 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	781a      	ldrb	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	b292      	uxth	r2, r2
 800a128:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	3301      	adds	r3, #1
 800a12e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a136:	b29b      	uxth	r3, r3
 800a138:	3b01      	subs	r3, #1
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1c7      	bne.n	800a0de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2200      	movs	r2, #0
 800a156:	2140      	movs	r1, #64	; 0x40
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f001 f801 	bl	800b160 <UART_WaitOnFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2220      	movs	r2, #32
 800a168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e006      	b.n	800a17e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
  }
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3720      	adds	r7, #32
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	; 0x28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a19c:	2b20      	cmp	r3, #32
 800a19e:	d137      	bne.n	800a210 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <HAL_UART_Receive_DMA+0x24>
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e030      	b.n	800a212 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a18      	ldr	r2, [pc, #96]	; (800a21c <HAL_UART_Receive_DMA+0x94>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d01f      	beq.n	800a200 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d018      	beq.n	800a200 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	613b      	str	r3, [r7, #16]
   return(result);
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	623b      	str	r3, [r7, #32]
 800a1ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	69f9      	ldr	r1, [r7, #28]
 800a1f2:	6a3a      	ldr	r2, [r7, #32]
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e6      	bne.n	800a1ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	461a      	mov	r2, r3
 800a204:	68b9      	ldr	r1, [r7, #8]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f001 f812 	bl	800b230 <UART_Start_Receive_DMA>
 800a20c:	4603      	mov	r3, r0
 800a20e:	e000      	b.n	800a212 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a210:	2302      	movs	r3, #2
  }
}
 800a212:	4618      	mov	r0, r3
 800a214:	3728      	adds	r7, #40	; 0x28
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40008000 	.word	0x40008000

0800a220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b0ba      	sub	sp, #232	; 0xe8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a24a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a24e:	4013      	ands	r3, r2
 800a250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d11b      	bne.n	800a294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d015      	beq.n	800a294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d105      	bne.n	800a280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d009      	beq.n	800a294 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 82e3 	beq.w	800a850 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
      }
      return;
 800a292:	e2dd      	b.n	800a850 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 8123 	beq.w	800a4e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a29e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2a2:	4b8d      	ldr	r3, [pc, #564]	; (800a4d8 <HAL_UART_IRQHandler+0x2b8>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d106      	bne.n	800a2b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2ae:	4b8b      	ldr	r3, [pc, #556]	; (800a4dc <HAL_UART_IRQHandler+0x2bc>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 8116 	beq.w	800a4e4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d011      	beq.n	800a2e8 <HAL_UART_IRQHandler+0xc8>
 800a2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2de:	f043 0201 	orr.w	r2, r3, #1
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d011      	beq.n	800a318 <HAL_UART_IRQHandler+0xf8>
 800a2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2202      	movs	r2, #2
 800a306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	f043 0204 	orr.w	r2, r3, #4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	d011      	beq.n	800a348 <HAL_UART_IRQHandler+0x128>
 800a324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2204      	movs	r2, #4
 800a336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	f043 0202 	orr.w	r2, r3, #2
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b00      	cmp	r3, #0
 800a352:	d017      	beq.n	800a384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a358:	f003 0320 	and.w	r3, r3, #32
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a364:	4b5c      	ldr	r3, [pc, #368]	; (800a4d8 <HAL_UART_IRQHandler+0x2b8>)
 800a366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00b      	beq.n	800a384 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2208      	movs	r2, #8
 800a372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37a:	f043 0208 	orr.w	r2, r3, #8
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x196>
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00c      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ac:	f043 0220 	orr.w	r2, r3, #32
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8249 	beq.w	800a854 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d013      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d105      	bne.n	800a3e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d007      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40a:	2b40      	cmp	r3, #64	; 0x40
 800a40c:	d005      	beq.n	800a41a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a416:	2b00      	cmp	r3, #0
 800a418:	d054      	beq.n	800a4c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 ffef 	bl	800b3fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d146      	bne.n	800a4bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3308      	adds	r3, #8
 800a434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a44c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a45a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a45e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1d9      	bne.n	800a42e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a480:	2b00      	cmp	r3, #0
 800a482:	d017      	beq.n	800a4b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a48a:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <HAL_UART_IRQHandler+0x2c0>)
 800a48c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a494:	4618      	mov	r0, r3
 800a496:	f7f8 fdea 	bl	800306e <HAL_DMA_Abort_IT>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d019      	beq.n	800a4d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b2:	e00f      	b.n	800a4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f9f5 	bl	800a8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ba:	e00b      	b.n	800a4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f9f1 	bl	800a8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c2:	e007      	b.n	800a4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f9ed 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a4d2:	e1bf      	b.n	800a854 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d4:	bf00      	nop
    return;
 800a4d6:	e1bd      	b.n	800a854 <HAL_UART_IRQHandler+0x634>
 800a4d8:	10000001 	.word	0x10000001
 800a4dc:	04000120 	.word	0x04000120
 800a4e0:	0800b6b5 	.word	0x0800b6b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	f040 8153 	bne.w	800a794 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f2:	f003 0310 	and.w	r3, r3, #16
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 814c 	beq.w	800a794 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 8145 	beq.w	800a794 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2210      	movs	r2, #16
 800a510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51c:	2b40      	cmp	r3, #64	; 0x40
 800a51e:	f040 80bb 	bne.w	800a698 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 818f 	beq.w	800a858 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a540:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a544:	429a      	cmp	r2, r3
 800a546:	f080 8187 	bcs.w	800a858 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	f040 8087 	bne.w	800a676 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a57c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a596:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a59e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1da      	bne.n	800a568 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a5c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5c4:	f023 0301 	bic.w	r3, r3, #1
 800a5c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e1      	bne.n	800a5b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a612:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e3      	bne.n	800a5ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a644:	f023 0310 	bic.w	r3, r3, #16
 800a648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a656:	65bb      	str	r3, [r7, #88]	; 0x58
 800a658:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a65c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e4      	bne.n	800a634 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a670:	4618      	mov	r0, r3
 800a672:	f7f8 fca0 	bl	8002fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2202      	movs	r2, #2
 800a67a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a688:	b29b      	uxth	r3, r3
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f911 	bl	800a8b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a696:	e0df      	b.n	800a858 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80d1 	beq.w	800a85c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a6ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 80cc 	beq.w	800a85c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	e853 3f00 	ldrex	r3, [r3]
 800a6d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e4      	bne.n	800a6c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3308      	adds	r3, #8
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	623b      	str	r3, [r7, #32]
   return(result);
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a710:	f023 0301 	bic.w	r3, r3, #1
 800a714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3308      	adds	r3, #8
 800a71e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a722:	633a      	str	r2, [r7, #48]	; 0x30
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e1      	bne.n	800a6fa <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2220      	movs	r2, #32
 800a73a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	60fb      	str	r3, [r7, #12]
   return(result);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0310 	bic.w	r3, r3, #16
 800a75e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	69b9      	ldr	r1, [r7, #24]
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	617b      	str	r3, [r7, #20]
   return(result);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e4      	bne.n	800a74a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f893 	bl	800a8b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a792:	e063      	b.n	800a85c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <HAL_UART_IRQHandler+0x59e>
 800a7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d008      	beq.n	800a7be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 ffbd 	bl	800b736 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7bc:	e051      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d014      	beq.n	800a7f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d105      	bne.n	800a7e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d008      	beq.n	800a7f4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d03a      	beq.n	800a860 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
    }
    return;
 800a7f2:	e035      	b.n	800a860 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d009      	beq.n	800a814 <HAL_UART_IRQHandler+0x5f4>
 800a800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 ff67 	bl	800b6e0 <UART_EndTransmit_IT>
    return;
 800a812:	e026      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <HAL_UART_IRQHandler+0x614>
 800a820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 ff96 	bl	800b75e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a832:	e016      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <HAL_UART_IRQHandler+0x642>
 800a840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a844:	2b00      	cmp	r3, #0
 800a846:	da0c      	bge.n	800a862 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 ff7e 	bl	800b74a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a84e:	e008      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
      return;
 800a850:	bf00      	nop
 800a852:	e006      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
    return;
 800a854:	bf00      	nop
 800a856:	e004      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
      return;
 800a858:	bf00      	nop
 800a85a:	e002      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
      return;
 800a85c:	bf00      	nop
 800a85e:	e000      	b.n	800a862 <HAL_UART_IRQHandler+0x642>
    return;
 800a860:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a862:	37e8      	adds	r7, #232	; 0xe8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8d4:	b08c      	sub	sp, #48	; 0x30
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4baa      	ldr	r3, [pc, #680]	; (800aba8 <UART_SetConfig+0x2d8>)
 800a900:	4013      	ands	r3, r2
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	6812      	ldr	r2, [r2, #0]
 800a906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a908:	430b      	orrs	r3, r1
 800a90a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a9f      	ldr	r2, [pc, #636]	; (800abac <UART_SetConfig+0x2dc>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d004      	beq.n	800a93c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a938:	4313      	orrs	r3, r2
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a946:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a950:	430b      	orrs	r3, r1
 800a952:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	f023 010f 	bic.w	r1, r3, #15
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a90      	ldr	r2, [pc, #576]	; (800abb0 <UART_SetConfig+0x2e0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d125      	bne.n	800a9c0 <UART_SetConfig+0xf0>
 800a974:	4b8f      	ldr	r3, [pc, #572]	; (800abb4 <UART_SetConfig+0x2e4>)
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d81a      	bhi.n	800a9b8 <UART_SetConfig+0xe8>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <UART_SetConfig+0xb8>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a999 	.word	0x0800a999
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	0800a9a1 	.word	0x0800a9a1
 800a994:	0800a9b1 	.word	0x0800a9b1
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a99e:	e116      	b.n	800abce <UART_SetConfig+0x2fe>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9a6:	e112      	b.n	800abce <UART_SetConfig+0x2fe>
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ae:	e10e      	b.n	800abce <UART_SetConfig+0x2fe>
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9b6:	e10a      	b.n	800abce <UART_SetConfig+0x2fe>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9be:	e106      	b.n	800abce <UART_SetConfig+0x2fe>
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a7c      	ldr	r2, [pc, #496]	; (800abb8 <UART_SetConfig+0x2e8>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d138      	bne.n	800aa3c <UART_SetConfig+0x16c>
 800a9ca:	4b7a      	ldr	r3, [pc, #488]	; (800abb4 <UART_SetConfig+0x2e4>)
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d0:	f003 030c 	and.w	r3, r3, #12
 800a9d4:	2b0c      	cmp	r3, #12
 800a9d6:	d82d      	bhi.n	800aa34 <UART_SetConfig+0x164>
 800a9d8:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <UART_SetConfig+0x110>)
 800a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9de:	bf00      	nop
 800a9e0:	0800aa15 	.word	0x0800aa15
 800a9e4:	0800aa35 	.word	0x0800aa35
 800a9e8:	0800aa35 	.word	0x0800aa35
 800a9ec:	0800aa35 	.word	0x0800aa35
 800a9f0:	0800aa25 	.word	0x0800aa25
 800a9f4:	0800aa35 	.word	0x0800aa35
 800a9f8:	0800aa35 	.word	0x0800aa35
 800a9fc:	0800aa35 	.word	0x0800aa35
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa35 	.word	0x0800aa35
 800aa08:	0800aa35 	.word	0x0800aa35
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa2d 	.word	0x0800aa2d
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa1a:	e0d8      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa22:	e0d4      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa2a:	e0d0      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa32:	e0cc      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa3a:	e0c8      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a5e      	ldr	r2, [pc, #376]	; (800abbc <UART_SetConfig+0x2ec>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d125      	bne.n	800aa92 <UART_SetConfig+0x1c2>
 800aa46:	4b5b      	ldr	r3, [pc, #364]	; (800abb4 <UART_SetConfig+0x2e4>)
 800aa48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa50:	2b30      	cmp	r3, #48	; 0x30
 800aa52:	d016      	beq.n	800aa82 <UART_SetConfig+0x1b2>
 800aa54:	2b30      	cmp	r3, #48	; 0x30
 800aa56:	d818      	bhi.n	800aa8a <UART_SetConfig+0x1ba>
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d00a      	beq.n	800aa72 <UART_SetConfig+0x1a2>
 800aa5c:	2b20      	cmp	r3, #32
 800aa5e:	d814      	bhi.n	800aa8a <UART_SetConfig+0x1ba>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <UART_SetConfig+0x19a>
 800aa64:	2b10      	cmp	r3, #16
 800aa66:	d008      	beq.n	800aa7a <UART_SetConfig+0x1aa>
 800aa68:	e00f      	b.n	800aa8a <UART_SetConfig+0x1ba>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa70:	e0ad      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa72:	2302      	movs	r3, #2
 800aa74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa78:	e0a9      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa7a:	2304      	movs	r3, #4
 800aa7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa80:	e0a5      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa82:	2308      	movs	r3, #8
 800aa84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa88:	e0a1      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa8a:	2310      	movs	r3, #16
 800aa8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa90:	e09d      	b.n	800abce <UART_SetConfig+0x2fe>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a4a      	ldr	r2, [pc, #296]	; (800abc0 <UART_SetConfig+0x2f0>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d125      	bne.n	800aae8 <UART_SetConfig+0x218>
 800aa9c:	4b45      	ldr	r3, [pc, #276]	; (800abb4 <UART_SetConfig+0x2e4>)
 800aa9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aaa6:	2bc0      	cmp	r3, #192	; 0xc0
 800aaa8:	d016      	beq.n	800aad8 <UART_SetConfig+0x208>
 800aaaa:	2bc0      	cmp	r3, #192	; 0xc0
 800aaac:	d818      	bhi.n	800aae0 <UART_SetConfig+0x210>
 800aaae:	2b80      	cmp	r3, #128	; 0x80
 800aab0:	d00a      	beq.n	800aac8 <UART_SetConfig+0x1f8>
 800aab2:	2b80      	cmp	r3, #128	; 0x80
 800aab4:	d814      	bhi.n	800aae0 <UART_SetConfig+0x210>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <UART_SetConfig+0x1f0>
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d008      	beq.n	800aad0 <UART_SetConfig+0x200>
 800aabe:	e00f      	b.n	800aae0 <UART_SetConfig+0x210>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac6:	e082      	b.n	800abce <UART_SetConfig+0x2fe>
 800aac8:	2302      	movs	r3, #2
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aace:	e07e      	b.n	800abce <UART_SetConfig+0x2fe>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad6:	e07a      	b.n	800abce <UART_SetConfig+0x2fe>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aade:	e076      	b.n	800abce <UART_SetConfig+0x2fe>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e072      	b.n	800abce <UART_SetConfig+0x2fe>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a35      	ldr	r2, [pc, #212]	; (800abc4 <UART_SetConfig+0x2f4>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d12a      	bne.n	800ab48 <UART_SetConfig+0x278>
 800aaf2:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <UART_SetConfig+0x2e4>)
 800aaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aafc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab00:	d01a      	beq.n	800ab38 <UART_SetConfig+0x268>
 800ab02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab06:	d81b      	bhi.n	800ab40 <UART_SetConfig+0x270>
 800ab08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab0c:	d00c      	beq.n	800ab28 <UART_SetConfig+0x258>
 800ab0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab12:	d815      	bhi.n	800ab40 <UART_SetConfig+0x270>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <UART_SetConfig+0x250>
 800ab18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab1c:	d008      	beq.n	800ab30 <UART_SetConfig+0x260>
 800ab1e:	e00f      	b.n	800ab40 <UART_SetConfig+0x270>
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab26:	e052      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab2e:	e04e      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab36:	e04a      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	e046      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e042      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a17      	ldr	r2, [pc, #92]	; (800abac <UART_SetConfig+0x2dc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d13a      	bne.n	800abc8 <UART_SetConfig+0x2f8>
 800ab52:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <UART_SetConfig+0x2e4>)
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab60:	d01a      	beq.n	800ab98 <UART_SetConfig+0x2c8>
 800ab62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab66:	d81b      	bhi.n	800aba0 <UART_SetConfig+0x2d0>
 800ab68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab6c:	d00c      	beq.n	800ab88 <UART_SetConfig+0x2b8>
 800ab6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab72:	d815      	bhi.n	800aba0 <UART_SetConfig+0x2d0>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <UART_SetConfig+0x2b0>
 800ab78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab7c:	d008      	beq.n	800ab90 <UART_SetConfig+0x2c0>
 800ab7e:	e00f      	b.n	800aba0 <UART_SetConfig+0x2d0>
 800ab80:	2300      	movs	r3, #0
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab86:	e022      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab8e:	e01e      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab96:	e01a      	b.n	800abce <UART_SetConfig+0x2fe>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9e:	e016      	b.n	800abce <UART_SetConfig+0x2fe>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aba6:	e012      	b.n	800abce <UART_SetConfig+0x2fe>
 800aba8:	cfff69f3 	.word	0xcfff69f3
 800abac:	40008000 	.word	0x40008000
 800abb0:	40013800 	.word	0x40013800
 800abb4:	40021000 	.word	0x40021000
 800abb8:	40004400 	.word	0x40004400
 800abbc:	40004800 	.word	0x40004800
 800abc0:	40004c00 	.word	0x40004c00
 800abc4:	40005000 	.word	0x40005000
 800abc8:	2310      	movs	r3, #16
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4aae      	ldr	r2, [pc, #696]	; (800ae8c <UART_SetConfig+0x5bc>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	f040 8097 	bne.w	800ad08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d823      	bhi.n	800ac2a <UART_SetConfig+0x35a>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <UART_SetConfig+0x318>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac2b 	.word	0x0800ac2b
 800abf0:	0800ac15 	.word	0x0800ac15
 800abf4:	0800ac2b 	.word	0x0800ac2b
 800abf8:	0800ac1b 	.word	0x0800ac1b
 800abfc:	0800ac2b 	.word	0x0800ac2b
 800ac00:	0800ac2b 	.word	0x0800ac2b
 800ac04:	0800ac2b 	.word	0x0800ac2b
 800ac08:	0800ac23 	.word	0x0800ac23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac0c:	f7fa ff6e 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800ac10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac12:	e010      	b.n	800ac36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac14:	4b9e      	ldr	r3, [pc, #632]	; (800ae90 <UART_SetConfig+0x5c0>)
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac18:	e00d      	b.n	800ac36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac1a:	f7fa fecf 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac20:	e009      	b.n	800ac36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac28:	e005      	b.n	800ac36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ac34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 8130 	beq.w	800ae9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	4a94      	ldr	r2, [pc, #592]	; (800ae94 <UART_SetConfig+0x5c4>)
 800ac44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d305      	bcc.n	800ac6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d903      	bls.n	800ac76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac74:	e113      	b.n	800ae9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	2200      	movs	r2, #0
 800ac7a:	60bb      	str	r3, [r7, #8]
 800ac7c:	60fa      	str	r2, [r7, #12]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	4a84      	ldr	r2, [pc, #528]	; (800ae94 <UART_SetConfig+0x5c4>)
 800ac84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac98:	f7f5 ff9e 	bl	8000bd8 <__aeabi_uldivmod>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4610      	mov	r0, r2
 800aca2:	4619      	mov	r1, r3
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	020b      	lsls	r3, r1, #8
 800acae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acb2:	0202      	lsls	r2, r0, #8
 800acb4:	6979      	ldr	r1, [r7, #20]
 800acb6:	6849      	ldr	r1, [r1, #4]
 800acb8:	0849      	lsrs	r1, r1, #1
 800acba:	2000      	movs	r0, #0
 800acbc:	460c      	mov	r4, r1
 800acbe:	4605      	mov	r5, r0
 800acc0:	eb12 0804 	adds.w	r8, r2, r4
 800acc4:	eb43 0905 	adc.w	r9, r3, r5
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	469a      	mov	sl, r3
 800acd0:	4693      	mov	fp, r2
 800acd2:	4652      	mov	r2, sl
 800acd4:	465b      	mov	r3, fp
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 ff7d 	bl	8000bd8 <__aeabi_uldivmod>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4613      	mov	r3, r2
 800ace4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acec:	d308      	bcc.n	800ad00 <UART_SetConfig+0x430>
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acf4:	d204      	bcs.n	800ad00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	60da      	str	r2, [r3, #12]
 800acfe:	e0ce      	b.n	800ae9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad06:	e0ca      	b.n	800ae9e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad10:	d166      	bne.n	800ade0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ad12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad16:	2b08      	cmp	r3, #8
 800ad18:	d827      	bhi.n	800ad6a <UART_SetConfig+0x49a>
 800ad1a:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <UART_SetConfig+0x450>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad45 	.word	0x0800ad45
 800ad24:	0800ad4d 	.word	0x0800ad4d
 800ad28:	0800ad55 	.word	0x0800ad55
 800ad2c:	0800ad6b 	.word	0x0800ad6b
 800ad30:	0800ad5b 	.word	0x0800ad5b
 800ad34:	0800ad6b 	.word	0x0800ad6b
 800ad38:	0800ad6b 	.word	0x0800ad6b
 800ad3c:	0800ad6b 	.word	0x0800ad6b
 800ad40:	0800ad63 	.word	0x0800ad63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad44:	f7fa fed2 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800ad48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad4a:	e014      	b.n	800ad76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad4c:	f7fa fee4 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 800ad50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad52:	e010      	b.n	800ad76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad54:	4b4e      	ldr	r3, [pc, #312]	; (800ae90 <UART_SetConfig+0x5c0>)
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad58:	e00d      	b.n	800ad76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad5a:	f7fa fe2f 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 800ad5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad60:	e009      	b.n	800ad76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad68:	e005      	b.n	800ad76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8090 	beq.w	800ae9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	4a44      	ldr	r2, [pc, #272]	; (800ae94 <UART_SetConfig+0x5c4>)
 800ad84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad90:	005a      	lsls	r2, r3, #1
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	441a      	add	r2, r3
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b0f      	cmp	r3, #15
 800ada8:	d916      	bls.n	800add8 <UART_SetConfig+0x508>
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb0:	d212      	bcs.n	800add8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f023 030f 	bic.w	r3, r3, #15
 800adba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	085b      	lsrs	r3, r3, #1
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	8bfb      	ldrh	r3, [r7, #30]
 800adca:	4313      	orrs	r3, r2
 800adcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	8bfa      	ldrh	r2, [r7, #30]
 800add4:	60da      	str	r2, [r3, #12]
 800add6:	e062      	b.n	800ae9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800adde:	e05e      	b.n	800ae9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ade0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ade4:	2b08      	cmp	r3, #8
 800ade6:	d828      	bhi.n	800ae3a <UART_SetConfig+0x56a>
 800ade8:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <UART_SetConfig+0x520>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ae15 	.word	0x0800ae15
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	0800ae3b 	.word	0x0800ae3b
 800ae00:	0800ae2b 	.word	0x0800ae2b
 800ae04:	0800ae3b 	.word	0x0800ae3b
 800ae08:	0800ae3b 	.word	0x0800ae3b
 800ae0c:	0800ae3b 	.word	0x0800ae3b
 800ae10:	0800ae33 	.word	0x0800ae33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae14:	f7fa fe6a 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800ae18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae1a:	e014      	b.n	800ae46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae1c:	f7fa fe7c 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 800ae20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae22:	e010      	b.n	800ae46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae24:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <UART_SetConfig+0x5c0>)
 800ae26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae28:	e00d      	b.n	800ae46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae2a:	f7fa fdc7 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 800ae2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae30:	e009      	b.n	800ae46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae38:	e005      	b.n	800ae46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae44:	bf00      	nop
    }

    if (pclk != 0U)
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d028      	beq.n	800ae9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	4a10      	ldr	r2, [pc, #64]	; (800ae94 <UART_SetConfig+0x5c4>)
 800ae52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	441a      	add	r2, r3
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d910      	bls.n	800ae98 <UART_SetConfig+0x5c8>
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae7c:	d20c      	bcs.n	800ae98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60da      	str	r2, [r3, #12]
 800ae88:	e009      	b.n	800ae9e <UART_SetConfig+0x5ce>
 800ae8a:	bf00      	nop
 800ae8c:	40008000 	.word	0x40008000
 800ae90:	00f42400 	.word	0x00f42400
 800ae94:	08013988 	.word	0x08013988
      }
      else
      {
        ret = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aeba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3730      	adds	r7, #48	; 0x30
 800aec2:	46bd      	mov	sp, r7
 800aec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	f003 0308 	and.w	r3, r3, #8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00a      	beq.n	800af14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	430a      	orrs	r2, r1
 800af12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00a      	beq.n	800af36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5c:	f003 0310 	and.w	r3, r3, #16
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00a      	beq.n	800af7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7e:	f003 0320 	and.w	r3, r3, #32
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01a      	beq.n	800afde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afc6:	d10a      	bne.n	800afde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	605a      	str	r2, [r3, #4]
  }
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b098      	sub	sp, #96	; 0x60
 800b010:	af02      	add	r7, sp, #8
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b01c:	f7f7 fd66 	bl	8002aec <HAL_GetTick>
 800b020:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0308 	and.w	r3, r3, #8
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d12f      	bne.n	800b090 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b038:	2200      	movs	r2, #0
 800b03a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f88e 	bl	800b160 <UART_WaitOnFlagUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d022      	beq.n	800b090 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b05e:	653b      	str	r3, [r7, #80]	; 0x50
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b068:	647b      	str	r3, [r7, #68]	; 0x44
 800b06a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e6      	bne.n	800b04a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2220      	movs	r2, #32
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e063      	b.n	800b158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0304 	and.w	r3, r3, #4
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d149      	bne.n	800b132 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b09e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f857 	bl	800b160 <UART_WaitOnFlagUntilTimeout>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d03c      	beq.n	800b132 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	e841 2300 	strex	r3, r2, [r1]
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e6      	bne.n	800b0b8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	64bb      	str	r3, [r7, #72]	; 0x48
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b10a:	61fa      	str	r2, [r7, #28]
 800b10c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10e:	69b9      	ldr	r1, [r7, #24]
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	617b      	str	r3, [r7, #20]
   return(result);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1e5      	bne.n	800b0ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2220      	movs	r2, #32
 800b122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e012      	b.n	800b158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3758      	adds	r7, #88	; 0x58
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	4613      	mov	r3, r2
 800b16e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b170:	e049      	b.n	800b206 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b178:	d045      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b17a:	f7f7 fcb7 	bl	8002aec <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	429a      	cmp	r2, r3
 800b188:	d302      	bcc.n	800b190 <UART_WaitOnFlagUntilTimeout+0x30>
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e048      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 0304 	and.w	r3, r3, #4
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d031      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f003 0308 	and.w	r3, r3, #8
 800b1ac:	2b08      	cmp	r3, #8
 800b1ae:	d110      	bne.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2208      	movs	r2, #8
 800b1b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f920 	bl	800b3fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e029      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1e0:	d111      	bne.n	800b206 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f906 	bl	800b3fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e00f      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69da      	ldr	r2, [r3, #28]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4013      	ands	r3, r2
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	429a      	cmp	r2, r3
 800b214:	bf0c      	ite	eq
 800b216:	2301      	moveq	r3, #1
 800b218:	2300      	movne	r3, #0
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	461a      	mov	r2, r3
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	429a      	cmp	r2, r3
 800b222:	d0a6      	beq.n	800b172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b096      	sub	sp, #88	; 0x58
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	4613      	mov	r3, r2
 800b23c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	88fa      	ldrh	r2, [r7, #6]
 800b248:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2222      	movs	r2, #34	; 0x22
 800b258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b262:	2b00      	cmp	r3, #0
 800b264:	d02d      	beq.n	800b2c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b26c:	4a40      	ldr	r2, [pc, #256]	; (800b370 <UART_Start_Receive_DMA+0x140>)
 800b26e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b276:	4a3f      	ldr	r2, [pc, #252]	; (800b374 <UART_Start_Receive_DMA+0x144>)
 800b278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b280:	4a3d      	ldr	r2, [pc, #244]	; (800b378 <UART_Start_Receive_DMA+0x148>)
 800b282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b28a:	2200      	movs	r2, #0
 800b28c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3324      	adds	r3, #36	; 0x24
 800b29a:	4619      	mov	r1, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	88fb      	ldrh	r3, [r7, #6]
 800b2a4:	f7f7 fe0c 	bl	8002ec0 <HAL_DMA_Start_IT>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d009      	beq.n	800b2c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2210      	movs	r2, #16
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e051      	b.n	800b366 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d018      	beq.n	800b2fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2de:	657b      	str	r3, [r7, #84]	; 0x54
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e6      	bne.n	800b2ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	3308      	adds	r3, #8
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	e853 3f00 	ldrex	r3, [r3]
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	653b      	str	r3, [r7, #80]	; 0x50
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3308      	adds	r3, #8
 800b31a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b31c:	637a      	str	r2, [r7, #52]	; 0x34
 800b31e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e5      	bne.n	800b2fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3308      	adds	r3, #8
 800b336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	613b      	str	r3, [r7, #16]
   return(result);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b346:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3308      	adds	r3, #8
 800b34e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b350:	623a      	str	r2, [r7, #32]
 800b352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	69f9      	ldr	r1, [r7, #28]
 800b356:	6a3a      	ldr	r2, [r7, #32]
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e5      	bne.n	800b330 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3758      	adds	r7, #88	; 0x58
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0800b4cb 	.word	0x0800b4cb
 800b374:	0800b5f7 	.word	0x0800b5f7
 800b378:	0800b635 	.word	0x0800b635

0800b37c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b08f      	sub	sp, #60	; 0x3c
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	e853 3f00 	ldrex	r3, [r3]
 800b390:	61fb      	str	r3, [r7, #28]
   return(result);
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b398:	637b      	str	r3, [r7, #52]	; 0x34
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e6      	bne.n	800b384 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b3cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d6:	61ba      	str	r2, [r7, #24]
 800b3d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6979      	ldr	r1, [r7, #20]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e5      	bne.n	800b3b6 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b3f2:	bf00      	nop
 800b3f4:	373c      	adds	r7, #60	; 0x3c
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b095      	sub	sp, #84	; 0x54
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b41a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	461a      	mov	r2, r3
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	643b      	str	r3, [r7, #64]	; 0x40
 800b426:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b42a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e6      	bne.n	800b406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	61fb      	str	r3, [r7, #28]
   return(result);
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	64bb      	str	r3, [r7, #72]	; 0x48
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b45c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b464:	e841 2300 	strex	r3, r2, [r1]
 800b468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1e3      	bne.n	800b438 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	2b01      	cmp	r3, #1
 800b476:	d118      	bne.n	800b4aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	60bb      	str	r3, [r7, #8]
   return(result);
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	f023 0310 	bic.w	r3, r3, #16
 800b48c:	647b      	str	r3, [r7, #68]	; 0x44
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b496:	61bb      	str	r3, [r7, #24]
 800b498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6979      	ldr	r1, [r7, #20]
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e6      	bne.n	800b478 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b4be:	bf00      	nop
 800b4c0:	3754      	adds	r7, #84	; 0x54
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b09c      	sub	sp, #112	; 0x70
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 0320 	and.w	r3, r3, #32
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d171      	bne.n	800b5ca <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b502:	66bb      	str	r3, [r7, #104]	; 0x68
 800b504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b50c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b50e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3308      	adds	r3, #8
 800b526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	f023 0301 	bic.w	r3, r3, #1
 800b536:	667b      	str	r3, [r7, #100]	; 0x64
 800b538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3308      	adds	r3, #8
 800b53e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b540:	647a      	str	r2, [r7, #68]	; 0x44
 800b542:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b548:	e841 2300 	strex	r3, r2, [r1]
 800b54c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e5      	bne.n	800b520 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3308      	adds	r3, #8
 800b55a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	e853 3f00 	ldrex	r3, [r3]
 800b562:	623b      	str	r3, [r7, #32]
   return(result);
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b56a:	663b      	str	r3, [r7, #96]	; 0x60
 800b56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3308      	adds	r3, #8
 800b572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b574:	633a      	str	r2, [r7, #48]	; 0x30
 800b576:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57c:	e841 2300 	strex	r3, r2, [r1]
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e5      	bne.n	800b554 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b58a:	2220      	movs	r2, #32
 800b58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b594:	2b01      	cmp	r3, #1
 800b596:	d118      	bne.n	800b5ca <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 0310 	bic.w	r3, r3, #16
 800b5ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5b6:	61fb      	str	r3, [r7, #28]
 800b5b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	69b9      	ldr	r1, [r7, #24]
 800b5bc:	69fa      	ldr	r2, [r7, #28]
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e6      	bne.n	800b598 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d107      	bne.n	800b5e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b5e2:	f7ff f969 	bl	800a8b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5e6:	e002      	b.n	800b5ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b5e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b5ea:	f7ff f947 	bl	800a87c <HAL_UART_RxCpltCallback>
}
 800b5ee:	bf00      	nop
 800b5f0:	3770      	adds	r7, #112	; 0x70
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b602:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d109      	bne.n	800b626 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b618:	085b      	lsrs	r3, r3, #1
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4619      	mov	r1, r3
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff f94a 	bl	800a8b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b624:	e002      	b.n	800b62c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff f932 	bl	800a890 <HAL_UART_RxHalfCpltCallback>
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b640:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b648:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b650:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b65c:	2b80      	cmp	r3, #128	; 0x80
 800b65e:	d109      	bne.n	800b674 <UART_DMAError+0x40>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	2b21      	cmp	r3, #33	; 0x21
 800b664:	d106      	bne.n	800b674 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2200      	movs	r2, #0
 800b66a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b66e:	6978      	ldr	r0, [r7, #20]
 800b670:	f7ff fe84 	bl	800b37c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67e:	2b40      	cmp	r3, #64	; 0x40
 800b680:	d109      	bne.n	800b696 <UART_DMAError+0x62>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b22      	cmp	r3, #34	; 0x22
 800b686:	d106      	bne.n	800b696 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b690:	6978      	ldr	r0, [r7, #20]
 800b692:	f7ff feb4 	bl	800b3fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b69c:	f043 0210 	orr.w	r2, r3, #16
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	f7ff f8fc 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7ff f8e6 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6d8:	bf00      	nop
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	61bb      	str	r3, [r7, #24]
 800b708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	613b      	str	r3, [r7, #16]
   return(result);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e6      	bne.n	800b6e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff f89d 	bl	800a868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b72e:	bf00      	nop
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b772:	b480      	push	{r7}
 800b774:	b085      	sub	sp, #20
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_UARTEx_DisableFifoMode+0x16>
 800b784:	2302      	movs	r3, #2
 800b786:	e027      	b.n	800b7d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2224      	movs	r2, #36	; 0x24
 800b794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0201 	bic.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b7b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d101      	bne.n	800b7fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	e02d      	b.n	800b858 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2224      	movs	r2, #36	; 0x24
 800b808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0201 	bic.w	r2, r2, #1
 800b822:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	430a      	orrs	r2, r1
 800b836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f84f 	bl	800b8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b870:	2b01      	cmp	r3, #1
 800b872:	d101      	bne.n	800b878 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b874:	2302      	movs	r3, #2
 800b876:	e02d      	b.n	800b8d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2224      	movs	r2, #36	; 0x24
 800b884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f022 0201 	bic.w	r2, r2, #1
 800b89e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f811 	bl	800b8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d108      	bne.n	800b8fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8fc:	e031      	b.n	800b962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8fe:	2308      	movs	r3, #8
 800b900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b902:	2308      	movs	r3, #8
 800b904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	0e5b      	lsrs	r3, r3, #25
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	0f5b      	lsrs	r3, r3, #29
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	7b3a      	ldrb	r2, [r7, #12]
 800b92a:	4911      	ldr	r1, [pc, #68]	; (800b970 <UARTEx_SetNbDataToProcess+0x94>)
 800b92c:	5c8a      	ldrb	r2, [r1, r2]
 800b92e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b932:	7b3a      	ldrb	r2, [r7, #12]
 800b934:	490f      	ldr	r1, [pc, #60]	; (800b974 <UARTEx_SetNbDataToProcess+0x98>)
 800b936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b938:	fb93 f3f2 	sdiv	r3, r3, r2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	7b7a      	ldrb	r2, [r7, #13]
 800b948:	4909      	ldr	r1, [pc, #36]	; (800b970 <UARTEx_SetNbDataToProcess+0x94>)
 800b94a:	5c8a      	ldrb	r2, [r1, r2]
 800b94c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b950:	7b7a      	ldrb	r2, [r7, #13]
 800b952:	4908      	ldr	r1, [pc, #32]	; (800b974 <UARTEx_SetNbDataToProcess+0x98>)
 800b954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b956:	fb93 f3f2 	sdiv	r3, r3, r2
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b962:	bf00      	nop
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	080139a0 	.word	0x080139a0
 800b974:	080139a8 	.word	0x080139a8

0800b978 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b978:	b084      	sub	sp, #16
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	f107 001c 	add.w	r0, r7, #28
 800b986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b98e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b990:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b992:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b996:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b99a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b99e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <SDMMC_Init+0x50>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	b004      	add	sp, #16
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	ffc02c00 	.word	0xffc02c00

0800b9cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b083      	sub	sp, #12
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f043 0203 	orr.w	r2, r3, #3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ba1c:	2002      	movs	r0, #2
 800ba1e:	f7f7 f871 	bl	8002b04 <HAL_Delay>

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0303 	and.w	r3, r3, #3
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ba6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ba72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68da      	ldr	r2, [r3, #12]
 800ba7e:	4b06      	ldr	r3, [pc, #24]	; (800ba98 <SDMMC_SendCommand+0x50>)
 800ba80:	4013      	ands	r3, r2
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	431a      	orrs	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	fffee0c0 	.word	0xfffee0c0

0800ba9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	b2db      	uxtb	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3314      	adds	r3, #20
 800bac4:	461a      	mov	r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	4413      	add	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb02:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bb08:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bb0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	431a      	orrs	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0

}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bb42:	2310      	movs	r3, #16
 800bb44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff ff73 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb66:	2110      	movs	r1, #16
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fa7b 	bl	800c064 <SDMMC_GetCmdResp1>
 800bb6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb70:	69fb      	ldr	r3, [r7, #28]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3720      	adds	r7, #32
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b088      	sub	sp, #32
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bb88:	2311      	movs	r3, #17
 800bb8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff ff50 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bba8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbac:	2111      	movs	r1, #17
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fa58 	bl	800c064 <SDMMC_GetCmdResp1>
 800bbb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3720      	adds	r7, #32
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bbce:	2312      	movs	r3, #18
 800bbd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbe2:	f107 0308 	add.w	r3, r7, #8
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff ff2d 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbf2:	2112      	movs	r1, #18
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fa35 	bl	800c064 <SDMMC_GetCmdResp1>
 800bbfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b088      	sub	sp, #32
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bc14:	2318      	movs	r3, #24
 800bc16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff ff0a 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bc34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc38:	2118      	movs	r1, #24
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa12 	bl	800c064 <SDMMC_GetCmdResp1>
 800bc40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc42:	69fb      	ldr	r3, [r7, #28]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3720      	adds	r7, #32
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bc5a:	2319      	movs	r3, #25
 800bc5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc6e:	f107 0308 	add.w	r3, r7, #8
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff fee7 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bc7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7e:	2119      	movs	r1, #25
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f9ef 	bl	800c064 <SDMMC_GetCmdResp1>
 800bc86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc88:	69fb      	ldr	r3, [r7, #28]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3720      	adds	r7, #32
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bca0:	230c      	movs	r3, #12
 800bca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bccc:	f107 0308 	add.w	r3, r7, #8
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff feb8 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bcd8:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <SDMMC_CmdStopTransfer+0x68>)
 800bcda:	210c      	movs	r1, #12
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f9c1 	bl	800c064 <SDMMC_GetCmdResp1>
 800bce2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	05f5e100 	.word	0x05f5e100

0800bd00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bd10:	2307      	movs	r3, #7
 800bd12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd18:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd22:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd24:	f107 0310 	add.w	r3, r7, #16
 800bd28:	4619      	mov	r1, r3
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f7ff fe8c 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bd30:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd34:	2107      	movs	r1, #7
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 f994 	bl	800c064 <SDMMC_GetCmdResp1>
 800bd3c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3728      	adds	r7, #40	; 0x28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fe6b 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fbb8 	bl	800c4e8 <SDMMC_GetCmdError>
 800bd78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bd8c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bd90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bd92:	2308      	movs	r3, #8
 800bd94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bda0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff fe4b 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fb4a 	bl	800c44c <SDMMC_GetCmdResp7>
 800bdb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdba:	69fb      	ldr	r3, [r7, #28]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bdd2:	2337      	movs	r3, #55	; 0x37
 800bdd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bddc:	2300      	movs	r3, #0
 800bdde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bde0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde6:	f107 0308 	add.w	r3, r7, #8
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff fe2b 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bdf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf6:	2137      	movs	r1, #55	; 0x37
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f933 	bl	800c064 <SDMMC_GetCmdResp1>
 800bdfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be00:	69fb      	ldr	r3, [r7, #28]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b088      	sub	sp, #32
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be18:	2329      	movs	r3, #41	; 0x29
 800be1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fe08 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa4f 	bl	800c2dc <SDMMC_GetCmdResp3>
 800be3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be40:	69fb      	ldr	r3, [r7, #28]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3720      	adds	r7, #32
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b088      	sub	sp, #32
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800be58:	2306      	movs	r3, #6
 800be5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be6c:	f107 0308 	add.w	r3, r7, #8
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff fde8 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800be78:	f241 3288 	movw	r2, #5000	; 0x1388
 800be7c:	2106      	movs	r1, #6
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f8f0 	bl	800c064 <SDMMC_GetCmdResp1>
 800be84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be86:	69fb      	ldr	r3, [r7, #28]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800be9c:	2333      	movs	r3, #51	; 0x33
 800be9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff fdc6 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec0:	2133      	movs	r1, #51	; 0x33
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f8ce 	bl	800c064 <SDMMC_GetCmdResp1>
 800bec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beca:	69fb      	ldr	r3, [r7, #28]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3720      	adds	r7, #32
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bee0:	2302      	movs	r3, #2
 800bee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bee4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fda4 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f9a1 	bl	800c248 <SDMMC_GetCmdResp2>
 800bf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf08:	69fb      	ldr	r3, [r7, #28]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bf20:	2309      	movs	r3, #9
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bf24:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf34:	f107 0308 	add.w	r3, r7, #8
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fd84 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f981 	bl	800c248 <SDMMC_GetCmdResp2>
 800bf46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf48:	69fb      	ldr	r3, [r7, #28]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b088      	sub	sp, #32
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bf60:	2303      	movs	r3, #3
 800bf62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff fd64 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	2103      	movs	r1, #3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f9e9 	bl	800c35c <SDMMC_GetCmdResp6>
 800bf8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3720      	adds	r7, #32
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b088      	sub	sp, #32
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bfa4:	230d      	movs	r3, #13
 800bfa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb8:	f107 0308 	add.w	r3, r7, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fd42 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bfc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc8:	210d      	movs	r1, #13
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f84a 	bl	800c064 <SDMMC_GetCmdResp1>
 800bfd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3720      	adds	r7, #32
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bfe8:	230d      	movs	r3, #13
 800bfea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bffa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffc:	f107 0308 	add.w	r3, r7, #8
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fd20 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c008:	f241 3288 	movw	r2, #5000	; 0x1388
 800c00c:	210d      	movs	r1, #13
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f828 	bl	800c064 <SDMMC_GetCmdResp1>
 800c014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c016:	69fb      	ldr	r3, [r7, #28]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c028:	2300      	movs	r3, #0
 800c02a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c02c:	230b      	movs	r3, #11
 800c02e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c03a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c03e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c040:	f107 0308 	add.w	r3, r7, #8
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff fcfe 	bl	800ba48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c050:	210b      	movs	r1, #11
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f806 	bl	800c064 <SDMMC_GetCmdResp1>
 800c058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05a:	69fb      	ldr	r3, [r7, #28]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	460b      	mov	r3, r1
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c072:	4b70      	ldr	r3, [pc, #448]	; (800c234 <SDMMC_GetCmdResp1+0x1d0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a70      	ldr	r2, [pc, #448]	; (800c238 <SDMMC_GetCmdResp1+0x1d4>)
 800c078:	fba2 2303 	umull	r2, r3, r2, r3
 800c07c:	0a5a      	lsrs	r2, r3, #9
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	1e5a      	subs	r2, r3, #1
 800c08a:	61fa      	str	r2, [r7, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d102      	bne.n	800c096 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c094:	e0c9      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c09c:	69ba      	ldr	r2, [r7, #24]
 800c09e:	4b67      	ldr	r3, [pc, #412]	; (800c23c <SDMMC_GetCmdResp1+0x1d8>)
 800c0a0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0ef      	beq.n	800c086 <SDMMC_GetCmdResp1+0x22>
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1ea      	bne.n	800c086 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2204      	movs	r2, #4
 800c0c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	e0b1      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e0a6      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4a58      	ldr	r2, [pc, #352]	; (800c240 <SDMMC_GetCmdResp1+0x1dc>)
 800c0e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7ff fcda 	bl	800ba9c <SDMMC_GetCommandResponse>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	7afb      	ldrb	r3, [r7, #11]
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d001      	beq.n	800c0f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e099      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff fcdc 	bl	800bab6 <SDMMC_GetResponse>
 800c0fe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	4b50      	ldr	r3, [pc, #320]	; (800c244 <SDMMC_GetCmdResp1+0x1e0>)
 800c104:	4013      	ands	r3, r2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e08d      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	da02      	bge.n	800c11a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c118:	e087      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	e080      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c132:	2380      	movs	r3, #128	; 0x80
 800c134:	e079      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c140:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c144:	e071      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c154:	e069      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c164:	e061      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c174:	e059      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c184:	e051      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c194:	e049      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c1a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1a4:	e041      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c1b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1b4:	e039      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1c4:	e031      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1d4:	e029      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1e4:	e021      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1f4:	e019      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c204:	e011      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c214:	e009      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f003 0308 	and.w	r3, r3, #8
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c220:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c224:	e001      	b.n	800c22a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000004 	.word	0x20000004
 800c238:	10624dd3 	.word	0x10624dd3
 800c23c:	00200045 	.word	0x00200045
 800c240:	002000c5 	.word	0x002000c5
 800c244:	fdffe008 	.word	0xfdffe008

0800c248 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c250:	4b1f      	ldr	r3, [pc, #124]	; (800c2d0 <SDMMC_GetCmdResp2+0x88>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a1f      	ldr	r2, [pc, #124]	; (800c2d4 <SDMMC_GetCmdResp2+0x8c>)
 800c256:	fba2 2303 	umull	r2, r3, r2, r3
 800c25a:	0a5b      	lsrs	r3, r3, #9
 800c25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1e5a      	subs	r2, r3, #1
 800c26a:	60fa      	str	r2, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d102      	bne.n	800c276 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c274:	e026      	b.n	800c2c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0ef      	beq.n	800c266 <SDMMC_GetCmdResp2+0x1e>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1ea      	bne.n	800c266 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2204      	movs	r2, #4
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2a2:	2304      	movs	r3, #4
 800c2a4:	e00e      	b.n	800c2c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d004      	beq.n	800c2bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e003      	b.n	800c2c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a06      	ldr	r2, [pc, #24]	; (800c2d8 <SDMMC_GetCmdResp2+0x90>)
 800c2c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	20000004 	.word	0x20000004
 800c2d4:	10624dd3 	.word	0x10624dd3
 800c2d8:	002000c5 	.word	0x002000c5

0800c2dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <SDMMC_GetCmdResp3+0x74>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a1a      	ldr	r2, [pc, #104]	; (800c354 <SDMMC_GetCmdResp3+0x78>)
 800c2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ee:	0a5b      	lsrs	r3, r3, #9
 800c2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	1e5a      	subs	r2, r3, #1
 800c2fe:	60fa      	str	r2, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d102      	bne.n	800c30a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c308:	e01b      	b.n	800c342 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c316:	2b00      	cmp	r3, #0
 800c318:	d0ef      	beq.n	800c2fa <SDMMC_GetCmdResp3+0x1e>
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1ea      	bne.n	800c2fa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d004      	beq.n	800c33a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2204      	movs	r2, #4
 800c334:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c336:	2304      	movs	r3, #4
 800c338:	e003      	b.n	800c342 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a06      	ldr	r2, [pc, #24]	; (800c358 <SDMMC_GetCmdResp3+0x7c>)
 800c33e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	20000004 	.word	0x20000004
 800c354:	10624dd3 	.word	0x10624dd3
 800c358:	002000c5 	.word	0x002000c5

0800c35c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	460b      	mov	r3, r1
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c36a:	4b35      	ldr	r3, [pc, #212]	; (800c440 <SDMMC_GetCmdResp6+0xe4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a35      	ldr	r2, [pc, #212]	; (800c444 <SDMMC_GetCmdResp6+0xe8>)
 800c370:	fba2 2303 	umull	r2, r3, r2, r3
 800c374:	0a5b      	lsrs	r3, r3, #9
 800c376:	f241 3288 	movw	r2, #5000	; 0x1388
 800c37a:	fb02 f303 	mul.w	r3, r2, r3
 800c37e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	1e5a      	subs	r2, r3, #1
 800c384:	61fa      	str	r2, [r7, #28]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d102      	bne.n	800c390 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c38a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c38e:	e052      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c394:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0ef      	beq.n	800c380 <SDMMC_GetCmdResp6+0x24>
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1ea      	bne.n	800c380 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3bc:	2304      	movs	r3, #4
 800c3be:	e03a      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d004      	beq.n	800c3d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e02f      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff fb60 	bl	800ba9c <SDMMC_GetCommandResponse>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
 800c3e0:	7afb      	ldrb	r3, [r7, #11]
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d001      	beq.n	800c3ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e025      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4a16      	ldr	r2, [pc, #88]	; (800c448 <SDMMC_GetCmdResp6+0xec>)
 800c3ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff fb5f 	bl	800bab6 <SDMMC_GetResponse>
 800c3f8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d106      	bne.n	800c412 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	0c1b      	lsrs	r3, r3, #16
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c40e:	2300      	movs	r3, #0
 800c410:	e011      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c41c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c420:	e009      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c42c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c430:	e001      	b.n	800c436 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c436:	4618      	mov	r0, r3
 800c438:	3720      	adds	r7, #32
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	20000004 	.word	0x20000004
 800c444:	10624dd3 	.word	0x10624dd3
 800c448:	002000c5 	.word	0x002000c5

0800c44c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c454:	4b22      	ldr	r3, [pc, #136]	; (800c4e0 <SDMMC_GetCmdResp7+0x94>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a22      	ldr	r2, [pc, #136]	; (800c4e4 <SDMMC_GetCmdResp7+0x98>)
 800c45a:	fba2 2303 	umull	r2, r3, r2, r3
 800c45e:	0a5b      	lsrs	r3, r3, #9
 800c460:	f241 3288 	movw	r2, #5000	; 0x1388
 800c464:	fb02 f303 	mul.w	r3, r2, r3
 800c468:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1e5a      	subs	r2, r3, #1
 800c46e:	60fa      	str	r2, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c478:	e02c      	b.n	800c4d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0ef      	beq.n	800c46a <SDMMC_GetCmdResp7+0x1e>
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ea      	bne.n	800c46a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d004      	beq.n	800c4aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2204      	movs	r2, #4
 800c4a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	e014      	b.n	800c4d4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e009      	b.n	800c4d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2240      	movs	r2, #64	; 0x40
 800c4d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4d2:	2300      	movs	r3, #0

}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20000004 	.word	0x20000004
 800c4e4:	10624dd3 	.word	0x10624dd3

0800c4e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4f0:	4b11      	ldr	r3, [pc, #68]	; (800c538 <SDMMC_GetCmdError+0x50>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a11      	ldr	r2, [pc, #68]	; (800c53c <SDMMC_GetCmdError+0x54>)
 800c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fa:	0a5b      	lsrs	r3, r3, #9
 800c4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c500:	fb02 f303 	mul.w	r3, r2, r3
 800c504:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1e5a      	subs	r2, r3, #1
 800c50a:	60fa      	str	r2, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d102      	bne.n	800c516 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c514:	e009      	b.n	800c52a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0f1      	beq.n	800c506 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a06      	ldr	r2, [pc, #24]	; (800c540 <SDMMC_GetCmdError+0x58>)
 800c526:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	20000004 	.word	0x20000004
 800c53c:	10624dd3 	.word	0x10624dd3
 800c540:	002000c5 	.word	0x002000c5

0800c544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c544:	b084      	sub	sp, #16
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	f107 001c 	add.w	r0, r7, #28
 800c552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 fa1c 	bl	800d9a0 <USB_CoreReset>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d106      	bne.n	800c580 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	639a      	str	r2, [r3, #56]	; 0x38
 800c57e:	e005      	b.n	800c58c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c598:	b004      	add	sp, #16
 800c59a:	4770      	bx	lr

0800c59c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d165      	bne.n	800c67c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	4a3e      	ldr	r2, [pc, #248]	; (800c6ac <USB_SetTurnaroundTime+0x110>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d906      	bls.n	800c5c6 <USB_SetTurnaroundTime+0x2a>
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	4a3d      	ldr	r2, [pc, #244]	; (800c6b0 <USB_SetTurnaroundTime+0x114>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d202      	bcs.n	800c5c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c5c0:	230f      	movs	r3, #15
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	e05c      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	4a39      	ldr	r2, [pc, #228]	; (800c6b0 <USB_SetTurnaroundTime+0x114>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d306      	bcc.n	800c5dc <USB_SetTurnaroundTime+0x40>
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4a38      	ldr	r2, [pc, #224]	; (800c6b4 <USB_SetTurnaroundTime+0x118>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d202      	bcs.n	800c5dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c5d6:	230e      	movs	r3, #14
 800c5d8:	617b      	str	r3, [r7, #20]
 800c5da:	e051      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	4a35      	ldr	r2, [pc, #212]	; (800c6b4 <USB_SetTurnaroundTime+0x118>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d306      	bcc.n	800c5f2 <USB_SetTurnaroundTime+0x56>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4a34      	ldr	r2, [pc, #208]	; (800c6b8 <USB_SetTurnaroundTime+0x11c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d202      	bcs.n	800c5f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c5ec:	230d      	movs	r3, #13
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e046      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	4a30      	ldr	r2, [pc, #192]	; (800c6b8 <USB_SetTurnaroundTime+0x11c>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d306      	bcc.n	800c608 <USB_SetTurnaroundTime+0x6c>
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4a2f      	ldr	r2, [pc, #188]	; (800c6bc <USB_SetTurnaroundTime+0x120>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d802      	bhi.n	800c608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c602:	230c      	movs	r3, #12
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	e03b      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	4a2c      	ldr	r2, [pc, #176]	; (800c6bc <USB_SetTurnaroundTime+0x120>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d906      	bls.n	800c61e <USB_SetTurnaroundTime+0x82>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4a2b      	ldr	r2, [pc, #172]	; (800c6c0 <USB_SetTurnaroundTime+0x124>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d802      	bhi.n	800c61e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c618:	230b      	movs	r3, #11
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	e030      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4a27      	ldr	r2, [pc, #156]	; (800c6c0 <USB_SetTurnaroundTime+0x124>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d906      	bls.n	800c634 <USB_SetTurnaroundTime+0x98>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <USB_SetTurnaroundTime+0x128>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d802      	bhi.n	800c634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c62e:	230a      	movs	r3, #10
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	e025      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	4a23      	ldr	r2, [pc, #140]	; (800c6c4 <USB_SetTurnaroundTime+0x128>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d906      	bls.n	800c64a <USB_SetTurnaroundTime+0xae>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	4a22      	ldr	r2, [pc, #136]	; (800c6c8 <USB_SetTurnaroundTime+0x12c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d202      	bcs.n	800c64a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c644:	2309      	movs	r3, #9
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	e01a      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	4a1e      	ldr	r2, [pc, #120]	; (800c6c8 <USB_SetTurnaroundTime+0x12c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d306      	bcc.n	800c660 <USB_SetTurnaroundTime+0xc4>
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4a1d      	ldr	r2, [pc, #116]	; (800c6cc <USB_SetTurnaroundTime+0x130>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d802      	bhi.n	800c660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c65a:	2308      	movs	r3, #8
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	e00f      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4a1a      	ldr	r2, [pc, #104]	; (800c6cc <USB_SetTurnaroundTime+0x130>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d906      	bls.n	800c676 <USB_SetTurnaroundTime+0xda>
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4a19      	ldr	r2, [pc, #100]	; (800c6d0 <USB_SetTurnaroundTime+0x134>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d202      	bcs.n	800c676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c670:	2307      	movs	r3, #7
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e004      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c676:	2306      	movs	r3, #6
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	e001      	b.n	800c680 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c67c:	2309      	movs	r3, #9
 800c67e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	029b      	lsls	r3, r3, #10
 800c694:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c698:	431a      	orrs	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	00d8acbf 	.word	0x00d8acbf
 800c6b0:	00e4e1c0 	.word	0x00e4e1c0
 800c6b4:	00f42400 	.word	0x00f42400
 800c6b8:	01067380 	.word	0x01067380
 800c6bc:	011a499f 	.word	0x011a499f
 800c6c0:	01312cff 	.word	0x01312cff
 800c6c4:	014ca43f 	.word	0x014ca43f
 800c6c8:	016e3600 	.word	0x016e3600
 800c6cc:	01a6ab1f 	.word	0x01a6ab1f
 800c6d0:	01e84800 	.word	0x01e84800

0800c6d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f043 0201 	orr.w	r2, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	370c      	adds	r7, #12
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	f023 0201 	bic.w	r2, r3, #1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c724:	2300      	movs	r3, #0
 800c726:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c734:	78fb      	ldrb	r3, [r7, #3]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d115      	bne.n	800c766 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c746:	2001      	movs	r0, #1
 800c748:	f7f6 f9dc 	bl	8002b04 <HAL_Delay>
      ms++;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3301      	adds	r3, #1
 800c750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f8ab 	bl	800d8ae <USB_GetMode>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d01e      	beq.n	800c79c <USB_SetCurrentMode+0x84>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b31      	cmp	r3, #49	; 0x31
 800c762:	d9f0      	bls.n	800c746 <USB_SetCurrentMode+0x2e>
 800c764:	e01a      	b.n	800c79c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c766:	78fb      	ldrb	r3, [r7, #3]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d115      	bne.n	800c798 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c778:	2001      	movs	r0, #1
 800c77a:	f7f6 f9c3 	bl	8002b04 <HAL_Delay>
      ms++;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3301      	adds	r3, #1
 800c782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f001 f892 	bl	800d8ae <USB_GetMode>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <USB_SetCurrentMode+0x84>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b31      	cmp	r3, #49	; 0x31
 800c794:	d9f0      	bls.n	800c778 <USB_SetCurrentMode+0x60>
 800c796:	e001      	b.n	800c79c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e005      	b.n	800c7a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b32      	cmp	r3, #50	; 0x32
 800c7a0:	d101      	bne.n	800c7a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b086      	sub	sp, #24
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c7be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	e009      	b.n	800c7e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	3340      	adds	r3, #64	; 0x40
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	2200      	movs	r2, #0
 800c7dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	613b      	str	r3, [r7, #16]
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2b0e      	cmp	r3, #14
 800c7e8:	d9f2      	bls.n	800c7d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d11c      	bne.n	800c82a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7fe:	f043 0302 	orr.w	r3, r3, #2
 800c802:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c808:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	e005      	b.n	800c836 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c83c:	461a      	mov	r2, r3
 800c83e:	2300      	movs	r3, #0
 800c840:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c842:	2103      	movs	r1, #3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f959 	bl	800cafc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c84a:	2110      	movs	r1, #16
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f8f1 	bl	800ca34 <USB_FlushTxFifo>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f91d 	bl	800ca9c <USB_FlushRxFifo>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c872:	461a      	mov	r2, r3
 800c874:	2300      	movs	r3, #0
 800c876:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87e:	461a      	mov	r2, r3
 800c880:	2300      	movs	r3, #0
 800c882:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88a:	461a      	mov	r2, r3
 800c88c:	2300      	movs	r3, #0
 800c88e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c890:	2300      	movs	r3, #0
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	e043      	b.n	800c91e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	015a      	lsls	r2, r3, #5
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4413      	add	r3, r2
 800c89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8ac:	d118      	bne.n	800c8e0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	e013      	b.n	800c8f2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	e008      	b.n	800c8f2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	015a      	lsls	r2, r3, #5
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fe:	461a      	mov	r2, r3
 800c900:	2300      	movs	r3, #0
 800c902:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c910:	461a      	mov	r2, r3
 800c912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	3301      	adds	r3, #1
 800c91c:	613b      	str	r3, [r7, #16]
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	429a      	cmp	r2, r3
 800c924:	d3b7      	bcc.n	800c896 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	613b      	str	r3, [r7, #16]
 800c92a:	e043      	b.n	800c9b4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4413      	add	r3, r2
 800c934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c93e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c942:	d118      	bne.n	800c976 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10a      	bne.n	800c960 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c956:	461a      	mov	r2, r3
 800c958:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	e013      	b.n	800c988 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96c:	461a      	mov	r2, r3
 800c96e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	e008      	b.n	800c988 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	015a      	lsls	r2, r3, #5
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	4413      	add	r3, r2
 800c97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c982:	461a      	mov	r2, r3
 800c984:	2300      	movs	r3, #0
 800c986:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	015a      	lsls	r2, r3, #5
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4413      	add	r3, r2
 800c990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c994:	461a      	mov	r2, r3
 800c996:	2300      	movs	r3, #0
 800c998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d3b7      	bcc.n	800c92c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c9dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	f043 0210 	orr.w	r2, r3, #16
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <USB_DevInit+0x280>)
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d005      	beq.n	800ca08 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	f043 0208 	orr.w	r2, r3, #8
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ca08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d107      	bne.n	800ca1e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca16:	f043 0304 	orr.w	r3, r3, #4
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca2a:	b004      	add	sp, #16
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	803c3800 	.word	0x803c3800

0800ca34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3301      	adds	r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4a13      	ldr	r2, [pc, #76]	; (800ca98 <USB_FlushTxFifo+0x64>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d901      	bls.n	800ca54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e01b      	b.n	800ca8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	daf2      	bge.n	800ca42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	019b      	lsls	r3, r3, #6
 800ca64:	f043 0220 	orr.w	r2, r3, #32
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	4a08      	ldr	r2, [pc, #32]	; (800ca98 <USB_FlushTxFifo+0x64>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d901      	bls.n	800ca7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ca7a:	2303      	movs	r3, #3
 800ca7c:	e006      	b.n	800ca8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	f003 0320 	and.w	r3, r3, #32
 800ca86:	2b20      	cmp	r3, #32
 800ca88:	d0f0      	beq.n	800ca6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	00030d40 	.word	0x00030d40

0800ca9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800caa4:	2300      	movs	r3, #0
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3301      	adds	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4a11      	ldr	r2, [pc, #68]	; (800caf8 <USB_FlushRxFifo+0x5c>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d901      	bls.n	800caba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e018      	b.n	800caec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	daf2      	bge.n	800caa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2210      	movs	r2, #16
 800caca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4a08      	ldr	r2, [pc, #32]	; (800caf8 <USB_FlushRxFifo+0x5c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d901      	bls.n	800cade <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cada:	2303      	movs	r3, #3
 800cadc:	e006      	b.n	800caec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d0f0      	beq.n	800cacc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	00030d40 	.word	0x00030d40

0800cafc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	68f9      	ldr	r1, [r7, #12]
 800cb18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b087      	sub	sp, #28
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f003 0306 	and.w	r3, r3, #6
 800cb46:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d002      	beq.n	800cb54 <USB_GetDevSpeed+0x26>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2b06      	cmp	r3, #6
 800cb52:	d102      	bne.n	800cb5a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cb54:	2302      	movs	r3, #2
 800cb56:	75fb      	strb	r3, [r7, #23]
 800cb58:	e001      	b.n	800cb5e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cb5a:	230f      	movs	r3, #15
 800cb5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	371c      	adds	r7, #28
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	785b      	ldrb	r3, [r3, #1]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d13a      	bne.n	800cbfe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb8e:	69da      	ldr	r2, [r3, #28]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 030f 	and.w	r3, r3, #15
 800cb98:	2101      	movs	r1, #1
 800cb9a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba6:	4313      	orrs	r3, r2
 800cba8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d155      	bne.n	800cc6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	059b      	lsls	r3, r3, #22
 800cbe2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	e036      	b.n	800cc6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	69da      	ldr	r2, [r3, #28]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	f003 030f 	and.w	r3, r3, #15
 800cc0e:	2101      	movs	r1, #1
 800cc10:	fa01 f303 	lsl.w	r3, r1, r3
 800cc14:	041b      	lsls	r3, r3, #16
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d11a      	bne.n	800cc6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	791b      	ldrb	r3, [r3, #4]
 800cc50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc52:	430b      	orrs	r3, r1
 800cc54:	4313      	orrs	r3, r2
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	0151      	lsls	r1, r2, #5
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	440a      	add	r2, r1
 800cc5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d161      	bne.n	800cd5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccae:	d11f      	bne.n	800ccf0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	0151      	lsls	r1, r2, #5
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	440a      	add	r2, r1
 800ccc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	0151      	lsls	r1, r2, #5
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	440a      	add	r2, r1
 800cce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 030f 	and.w	r3, r3, #15
 800cd00:	2101      	movs	r1, #1
 800cd02:	fa01 f303 	lsl.w	r3, r1, r3
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	43db      	mvns	r3, r3
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd10:	4013      	ands	r3, r2
 800cd12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd1a:	69da      	ldr	r2, [r3, #28]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	2101      	movs	r1, #1
 800cd26:	fa01 f303 	lsl.w	r3, r1, r3
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	43db      	mvns	r3, r3
 800cd2e:	68f9      	ldr	r1, [r7, #12]
 800cd30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd34:	4013      	ands	r3, r2
 800cd36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	015a      	lsls	r2, r3, #5
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	0159      	lsls	r1, r3, #5
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	440b      	add	r3, r1
 800cd4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd52:	4619      	mov	r1, r3
 800cd54:	4b35      	ldr	r3, [pc, #212]	; (800ce2c <USB_DeactivateEndpoint+0x1b0>)
 800cd56:	4013      	ands	r3, r2
 800cd58:	600b      	str	r3, [r1, #0]
 800cd5a:	e060      	b.n	800ce1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd72:	d11f      	bne.n	800cdb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	0151      	lsls	r1, r2, #5
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	440a      	add	r2, r1
 800cdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cdb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	f003 030f 	and.w	r3, r3, #15
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdca:	041b      	lsls	r3, r3, #16
 800cdcc:	43db      	mvns	r3, r3
 800cdce:	68f9      	ldr	r1, [r7, #12]
 800cdd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdde:	69da      	ldr	r2, [r3, #28]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	f003 030f 	and.w	r3, r3, #15
 800cde8:	2101      	movs	r1, #1
 800cdea:	fa01 f303 	lsl.w	r3, r1, r3
 800cdee:	041b      	lsls	r3, r3, #16
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	68f9      	ldr	r1, [r7, #12]
 800cdf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	015a      	lsls	r2, r3, #5
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4413      	add	r3, r2
 800ce04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	0159      	lsls	r1, r3, #5
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	440b      	add	r3, r1
 800ce12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce16:	4619      	mov	r1, r3
 800ce18:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <USB_DeactivateEndpoint+0x1b4>)
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	ec337800 	.word	0xec337800
 800ce30:	eff37800 	.word	0xeff37800

0800ce34 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	785b      	ldrb	r3, [r3, #1]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	f040 8128 	bne.w	800d0a2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d132      	bne.n	800cec0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	0151      	lsls	r1, r2, #5
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	440a      	add	r2, r1
 800ce70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	693a      	ldr	r2, [r7, #16]
 800ce8e:	0151      	lsls	r1, r2, #5
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	440a      	add	r2, r1
 800ce94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	015a      	lsls	r2, r3, #5
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	4413      	add	r3, r2
 800cea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	0151      	lsls	r1, r2, #5
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	440a      	add	r2, r1
 800ceb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb8:	0cdb      	lsrs	r3, r3, #19
 800ceba:	04db      	lsls	r3, r3, #19
 800cebc:	6113      	str	r3, [r2, #16]
 800cebe:	e092      	b.n	800cfe6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	015a      	lsls	r2, r3, #5
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	4413      	add	r3, r2
 800cec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	0151      	lsls	r1, r2, #5
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	440a      	add	r2, r1
 800ced6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceda:	0cdb      	lsrs	r3, r3, #19
 800cedc:	04db      	lsls	r3, r3, #19
 800cede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	0151      	lsls	r1, r2, #5
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	440a      	add	r2, r1
 800cef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cefa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cefe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d11a      	bne.n	800cf40 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	691a      	ldr	r2, [r3, #16]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d903      	bls.n	800cf1e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	689a      	ldr	r2, [r3, #8]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf3c:	6113      	str	r3, [r2, #16]
 800cf3e:	e01b      	b.n	800cf78 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	6919      	ldr	r1, [r3, #16]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	440b      	add	r3, r1
 800cf58:	1e59      	subs	r1, r3, #1
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf62:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cf64:	4b8d      	ldr	r3, [pc, #564]	; (800d19c <USB_EPStartXfer+0x368>)
 800cf66:	400b      	ands	r3, r1
 800cf68:	6939      	ldr	r1, [r7, #16]
 800cf6a:	0148      	lsls	r0, r1, #5
 800cf6c:	6979      	ldr	r1, [r7, #20]
 800cf6e:	4401      	add	r1, r0
 800cf70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf74:	4313      	orrs	r3, r2
 800cf76:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	691a      	ldr	r2, [r3, #16]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf8e:	6939      	ldr	r1, [r7, #16]
 800cf90:	0148      	lsls	r0, r1, #5
 800cf92:	6979      	ldr	r1, [r7, #20]
 800cf94:	4401      	add	r1, r0
 800cf96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	791b      	ldrb	r3, [r3, #4]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d11f      	bne.n	800cfe6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	015a      	lsls	r2, r3, #5
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	4413      	add	r3, r2
 800cfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	0151      	lsls	r1, r2, #5
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	440a      	add	r2, r1
 800cfbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cfc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	693a      	ldr	r2, [r7, #16]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfe4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d004:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	791b      	ldrb	r3, [r3, #4]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d015      	beq.n	800d03a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 8139 	beq.w	800d28a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	f003 030f 	and.w	r3, r3, #15
 800d028:	2101      	movs	r1, #1
 800d02a:	fa01 f303 	lsl.w	r3, r1, r3
 800d02e:	6979      	ldr	r1, [r7, #20]
 800d030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d034:	4313      	orrs	r3, r2
 800d036:	634b      	str	r3, [r1, #52]	; 0x34
 800d038:	e127      	b.n	800d28a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d046:	2b00      	cmp	r3, #0
 800d048:	d110      	bne.n	800d06c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	015a      	lsls	r2, r3, #5
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	0151      	lsls	r1, r2, #5
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	440a      	add	r2, r1
 800d060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	e00f      	b.n	800d08c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d08a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	68d9      	ldr	r1, [r3, #12]
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781a      	ldrb	r2, [r3, #0]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f9a6 	bl	800d3ec <USB_WritePacket>
 800d0a0:	e0f3      	b.n	800d28a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	015a      	lsls	r2, r3, #5
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	0151      	lsls	r1, r2, #5
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	440a      	add	r2, r1
 800d0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0bc:	0cdb      	lsrs	r3, r3, #19
 800d0be:	04db      	lsls	r3, r3, #19
 800d0c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	0151      	lsls	r1, r2, #5
 800d0d4:	697a      	ldr	r2, [r7, #20]
 800d0d6:	440a      	add	r2, r1
 800d0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d0e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d0e4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d12f      	bne.n	800d14c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d003      	beq.n	800d0fc <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	689a      	ldr	r2, [r3, #8]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	689a      	ldr	r2, [r3, #8]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	015a      	lsls	r2, r3, #5
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d110:	691a      	ldr	r2, [r3, #16]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	6a1b      	ldr	r3, [r3, #32]
 800d116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	0148      	lsls	r0, r1, #5
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	4401      	add	r1, r0
 800d122:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d126:	4313      	orrs	r3, r2
 800d128:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	015a      	lsls	r2, r3, #5
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	4413      	add	r3, r2
 800d132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	0151      	lsls	r1, r2, #5
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	440a      	add	r2, r1
 800d140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d148:	6113      	str	r3, [r2, #16]
 800d14a:	e061      	b.n	800d210 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d125      	bne.n	800d1a0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	015a      	lsls	r2, r3, #5
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	4413      	add	r3, r2
 800d15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d160:	691a      	ldr	r2, [r3, #16]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d16a:	6939      	ldr	r1, [r7, #16]
 800d16c:	0148      	lsls	r0, r1, #5
 800d16e:	6979      	ldr	r1, [r7, #20]
 800d170:	4401      	add	r1, r0
 800d172:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d176:	4313      	orrs	r3, r2
 800d178:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	015a      	lsls	r2, r3, #5
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	4413      	add	r3, r2
 800d182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	693a      	ldr	r2, [r7, #16]
 800d18a:	0151      	lsls	r1, r2, #5
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	440a      	add	r2, r1
 800d190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d198:	6113      	str	r3, [r2, #16]
 800d19a:	e039      	b.n	800d210 <USB_EPStartXfer+0x3dc>
 800d19c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	691a      	ldr	r2, [r3, #16]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	1e5a      	subs	r2, r3, #1
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	89fa      	ldrh	r2, [r7, #14]
 800d1bc:	fb03 f202 	mul.w	r2, r3, r2
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	691a      	ldr	r2, [r3, #16]
 800d1d2:	89fb      	ldrh	r3, [r7, #14]
 800d1d4:	04d9      	lsls	r1, r3, #19
 800d1d6:	4b2f      	ldr	r3, [pc, #188]	; (800d294 <USB_EPStartXfer+0x460>)
 800d1d8:	400b      	ands	r3, r1
 800d1da:	6939      	ldr	r1, [r7, #16]
 800d1dc:	0148      	lsls	r0, r1, #5
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	4401      	add	r1, r0
 800d1e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f6:	691a      	ldr	r2, [r3, #16]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	6a1b      	ldr	r3, [r3, #32]
 800d1fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d200:	6939      	ldr	r1, [r7, #16]
 800d202:	0148      	lsls	r0, r1, #5
 800d204:	6979      	ldr	r1, [r7, #20]
 800d206:	4401      	add	r1, r0
 800d208:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d20c:	4313      	orrs	r3, r2
 800d20e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	791b      	ldrb	r3, [r3, #4]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d128      	bne.n	800d26a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d224:	2b00      	cmp	r3, #0
 800d226:	d110      	bne.n	800d24a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	0151      	lsls	r1, r2, #5
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	440a      	add	r2, r1
 800d23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	e00f      	b.n	800d26a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	015a      	lsls	r2, r3, #5
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	4413      	add	r3, r2
 800d252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	0151      	lsls	r1, r2, #5
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	440a      	add	r2, r1
 800d260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d268:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	015a      	lsls	r2, r3, #5
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	4413      	add	r3, r2
 800d272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	0151      	lsls	r1, r2, #5
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	440a      	add	r2, r1
 800d280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	1ff80000 	.word	0x1ff80000

0800d298 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	785b      	ldrb	r3, [r3, #1]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d14a      	bne.n	800d34c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	015a      	lsls	r2, r3, #5
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	4413      	add	r3, r2
 800d2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2ce:	f040 8086 	bne.w	800d3de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	7812      	ldrb	r2, [r2, #0]
 800d2e6:	0151      	lsls	r1, r2, #5
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	440a      	add	r2, r1
 800d2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	7812      	ldrb	r2, [r2, #0]
 800d30a:	0151      	lsls	r1, r2, #5
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	440a      	add	r2, r1
 800d310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f242 7210 	movw	r2, #10000	; 0x2710
 800d326:	4293      	cmp	r3, r2
 800d328:	d902      	bls.n	800d330 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	75fb      	strb	r3, [r7, #23]
          break;
 800d32e:	e056      	b.n	800d3de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d348:	d0e7      	beq.n	800d31a <USB_EPStopXfer+0x82>
 800d34a:	e048      	b.n	800d3de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d364:	d13b      	bne.n	800d3de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	7812      	ldrb	r2, [r2, #0]
 800d37a:	0151      	lsls	r1, r2, #5
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	440a      	add	r2, r1
 800d380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d384:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d388:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	015a      	lsls	r2, r3, #5
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	4413      	add	r3, r2
 800d394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	7812      	ldrb	r2, [r2, #0]
 800d39e:	0151      	lsls	r1, r2, #5
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	440a      	add	r2, r1
 800d3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d902      	bls.n	800d3c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d3c2:	e00c      	b.n	800d3de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	015a      	lsls	r2, r3, #5
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3dc:	d0e7      	beq.n	800d3ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	371c      	adds	r7, #28
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b089      	sub	sp, #36	; 0x24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	71fb      	strb	r3, [r7, #7]
 800d3fe:	4613      	mov	r3, r2
 800d400:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d40a:	88bb      	ldrh	r3, [r7, #4]
 800d40c:	3303      	adds	r3, #3
 800d40e:	089b      	lsrs	r3, r3, #2
 800d410:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d412:	2300      	movs	r3, #0
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	e018      	b.n	800d44a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	031a      	lsls	r2, r3, #12
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d424:	461a      	mov	r2, r3
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	3301      	adds	r3, #1
 800d430:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	3301      	adds	r3, #1
 800d436:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	3301      	adds	r3, #1
 800d43c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	3301      	adds	r3, #1
 800d442:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	3301      	adds	r3, #1
 800d448:	61bb      	str	r3, [r7, #24]
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d3e2      	bcc.n	800d418 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3724      	adds	r7, #36	; 0x24
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d460:	b480      	push	{r7}
 800d462:	b08b      	sub	sp, #44	; 0x2c
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d476:	88fb      	ldrh	r3, [r7, #6]
 800d478:	089b      	lsrs	r3, r3, #2
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d47e:	88fb      	ldrh	r3, [r7, #6]
 800d480:	f003 0303 	and.w	r3, r3, #3
 800d484:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d486:	2300      	movs	r3, #0
 800d488:	623b      	str	r3, [r7, #32]
 800d48a:	e014      	b.n	800d4b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	601a      	str	r2, [r3, #0]
    pDest++;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	3301      	adds	r3, #1
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	623b      	str	r3, [r7, #32]
 800d4b6:	6a3a      	ldr	r2, [r7, #32]
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d3e6      	bcc.n	800d48c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d4be:	8bfb      	ldrh	r3, [r7, #30]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d01e      	beq.n	800d502 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	f107 0310 	add.w	r3, r7, #16
 800d4d4:	6812      	ldr	r2, [r2, #0]
 800d4d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	701a      	strb	r2, [r3, #0]
      i++;
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	623b      	str	r3, [r7, #32]
      pDest++;
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d4f6:	8bfb      	ldrh	r3, [r7, #30]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d4fc:	8bfb      	ldrh	r3, [r7, #30]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1ea      	bne.n	800d4d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d504:	4618      	mov	r0, r3
 800d506:	372c      	adds	r7, #44	; 0x2c
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	785b      	ldrb	r3, [r3, #1]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d12c      	bne.n	800d586 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	015a      	lsls	r2, r3, #5
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	db12      	blt.n	800d564 <USB_EPSetStall+0x54>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00f      	beq.n	800d564 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	0151      	lsls	r1, r2, #5
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	440a      	add	r2, r1
 800d55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d55e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d562:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	0151      	lsls	r1, r2, #5
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	440a      	add	r2, r1
 800d57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d57e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	e02b      	b.n	800d5de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	015a      	lsls	r2, r3, #5
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	4413      	add	r3, r2
 800d58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	db12      	blt.n	800d5be <USB_EPSetStall+0xae>
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00f      	beq.n	800d5be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	0151      	lsls	r1, r2, #5
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	440a      	add	r2, r1
 800d5b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	0151      	lsls	r1, r2, #5
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	440a      	add	r2, r1
 800d5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	785b      	ldrb	r3, [r3, #1]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d128      	bne.n	800d65a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	015a      	lsls	r2, r3, #5
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	4413      	add	r3, r2
 800d610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	0151      	lsls	r1, r2, #5
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	440a      	add	r2, r1
 800d61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d626:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	791b      	ldrb	r3, [r3, #4]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d003      	beq.n	800d638 <USB_EPClearStall+0x4c>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	791b      	ldrb	r3, [r3, #4]
 800d634:	2b02      	cmp	r3, #2
 800d636:	d138      	bne.n	800d6aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	015a      	lsls	r2, r3, #5
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	0151      	lsls	r1, r2, #5
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	440a      	add	r2, r1
 800d64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	e027      	b.n	800d6aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	015a      	lsls	r2, r3, #5
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	4413      	add	r3, r2
 800d662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	0151      	lsls	r1, r2, #5
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	440a      	add	r2, r1
 800d670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d678:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	791b      	ldrb	r3, [r3, #4]
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d003      	beq.n	800d68a <USB_EPClearStall+0x9e>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	791b      	ldrb	r3, [r3, #4]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d10f      	bne.n	800d6aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	015a      	lsls	r2, r3, #5
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	4413      	add	r3, r2
 800d692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	0151      	lsls	r1, r2, #5
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	440a      	add	r2, r1
 800d6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d6da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	78fb      	ldrb	r3, [r7, #3]
 800d6e6:	011b      	lsls	r3, r3, #4
 800d6e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d6ec:	68f9      	ldr	r1, [r7, #12]
 800d6ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d71e:	f023 0303 	bic.w	r3, r3, #3
 800d722:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d732:	f023 0302 	bic.w	r3, r3, #2
 800d736:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d746:	b480      	push	{r7}
 800d748:	b085      	sub	sp, #20
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d760:	f023 0303 	bic.w	r3, r3, #3
 800d764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d774:	f043 0302 	orr.w	r3, r3, #2
 800d778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	4013      	ands	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ae:	b480      	push	{r7}
 800d7b0:	b085      	sub	sp, #20
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	0c1b      	lsrs	r3, r3, #16
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr

0800d7e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e2:	b480      	push	{r7}
 800d7e4:	b085      	sub	sp, #20
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	4013      	ands	r3, r2
 800d804:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	b29b      	uxth	r3, r3
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d826:	78fb      	ldrb	r3, [r7, #3]
 800d828:	015a      	lsls	r2, r3, #5
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	4413      	add	r3, r2
 800d82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	4013      	ands	r3, r2
 800d842:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d844:	68bb      	ldr	r3, [r7, #8]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d852:	b480      	push	{r7}
 800d854:	b087      	sub	sp, #28
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	460b      	mov	r3, r1
 800d85c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d874:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	fa22 f303 	lsr.w	r3, r2, r3
 800d882:	01db      	lsls	r3, r3, #7
 800d884:	b2db      	uxtb	r3, r3
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	4313      	orrs	r3, r2
 800d88a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d88c:	78fb      	ldrb	r3, [r7, #3]
 800d88e:	015a      	lsls	r2, r3, #5
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	4413      	add	r3, r2
 800d894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	4013      	ands	r3, r2
 800d89e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	371c      	adds	r7, #28
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	695b      	ldr	r3, [r3, #20]
 800d8ba:	f003 0301 	and.w	r3, r3, #1
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b085      	sub	sp, #20
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d8e8:	f023 0307 	bic.w	r3, r3, #7
 800d8ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	333c      	adds	r3, #60	; 0x3c
 800d922:	3304      	adds	r3, #4
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	4a1c      	ldr	r2, [pc, #112]	; (800d99c <USB_EP0_OutStart+0x8c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d90a      	bls.n	800d946 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d93c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d940:	d101      	bne.n	800d946 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	e024      	b.n	800d990 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94c:	461a      	mov	r2, r3
 800d94e:	2300      	movs	r3, #0
 800d950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d974:	f043 0318 	orr.w	r3, r3, #24
 800d978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d988:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d98c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	4f54300a 	.word	0x4f54300a

0800d9a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4a13      	ldr	r2, [pc, #76]	; (800da04 <USB_CoreReset+0x64>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d901      	bls.n	800d9be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e01b      	b.n	800d9f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	daf2      	bge.n	800d9ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	f043 0201 	orr.w	r2, r3, #1
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4a09      	ldr	r2, [pc, #36]	; (800da04 <USB_CoreReset+0x64>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d901      	bls.n	800d9e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	e006      	b.n	800d9f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d0f0      	beq.n	800d9d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	00030d40 	.word	0x00030d40

0800da08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da0c:	4904      	ldr	r1, [pc, #16]	; (800da20 <MX_FATFS_Init+0x18>)
 800da0e:	4805      	ldr	r0, [pc, #20]	; (800da24 <MX_FATFS_Init+0x1c>)
 800da10:	f002 fa54 	bl	800febc <FATFS_LinkDriver>
 800da14:	4603      	mov	r3, r0
 800da16:	461a      	mov	r2, r3
 800da18:	4b03      	ldr	r3, [pc, #12]	; (800da28 <MX_FATFS_Init+0x20>)
 800da1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800da1c:	bf00      	nop
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	20000d08 	.word	0x20000d08
 800da24:	080139b0 	.word	0x080139b0
 800da28:	20000d04 	.word	0x20000d04

0800da2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800da36:	f000 f885 	bl	800db44 <BSP_SD_IsDetected>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d001      	beq.n	800da44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800da40:	2302      	movs	r3, #2
 800da42:	e012      	b.n	800da6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800da44:	480b      	ldr	r0, [pc, #44]	; (800da74 <BSP_SD_Init+0x48>)
 800da46:	f7f9 feb5 	bl	80077b4 <HAL_SD_Init>
 800da4a:	4603      	mov	r3, r0
 800da4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800da4e:	79fb      	ldrb	r3, [r7, #7]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800da54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800da58:	4806      	ldr	r0, [pc, #24]	; (800da74 <BSP_SD_Init+0x48>)
 800da5a:	f7fa fd69 	bl	8008530 <HAL_SD_ConfigWideBusOperation>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800da68:	79fb      	ldrb	r3, [r7, #7]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	20000398 	.word	0x20000398

0800da78 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	68f9      	ldr	r1, [r7, #12]
 800da8e:	4806      	ldr	r0, [pc, #24]	; (800daa8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800da90:	f7f9 ffb8 	bl	8007a04 <HAL_SD_ReadBlocks_DMA>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20000398 	.word	0x20000398

0800daac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	68f9      	ldr	r1, [r7, #12]
 800dac2:	4806      	ldr	r0, [pc, #24]	; (800dadc <BSP_SD_WriteBlocks_DMA+0x30>)
 800dac4:	f7fa f846 	bl	8007b54 <HAL_SD_WriteBlocks_DMA>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3718      	adds	r7, #24
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20000398 	.word	0x20000398

0800dae0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dae4:	4805      	ldr	r0, [pc, #20]	; (800dafc <BSP_SD_GetCardState+0x1c>)
 800dae6:	f7fa fe37 	bl	8008758 <HAL_SD_GetCardState>
 800daea:	4603      	mov	r3, r0
 800daec:	2b04      	cmp	r3, #4
 800daee:	bf14      	ite	ne
 800daf0:	2301      	movne	r3, #1
 800daf2:	2300      	moveq	r3, #0
 800daf4:	b2db      	uxtb	r3, r3
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000398 	.word	0x20000398

0800db00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	4803      	ldr	r0, [pc, #12]	; (800db18 <BSP_SD_GetCardInfo+0x18>)
 800db0c:	f7fa fce4 	bl	80084d8 <HAL_SD_GetCardInfo>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20000398 	.word	0x20000398

0800db1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800db24:	f000 f99e 	bl	800de64 <BSP_SD_WriteCpltCallback>
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db38:	f000 f9a0 	bl	800de7c <BSP_SD_ReadCpltCallback>
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db4a:	2301      	movs	r3, #1
 800db4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800db4e:	f000 f80b 	bl	800db68 <BSP_PlatformIsDetected>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800db58:	2300      	movs	r3, #0
 800db5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800db5c:	79fb      	ldrb	r3, [r7, #7]
 800db5e:	b2db      	uxtb	r3, r3
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800db6e:	2301      	movs	r3, #1
 800db70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800db72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db7a:	f7f5 fdb9 	bl	80036f0 <HAL_GPIO_ReadPin>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b01      	cmp	r3, #1
 800db82:	d001      	beq.n	800db88 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800db84:	2300      	movs	r3, #0
 800db86:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800db88:	79fb      	ldrb	r3, [r7, #7]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800db9a:	f7f4 ffa7 	bl	8002aec <HAL_GetTick>
 800db9e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dba0:	e006      	b.n	800dbb0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dba2:	f7ff ff9d 	bl	800dae0 <BSP_SD_GetCardState>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e009      	b.n	800dbc4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dbb0:	f7f4 ff9c 	bl	8002aec <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d8f0      	bhi.n	800dba2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dbc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dbd6:	4b0b      	ldr	r3, [pc, #44]	; (800dc04 <SD_CheckStatus+0x38>)
 800dbd8:	2201      	movs	r2, #1
 800dbda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dbdc:	f7ff ff80 	bl	800dae0 <BSP_SD_GetCardState>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d107      	bne.n	800dbf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dbe6:	4b07      	ldr	r3, [pc, #28]	; (800dc04 <SD_CheckStatus+0x38>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	f023 0301 	bic.w	r3, r3, #1
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	4b04      	ldr	r3, [pc, #16]	; (800dc04 <SD_CheckStatus+0x38>)
 800dbf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dbf6:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <SD_CheckStatus+0x38>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	b2db      	uxtb	r3, r3
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	2000000d 	.word	0x2000000d

0800dc08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dc12:	f7ff ff0b 	bl	800da2c <BSP_SD_Init>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d107      	bne.n	800dc2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff ffd4 	bl	800dbcc <SD_CheckStatus>
 800dc24:	4603      	mov	r3, r0
 800dc26:	461a      	mov	r2, r3
 800dc28:	4b04      	ldr	r3, [pc, #16]	; (800dc3c <SD_initialize+0x34>)
 800dc2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dc2c:	4b03      	ldr	r3, [pc, #12]	; (800dc3c <SD_initialize+0x34>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	b2db      	uxtb	r3, r3
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	2000000d 	.word	0x2000000d

0800dc40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff ffbd 	bl	800dbcc <SD_CheckStatus>
 800dc52:	4603      	mov	r3, r0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dc70:	f247 5030 	movw	r0, #30000	; 0x7530
 800dc74:	f7ff ff8d 	bl	800db92 <SD_CheckStatusWithTimeout>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	da01      	bge.n	800dc82 <SD_read+0x26>
  {
    return res;
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	e03b      	b.n	800dcfa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	68b8      	ldr	r0, [r7, #8]
 800dc88:	f7ff fef6 	bl	800da78 <BSP_SD_ReadBlocks_DMA>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d132      	bne.n	800dcf8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dc92:	4b1c      	ldr	r3, [pc, #112]	; (800dd04 <SD_read+0xa8>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dc98:	f7f4 ff28 	bl	8002aec <HAL_GetTick>
 800dc9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dc9e:	bf00      	nop
 800dca0:	4b18      	ldr	r3, [pc, #96]	; (800dd04 <SD_read+0xa8>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d108      	bne.n	800dcba <SD_read+0x5e>
 800dca8:	f7f4 ff20 	bl	8002aec <HAL_GetTick>
 800dcac:	4602      	mov	r2, r0
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d9f2      	bls.n	800dca0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800dcba:	4b12      	ldr	r3, [pc, #72]	; (800dd04 <SD_read+0xa8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d102      	bne.n	800dcc8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	75fb      	strb	r3, [r7, #23]
 800dcc6:	e017      	b.n	800dcf8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800dcc8:	4b0e      	ldr	r3, [pc, #56]	; (800dd04 <SD_read+0xa8>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dcce:	f7f4 ff0d 	bl	8002aec <HAL_GetTick>
 800dcd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dcd4:	e007      	b.n	800dce6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dcd6:	f7ff ff03 	bl	800dae0 <BSP_SD_GetCardState>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d102      	bne.n	800dce6 <SD_read+0x8a>
          {
            res = RES_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dce4:	e008      	b.n	800dcf8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dce6:	f7f4 ff01 	bl	8002aec <HAL_GetTick>
 800dcea:	4602      	mov	r2, r0
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d9ee      	bls.n	800dcd6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20000d10 	.word	0x20000d10

0800dd08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	607a      	str	r2, [r7, #4]
 800dd12:	603b      	str	r3, [r7, #0]
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800dd1c:	4b24      	ldr	r3, [pc, #144]	; (800ddb0 <SD_write+0xa8>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd22:	f247 5030 	movw	r0, #30000	; 0x7530
 800dd26:	f7ff ff34 	bl	800db92 <SD_CheckStatusWithTimeout>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	da01      	bge.n	800dd34 <SD_write+0x2c>
  {
    return res;
 800dd30:	7dfb      	ldrb	r3, [r7, #23]
 800dd32:	e038      	b.n	800dda6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	6879      	ldr	r1, [r7, #4]
 800dd38:	68b8      	ldr	r0, [r7, #8]
 800dd3a:	f7ff feb7 	bl	800daac <BSP_SD_WriteBlocks_DMA>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d12f      	bne.n	800dda4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dd44:	f7f4 fed2 	bl	8002aec <HAL_GetTick>
 800dd48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd4a:	bf00      	nop
 800dd4c:	4b18      	ldr	r3, [pc, #96]	; (800ddb0 <SD_write+0xa8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d108      	bne.n	800dd66 <SD_write+0x5e>
 800dd54:	f7f4 feca 	bl	8002aec <HAL_GetTick>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d9f2      	bls.n	800dd4c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800dd66:	4b12      	ldr	r3, [pc, #72]	; (800ddb0 <SD_write+0xa8>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d102      	bne.n	800dd74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	75fb      	strb	r3, [r7, #23]
 800dd72:	e017      	b.n	800dda4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800dd74:	4b0e      	ldr	r3, [pc, #56]	; (800ddb0 <SD_write+0xa8>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dd7a:	f7f4 feb7 	bl	8002aec <HAL_GetTick>
 800dd7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd80:	e007      	b.n	800dd92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd82:	f7ff fead 	bl	800dae0 <BSP_SD_GetCardState>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <SD_write+0x8a>
          {
            res = RES_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	75fb      	strb	r3, [r7, #23]
            break;
 800dd90:	e008      	b.n	800dda4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd92:	f7f4 feab 	bl	8002aec <HAL_GetTick>
 800dd96:	4602      	mov	r2, r0
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d9ee      	bls.n	800dd82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3718      	adds	r7, #24
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	20000d0c 	.word	0x20000d0c

0800ddb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08c      	sub	sp, #48	; 0x30
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	603a      	str	r2, [r7, #0]
 800ddbe:	71fb      	strb	r3, [r7, #7]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ddca:	4b25      	ldr	r3, [pc, #148]	; (800de60 <SD_ioctl+0xac>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	f003 0301 	and.w	r3, r3, #1
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <SD_ioctl+0x28>
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e03c      	b.n	800de56 <SD_ioctl+0xa2>

  switch (cmd)
 800dddc:	79bb      	ldrb	r3, [r7, #6]
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d834      	bhi.n	800de4c <SD_ioctl+0x98>
 800dde2:	a201      	add	r2, pc, #4	; (adr r2, 800dde8 <SD_ioctl+0x34>)
 800dde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde8:	0800ddf9 	.word	0x0800ddf9
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de19 	.word	0x0800de19
 800ddf4:	0800de33 	.word	0x0800de33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddfe:	e028      	b.n	800de52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff fe7b 	bl	800db00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de0a:	6a3a      	ldr	r2, [r7, #32]
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de16:	e01c      	b.n	800de52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de18:	f107 0308 	add.w	r3, r7, #8
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff fe6f 	bl	800db00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	b29a      	uxth	r2, r3
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de30:	e00f      	b.n	800de52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de32:	f107 0308 	add.w	r3, r7, #8
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff fe62 	bl	800db00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	0a5a      	lsrs	r2, r3, #9
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de4a:	e002      	b.n	800de52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de4c:	2304      	movs	r3, #4
 800de4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de56:	4618      	mov	r0, r3
 800de58:	3730      	adds	r7, #48	; 0x30
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	2000000d 	.word	0x2000000d

0800de64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800de68:	4b03      	ldr	r3, [pc, #12]	; (800de78 <BSP_SD_WriteCpltCallback+0x14>)
 800de6a:	2201      	movs	r2, #1
 800de6c:	601a      	str	r2, [r3, #0]
}
 800de6e:	bf00      	nop
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	20000d0c 	.word	0x20000d0c

0800de7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800de7c:	b480      	push	{r7}
 800de7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800de80:	4b03      	ldr	r3, [pc, #12]	; (800de90 <BSP_SD_ReadCpltCallback+0x14>)
 800de82:	2201      	movs	r2, #1
 800de84:	601a      	str	r2, [r3, #0]
}
 800de86:	bf00      	nop
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	20000d10 	.word	0x20000d10

0800de94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dea4:	f002 fdf8 	bl	8010a98 <USBD_static_malloc>
 800dea8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d109      	bne.n	800dec4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	32b0      	adds	r2, #176	; 0xb0
 800deba:	2100      	movs	r1, #0
 800debc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dec0:	2302      	movs	r3, #2
 800dec2:	e0d4      	b.n	800e06e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dec4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dec8:	2100      	movs	r1, #0
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f002 fe3c 	bl	8010b48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	32b0      	adds	r2, #176	; 0xb0
 800deda:	68f9      	ldr	r1, [r7, #12]
 800dedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	32b0      	adds	r2, #176	; 0xb0
 800deea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7c1b      	ldrb	r3, [r3, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d138      	bne.n	800df6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800defc:	4b5e      	ldr	r3, [pc, #376]	; (800e078 <USBD_CDC_Init+0x1e4>)
 800defe:	7819      	ldrb	r1, [r3, #0]
 800df00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df04:	2202      	movs	r2, #2
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f002 fc00 	bl	801070c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df0c:	4b5a      	ldr	r3, [pc, #360]	; (800e078 <USBD_CDC_Init+0x1e4>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 020f 	and.w	r2, r3, #15
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	440b      	add	r3, r1
 800df20:	3324      	adds	r3, #36	; 0x24
 800df22:	2201      	movs	r2, #1
 800df24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df26:	4b55      	ldr	r3, [pc, #340]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800df28:	7819      	ldrb	r1, [r3, #0]
 800df2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df2e:	2202      	movs	r2, #2
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f002 fbeb 	bl	801070c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df36:	4b51      	ldr	r3, [pc, #324]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 020f 	and.w	r2, r3, #15
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	440b      	add	r3, r1
 800df4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df4e:	2201      	movs	r2, #1
 800df50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df52:	4b4b      	ldr	r3, [pc, #300]	; (800e080 <USBD_CDC_Init+0x1ec>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	f003 020f 	and.w	r2, r3, #15
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	4613      	mov	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	440b      	add	r3, r1
 800df66:	3326      	adds	r3, #38	; 0x26
 800df68:	2210      	movs	r2, #16
 800df6a:	801a      	strh	r2, [r3, #0]
 800df6c:	e035      	b.n	800dfda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df6e:	4b42      	ldr	r3, [pc, #264]	; (800e078 <USBD_CDC_Init+0x1e4>)
 800df70:	7819      	ldrb	r1, [r3, #0]
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	2202      	movs	r2, #2
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f002 fbc8 	bl	801070c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df7c:	4b3e      	ldr	r3, [pc, #248]	; (800e078 <USBD_CDC_Init+0x1e4>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	f003 020f 	and.w	r2, r3, #15
 800df84:	6879      	ldr	r1, [r7, #4]
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	440b      	add	r3, r1
 800df90:	3324      	adds	r3, #36	; 0x24
 800df92:	2201      	movs	r2, #1
 800df94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df96:	4b39      	ldr	r3, [pc, #228]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800df98:	7819      	ldrb	r1, [r3, #0]
 800df9a:	2340      	movs	r3, #64	; 0x40
 800df9c:	2202      	movs	r2, #2
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f002 fbb4 	bl	801070c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dfa4:	4b35      	ldr	r3, [pc, #212]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	f003 020f 	and.w	r2, r3, #15
 800dfac:	6879      	ldr	r1, [r7, #4]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4413      	add	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	440b      	add	r3, r1
 800dfb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dfc0:	4b2f      	ldr	r3, [pc, #188]	; (800e080 <USBD_CDC_Init+0x1ec>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	f003 020f 	and.w	r2, r3, #15
 800dfc8:	6879      	ldr	r1, [r7, #4]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	440b      	add	r3, r1
 800dfd4:	3326      	adds	r3, #38	; 0x26
 800dfd6:	2210      	movs	r2, #16
 800dfd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dfda:	4b29      	ldr	r3, [pc, #164]	; (800e080 <USBD_CDC_Init+0x1ec>)
 800dfdc:	7819      	ldrb	r1, [r3, #0]
 800dfde:	2308      	movs	r3, #8
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f002 fb92 	bl	801070c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dfe8:	4b25      	ldr	r3, [pc, #148]	; (800e080 <USBD_CDC_Init+0x1ec>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	f003 020f 	and.w	r2, r3, #15
 800dff0:	6879      	ldr	r1, [r7, #4]
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	440b      	add	r3, r1
 800dffc:	3324      	adds	r3, #36	; 0x24
 800dffe:	2201      	movs	r2, #1
 800e000:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	33b0      	adds	r3, #176	; 0xb0
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e038:	2302      	movs	r3, #2
 800e03a:	e018      	b.n	800e06e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	7c1b      	ldrb	r3, [r3, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e044:	4b0d      	ldr	r3, [pc, #52]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800e046:	7819      	ldrb	r1, [r3, #0]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f002 fcd4 	bl	8010a00 <USBD_LL_PrepareReceive>
 800e058:	e008      	b.n	800e06c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e05a:	4b08      	ldr	r3, [pc, #32]	; (800e07c <USBD_CDC_Init+0x1e8>)
 800e05c:	7819      	ldrb	r1, [r3, #0]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e064:	2340      	movs	r3, #64	; 0x40
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f002 fcca 	bl	8010a00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20000097 	.word	0x20000097
 800e07c:	20000098 	.word	0x20000098
 800e080:	20000099 	.word	0x20000099

0800e084 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e090:	4b3a      	ldr	r3, [pc, #232]	; (800e17c <USBD_CDC_DeInit+0xf8>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f002 fb76 	bl	8010788 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e09c:	4b37      	ldr	r3, [pc, #220]	; (800e17c <USBD_CDC_DeInit+0xf8>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	f003 020f 	and.w	r2, r3, #15
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3324      	adds	r3, #36	; 0x24
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e0b6:	4b32      	ldr	r3, [pc, #200]	; (800e180 <USBD_CDC_DeInit+0xfc>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f002 fb63 	bl	8010788 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e0c2:	4b2f      	ldr	r3, [pc, #188]	; (800e180 <USBD_CDC_DeInit+0xfc>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f003 020f 	and.w	r2, r3, #15
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0da:	2200      	movs	r2, #0
 800e0dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e0de:	4b29      	ldr	r3, [pc, #164]	; (800e184 <USBD_CDC_DeInit+0x100>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f002 fb4f 	bl	8010788 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e0ea:	4b26      	ldr	r3, [pc, #152]	; (800e184 <USBD_CDC_DeInit+0x100>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	f003 020f 	and.w	r2, r3, #15
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4413      	add	r3, r2
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	3324      	adds	r3, #36	; 0x24
 800e100:	2200      	movs	r2, #0
 800e102:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e104:	4b1f      	ldr	r3, [pc, #124]	; (800e184 <USBD_CDC_DeInit+0x100>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	f003 020f 	and.w	r2, r3, #15
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	4613      	mov	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	440b      	add	r3, r1
 800e118:	3326      	adds	r3, #38	; 0x26
 800e11a:	2200      	movs	r2, #0
 800e11c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	32b0      	adds	r2, #176	; 0xb0
 800e128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01f      	beq.n	800e170 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	33b0      	adds	r3, #176	; 0xb0
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	32b0      	adds	r2, #176	; 0xb0
 800e14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e152:	4618      	mov	r0, r3
 800e154:	f002 fcae 	bl	8010ab4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	32b0      	adds	r2, #176	; 0xb0
 800e162:	2100      	movs	r1, #0
 800e164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20000097 	.word	0x20000097
 800e180:	20000098 	.word	0x20000098
 800e184:	20000099 	.word	0x20000099

0800e188 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	32b0      	adds	r2, #176	; 0xb0
 800e19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	e0bf      	b.n	800e338 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d050      	beq.n	800e266 <USBD_CDC_Setup+0xde>
 800e1c4:	2b20      	cmp	r3, #32
 800e1c6:	f040 80af 	bne.w	800e328 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	88db      	ldrh	r3, [r3, #6]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d03a      	beq.n	800e248 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b25b      	sxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	da1b      	bge.n	800e214 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	33b0      	adds	r3, #176	; 0xb0
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e1f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	88d2      	ldrh	r2, [r2, #6]
 800e1f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	88db      	ldrh	r3, [r3, #6]
 800e1fe:	2b07      	cmp	r3, #7
 800e200:	bf28      	it	cs
 800e202:	2307      	movcs	r3, #7
 800e204:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	89fa      	ldrh	r2, [r7, #14]
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f001 fd89 	bl	800fd24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e212:	e090      	b.n	800e336 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	785a      	ldrb	r2, [r3, #1]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	88db      	ldrh	r3, [r3, #6]
 800e222:	2b3f      	cmp	r3, #63	; 0x3f
 800e224:	d803      	bhi.n	800e22e <USBD_CDC_Setup+0xa6>
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	88db      	ldrh	r3, [r3, #6]
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	e000      	b.n	800e230 <USBD_CDC_Setup+0xa8>
 800e22e:	2240      	movs	r2, #64	; 0x40
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e236:	6939      	ldr	r1, [r7, #16]
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e23e:	461a      	mov	r2, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 fd9b 	bl	800fd7c <USBD_CtlPrepareRx>
      break;
 800e246:	e076      	b.n	800e336 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	33b0      	adds	r3, #176	; 0xb0
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	7850      	ldrb	r0, [r2, #1]
 800e25e:	2200      	movs	r2, #0
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	4798      	blx	r3
      break;
 800e264:	e067      	b.n	800e336 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	785b      	ldrb	r3, [r3, #1]
 800e26a:	2b0b      	cmp	r3, #11
 800e26c:	d851      	bhi.n	800e312 <USBD_CDC_Setup+0x18a>
 800e26e:	a201      	add	r2, pc, #4	; (adr r2, 800e274 <USBD_CDC_Setup+0xec>)
 800e270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e274:	0800e2a5 	.word	0x0800e2a5
 800e278:	0800e321 	.word	0x0800e321
 800e27c:	0800e313 	.word	0x0800e313
 800e280:	0800e313 	.word	0x0800e313
 800e284:	0800e313 	.word	0x0800e313
 800e288:	0800e313 	.word	0x0800e313
 800e28c:	0800e313 	.word	0x0800e313
 800e290:	0800e313 	.word	0x0800e313
 800e294:	0800e313 	.word	0x0800e313
 800e298:	0800e313 	.word	0x0800e313
 800e29c:	0800e2cf 	.word	0x0800e2cf
 800e2a0:	0800e2f9 	.word	0x0800e2f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d107      	bne.n	800e2c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2b0:	f107 030a 	add.w	r3, r7, #10
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f001 fd33 	bl	800fd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2be:	e032      	b.n	800e326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f001 fcbd 	bl	800fc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	75fb      	strb	r3, [r7, #23]
          break;
 800e2cc:	e02b      	b.n	800e326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d107      	bne.n	800e2ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2da:	f107 030d 	add.w	r3, r7, #13
 800e2de:	2201      	movs	r2, #1
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 fd1e 	bl	800fd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2e8:	e01d      	b.n	800e326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 fca8 	bl	800fc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2f6:	e016      	b.n	800e326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b03      	cmp	r3, #3
 800e302:	d00f      	beq.n	800e324 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f001 fc9b 	bl	800fc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800e30c:	2303      	movs	r3, #3
 800e30e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e310:	e008      	b.n	800e324 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f001 fc94 	bl	800fc42 <USBD_CtlError>
          ret = USBD_FAIL;
 800e31a:	2303      	movs	r3, #3
 800e31c:	75fb      	strb	r3, [r7, #23]
          break;
 800e31e:	e002      	b.n	800e326 <USBD_CDC_Setup+0x19e>
          break;
 800e320:	bf00      	nop
 800e322:	e008      	b.n	800e336 <USBD_CDC_Setup+0x1ae>
          break;
 800e324:	bf00      	nop
      }
      break;
 800e326:	e006      	b.n	800e336 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f001 fc89 	bl	800fc42 <USBD_CtlError>
      ret = USBD_FAIL;
 800e330:	2303      	movs	r3, #3
 800e332:	75fb      	strb	r3, [r7, #23]
      break;
 800e334:	bf00      	nop
  }

  return (uint8_t)ret;
 800e336:	7dfb      	ldrb	r3, [r7, #23]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	460b      	mov	r3, r1
 800e34a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e352:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	32b0      	adds	r2, #176	; 0xb0
 800e35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e366:	2303      	movs	r3, #3
 800e368:	e065      	b.n	800e436 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	32b0      	adds	r2, #176	; 0xb0
 800e374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e37a:	78fb      	ldrb	r3, [r7, #3]
 800e37c:	f003 020f 	and.w	r2, r3, #15
 800e380:	6879      	ldr	r1, [r7, #4]
 800e382:	4613      	mov	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	440b      	add	r3, r1
 800e38c:	3318      	adds	r3, #24
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d02f      	beq.n	800e3f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	f003 020f 	and.w	r2, r3, #15
 800e39a:	6879      	ldr	r1, [r7, #4]
 800e39c:	4613      	mov	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	440b      	add	r3, r1
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	78fb      	ldrb	r3, [r7, #3]
 800e3ac:	f003 010f 	and.w	r1, r3, #15
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	440b      	add	r3, r1
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4403      	add	r3, r0
 800e3bc:	3344      	adds	r3, #68	; 0x44
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e3c4:	fb01 f303 	mul.w	r3, r1, r3
 800e3c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d112      	bne.n	800e3f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	f003 020f 	and.w	r2, r3, #15
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	440b      	add	r3, r1
 800e3e0:	3318      	adds	r3, #24
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3e6:	78f9      	ldrb	r1, [r7, #3]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f002 facf 	bl	8010990 <USBD_LL_Transmit>
 800e3f2:	e01f      	b.n	800e434 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	33b0      	adds	r3, #176	; 0xb0
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d010      	beq.n	800e434 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	33b0      	adds	r3, #176	; 0xb0
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4413      	add	r3, r2
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e430:	78fa      	ldrb	r2, [r7, #3]
 800e432:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	460b      	mov	r3, r1
 800e448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	32b0      	adds	r2, #176	; 0xb0
 800e454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	32b0      	adds	r2, #176	; 0xb0
 800e464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e01a      	b.n	800e4a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e470:	78fb      	ldrb	r3, [r7, #3]
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f002 fafb 	bl	8010a70 <USBD_LL_GetRxDataSize>
 800e47a:	4602      	mov	r2, r0
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	33b0      	adds	r3, #176	; 0xb0
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b084      	sub	sp, #16
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	32b0      	adds	r2, #176	; 0xb0
 800e4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	e025      	b.n	800e51c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	33b0      	adds	r3, #176	; 0xb0
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d01a      	beq.n	800e51a <USBD_CDC_EP0_RxReady+0x6c>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e4ea:	2bff      	cmp	r3, #255	; 0xff
 800e4ec:	d015      	beq.n	800e51a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	33b0      	adds	r3, #176	; 0xb0
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e506:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e50e:	b292      	uxth	r2, r2
 800e510:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e52c:	2182      	movs	r1, #130	; 0x82
 800e52e:	4818      	ldr	r0, [pc, #96]	; (800e590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e530:	f000 fd4f 	bl	800efd2 <USBD_GetEpDesc>
 800e534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e536:	2101      	movs	r1, #1
 800e538:	4815      	ldr	r0, [pc, #84]	; (800e590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e53a:	f000 fd4a 	bl	800efd2 <USBD_GetEpDesc>
 800e53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e540:	2181      	movs	r1, #129	; 0x81
 800e542:	4813      	ldr	r0, [pc, #76]	; (800e590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e544:	f000 fd45 	bl	800efd2 <USBD_GetEpDesc>
 800e548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2210      	movs	r2, #16
 800e554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	2200      	movs	r2, #0
 800e560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e564:	711a      	strb	r2, [r3, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d006      	beq.n	800e57e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e578:	711a      	strb	r2, [r3, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2243      	movs	r2, #67	; 0x43
 800e582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e584:	4b02      	ldr	r3, [pc, #8]	; (800e590 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20000054 	.word	0x20000054

0800e594 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e59c:	2182      	movs	r1, #130	; 0x82
 800e59e:	4818      	ldr	r0, [pc, #96]	; (800e600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5a0:	f000 fd17 	bl	800efd2 <USBD_GetEpDesc>
 800e5a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	4815      	ldr	r0, [pc, #84]	; (800e600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5aa:	f000 fd12 	bl	800efd2 <USBD_GetEpDesc>
 800e5ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5b0:	2181      	movs	r1, #129	; 0x81
 800e5b2:	4813      	ldr	r0, [pc, #76]	; (800e600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5b4:	f000 fd0d 	bl	800efd2 <USBD_GetEpDesc>
 800e5b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2210      	movs	r2, #16
 800e5c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	711a      	strb	r2, [r3, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f042 0202 	orr.w	r2, r2, #2
 800e5d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	711a      	strb	r2, [r3, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f042 0202 	orr.w	r2, r2, #2
 800e5ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2243      	movs	r2, #67	; 0x43
 800e5f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5f4:	4b02      	ldr	r3, [pc, #8]	; (800e600 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000054 	.word	0x20000054

0800e604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e60c:	2182      	movs	r1, #130	; 0x82
 800e60e:	4818      	ldr	r0, [pc, #96]	; (800e670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e610:	f000 fcdf 	bl	800efd2 <USBD_GetEpDesc>
 800e614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e616:	2101      	movs	r1, #1
 800e618:	4815      	ldr	r0, [pc, #84]	; (800e670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e61a:	f000 fcda 	bl	800efd2 <USBD_GetEpDesc>
 800e61e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e620:	2181      	movs	r1, #129	; 0x81
 800e622:	4813      	ldr	r0, [pc, #76]	; (800e670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e624:	f000 fcd5 	bl	800efd2 <USBD_GetEpDesc>
 800e628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d002      	beq.n	800e636 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2210      	movs	r2, #16
 800e634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d006      	beq.n	800e64a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	2200      	movs	r2, #0
 800e640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e644:	711a      	strb	r2, [r3, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d006      	beq.n	800e65e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e658:	711a      	strb	r2, [r3, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2243      	movs	r2, #67	; 0x43
 800e662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e664:	4b02      	ldr	r3, [pc, #8]	; (800e670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e666:	4618      	mov	r0, r3
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20000054 	.word	0x20000054

0800e674 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	220a      	movs	r2, #10
 800e680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e682:	4b03      	ldr	r3, [pc, #12]	; (800e690 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	20000010 	.word	0x20000010

0800e694 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	e009      	b.n	800e6bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	33b0      	adds	r3, #176	; 0xb0
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	683a      	ldr	r2, [r7, #0]
 800e6b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b087      	sub	sp, #28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	32b0      	adds	r2, #176	; 0xb0
 800e6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d101      	bne.n	800e6ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	e008      	b.n	800e700 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	32b0      	adds	r2, #176	; 0xb0
 800e720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e72c:	2303      	movs	r3, #3
 800e72e:	e004      	b.n	800e73a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
	...

0800e748 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	32b0      	adds	r2, #176	; 0xb0
 800e75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e75e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e760:	2301      	movs	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e76a:	2303      	movs	r3, #3
 800e76c:	e025      	b.n	800e7ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e774:	2b00      	cmp	r3, #0
 800e776:	d11f      	bne.n	800e7b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e780:	4b10      	ldr	r3, [pc, #64]	; (800e7c4 <USBD_CDC_TransmitPacket+0x7c>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	f003 020f 	and.w	r2, r3, #15
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	4613      	mov	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4403      	add	r3, r0
 800e79a:	3318      	adds	r3, #24
 800e79c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e79e:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <USBD_CDC_TransmitPacket+0x7c>)
 800e7a0:	7819      	ldrb	r1, [r3, #0]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f002 f8ee 	bl	8010990 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20000097 	.word	0x20000097

0800e7c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	32b0      	adds	r2, #176	; 0xb0
 800e7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	32b0      	adds	r2, #176	; 0xb0
 800e7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	e018      	b.n	800e828 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	7c1b      	ldrb	r3, [r3, #16]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7fe:	4b0c      	ldr	r3, [pc, #48]	; (800e830 <USBD_CDC_ReceivePacket+0x68>)
 800e800:	7819      	ldrb	r1, [r3, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f002 f8f7 	bl	8010a00 <USBD_LL_PrepareReceive>
 800e812:	e008      	b.n	800e826 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e814:	4b06      	ldr	r3, [pc, #24]	; (800e830 <USBD_CDC_ReceivePacket+0x68>)
 800e816:	7819      	ldrb	r1, [r3, #0]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e81e:	2340      	movs	r3, #64	; 0x40
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f002 f8ed 	bl	8010a00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20000098 	.word	0x20000098

0800e834 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4613      	mov	r3, r2
 800e840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e848:	2303      	movs	r3, #3
 800e84a:	e01f      	b.n	800e88c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d003      	beq.n	800e872 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2201      	movs	r2, #1
 800e876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	79fa      	ldrb	r2, [r7, #7]
 800e87e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f001 fec5 	bl	8010610 <USBD_LL_Init>
 800e886:	4603      	mov	r3, r0
 800e888:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e025      	b.n	800e8f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	32ae      	adds	r2, #174	; 0xae
 800e8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00f      	beq.n	800e8e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	32ae      	adds	r2, #174	; 0xae
 800e8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	f107 020e 	add.w	r2, r7, #14
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f001 fecd 	bl	80106a8 <USBD_LL_Start>
 800e90e:	4603      	mov	r3, r0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e920:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	460b      	mov	r3, r1
 800e938:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e944:	2b00      	cmp	r3, #0
 800e946:	d009      	beq.n	800e95c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	78fa      	ldrb	r2, [r7, #3]
 800e952:	4611      	mov	r1, r2
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	4798      	blx	r3
 800e958:	4603      	mov	r3, r0
 800e95a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	78fa      	ldrb	r2, [r7, #3]
 800e980:	4611      	mov	r1, r2
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	4798      	blx	r3
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e98c:	2303      	movs	r3, #3
 800e98e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e990:	7bfb      	ldrb	r3, [r7, #15]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b084      	sub	sp, #16
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f001 f90e 	bl	800fbce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9ce:	f003 031f 	and.w	r3, r3, #31
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	d01a      	beq.n	800ea0c <USBD_LL_SetupStage+0x72>
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d822      	bhi.n	800ea20 <USBD_LL_SetupStage+0x86>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <USBD_LL_SetupStage+0x4a>
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d00a      	beq.n	800e9f8 <USBD_LL_SetupStage+0x5e>
 800e9e2:	e01d      	b.n	800ea20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 fb65 	bl	800f0bc <USBD_StdDevReq>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f6:	e020      	b.n	800ea3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9fe:	4619      	mov	r1, r3
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fbcd 	bl	800f1a0 <USBD_StdItfReq>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0a:	e016      	b.n	800ea3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fc2f 	bl	800f278 <USBD_StdEPReq>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea1e:	e00c      	b.n	800ea3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f001 fee0 	bl	80107f4 <USBD_LL_StallEP>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
      break;
 800ea38:	bf00      	nop
  }

  return ret;
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea52:	2300      	movs	r3, #0
 800ea54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ea56:	7afb      	ldrb	r3, [r7, #11]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d16e      	bne.n	800eb3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ea62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	f040 8098 	bne.w	800eba0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	689a      	ldr	r2, [r3, #8]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d913      	bls.n	800eaa4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	689a      	ldr	r2, [r3, #8]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	1ad2      	subs	r2, r2, r3
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	4293      	cmp	r3, r2
 800ea94:	bf28      	it	cs
 800ea96:	4613      	movcs	r3, r2
 800ea98:	461a      	mov	r2, r3
 800ea9a:	6879      	ldr	r1, [r7, #4]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f001 f98a 	bl	800fdb6 <USBD_CtlContinueRx>
 800eaa2:	e07d      	b.n	800eba0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eaaa:	f003 031f 	and.w	r3, r3, #31
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d014      	beq.n	800eadc <USBD_LL_DataOutStage+0x98>
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d81d      	bhi.n	800eaf2 <USBD_LL_DataOutStage+0xae>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <USBD_LL_DataOutStage+0x7c>
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d003      	beq.n	800eac6 <USBD_LL_DataOutStage+0x82>
 800eabe:	e018      	b.n	800eaf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eac0:	2300      	movs	r3, #0
 800eac2:	75bb      	strb	r3, [r7, #22]
            break;
 800eac4:	e018      	b.n	800eaf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	4619      	mov	r1, r3
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 fa64 	bl	800ef9e <USBD_CoreFindIF>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75bb      	strb	r3, [r7, #22]
            break;
 800eada:	e00d      	b.n	800eaf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	4619      	mov	r1, r3
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f000 fa66 	bl	800efb8 <USBD_CoreFindEP>
 800eaec:	4603      	mov	r3, r0
 800eaee:	75bb      	strb	r3, [r7, #22]
            break;
 800eaf0:	e002      	b.n	800eaf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	75bb      	strb	r3, [r7, #22]
            break;
 800eaf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eaf8:	7dbb      	ldrb	r3, [r7, #22]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d119      	bne.n	800eb32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d113      	bne.n	800eb32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eb0a:	7dba      	ldrb	r2, [r7, #22]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	32ae      	adds	r2, #174	; 0xae
 800eb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eb1a:	7dba      	ldrb	r2, [r7, #22]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eb22:	7dba      	ldrb	r2, [r7, #22]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	32ae      	adds	r2, #174	; 0xae
 800eb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f001 f950 	bl	800fdd8 <USBD_CtlSendStatus>
 800eb38:	e032      	b.n	800eba0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eb3a:	7afb      	ldrb	r3, [r7, #11]
 800eb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	4619      	mov	r1, r3
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f000 fa37 	bl	800efb8 <USBD_CoreFindEP>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb4e:	7dbb      	ldrb	r3, [r7, #22]
 800eb50:	2bff      	cmp	r3, #255	; 0xff
 800eb52:	d025      	beq.n	800eba0 <USBD_LL_DataOutStage+0x15c>
 800eb54:	7dbb      	ldrb	r3, [r7, #22]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d122      	bne.n	800eba0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	d117      	bne.n	800eb96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb66:	7dba      	ldrb	r2, [r7, #22]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	32ae      	adds	r2, #174	; 0xae
 800eb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00f      	beq.n	800eb96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eb76:	7dba      	ldrb	r2, [r7, #22]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb7e:	7dba      	ldrb	r2, [r7, #22]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	32ae      	adds	r2, #174	; 0xae
 800eb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	7afa      	ldrb	r2, [r7, #11]
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	4798      	blx	r3
 800eb92:	4603      	mov	r3, r0
 800eb94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	e000      	b.n	800eba2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3718      	adds	r7, #24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	607a      	str	r2, [r7, #4]
 800ebb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d16f      	bne.n	800ec9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3314      	adds	r3, #20
 800ebc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d15a      	bne.n	800ec84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	689a      	ldr	r2, [r3, #8]
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d914      	bls.n	800ec04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	689a      	ldr	r2, [r3, #8]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	1ad2      	subs	r2, r2, r3
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	461a      	mov	r2, r3
 800ebee:	6879      	ldr	r1, [r7, #4]
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f001 f8b2 	bl	800fd5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f001 feff 	bl	8010a00 <USBD_LL_PrepareReceive>
 800ec02:	e03f      	b.n	800ec84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d11c      	bne.n	800ec4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d316      	bcc.n	800ec4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d20f      	bcs.n	800ec4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f001 f893 	bl	800fd5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2200      	movs	r2, #0
 800ec40:	2100      	movs	r1, #0
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f001 fedc 	bl	8010a00 <USBD_LL_PrepareReceive>
 800ec48:	e01c      	b.n	800ec84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d10f      	bne.n	800ec76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d009      	beq.n	800ec76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec76:	2180      	movs	r1, #128	; 0x80
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f001 fdbb 	bl	80107f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f001 f8bd 	bl	800fdfe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d03a      	beq.n	800ed04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ec8e:	68f8      	ldr	r0, [r7, #12]
 800ec90:	f7ff fe42 	bl	800e918 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ec9c:	e032      	b.n	800ed04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ec9e:	7afb      	ldrb	r3, [r7, #11]
 800eca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	4619      	mov	r1, r3
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 f985 	bl	800efb8 <USBD_CoreFindEP>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	2bff      	cmp	r3, #255	; 0xff
 800ecb6:	d025      	beq.n	800ed04 <USBD_LL_DataInStage+0x15a>
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d122      	bne.n	800ed04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d11c      	bne.n	800ed04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ecca:	7dfa      	ldrb	r2, [r7, #23]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	32ae      	adds	r2, #174	; 0xae
 800ecd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d014      	beq.n	800ed04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ecda:	7dfa      	ldrb	r2, [r7, #23]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ece2:	7dfa      	ldrb	r2, [r7, #23]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	32ae      	adds	r2, #174	; 0xae
 800ece8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	7afa      	ldrb	r2, [r7, #11]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	4798      	blx	r3
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ecfa:	7dbb      	ldrb	r3, [r7, #22]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ed00:	7dbb      	ldrb	r3, [r7, #22]
 800ed02:	e000      	b.n	800ed06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3718      	adds	r7, #24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d014      	beq.n	800ed74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00e      	beq.n	800ed74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	6852      	ldr	r2, [r2, #4]
 800ed62:	b2d2      	uxtb	r2, r2
 800ed64:	4611      	mov	r1, r2
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	4798      	blx	r3
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ed70:	2303      	movs	r3, #3
 800ed72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed74:	2340      	movs	r3, #64	; 0x40
 800ed76:	2200      	movs	r2, #0
 800ed78:	2100      	movs	r1, #0
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f001 fcc6 	bl	801070c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2240      	movs	r2, #64	; 0x40
 800ed8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed90:	2340      	movs	r3, #64	; 0x40
 800ed92:	2200      	movs	r2, #0
 800ed94:	2180      	movs	r1, #128	; 0x80
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f001 fcb8 	bl	801070c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2240      	movs	r2, #64	; 0x40
 800eda6:	621a      	str	r2, [r3, #32]

  return ret;
 800eda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	460b      	mov	r3, r1
 800edbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	78fa      	ldrb	r2, [r7, #3]
 800edc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800edd2:	b480      	push	{r7}
 800edd4:	b083      	sub	sp, #12
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	2b04      	cmp	r3, #4
 800ede4:	d006      	beq.n	800edf4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edec:	b2da      	uxtb	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2204      	movs	r2, #4
 800edf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800edfc:	2300      	movs	r3, #0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	d106      	bne.n	800ee2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ee24:	b2da      	uxtb	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	370c      	adds	r7, #12
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b082      	sub	sp, #8
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d110      	bne.n	800ee70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00b      	beq.n	800ee70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d005      	beq.n	800ee70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b082      	sub	sp, #8
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	460b      	mov	r3, r1
 800ee84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	32ae      	adds	r2, #174	; 0xae
 800ee90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee98:	2303      	movs	r3, #3
 800ee9a:	e01c      	b.n	800eed6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d115      	bne.n	800eed4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	32ae      	adds	r2, #174	; 0xae
 800eeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00b      	beq.n	800eed4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	32ae      	adds	r2, #174	; 0xae
 800eec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	78fa      	ldrb	r2, [r7, #3]
 800eece:	4611      	mov	r1, r2
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b082      	sub	sp, #8
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
 800eee6:	460b      	mov	r3, r1
 800eee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	32ae      	adds	r2, #174	; 0xae
 800eef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eefc:	2303      	movs	r3, #3
 800eefe:	e01c      	b.n	800ef3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b03      	cmp	r3, #3
 800ef0a:	d115      	bne.n	800ef38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	32ae      	adds	r2, #174	; 0xae
 800ef16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00b      	beq.n	800ef38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	32ae      	adds	r2, #174	; 0xae
 800ef2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef30:	78fa      	ldrb	r2, [r7, #3]
 800ef32:	4611      	mov	r1, r2
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00e      	beq.n	800ef94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	6852      	ldr	r2, [r2, #4]
 800ef82:	b2d2      	uxtb	r2, r2
 800ef84:	4611      	mov	r1, r2
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	4798      	blx	r3
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ef90:	2303      	movs	r3, #3
 800ef92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efac:	4618      	mov	r0, r3
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	460b      	mov	r3, r1
 800efc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b086      	sub	sp, #24
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	885b      	ldrh	r3, [r3, #2]
 800efee:	b29a      	uxth	r2, r3
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d920      	bls.n	800f03c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	b29b      	uxth	r3, r3
 800f000:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f002:	e013      	b.n	800f02c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f004:	f107 030a 	add.w	r3, r7, #10
 800f008:	4619      	mov	r1, r3
 800f00a:	6978      	ldr	r0, [r7, #20]
 800f00c:	f000 f81b 	bl	800f046 <USBD_GetNextDesc>
 800f010:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	785b      	ldrb	r3, [r3, #1]
 800f016:	2b05      	cmp	r3, #5
 800f018:	d108      	bne.n	800f02c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	789b      	ldrb	r3, [r3, #2]
 800f022:	78fa      	ldrb	r2, [r7, #3]
 800f024:	429a      	cmp	r2, r3
 800f026:	d008      	beq.n	800f03a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f028:	2300      	movs	r3, #0
 800f02a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	885b      	ldrh	r3, [r3, #2]
 800f030:	b29a      	uxth	r2, r3
 800f032:	897b      	ldrh	r3, [r7, #10]
 800f034:	429a      	cmp	r2, r3
 800f036:	d8e5      	bhi.n	800f004 <USBD_GetEpDesc+0x32>
 800f038:	e000      	b.n	800f03c <USBD_GetEpDesc+0x6a>
          break;
 800f03a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f03c:	693b      	ldr	r3, [r7, #16]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3718      	adds	r7, #24
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f046:	b480      	push	{r7}
 800f048:	b085      	sub	sp, #20
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
 800f04e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	881a      	ldrh	r2, [r3, #0]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	4413      	add	r3, r2
 800f060:	b29a      	uxth	r2, r3
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	461a      	mov	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4413      	add	r3, r2
 800f070:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f072:	68fb      	ldr	r3, [r7, #12]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3714      	adds	r7, #20
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f080:	b480      	push	{r7}
 800f082:	b087      	sub	sp, #28
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	3301      	adds	r3, #1
 800f096:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f09e:	8a3b      	ldrh	r3, [r7, #16]
 800f0a0:	021b      	lsls	r3, r3, #8
 800f0a2:	b21a      	sxth	r2, r3
 800f0a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	b21b      	sxth	r3, r3
 800f0ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	371c      	adds	r7, #28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0d2:	2b40      	cmp	r3, #64	; 0x40
 800f0d4:	d005      	beq.n	800f0e2 <USBD_StdDevReq+0x26>
 800f0d6:	2b40      	cmp	r3, #64	; 0x40
 800f0d8:	d857      	bhi.n	800f18a <USBD_StdDevReq+0xce>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00f      	beq.n	800f0fe <USBD_StdDevReq+0x42>
 800f0de:	2b20      	cmp	r3, #32
 800f0e0:	d153      	bne.n	800f18a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	32ae      	adds	r2, #174	; 0xae
 800f0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	4798      	blx	r3
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f0fc:	e04a      	b.n	800f194 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	785b      	ldrb	r3, [r3, #1]
 800f102:	2b09      	cmp	r3, #9
 800f104:	d83b      	bhi.n	800f17e <USBD_StdDevReq+0xc2>
 800f106:	a201      	add	r2, pc, #4	; (adr r2, 800f10c <USBD_StdDevReq+0x50>)
 800f108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10c:	0800f161 	.word	0x0800f161
 800f110:	0800f175 	.word	0x0800f175
 800f114:	0800f17f 	.word	0x0800f17f
 800f118:	0800f16b 	.word	0x0800f16b
 800f11c:	0800f17f 	.word	0x0800f17f
 800f120:	0800f13f 	.word	0x0800f13f
 800f124:	0800f135 	.word	0x0800f135
 800f128:	0800f17f 	.word	0x0800f17f
 800f12c:	0800f157 	.word	0x0800f157
 800f130:	0800f149 	.word	0x0800f149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fa3c 	bl	800f5b4 <USBD_GetDescriptor>
          break;
 800f13c:	e024      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fba1 	bl	800f888 <USBD_SetAddress>
          break;
 800f146:	e01f      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f148:	6839      	ldr	r1, [r7, #0]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 fbe0 	bl	800f910 <USBD_SetConfig>
 800f150:	4603      	mov	r3, r0
 800f152:	73fb      	strb	r3, [r7, #15]
          break;
 800f154:	e018      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fc83 	bl	800fa64 <USBD_GetConfig>
          break;
 800f15e:	e013      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fcb4 	bl	800fad0 <USBD_GetStatus>
          break;
 800f168:	e00e      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fce3 	bl	800fb38 <USBD_SetFeature>
          break;
 800f172:	e009      	b.n	800f188 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fd07 	bl	800fb8a <USBD_ClrFeature>
          break;
 800f17c:	e004      	b.n	800f188 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f17e:	6839      	ldr	r1, [r7, #0]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fd5e 	bl	800fc42 <USBD_CtlError>
          break;
 800f186:	bf00      	nop
      }
      break;
 800f188:	e004      	b.n	800f194 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 fd58 	bl	800fc42 <USBD_CtlError>
      break;
 800f192:	bf00      	nop
  }

  return ret;
 800f194:	7bfb      	ldrb	r3, [r7, #15]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop

0800f1a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d005      	beq.n	800f1c6 <USBD_StdItfReq+0x26>
 800f1ba:	2b40      	cmp	r3, #64	; 0x40
 800f1bc:	d852      	bhi.n	800f264 <USBD_StdItfReq+0xc4>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <USBD_StdItfReq+0x26>
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d14e      	bne.n	800f264 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d840      	bhi.n	800f256 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	889b      	ldrh	r3, [r3, #4]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d836      	bhi.n	800f24c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	889b      	ldrh	r3, [r3, #4]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fed9 	bl	800ef9e <USBD_CoreFindIF>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	2bff      	cmp	r3, #255	; 0xff
 800f1f4:	d01d      	beq.n	800f232 <USBD_StdItfReq+0x92>
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d11a      	bne.n	800f232 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f1fc:	7bba      	ldrb	r2, [r7, #14]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	32ae      	adds	r2, #174	; 0xae
 800f202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00f      	beq.n	800f22c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f20c:	7bba      	ldrb	r2, [r7, #14]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f214:	7bba      	ldrb	r2, [r7, #14]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	32ae      	adds	r2, #174	; 0xae
 800f21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f22a:	e004      	b.n	800f236 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f22c:	2303      	movs	r3, #3
 800f22e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f230:	e001      	b.n	800f236 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f232:	2303      	movs	r3, #3
 800f234:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	88db      	ldrh	r3, [r3, #6]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d110      	bne.n	800f260 <USBD_StdItfReq+0xc0>
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10d      	bne.n	800f260 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fdc7 	bl	800fdd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f24a:	e009      	b.n	800f260 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fcf7 	bl	800fc42 <USBD_CtlError>
          break;
 800f254:	e004      	b.n	800f260 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fcf2 	bl	800fc42 <USBD_CtlError>
          break;
 800f25e:	e000      	b.n	800f262 <USBD_StdItfReq+0xc2>
          break;
 800f260:	bf00      	nop
      }
      break;
 800f262:	e004      	b.n	800f26e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fceb 	bl	800fc42 <USBD_CtlError>
      break;
 800f26c:	bf00      	nop
  }

  return ret;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	889b      	ldrh	r3, [r3, #4]
 800f28a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f294:	2b40      	cmp	r3, #64	; 0x40
 800f296:	d007      	beq.n	800f2a8 <USBD_StdEPReq+0x30>
 800f298:	2b40      	cmp	r3, #64	; 0x40
 800f29a:	f200 817f 	bhi.w	800f59c <USBD_StdEPReq+0x324>
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d02a      	beq.n	800f2f8 <USBD_StdEPReq+0x80>
 800f2a2:	2b20      	cmp	r3, #32
 800f2a4:	f040 817a 	bne.w	800f59c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f2a8:	7bbb      	ldrb	r3, [r7, #14]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff fe83 	bl	800efb8 <USBD_CoreFindEP>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2b6:	7b7b      	ldrb	r3, [r7, #13]
 800f2b8:	2bff      	cmp	r3, #255	; 0xff
 800f2ba:	f000 8174 	beq.w	800f5a6 <USBD_StdEPReq+0x32e>
 800f2be:	7b7b      	ldrb	r3, [r7, #13]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f040 8170 	bne.w	800f5a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f2c6:	7b7a      	ldrb	r2, [r7, #13]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f2ce:	7b7a      	ldrb	r2, [r7, #13]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	32ae      	adds	r2, #174	; 0xae
 800f2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f000 8163 	beq.w	800f5a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f2e0:	7b7a      	ldrb	r2, [r7, #13]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	32ae      	adds	r2, #174	; 0xae
 800f2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	4798      	blx	r3
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f2f6:	e156      	b.n	800f5a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	785b      	ldrb	r3, [r3, #1]
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d008      	beq.n	800f312 <USBD_StdEPReq+0x9a>
 800f300:	2b03      	cmp	r3, #3
 800f302:	f300 8145 	bgt.w	800f590 <USBD_StdEPReq+0x318>
 800f306:	2b00      	cmp	r3, #0
 800f308:	f000 809b 	beq.w	800f442 <USBD_StdEPReq+0x1ca>
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d03c      	beq.n	800f38a <USBD_StdEPReq+0x112>
 800f310:	e13e      	b.n	800f590 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d002      	beq.n	800f324 <USBD_StdEPReq+0xac>
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d016      	beq.n	800f350 <USBD_StdEPReq+0xd8>
 800f322:	e02c      	b.n	800f37e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f324:	7bbb      	ldrb	r3, [r7, #14]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00d      	beq.n	800f346 <USBD_StdEPReq+0xce>
 800f32a:	7bbb      	ldrb	r3, [r7, #14]
 800f32c:	2b80      	cmp	r3, #128	; 0x80
 800f32e:	d00a      	beq.n	800f346 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f001 fa5d 	bl	80107f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f33a:	2180      	movs	r1, #128	; 0x80
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f001 fa59 	bl	80107f4 <USBD_LL_StallEP>
 800f342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f344:	e020      	b.n	800f388 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fc7a 	bl	800fc42 <USBD_CtlError>
              break;
 800f34e:	e01b      	b.n	800f388 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	885b      	ldrh	r3, [r3, #2]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10e      	bne.n	800f376 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f358:	7bbb      	ldrb	r3, [r7, #14]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00b      	beq.n	800f376 <USBD_StdEPReq+0xfe>
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
 800f360:	2b80      	cmp	r3, #128	; 0x80
 800f362:	d008      	beq.n	800f376 <USBD_StdEPReq+0xfe>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	88db      	ldrh	r3, [r3, #6]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d104      	bne.n	800f376 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f36c:	7bbb      	ldrb	r3, [r7, #14]
 800f36e:	4619      	mov	r1, r3
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f001 fa3f 	bl	80107f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fd2e 	bl	800fdd8 <USBD_CtlSendStatus>

              break;
 800f37c:	e004      	b.n	800f388 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f37e:	6839      	ldr	r1, [r7, #0]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fc5e 	bl	800fc42 <USBD_CtlError>
              break;
 800f386:	bf00      	nop
          }
          break;
 800f388:	e107      	b.n	800f59a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f390:	b2db      	uxtb	r3, r3
 800f392:	2b02      	cmp	r3, #2
 800f394:	d002      	beq.n	800f39c <USBD_StdEPReq+0x124>
 800f396:	2b03      	cmp	r3, #3
 800f398:	d016      	beq.n	800f3c8 <USBD_StdEPReq+0x150>
 800f39a:	e04b      	b.n	800f434 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00d      	beq.n	800f3be <USBD_StdEPReq+0x146>
 800f3a2:	7bbb      	ldrb	r3, [r7, #14]
 800f3a4:	2b80      	cmp	r3, #128	; 0x80
 800f3a6:	d00a      	beq.n	800f3be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3a8:	7bbb      	ldrb	r3, [r7, #14]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f001 fa21 	bl	80107f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3b2:	2180      	movs	r1, #128	; 0x80
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f001 fa1d 	bl	80107f4 <USBD_LL_StallEP>
 800f3ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3bc:	e040      	b.n	800f440 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fc3e 	bl	800fc42 <USBD_CtlError>
              break;
 800f3c6:	e03b      	b.n	800f440 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	885b      	ldrh	r3, [r3, #2]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d136      	bne.n	800f43e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d004      	beq.n	800f3e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f001 fa3e 	bl	8010860 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fcf7 	bl	800fdd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3ea:	7bbb      	ldrb	r3, [r7, #14]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff fde2 	bl	800efb8 <USBD_CoreFindEP>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3f8:	7b7b      	ldrb	r3, [r7, #13]
 800f3fa:	2bff      	cmp	r3, #255	; 0xff
 800f3fc:	d01f      	beq.n	800f43e <USBD_StdEPReq+0x1c6>
 800f3fe:	7b7b      	ldrb	r3, [r7, #13]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d11c      	bne.n	800f43e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f404:	7b7a      	ldrb	r2, [r7, #13]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f40c:	7b7a      	ldrb	r2, [r7, #13]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	32ae      	adds	r2, #174	; 0xae
 800f412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d010      	beq.n	800f43e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f41c:	7b7a      	ldrb	r2, [r7, #13]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	32ae      	adds	r2, #174	; 0xae
 800f422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	4798      	blx	r3
 800f42e:	4603      	mov	r3, r0
 800f430:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f432:	e004      	b.n	800f43e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fc03 	bl	800fc42 <USBD_CtlError>
              break;
 800f43c:	e000      	b.n	800f440 <USBD_StdEPReq+0x1c8>
              break;
 800f43e:	bf00      	nop
          }
          break;
 800f440:	e0ab      	b.n	800f59a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b02      	cmp	r3, #2
 800f44c:	d002      	beq.n	800f454 <USBD_StdEPReq+0x1dc>
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d032      	beq.n	800f4b8 <USBD_StdEPReq+0x240>
 800f452:	e097      	b.n	800f584 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f454:	7bbb      	ldrb	r3, [r7, #14]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d007      	beq.n	800f46a <USBD_StdEPReq+0x1f2>
 800f45a:	7bbb      	ldrb	r3, [r7, #14]
 800f45c:	2b80      	cmp	r3, #128	; 0x80
 800f45e:	d004      	beq.n	800f46a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fbed 	bl	800fc42 <USBD_CtlError>
                break;
 800f468:	e091      	b.n	800f58e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f46a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	da0b      	bge.n	800f48a <USBD_StdEPReq+0x212>
 800f472:	7bbb      	ldrb	r3, [r7, #14]
 800f474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f478:	4613      	mov	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	4413      	add	r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	3310      	adds	r3, #16
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	4413      	add	r3, r2
 800f486:	3304      	adds	r3, #4
 800f488:	e00b      	b.n	800f4a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f48a:	7bbb      	ldrb	r3, [r7, #14]
 800f48c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f490:	4613      	mov	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2202      	movs	r2, #2
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fc37 	bl	800fd24 <USBD_CtlSendData>
              break;
 800f4b6:	e06a      	b.n	800f58e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da11      	bge.n	800f4e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4c0:	7bbb      	ldrb	r3, [r7, #14]
 800f4c2:	f003 020f 	and.w	r2, r3, #15
 800f4c6:	6879      	ldr	r1, [r7, #4]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	3324      	adds	r3, #36	; 0x24
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d117      	bne.n	800f50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4da:	6839      	ldr	r1, [r7, #0]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 fbb0 	bl	800fc42 <USBD_CtlError>
                  break;
 800f4e2:	e054      	b.n	800f58e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
 800f4e6:	f003 020f 	and.w	r2, r3, #15
 800f4ea:	6879      	ldr	r1, [r7, #4]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	440b      	add	r3, r1
 800f4f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d104      	bne.n	800f50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 fb9d 	bl	800fc42 <USBD_CtlError>
                  break;
 800f508:	e041      	b.n	800f58e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f50a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	da0b      	bge.n	800f52a <USBD_StdEPReq+0x2b2>
 800f512:	7bbb      	ldrb	r3, [r7, #14]
 800f514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f518:	4613      	mov	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4413      	add	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	3310      	adds	r3, #16
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	4413      	add	r3, r2
 800f526:	3304      	adds	r3, #4
 800f528:	e00b      	b.n	800f542 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
 800f52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f530:	4613      	mov	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	4413      	add	r3, r2
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	4413      	add	r3, r2
 800f540:	3304      	adds	r3, #4
 800f542:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <USBD_StdEPReq+0x2d8>
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
 800f54c:	2b80      	cmp	r3, #128	; 0x80
 800f54e:	d103      	bne.n	800f558 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
 800f556:	e00e      	b.n	800f576 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f558:	7bbb      	ldrb	r3, [r7, #14]
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f001 f9b5 	bl	80108cc <USBD_LL_IsStallEP>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	2201      	movs	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
 800f56e:	e002      	b.n	800f576 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2202      	movs	r2, #2
 800f57a:	4619      	mov	r1, r3
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fbd1 	bl	800fd24 <USBD_CtlSendData>
              break;
 800f582:	e004      	b.n	800f58e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fb5b 	bl	800fc42 <USBD_CtlError>
              break;
 800f58c:	bf00      	nop
          }
          break;
 800f58e:	e004      	b.n	800f59a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fb55 	bl	800fc42 <USBD_CtlError>
          break;
 800f598:	bf00      	nop
      }
      break;
 800f59a:	e005      	b.n	800f5a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f59c:	6839      	ldr	r1, [r7, #0]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 fb4f 	bl	800fc42 <USBD_CtlError>
      break;
 800f5a4:	e000      	b.n	800f5a8 <USBD_StdEPReq+0x330>
      break;
 800f5a6:	bf00      	nop
  }

  return ret;
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	885b      	ldrh	r3, [r3, #2]
 800f5ce:	0a1b      	lsrs	r3, r3, #8
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	2b06      	cmp	r3, #6
 800f5d6:	f200 8128 	bhi.w	800f82a <USBD_GetDescriptor+0x276>
 800f5da:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <USBD_GetDescriptor+0x2c>)
 800f5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e0:	0800f5fd 	.word	0x0800f5fd
 800f5e4:	0800f615 	.word	0x0800f615
 800f5e8:	0800f655 	.word	0x0800f655
 800f5ec:	0800f82b 	.word	0x0800f82b
 800f5f0:	0800f82b 	.word	0x0800f82b
 800f5f4:	0800f7cb 	.word	0x0800f7cb
 800f5f8:	0800f7f7 	.word	0x0800f7f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	7c12      	ldrb	r2, [r2, #16]
 800f608:	f107 0108 	add.w	r1, r7, #8
 800f60c:	4610      	mov	r0, r2
 800f60e:	4798      	blx	r3
 800f610:	60f8      	str	r0, [r7, #12]
      break;
 800f612:	e112      	b.n	800f83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	7c1b      	ldrb	r3, [r3, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10d      	bne.n	800f638 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f624:	f107 0208 	add.w	r2, r7, #8
 800f628:	4610      	mov	r0, r2
 800f62a:	4798      	blx	r3
 800f62c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	3301      	adds	r3, #1
 800f632:	2202      	movs	r2, #2
 800f634:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f636:	e100      	b.n	800f83a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f640:	f107 0208 	add.w	r2, r7, #8
 800f644:	4610      	mov	r0, r2
 800f646:	4798      	blx	r3
 800f648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	3301      	adds	r3, #1
 800f64e:	2202      	movs	r2, #2
 800f650:	701a      	strb	r2, [r3, #0]
      break;
 800f652:	e0f2      	b.n	800f83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	885b      	ldrh	r3, [r3, #2]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b05      	cmp	r3, #5
 800f65c:	f200 80ac 	bhi.w	800f7b8 <USBD_GetDescriptor+0x204>
 800f660:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <USBD_GetDescriptor+0xb4>)
 800f662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f666:	bf00      	nop
 800f668:	0800f681 	.word	0x0800f681
 800f66c:	0800f6b5 	.word	0x0800f6b5
 800f670:	0800f6e9 	.word	0x0800f6e9
 800f674:	0800f71d 	.word	0x0800f71d
 800f678:	0800f751 	.word	0x0800f751
 800f67c:	0800f785 	.word	0x0800f785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00b      	beq.n	800f6a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	7c12      	ldrb	r2, [r2, #16]
 800f698:	f107 0108 	add.w	r1, r7, #8
 800f69c:	4610      	mov	r0, r2
 800f69e:	4798      	blx	r3
 800f6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6a2:	e091      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6a4:	6839      	ldr	r1, [r7, #0]
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 facb 	bl	800fc42 <USBD_CtlError>
            err++;
 800f6ac:	7afb      	ldrb	r3, [r7, #11]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6b2:	e089      	b.n	800f7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00b      	beq.n	800f6d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	7c12      	ldrb	r2, [r2, #16]
 800f6cc:	f107 0108 	add.w	r1, r7, #8
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
 800f6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6d6:	e077      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fab1 	bl	800fc42 <USBD_CtlError>
            err++;
 800f6e0:	7afb      	ldrb	r3, [r7, #11]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6e6:	e06f      	b.n	800f7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00b      	beq.n	800f70c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	7c12      	ldrb	r2, [r2, #16]
 800f700:	f107 0108 	add.w	r1, r7, #8
 800f704:	4610      	mov	r0, r2
 800f706:	4798      	blx	r3
 800f708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f70a:	e05d      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 fa97 	bl	800fc42 <USBD_CtlError>
            err++;
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	3301      	adds	r3, #1
 800f718:	72fb      	strb	r3, [r7, #11]
          break;
 800f71a:	e055      	b.n	800f7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f722:	691b      	ldr	r3, [r3, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00b      	beq.n	800f740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	7c12      	ldrb	r2, [r2, #16]
 800f734:	f107 0108 	add.w	r1, r7, #8
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
 800f73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f73e:	e043      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 fa7d 	bl	800fc42 <USBD_CtlError>
            err++;
 800f748:	7afb      	ldrb	r3, [r7, #11]
 800f74a:	3301      	adds	r3, #1
 800f74c:	72fb      	strb	r3, [r7, #11]
          break;
 800f74e:	e03b      	b.n	800f7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f756:	695b      	ldr	r3, [r3, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00b      	beq.n	800f774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	7c12      	ldrb	r2, [r2, #16]
 800f768:	f107 0108 	add.w	r1, r7, #8
 800f76c:	4610      	mov	r0, r2
 800f76e:	4798      	blx	r3
 800f770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f772:	e029      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 fa63 	bl	800fc42 <USBD_CtlError>
            err++;
 800f77c:	7afb      	ldrb	r3, [r7, #11]
 800f77e:	3301      	adds	r3, #1
 800f780:	72fb      	strb	r3, [r7, #11]
          break;
 800f782:	e021      	b.n	800f7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00b      	beq.n	800f7a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	699b      	ldr	r3, [r3, #24]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	7c12      	ldrb	r2, [r2, #16]
 800f79c:	f107 0108 	add.w	r1, r7, #8
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	4798      	blx	r3
 800f7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7a6:	e00f      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7a8:	6839      	ldr	r1, [r7, #0]
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fa49 	bl	800fc42 <USBD_CtlError>
            err++;
 800f7b0:	7afb      	ldrb	r3, [r7, #11]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7b6:	e007      	b.n	800f7c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 fa41 	bl	800fc42 <USBD_CtlError>
          err++;
 800f7c0:	7afb      	ldrb	r3, [r7, #11]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f7c6:	bf00      	nop
      }
      break;
 800f7c8:	e037      	b.n	800f83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7c1b      	ldrb	r3, [r3, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d109      	bne.n	800f7e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7da:	f107 0208 	add.w	r2, r7, #8
 800f7de:	4610      	mov	r0, r2
 800f7e0:	4798      	blx	r3
 800f7e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7e4:	e029      	b.n	800f83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 fa2a 	bl	800fc42 <USBD_CtlError>
        err++;
 800f7ee:	7afb      	ldrb	r3, [r7, #11]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	72fb      	strb	r3, [r7, #11]
      break;
 800f7f4:	e021      	b.n	800f83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	7c1b      	ldrb	r3, [r3, #16]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d10d      	bne.n	800f81a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f806:	f107 0208 	add.w	r2, r7, #8
 800f80a:	4610      	mov	r0, r2
 800f80c:	4798      	blx	r3
 800f80e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3301      	adds	r3, #1
 800f814:	2207      	movs	r2, #7
 800f816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f818:	e00f      	b.n	800f83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fa10 	bl	800fc42 <USBD_CtlError>
        err++;
 800f822:	7afb      	ldrb	r3, [r7, #11]
 800f824:	3301      	adds	r3, #1
 800f826:	72fb      	strb	r3, [r7, #11]
      break;
 800f828:	e007      	b.n	800f83a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fa08 	bl	800fc42 <USBD_CtlError>
      err++;
 800f832:	7afb      	ldrb	r3, [r7, #11]
 800f834:	3301      	adds	r3, #1
 800f836:	72fb      	strb	r3, [r7, #11]
      break;
 800f838:	bf00      	nop
  }

  if (err != 0U)
 800f83a:	7afb      	ldrb	r3, [r7, #11]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d11e      	bne.n	800f87e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	88db      	ldrh	r3, [r3, #6]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d016      	beq.n	800f876 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f848:	893b      	ldrh	r3, [r7, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00e      	beq.n	800f86c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	88da      	ldrh	r2, [r3, #6]
 800f852:	893b      	ldrh	r3, [r7, #8]
 800f854:	4293      	cmp	r3, r2
 800f856:	bf28      	it	cs
 800f858:	4613      	movcs	r3, r2
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f85e:	893b      	ldrh	r3, [r7, #8]
 800f860:	461a      	mov	r2, r3
 800f862:	68f9      	ldr	r1, [r7, #12]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fa5d 	bl	800fd24 <USBD_CtlSendData>
 800f86a:	e009      	b.n	800f880 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f86c:	6839      	ldr	r1, [r7, #0]
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 f9e7 	bl	800fc42 <USBD_CtlError>
 800f874:	e004      	b.n	800f880 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 faae 	bl	800fdd8 <USBD_CtlSendStatus>
 800f87c:	e000      	b.n	800f880 <USBD_GetDescriptor+0x2cc>
    return;
 800f87e:	bf00      	nop
  }
}
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop

0800f888 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	889b      	ldrh	r3, [r3, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d131      	bne.n	800f8fe <USBD_SetAddress+0x76>
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	88db      	ldrh	r3, [r3, #6]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d12d      	bne.n	800f8fe <USBD_SetAddress+0x76>
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	885b      	ldrh	r3, [r3, #2]
 800f8a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f8a8:	d829      	bhi.n	800f8fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	885b      	ldrh	r3, [r3, #2]
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b03      	cmp	r3, #3
 800f8c0:	d104      	bne.n	800f8cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f9bc 	bl	800fc42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ca:	e01d      	b.n	800f908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	7bfa      	ldrb	r2, [r7, #15]
 800f8d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f001 f823 	bl	8010924 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 fa7a 	bl	800fdd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f2:	e009      	b.n	800f908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8fc:	e004      	b.n	800f908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 f99e 	bl	800fc42 <USBD_CtlError>
  }
}
 800f906:	bf00      	nop
 800f908:	bf00      	nop
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	885b      	ldrh	r3, [r3, #2]
 800f922:	b2da      	uxtb	r2, r3
 800f924:	4b4e      	ldr	r3, [pc, #312]	; (800fa60 <USBD_SetConfig+0x150>)
 800f926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f928:	4b4d      	ldr	r3, [pc, #308]	; (800fa60 <USBD_SetConfig+0x150>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d905      	bls.n	800f93c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f930:	6839      	ldr	r1, [r7, #0]
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 f985 	bl	800fc42 <USBD_CtlError>
    return USBD_FAIL;
 800f938:	2303      	movs	r3, #3
 800f93a:	e08c      	b.n	800fa56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b02      	cmp	r3, #2
 800f946:	d002      	beq.n	800f94e <USBD_SetConfig+0x3e>
 800f948:	2b03      	cmp	r3, #3
 800f94a:	d029      	beq.n	800f9a0 <USBD_SetConfig+0x90>
 800f94c:	e075      	b.n	800fa3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f94e:	4b44      	ldr	r3, [pc, #272]	; (800fa60 <USBD_SetConfig+0x150>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d020      	beq.n	800f998 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f956:	4b42      	ldr	r3, [pc, #264]	; (800fa60 <USBD_SetConfig+0x150>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	461a      	mov	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f960:	4b3f      	ldr	r3, [pc, #252]	; (800fa60 <USBD_SetConfig+0x150>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7fe ffe1 	bl	800e92e <USBD_SetClassConfig>
 800f96c:	4603      	mov	r3, r0
 800f96e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f970:	7bfb      	ldrb	r3, [r7, #15]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d008      	beq.n	800f988 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f962 	bl	800fc42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2202      	movs	r2, #2
 800f982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f986:	e065      	b.n	800fa54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 fa25 	bl	800fdd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2203      	movs	r2, #3
 800f992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f996:	e05d      	b.n	800fa54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fa1d 	bl	800fdd8 <USBD_CtlSendStatus>
      break;
 800f99e:	e059      	b.n	800fa54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9a0:	4b2f      	ldr	r3, [pc, #188]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d112      	bne.n	800f9ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f9b0:	4b2b      	ldr	r3, [pc, #172]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9ba:	4b29      	ldr	r3, [pc, #164]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	4619      	mov	r1, r3
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7fe ffd0 	bl	800e966 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 fa06 	bl	800fdd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9cc:	e042      	b.n	800fa54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f9ce:	4b24      	ldr	r3, [pc, #144]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d02a      	beq.n	800fa32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fe ffbe 	bl	800e966 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9ea:	4b1d      	ldr	r3, [pc, #116]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9f4:	4b1a      	ldr	r3, [pc, #104]	; (800fa60 <USBD_SetConfig+0x150>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7fe ff97 	bl	800e92e <USBD_SetClassConfig>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00f      	beq.n	800fa2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f918 	bl	800fc42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fe ffa3 	bl	800e966 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2202      	movs	r2, #2
 800fa24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa28:	e014      	b.n	800fa54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f9d4 	bl	800fdd8 <USBD_CtlSendStatus>
      break;
 800fa30:	e010      	b.n	800fa54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f9d0 	bl	800fdd8 <USBD_CtlSendStatus>
      break;
 800fa38:	e00c      	b.n	800fa54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f900 	bl	800fc42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa42:	4b07      	ldr	r3, [pc, #28]	; (800fa60 <USBD_SetConfig+0x150>)
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7fe ff8c 	bl	800e966 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa4e:	2303      	movs	r3, #3
 800fa50:	73fb      	strb	r3, [r7, #15]
      break;
 800fa52:	bf00      	nop
  }

  return ret;
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	20000d14 	.word	0x20000d14

0800fa64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	88db      	ldrh	r3, [r3, #6]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d004      	beq.n	800fa80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 f8e2 	bl	800fc42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa7e:	e023      	b.n	800fac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	dc02      	bgt.n	800fa92 <USBD_GetConfig+0x2e>
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	dc03      	bgt.n	800fa98 <USBD_GetConfig+0x34>
 800fa90:	e015      	b.n	800fabe <USBD_GetConfig+0x5a>
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d00b      	beq.n	800faae <USBD_GetConfig+0x4a>
 800fa96:	e012      	b.n	800fabe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	3308      	adds	r3, #8
 800faa2:	2201      	movs	r2, #1
 800faa4:	4619      	mov	r1, r3
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f93c 	bl	800fd24 <USBD_CtlSendData>
        break;
 800faac:	e00c      	b.n	800fac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3304      	adds	r3, #4
 800fab2:	2201      	movs	r2, #1
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f934 	bl	800fd24 <USBD_CtlSendData>
        break;
 800fabc:	e004      	b.n	800fac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 f8be 	bl	800fc42 <USBD_CtlError>
        break;
 800fac6:	bf00      	nop
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	3b01      	subs	r3, #1
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d81e      	bhi.n	800fb26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	88db      	ldrh	r3, [r3, #6]
 800faec:	2b02      	cmp	r3, #2
 800faee:	d004      	beq.n	800fafa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f8a5 	bl	800fc42 <USBD_CtlError>
        break;
 800faf8:	e01a      	b.n	800fb30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d005      	beq.n	800fb16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	f043 0202 	orr.w	r2, r3, #2
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	330c      	adds	r3, #12
 800fb1a:	2202      	movs	r2, #2
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f900 	bl	800fd24 <USBD_CtlSendData>
      break;
 800fb24:	e004      	b.n	800fb30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f88a 	bl	800fc42 <USBD_CtlError>
      break;
 800fb2e:	bf00      	nop
  }
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	885b      	ldrh	r3, [r3, #2]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d107      	bne.n	800fb5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f940 	bl	800fdd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fb58:	e013      	b.n	800fb82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	885b      	ldrh	r3, [r3, #2]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d10b      	bne.n	800fb7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	889b      	ldrh	r3, [r3, #4]
 800fb66:	0a1b      	lsrs	r3, r3, #8
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f930 	bl	800fdd8 <USBD_CtlSendStatus>
}
 800fb78:	e003      	b.n	800fb82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 f860 	bl	800fc42 <USBD_CtlError>
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d80b      	bhi.n	800fbba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	885b      	ldrh	r3, [r3, #2]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d10c      	bne.n	800fbc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f910 	bl	800fdd8 <USBD_CtlSendStatus>
      }
      break;
 800fbb8:	e004      	b.n	800fbc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 f840 	bl	800fc42 <USBD_CtlError>
      break;
 800fbc2:	e000      	b.n	800fbc6 <USBD_ClrFeature+0x3c>
      break;
 800fbc4:	bf00      	nop
  }
}
 800fbc6:	bf00      	nop
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b084      	sub	sp, #16
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	781a      	ldrb	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f7ff fa41 	bl	800f080 <SWAPBYTE>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	461a      	mov	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7ff fa34 	bl	800f080 <SWAPBYTE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3301      	adds	r3, #1
 800fc24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff fa27 	bl	800f080 <SWAPBYTE>
 800fc32:	4603      	mov	r3, r0
 800fc34:	461a      	mov	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	80da      	strh	r2, [r3, #6]
}
 800fc3a:	bf00      	nop
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b082      	sub	sp, #8
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc4c:	2180      	movs	r1, #128	; 0x80
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 fdd0 	bl	80107f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc54:	2100      	movs	r1, #0
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fdcc 	bl	80107f4 <USBD_LL_StallEP>
}
 800fc5c:	bf00      	nop
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d036      	beq.n	800fce8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc7e:	6938      	ldr	r0, [r7, #16]
 800fc80:	f000 f836 	bl	800fcf0 <USBD_GetLen>
 800fc84:	4603      	mov	r3, r0
 800fc86:	3301      	adds	r3, #1
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc92:	7dfb      	ldrb	r3, [r7, #23]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	4413      	add	r3, r2
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	7812      	ldrb	r2, [r2, #0]
 800fc9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
 800fca0:	3301      	adds	r3, #1
 800fca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	4413      	add	r3, r2
 800fcaa:	2203      	movs	r2, #3
 800fcac:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcb4:	e013      	b.n	800fcde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	4413      	add	r3, r2
 800fcbc:	693a      	ldr	r2, [r7, #16]
 800fcbe:	7812      	ldrb	r2, [r2, #0]
 800fcc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	613b      	str	r3, [r7, #16]
    idx++;
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	3301      	adds	r3, #1
 800fccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcd8:	7dfb      	ldrb	r3, [r7, #23]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1e7      	bne.n	800fcb6 <USBD_GetString+0x52>
 800fce6:	e000      	b.n	800fcea <USBD_GetString+0x86>
    return;
 800fce8:	bf00      	nop
  }
}
 800fcea:	3718      	adds	r7, #24
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd00:	e005      	b.n	800fd0e <USBD_GetLen+0x1e>
  {
    len++;
 800fd02:	7bfb      	ldrb	r3, [r7, #15]
 800fd04:	3301      	adds	r3, #1
 800fd06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1f5      	bne.n	800fd02 <USBD_GetLen+0x12>
  }

  return len;
 800fd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2202      	movs	r2, #2
 800fd34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	2100      	movs	r1, #0
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f000 fe20 	bl	8010990 <USBD_LL_Transmit>

  return USBD_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b084      	sub	sp, #16
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 fe0f 	bl	8010990 <USBD_LL_Transmit>

  return USBD_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2203      	movs	r2, #3
 800fd8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	2100      	movs	r1, #0
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f000 fe2a 	bl	8010a00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	60f8      	str	r0, [r7, #12]
 800fdbe:	60b9      	str	r1, [r7, #8]
 800fdc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f000 fe19 	bl	8010a00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2204      	movs	r2, #4
 800fde4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fde8:	2300      	movs	r3, #0
 800fdea:	2200      	movs	r2, #0
 800fdec:	2100      	movs	r1, #0
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fdce 	bl	8010990 <USBD_LL_Transmit>

  return USBD_OK;
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2205      	movs	r2, #5
 800fe0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe0e:	2300      	movs	r3, #0
 800fe10:	2200      	movs	r2, #0
 800fe12:	2100      	movs	r1, #0
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fdf3 	bl	8010a00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b087      	sub	sp, #28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe32:	2301      	movs	r3, #1
 800fe34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fe3a:	4b1f      	ldr	r3, [pc, #124]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe3c:	7a5b      	ldrb	r3, [r3, #9]
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d131      	bne.n	800fea8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe44:	4b1c      	ldr	r3, [pc, #112]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe46:	7a5b      	ldrb	r3, [r3, #9]
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe4e:	2100      	movs	r1, #0
 800fe50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fe52:	4b19      	ldr	r3, [pc, #100]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe54:	7a5b      	ldrb	r3, [r3, #9]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	4a17      	ldr	r2, [pc, #92]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4413      	add	r3, r2
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fe62:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe64:	7a5b      	ldrb	r3, [r3, #9]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	461a      	mov	r2, r3
 800fe6a:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe6c:	4413      	add	r3, r2
 800fe6e:	79fa      	ldrb	r2, [r7, #7]
 800fe70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe72:	4b11      	ldr	r3, [pc, #68]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe74:	7a5b      	ldrb	r3, [r3, #9]
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	1c5a      	adds	r2, r3, #1
 800fe7a:	b2d1      	uxtb	r1, r2
 800fe7c:	4a0e      	ldr	r2, [pc, #56]	; (800feb8 <FATFS_LinkDriverEx+0x94>)
 800fe7e:	7251      	strb	r1, [r2, #9]
 800fe80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe82:	7dbb      	ldrb	r3, [r7, #22]
 800fe84:	3330      	adds	r3, #48	; 0x30
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	223a      	movs	r2, #58	; 0x3a
 800fe92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	3302      	adds	r3, #2
 800fe98:	222f      	movs	r2, #47	; 0x2f
 800fe9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	3303      	adds	r3, #3
 800fea0:	2200      	movs	r2, #0
 800fea2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	371c      	adds	r7, #28
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	20000d18 	.word	0x20000d18

0800febc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fec6:	2200      	movs	r2, #0
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff ffaa 	bl	800fe24 <FATFS_LinkDriverEx>
 800fed0:	4603      	mov	r3, r0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fee0:	2200      	movs	r2, #0
 800fee2:	4912      	ldr	r1, [pc, #72]	; (800ff2c <MX_USB_DEVICE_Init+0x50>)
 800fee4:	4812      	ldr	r0, [pc, #72]	; (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800fee6:	f7fe fca5 	bl	800e834 <USBD_Init>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fef0:	f7f1 fd94 	bl	8001a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fef4:	490f      	ldr	r1, [pc, #60]	; (800ff34 <MX_USB_DEVICE_Init+0x58>)
 800fef6:	480e      	ldr	r0, [pc, #56]	; (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800fef8:	f7fe fccc 	bl	800e894 <USBD_RegisterClass>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff02:	f7f1 fd8b 	bl	8001a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff06:	490c      	ldr	r1, [pc, #48]	; (800ff38 <MX_USB_DEVICE_Init+0x5c>)
 800ff08:	4809      	ldr	r0, [pc, #36]	; (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800ff0a:	f7fe fbc3 	bl	800e694 <USBD_CDC_RegisterInterface>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff14:	f7f1 fd82 	bl	8001a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff18:	4805      	ldr	r0, [pc, #20]	; (800ff30 <MX_USB_DEVICE_Init+0x54>)
 800ff1a:	f7fe fcf1 	bl	800e900 <USBD_Start>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff24:	f7f1 fd7a 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff28:	bf00      	nop
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	200000b0 	.word	0x200000b0
 800ff30:	20000d24 	.word	0x20000d24
 800ff34:	2000001c 	.word	0x2000001c
 800ff38:	2000009c 	.word	0x2000009c

0800ff3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff40:	2200      	movs	r2, #0
 800ff42:	4905      	ldr	r1, [pc, #20]	; (800ff58 <CDC_Init_FS+0x1c>)
 800ff44:	4805      	ldr	r0, [pc, #20]	; (800ff5c <CDC_Init_FS+0x20>)
 800ff46:	f7fe fbbf 	bl	800e6c8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff4a:	4905      	ldr	r1, [pc, #20]	; (800ff60 <CDC_Init_FS+0x24>)
 800ff4c:	4803      	ldr	r0, [pc, #12]	; (800ff5c <CDC_Init_FS+0x20>)
 800ff4e:	f7fe fbdd 	bl	800e70c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800ff52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20001804 	.word	0x20001804
 800ff5c:	20000d24 	.word	0x20000d24
 800ff60:	20001004 	.word	0x20001004

0800ff64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800ff68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	6039      	str	r1, [r7, #0]
 800ff7e:	71fb      	strb	r3, [r7, #7]
 800ff80:	4613      	mov	r3, r2
 800ff82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	2b23      	cmp	r3, #35	; 0x23
 800ff88:	d84a      	bhi.n	8010020 <CDC_Control_FS+0xac>
 800ff8a:	a201      	add	r2, pc, #4	; (adr r2, 800ff90 <CDC_Control_FS+0x1c>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	08010021 	.word	0x08010021
 800ff94:	08010021 	.word	0x08010021
 800ff98:	08010021 	.word	0x08010021
 800ff9c:	08010021 	.word	0x08010021
 800ffa0:	08010021 	.word	0x08010021
 800ffa4:	08010021 	.word	0x08010021
 800ffa8:	08010021 	.word	0x08010021
 800ffac:	08010021 	.word	0x08010021
 800ffb0:	08010021 	.word	0x08010021
 800ffb4:	08010021 	.word	0x08010021
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	08010021 	.word	0x08010021
 800ffc0:	08010021 	.word	0x08010021
 800ffc4:	08010021 	.word	0x08010021
 800ffc8:	08010021 	.word	0x08010021
 800ffcc:	08010021 	.word	0x08010021
 800ffd0:	08010021 	.word	0x08010021
 800ffd4:	08010021 	.word	0x08010021
 800ffd8:	08010021 	.word	0x08010021
 800ffdc:	08010021 	.word	0x08010021
 800ffe0:	08010021 	.word	0x08010021
 800ffe4:	08010021 	.word	0x08010021
 800ffe8:	08010021 	.word	0x08010021
 800ffec:	08010021 	.word	0x08010021
 800fff0:	08010021 	.word	0x08010021
 800fff4:	08010021 	.word	0x08010021
 800fff8:	08010021 	.word	0x08010021
 800fffc:	08010021 	.word	0x08010021
 8010000:	08010021 	.word	0x08010021
 8010004:	08010021 	.word	0x08010021
 8010008:	08010021 	.word	0x08010021
 801000c:	08010021 	.word	0x08010021
 8010010:	08010021 	.word	0x08010021
 8010014:	08010021 	.word	0x08010021
 8010018:	08010021 	.word	0x08010021
 801001c:	08010021 	.word	0x08010021
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8010020:	bf00      	nop
	}

	return (USBD_OK);
 8010022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010024:	4618      	mov	r0, r3
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	480b      	ldr	r0, [pc, #44]	; (801006c <CDC_Receive_FS+0x3c>)
 801003e:	f7fe fb65 	bl	800e70c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010042:	480a      	ldr	r0, [pc, #40]	; (801006c <CDC_Receive_FS+0x3c>)
 8010044:	f7fe fbc0 	bl	800e7c8 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 801004e:	7bfb      	ldrb	r3, [r7, #15]
 8010050:	461a      	mov	r2, r3
 8010052:	6879      	ldr	r1, [r7, #4]
 8010054:	4806      	ldr	r0, [pc, #24]	; (8010070 <CDC_Receive_FS+0x40>)
 8010056:	f000 fd69 	bl	8010b2c <memcpy>

	usb_Rx_ready = 1;
 801005a:	4b06      	ldr	r3, [pc, #24]	; (8010074 <CDC_Receive_FS+0x44>)
 801005c:	2201      	movs	r2, #1
 801005e:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010060:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	20000d24 	.word	0x20000d24
 8010070:	20001000 	.word	0x20001000
 8010074:	20001002 	.word	0x20001002

08010078 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	460b      	mov	r3, r1
 8010082:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010084:	2300      	movs	r3, #0
 8010086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010088:	4b0d      	ldr	r3, [pc, #52]	; (80100c0 <CDC_Transmit_FS+0x48>)
 801008a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801008e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 801009a:	2301      	movs	r3, #1
 801009c:	e00b      	b.n	80100b6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801009e:	887b      	ldrh	r3, [r7, #2]
 80100a0:	461a      	mov	r2, r3
 80100a2:	6879      	ldr	r1, [r7, #4]
 80100a4:	4806      	ldr	r0, [pc, #24]	; (80100c0 <CDC_Transmit_FS+0x48>)
 80100a6:	f7fe fb0f 	bl	800e6c8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100aa:	4805      	ldr	r0, [pc, #20]	; (80100c0 <CDC_Transmit_FS+0x48>)
 80100ac:	f7fe fb4c 	bl	800e748 <USBD_CDC_TransmitPacket>
 80100b0:	4603      	mov	r3, r0
 80100b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	20000d24 	.word	0x20000d24

080100c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b087      	sub	sp, #28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	371c      	adds	r7, #28
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
	...

080100e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	6039      	str	r1, [r7, #0]
 80100f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2212      	movs	r2, #18
 80100f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100fa:	4b03      	ldr	r3, [pc, #12]	; (8010108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	200000cc 	.word	0x200000cc

0801010c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	6039      	str	r1, [r7, #0]
 8010116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	2204      	movs	r2, #4
 801011c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801011e:	4b03      	ldr	r3, [pc, #12]	; (801012c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	200000e0 	.word	0x200000e0

08010130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	6039      	str	r1, [r7, #0]
 801013a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801013c:	79fb      	ldrb	r3, [r7, #7]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d105      	bne.n	801014e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	4907      	ldr	r1, [pc, #28]	; (8010164 <USBD_FS_ProductStrDescriptor+0x34>)
 8010146:	4808      	ldr	r0, [pc, #32]	; (8010168 <USBD_FS_ProductStrDescriptor+0x38>)
 8010148:	f7ff fd8c 	bl	800fc64 <USBD_GetString>
 801014c:	e004      	b.n	8010158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	4904      	ldr	r1, [pc, #16]	; (8010164 <USBD_FS_ProductStrDescriptor+0x34>)
 8010152:	4805      	ldr	r0, [pc, #20]	; (8010168 <USBD_FS_ProductStrDescriptor+0x38>)
 8010154:	f7ff fd86 	bl	800fc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010158:	4b02      	ldr	r3, [pc, #8]	; (8010164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801015a:	4618      	mov	r0, r3
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	20002004 	.word	0x20002004
 8010168:	080136f8 	.word	0x080136f8

0801016c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	6039      	str	r1, [r7, #0]
 8010176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	4904      	ldr	r1, [pc, #16]	; (801018c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801017c:	4804      	ldr	r0, [pc, #16]	; (8010190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801017e:	f7ff fd71 	bl	800fc64 <USBD_GetString>
  return USBD_StrDesc;
 8010182:	4b02      	ldr	r3, [pc, #8]	; (801018c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010184:	4618      	mov	r0, r3
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	20002004 	.word	0x20002004
 8010190:	08013710 	.word	0x08013710

08010194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	4603      	mov	r3, r0
 801019c:	6039      	str	r1, [r7, #0]
 801019e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	221a      	movs	r2, #26
 80101a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101a6:	f000 f843 	bl	8010230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101aa:	4b02      	ldr	r3, [pc, #8]	; (80101b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	200000e4 	.word	0x200000e4

080101b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	6039      	str	r1, [r7, #0]
 80101c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101c4:	79fb      	ldrb	r3, [r7, #7]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d105      	bne.n	80101d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	4907      	ldr	r1, [pc, #28]	; (80101ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80101ce:	4808      	ldr	r0, [pc, #32]	; (80101f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101d0:	f7ff fd48 	bl	800fc64 <USBD_GetString>
 80101d4:	e004      	b.n	80101e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	4904      	ldr	r1, [pc, #16]	; (80101ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80101da:	4805      	ldr	r0, [pc, #20]	; (80101f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101dc:	f7ff fd42 	bl	800fc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101e0:	4b02      	ldr	r3, [pc, #8]	; (80101ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	20002004 	.word	0x20002004
 80101f0:	08013724 	.word	0x08013724

080101f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	6039      	str	r1, [r7, #0]
 80101fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010200:	79fb      	ldrb	r3, [r7, #7]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d105      	bne.n	8010212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	4907      	ldr	r1, [pc, #28]	; (8010228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801020a:	4808      	ldr	r0, [pc, #32]	; (801022c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801020c:	f7ff fd2a 	bl	800fc64 <USBD_GetString>
 8010210:	e004      	b.n	801021c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010212:	683a      	ldr	r2, [r7, #0]
 8010214:	4904      	ldr	r1, [pc, #16]	; (8010228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010216:	4805      	ldr	r0, [pc, #20]	; (801022c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010218:	f7ff fd24 	bl	800fc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 801021c:	4b02      	ldr	r3, [pc, #8]	; (8010228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801021e:	4618      	mov	r0, r3
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20002004 	.word	0x20002004
 801022c:	08013730 	.word	0x08013730

08010230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010236:	4b0f      	ldr	r3, [pc, #60]	; (8010274 <Get_SerialNum+0x44>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801023c:	4b0e      	ldr	r3, [pc, #56]	; (8010278 <Get_SerialNum+0x48>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010242:	4b0e      	ldr	r3, [pc, #56]	; (801027c <Get_SerialNum+0x4c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4413      	add	r3, r2
 801024e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d009      	beq.n	801026a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010256:	2208      	movs	r2, #8
 8010258:	4909      	ldr	r1, [pc, #36]	; (8010280 <Get_SerialNum+0x50>)
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 f814 	bl	8010288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010260:	2204      	movs	r2, #4
 8010262:	4908      	ldr	r1, [pc, #32]	; (8010284 <Get_SerialNum+0x54>)
 8010264:	68b8      	ldr	r0, [r7, #8]
 8010266:	f000 f80f 	bl	8010288 <IntToUnicode>
  }
}
 801026a:	bf00      	nop
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	1fff7590 	.word	0x1fff7590
 8010278:	1fff7594 	.word	0x1fff7594
 801027c:	1fff7598 	.word	0x1fff7598
 8010280:	200000e6 	.word	0x200000e6
 8010284:	200000f6 	.word	0x200000f6

08010288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	4613      	mov	r3, r2
 8010294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010296:	2300      	movs	r3, #0
 8010298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801029a:	2300      	movs	r3, #0
 801029c:	75fb      	strb	r3, [r7, #23]
 801029e:	e027      	b.n	80102f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	0f1b      	lsrs	r3, r3, #28
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d80b      	bhi.n	80102c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	0f1b      	lsrs	r3, r3, #28
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	7dfb      	ldrb	r3, [r7, #23]
 80102b0:	005b      	lsls	r3, r3, #1
 80102b2:	4619      	mov	r1, r3
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	440b      	add	r3, r1
 80102b8:	3230      	adds	r2, #48	; 0x30
 80102ba:	b2d2      	uxtb	r2, r2
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	e00a      	b.n	80102d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	0f1b      	lsrs	r3, r3, #28
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4619      	mov	r1, r3
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	440b      	add	r3, r1
 80102d0:	3237      	adds	r2, #55	; 0x37
 80102d2:	b2d2      	uxtb	r2, r2
 80102d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	011b      	lsls	r3, r3, #4
 80102da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102dc:	7dfb      	ldrb	r3, [r7, #23]
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	3301      	adds	r3, #1
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	4413      	add	r3, r2
 80102e6:	2200      	movs	r2, #0
 80102e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
 80102ec:	3301      	adds	r3, #1
 80102ee:	75fb      	strb	r3, [r7, #23]
 80102f0:	7dfa      	ldrb	r2, [r7, #23]
 80102f2:	79fb      	ldrb	r3, [r7, #7]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d3d3      	bcc.n	80102a0 <IntToUnicode+0x18>
  }
}
 80102f8:	bf00      	nop
 80102fa:	bf00      	nop
 80102fc:	371c      	adds	r7, #28
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
	...

08010308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b0b0      	sub	sp, #192	; 0xc0
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010310:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
 8010318:	605a      	str	r2, [r3, #4]
 801031a:	609a      	str	r2, [r3, #8]
 801031c:	60da      	str	r2, [r3, #12]
 801031e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010320:	f107 0318 	add.w	r3, r7, #24
 8010324:	2294      	movs	r2, #148	; 0x94
 8010326:	2100      	movs	r1, #0
 8010328:	4618      	mov	r0, r3
 801032a:	f000 fc0d 	bl	8010b48 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010336:	d163      	bne.n	8010400 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801033c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801033e:	2300      	movs	r3, #0
 8010340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010344:	f107 0318 	add.w	r3, r7, #24
 8010348:	4618      	mov	r0, r3
 801034a:	f7f5 fce7 	bl	8005d1c <HAL_RCCEx_PeriphCLKConfig>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d001      	beq.n	8010358 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010354:	f7f1 fb62 	bl	8001a1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010358:	4b2b      	ldr	r3, [pc, #172]	; (8010408 <HAL_PCD_MspInit+0x100>)
 801035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801035c:	4a2a      	ldr	r2, [pc, #168]	; (8010408 <HAL_PCD_MspInit+0x100>)
 801035e:	f043 0301 	orr.w	r3, r3, #1
 8010362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010364:	4b28      	ldr	r3, [pc, #160]	; (8010408 <HAL_PCD_MspInit+0x100>)
 8010366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010368:	f003 0301 	and.w	r3, r3, #1
 801036c:	617b      	str	r3, [r7, #20]
 801036e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010370:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010378:	2302      	movs	r3, #2
 801037a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801037e:	2300      	movs	r3, #0
 8010380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010384:	2303      	movs	r3, #3
 8010386:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801038a:	230a      	movs	r3, #10
 801038c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010390:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010394:	4619      	mov	r1, r3
 8010396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801039a:	f7f3 f817 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801039e:	4b1a      	ldr	r3, [pc, #104]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103a2:	4a19      	ldr	r2, [pc, #100]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80103a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80103aa:	4b17      	ldr	r3, [pc, #92]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80103b2:	613b      	str	r3, [r7, #16]
 80103b4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80103b6:	4b14      	ldr	r3, [pc, #80]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d114      	bne.n	80103ec <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80103c2:	4b11      	ldr	r3, [pc, #68]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103c6:	4a10      	ldr	r2, [pc, #64]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103cc:	6593      	str	r3, [r2, #88]	; 0x58
 80103ce:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80103da:	f7f4 fd8b 	bl	8004ef4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80103de:	4b0a      	ldr	r3, [pc, #40]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103e2:	4a09      	ldr	r2, [pc, #36]	; (8010408 <HAL_PCD_MspInit+0x100>)
 80103e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103e8:	6593      	str	r3, [r2, #88]	; 0x58
 80103ea:	e001      	b.n	80103f0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80103ec:	f7f4 fd82 	bl	8004ef4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103f0:	2200      	movs	r2, #0
 80103f2:	2100      	movs	r1, #0
 80103f4:	2043      	movs	r0, #67	; 0x43
 80103f6:	f7f2 fc84 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103fa:	2043      	movs	r0, #67	; 0x43
 80103fc:	f7f2 fc9d 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010400:	bf00      	nop
 8010402:	37c0      	adds	r7, #192	; 0xc0
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	40021000 	.word	0x40021000

0801040c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010420:	4619      	mov	r1, r3
 8010422:	4610      	mov	r0, r2
 8010424:	f7fe fab9 	bl	800e99a <USBD_LL_SetupStage>
}
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	460b      	mov	r3, r1
 801043a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010442:	78fa      	ldrb	r2, [r7, #3]
 8010444:	6879      	ldr	r1, [r7, #4]
 8010446:	4613      	mov	r3, r2
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	4413      	add	r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	440b      	add	r3, r1
 8010450:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	78fb      	ldrb	r3, [r7, #3]
 8010458:	4619      	mov	r1, r3
 801045a:	f7fe faf3 	bl	800ea44 <USBD_LL_DataOutStage>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
 801046e:	460b      	mov	r3, r1
 8010470:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010478:	78fa      	ldrb	r2, [r7, #3]
 801047a:	6879      	ldr	r1, [r7, #4]
 801047c:	4613      	mov	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	4413      	add	r3, r2
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	440b      	add	r3, r1
 8010486:	3348      	adds	r3, #72	; 0x48
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	4619      	mov	r1, r3
 801048e:	f7fe fb8c 	bl	800ebaa <USBD_LL_DataInStage>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fe fcc6 	bl	800ee3a <USBD_LL_SOF>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b084      	sub	sp, #16
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104be:	2301      	movs	r3, #1
 80104c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	691b      	ldr	r3, [r3, #16]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d001      	beq.n	80104ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80104ca:	f7f1 faa7 	bl	8001a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104d4:	7bfa      	ldrb	r2, [r7, #15]
 80104d6:	4611      	mov	r1, r2
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fc6a 	bl	800edb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fe fc12 	bl	800ed0e <USBD_LL_Reset>
}
 80104ea:	bf00      	nop
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	6812      	ldr	r2, [r2, #0]
 801050a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801050e:	f043 0301 	orr.w	r3, r3, #1
 8010512:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801051a:	4618      	mov	r0, r3
 801051c:	f7fe fc59 	bl	800edd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6a1b      	ldr	r3, [r3, #32]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d005      	beq.n	8010534 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010528:	4b04      	ldr	r3, [pc, #16]	; (801053c <HAL_PCD_SuspendCallback+0x48>)
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	4a03      	ldr	r2, [pc, #12]	; (801053c <HAL_PCD_SuspendCallback+0x48>)
 801052e:	f043 0306 	orr.w	r3, r3, #6
 8010532:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	e000ed00 	.word	0xe000ed00

08010540 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801055a:	f023 0301 	bic.w	r3, r3, #1
 801055e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a1b      	ldr	r3, [r3, #32]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d007      	beq.n	8010578 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010568:	4b08      	ldr	r3, [pc, #32]	; (801058c <HAL_PCD_ResumeCallback+0x4c>)
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	4a07      	ldr	r2, [pc, #28]	; (801058c <HAL_PCD_ResumeCallback+0x4c>)
 801056e:	f023 0306 	bic.w	r3, r3, #6
 8010572:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010574:	f000 faa8 	bl	8010ac8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fc43 	bl	800ee0a <USBD_LL_Resume>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	e000ed00 	.word	0xe000ed00

08010590 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105a2:	78fa      	ldrb	r2, [r7, #3]
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fe fc99 	bl	800eede <USBD_LL_IsoOUTIncomplete>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105c6:	78fa      	ldrb	r2, [r7, #3]
 80105c8:	4611      	mov	r1, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe fc55 	bl	800ee7a <USBD_LL_IsoINIncomplete>
}
 80105d0:	bf00      	nop
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe fcab 	bl	800ef42 <USBD_LL_DevConnected>
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe fca8 	bl	800ef58 <USBD_LL_DevDisconnected>
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d13c      	bne.n	801069a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010620:	4a20      	ldr	r2, [pc, #128]	; (80106a4 <USBD_LL_Init+0x94>)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a1e      	ldr	r2, [pc, #120]	; (80106a4 <USBD_LL_Init+0x94>)
 801062c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010630:	4b1c      	ldr	r3, [pc, #112]	; (80106a4 <USBD_LL_Init+0x94>)
 8010632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010636:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010638:	4b1a      	ldr	r3, [pc, #104]	; (80106a4 <USBD_LL_Init+0x94>)
 801063a:	2206      	movs	r2, #6
 801063c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801063e:	4b19      	ldr	r3, [pc, #100]	; (80106a4 <USBD_LL_Init+0x94>)
 8010640:	2202      	movs	r2, #2
 8010642:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010644:	4b17      	ldr	r3, [pc, #92]	; (80106a4 <USBD_LL_Init+0x94>)
 8010646:	2202      	movs	r2, #2
 8010648:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801064a:	4b16      	ldr	r3, [pc, #88]	; (80106a4 <USBD_LL_Init+0x94>)
 801064c:	2200      	movs	r2, #0
 801064e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010650:	4b14      	ldr	r3, [pc, #80]	; (80106a4 <USBD_LL_Init+0x94>)
 8010652:	2200      	movs	r2, #0
 8010654:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010656:	4b13      	ldr	r3, [pc, #76]	; (80106a4 <USBD_LL_Init+0x94>)
 8010658:	2200      	movs	r2, #0
 801065a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801065c:	4b11      	ldr	r3, [pc, #68]	; (80106a4 <USBD_LL_Init+0x94>)
 801065e:	2200      	movs	r2, #0
 8010660:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010662:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <USBD_LL_Init+0x94>)
 8010664:	2200      	movs	r2, #0
 8010666:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010668:	4b0e      	ldr	r3, [pc, #56]	; (80106a4 <USBD_LL_Init+0x94>)
 801066a:	2200      	movs	r2, #0
 801066c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801066e:	480d      	ldr	r0, [pc, #52]	; (80106a4 <USBD_LL_Init+0x94>)
 8010670:	f7f3 f9c8 	bl	8003a04 <HAL_PCD_Init>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801067a:	f7f1 f9cf 	bl	8001a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801067e:	2180      	movs	r1, #128	; 0x80
 8010680:	4808      	ldr	r0, [pc, #32]	; (80106a4 <USBD_LL_Init+0x94>)
 8010682:	f7f4 fb32 	bl	8004cea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010686:	2240      	movs	r2, #64	; 0x40
 8010688:	2100      	movs	r1, #0
 801068a:	4806      	ldr	r0, [pc, #24]	; (80106a4 <USBD_LL_Init+0x94>)
 801068c:	f7f4 fae6 	bl	8004c5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010690:	2280      	movs	r2, #128	; 0x80
 8010692:	2101      	movs	r1, #1
 8010694:	4803      	ldr	r0, [pc, #12]	; (80106a4 <USBD_LL_Init+0x94>)
 8010696:	f7f4 fae1 	bl	8004c5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	20002204 	.word	0x20002204

080106a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106b4:	2300      	movs	r3, #0
 80106b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f3 fac4 	bl	8003c4c <HAL_PCD_Start>
 80106c4:	4603      	mov	r3, r0
 80106c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d816      	bhi.n	80106fc <USBD_LL_Start+0x54>
 80106ce:	a201      	add	r2, pc, #4	; (adr r2, 80106d4 <USBD_LL_Start+0x2c>)
 80106d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d4:	080106e5 	.word	0x080106e5
 80106d8:	080106eb 	.word	0x080106eb
 80106dc:	080106f1 	.word	0x080106f1
 80106e0:	080106f7 	.word	0x080106f7
    case HAL_OK :
      usb_status = USBD_OK;
 80106e4:	2300      	movs	r3, #0
 80106e6:	73fb      	strb	r3, [r7, #15]
    break;
 80106e8:	e00b      	b.n	8010702 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106ea:	2303      	movs	r3, #3
 80106ec:	73fb      	strb	r3, [r7, #15]
    break;
 80106ee:	e008      	b.n	8010702 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106f0:	2301      	movs	r3, #1
 80106f2:	73fb      	strb	r3, [r7, #15]
    break;
 80106f4:	e005      	b.n	8010702 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106f6:	2303      	movs	r3, #3
 80106f8:	73fb      	strb	r3, [r7, #15]
    break;
 80106fa:	e002      	b.n	8010702 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80106fc:	2303      	movs	r3, #3
 80106fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010700:	bf00      	nop
  }
  return usb_status;
 8010702:	7bfb      	ldrb	r3, [r7, #15]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3710      	adds	r7, #16
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	4608      	mov	r0, r1
 8010716:	4611      	mov	r1, r2
 8010718:	461a      	mov	r2, r3
 801071a:	4603      	mov	r3, r0
 801071c:	70fb      	strb	r3, [r7, #3]
 801071e:	460b      	mov	r3, r1
 8010720:	70bb      	strb	r3, [r7, #2]
 8010722:	4613      	mov	r3, r2
 8010724:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010726:	2300      	movs	r3, #0
 8010728:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801072a:	2300      	movs	r3, #0
 801072c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010734:	78bb      	ldrb	r3, [r7, #2]
 8010736:	883a      	ldrh	r2, [r7, #0]
 8010738:	78f9      	ldrb	r1, [r7, #3]
 801073a:	f7f3 ff6e 	bl	800461a <HAL_PCD_EP_Open>
 801073e:	4603      	mov	r3, r0
 8010740:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010742:	7bbb      	ldrb	r3, [r7, #14]
 8010744:	2b03      	cmp	r3, #3
 8010746:	d817      	bhi.n	8010778 <USBD_LL_OpenEP+0x6c>
 8010748:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <USBD_LL_OpenEP+0x44>)
 801074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074e:	bf00      	nop
 8010750:	08010761 	.word	0x08010761
 8010754:	08010767 	.word	0x08010767
 8010758:	0801076d 	.word	0x0801076d
 801075c:	08010773 	.word	0x08010773
    case HAL_OK :
      usb_status = USBD_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73fb      	strb	r3, [r7, #15]
    break;
 8010764:	e00b      	b.n	801077e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010766:	2303      	movs	r3, #3
 8010768:	73fb      	strb	r3, [r7, #15]
    break;
 801076a:	e008      	b.n	801077e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801076c:	2301      	movs	r3, #1
 801076e:	73fb      	strb	r3, [r7, #15]
    break;
 8010770:	e005      	b.n	801077e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010772:	2303      	movs	r3, #3
 8010774:	73fb      	strb	r3, [r7, #15]
    break;
 8010776:	e002      	b.n	801077e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010778:	2303      	movs	r3, #3
 801077a:	73fb      	strb	r3, [r7, #15]
    break;
 801077c:	bf00      	nop
  }
  return usb_status;
 801077e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010794:	2300      	movs	r3, #0
 8010796:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107a2:	78fa      	ldrb	r2, [r7, #3]
 80107a4:	4611      	mov	r1, r2
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7f3 ff9f 	bl	80046ea <HAL_PCD_EP_Close>
 80107ac:	4603      	mov	r3, r0
 80107ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80107b0:	7bbb      	ldrb	r3, [r7, #14]
 80107b2:	2b03      	cmp	r3, #3
 80107b4:	d816      	bhi.n	80107e4 <USBD_LL_CloseEP+0x5c>
 80107b6:	a201      	add	r2, pc, #4	; (adr r2, 80107bc <USBD_LL_CloseEP+0x34>)
 80107b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107bc:	080107cd 	.word	0x080107cd
 80107c0:	080107d3 	.word	0x080107d3
 80107c4:	080107d9 	.word	0x080107d9
 80107c8:	080107df 	.word	0x080107df
    case HAL_OK :
      usb_status = USBD_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73fb      	strb	r3, [r7, #15]
    break;
 80107d0:	e00b      	b.n	80107ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107d2:	2303      	movs	r3, #3
 80107d4:	73fb      	strb	r3, [r7, #15]
    break;
 80107d6:	e008      	b.n	80107ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107d8:	2301      	movs	r3, #1
 80107da:	73fb      	strb	r3, [r7, #15]
    break;
 80107dc:	e005      	b.n	80107ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107de:	2303      	movs	r3, #3
 80107e0:	73fb      	strb	r3, [r7, #15]
    break;
 80107e2:	e002      	b.n	80107ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80107e4:	2303      	movs	r3, #3
 80107e6:	73fb      	strb	r3, [r7, #15]
    break;
 80107e8:	bf00      	nop
  }
  return usb_status;
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3710      	adds	r7, #16
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	460b      	mov	r3, r1
 80107fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801080e:	78fa      	ldrb	r2, [r7, #3]
 8010810:	4611      	mov	r1, r2
 8010812:	4618      	mov	r0, r3
 8010814:	f7f4 f82e 	bl	8004874 <HAL_PCD_EP_SetStall>
 8010818:	4603      	mov	r3, r0
 801081a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801081c:	7bbb      	ldrb	r3, [r7, #14]
 801081e:	2b03      	cmp	r3, #3
 8010820:	d816      	bhi.n	8010850 <USBD_LL_StallEP+0x5c>
 8010822:	a201      	add	r2, pc, #4	; (adr r2, 8010828 <USBD_LL_StallEP+0x34>)
 8010824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010828:	08010839 	.word	0x08010839
 801082c:	0801083f 	.word	0x0801083f
 8010830:	08010845 	.word	0x08010845
 8010834:	0801084b 	.word	0x0801084b
    case HAL_OK :
      usb_status = USBD_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
    break;
 801083c:	e00b      	b.n	8010856 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801083e:	2303      	movs	r3, #3
 8010840:	73fb      	strb	r3, [r7, #15]
    break;
 8010842:	e008      	b.n	8010856 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010844:	2301      	movs	r3, #1
 8010846:	73fb      	strb	r3, [r7, #15]
    break;
 8010848:	e005      	b.n	8010856 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801084a:	2303      	movs	r3, #3
 801084c:	73fb      	strb	r3, [r7, #15]
    break;
 801084e:	e002      	b.n	8010856 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010850:	2303      	movs	r3, #3
 8010852:	73fb      	strb	r3, [r7, #15]
    break;
 8010854:	bf00      	nop
  }
  return usb_status;
 8010856:	7bfb      	ldrb	r3, [r7, #15]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010870:	2300      	movs	r3, #0
 8010872:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801087a:	78fa      	ldrb	r2, [r7, #3]
 801087c:	4611      	mov	r1, r2
 801087e:	4618      	mov	r0, r3
 8010880:	f7f4 f85a 	bl	8004938 <HAL_PCD_EP_ClrStall>
 8010884:	4603      	mov	r3, r0
 8010886:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010888:	7bbb      	ldrb	r3, [r7, #14]
 801088a:	2b03      	cmp	r3, #3
 801088c:	d816      	bhi.n	80108bc <USBD_LL_ClearStallEP+0x5c>
 801088e:	a201      	add	r2, pc, #4	; (adr r2, 8010894 <USBD_LL_ClearStallEP+0x34>)
 8010890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010894:	080108a5 	.word	0x080108a5
 8010898:	080108ab 	.word	0x080108ab
 801089c:	080108b1 	.word	0x080108b1
 80108a0:	080108b7 	.word	0x080108b7
    case HAL_OK :
      usb_status = USBD_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
    break;
 80108a8:	e00b      	b.n	80108c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108aa:	2303      	movs	r3, #3
 80108ac:	73fb      	strb	r3, [r7, #15]
    break;
 80108ae:	e008      	b.n	80108c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
    break;
 80108b4:	e005      	b.n	80108c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108b6:	2303      	movs	r3, #3
 80108b8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ba:	e002      	b.n	80108c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	bf00      	nop
  }
  return usb_status;
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	460b      	mov	r3, r1
 80108d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80108e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	da0b      	bge.n	8010900 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80108e8:	78fb      	ldrb	r3, [r7, #3]
 80108ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108ee:	68f9      	ldr	r1, [r7, #12]
 80108f0:	4613      	mov	r3, r2
 80108f2:	00db      	lsls	r3, r3, #3
 80108f4:	4413      	add	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	440b      	add	r3, r1
 80108fa:	333e      	adds	r3, #62	; 0x3e
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	e00b      	b.n	8010918 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010900:	78fb      	ldrb	r3, [r7, #3]
 8010902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010906:	68f9      	ldr	r1, [r7, #12]
 8010908:	4613      	mov	r3, r2
 801090a:	00db      	lsls	r3, r3, #3
 801090c:	4413      	add	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	440b      	add	r3, r1
 8010912:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010916:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	460b      	mov	r3, r1
 801092e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010930:	2300      	movs	r3, #0
 8010932:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010934:	2300      	movs	r3, #0
 8010936:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801093e:	78fa      	ldrb	r2, [r7, #3]
 8010940:	4611      	mov	r1, r2
 8010942:	4618      	mov	r0, r3
 8010944:	f7f3 fe44 	bl	80045d0 <HAL_PCD_SetAddress>
 8010948:	4603      	mov	r3, r0
 801094a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801094c:	7bbb      	ldrb	r3, [r7, #14]
 801094e:	2b03      	cmp	r3, #3
 8010950:	d816      	bhi.n	8010980 <USBD_LL_SetUSBAddress+0x5c>
 8010952:	a201      	add	r2, pc, #4	; (adr r2, 8010958 <USBD_LL_SetUSBAddress+0x34>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	08010969 	.word	0x08010969
 801095c:	0801096f 	.word	0x0801096f
 8010960:	08010975 	.word	0x08010975
 8010964:	0801097b 	.word	0x0801097b
    case HAL_OK :
      usb_status = USBD_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	73fb      	strb	r3, [r7, #15]
    break;
 801096c:	e00b      	b.n	8010986 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801096e:	2303      	movs	r3, #3
 8010970:	73fb      	strb	r3, [r7, #15]
    break;
 8010972:	e008      	b.n	8010986 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010974:	2301      	movs	r3, #1
 8010976:	73fb      	strb	r3, [r7, #15]
    break;
 8010978:	e005      	b.n	8010986 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801097a:	2303      	movs	r3, #3
 801097c:	73fb      	strb	r3, [r7, #15]
    break;
 801097e:	e002      	b.n	8010986 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010980:	2303      	movs	r3, #3
 8010982:	73fb      	strb	r3, [r7, #15]
    break;
 8010984:	bf00      	nop
  }
  return usb_status;
 8010986:	7bfb      	ldrb	r3, [r7, #15]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	607a      	str	r2, [r7, #4]
 801099a:	603b      	str	r3, [r7, #0]
 801099c:	460b      	mov	r3, r1
 801099e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80109ae:	7af9      	ldrb	r1, [r7, #11]
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	f7f3 ff2d 	bl	8004812 <HAL_PCD_EP_Transmit>
 80109b8:	4603      	mov	r3, r0
 80109ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80109bc:	7dbb      	ldrb	r3, [r7, #22]
 80109be:	2b03      	cmp	r3, #3
 80109c0:	d816      	bhi.n	80109f0 <USBD_LL_Transmit+0x60>
 80109c2:	a201      	add	r2, pc, #4	; (adr r2, 80109c8 <USBD_LL_Transmit+0x38>)
 80109c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c8:	080109d9 	.word	0x080109d9
 80109cc:	080109df 	.word	0x080109df
 80109d0:	080109e5 	.word	0x080109e5
 80109d4:	080109eb 	.word	0x080109eb
    case HAL_OK :
      usb_status = USBD_OK;
 80109d8:	2300      	movs	r3, #0
 80109da:	75fb      	strb	r3, [r7, #23]
    break;
 80109dc:	e00b      	b.n	80109f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109de:	2303      	movs	r3, #3
 80109e0:	75fb      	strb	r3, [r7, #23]
    break;
 80109e2:	e008      	b.n	80109f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109e4:	2301      	movs	r3, #1
 80109e6:	75fb      	strb	r3, [r7, #23]
    break;
 80109e8:	e005      	b.n	80109f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109ea:	2303      	movs	r3, #3
 80109ec:	75fb      	strb	r3, [r7, #23]
    break;
 80109ee:	e002      	b.n	80109f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80109f0:	2303      	movs	r3, #3
 80109f2:	75fb      	strb	r3, [r7, #23]
    break;
 80109f4:	bf00      	nop
  }
  return usb_status;
 80109f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3718      	adds	r7, #24
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	607a      	str	r2, [r7, #4]
 8010a0a:	603b      	str	r3, [r7, #0]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a1e:	7af9      	ldrb	r1, [r7, #11]
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	f7f3 feab 	bl	800477e <HAL_PCD_EP_Receive>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010a2c:	7dbb      	ldrb	r3, [r7, #22]
 8010a2e:	2b03      	cmp	r3, #3
 8010a30:	d816      	bhi.n	8010a60 <USBD_LL_PrepareReceive+0x60>
 8010a32:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <USBD_LL_PrepareReceive+0x38>)
 8010a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a38:	08010a49 	.word	0x08010a49
 8010a3c:	08010a4f 	.word	0x08010a4f
 8010a40:	08010a55 	.word	0x08010a55
 8010a44:	08010a5b 	.word	0x08010a5b
    case HAL_OK :
      usb_status = USBD_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	75fb      	strb	r3, [r7, #23]
    break;
 8010a4c:	e00b      	b.n	8010a66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	75fb      	strb	r3, [r7, #23]
    break;
 8010a52:	e008      	b.n	8010a66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a54:	2301      	movs	r3, #1
 8010a56:	75fb      	strb	r3, [r7, #23]
    break;
 8010a58:	e005      	b.n	8010a66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a5a:	2303      	movs	r3, #3
 8010a5c:	75fb      	strb	r3, [r7, #23]
    break;
 8010a5e:	e002      	b.n	8010a66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010a60:	2303      	movs	r3, #3
 8010a62:	75fb      	strb	r3, [r7, #23]
    break;
 8010a64:	bf00      	nop
  }
  return usb_status;
 8010a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3718      	adds	r7, #24
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a82:	78fa      	ldrb	r2, [r7, #3]
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7f3 feab 	bl	80047e2 <HAL_PCD_EP_GetRxCount>
 8010a8c:	4603      	mov	r3, r0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010aa0:	4b03      	ldr	r3, [pc, #12]	; (8010ab0 <USBD_static_malloc+0x18>)
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	370c      	adds	r7, #12
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	20002710 	.word	0x20002710

08010ab4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]

}
 8010abc:	bf00      	nop
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010acc:	f7f0 fc74 	bl	80013b8 <SystemClock_Config>
}
 8010ad0:	bf00      	nop
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <__libc_init_array>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	4d0d      	ldr	r5, [pc, #52]	; (8010b0c <__libc_init_array+0x38>)
 8010ad8:	4c0d      	ldr	r4, [pc, #52]	; (8010b10 <__libc_init_array+0x3c>)
 8010ada:	1b64      	subs	r4, r4, r5
 8010adc:	10a4      	asrs	r4, r4, #2
 8010ade:	2600      	movs	r6, #0
 8010ae0:	42a6      	cmp	r6, r4
 8010ae2:	d109      	bne.n	8010af8 <__libc_init_array+0x24>
 8010ae4:	4d0b      	ldr	r5, [pc, #44]	; (8010b14 <__libc_init_array+0x40>)
 8010ae6:	4c0c      	ldr	r4, [pc, #48]	; (8010b18 <__libc_init_array+0x44>)
 8010ae8:	f002 fda0 	bl	801362c <_init>
 8010aec:	1b64      	subs	r4, r4, r5
 8010aee:	10a4      	asrs	r4, r4, #2
 8010af0:	2600      	movs	r6, #0
 8010af2:	42a6      	cmp	r6, r4
 8010af4:	d105      	bne.n	8010b02 <__libc_init_array+0x2e>
 8010af6:	bd70      	pop	{r4, r5, r6, pc}
 8010af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010afc:	4798      	blx	r3
 8010afe:	3601      	adds	r6, #1
 8010b00:	e7ee      	b.n	8010ae0 <__libc_init_array+0xc>
 8010b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b06:	4798      	blx	r3
 8010b08:	3601      	adds	r6, #1
 8010b0a:	e7f2      	b.n	8010af2 <__libc_init_array+0x1e>
 8010b0c:	08013db0 	.word	0x08013db0
 8010b10:	08013db0 	.word	0x08013db0
 8010b14:	08013db0 	.word	0x08013db0
 8010b18:	08013db4 	.word	0x08013db4

08010b1c <malloc>:
 8010b1c:	4b02      	ldr	r3, [pc, #8]	; (8010b28 <malloc+0xc>)
 8010b1e:	4601      	mov	r1, r0
 8010b20:	6818      	ldr	r0, [r3, #0]
 8010b22:	f000 b885 	b.w	8010c30 <_malloc_r>
 8010b26:	bf00      	nop
 8010b28:	20000100 	.word	0x20000100

08010b2c <memcpy>:
 8010b2c:	440a      	add	r2, r1
 8010b2e:	4291      	cmp	r1, r2
 8010b30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010b34:	d100      	bne.n	8010b38 <memcpy+0xc>
 8010b36:	4770      	bx	lr
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b42:	4291      	cmp	r1, r2
 8010b44:	d1f9      	bne.n	8010b3a <memcpy+0xe>
 8010b46:	bd10      	pop	{r4, pc}

08010b48 <memset>:
 8010b48:	4402      	add	r2, r0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d100      	bne.n	8010b52 <memset+0xa>
 8010b50:	4770      	bx	lr
 8010b52:	f803 1b01 	strb.w	r1, [r3], #1
 8010b56:	e7f9      	b.n	8010b4c <memset+0x4>

08010b58 <_free_r>:
 8010b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b5a:	2900      	cmp	r1, #0
 8010b5c:	d044      	beq.n	8010be8 <_free_r+0x90>
 8010b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b62:	9001      	str	r0, [sp, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f1a1 0404 	sub.w	r4, r1, #4
 8010b6a:	bfb8      	it	lt
 8010b6c:	18e4      	addlt	r4, r4, r3
 8010b6e:	f001 fd1f 	bl	80125b0 <__malloc_lock>
 8010b72:	4a1e      	ldr	r2, [pc, #120]	; (8010bec <_free_r+0x94>)
 8010b74:	9801      	ldr	r0, [sp, #4]
 8010b76:	6813      	ldr	r3, [r2, #0]
 8010b78:	b933      	cbnz	r3, 8010b88 <_free_r+0x30>
 8010b7a:	6063      	str	r3, [r4, #4]
 8010b7c:	6014      	str	r4, [r2, #0]
 8010b7e:	b003      	add	sp, #12
 8010b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b84:	f001 bd1a 	b.w	80125bc <__malloc_unlock>
 8010b88:	42a3      	cmp	r3, r4
 8010b8a:	d908      	bls.n	8010b9e <_free_r+0x46>
 8010b8c:	6825      	ldr	r5, [r4, #0]
 8010b8e:	1961      	adds	r1, r4, r5
 8010b90:	428b      	cmp	r3, r1
 8010b92:	bf01      	itttt	eq
 8010b94:	6819      	ldreq	r1, [r3, #0]
 8010b96:	685b      	ldreq	r3, [r3, #4]
 8010b98:	1949      	addeq	r1, r1, r5
 8010b9a:	6021      	streq	r1, [r4, #0]
 8010b9c:	e7ed      	b.n	8010b7a <_free_r+0x22>
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	b10b      	cbz	r3, 8010ba8 <_free_r+0x50>
 8010ba4:	42a3      	cmp	r3, r4
 8010ba6:	d9fa      	bls.n	8010b9e <_free_r+0x46>
 8010ba8:	6811      	ldr	r1, [r2, #0]
 8010baa:	1855      	adds	r5, r2, r1
 8010bac:	42a5      	cmp	r5, r4
 8010bae:	d10b      	bne.n	8010bc8 <_free_r+0x70>
 8010bb0:	6824      	ldr	r4, [r4, #0]
 8010bb2:	4421      	add	r1, r4
 8010bb4:	1854      	adds	r4, r2, r1
 8010bb6:	42a3      	cmp	r3, r4
 8010bb8:	6011      	str	r1, [r2, #0]
 8010bba:	d1e0      	bne.n	8010b7e <_free_r+0x26>
 8010bbc:	681c      	ldr	r4, [r3, #0]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	6053      	str	r3, [r2, #4]
 8010bc2:	4421      	add	r1, r4
 8010bc4:	6011      	str	r1, [r2, #0]
 8010bc6:	e7da      	b.n	8010b7e <_free_r+0x26>
 8010bc8:	d902      	bls.n	8010bd0 <_free_r+0x78>
 8010bca:	230c      	movs	r3, #12
 8010bcc:	6003      	str	r3, [r0, #0]
 8010bce:	e7d6      	b.n	8010b7e <_free_r+0x26>
 8010bd0:	6825      	ldr	r5, [r4, #0]
 8010bd2:	1961      	adds	r1, r4, r5
 8010bd4:	428b      	cmp	r3, r1
 8010bd6:	bf04      	itt	eq
 8010bd8:	6819      	ldreq	r1, [r3, #0]
 8010bda:	685b      	ldreq	r3, [r3, #4]
 8010bdc:	6063      	str	r3, [r4, #4]
 8010bde:	bf04      	itt	eq
 8010be0:	1949      	addeq	r1, r1, r5
 8010be2:	6021      	streq	r1, [r4, #0]
 8010be4:	6054      	str	r4, [r2, #4]
 8010be6:	e7ca      	b.n	8010b7e <_free_r+0x26>
 8010be8:	b003      	add	sp, #12
 8010bea:	bd30      	pop	{r4, r5, pc}
 8010bec:	20002930 	.word	0x20002930

08010bf0 <sbrk_aligned>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	4e0e      	ldr	r6, [pc, #56]	; (8010c2c <sbrk_aligned+0x3c>)
 8010bf4:	460c      	mov	r4, r1
 8010bf6:	6831      	ldr	r1, [r6, #0]
 8010bf8:	4605      	mov	r5, r0
 8010bfa:	b911      	cbnz	r1, 8010c02 <sbrk_aligned+0x12>
 8010bfc:	f000 fd0e 	bl	801161c <_sbrk_r>
 8010c00:	6030      	str	r0, [r6, #0]
 8010c02:	4621      	mov	r1, r4
 8010c04:	4628      	mov	r0, r5
 8010c06:	f000 fd09 	bl	801161c <_sbrk_r>
 8010c0a:	1c43      	adds	r3, r0, #1
 8010c0c:	d00a      	beq.n	8010c24 <sbrk_aligned+0x34>
 8010c0e:	1cc4      	adds	r4, r0, #3
 8010c10:	f024 0403 	bic.w	r4, r4, #3
 8010c14:	42a0      	cmp	r0, r4
 8010c16:	d007      	beq.n	8010c28 <sbrk_aligned+0x38>
 8010c18:	1a21      	subs	r1, r4, r0
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f000 fcfe 	bl	801161c <_sbrk_r>
 8010c20:	3001      	adds	r0, #1
 8010c22:	d101      	bne.n	8010c28 <sbrk_aligned+0x38>
 8010c24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c28:	4620      	mov	r0, r4
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	20002934 	.word	0x20002934

08010c30 <_malloc_r>:
 8010c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c34:	1ccd      	adds	r5, r1, #3
 8010c36:	f025 0503 	bic.w	r5, r5, #3
 8010c3a:	3508      	adds	r5, #8
 8010c3c:	2d0c      	cmp	r5, #12
 8010c3e:	bf38      	it	cc
 8010c40:	250c      	movcc	r5, #12
 8010c42:	2d00      	cmp	r5, #0
 8010c44:	4607      	mov	r7, r0
 8010c46:	db01      	blt.n	8010c4c <_malloc_r+0x1c>
 8010c48:	42a9      	cmp	r1, r5
 8010c4a:	d905      	bls.n	8010c58 <_malloc_r+0x28>
 8010c4c:	230c      	movs	r3, #12
 8010c4e:	603b      	str	r3, [r7, #0]
 8010c50:	2600      	movs	r6, #0
 8010c52:	4630      	mov	r0, r6
 8010c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c58:	4e2e      	ldr	r6, [pc, #184]	; (8010d14 <_malloc_r+0xe4>)
 8010c5a:	f001 fca9 	bl	80125b0 <__malloc_lock>
 8010c5e:	6833      	ldr	r3, [r6, #0]
 8010c60:	461c      	mov	r4, r3
 8010c62:	bb34      	cbnz	r4, 8010cb2 <_malloc_r+0x82>
 8010c64:	4629      	mov	r1, r5
 8010c66:	4638      	mov	r0, r7
 8010c68:	f7ff ffc2 	bl	8010bf0 <sbrk_aligned>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	4604      	mov	r4, r0
 8010c70:	d14d      	bne.n	8010d0e <_malloc_r+0xde>
 8010c72:	6834      	ldr	r4, [r6, #0]
 8010c74:	4626      	mov	r6, r4
 8010c76:	2e00      	cmp	r6, #0
 8010c78:	d140      	bne.n	8010cfc <_malloc_r+0xcc>
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	4638      	mov	r0, r7
 8010c80:	eb04 0803 	add.w	r8, r4, r3
 8010c84:	f000 fcca 	bl	801161c <_sbrk_r>
 8010c88:	4580      	cmp	r8, r0
 8010c8a:	d13a      	bne.n	8010d02 <_malloc_r+0xd2>
 8010c8c:	6821      	ldr	r1, [r4, #0]
 8010c8e:	3503      	adds	r5, #3
 8010c90:	1a6d      	subs	r5, r5, r1
 8010c92:	f025 0503 	bic.w	r5, r5, #3
 8010c96:	3508      	adds	r5, #8
 8010c98:	2d0c      	cmp	r5, #12
 8010c9a:	bf38      	it	cc
 8010c9c:	250c      	movcc	r5, #12
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff ffa5 	bl	8010bf0 <sbrk_aligned>
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	d02b      	beq.n	8010d02 <_malloc_r+0xd2>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	442b      	add	r3, r5
 8010cae:	6023      	str	r3, [r4, #0]
 8010cb0:	e00e      	b.n	8010cd0 <_malloc_r+0xa0>
 8010cb2:	6822      	ldr	r2, [r4, #0]
 8010cb4:	1b52      	subs	r2, r2, r5
 8010cb6:	d41e      	bmi.n	8010cf6 <_malloc_r+0xc6>
 8010cb8:	2a0b      	cmp	r2, #11
 8010cba:	d916      	bls.n	8010cea <_malloc_r+0xba>
 8010cbc:	1961      	adds	r1, r4, r5
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	6025      	str	r5, [r4, #0]
 8010cc2:	bf18      	it	ne
 8010cc4:	6059      	strne	r1, [r3, #4]
 8010cc6:	6863      	ldr	r3, [r4, #4]
 8010cc8:	bf08      	it	eq
 8010cca:	6031      	streq	r1, [r6, #0]
 8010ccc:	5162      	str	r2, [r4, r5]
 8010cce:	604b      	str	r3, [r1, #4]
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f104 060b 	add.w	r6, r4, #11
 8010cd6:	f001 fc71 	bl	80125bc <__malloc_unlock>
 8010cda:	f026 0607 	bic.w	r6, r6, #7
 8010cde:	1d23      	adds	r3, r4, #4
 8010ce0:	1af2      	subs	r2, r6, r3
 8010ce2:	d0b6      	beq.n	8010c52 <_malloc_r+0x22>
 8010ce4:	1b9b      	subs	r3, r3, r6
 8010ce6:	50a3      	str	r3, [r4, r2]
 8010ce8:	e7b3      	b.n	8010c52 <_malloc_r+0x22>
 8010cea:	6862      	ldr	r2, [r4, #4]
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	bf0c      	ite	eq
 8010cf0:	6032      	streq	r2, [r6, #0]
 8010cf2:	605a      	strne	r2, [r3, #4]
 8010cf4:	e7ec      	b.n	8010cd0 <_malloc_r+0xa0>
 8010cf6:	4623      	mov	r3, r4
 8010cf8:	6864      	ldr	r4, [r4, #4]
 8010cfa:	e7b2      	b.n	8010c62 <_malloc_r+0x32>
 8010cfc:	4634      	mov	r4, r6
 8010cfe:	6876      	ldr	r6, [r6, #4]
 8010d00:	e7b9      	b.n	8010c76 <_malloc_r+0x46>
 8010d02:	230c      	movs	r3, #12
 8010d04:	603b      	str	r3, [r7, #0]
 8010d06:	4638      	mov	r0, r7
 8010d08:	f001 fc58 	bl	80125bc <__malloc_unlock>
 8010d0c:	e7a1      	b.n	8010c52 <_malloc_r+0x22>
 8010d0e:	6025      	str	r5, [r4, #0]
 8010d10:	e7de      	b.n	8010cd0 <_malloc_r+0xa0>
 8010d12:	bf00      	nop
 8010d14:	20002930 	.word	0x20002930

08010d18 <__cvt>:
 8010d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d1c:	ec55 4b10 	vmov	r4, r5, d0
 8010d20:	2d00      	cmp	r5, #0
 8010d22:	460e      	mov	r6, r1
 8010d24:	4619      	mov	r1, r3
 8010d26:	462b      	mov	r3, r5
 8010d28:	bfbb      	ittet	lt
 8010d2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d2e:	461d      	movlt	r5, r3
 8010d30:	2300      	movge	r3, #0
 8010d32:	232d      	movlt	r3, #45	; 0x2d
 8010d34:	700b      	strb	r3, [r1, #0]
 8010d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d3c:	4691      	mov	r9, r2
 8010d3e:	f023 0820 	bic.w	r8, r3, #32
 8010d42:	bfbc      	itt	lt
 8010d44:	4622      	movlt	r2, r4
 8010d46:	4614      	movlt	r4, r2
 8010d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d4c:	d005      	beq.n	8010d5a <__cvt+0x42>
 8010d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010d52:	d100      	bne.n	8010d56 <__cvt+0x3e>
 8010d54:	3601      	adds	r6, #1
 8010d56:	2102      	movs	r1, #2
 8010d58:	e000      	b.n	8010d5c <__cvt+0x44>
 8010d5a:	2103      	movs	r1, #3
 8010d5c:	ab03      	add	r3, sp, #12
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	ab02      	add	r3, sp, #8
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	ec45 4b10 	vmov	d0, r4, r5
 8010d68:	4653      	mov	r3, sl
 8010d6a:	4632      	mov	r2, r6
 8010d6c:	f000 fd10 	bl	8011790 <_dtoa_r>
 8010d70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d74:	4607      	mov	r7, r0
 8010d76:	d102      	bne.n	8010d7e <__cvt+0x66>
 8010d78:	f019 0f01 	tst.w	r9, #1
 8010d7c:	d022      	beq.n	8010dc4 <__cvt+0xac>
 8010d7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d82:	eb07 0906 	add.w	r9, r7, r6
 8010d86:	d110      	bne.n	8010daa <__cvt+0x92>
 8010d88:	783b      	ldrb	r3, [r7, #0]
 8010d8a:	2b30      	cmp	r3, #48	; 0x30
 8010d8c:	d10a      	bne.n	8010da4 <__cvt+0x8c>
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2300      	movs	r3, #0
 8010d92:	4620      	mov	r0, r4
 8010d94:	4629      	mov	r1, r5
 8010d96:	f7ef feaf 	bl	8000af8 <__aeabi_dcmpeq>
 8010d9a:	b918      	cbnz	r0, 8010da4 <__cvt+0x8c>
 8010d9c:	f1c6 0601 	rsb	r6, r6, #1
 8010da0:	f8ca 6000 	str.w	r6, [sl]
 8010da4:	f8da 3000 	ldr.w	r3, [sl]
 8010da8:	4499      	add	r9, r3
 8010daa:	2200      	movs	r2, #0
 8010dac:	2300      	movs	r3, #0
 8010dae:	4620      	mov	r0, r4
 8010db0:	4629      	mov	r1, r5
 8010db2:	f7ef fea1 	bl	8000af8 <__aeabi_dcmpeq>
 8010db6:	b108      	cbz	r0, 8010dbc <__cvt+0xa4>
 8010db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010dbc:	2230      	movs	r2, #48	; 0x30
 8010dbe:	9b03      	ldr	r3, [sp, #12]
 8010dc0:	454b      	cmp	r3, r9
 8010dc2:	d307      	bcc.n	8010dd4 <__cvt+0xbc>
 8010dc4:	9b03      	ldr	r3, [sp, #12]
 8010dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dc8:	1bdb      	subs	r3, r3, r7
 8010dca:	4638      	mov	r0, r7
 8010dcc:	6013      	str	r3, [r2, #0]
 8010dce:	b004      	add	sp, #16
 8010dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dd4:	1c59      	adds	r1, r3, #1
 8010dd6:	9103      	str	r1, [sp, #12]
 8010dd8:	701a      	strb	r2, [r3, #0]
 8010dda:	e7f0      	b.n	8010dbe <__cvt+0xa6>

08010ddc <__exponent>:
 8010ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dde:	4603      	mov	r3, r0
 8010de0:	2900      	cmp	r1, #0
 8010de2:	bfb8      	it	lt
 8010de4:	4249      	neglt	r1, r1
 8010de6:	f803 2b02 	strb.w	r2, [r3], #2
 8010dea:	bfb4      	ite	lt
 8010dec:	222d      	movlt	r2, #45	; 0x2d
 8010dee:	222b      	movge	r2, #43	; 0x2b
 8010df0:	2909      	cmp	r1, #9
 8010df2:	7042      	strb	r2, [r0, #1]
 8010df4:	dd2a      	ble.n	8010e4c <__exponent+0x70>
 8010df6:	f10d 0407 	add.w	r4, sp, #7
 8010dfa:	46a4      	mov	ip, r4
 8010dfc:	270a      	movs	r7, #10
 8010dfe:	46a6      	mov	lr, r4
 8010e00:	460a      	mov	r2, r1
 8010e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8010e06:	fb07 1516 	mls	r5, r7, r6, r1
 8010e0a:	3530      	adds	r5, #48	; 0x30
 8010e0c:	2a63      	cmp	r2, #99	; 0x63
 8010e0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010e16:	4631      	mov	r1, r6
 8010e18:	dcf1      	bgt.n	8010dfe <__exponent+0x22>
 8010e1a:	3130      	adds	r1, #48	; 0x30
 8010e1c:	f1ae 0502 	sub.w	r5, lr, #2
 8010e20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e24:	1c44      	adds	r4, r0, #1
 8010e26:	4629      	mov	r1, r5
 8010e28:	4561      	cmp	r1, ip
 8010e2a:	d30a      	bcc.n	8010e42 <__exponent+0x66>
 8010e2c:	f10d 0209 	add.w	r2, sp, #9
 8010e30:	eba2 020e 	sub.w	r2, r2, lr
 8010e34:	4565      	cmp	r5, ip
 8010e36:	bf88      	it	hi
 8010e38:	2200      	movhi	r2, #0
 8010e3a:	4413      	add	r3, r2
 8010e3c:	1a18      	subs	r0, r3, r0
 8010e3e:	b003      	add	sp, #12
 8010e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e4a:	e7ed      	b.n	8010e28 <__exponent+0x4c>
 8010e4c:	2330      	movs	r3, #48	; 0x30
 8010e4e:	3130      	adds	r1, #48	; 0x30
 8010e50:	7083      	strb	r3, [r0, #2]
 8010e52:	70c1      	strb	r1, [r0, #3]
 8010e54:	1d03      	adds	r3, r0, #4
 8010e56:	e7f1      	b.n	8010e3c <__exponent+0x60>

08010e58 <_printf_float>:
 8010e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5c:	ed2d 8b02 	vpush	{d8}
 8010e60:	b08d      	sub	sp, #52	; 0x34
 8010e62:	460c      	mov	r4, r1
 8010e64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e68:	4616      	mov	r6, r2
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	f001 fb85 	bl	801257c <_localeconv_r>
 8010e72:	f8d0 a000 	ldr.w	sl, [r0]
 8010e76:	4650      	mov	r0, sl
 8010e78:	f7ef f9c2 	bl	8000200 <strlen>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	f8d8 3000 	ldr.w	r3, [r8]
 8010e88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e8c:	3307      	adds	r3, #7
 8010e8e:	f023 0307 	bic.w	r3, r3, #7
 8010e92:	f103 0208 	add.w	r2, r3, #8
 8010e96:	f8c8 2000 	str.w	r2, [r8]
 8010e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010eaa:	9307      	str	r3, [sp, #28]
 8010eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8010eb0:	ee08 0a10 	vmov	s16, r0
 8010eb4:	4b9f      	ldr	r3, [pc, #636]	; (8011134 <_printf_float+0x2dc>)
 8010eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ebe:	f7ef fe4d 	bl	8000b5c <__aeabi_dcmpun>
 8010ec2:	bb88      	cbnz	r0, 8010f28 <_printf_float+0xd0>
 8010ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ec8:	4b9a      	ldr	r3, [pc, #616]	; (8011134 <_printf_float+0x2dc>)
 8010eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ece:	f7ef fe27 	bl	8000b20 <__aeabi_dcmple>
 8010ed2:	bb48      	cbnz	r0, 8010f28 <_printf_float+0xd0>
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	4640      	mov	r0, r8
 8010eda:	4649      	mov	r1, r9
 8010edc:	f7ef fe16 	bl	8000b0c <__aeabi_dcmplt>
 8010ee0:	b110      	cbz	r0, 8010ee8 <_printf_float+0x90>
 8010ee2:	232d      	movs	r3, #45	; 0x2d
 8010ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee8:	4b93      	ldr	r3, [pc, #588]	; (8011138 <_printf_float+0x2e0>)
 8010eea:	4894      	ldr	r0, [pc, #592]	; (801113c <_printf_float+0x2e4>)
 8010eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010ef0:	bf94      	ite	ls
 8010ef2:	4698      	movls	r8, r3
 8010ef4:	4680      	movhi	r8, r0
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	6123      	str	r3, [r4, #16]
 8010efa:	9b05      	ldr	r3, [sp, #20]
 8010efc:	f023 0204 	bic.w	r2, r3, #4
 8010f00:	6022      	str	r2, [r4, #0]
 8010f02:	f04f 0900 	mov.w	r9, #0
 8010f06:	9700      	str	r7, [sp, #0]
 8010f08:	4633      	mov	r3, r6
 8010f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	4628      	mov	r0, r5
 8010f10:	f000 f9d8 	bl	80112c4 <_printf_common>
 8010f14:	3001      	adds	r0, #1
 8010f16:	f040 8090 	bne.w	801103a <_printf_float+0x1e2>
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f1e:	b00d      	add	sp, #52	; 0x34
 8010f20:	ecbd 8b02 	vpop	{d8}
 8010f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f28:	4642      	mov	r2, r8
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	4649      	mov	r1, r9
 8010f30:	f7ef fe14 	bl	8000b5c <__aeabi_dcmpun>
 8010f34:	b140      	cbz	r0, 8010f48 <_printf_float+0xf0>
 8010f36:	464b      	mov	r3, r9
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	bfbc      	itt	lt
 8010f3c:	232d      	movlt	r3, #45	; 0x2d
 8010f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f42:	487f      	ldr	r0, [pc, #508]	; (8011140 <_printf_float+0x2e8>)
 8010f44:	4b7f      	ldr	r3, [pc, #508]	; (8011144 <_printf_float+0x2ec>)
 8010f46:	e7d1      	b.n	8010eec <_printf_float+0x94>
 8010f48:	6863      	ldr	r3, [r4, #4]
 8010f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f4e:	9206      	str	r2, [sp, #24]
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	d13f      	bne.n	8010fd4 <_printf_float+0x17c>
 8010f54:	2306      	movs	r3, #6
 8010f56:	6063      	str	r3, [r4, #4]
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	6861      	ldr	r1, [r4, #4]
 8010f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f60:	2300      	movs	r3, #0
 8010f62:	9303      	str	r3, [sp, #12]
 8010f64:	ab0a      	add	r3, sp, #40	; 0x28
 8010f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010f6a:	ab09      	add	r3, sp, #36	; 0x24
 8010f6c:	ec49 8b10 	vmov	d0, r8, r9
 8010f70:	9300      	str	r3, [sp, #0]
 8010f72:	6022      	str	r2, [r4, #0]
 8010f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f78:	4628      	mov	r0, r5
 8010f7a:	f7ff fecd 	bl	8010d18 <__cvt>
 8010f7e:	9b06      	ldr	r3, [sp, #24]
 8010f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f82:	2b47      	cmp	r3, #71	; 0x47
 8010f84:	4680      	mov	r8, r0
 8010f86:	d108      	bne.n	8010f9a <_printf_float+0x142>
 8010f88:	1cc8      	adds	r0, r1, #3
 8010f8a:	db02      	blt.n	8010f92 <_printf_float+0x13a>
 8010f8c:	6863      	ldr	r3, [r4, #4]
 8010f8e:	4299      	cmp	r1, r3
 8010f90:	dd41      	ble.n	8011016 <_printf_float+0x1be>
 8010f92:	f1ab 0b02 	sub.w	fp, fp, #2
 8010f96:	fa5f fb8b 	uxtb.w	fp, fp
 8010f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f9e:	d820      	bhi.n	8010fe2 <_printf_float+0x18a>
 8010fa0:	3901      	subs	r1, #1
 8010fa2:	465a      	mov	r2, fp
 8010fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8010faa:	f7ff ff17 	bl	8010ddc <__exponent>
 8010fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fb0:	1813      	adds	r3, r2, r0
 8010fb2:	2a01      	cmp	r2, #1
 8010fb4:	4681      	mov	r9, r0
 8010fb6:	6123      	str	r3, [r4, #16]
 8010fb8:	dc02      	bgt.n	8010fc0 <_printf_float+0x168>
 8010fba:	6822      	ldr	r2, [r4, #0]
 8010fbc:	07d2      	lsls	r2, r2, #31
 8010fbe:	d501      	bpl.n	8010fc4 <_printf_float+0x16c>
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	6123      	str	r3, [r4, #16]
 8010fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d09c      	beq.n	8010f06 <_printf_float+0xae>
 8010fcc:	232d      	movs	r3, #45	; 0x2d
 8010fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fd2:	e798      	b.n	8010f06 <_printf_float+0xae>
 8010fd4:	9a06      	ldr	r2, [sp, #24]
 8010fd6:	2a47      	cmp	r2, #71	; 0x47
 8010fd8:	d1be      	bne.n	8010f58 <_printf_float+0x100>
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1bc      	bne.n	8010f58 <_printf_float+0x100>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e7b9      	b.n	8010f56 <_printf_float+0xfe>
 8010fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010fe6:	d118      	bne.n	801101a <_printf_float+0x1c2>
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	6863      	ldr	r3, [r4, #4]
 8010fec:	dd0b      	ble.n	8011006 <_printf_float+0x1ae>
 8010fee:	6121      	str	r1, [r4, #16]
 8010ff0:	b913      	cbnz	r3, 8010ff8 <_printf_float+0x1a0>
 8010ff2:	6822      	ldr	r2, [r4, #0]
 8010ff4:	07d0      	lsls	r0, r2, #31
 8010ff6:	d502      	bpl.n	8010ffe <_printf_float+0x1a6>
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	440b      	add	r3, r1
 8010ffc:	6123      	str	r3, [r4, #16]
 8010ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011000:	f04f 0900 	mov.w	r9, #0
 8011004:	e7de      	b.n	8010fc4 <_printf_float+0x16c>
 8011006:	b913      	cbnz	r3, 801100e <_printf_float+0x1b6>
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	07d2      	lsls	r2, r2, #31
 801100c:	d501      	bpl.n	8011012 <_printf_float+0x1ba>
 801100e:	3302      	adds	r3, #2
 8011010:	e7f4      	b.n	8010ffc <_printf_float+0x1a4>
 8011012:	2301      	movs	r3, #1
 8011014:	e7f2      	b.n	8010ffc <_printf_float+0x1a4>
 8011016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801101a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801101c:	4299      	cmp	r1, r3
 801101e:	db05      	blt.n	801102c <_printf_float+0x1d4>
 8011020:	6823      	ldr	r3, [r4, #0]
 8011022:	6121      	str	r1, [r4, #16]
 8011024:	07d8      	lsls	r0, r3, #31
 8011026:	d5ea      	bpl.n	8010ffe <_printf_float+0x1a6>
 8011028:	1c4b      	adds	r3, r1, #1
 801102a:	e7e7      	b.n	8010ffc <_printf_float+0x1a4>
 801102c:	2900      	cmp	r1, #0
 801102e:	bfd4      	ite	le
 8011030:	f1c1 0202 	rsble	r2, r1, #2
 8011034:	2201      	movgt	r2, #1
 8011036:	4413      	add	r3, r2
 8011038:	e7e0      	b.n	8010ffc <_printf_float+0x1a4>
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	055a      	lsls	r2, r3, #21
 801103e:	d407      	bmi.n	8011050 <_printf_float+0x1f8>
 8011040:	6923      	ldr	r3, [r4, #16]
 8011042:	4642      	mov	r2, r8
 8011044:	4631      	mov	r1, r6
 8011046:	4628      	mov	r0, r5
 8011048:	47b8      	blx	r7
 801104a:	3001      	adds	r0, #1
 801104c:	d12c      	bne.n	80110a8 <_printf_float+0x250>
 801104e:	e764      	b.n	8010f1a <_printf_float+0xc2>
 8011050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011054:	f240 80e0 	bls.w	8011218 <_printf_float+0x3c0>
 8011058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801105c:	2200      	movs	r2, #0
 801105e:	2300      	movs	r3, #0
 8011060:	f7ef fd4a 	bl	8000af8 <__aeabi_dcmpeq>
 8011064:	2800      	cmp	r0, #0
 8011066:	d034      	beq.n	80110d2 <_printf_float+0x27a>
 8011068:	4a37      	ldr	r2, [pc, #220]	; (8011148 <_printf_float+0x2f0>)
 801106a:	2301      	movs	r3, #1
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	47b8      	blx	r7
 8011072:	3001      	adds	r0, #1
 8011074:	f43f af51 	beq.w	8010f1a <_printf_float+0xc2>
 8011078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801107c:	429a      	cmp	r2, r3
 801107e:	db02      	blt.n	8011086 <_printf_float+0x22e>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	07d8      	lsls	r0, r3, #31
 8011084:	d510      	bpl.n	80110a8 <_printf_float+0x250>
 8011086:	ee18 3a10 	vmov	r3, s16
 801108a:	4652      	mov	r2, sl
 801108c:	4631      	mov	r1, r6
 801108e:	4628      	mov	r0, r5
 8011090:	47b8      	blx	r7
 8011092:	3001      	adds	r0, #1
 8011094:	f43f af41 	beq.w	8010f1a <_printf_float+0xc2>
 8011098:	f04f 0800 	mov.w	r8, #0
 801109c:	f104 091a 	add.w	r9, r4, #26
 80110a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110a2:	3b01      	subs	r3, #1
 80110a4:	4543      	cmp	r3, r8
 80110a6:	dc09      	bgt.n	80110bc <_printf_float+0x264>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	079b      	lsls	r3, r3, #30
 80110ac:	f100 8105 	bmi.w	80112ba <_printf_float+0x462>
 80110b0:	68e0      	ldr	r0, [r4, #12]
 80110b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b4:	4298      	cmp	r0, r3
 80110b6:	bfb8      	it	lt
 80110b8:	4618      	movlt	r0, r3
 80110ba:	e730      	b.n	8010f1e <_printf_float+0xc6>
 80110bc:	2301      	movs	r3, #1
 80110be:	464a      	mov	r2, r9
 80110c0:	4631      	mov	r1, r6
 80110c2:	4628      	mov	r0, r5
 80110c4:	47b8      	blx	r7
 80110c6:	3001      	adds	r0, #1
 80110c8:	f43f af27 	beq.w	8010f1a <_printf_float+0xc2>
 80110cc:	f108 0801 	add.w	r8, r8, #1
 80110d0:	e7e6      	b.n	80110a0 <_printf_float+0x248>
 80110d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dc39      	bgt.n	801114c <_printf_float+0x2f4>
 80110d8:	4a1b      	ldr	r2, [pc, #108]	; (8011148 <_printf_float+0x2f0>)
 80110da:	2301      	movs	r3, #1
 80110dc:	4631      	mov	r1, r6
 80110de:	4628      	mov	r0, r5
 80110e0:	47b8      	blx	r7
 80110e2:	3001      	adds	r0, #1
 80110e4:	f43f af19 	beq.w	8010f1a <_printf_float+0xc2>
 80110e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110ec:	4313      	orrs	r3, r2
 80110ee:	d102      	bne.n	80110f6 <_printf_float+0x29e>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	07d9      	lsls	r1, r3, #31
 80110f4:	d5d8      	bpl.n	80110a8 <_printf_float+0x250>
 80110f6:	ee18 3a10 	vmov	r3, s16
 80110fa:	4652      	mov	r2, sl
 80110fc:	4631      	mov	r1, r6
 80110fe:	4628      	mov	r0, r5
 8011100:	47b8      	blx	r7
 8011102:	3001      	adds	r0, #1
 8011104:	f43f af09 	beq.w	8010f1a <_printf_float+0xc2>
 8011108:	f04f 0900 	mov.w	r9, #0
 801110c:	f104 0a1a 	add.w	sl, r4, #26
 8011110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011112:	425b      	negs	r3, r3
 8011114:	454b      	cmp	r3, r9
 8011116:	dc01      	bgt.n	801111c <_printf_float+0x2c4>
 8011118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801111a:	e792      	b.n	8011042 <_printf_float+0x1ea>
 801111c:	2301      	movs	r3, #1
 801111e:	4652      	mov	r2, sl
 8011120:	4631      	mov	r1, r6
 8011122:	4628      	mov	r0, r5
 8011124:	47b8      	blx	r7
 8011126:	3001      	adds	r0, #1
 8011128:	f43f aef7 	beq.w	8010f1a <_printf_float+0xc2>
 801112c:	f109 0901 	add.w	r9, r9, #1
 8011130:	e7ee      	b.n	8011110 <_printf_float+0x2b8>
 8011132:	bf00      	nop
 8011134:	7fefffff 	.word	0x7fefffff
 8011138:	080139c8 	.word	0x080139c8
 801113c:	080139cc 	.word	0x080139cc
 8011140:	080139d4 	.word	0x080139d4
 8011144:	080139d0 	.word	0x080139d0
 8011148:	080139d8 	.word	0x080139d8
 801114c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801114e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011150:	429a      	cmp	r2, r3
 8011152:	bfa8      	it	ge
 8011154:	461a      	movge	r2, r3
 8011156:	2a00      	cmp	r2, #0
 8011158:	4691      	mov	r9, r2
 801115a:	dc37      	bgt.n	80111cc <_printf_float+0x374>
 801115c:	f04f 0b00 	mov.w	fp, #0
 8011160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011164:	f104 021a 	add.w	r2, r4, #26
 8011168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801116a:	9305      	str	r3, [sp, #20]
 801116c:	eba3 0309 	sub.w	r3, r3, r9
 8011170:	455b      	cmp	r3, fp
 8011172:	dc33      	bgt.n	80111dc <_printf_float+0x384>
 8011174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011178:	429a      	cmp	r2, r3
 801117a:	db3b      	blt.n	80111f4 <_printf_float+0x39c>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	07da      	lsls	r2, r3, #31
 8011180:	d438      	bmi.n	80111f4 <_printf_float+0x39c>
 8011182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011184:	9a05      	ldr	r2, [sp, #20]
 8011186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011188:	1a9a      	subs	r2, r3, r2
 801118a:	eba3 0901 	sub.w	r9, r3, r1
 801118e:	4591      	cmp	r9, r2
 8011190:	bfa8      	it	ge
 8011192:	4691      	movge	r9, r2
 8011194:	f1b9 0f00 	cmp.w	r9, #0
 8011198:	dc35      	bgt.n	8011206 <_printf_float+0x3ae>
 801119a:	f04f 0800 	mov.w	r8, #0
 801119e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111a2:	f104 0a1a 	add.w	sl, r4, #26
 80111a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111aa:	1a9b      	subs	r3, r3, r2
 80111ac:	eba3 0309 	sub.w	r3, r3, r9
 80111b0:	4543      	cmp	r3, r8
 80111b2:	f77f af79 	ble.w	80110a8 <_printf_float+0x250>
 80111b6:	2301      	movs	r3, #1
 80111b8:	4652      	mov	r2, sl
 80111ba:	4631      	mov	r1, r6
 80111bc:	4628      	mov	r0, r5
 80111be:	47b8      	blx	r7
 80111c0:	3001      	adds	r0, #1
 80111c2:	f43f aeaa 	beq.w	8010f1a <_printf_float+0xc2>
 80111c6:	f108 0801 	add.w	r8, r8, #1
 80111ca:	e7ec      	b.n	80111a6 <_printf_float+0x34e>
 80111cc:	4613      	mov	r3, r2
 80111ce:	4631      	mov	r1, r6
 80111d0:	4642      	mov	r2, r8
 80111d2:	4628      	mov	r0, r5
 80111d4:	47b8      	blx	r7
 80111d6:	3001      	adds	r0, #1
 80111d8:	d1c0      	bne.n	801115c <_printf_float+0x304>
 80111da:	e69e      	b.n	8010f1a <_printf_float+0xc2>
 80111dc:	2301      	movs	r3, #1
 80111de:	4631      	mov	r1, r6
 80111e0:	4628      	mov	r0, r5
 80111e2:	9205      	str	r2, [sp, #20]
 80111e4:	47b8      	blx	r7
 80111e6:	3001      	adds	r0, #1
 80111e8:	f43f ae97 	beq.w	8010f1a <_printf_float+0xc2>
 80111ec:	9a05      	ldr	r2, [sp, #20]
 80111ee:	f10b 0b01 	add.w	fp, fp, #1
 80111f2:	e7b9      	b.n	8011168 <_printf_float+0x310>
 80111f4:	ee18 3a10 	vmov	r3, s16
 80111f8:	4652      	mov	r2, sl
 80111fa:	4631      	mov	r1, r6
 80111fc:	4628      	mov	r0, r5
 80111fe:	47b8      	blx	r7
 8011200:	3001      	adds	r0, #1
 8011202:	d1be      	bne.n	8011182 <_printf_float+0x32a>
 8011204:	e689      	b.n	8010f1a <_printf_float+0xc2>
 8011206:	9a05      	ldr	r2, [sp, #20]
 8011208:	464b      	mov	r3, r9
 801120a:	4442      	add	r2, r8
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	47b8      	blx	r7
 8011212:	3001      	adds	r0, #1
 8011214:	d1c1      	bne.n	801119a <_printf_float+0x342>
 8011216:	e680      	b.n	8010f1a <_printf_float+0xc2>
 8011218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801121a:	2a01      	cmp	r2, #1
 801121c:	dc01      	bgt.n	8011222 <_printf_float+0x3ca>
 801121e:	07db      	lsls	r3, r3, #31
 8011220:	d538      	bpl.n	8011294 <_printf_float+0x43c>
 8011222:	2301      	movs	r3, #1
 8011224:	4642      	mov	r2, r8
 8011226:	4631      	mov	r1, r6
 8011228:	4628      	mov	r0, r5
 801122a:	47b8      	blx	r7
 801122c:	3001      	adds	r0, #1
 801122e:	f43f ae74 	beq.w	8010f1a <_printf_float+0xc2>
 8011232:	ee18 3a10 	vmov	r3, s16
 8011236:	4652      	mov	r2, sl
 8011238:	4631      	mov	r1, r6
 801123a:	4628      	mov	r0, r5
 801123c:	47b8      	blx	r7
 801123e:	3001      	adds	r0, #1
 8011240:	f43f ae6b 	beq.w	8010f1a <_printf_float+0xc2>
 8011244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011248:	2200      	movs	r2, #0
 801124a:	2300      	movs	r3, #0
 801124c:	f7ef fc54 	bl	8000af8 <__aeabi_dcmpeq>
 8011250:	b9d8      	cbnz	r0, 801128a <_printf_float+0x432>
 8011252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011254:	f108 0201 	add.w	r2, r8, #1
 8011258:	3b01      	subs	r3, #1
 801125a:	4631      	mov	r1, r6
 801125c:	4628      	mov	r0, r5
 801125e:	47b8      	blx	r7
 8011260:	3001      	adds	r0, #1
 8011262:	d10e      	bne.n	8011282 <_printf_float+0x42a>
 8011264:	e659      	b.n	8010f1a <_printf_float+0xc2>
 8011266:	2301      	movs	r3, #1
 8011268:	4652      	mov	r2, sl
 801126a:	4631      	mov	r1, r6
 801126c:	4628      	mov	r0, r5
 801126e:	47b8      	blx	r7
 8011270:	3001      	adds	r0, #1
 8011272:	f43f ae52 	beq.w	8010f1a <_printf_float+0xc2>
 8011276:	f108 0801 	add.w	r8, r8, #1
 801127a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801127c:	3b01      	subs	r3, #1
 801127e:	4543      	cmp	r3, r8
 8011280:	dcf1      	bgt.n	8011266 <_printf_float+0x40e>
 8011282:	464b      	mov	r3, r9
 8011284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011288:	e6dc      	b.n	8011044 <_printf_float+0x1ec>
 801128a:	f04f 0800 	mov.w	r8, #0
 801128e:	f104 0a1a 	add.w	sl, r4, #26
 8011292:	e7f2      	b.n	801127a <_printf_float+0x422>
 8011294:	2301      	movs	r3, #1
 8011296:	4642      	mov	r2, r8
 8011298:	e7df      	b.n	801125a <_printf_float+0x402>
 801129a:	2301      	movs	r3, #1
 801129c:	464a      	mov	r2, r9
 801129e:	4631      	mov	r1, r6
 80112a0:	4628      	mov	r0, r5
 80112a2:	47b8      	blx	r7
 80112a4:	3001      	adds	r0, #1
 80112a6:	f43f ae38 	beq.w	8010f1a <_printf_float+0xc2>
 80112aa:	f108 0801 	add.w	r8, r8, #1
 80112ae:	68e3      	ldr	r3, [r4, #12]
 80112b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112b2:	1a5b      	subs	r3, r3, r1
 80112b4:	4543      	cmp	r3, r8
 80112b6:	dcf0      	bgt.n	801129a <_printf_float+0x442>
 80112b8:	e6fa      	b.n	80110b0 <_printf_float+0x258>
 80112ba:	f04f 0800 	mov.w	r8, #0
 80112be:	f104 0919 	add.w	r9, r4, #25
 80112c2:	e7f4      	b.n	80112ae <_printf_float+0x456>

080112c4 <_printf_common>:
 80112c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	4616      	mov	r6, r2
 80112ca:	4699      	mov	r9, r3
 80112cc:	688a      	ldr	r2, [r1, #8]
 80112ce:	690b      	ldr	r3, [r1, #16]
 80112d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bfb8      	it	lt
 80112d8:	4613      	movlt	r3, r2
 80112da:	6033      	str	r3, [r6, #0]
 80112dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112e0:	4607      	mov	r7, r0
 80112e2:	460c      	mov	r4, r1
 80112e4:	b10a      	cbz	r2, 80112ea <_printf_common+0x26>
 80112e6:	3301      	adds	r3, #1
 80112e8:	6033      	str	r3, [r6, #0]
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	0699      	lsls	r1, r3, #26
 80112ee:	bf42      	ittt	mi
 80112f0:	6833      	ldrmi	r3, [r6, #0]
 80112f2:	3302      	addmi	r3, #2
 80112f4:	6033      	strmi	r3, [r6, #0]
 80112f6:	6825      	ldr	r5, [r4, #0]
 80112f8:	f015 0506 	ands.w	r5, r5, #6
 80112fc:	d106      	bne.n	801130c <_printf_common+0x48>
 80112fe:	f104 0a19 	add.w	sl, r4, #25
 8011302:	68e3      	ldr	r3, [r4, #12]
 8011304:	6832      	ldr	r2, [r6, #0]
 8011306:	1a9b      	subs	r3, r3, r2
 8011308:	42ab      	cmp	r3, r5
 801130a:	dc26      	bgt.n	801135a <_printf_common+0x96>
 801130c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011310:	1e13      	subs	r3, r2, #0
 8011312:	6822      	ldr	r2, [r4, #0]
 8011314:	bf18      	it	ne
 8011316:	2301      	movne	r3, #1
 8011318:	0692      	lsls	r2, r2, #26
 801131a:	d42b      	bmi.n	8011374 <_printf_common+0xb0>
 801131c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011320:	4649      	mov	r1, r9
 8011322:	4638      	mov	r0, r7
 8011324:	47c0      	blx	r8
 8011326:	3001      	adds	r0, #1
 8011328:	d01e      	beq.n	8011368 <_printf_common+0xa4>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	68e5      	ldr	r5, [r4, #12]
 801132e:	6832      	ldr	r2, [r6, #0]
 8011330:	f003 0306 	and.w	r3, r3, #6
 8011334:	2b04      	cmp	r3, #4
 8011336:	bf08      	it	eq
 8011338:	1aad      	subeq	r5, r5, r2
 801133a:	68a3      	ldr	r3, [r4, #8]
 801133c:	6922      	ldr	r2, [r4, #16]
 801133e:	bf0c      	ite	eq
 8011340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011344:	2500      	movne	r5, #0
 8011346:	4293      	cmp	r3, r2
 8011348:	bfc4      	itt	gt
 801134a:	1a9b      	subgt	r3, r3, r2
 801134c:	18ed      	addgt	r5, r5, r3
 801134e:	2600      	movs	r6, #0
 8011350:	341a      	adds	r4, #26
 8011352:	42b5      	cmp	r5, r6
 8011354:	d11a      	bne.n	801138c <_printf_common+0xc8>
 8011356:	2000      	movs	r0, #0
 8011358:	e008      	b.n	801136c <_printf_common+0xa8>
 801135a:	2301      	movs	r3, #1
 801135c:	4652      	mov	r2, sl
 801135e:	4649      	mov	r1, r9
 8011360:	4638      	mov	r0, r7
 8011362:	47c0      	blx	r8
 8011364:	3001      	adds	r0, #1
 8011366:	d103      	bne.n	8011370 <_printf_common+0xac>
 8011368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011370:	3501      	adds	r5, #1
 8011372:	e7c6      	b.n	8011302 <_printf_common+0x3e>
 8011374:	18e1      	adds	r1, r4, r3
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	2030      	movs	r0, #48	; 0x30
 801137a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801137e:	4422      	add	r2, r4
 8011380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011388:	3302      	adds	r3, #2
 801138a:	e7c7      	b.n	801131c <_printf_common+0x58>
 801138c:	2301      	movs	r3, #1
 801138e:	4622      	mov	r2, r4
 8011390:	4649      	mov	r1, r9
 8011392:	4638      	mov	r0, r7
 8011394:	47c0      	blx	r8
 8011396:	3001      	adds	r0, #1
 8011398:	d0e6      	beq.n	8011368 <_printf_common+0xa4>
 801139a:	3601      	adds	r6, #1
 801139c:	e7d9      	b.n	8011352 <_printf_common+0x8e>
	...

080113a0 <_printf_i>:
 80113a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113a4:	7e0f      	ldrb	r7, [r1, #24]
 80113a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113a8:	2f78      	cmp	r7, #120	; 0x78
 80113aa:	4691      	mov	r9, r2
 80113ac:	4680      	mov	r8, r0
 80113ae:	460c      	mov	r4, r1
 80113b0:	469a      	mov	sl, r3
 80113b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80113b6:	d807      	bhi.n	80113c8 <_printf_i+0x28>
 80113b8:	2f62      	cmp	r7, #98	; 0x62
 80113ba:	d80a      	bhi.n	80113d2 <_printf_i+0x32>
 80113bc:	2f00      	cmp	r7, #0
 80113be:	f000 80d8 	beq.w	8011572 <_printf_i+0x1d2>
 80113c2:	2f58      	cmp	r7, #88	; 0x58
 80113c4:	f000 80a3 	beq.w	801150e <_printf_i+0x16e>
 80113c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113d0:	e03a      	b.n	8011448 <_printf_i+0xa8>
 80113d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113d6:	2b15      	cmp	r3, #21
 80113d8:	d8f6      	bhi.n	80113c8 <_printf_i+0x28>
 80113da:	a101      	add	r1, pc, #4	; (adr r1, 80113e0 <_printf_i+0x40>)
 80113dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80113e0:	08011439 	.word	0x08011439
 80113e4:	0801144d 	.word	0x0801144d
 80113e8:	080113c9 	.word	0x080113c9
 80113ec:	080113c9 	.word	0x080113c9
 80113f0:	080113c9 	.word	0x080113c9
 80113f4:	080113c9 	.word	0x080113c9
 80113f8:	0801144d 	.word	0x0801144d
 80113fc:	080113c9 	.word	0x080113c9
 8011400:	080113c9 	.word	0x080113c9
 8011404:	080113c9 	.word	0x080113c9
 8011408:	080113c9 	.word	0x080113c9
 801140c:	08011559 	.word	0x08011559
 8011410:	0801147d 	.word	0x0801147d
 8011414:	0801153b 	.word	0x0801153b
 8011418:	080113c9 	.word	0x080113c9
 801141c:	080113c9 	.word	0x080113c9
 8011420:	0801157b 	.word	0x0801157b
 8011424:	080113c9 	.word	0x080113c9
 8011428:	0801147d 	.word	0x0801147d
 801142c:	080113c9 	.word	0x080113c9
 8011430:	080113c9 	.word	0x080113c9
 8011434:	08011543 	.word	0x08011543
 8011438:	682b      	ldr	r3, [r5, #0]
 801143a:	1d1a      	adds	r2, r3, #4
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	602a      	str	r2, [r5, #0]
 8011440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011448:	2301      	movs	r3, #1
 801144a:	e0a3      	b.n	8011594 <_printf_i+0x1f4>
 801144c:	6820      	ldr	r0, [r4, #0]
 801144e:	6829      	ldr	r1, [r5, #0]
 8011450:	0606      	lsls	r6, r0, #24
 8011452:	f101 0304 	add.w	r3, r1, #4
 8011456:	d50a      	bpl.n	801146e <_printf_i+0xce>
 8011458:	680e      	ldr	r6, [r1, #0]
 801145a:	602b      	str	r3, [r5, #0]
 801145c:	2e00      	cmp	r6, #0
 801145e:	da03      	bge.n	8011468 <_printf_i+0xc8>
 8011460:	232d      	movs	r3, #45	; 0x2d
 8011462:	4276      	negs	r6, r6
 8011464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011468:	485e      	ldr	r0, [pc, #376]	; (80115e4 <_printf_i+0x244>)
 801146a:	230a      	movs	r3, #10
 801146c:	e019      	b.n	80114a2 <_printf_i+0x102>
 801146e:	680e      	ldr	r6, [r1, #0]
 8011470:	602b      	str	r3, [r5, #0]
 8011472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011476:	bf18      	it	ne
 8011478:	b236      	sxthne	r6, r6
 801147a:	e7ef      	b.n	801145c <_printf_i+0xbc>
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	6820      	ldr	r0, [r4, #0]
 8011480:	1d19      	adds	r1, r3, #4
 8011482:	6029      	str	r1, [r5, #0]
 8011484:	0601      	lsls	r1, r0, #24
 8011486:	d501      	bpl.n	801148c <_printf_i+0xec>
 8011488:	681e      	ldr	r6, [r3, #0]
 801148a:	e002      	b.n	8011492 <_printf_i+0xf2>
 801148c:	0646      	lsls	r6, r0, #25
 801148e:	d5fb      	bpl.n	8011488 <_printf_i+0xe8>
 8011490:	881e      	ldrh	r6, [r3, #0]
 8011492:	4854      	ldr	r0, [pc, #336]	; (80115e4 <_printf_i+0x244>)
 8011494:	2f6f      	cmp	r7, #111	; 0x6f
 8011496:	bf0c      	ite	eq
 8011498:	2308      	moveq	r3, #8
 801149a:	230a      	movne	r3, #10
 801149c:	2100      	movs	r1, #0
 801149e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114a2:	6865      	ldr	r5, [r4, #4]
 80114a4:	60a5      	str	r5, [r4, #8]
 80114a6:	2d00      	cmp	r5, #0
 80114a8:	bfa2      	ittt	ge
 80114aa:	6821      	ldrge	r1, [r4, #0]
 80114ac:	f021 0104 	bicge.w	r1, r1, #4
 80114b0:	6021      	strge	r1, [r4, #0]
 80114b2:	b90e      	cbnz	r6, 80114b8 <_printf_i+0x118>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d04d      	beq.n	8011554 <_printf_i+0x1b4>
 80114b8:	4615      	mov	r5, r2
 80114ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80114be:	fb03 6711 	mls	r7, r3, r1, r6
 80114c2:	5dc7      	ldrb	r7, [r0, r7]
 80114c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80114c8:	4637      	mov	r7, r6
 80114ca:	42bb      	cmp	r3, r7
 80114cc:	460e      	mov	r6, r1
 80114ce:	d9f4      	bls.n	80114ba <_printf_i+0x11a>
 80114d0:	2b08      	cmp	r3, #8
 80114d2:	d10b      	bne.n	80114ec <_printf_i+0x14c>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	07de      	lsls	r6, r3, #31
 80114d8:	d508      	bpl.n	80114ec <_printf_i+0x14c>
 80114da:	6923      	ldr	r3, [r4, #16]
 80114dc:	6861      	ldr	r1, [r4, #4]
 80114de:	4299      	cmp	r1, r3
 80114e0:	bfde      	ittt	le
 80114e2:	2330      	movle	r3, #48	; 0x30
 80114e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80114e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80114ec:	1b52      	subs	r2, r2, r5
 80114ee:	6122      	str	r2, [r4, #16]
 80114f0:	f8cd a000 	str.w	sl, [sp]
 80114f4:	464b      	mov	r3, r9
 80114f6:	aa03      	add	r2, sp, #12
 80114f8:	4621      	mov	r1, r4
 80114fa:	4640      	mov	r0, r8
 80114fc:	f7ff fee2 	bl	80112c4 <_printf_common>
 8011500:	3001      	adds	r0, #1
 8011502:	d14c      	bne.n	801159e <_printf_i+0x1fe>
 8011504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011508:	b004      	add	sp, #16
 801150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801150e:	4835      	ldr	r0, [pc, #212]	; (80115e4 <_printf_i+0x244>)
 8011510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011514:	6829      	ldr	r1, [r5, #0]
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	f851 6b04 	ldr.w	r6, [r1], #4
 801151c:	6029      	str	r1, [r5, #0]
 801151e:	061d      	lsls	r5, r3, #24
 8011520:	d514      	bpl.n	801154c <_printf_i+0x1ac>
 8011522:	07df      	lsls	r7, r3, #31
 8011524:	bf44      	itt	mi
 8011526:	f043 0320 	orrmi.w	r3, r3, #32
 801152a:	6023      	strmi	r3, [r4, #0]
 801152c:	b91e      	cbnz	r6, 8011536 <_printf_i+0x196>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	f023 0320 	bic.w	r3, r3, #32
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	2310      	movs	r3, #16
 8011538:	e7b0      	b.n	801149c <_printf_i+0xfc>
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	f043 0320 	orr.w	r3, r3, #32
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	2378      	movs	r3, #120	; 0x78
 8011544:	4828      	ldr	r0, [pc, #160]	; (80115e8 <_printf_i+0x248>)
 8011546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801154a:	e7e3      	b.n	8011514 <_printf_i+0x174>
 801154c:	0659      	lsls	r1, r3, #25
 801154e:	bf48      	it	mi
 8011550:	b2b6      	uxthmi	r6, r6
 8011552:	e7e6      	b.n	8011522 <_printf_i+0x182>
 8011554:	4615      	mov	r5, r2
 8011556:	e7bb      	b.n	80114d0 <_printf_i+0x130>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	6826      	ldr	r6, [r4, #0]
 801155c:	6961      	ldr	r1, [r4, #20]
 801155e:	1d18      	adds	r0, r3, #4
 8011560:	6028      	str	r0, [r5, #0]
 8011562:	0635      	lsls	r5, r6, #24
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	d501      	bpl.n	801156c <_printf_i+0x1cc>
 8011568:	6019      	str	r1, [r3, #0]
 801156a:	e002      	b.n	8011572 <_printf_i+0x1d2>
 801156c:	0670      	lsls	r0, r6, #25
 801156e:	d5fb      	bpl.n	8011568 <_printf_i+0x1c8>
 8011570:	8019      	strh	r1, [r3, #0]
 8011572:	2300      	movs	r3, #0
 8011574:	6123      	str	r3, [r4, #16]
 8011576:	4615      	mov	r5, r2
 8011578:	e7ba      	b.n	80114f0 <_printf_i+0x150>
 801157a:	682b      	ldr	r3, [r5, #0]
 801157c:	1d1a      	adds	r2, r3, #4
 801157e:	602a      	str	r2, [r5, #0]
 8011580:	681d      	ldr	r5, [r3, #0]
 8011582:	6862      	ldr	r2, [r4, #4]
 8011584:	2100      	movs	r1, #0
 8011586:	4628      	mov	r0, r5
 8011588:	f7ee fe42 	bl	8000210 <memchr>
 801158c:	b108      	cbz	r0, 8011592 <_printf_i+0x1f2>
 801158e:	1b40      	subs	r0, r0, r5
 8011590:	6060      	str	r0, [r4, #4]
 8011592:	6863      	ldr	r3, [r4, #4]
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	2300      	movs	r3, #0
 8011598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801159c:	e7a8      	b.n	80114f0 <_printf_i+0x150>
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	462a      	mov	r2, r5
 80115a2:	4649      	mov	r1, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	47d0      	blx	sl
 80115a8:	3001      	adds	r0, #1
 80115aa:	d0ab      	beq.n	8011504 <_printf_i+0x164>
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	079b      	lsls	r3, r3, #30
 80115b0:	d413      	bmi.n	80115da <_printf_i+0x23a>
 80115b2:	68e0      	ldr	r0, [r4, #12]
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	4298      	cmp	r0, r3
 80115b8:	bfb8      	it	lt
 80115ba:	4618      	movlt	r0, r3
 80115bc:	e7a4      	b.n	8011508 <_printf_i+0x168>
 80115be:	2301      	movs	r3, #1
 80115c0:	4632      	mov	r2, r6
 80115c2:	4649      	mov	r1, r9
 80115c4:	4640      	mov	r0, r8
 80115c6:	47d0      	blx	sl
 80115c8:	3001      	adds	r0, #1
 80115ca:	d09b      	beq.n	8011504 <_printf_i+0x164>
 80115cc:	3501      	adds	r5, #1
 80115ce:	68e3      	ldr	r3, [r4, #12]
 80115d0:	9903      	ldr	r1, [sp, #12]
 80115d2:	1a5b      	subs	r3, r3, r1
 80115d4:	42ab      	cmp	r3, r5
 80115d6:	dcf2      	bgt.n	80115be <_printf_i+0x21e>
 80115d8:	e7eb      	b.n	80115b2 <_printf_i+0x212>
 80115da:	2500      	movs	r5, #0
 80115dc:	f104 0619 	add.w	r6, r4, #25
 80115e0:	e7f5      	b.n	80115ce <_printf_i+0x22e>
 80115e2:	bf00      	nop
 80115e4:	080139da 	.word	0x080139da
 80115e8:	080139eb 	.word	0x080139eb

080115ec <iprintf>:
 80115ec:	b40f      	push	{r0, r1, r2, r3}
 80115ee:	4b0a      	ldr	r3, [pc, #40]	; (8011618 <iprintf+0x2c>)
 80115f0:	b513      	push	{r0, r1, r4, lr}
 80115f2:	681c      	ldr	r4, [r3, #0]
 80115f4:	b124      	cbz	r4, 8011600 <iprintf+0x14>
 80115f6:	69a3      	ldr	r3, [r4, #24]
 80115f8:	b913      	cbnz	r3, 8011600 <iprintf+0x14>
 80115fa:	4620      	mov	r0, r4
 80115fc:	f000 ff0e 	bl	801241c <__sinit>
 8011600:	ab05      	add	r3, sp, #20
 8011602:	9a04      	ldr	r2, [sp, #16]
 8011604:	68a1      	ldr	r1, [r4, #8]
 8011606:	9301      	str	r3, [sp, #4]
 8011608:	4620      	mov	r0, r4
 801160a:	f001 fba1 	bl	8012d50 <_vfiprintf_r>
 801160e:	b002      	add	sp, #8
 8011610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011614:	b004      	add	sp, #16
 8011616:	4770      	bx	lr
 8011618:	20000100 	.word	0x20000100

0801161c <_sbrk_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d06      	ldr	r5, [pc, #24]	; (8011638 <_sbrk_r+0x1c>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	602b      	str	r3, [r5, #0]
 8011628:	f001 ffe8 	bl	80135fc <_sbrk>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_sbrk_r+0x1a>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	b103      	cbz	r3, 8011636 <_sbrk_r+0x1a>
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	2000293c 	.word	0x2000293c

0801163c <__assert_func>:
 801163c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801163e:	4614      	mov	r4, r2
 8011640:	461a      	mov	r2, r3
 8011642:	4b09      	ldr	r3, [pc, #36]	; (8011668 <__assert_func+0x2c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4605      	mov	r5, r0
 8011648:	68d8      	ldr	r0, [r3, #12]
 801164a:	b14c      	cbz	r4, 8011660 <__assert_func+0x24>
 801164c:	4b07      	ldr	r3, [pc, #28]	; (801166c <__assert_func+0x30>)
 801164e:	9100      	str	r1, [sp, #0]
 8011650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011654:	4906      	ldr	r1, [pc, #24]	; (8011670 <__assert_func+0x34>)
 8011656:	462b      	mov	r3, r5
 8011658:	f000 ff5e 	bl	8012518 <fiprintf>
 801165c:	f001 fdcc 	bl	80131f8 <abort>
 8011660:	4b04      	ldr	r3, [pc, #16]	; (8011674 <__assert_func+0x38>)
 8011662:	461c      	mov	r4, r3
 8011664:	e7f3      	b.n	801164e <__assert_func+0x12>
 8011666:	bf00      	nop
 8011668:	20000100 	.word	0x20000100
 801166c:	080139fc 	.word	0x080139fc
 8011670:	08013a09 	.word	0x08013a09
 8011674:	08013a37 	.word	0x08013a37

08011678 <quorem>:
 8011678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	6903      	ldr	r3, [r0, #16]
 801167e:	690c      	ldr	r4, [r1, #16]
 8011680:	42a3      	cmp	r3, r4
 8011682:	4607      	mov	r7, r0
 8011684:	f2c0 8081 	blt.w	801178a <quorem+0x112>
 8011688:	3c01      	subs	r4, #1
 801168a:	f101 0814 	add.w	r8, r1, #20
 801168e:	f100 0514 	add.w	r5, r0, #20
 8011692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011696:	9301      	str	r3, [sp, #4]
 8011698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801169c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116a0:	3301      	adds	r3, #1
 80116a2:	429a      	cmp	r2, r3
 80116a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80116a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80116ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80116b0:	d331      	bcc.n	8011716 <quorem+0x9e>
 80116b2:	f04f 0e00 	mov.w	lr, #0
 80116b6:	4640      	mov	r0, r8
 80116b8:	46ac      	mov	ip, r5
 80116ba:	46f2      	mov	sl, lr
 80116bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80116c0:	b293      	uxth	r3, r2
 80116c2:	fb06 e303 	mla	r3, r6, r3, lr
 80116c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	ebaa 0303 	sub.w	r3, sl, r3
 80116d0:	f8dc a000 	ldr.w	sl, [ip]
 80116d4:	0c12      	lsrs	r2, r2, #16
 80116d6:	fa13 f38a 	uxtah	r3, r3, sl
 80116da:	fb06 e202 	mla	r2, r6, r2, lr
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	9b00      	ldr	r3, [sp, #0]
 80116e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80116e6:	b292      	uxth	r2, r2
 80116e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80116ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80116f4:	4581      	cmp	r9, r0
 80116f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116fa:	f84c 3b04 	str.w	r3, [ip], #4
 80116fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011702:	d2db      	bcs.n	80116bc <quorem+0x44>
 8011704:	f855 300b 	ldr.w	r3, [r5, fp]
 8011708:	b92b      	cbnz	r3, 8011716 <quorem+0x9e>
 801170a:	9b01      	ldr	r3, [sp, #4]
 801170c:	3b04      	subs	r3, #4
 801170e:	429d      	cmp	r5, r3
 8011710:	461a      	mov	r2, r3
 8011712:	d32e      	bcc.n	8011772 <quorem+0xfa>
 8011714:	613c      	str	r4, [r7, #16]
 8011716:	4638      	mov	r0, r7
 8011718:	f001 f9d8 	bl	8012acc <__mcmp>
 801171c:	2800      	cmp	r0, #0
 801171e:	db24      	blt.n	801176a <quorem+0xf2>
 8011720:	3601      	adds	r6, #1
 8011722:	4628      	mov	r0, r5
 8011724:	f04f 0c00 	mov.w	ip, #0
 8011728:	f858 2b04 	ldr.w	r2, [r8], #4
 801172c:	f8d0 e000 	ldr.w	lr, [r0]
 8011730:	b293      	uxth	r3, r2
 8011732:	ebac 0303 	sub.w	r3, ip, r3
 8011736:	0c12      	lsrs	r2, r2, #16
 8011738:	fa13 f38e 	uxtah	r3, r3, lr
 801173c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011744:	b29b      	uxth	r3, r3
 8011746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801174a:	45c1      	cmp	r9, r8
 801174c:	f840 3b04 	str.w	r3, [r0], #4
 8011750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011754:	d2e8      	bcs.n	8011728 <quorem+0xb0>
 8011756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801175a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801175e:	b922      	cbnz	r2, 801176a <quorem+0xf2>
 8011760:	3b04      	subs	r3, #4
 8011762:	429d      	cmp	r5, r3
 8011764:	461a      	mov	r2, r3
 8011766:	d30a      	bcc.n	801177e <quorem+0x106>
 8011768:	613c      	str	r4, [r7, #16]
 801176a:	4630      	mov	r0, r6
 801176c:	b003      	add	sp, #12
 801176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011772:	6812      	ldr	r2, [r2, #0]
 8011774:	3b04      	subs	r3, #4
 8011776:	2a00      	cmp	r2, #0
 8011778:	d1cc      	bne.n	8011714 <quorem+0x9c>
 801177a:	3c01      	subs	r4, #1
 801177c:	e7c7      	b.n	801170e <quorem+0x96>
 801177e:	6812      	ldr	r2, [r2, #0]
 8011780:	3b04      	subs	r3, #4
 8011782:	2a00      	cmp	r2, #0
 8011784:	d1f0      	bne.n	8011768 <quorem+0xf0>
 8011786:	3c01      	subs	r4, #1
 8011788:	e7eb      	b.n	8011762 <quorem+0xea>
 801178a:	2000      	movs	r0, #0
 801178c:	e7ee      	b.n	801176c <quorem+0xf4>
	...

08011790 <_dtoa_r>:
 8011790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011794:	ed2d 8b04 	vpush	{d8-d9}
 8011798:	ec57 6b10 	vmov	r6, r7, d0
 801179c:	b093      	sub	sp, #76	; 0x4c
 801179e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80117a4:	9106      	str	r1, [sp, #24]
 80117a6:	ee10 aa10 	vmov	sl, s0
 80117aa:	4604      	mov	r4, r0
 80117ac:	9209      	str	r2, [sp, #36]	; 0x24
 80117ae:	930c      	str	r3, [sp, #48]	; 0x30
 80117b0:	46bb      	mov	fp, r7
 80117b2:	b975      	cbnz	r5, 80117d2 <_dtoa_r+0x42>
 80117b4:	2010      	movs	r0, #16
 80117b6:	f7ff f9b1 	bl	8010b1c <malloc>
 80117ba:	4602      	mov	r2, r0
 80117bc:	6260      	str	r0, [r4, #36]	; 0x24
 80117be:	b920      	cbnz	r0, 80117ca <_dtoa_r+0x3a>
 80117c0:	4ba7      	ldr	r3, [pc, #668]	; (8011a60 <_dtoa_r+0x2d0>)
 80117c2:	21ea      	movs	r1, #234	; 0xea
 80117c4:	48a7      	ldr	r0, [pc, #668]	; (8011a64 <_dtoa_r+0x2d4>)
 80117c6:	f7ff ff39 	bl	801163c <__assert_func>
 80117ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117ce:	6005      	str	r5, [r0, #0]
 80117d0:	60c5      	str	r5, [r0, #12]
 80117d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117d4:	6819      	ldr	r1, [r3, #0]
 80117d6:	b151      	cbz	r1, 80117ee <_dtoa_r+0x5e>
 80117d8:	685a      	ldr	r2, [r3, #4]
 80117da:	604a      	str	r2, [r1, #4]
 80117dc:	2301      	movs	r3, #1
 80117de:	4093      	lsls	r3, r2
 80117e0:	608b      	str	r3, [r1, #8]
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 ff30 	bl	8012648 <_Bfree>
 80117e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117ea:	2200      	movs	r2, #0
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	1e3b      	subs	r3, r7, #0
 80117f0:	bfaa      	itet	ge
 80117f2:	2300      	movge	r3, #0
 80117f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80117f8:	f8c8 3000 	strge.w	r3, [r8]
 80117fc:	4b9a      	ldr	r3, [pc, #616]	; (8011a68 <_dtoa_r+0x2d8>)
 80117fe:	bfbc      	itt	lt
 8011800:	2201      	movlt	r2, #1
 8011802:	f8c8 2000 	strlt.w	r2, [r8]
 8011806:	ea33 030b 	bics.w	r3, r3, fp
 801180a:	d11b      	bne.n	8011844 <_dtoa_r+0xb4>
 801180c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801180e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011812:	6013      	str	r3, [r2, #0]
 8011814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011818:	4333      	orrs	r3, r6
 801181a:	f000 8592 	beq.w	8012342 <_dtoa_r+0xbb2>
 801181e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011820:	b963      	cbnz	r3, 801183c <_dtoa_r+0xac>
 8011822:	4b92      	ldr	r3, [pc, #584]	; (8011a6c <_dtoa_r+0x2dc>)
 8011824:	e022      	b.n	801186c <_dtoa_r+0xdc>
 8011826:	4b92      	ldr	r3, [pc, #584]	; (8011a70 <_dtoa_r+0x2e0>)
 8011828:	9301      	str	r3, [sp, #4]
 801182a:	3308      	adds	r3, #8
 801182c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801182e:	6013      	str	r3, [r2, #0]
 8011830:	9801      	ldr	r0, [sp, #4]
 8011832:	b013      	add	sp, #76	; 0x4c
 8011834:	ecbd 8b04 	vpop	{d8-d9}
 8011838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801183c:	4b8b      	ldr	r3, [pc, #556]	; (8011a6c <_dtoa_r+0x2dc>)
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	3303      	adds	r3, #3
 8011842:	e7f3      	b.n	801182c <_dtoa_r+0x9c>
 8011844:	2200      	movs	r2, #0
 8011846:	2300      	movs	r3, #0
 8011848:	4650      	mov	r0, sl
 801184a:	4659      	mov	r1, fp
 801184c:	f7ef f954 	bl	8000af8 <__aeabi_dcmpeq>
 8011850:	ec4b ab19 	vmov	d9, sl, fp
 8011854:	4680      	mov	r8, r0
 8011856:	b158      	cbz	r0, 8011870 <_dtoa_r+0xe0>
 8011858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801185a:	2301      	movs	r3, #1
 801185c:	6013      	str	r3, [r2, #0]
 801185e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011860:	2b00      	cmp	r3, #0
 8011862:	f000 856b 	beq.w	801233c <_dtoa_r+0xbac>
 8011866:	4883      	ldr	r0, [pc, #524]	; (8011a74 <_dtoa_r+0x2e4>)
 8011868:	6018      	str	r0, [r3, #0]
 801186a:	1e43      	subs	r3, r0, #1
 801186c:	9301      	str	r3, [sp, #4]
 801186e:	e7df      	b.n	8011830 <_dtoa_r+0xa0>
 8011870:	ec4b ab10 	vmov	d0, sl, fp
 8011874:	aa10      	add	r2, sp, #64	; 0x40
 8011876:	a911      	add	r1, sp, #68	; 0x44
 8011878:	4620      	mov	r0, r4
 801187a:	f001 f9cd 	bl	8012c18 <__d2b>
 801187e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011882:	ee08 0a10 	vmov	s16, r0
 8011886:	2d00      	cmp	r5, #0
 8011888:	f000 8084 	beq.w	8011994 <_dtoa_r+0x204>
 801188c:	ee19 3a90 	vmov	r3, s19
 8011890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011894:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011898:	4656      	mov	r6, sl
 801189a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801189e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80118a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80118a6:	4b74      	ldr	r3, [pc, #464]	; (8011a78 <_dtoa_r+0x2e8>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	4630      	mov	r0, r6
 80118ac:	4639      	mov	r1, r7
 80118ae:	f7ee fd03 	bl	80002b8 <__aeabi_dsub>
 80118b2:	a365      	add	r3, pc, #404	; (adr r3, 8011a48 <_dtoa_r+0x2b8>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	f7ee feb6 	bl	8000628 <__aeabi_dmul>
 80118bc:	a364      	add	r3, pc, #400	; (adr r3, 8011a50 <_dtoa_r+0x2c0>)
 80118be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c2:	f7ee fcfb 	bl	80002bc <__adddf3>
 80118c6:	4606      	mov	r6, r0
 80118c8:	4628      	mov	r0, r5
 80118ca:	460f      	mov	r7, r1
 80118cc:	f7ee fe42 	bl	8000554 <__aeabi_i2d>
 80118d0:	a361      	add	r3, pc, #388	; (adr r3, 8011a58 <_dtoa_r+0x2c8>)
 80118d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d6:	f7ee fea7 	bl	8000628 <__aeabi_dmul>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4630      	mov	r0, r6
 80118e0:	4639      	mov	r1, r7
 80118e2:	f7ee fceb 	bl	80002bc <__adddf3>
 80118e6:	4606      	mov	r6, r0
 80118e8:	460f      	mov	r7, r1
 80118ea:	f7ef f94d 	bl	8000b88 <__aeabi_d2iz>
 80118ee:	2200      	movs	r2, #0
 80118f0:	9000      	str	r0, [sp, #0]
 80118f2:	2300      	movs	r3, #0
 80118f4:	4630      	mov	r0, r6
 80118f6:	4639      	mov	r1, r7
 80118f8:	f7ef f908 	bl	8000b0c <__aeabi_dcmplt>
 80118fc:	b150      	cbz	r0, 8011914 <_dtoa_r+0x184>
 80118fe:	9800      	ldr	r0, [sp, #0]
 8011900:	f7ee fe28 	bl	8000554 <__aeabi_i2d>
 8011904:	4632      	mov	r2, r6
 8011906:	463b      	mov	r3, r7
 8011908:	f7ef f8f6 	bl	8000af8 <__aeabi_dcmpeq>
 801190c:	b910      	cbnz	r0, 8011914 <_dtoa_r+0x184>
 801190e:	9b00      	ldr	r3, [sp, #0]
 8011910:	3b01      	subs	r3, #1
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	9b00      	ldr	r3, [sp, #0]
 8011916:	2b16      	cmp	r3, #22
 8011918:	d85a      	bhi.n	80119d0 <_dtoa_r+0x240>
 801191a:	9a00      	ldr	r2, [sp, #0]
 801191c:	4b57      	ldr	r3, [pc, #348]	; (8011a7c <_dtoa_r+0x2ec>)
 801191e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011926:	ec51 0b19 	vmov	r0, r1, d9
 801192a:	f7ef f8ef 	bl	8000b0c <__aeabi_dcmplt>
 801192e:	2800      	cmp	r0, #0
 8011930:	d050      	beq.n	80119d4 <_dtoa_r+0x244>
 8011932:	9b00      	ldr	r3, [sp, #0]
 8011934:	3b01      	subs	r3, #1
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	2300      	movs	r3, #0
 801193a:	930b      	str	r3, [sp, #44]	; 0x2c
 801193c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801193e:	1b5d      	subs	r5, r3, r5
 8011940:	1e6b      	subs	r3, r5, #1
 8011942:	9305      	str	r3, [sp, #20]
 8011944:	bf45      	ittet	mi
 8011946:	f1c5 0301 	rsbmi	r3, r5, #1
 801194a:	9304      	strmi	r3, [sp, #16]
 801194c:	2300      	movpl	r3, #0
 801194e:	2300      	movmi	r3, #0
 8011950:	bf4c      	ite	mi
 8011952:	9305      	strmi	r3, [sp, #20]
 8011954:	9304      	strpl	r3, [sp, #16]
 8011956:	9b00      	ldr	r3, [sp, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	db3d      	blt.n	80119d8 <_dtoa_r+0x248>
 801195c:	9b05      	ldr	r3, [sp, #20]
 801195e:	9a00      	ldr	r2, [sp, #0]
 8011960:	920a      	str	r2, [sp, #40]	; 0x28
 8011962:	4413      	add	r3, r2
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	2300      	movs	r3, #0
 8011968:	9307      	str	r3, [sp, #28]
 801196a:	9b06      	ldr	r3, [sp, #24]
 801196c:	2b09      	cmp	r3, #9
 801196e:	f200 8089 	bhi.w	8011a84 <_dtoa_r+0x2f4>
 8011972:	2b05      	cmp	r3, #5
 8011974:	bfc4      	itt	gt
 8011976:	3b04      	subgt	r3, #4
 8011978:	9306      	strgt	r3, [sp, #24]
 801197a:	9b06      	ldr	r3, [sp, #24]
 801197c:	f1a3 0302 	sub.w	r3, r3, #2
 8011980:	bfcc      	ite	gt
 8011982:	2500      	movgt	r5, #0
 8011984:	2501      	movle	r5, #1
 8011986:	2b03      	cmp	r3, #3
 8011988:	f200 8087 	bhi.w	8011a9a <_dtoa_r+0x30a>
 801198c:	e8df f003 	tbb	[pc, r3]
 8011990:	59383a2d 	.word	0x59383a2d
 8011994:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011998:	441d      	add	r5, r3
 801199a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801199e:	2b20      	cmp	r3, #32
 80119a0:	bfc1      	itttt	gt
 80119a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80119a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80119aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80119ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80119b2:	bfda      	itte	le
 80119b4:	f1c3 0320 	rsble	r3, r3, #32
 80119b8:	fa06 f003 	lslle.w	r0, r6, r3
 80119bc:	4318      	orrgt	r0, r3
 80119be:	f7ee fdb9 	bl	8000534 <__aeabi_ui2d>
 80119c2:	2301      	movs	r3, #1
 80119c4:	4606      	mov	r6, r0
 80119c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80119ca:	3d01      	subs	r5, #1
 80119cc:	930e      	str	r3, [sp, #56]	; 0x38
 80119ce:	e76a      	b.n	80118a6 <_dtoa_r+0x116>
 80119d0:	2301      	movs	r3, #1
 80119d2:	e7b2      	b.n	801193a <_dtoa_r+0x1aa>
 80119d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80119d6:	e7b1      	b.n	801193c <_dtoa_r+0x1ac>
 80119d8:	9b04      	ldr	r3, [sp, #16]
 80119da:	9a00      	ldr	r2, [sp, #0]
 80119dc:	1a9b      	subs	r3, r3, r2
 80119de:	9304      	str	r3, [sp, #16]
 80119e0:	4253      	negs	r3, r2
 80119e2:	9307      	str	r3, [sp, #28]
 80119e4:	2300      	movs	r3, #0
 80119e6:	930a      	str	r3, [sp, #40]	; 0x28
 80119e8:	e7bf      	b.n	801196a <_dtoa_r+0x1da>
 80119ea:	2300      	movs	r3, #0
 80119ec:	9308      	str	r3, [sp, #32]
 80119ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	dc55      	bgt.n	8011aa0 <_dtoa_r+0x310>
 80119f4:	2301      	movs	r3, #1
 80119f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80119fa:	461a      	mov	r2, r3
 80119fc:	9209      	str	r2, [sp, #36]	; 0x24
 80119fe:	e00c      	b.n	8011a1a <_dtoa_r+0x28a>
 8011a00:	2301      	movs	r3, #1
 8011a02:	e7f3      	b.n	80119ec <_dtoa_r+0x25c>
 8011a04:	2300      	movs	r3, #0
 8011a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a08:	9308      	str	r3, [sp, #32]
 8011a0a:	9b00      	ldr	r3, [sp, #0]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	9302      	str	r3, [sp, #8]
 8011a10:	3301      	adds	r3, #1
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	9303      	str	r3, [sp, #12]
 8011a16:	bfb8      	it	lt
 8011a18:	2301      	movlt	r3, #1
 8011a1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	6042      	str	r2, [r0, #4]
 8011a20:	2204      	movs	r2, #4
 8011a22:	f102 0614 	add.w	r6, r2, #20
 8011a26:	429e      	cmp	r6, r3
 8011a28:	6841      	ldr	r1, [r0, #4]
 8011a2a:	d93d      	bls.n	8011aa8 <_dtoa_r+0x318>
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f000 fdcb 	bl	80125c8 <_Balloc>
 8011a32:	9001      	str	r0, [sp, #4]
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d13b      	bne.n	8011ab0 <_dtoa_r+0x320>
 8011a38:	4b11      	ldr	r3, [pc, #68]	; (8011a80 <_dtoa_r+0x2f0>)
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a40:	e6c0      	b.n	80117c4 <_dtoa_r+0x34>
 8011a42:	2301      	movs	r3, #1
 8011a44:	e7df      	b.n	8011a06 <_dtoa_r+0x276>
 8011a46:	bf00      	nop
 8011a48:	636f4361 	.word	0x636f4361
 8011a4c:	3fd287a7 	.word	0x3fd287a7
 8011a50:	8b60c8b3 	.word	0x8b60c8b3
 8011a54:	3fc68a28 	.word	0x3fc68a28
 8011a58:	509f79fb 	.word	0x509f79fb
 8011a5c:	3fd34413 	.word	0x3fd34413
 8011a60:	08013b46 	.word	0x08013b46
 8011a64:	08013b5d 	.word	0x08013b5d
 8011a68:	7ff00000 	.word	0x7ff00000
 8011a6c:	08013b42 	.word	0x08013b42
 8011a70:	08013b39 	.word	0x08013b39
 8011a74:	080139d9 	.word	0x080139d9
 8011a78:	3ff80000 	.word	0x3ff80000
 8011a7c:	08013cc0 	.word	0x08013cc0
 8011a80:	08013bb8 	.word	0x08013bb8
 8011a84:	2501      	movs	r5, #1
 8011a86:	2300      	movs	r3, #0
 8011a88:	9306      	str	r3, [sp, #24]
 8011a8a:	9508      	str	r5, [sp, #32]
 8011a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a94:	2200      	movs	r2, #0
 8011a96:	2312      	movs	r3, #18
 8011a98:	e7b0      	b.n	80119fc <_dtoa_r+0x26c>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	9308      	str	r3, [sp, #32]
 8011a9e:	e7f5      	b.n	8011a8c <_dtoa_r+0x2fc>
 8011aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011aa6:	e7b8      	b.n	8011a1a <_dtoa_r+0x28a>
 8011aa8:	3101      	adds	r1, #1
 8011aaa:	6041      	str	r1, [r0, #4]
 8011aac:	0052      	lsls	r2, r2, #1
 8011aae:	e7b8      	b.n	8011a22 <_dtoa_r+0x292>
 8011ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ab2:	9a01      	ldr	r2, [sp, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
 8011ab6:	9b03      	ldr	r3, [sp, #12]
 8011ab8:	2b0e      	cmp	r3, #14
 8011aba:	f200 809d 	bhi.w	8011bf8 <_dtoa_r+0x468>
 8011abe:	2d00      	cmp	r5, #0
 8011ac0:	f000 809a 	beq.w	8011bf8 <_dtoa_r+0x468>
 8011ac4:	9b00      	ldr	r3, [sp, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dd32      	ble.n	8011b30 <_dtoa_r+0x3a0>
 8011aca:	4ab7      	ldr	r2, [pc, #732]	; (8011da8 <_dtoa_r+0x618>)
 8011acc:	f003 030f 	and.w	r3, r3, #15
 8011ad0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ad8:	9b00      	ldr	r3, [sp, #0]
 8011ada:	05d8      	lsls	r0, r3, #23
 8011adc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011ae0:	d516      	bpl.n	8011b10 <_dtoa_r+0x380>
 8011ae2:	4bb2      	ldr	r3, [pc, #712]	; (8011dac <_dtoa_r+0x61c>)
 8011ae4:	ec51 0b19 	vmov	r0, r1, d9
 8011ae8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011aec:	f7ee fec6 	bl	800087c <__aeabi_ddiv>
 8011af0:	f007 070f 	and.w	r7, r7, #15
 8011af4:	4682      	mov	sl, r0
 8011af6:	468b      	mov	fp, r1
 8011af8:	2503      	movs	r5, #3
 8011afa:	4eac      	ldr	r6, [pc, #688]	; (8011dac <_dtoa_r+0x61c>)
 8011afc:	b957      	cbnz	r7, 8011b14 <_dtoa_r+0x384>
 8011afe:	4642      	mov	r2, r8
 8011b00:	464b      	mov	r3, r9
 8011b02:	4650      	mov	r0, sl
 8011b04:	4659      	mov	r1, fp
 8011b06:	f7ee feb9 	bl	800087c <__aeabi_ddiv>
 8011b0a:	4682      	mov	sl, r0
 8011b0c:	468b      	mov	fp, r1
 8011b0e:	e028      	b.n	8011b62 <_dtoa_r+0x3d2>
 8011b10:	2502      	movs	r5, #2
 8011b12:	e7f2      	b.n	8011afa <_dtoa_r+0x36a>
 8011b14:	07f9      	lsls	r1, r7, #31
 8011b16:	d508      	bpl.n	8011b2a <_dtoa_r+0x39a>
 8011b18:	4640      	mov	r0, r8
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b20:	f7ee fd82 	bl	8000628 <__aeabi_dmul>
 8011b24:	3501      	adds	r5, #1
 8011b26:	4680      	mov	r8, r0
 8011b28:	4689      	mov	r9, r1
 8011b2a:	107f      	asrs	r7, r7, #1
 8011b2c:	3608      	adds	r6, #8
 8011b2e:	e7e5      	b.n	8011afc <_dtoa_r+0x36c>
 8011b30:	f000 809b 	beq.w	8011c6a <_dtoa_r+0x4da>
 8011b34:	9b00      	ldr	r3, [sp, #0]
 8011b36:	4f9d      	ldr	r7, [pc, #628]	; (8011dac <_dtoa_r+0x61c>)
 8011b38:	425e      	negs	r6, r3
 8011b3a:	4b9b      	ldr	r3, [pc, #620]	; (8011da8 <_dtoa_r+0x618>)
 8011b3c:	f006 020f 	and.w	r2, r6, #15
 8011b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b48:	ec51 0b19 	vmov	r0, r1, d9
 8011b4c:	f7ee fd6c 	bl	8000628 <__aeabi_dmul>
 8011b50:	1136      	asrs	r6, r6, #4
 8011b52:	4682      	mov	sl, r0
 8011b54:	468b      	mov	fp, r1
 8011b56:	2300      	movs	r3, #0
 8011b58:	2502      	movs	r5, #2
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	d17a      	bne.n	8011c54 <_dtoa_r+0x4c4>
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1d3      	bne.n	8011b0a <_dtoa_r+0x37a>
 8011b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f000 8082 	beq.w	8011c6e <_dtoa_r+0x4de>
 8011b6a:	4b91      	ldr	r3, [pc, #580]	; (8011db0 <_dtoa_r+0x620>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	4650      	mov	r0, sl
 8011b70:	4659      	mov	r1, fp
 8011b72:	f7ee ffcb 	bl	8000b0c <__aeabi_dcmplt>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	d079      	beq.n	8011c6e <_dtoa_r+0x4de>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d076      	beq.n	8011c6e <_dtoa_r+0x4de>
 8011b80:	9b02      	ldr	r3, [sp, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	dd36      	ble.n	8011bf4 <_dtoa_r+0x464>
 8011b86:	9b00      	ldr	r3, [sp, #0]
 8011b88:	4650      	mov	r0, sl
 8011b8a:	4659      	mov	r1, fp
 8011b8c:	1e5f      	subs	r7, r3, #1
 8011b8e:	2200      	movs	r2, #0
 8011b90:	4b88      	ldr	r3, [pc, #544]	; (8011db4 <_dtoa_r+0x624>)
 8011b92:	f7ee fd49 	bl	8000628 <__aeabi_dmul>
 8011b96:	9e02      	ldr	r6, [sp, #8]
 8011b98:	4682      	mov	sl, r0
 8011b9a:	468b      	mov	fp, r1
 8011b9c:	3501      	adds	r5, #1
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f7ee fcd8 	bl	8000554 <__aeabi_i2d>
 8011ba4:	4652      	mov	r2, sl
 8011ba6:	465b      	mov	r3, fp
 8011ba8:	f7ee fd3e 	bl	8000628 <__aeabi_dmul>
 8011bac:	4b82      	ldr	r3, [pc, #520]	; (8011db8 <_dtoa_r+0x628>)
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f7ee fb84 	bl	80002bc <__adddf3>
 8011bb4:	46d0      	mov	r8, sl
 8011bb6:	46d9      	mov	r9, fp
 8011bb8:	4682      	mov	sl, r0
 8011bba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011bbe:	2e00      	cmp	r6, #0
 8011bc0:	d158      	bne.n	8011c74 <_dtoa_r+0x4e4>
 8011bc2:	4b7e      	ldr	r3, [pc, #504]	; (8011dbc <_dtoa_r+0x62c>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	4649      	mov	r1, r9
 8011bca:	f7ee fb75 	bl	80002b8 <__aeabi_dsub>
 8011bce:	4652      	mov	r2, sl
 8011bd0:	465b      	mov	r3, fp
 8011bd2:	4680      	mov	r8, r0
 8011bd4:	4689      	mov	r9, r1
 8011bd6:	f7ee ffb7 	bl	8000b48 <__aeabi_dcmpgt>
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	f040 8295 	bne.w	801210a <_dtoa_r+0x97a>
 8011be0:	4652      	mov	r2, sl
 8011be2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011be6:	4640      	mov	r0, r8
 8011be8:	4649      	mov	r1, r9
 8011bea:	f7ee ff8f 	bl	8000b0c <__aeabi_dcmplt>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	f040 8289 	bne.w	8012106 <_dtoa_r+0x976>
 8011bf4:	ec5b ab19 	vmov	sl, fp, d9
 8011bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f2c0 8148 	blt.w	8011e90 <_dtoa_r+0x700>
 8011c00:	9a00      	ldr	r2, [sp, #0]
 8011c02:	2a0e      	cmp	r2, #14
 8011c04:	f300 8144 	bgt.w	8011e90 <_dtoa_r+0x700>
 8011c08:	4b67      	ldr	r3, [pc, #412]	; (8011da8 <_dtoa_r+0x618>)
 8011c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f280 80d5 	bge.w	8011dc4 <_dtoa_r+0x634>
 8011c1a:	9b03      	ldr	r3, [sp, #12]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f300 80d1 	bgt.w	8011dc4 <_dtoa_r+0x634>
 8011c22:	f040 826f 	bne.w	8012104 <_dtoa_r+0x974>
 8011c26:	4b65      	ldr	r3, [pc, #404]	; (8011dbc <_dtoa_r+0x62c>)
 8011c28:	2200      	movs	r2, #0
 8011c2a:	4640      	mov	r0, r8
 8011c2c:	4649      	mov	r1, r9
 8011c2e:	f7ee fcfb 	bl	8000628 <__aeabi_dmul>
 8011c32:	4652      	mov	r2, sl
 8011c34:	465b      	mov	r3, fp
 8011c36:	f7ee ff7d 	bl	8000b34 <__aeabi_dcmpge>
 8011c3a:	9e03      	ldr	r6, [sp, #12]
 8011c3c:	4637      	mov	r7, r6
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f040 8245 	bne.w	80120ce <_dtoa_r+0x93e>
 8011c44:	9d01      	ldr	r5, [sp, #4]
 8011c46:	2331      	movs	r3, #49	; 0x31
 8011c48:	f805 3b01 	strb.w	r3, [r5], #1
 8011c4c:	9b00      	ldr	r3, [sp, #0]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	9300      	str	r3, [sp, #0]
 8011c52:	e240      	b.n	80120d6 <_dtoa_r+0x946>
 8011c54:	07f2      	lsls	r2, r6, #31
 8011c56:	d505      	bpl.n	8011c64 <_dtoa_r+0x4d4>
 8011c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c5c:	f7ee fce4 	bl	8000628 <__aeabi_dmul>
 8011c60:	3501      	adds	r5, #1
 8011c62:	2301      	movs	r3, #1
 8011c64:	1076      	asrs	r6, r6, #1
 8011c66:	3708      	adds	r7, #8
 8011c68:	e777      	b.n	8011b5a <_dtoa_r+0x3ca>
 8011c6a:	2502      	movs	r5, #2
 8011c6c:	e779      	b.n	8011b62 <_dtoa_r+0x3d2>
 8011c6e:	9f00      	ldr	r7, [sp, #0]
 8011c70:	9e03      	ldr	r6, [sp, #12]
 8011c72:	e794      	b.n	8011b9e <_dtoa_r+0x40e>
 8011c74:	9901      	ldr	r1, [sp, #4]
 8011c76:	4b4c      	ldr	r3, [pc, #304]	; (8011da8 <_dtoa_r+0x618>)
 8011c78:	4431      	add	r1, r6
 8011c7a:	910d      	str	r1, [sp, #52]	; 0x34
 8011c7c:	9908      	ldr	r1, [sp, #32]
 8011c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c86:	2900      	cmp	r1, #0
 8011c88:	d043      	beq.n	8011d12 <_dtoa_r+0x582>
 8011c8a:	494d      	ldr	r1, [pc, #308]	; (8011dc0 <_dtoa_r+0x630>)
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	f7ee fdf5 	bl	800087c <__aeabi_ddiv>
 8011c92:	4652      	mov	r2, sl
 8011c94:	465b      	mov	r3, fp
 8011c96:	f7ee fb0f 	bl	80002b8 <__aeabi_dsub>
 8011c9a:	9d01      	ldr	r5, [sp, #4]
 8011c9c:	4682      	mov	sl, r0
 8011c9e:	468b      	mov	fp, r1
 8011ca0:	4649      	mov	r1, r9
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	f7ee ff70 	bl	8000b88 <__aeabi_d2iz>
 8011ca8:	4606      	mov	r6, r0
 8011caa:	f7ee fc53 	bl	8000554 <__aeabi_i2d>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	f7ee faff 	bl	80002b8 <__aeabi_dsub>
 8011cba:	3630      	adds	r6, #48	; 0x30
 8011cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8011cc0:	4652      	mov	r2, sl
 8011cc2:	465b      	mov	r3, fp
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	4689      	mov	r9, r1
 8011cc8:	f7ee ff20 	bl	8000b0c <__aeabi_dcmplt>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d163      	bne.n	8011d98 <_dtoa_r+0x608>
 8011cd0:	4642      	mov	r2, r8
 8011cd2:	464b      	mov	r3, r9
 8011cd4:	4936      	ldr	r1, [pc, #216]	; (8011db0 <_dtoa_r+0x620>)
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	f7ee faee 	bl	80002b8 <__aeabi_dsub>
 8011cdc:	4652      	mov	r2, sl
 8011cde:	465b      	mov	r3, fp
 8011ce0:	f7ee ff14 	bl	8000b0c <__aeabi_dcmplt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	f040 80b5 	bne.w	8011e54 <_dtoa_r+0x6c4>
 8011cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cec:	429d      	cmp	r5, r3
 8011cee:	d081      	beq.n	8011bf4 <_dtoa_r+0x464>
 8011cf0:	4b30      	ldr	r3, [pc, #192]	; (8011db4 <_dtoa_r+0x624>)
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	4650      	mov	r0, sl
 8011cf6:	4659      	mov	r1, fp
 8011cf8:	f7ee fc96 	bl	8000628 <__aeabi_dmul>
 8011cfc:	4b2d      	ldr	r3, [pc, #180]	; (8011db4 <_dtoa_r+0x624>)
 8011cfe:	4682      	mov	sl, r0
 8011d00:	468b      	mov	fp, r1
 8011d02:	4640      	mov	r0, r8
 8011d04:	4649      	mov	r1, r9
 8011d06:	2200      	movs	r2, #0
 8011d08:	f7ee fc8e 	bl	8000628 <__aeabi_dmul>
 8011d0c:	4680      	mov	r8, r0
 8011d0e:	4689      	mov	r9, r1
 8011d10:	e7c6      	b.n	8011ca0 <_dtoa_r+0x510>
 8011d12:	4650      	mov	r0, sl
 8011d14:	4659      	mov	r1, fp
 8011d16:	f7ee fc87 	bl	8000628 <__aeabi_dmul>
 8011d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d1c:	9d01      	ldr	r5, [sp, #4]
 8011d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d20:	4682      	mov	sl, r0
 8011d22:	468b      	mov	fp, r1
 8011d24:	4649      	mov	r1, r9
 8011d26:	4640      	mov	r0, r8
 8011d28:	f7ee ff2e 	bl	8000b88 <__aeabi_d2iz>
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	f7ee fc11 	bl	8000554 <__aeabi_i2d>
 8011d32:	3630      	adds	r6, #48	; 0x30
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4640      	mov	r0, r8
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	f7ee fabc 	bl	80002b8 <__aeabi_dsub>
 8011d40:	f805 6b01 	strb.w	r6, [r5], #1
 8011d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d46:	429d      	cmp	r5, r3
 8011d48:	4680      	mov	r8, r0
 8011d4a:	4689      	mov	r9, r1
 8011d4c:	f04f 0200 	mov.w	r2, #0
 8011d50:	d124      	bne.n	8011d9c <_dtoa_r+0x60c>
 8011d52:	4b1b      	ldr	r3, [pc, #108]	; (8011dc0 <_dtoa_r+0x630>)
 8011d54:	4650      	mov	r0, sl
 8011d56:	4659      	mov	r1, fp
 8011d58:	f7ee fab0 	bl	80002bc <__adddf3>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4640      	mov	r0, r8
 8011d62:	4649      	mov	r1, r9
 8011d64:	f7ee fef0 	bl	8000b48 <__aeabi_dcmpgt>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d173      	bne.n	8011e54 <_dtoa_r+0x6c4>
 8011d6c:	4652      	mov	r2, sl
 8011d6e:	465b      	mov	r3, fp
 8011d70:	4913      	ldr	r1, [pc, #76]	; (8011dc0 <_dtoa_r+0x630>)
 8011d72:	2000      	movs	r0, #0
 8011d74:	f7ee faa0 	bl	80002b8 <__aeabi_dsub>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	4649      	mov	r1, r9
 8011d80:	f7ee fec4 	bl	8000b0c <__aeabi_dcmplt>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	f43f af35 	beq.w	8011bf4 <_dtoa_r+0x464>
 8011d8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011d8c:	1e6b      	subs	r3, r5, #1
 8011d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d94:	2b30      	cmp	r3, #48	; 0x30
 8011d96:	d0f8      	beq.n	8011d8a <_dtoa_r+0x5fa>
 8011d98:	9700      	str	r7, [sp, #0]
 8011d9a:	e049      	b.n	8011e30 <_dtoa_r+0x6a0>
 8011d9c:	4b05      	ldr	r3, [pc, #20]	; (8011db4 <_dtoa_r+0x624>)
 8011d9e:	f7ee fc43 	bl	8000628 <__aeabi_dmul>
 8011da2:	4680      	mov	r8, r0
 8011da4:	4689      	mov	r9, r1
 8011da6:	e7bd      	b.n	8011d24 <_dtoa_r+0x594>
 8011da8:	08013cc0 	.word	0x08013cc0
 8011dac:	08013c98 	.word	0x08013c98
 8011db0:	3ff00000 	.word	0x3ff00000
 8011db4:	40240000 	.word	0x40240000
 8011db8:	401c0000 	.word	0x401c0000
 8011dbc:	40140000 	.word	0x40140000
 8011dc0:	3fe00000 	.word	0x3fe00000
 8011dc4:	9d01      	ldr	r5, [sp, #4]
 8011dc6:	4656      	mov	r6, sl
 8011dc8:	465f      	mov	r7, fp
 8011dca:	4642      	mov	r2, r8
 8011dcc:	464b      	mov	r3, r9
 8011dce:	4630      	mov	r0, r6
 8011dd0:	4639      	mov	r1, r7
 8011dd2:	f7ee fd53 	bl	800087c <__aeabi_ddiv>
 8011dd6:	f7ee fed7 	bl	8000b88 <__aeabi_d2iz>
 8011dda:	4682      	mov	sl, r0
 8011ddc:	f7ee fbba 	bl	8000554 <__aeabi_i2d>
 8011de0:	4642      	mov	r2, r8
 8011de2:	464b      	mov	r3, r9
 8011de4:	f7ee fc20 	bl	8000628 <__aeabi_dmul>
 8011de8:	4602      	mov	r2, r0
 8011dea:	460b      	mov	r3, r1
 8011dec:	4630      	mov	r0, r6
 8011dee:	4639      	mov	r1, r7
 8011df0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011df4:	f7ee fa60 	bl	80002b8 <__aeabi_dsub>
 8011df8:	f805 6b01 	strb.w	r6, [r5], #1
 8011dfc:	9e01      	ldr	r6, [sp, #4]
 8011dfe:	9f03      	ldr	r7, [sp, #12]
 8011e00:	1bae      	subs	r6, r5, r6
 8011e02:	42b7      	cmp	r7, r6
 8011e04:	4602      	mov	r2, r0
 8011e06:	460b      	mov	r3, r1
 8011e08:	d135      	bne.n	8011e76 <_dtoa_r+0x6e6>
 8011e0a:	f7ee fa57 	bl	80002bc <__adddf3>
 8011e0e:	4642      	mov	r2, r8
 8011e10:	464b      	mov	r3, r9
 8011e12:	4606      	mov	r6, r0
 8011e14:	460f      	mov	r7, r1
 8011e16:	f7ee fe97 	bl	8000b48 <__aeabi_dcmpgt>
 8011e1a:	b9d0      	cbnz	r0, 8011e52 <_dtoa_r+0x6c2>
 8011e1c:	4642      	mov	r2, r8
 8011e1e:	464b      	mov	r3, r9
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7ee fe68 	bl	8000af8 <__aeabi_dcmpeq>
 8011e28:	b110      	cbz	r0, 8011e30 <_dtoa_r+0x6a0>
 8011e2a:	f01a 0f01 	tst.w	sl, #1
 8011e2e:	d110      	bne.n	8011e52 <_dtoa_r+0x6c2>
 8011e30:	4620      	mov	r0, r4
 8011e32:	ee18 1a10 	vmov	r1, s16
 8011e36:	f000 fc07 	bl	8012648 <_Bfree>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	9800      	ldr	r0, [sp, #0]
 8011e3e:	702b      	strb	r3, [r5, #0]
 8011e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e42:	3001      	adds	r0, #1
 8011e44:	6018      	str	r0, [r3, #0]
 8011e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f43f acf1 	beq.w	8011830 <_dtoa_r+0xa0>
 8011e4e:	601d      	str	r5, [r3, #0]
 8011e50:	e4ee      	b.n	8011830 <_dtoa_r+0xa0>
 8011e52:	9f00      	ldr	r7, [sp, #0]
 8011e54:	462b      	mov	r3, r5
 8011e56:	461d      	mov	r5, r3
 8011e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e5c:	2a39      	cmp	r2, #57	; 0x39
 8011e5e:	d106      	bne.n	8011e6e <_dtoa_r+0x6de>
 8011e60:	9a01      	ldr	r2, [sp, #4]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d1f7      	bne.n	8011e56 <_dtoa_r+0x6c6>
 8011e66:	9901      	ldr	r1, [sp, #4]
 8011e68:	2230      	movs	r2, #48	; 0x30
 8011e6a:	3701      	adds	r7, #1
 8011e6c:	700a      	strb	r2, [r1, #0]
 8011e6e:	781a      	ldrb	r2, [r3, #0]
 8011e70:	3201      	adds	r2, #1
 8011e72:	701a      	strb	r2, [r3, #0]
 8011e74:	e790      	b.n	8011d98 <_dtoa_r+0x608>
 8011e76:	4ba6      	ldr	r3, [pc, #664]	; (8012110 <_dtoa_r+0x980>)
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f7ee fbd5 	bl	8000628 <__aeabi_dmul>
 8011e7e:	2200      	movs	r2, #0
 8011e80:	2300      	movs	r3, #0
 8011e82:	4606      	mov	r6, r0
 8011e84:	460f      	mov	r7, r1
 8011e86:	f7ee fe37 	bl	8000af8 <__aeabi_dcmpeq>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d09d      	beq.n	8011dca <_dtoa_r+0x63a>
 8011e8e:	e7cf      	b.n	8011e30 <_dtoa_r+0x6a0>
 8011e90:	9a08      	ldr	r2, [sp, #32]
 8011e92:	2a00      	cmp	r2, #0
 8011e94:	f000 80d7 	beq.w	8012046 <_dtoa_r+0x8b6>
 8011e98:	9a06      	ldr	r2, [sp, #24]
 8011e9a:	2a01      	cmp	r2, #1
 8011e9c:	f300 80ba 	bgt.w	8012014 <_dtoa_r+0x884>
 8011ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ea2:	2a00      	cmp	r2, #0
 8011ea4:	f000 80b2 	beq.w	801200c <_dtoa_r+0x87c>
 8011ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011eac:	9e07      	ldr	r6, [sp, #28]
 8011eae:	9d04      	ldr	r5, [sp, #16]
 8011eb0:	9a04      	ldr	r2, [sp, #16]
 8011eb2:	441a      	add	r2, r3
 8011eb4:	9204      	str	r2, [sp, #16]
 8011eb6:	9a05      	ldr	r2, [sp, #20]
 8011eb8:	2101      	movs	r1, #1
 8011eba:	441a      	add	r2, r3
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	9205      	str	r2, [sp, #20]
 8011ec0:	f000 fc7a 	bl	80127b8 <__i2b>
 8011ec4:	4607      	mov	r7, r0
 8011ec6:	2d00      	cmp	r5, #0
 8011ec8:	dd0c      	ble.n	8011ee4 <_dtoa_r+0x754>
 8011eca:	9b05      	ldr	r3, [sp, #20]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dd09      	ble.n	8011ee4 <_dtoa_r+0x754>
 8011ed0:	42ab      	cmp	r3, r5
 8011ed2:	9a04      	ldr	r2, [sp, #16]
 8011ed4:	bfa8      	it	ge
 8011ed6:	462b      	movge	r3, r5
 8011ed8:	1ad2      	subs	r2, r2, r3
 8011eda:	9204      	str	r2, [sp, #16]
 8011edc:	9a05      	ldr	r2, [sp, #20]
 8011ede:	1aed      	subs	r5, r5, r3
 8011ee0:	1ad3      	subs	r3, r2, r3
 8011ee2:	9305      	str	r3, [sp, #20]
 8011ee4:	9b07      	ldr	r3, [sp, #28]
 8011ee6:	b31b      	cbz	r3, 8011f30 <_dtoa_r+0x7a0>
 8011ee8:	9b08      	ldr	r3, [sp, #32]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	f000 80af 	beq.w	801204e <_dtoa_r+0x8be>
 8011ef0:	2e00      	cmp	r6, #0
 8011ef2:	dd13      	ble.n	8011f1c <_dtoa_r+0x78c>
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	4632      	mov	r2, r6
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f000 fd1d 	bl	8012938 <__pow5mult>
 8011efe:	ee18 2a10 	vmov	r2, s16
 8011f02:	4601      	mov	r1, r0
 8011f04:	4607      	mov	r7, r0
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 fc6c 	bl	80127e4 <__multiply>
 8011f0c:	ee18 1a10 	vmov	r1, s16
 8011f10:	4680      	mov	r8, r0
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 fb98 	bl	8012648 <_Bfree>
 8011f18:	ee08 8a10 	vmov	s16, r8
 8011f1c:	9b07      	ldr	r3, [sp, #28]
 8011f1e:	1b9a      	subs	r2, r3, r6
 8011f20:	d006      	beq.n	8011f30 <_dtoa_r+0x7a0>
 8011f22:	ee18 1a10 	vmov	r1, s16
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 fd06 	bl	8012938 <__pow5mult>
 8011f2c:	ee08 0a10 	vmov	s16, r0
 8011f30:	2101      	movs	r1, #1
 8011f32:	4620      	mov	r0, r4
 8011f34:	f000 fc40 	bl	80127b8 <__i2b>
 8011f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	f340 8088 	ble.w	8012052 <_dtoa_r+0x8c2>
 8011f42:	461a      	mov	r2, r3
 8011f44:	4601      	mov	r1, r0
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 fcf6 	bl	8012938 <__pow5mult>
 8011f4c:	9b06      	ldr	r3, [sp, #24]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	4606      	mov	r6, r0
 8011f52:	f340 8081 	ble.w	8012058 <_dtoa_r+0x8c8>
 8011f56:	f04f 0800 	mov.w	r8, #0
 8011f5a:	6933      	ldr	r3, [r6, #16]
 8011f5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f60:	6918      	ldr	r0, [r3, #16]
 8011f62:	f000 fbd9 	bl	8012718 <__hi0bits>
 8011f66:	f1c0 0020 	rsb	r0, r0, #32
 8011f6a:	9b05      	ldr	r3, [sp, #20]
 8011f6c:	4418      	add	r0, r3
 8011f6e:	f010 001f 	ands.w	r0, r0, #31
 8011f72:	f000 8092 	beq.w	801209a <_dtoa_r+0x90a>
 8011f76:	f1c0 0320 	rsb	r3, r0, #32
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	f340 808a 	ble.w	8012094 <_dtoa_r+0x904>
 8011f80:	f1c0 001c 	rsb	r0, r0, #28
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	4403      	add	r3, r0
 8011f88:	9304      	str	r3, [sp, #16]
 8011f8a:	9b05      	ldr	r3, [sp, #20]
 8011f8c:	4403      	add	r3, r0
 8011f8e:	4405      	add	r5, r0
 8011f90:	9305      	str	r3, [sp, #20]
 8011f92:	9b04      	ldr	r3, [sp, #16]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	dd07      	ble.n	8011fa8 <_dtoa_r+0x818>
 8011f98:	ee18 1a10 	vmov	r1, s16
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 fd24 	bl	80129ec <__lshift>
 8011fa4:	ee08 0a10 	vmov	s16, r0
 8011fa8:	9b05      	ldr	r3, [sp, #20]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	dd05      	ble.n	8011fba <_dtoa_r+0x82a>
 8011fae:	4631      	mov	r1, r6
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f000 fd1a 	bl	80129ec <__lshift>
 8011fb8:	4606      	mov	r6, r0
 8011fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d06e      	beq.n	801209e <_dtoa_r+0x90e>
 8011fc0:	ee18 0a10 	vmov	r0, s16
 8011fc4:	4631      	mov	r1, r6
 8011fc6:	f000 fd81 	bl	8012acc <__mcmp>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	da67      	bge.n	801209e <_dtoa_r+0x90e>
 8011fce:	9b00      	ldr	r3, [sp, #0]
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	ee18 1a10 	vmov	r1, s16
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	220a      	movs	r2, #10
 8011fda:	2300      	movs	r3, #0
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f000 fb55 	bl	801268c <__multadd>
 8011fe2:	9b08      	ldr	r3, [sp, #32]
 8011fe4:	ee08 0a10 	vmov	s16, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 81b1 	beq.w	8012350 <_dtoa_r+0xbc0>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	4639      	mov	r1, r7
 8011ff2:	220a      	movs	r2, #10
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f000 fb49 	bl	801268c <__multadd>
 8011ffa:	9b02      	ldr	r3, [sp, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	4607      	mov	r7, r0
 8012000:	f300 808e 	bgt.w	8012120 <_dtoa_r+0x990>
 8012004:	9b06      	ldr	r3, [sp, #24]
 8012006:	2b02      	cmp	r3, #2
 8012008:	dc51      	bgt.n	80120ae <_dtoa_r+0x91e>
 801200a:	e089      	b.n	8012120 <_dtoa_r+0x990>
 801200c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801200e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012012:	e74b      	b.n	8011eac <_dtoa_r+0x71c>
 8012014:	9b03      	ldr	r3, [sp, #12]
 8012016:	1e5e      	subs	r6, r3, #1
 8012018:	9b07      	ldr	r3, [sp, #28]
 801201a:	42b3      	cmp	r3, r6
 801201c:	bfbf      	itttt	lt
 801201e:	9b07      	ldrlt	r3, [sp, #28]
 8012020:	9607      	strlt	r6, [sp, #28]
 8012022:	1af2      	sublt	r2, r6, r3
 8012024:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012026:	bfb6      	itet	lt
 8012028:	189b      	addlt	r3, r3, r2
 801202a:	1b9e      	subge	r6, r3, r6
 801202c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801202e:	9b03      	ldr	r3, [sp, #12]
 8012030:	bfb8      	it	lt
 8012032:	2600      	movlt	r6, #0
 8012034:	2b00      	cmp	r3, #0
 8012036:	bfb7      	itett	lt
 8012038:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801203c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012040:	1a9d      	sublt	r5, r3, r2
 8012042:	2300      	movlt	r3, #0
 8012044:	e734      	b.n	8011eb0 <_dtoa_r+0x720>
 8012046:	9e07      	ldr	r6, [sp, #28]
 8012048:	9d04      	ldr	r5, [sp, #16]
 801204a:	9f08      	ldr	r7, [sp, #32]
 801204c:	e73b      	b.n	8011ec6 <_dtoa_r+0x736>
 801204e:	9a07      	ldr	r2, [sp, #28]
 8012050:	e767      	b.n	8011f22 <_dtoa_r+0x792>
 8012052:	9b06      	ldr	r3, [sp, #24]
 8012054:	2b01      	cmp	r3, #1
 8012056:	dc18      	bgt.n	801208a <_dtoa_r+0x8fa>
 8012058:	f1ba 0f00 	cmp.w	sl, #0
 801205c:	d115      	bne.n	801208a <_dtoa_r+0x8fa>
 801205e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012062:	b993      	cbnz	r3, 801208a <_dtoa_r+0x8fa>
 8012064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012068:	0d1b      	lsrs	r3, r3, #20
 801206a:	051b      	lsls	r3, r3, #20
 801206c:	b183      	cbz	r3, 8012090 <_dtoa_r+0x900>
 801206e:	9b04      	ldr	r3, [sp, #16]
 8012070:	3301      	adds	r3, #1
 8012072:	9304      	str	r3, [sp, #16]
 8012074:	9b05      	ldr	r3, [sp, #20]
 8012076:	3301      	adds	r3, #1
 8012078:	9305      	str	r3, [sp, #20]
 801207a:	f04f 0801 	mov.w	r8, #1
 801207e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012080:	2b00      	cmp	r3, #0
 8012082:	f47f af6a 	bne.w	8011f5a <_dtoa_r+0x7ca>
 8012086:	2001      	movs	r0, #1
 8012088:	e76f      	b.n	8011f6a <_dtoa_r+0x7da>
 801208a:	f04f 0800 	mov.w	r8, #0
 801208e:	e7f6      	b.n	801207e <_dtoa_r+0x8ee>
 8012090:	4698      	mov	r8, r3
 8012092:	e7f4      	b.n	801207e <_dtoa_r+0x8ee>
 8012094:	f43f af7d 	beq.w	8011f92 <_dtoa_r+0x802>
 8012098:	4618      	mov	r0, r3
 801209a:	301c      	adds	r0, #28
 801209c:	e772      	b.n	8011f84 <_dtoa_r+0x7f4>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	dc37      	bgt.n	8012114 <_dtoa_r+0x984>
 80120a4:	9b06      	ldr	r3, [sp, #24]
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	dd34      	ble.n	8012114 <_dtoa_r+0x984>
 80120aa:	9b03      	ldr	r3, [sp, #12]
 80120ac:	9302      	str	r3, [sp, #8]
 80120ae:	9b02      	ldr	r3, [sp, #8]
 80120b0:	b96b      	cbnz	r3, 80120ce <_dtoa_r+0x93e>
 80120b2:	4631      	mov	r1, r6
 80120b4:	2205      	movs	r2, #5
 80120b6:	4620      	mov	r0, r4
 80120b8:	f000 fae8 	bl	801268c <__multadd>
 80120bc:	4601      	mov	r1, r0
 80120be:	4606      	mov	r6, r0
 80120c0:	ee18 0a10 	vmov	r0, s16
 80120c4:	f000 fd02 	bl	8012acc <__mcmp>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	f73f adbb 	bgt.w	8011c44 <_dtoa_r+0x4b4>
 80120ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d0:	9d01      	ldr	r5, [sp, #4]
 80120d2:	43db      	mvns	r3, r3
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	f04f 0800 	mov.w	r8, #0
 80120da:	4631      	mov	r1, r6
 80120dc:	4620      	mov	r0, r4
 80120de:	f000 fab3 	bl	8012648 <_Bfree>
 80120e2:	2f00      	cmp	r7, #0
 80120e4:	f43f aea4 	beq.w	8011e30 <_dtoa_r+0x6a0>
 80120e8:	f1b8 0f00 	cmp.w	r8, #0
 80120ec:	d005      	beq.n	80120fa <_dtoa_r+0x96a>
 80120ee:	45b8      	cmp	r8, r7
 80120f0:	d003      	beq.n	80120fa <_dtoa_r+0x96a>
 80120f2:	4641      	mov	r1, r8
 80120f4:	4620      	mov	r0, r4
 80120f6:	f000 faa7 	bl	8012648 <_Bfree>
 80120fa:	4639      	mov	r1, r7
 80120fc:	4620      	mov	r0, r4
 80120fe:	f000 faa3 	bl	8012648 <_Bfree>
 8012102:	e695      	b.n	8011e30 <_dtoa_r+0x6a0>
 8012104:	2600      	movs	r6, #0
 8012106:	4637      	mov	r7, r6
 8012108:	e7e1      	b.n	80120ce <_dtoa_r+0x93e>
 801210a:	9700      	str	r7, [sp, #0]
 801210c:	4637      	mov	r7, r6
 801210e:	e599      	b.n	8011c44 <_dtoa_r+0x4b4>
 8012110:	40240000 	.word	0x40240000
 8012114:	9b08      	ldr	r3, [sp, #32]
 8012116:	2b00      	cmp	r3, #0
 8012118:	f000 80ca 	beq.w	80122b0 <_dtoa_r+0xb20>
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	9302      	str	r3, [sp, #8]
 8012120:	2d00      	cmp	r5, #0
 8012122:	dd05      	ble.n	8012130 <_dtoa_r+0x9a0>
 8012124:	4639      	mov	r1, r7
 8012126:	462a      	mov	r2, r5
 8012128:	4620      	mov	r0, r4
 801212a:	f000 fc5f 	bl	80129ec <__lshift>
 801212e:	4607      	mov	r7, r0
 8012130:	f1b8 0f00 	cmp.w	r8, #0
 8012134:	d05b      	beq.n	80121ee <_dtoa_r+0xa5e>
 8012136:	6879      	ldr	r1, [r7, #4]
 8012138:	4620      	mov	r0, r4
 801213a:	f000 fa45 	bl	80125c8 <_Balloc>
 801213e:	4605      	mov	r5, r0
 8012140:	b928      	cbnz	r0, 801214e <_dtoa_r+0x9be>
 8012142:	4b87      	ldr	r3, [pc, #540]	; (8012360 <_dtoa_r+0xbd0>)
 8012144:	4602      	mov	r2, r0
 8012146:	f240 21ea 	movw	r1, #746	; 0x2ea
 801214a:	f7ff bb3b 	b.w	80117c4 <_dtoa_r+0x34>
 801214e:	693a      	ldr	r2, [r7, #16]
 8012150:	3202      	adds	r2, #2
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	f107 010c 	add.w	r1, r7, #12
 8012158:	300c      	adds	r0, #12
 801215a:	f7fe fce7 	bl	8010b2c <memcpy>
 801215e:	2201      	movs	r2, #1
 8012160:	4629      	mov	r1, r5
 8012162:	4620      	mov	r0, r4
 8012164:	f000 fc42 	bl	80129ec <__lshift>
 8012168:	9b01      	ldr	r3, [sp, #4]
 801216a:	f103 0901 	add.w	r9, r3, #1
 801216e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012172:	4413      	add	r3, r2
 8012174:	9305      	str	r3, [sp, #20]
 8012176:	f00a 0301 	and.w	r3, sl, #1
 801217a:	46b8      	mov	r8, r7
 801217c:	9304      	str	r3, [sp, #16]
 801217e:	4607      	mov	r7, r0
 8012180:	4631      	mov	r1, r6
 8012182:	ee18 0a10 	vmov	r0, s16
 8012186:	f7ff fa77 	bl	8011678 <quorem>
 801218a:	4641      	mov	r1, r8
 801218c:	9002      	str	r0, [sp, #8]
 801218e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012192:	ee18 0a10 	vmov	r0, s16
 8012196:	f000 fc99 	bl	8012acc <__mcmp>
 801219a:	463a      	mov	r2, r7
 801219c:	9003      	str	r0, [sp, #12]
 801219e:	4631      	mov	r1, r6
 80121a0:	4620      	mov	r0, r4
 80121a2:	f000 fcaf 	bl	8012b04 <__mdiff>
 80121a6:	68c2      	ldr	r2, [r0, #12]
 80121a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80121ac:	4605      	mov	r5, r0
 80121ae:	bb02      	cbnz	r2, 80121f2 <_dtoa_r+0xa62>
 80121b0:	4601      	mov	r1, r0
 80121b2:	ee18 0a10 	vmov	r0, s16
 80121b6:	f000 fc89 	bl	8012acc <__mcmp>
 80121ba:	4602      	mov	r2, r0
 80121bc:	4629      	mov	r1, r5
 80121be:	4620      	mov	r0, r4
 80121c0:	9207      	str	r2, [sp, #28]
 80121c2:	f000 fa41 	bl	8012648 <_Bfree>
 80121c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80121ca:	ea43 0102 	orr.w	r1, r3, r2
 80121ce:	9b04      	ldr	r3, [sp, #16]
 80121d0:	430b      	orrs	r3, r1
 80121d2:	464d      	mov	r5, r9
 80121d4:	d10f      	bne.n	80121f6 <_dtoa_r+0xa66>
 80121d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80121da:	d02a      	beq.n	8012232 <_dtoa_r+0xaa2>
 80121dc:	9b03      	ldr	r3, [sp, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	dd02      	ble.n	80121e8 <_dtoa_r+0xa58>
 80121e2:	9b02      	ldr	r3, [sp, #8]
 80121e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80121e8:	f88b a000 	strb.w	sl, [fp]
 80121ec:	e775      	b.n	80120da <_dtoa_r+0x94a>
 80121ee:	4638      	mov	r0, r7
 80121f0:	e7ba      	b.n	8012168 <_dtoa_r+0x9d8>
 80121f2:	2201      	movs	r2, #1
 80121f4:	e7e2      	b.n	80121bc <_dtoa_r+0xa2c>
 80121f6:	9b03      	ldr	r3, [sp, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	db04      	blt.n	8012206 <_dtoa_r+0xa76>
 80121fc:	9906      	ldr	r1, [sp, #24]
 80121fe:	430b      	orrs	r3, r1
 8012200:	9904      	ldr	r1, [sp, #16]
 8012202:	430b      	orrs	r3, r1
 8012204:	d122      	bne.n	801224c <_dtoa_r+0xabc>
 8012206:	2a00      	cmp	r2, #0
 8012208:	ddee      	ble.n	80121e8 <_dtoa_r+0xa58>
 801220a:	ee18 1a10 	vmov	r1, s16
 801220e:	2201      	movs	r2, #1
 8012210:	4620      	mov	r0, r4
 8012212:	f000 fbeb 	bl	80129ec <__lshift>
 8012216:	4631      	mov	r1, r6
 8012218:	ee08 0a10 	vmov	s16, r0
 801221c:	f000 fc56 	bl	8012acc <__mcmp>
 8012220:	2800      	cmp	r0, #0
 8012222:	dc03      	bgt.n	801222c <_dtoa_r+0xa9c>
 8012224:	d1e0      	bne.n	80121e8 <_dtoa_r+0xa58>
 8012226:	f01a 0f01 	tst.w	sl, #1
 801222a:	d0dd      	beq.n	80121e8 <_dtoa_r+0xa58>
 801222c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012230:	d1d7      	bne.n	80121e2 <_dtoa_r+0xa52>
 8012232:	2339      	movs	r3, #57	; 0x39
 8012234:	f88b 3000 	strb.w	r3, [fp]
 8012238:	462b      	mov	r3, r5
 801223a:	461d      	mov	r5, r3
 801223c:	3b01      	subs	r3, #1
 801223e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012242:	2a39      	cmp	r2, #57	; 0x39
 8012244:	d071      	beq.n	801232a <_dtoa_r+0xb9a>
 8012246:	3201      	adds	r2, #1
 8012248:	701a      	strb	r2, [r3, #0]
 801224a:	e746      	b.n	80120da <_dtoa_r+0x94a>
 801224c:	2a00      	cmp	r2, #0
 801224e:	dd07      	ble.n	8012260 <_dtoa_r+0xad0>
 8012250:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012254:	d0ed      	beq.n	8012232 <_dtoa_r+0xaa2>
 8012256:	f10a 0301 	add.w	r3, sl, #1
 801225a:	f88b 3000 	strb.w	r3, [fp]
 801225e:	e73c      	b.n	80120da <_dtoa_r+0x94a>
 8012260:	9b05      	ldr	r3, [sp, #20]
 8012262:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012266:	4599      	cmp	r9, r3
 8012268:	d047      	beq.n	80122fa <_dtoa_r+0xb6a>
 801226a:	ee18 1a10 	vmov	r1, s16
 801226e:	2300      	movs	r3, #0
 8012270:	220a      	movs	r2, #10
 8012272:	4620      	mov	r0, r4
 8012274:	f000 fa0a 	bl	801268c <__multadd>
 8012278:	45b8      	cmp	r8, r7
 801227a:	ee08 0a10 	vmov	s16, r0
 801227e:	f04f 0300 	mov.w	r3, #0
 8012282:	f04f 020a 	mov.w	r2, #10
 8012286:	4641      	mov	r1, r8
 8012288:	4620      	mov	r0, r4
 801228a:	d106      	bne.n	801229a <_dtoa_r+0xb0a>
 801228c:	f000 f9fe 	bl	801268c <__multadd>
 8012290:	4680      	mov	r8, r0
 8012292:	4607      	mov	r7, r0
 8012294:	f109 0901 	add.w	r9, r9, #1
 8012298:	e772      	b.n	8012180 <_dtoa_r+0x9f0>
 801229a:	f000 f9f7 	bl	801268c <__multadd>
 801229e:	4639      	mov	r1, r7
 80122a0:	4680      	mov	r8, r0
 80122a2:	2300      	movs	r3, #0
 80122a4:	220a      	movs	r2, #10
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 f9f0 	bl	801268c <__multadd>
 80122ac:	4607      	mov	r7, r0
 80122ae:	e7f1      	b.n	8012294 <_dtoa_r+0xb04>
 80122b0:	9b03      	ldr	r3, [sp, #12]
 80122b2:	9302      	str	r3, [sp, #8]
 80122b4:	9d01      	ldr	r5, [sp, #4]
 80122b6:	ee18 0a10 	vmov	r0, s16
 80122ba:	4631      	mov	r1, r6
 80122bc:	f7ff f9dc 	bl	8011678 <quorem>
 80122c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80122c4:	9b01      	ldr	r3, [sp, #4]
 80122c6:	f805 ab01 	strb.w	sl, [r5], #1
 80122ca:	1aea      	subs	r2, r5, r3
 80122cc:	9b02      	ldr	r3, [sp, #8]
 80122ce:	4293      	cmp	r3, r2
 80122d0:	dd09      	ble.n	80122e6 <_dtoa_r+0xb56>
 80122d2:	ee18 1a10 	vmov	r1, s16
 80122d6:	2300      	movs	r3, #0
 80122d8:	220a      	movs	r2, #10
 80122da:	4620      	mov	r0, r4
 80122dc:	f000 f9d6 	bl	801268c <__multadd>
 80122e0:	ee08 0a10 	vmov	s16, r0
 80122e4:	e7e7      	b.n	80122b6 <_dtoa_r+0xb26>
 80122e6:	9b02      	ldr	r3, [sp, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	bfc8      	it	gt
 80122ec:	461d      	movgt	r5, r3
 80122ee:	9b01      	ldr	r3, [sp, #4]
 80122f0:	bfd8      	it	le
 80122f2:	2501      	movle	r5, #1
 80122f4:	441d      	add	r5, r3
 80122f6:	f04f 0800 	mov.w	r8, #0
 80122fa:	ee18 1a10 	vmov	r1, s16
 80122fe:	2201      	movs	r2, #1
 8012300:	4620      	mov	r0, r4
 8012302:	f000 fb73 	bl	80129ec <__lshift>
 8012306:	4631      	mov	r1, r6
 8012308:	ee08 0a10 	vmov	s16, r0
 801230c:	f000 fbde 	bl	8012acc <__mcmp>
 8012310:	2800      	cmp	r0, #0
 8012312:	dc91      	bgt.n	8012238 <_dtoa_r+0xaa8>
 8012314:	d102      	bne.n	801231c <_dtoa_r+0xb8c>
 8012316:	f01a 0f01 	tst.w	sl, #1
 801231a:	d18d      	bne.n	8012238 <_dtoa_r+0xaa8>
 801231c:	462b      	mov	r3, r5
 801231e:	461d      	mov	r5, r3
 8012320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012324:	2a30      	cmp	r2, #48	; 0x30
 8012326:	d0fa      	beq.n	801231e <_dtoa_r+0xb8e>
 8012328:	e6d7      	b.n	80120da <_dtoa_r+0x94a>
 801232a:	9a01      	ldr	r2, [sp, #4]
 801232c:	429a      	cmp	r2, r3
 801232e:	d184      	bne.n	801223a <_dtoa_r+0xaaa>
 8012330:	9b00      	ldr	r3, [sp, #0]
 8012332:	3301      	adds	r3, #1
 8012334:	9300      	str	r3, [sp, #0]
 8012336:	2331      	movs	r3, #49	; 0x31
 8012338:	7013      	strb	r3, [r2, #0]
 801233a:	e6ce      	b.n	80120da <_dtoa_r+0x94a>
 801233c:	4b09      	ldr	r3, [pc, #36]	; (8012364 <_dtoa_r+0xbd4>)
 801233e:	f7ff ba95 	b.w	801186c <_dtoa_r+0xdc>
 8012342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012344:	2b00      	cmp	r3, #0
 8012346:	f47f aa6e 	bne.w	8011826 <_dtoa_r+0x96>
 801234a:	4b07      	ldr	r3, [pc, #28]	; (8012368 <_dtoa_r+0xbd8>)
 801234c:	f7ff ba8e 	b.w	801186c <_dtoa_r+0xdc>
 8012350:	9b02      	ldr	r3, [sp, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	dcae      	bgt.n	80122b4 <_dtoa_r+0xb24>
 8012356:	9b06      	ldr	r3, [sp, #24]
 8012358:	2b02      	cmp	r3, #2
 801235a:	f73f aea8 	bgt.w	80120ae <_dtoa_r+0x91e>
 801235e:	e7a9      	b.n	80122b4 <_dtoa_r+0xb24>
 8012360:	08013bb8 	.word	0x08013bb8
 8012364:	080139d8 	.word	0x080139d8
 8012368:	08013b39 	.word	0x08013b39

0801236c <std>:
 801236c:	2300      	movs	r3, #0
 801236e:	b510      	push	{r4, lr}
 8012370:	4604      	mov	r4, r0
 8012372:	e9c0 3300 	strd	r3, r3, [r0]
 8012376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801237a:	6083      	str	r3, [r0, #8]
 801237c:	8181      	strh	r1, [r0, #12]
 801237e:	6643      	str	r3, [r0, #100]	; 0x64
 8012380:	81c2      	strh	r2, [r0, #14]
 8012382:	6183      	str	r3, [r0, #24]
 8012384:	4619      	mov	r1, r3
 8012386:	2208      	movs	r2, #8
 8012388:	305c      	adds	r0, #92	; 0x5c
 801238a:	f7fe fbdd 	bl	8010b48 <memset>
 801238e:	4b05      	ldr	r3, [pc, #20]	; (80123a4 <std+0x38>)
 8012390:	6263      	str	r3, [r4, #36]	; 0x24
 8012392:	4b05      	ldr	r3, [pc, #20]	; (80123a8 <std+0x3c>)
 8012394:	62a3      	str	r3, [r4, #40]	; 0x28
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <std+0x40>)
 8012398:	62e3      	str	r3, [r4, #44]	; 0x2c
 801239a:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <std+0x44>)
 801239c:	6224      	str	r4, [r4, #32]
 801239e:	6323      	str	r3, [r4, #48]	; 0x30
 80123a0:	bd10      	pop	{r4, pc}
 80123a2:	bf00      	nop
 80123a4:	08012fb1 	.word	0x08012fb1
 80123a8:	08012fd3 	.word	0x08012fd3
 80123ac:	0801300b 	.word	0x0801300b
 80123b0:	0801302f 	.word	0x0801302f

080123b4 <_cleanup_r>:
 80123b4:	4901      	ldr	r1, [pc, #4]	; (80123bc <_cleanup_r+0x8>)
 80123b6:	f000 b8c1 	b.w	801253c <_fwalk_reent>
 80123ba:	bf00      	nop
 80123bc:	08013335 	.word	0x08013335

080123c0 <__sfmoreglue>:
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	2268      	movs	r2, #104	; 0x68
 80123c4:	1e4d      	subs	r5, r1, #1
 80123c6:	4355      	muls	r5, r2
 80123c8:	460e      	mov	r6, r1
 80123ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123ce:	f7fe fc2f 	bl	8010c30 <_malloc_r>
 80123d2:	4604      	mov	r4, r0
 80123d4:	b140      	cbz	r0, 80123e8 <__sfmoreglue+0x28>
 80123d6:	2100      	movs	r1, #0
 80123d8:	e9c0 1600 	strd	r1, r6, [r0]
 80123dc:	300c      	adds	r0, #12
 80123de:	60a0      	str	r0, [r4, #8]
 80123e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80123e4:	f7fe fbb0 	bl	8010b48 <memset>
 80123e8:	4620      	mov	r0, r4
 80123ea:	bd70      	pop	{r4, r5, r6, pc}

080123ec <__sfp_lock_acquire>:
 80123ec:	4801      	ldr	r0, [pc, #4]	; (80123f4 <__sfp_lock_acquire+0x8>)
 80123ee:	f000 b8ca 	b.w	8012586 <__retarget_lock_acquire_recursive>
 80123f2:	bf00      	nop
 80123f4:	20002939 	.word	0x20002939

080123f8 <__sfp_lock_release>:
 80123f8:	4801      	ldr	r0, [pc, #4]	; (8012400 <__sfp_lock_release+0x8>)
 80123fa:	f000 b8c5 	b.w	8012588 <__retarget_lock_release_recursive>
 80123fe:	bf00      	nop
 8012400:	20002939 	.word	0x20002939

08012404 <__sinit_lock_acquire>:
 8012404:	4801      	ldr	r0, [pc, #4]	; (801240c <__sinit_lock_acquire+0x8>)
 8012406:	f000 b8be 	b.w	8012586 <__retarget_lock_acquire_recursive>
 801240a:	bf00      	nop
 801240c:	2000293a 	.word	0x2000293a

08012410 <__sinit_lock_release>:
 8012410:	4801      	ldr	r0, [pc, #4]	; (8012418 <__sinit_lock_release+0x8>)
 8012412:	f000 b8b9 	b.w	8012588 <__retarget_lock_release_recursive>
 8012416:	bf00      	nop
 8012418:	2000293a 	.word	0x2000293a

0801241c <__sinit>:
 801241c:	b510      	push	{r4, lr}
 801241e:	4604      	mov	r4, r0
 8012420:	f7ff fff0 	bl	8012404 <__sinit_lock_acquire>
 8012424:	69a3      	ldr	r3, [r4, #24]
 8012426:	b11b      	cbz	r3, 8012430 <__sinit+0x14>
 8012428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801242c:	f7ff bff0 	b.w	8012410 <__sinit_lock_release>
 8012430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012434:	6523      	str	r3, [r4, #80]	; 0x50
 8012436:	4b13      	ldr	r3, [pc, #76]	; (8012484 <__sinit+0x68>)
 8012438:	4a13      	ldr	r2, [pc, #76]	; (8012488 <__sinit+0x6c>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	62a2      	str	r2, [r4, #40]	; 0x28
 801243e:	42a3      	cmp	r3, r4
 8012440:	bf04      	itt	eq
 8012442:	2301      	moveq	r3, #1
 8012444:	61a3      	streq	r3, [r4, #24]
 8012446:	4620      	mov	r0, r4
 8012448:	f000 f820 	bl	801248c <__sfp>
 801244c:	6060      	str	r0, [r4, #4]
 801244e:	4620      	mov	r0, r4
 8012450:	f000 f81c 	bl	801248c <__sfp>
 8012454:	60a0      	str	r0, [r4, #8]
 8012456:	4620      	mov	r0, r4
 8012458:	f000 f818 	bl	801248c <__sfp>
 801245c:	2200      	movs	r2, #0
 801245e:	60e0      	str	r0, [r4, #12]
 8012460:	2104      	movs	r1, #4
 8012462:	6860      	ldr	r0, [r4, #4]
 8012464:	f7ff ff82 	bl	801236c <std>
 8012468:	68a0      	ldr	r0, [r4, #8]
 801246a:	2201      	movs	r2, #1
 801246c:	2109      	movs	r1, #9
 801246e:	f7ff ff7d 	bl	801236c <std>
 8012472:	68e0      	ldr	r0, [r4, #12]
 8012474:	2202      	movs	r2, #2
 8012476:	2112      	movs	r1, #18
 8012478:	f7ff ff78 	bl	801236c <std>
 801247c:	2301      	movs	r3, #1
 801247e:	61a3      	str	r3, [r4, #24]
 8012480:	e7d2      	b.n	8012428 <__sinit+0xc>
 8012482:	bf00      	nop
 8012484:	080139c4 	.word	0x080139c4
 8012488:	080123b5 	.word	0x080123b5

0801248c <__sfp>:
 801248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801248e:	4607      	mov	r7, r0
 8012490:	f7ff ffac 	bl	80123ec <__sfp_lock_acquire>
 8012494:	4b1e      	ldr	r3, [pc, #120]	; (8012510 <__sfp+0x84>)
 8012496:	681e      	ldr	r6, [r3, #0]
 8012498:	69b3      	ldr	r3, [r6, #24]
 801249a:	b913      	cbnz	r3, 80124a2 <__sfp+0x16>
 801249c:	4630      	mov	r0, r6
 801249e:	f7ff ffbd 	bl	801241c <__sinit>
 80124a2:	3648      	adds	r6, #72	; 0x48
 80124a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	d503      	bpl.n	80124b4 <__sfp+0x28>
 80124ac:	6833      	ldr	r3, [r6, #0]
 80124ae:	b30b      	cbz	r3, 80124f4 <__sfp+0x68>
 80124b0:	6836      	ldr	r6, [r6, #0]
 80124b2:	e7f7      	b.n	80124a4 <__sfp+0x18>
 80124b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80124b8:	b9d5      	cbnz	r5, 80124f0 <__sfp+0x64>
 80124ba:	4b16      	ldr	r3, [pc, #88]	; (8012514 <__sfp+0x88>)
 80124bc:	60e3      	str	r3, [r4, #12]
 80124be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124c2:	6665      	str	r5, [r4, #100]	; 0x64
 80124c4:	f000 f85e 	bl	8012584 <__retarget_lock_init_recursive>
 80124c8:	f7ff ff96 	bl	80123f8 <__sfp_lock_release>
 80124cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80124d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80124d4:	6025      	str	r5, [r4, #0]
 80124d6:	61a5      	str	r5, [r4, #24]
 80124d8:	2208      	movs	r2, #8
 80124da:	4629      	mov	r1, r5
 80124dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80124e0:	f7fe fb32 	bl	8010b48 <memset>
 80124e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80124e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80124ec:	4620      	mov	r0, r4
 80124ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124f0:	3468      	adds	r4, #104	; 0x68
 80124f2:	e7d9      	b.n	80124a8 <__sfp+0x1c>
 80124f4:	2104      	movs	r1, #4
 80124f6:	4638      	mov	r0, r7
 80124f8:	f7ff ff62 	bl	80123c0 <__sfmoreglue>
 80124fc:	4604      	mov	r4, r0
 80124fe:	6030      	str	r0, [r6, #0]
 8012500:	2800      	cmp	r0, #0
 8012502:	d1d5      	bne.n	80124b0 <__sfp+0x24>
 8012504:	f7ff ff78 	bl	80123f8 <__sfp_lock_release>
 8012508:	230c      	movs	r3, #12
 801250a:	603b      	str	r3, [r7, #0]
 801250c:	e7ee      	b.n	80124ec <__sfp+0x60>
 801250e:	bf00      	nop
 8012510:	080139c4 	.word	0x080139c4
 8012514:	ffff0001 	.word	0xffff0001

08012518 <fiprintf>:
 8012518:	b40e      	push	{r1, r2, r3}
 801251a:	b503      	push	{r0, r1, lr}
 801251c:	4601      	mov	r1, r0
 801251e:	ab03      	add	r3, sp, #12
 8012520:	4805      	ldr	r0, [pc, #20]	; (8012538 <fiprintf+0x20>)
 8012522:	f853 2b04 	ldr.w	r2, [r3], #4
 8012526:	6800      	ldr	r0, [r0, #0]
 8012528:	9301      	str	r3, [sp, #4]
 801252a:	f000 fc11 	bl	8012d50 <_vfiprintf_r>
 801252e:	b002      	add	sp, #8
 8012530:	f85d eb04 	ldr.w	lr, [sp], #4
 8012534:	b003      	add	sp, #12
 8012536:	4770      	bx	lr
 8012538:	20000100 	.word	0x20000100

0801253c <_fwalk_reent>:
 801253c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012540:	4606      	mov	r6, r0
 8012542:	4688      	mov	r8, r1
 8012544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012548:	2700      	movs	r7, #0
 801254a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801254e:	f1b9 0901 	subs.w	r9, r9, #1
 8012552:	d505      	bpl.n	8012560 <_fwalk_reent+0x24>
 8012554:	6824      	ldr	r4, [r4, #0]
 8012556:	2c00      	cmp	r4, #0
 8012558:	d1f7      	bne.n	801254a <_fwalk_reent+0xe>
 801255a:	4638      	mov	r0, r7
 801255c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012560:	89ab      	ldrh	r3, [r5, #12]
 8012562:	2b01      	cmp	r3, #1
 8012564:	d907      	bls.n	8012576 <_fwalk_reent+0x3a>
 8012566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801256a:	3301      	adds	r3, #1
 801256c:	d003      	beq.n	8012576 <_fwalk_reent+0x3a>
 801256e:	4629      	mov	r1, r5
 8012570:	4630      	mov	r0, r6
 8012572:	47c0      	blx	r8
 8012574:	4307      	orrs	r7, r0
 8012576:	3568      	adds	r5, #104	; 0x68
 8012578:	e7e9      	b.n	801254e <_fwalk_reent+0x12>
	...

0801257c <_localeconv_r>:
 801257c:	4800      	ldr	r0, [pc, #0]	; (8012580 <_localeconv_r+0x4>)
 801257e:	4770      	bx	lr
 8012580:	20000254 	.word	0x20000254

08012584 <__retarget_lock_init_recursive>:
 8012584:	4770      	bx	lr

08012586 <__retarget_lock_acquire_recursive>:
 8012586:	4770      	bx	lr

08012588 <__retarget_lock_release_recursive>:
 8012588:	4770      	bx	lr

0801258a <__ascii_mbtowc>:
 801258a:	b082      	sub	sp, #8
 801258c:	b901      	cbnz	r1, 8012590 <__ascii_mbtowc+0x6>
 801258e:	a901      	add	r1, sp, #4
 8012590:	b142      	cbz	r2, 80125a4 <__ascii_mbtowc+0x1a>
 8012592:	b14b      	cbz	r3, 80125a8 <__ascii_mbtowc+0x1e>
 8012594:	7813      	ldrb	r3, [r2, #0]
 8012596:	600b      	str	r3, [r1, #0]
 8012598:	7812      	ldrb	r2, [r2, #0]
 801259a:	1e10      	subs	r0, r2, #0
 801259c:	bf18      	it	ne
 801259e:	2001      	movne	r0, #1
 80125a0:	b002      	add	sp, #8
 80125a2:	4770      	bx	lr
 80125a4:	4610      	mov	r0, r2
 80125a6:	e7fb      	b.n	80125a0 <__ascii_mbtowc+0x16>
 80125a8:	f06f 0001 	mvn.w	r0, #1
 80125ac:	e7f8      	b.n	80125a0 <__ascii_mbtowc+0x16>
	...

080125b0 <__malloc_lock>:
 80125b0:	4801      	ldr	r0, [pc, #4]	; (80125b8 <__malloc_lock+0x8>)
 80125b2:	f7ff bfe8 	b.w	8012586 <__retarget_lock_acquire_recursive>
 80125b6:	bf00      	nop
 80125b8:	20002938 	.word	0x20002938

080125bc <__malloc_unlock>:
 80125bc:	4801      	ldr	r0, [pc, #4]	; (80125c4 <__malloc_unlock+0x8>)
 80125be:	f7ff bfe3 	b.w	8012588 <__retarget_lock_release_recursive>
 80125c2:	bf00      	nop
 80125c4:	20002938 	.word	0x20002938

080125c8 <_Balloc>:
 80125c8:	b570      	push	{r4, r5, r6, lr}
 80125ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80125cc:	4604      	mov	r4, r0
 80125ce:	460d      	mov	r5, r1
 80125d0:	b976      	cbnz	r6, 80125f0 <_Balloc+0x28>
 80125d2:	2010      	movs	r0, #16
 80125d4:	f7fe faa2 	bl	8010b1c <malloc>
 80125d8:	4602      	mov	r2, r0
 80125da:	6260      	str	r0, [r4, #36]	; 0x24
 80125dc:	b920      	cbnz	r0, 80125e8 <_Balloc+0x20>
 80125de:	4b18      	ldr	r3, [pc, #96]	; (8012640 <_Balloc+0x78>)
 80125e0:	4818      	ldr	r0, [pc, #96]	; (8012644 <_Balloc+0x7c>)
 80125e2:	2166      	movs	r1, #102	; 0x66
 80125e4:	f7ff f82a 	bl	801163c <__assert_func>
 80125e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125ec:	6006      	str	r6, [r0, #0]
 80125ee:	60c6      	str	r6, [r0, #12]
 80125f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125f2:	68f3      	ldr	r3, [r6, #12]
 80125f4:	b183      	cbz	r3, 8012618 <_Balloc+0x50>
 80125f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80125fe:	b9b8      	cbnz	r0, 8012630 <_Balloc+0x68>
 8012600:	2101      	movs	r1, #1
 8012602:	fa01 f605 	lsl.w	r6, r1, r5
 8012606:	1d72      	adds	r2, r6, #5
 8012608:	0092      	lsls	r2, r2, #2
 801260a:	4620      	mov	r0, r4
 801260c:	f000 fb60 	bl	8012cd0 <_calloc_r>
 8012610:	b160      	cbz	r0, 801262c <_Balloc+0x64>
 8012612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012616:	e00e      	b.n	8012636 <_Balloc+0x6e>
 8012618:	2221      	movs	r2, #33	; 0x21
 801261a:	2104      	movs	r1, #4
 801261c:	4620      	mov	r0, r4
 801261e:	f000 fb57 	bl	8012cd0 <_calloc_r>
 8012622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012624:	60f0      	str	r0, [r6, #12]
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d1e4      	bne.n	80125f6 <_Balloc+0x2e>
 801262c:	2000      	movs	r0, #0
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	6802      	ldr	r2, [r0, #0]
 8012632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012636:	2300      	movs	r3, #0
 8012638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801263c:	e7f7      	b.n	801262e <_Balloc+0x66>
 801263e:	bf00      	nop
 8012640:	08013b46 	.word	0x08013b46
 8012644:	08013c36 	.word	0x08013c36

08012648 <_Bfree>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801264c:	4605      	mov	r5, r0
 801264e:	460c      	mov	r4, r1
 8012650:	b976      	cbnz	r6, 8012670 <_Bfree+0x28>
 8012652:	2010      	movs	r0, #16
 8012654:	f7fe fa62 	bl	8010b1c <malloc>
 8012658:	4602      	mov	r2, r0
 801265a:	6268      	str	r0, [r5, #36]	; 0x24
 801265c:	b920      	cbnz	r0, 8012668 <_Bfree+0x20>
 801265e:	4b09      	ldr	r3, [pc, #36]	; (8012684 <_Bfree+0x3c>)
 8012660:	4809      	ldr	r0, [pc, #36]	; (8012688 <_Bfree+0x40>)
 8012662:	218a      	movs	r1, #138	; 0x8a
 8012664:	f7fe ffea 	bl	801163c <__assert_func>
 8012668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801266c:	6006      	str	r6, [r0, #0]
 801266e:	60c6      	str	r6, [r0, #12]
 8012670:	b13c      	cbz	r4, 8012682 <_Bfree+0x3a>
 8012672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012674:	6862      	ldr	r2, [r4, #4]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801267c:	6021      	str	r1, [r4, #0]
 801267e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012682:	bd70      	pop	{r4, r5, r6, pc}
 8012684:	08013b46 	.word	0x08013b46
 8012688:	08013c36 	.word	0x08013c36

0801268c <__multadd>:
 801268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012690:	690d      	ldr	r5, [r1, #16]
 8012692:	4607      	mov	r7, r0
 8012694:	460c      	mov	r4, r1
 8012696:	461e      	mov	r6, r3
 8012698:	f101 0c14 	add.w	ip, r1, #20
 801269c:	2000      	movs	r0, #0
 801269e:	f8dc 3000 	ldr.w	r3, [ip]
 80126a2:	b299      	uxth	r1, r3
 80126a4:	fb02 6101 	mla	r1, r2, r1, r6
 80126a8:	0c1e      	lsrs	r6, r3, #16
 80126aa:	0c0b      	lsrs	r3, r1, #16
 80126ac:	fb02 3306 	mla	r3, r2, r6, r3
 80126b0:	b289      	uxth	r1, r1
 80126b2:	3001      	adds	r0, #1
 80126b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80126b8:	4285      	cmp	r5, r0
 80126ba:	f84c 1b04 	str.w	r1, [ip], #4
 80126be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80126c2:	dcec      	bgt.n	801269e <__multadd+0x12>
 80126c4:	b30e      	cbz	r6, 801270a <__multadd+0x7e>
 80126c6:	68a3      	ldr	r3, [r4, #8]
 80126c8:	42ab      	cmp	r3, r5
 80126ca:	dc19      	bgt.n	8012700 <__multadd+0x74>
 80126cc:	6861      	ldr	r1, [r4, #4]
 80126ce:	4638      	mov	r0, r7
 80126d0:	3101      	adds	r1, #1
 80126d2:	f7ff ff79 	bl	80125c8 <_Balloc>
 80126d6:	4680      	mov	r8, r0
 80126d8:	b928      	cbnz	r0, 80126e6 <__multadd+0x5a>
 80126da:	4602      	mov	r2, r0
 80126dc:	4b0c      	ldr	r3, [pc, #48]	; (8012710 <__multadd+0x84>)
 80126de:	480d      	ldr	r0, [pc, #52]	; (8012714 <__multadd+0x88>)
 80126e0:	21b5      	movs	r1, #181	; 0xb5
 80126e2:	f7fe ffab 	bl	801163c <__assert_func>
 80126e6:	6922      	ldr	r2, [r4, #16]
 80126e8:	3202      	adds	r2, #2
 80126ea:	f104 010c 	add.w	r1, r4, #12
 80126ee:	0092      	lsls	r2, r2, #2
 80126f0:	300c      	adds	r0, #12
 80126f2:	f7fe fa1b 	bl	8010b2c <memcpy>
 80126f6:	4621      	mov	r1, r4
 80126f8:	4638      	mov	r0, r7
 80126fa:	f7ff ffa5 	bl	8012648 <_Bfree>
 80126fe:	4644      	mov	r4, r8
 8012700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012704:	3501      	adds	r5, #1
 8012706:	615e      	str	r6, [r3, #20]
 8012708:	6125      	str	r5, [r4, #16]
 801270a:	4620      	mov	r0, r4
 801270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012710:	08013bb8 	.word	0x08013bb8
 8012714:	08013c36 	.word	0x08013c36

08012718 <__hi0bits>:
 8012718:	0c03      	lsrs	r3, r0, #16
 801271a:	041b      	lsls	r3, r3, #16
 801271c:	b9d3      	cbnz	r3, 8012754 <__hi0bits+0x3c>
 801271e:	0400      	lsls	r0, r0, #16
 8012720:	2310      	movs	r3, #16
 8012722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012726:	bf04      	itt	eq
 8012728:	0200      	lsleq	r0, r0, #8
 801272a:	3308      	addeq	r3, #8
 801272c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012730:	bf04      	itt	eq
 8012732:	0100      	lsleq	r0, r0, #4
 8012734:	3304      	addeq	r3, #4
 8012736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801273a:	bf04      	itt	eq
 801273c:	0080      	lsleq	r0, r0, #2
 801273e:	3302      	addeq	r3, #2
 8012740:	2800      	cmp	r0, #0
 8012742:	db05      	blt.n	8012750 <__hi0bits+0x38>
 8012744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012748:	f103 0301 	add.w	r3, r3, #1
 801274c:	bf08      	it	eq
 801274e:	2320      	moveq	r3, #32
 8012750:	4618      	mov	r0, r3
 8012752:	4770      	bx	lr
 8012754:	2300      	movs	r3, #0
 8012756:	e7e4      	b.n	8012722 <__hi0bits+0xa>

08012758 <__lo0bits>:
 8012758:	6803      	ldr	r3, [r0, #0]
 801275a:	f013 0207 	ands.w	r2, r3, #7
 801275e:	4601      	mov	r1, r0
 8012760:	d00b      	beq.n	801277a <__lo0bits+0x22>
 8012762:	07da      	lsls	r2, r3, #31
 8012764:	d423      	bmi.n	80127ae <__lo0bits+0x56>
 8012766:	0798      	lsls	r0, r3, #30
 8012768:	bf49      	itett	mi
 801276a:	085b      	lsrmi	r3, r3, #1
 801276c:	089b      	lsrpl	r3, r3, #2
 801276e:	2001      	movmi	r0, #1
 8012770:	600b      	strmi	r3, [r1, #0]
 8012772:	bf5c      	itt	pl
 8012774:	600b      	strpl	r3, [r1, #0]
 8012776:	2002      	movpl	r0, #2
 8012778:	4770      	bx	lr
 801277a:	b298      	uxth	r0, r3
 801277c:	b9a8      	cbnz	r0, 80127aa <__lo0bits+0x52>
 801277e:	0c1b      	lsrs	r3, r3, #16
 8012780:	2010      	movs	r0, #16
 8012782:	b2da      	uxtb	r2, r3
 8012784:	b90a      	cbnz	r2, 801278a <__lo0bits+0x32>
 8012786:	3008      	adds	r0, #8
 8012788:	0a1b      	lsrs	r3, r3, #8
 801278a:	071a      	lsls	r2, r3, #28
 801278c:	bf04      	itt	eq
 801278e:	091b      	lsreq	r3, r3, #4
 8012790:	3004      	addeq	r0, #4
 8012792:	079a      	lsls	r2, r3, #30
 8012794:	bf04      	itt	eq
 8012796:	089b      	lsreq	r3, r3, #2
 8012798:	3002      	addeq	r0, #2
 801279a:	07da      	lsls	r2, r3, #31
 801279c:	d403      	bmi.n	80127a6 <__lo0bits+0x4e>
 801279e:	085b      	lsrs	r3, r3, #1
 80127a0:	f100 0001 	add.w	r0, r0, #1
 80127a4:	d005      	beq.n	80127b2 <__lo0bits+0x5a>
 80127a6:	600b      	str	r3, [r1, #0]
 80127a8:	4770      	bx	lr
 80127aa:	4610      	mov	r0, r2
 80127ac:	e7e9      	b.n	8012782 <__lo0bits+0x2a>
 80127ae:	2000      	movs	r0, #0
 80127b0:	4770      	bx	lr
 80127b2:	2020      	movs	r0, #32
 80127b4:	4770      	bx	lr
	...

080127b8 <__i2b>:
 80127b8:	b510      	push	{r4, lr}
 80127ba:	460c      	mov	r4, r1
 80127bc:	2101      	movs	r1, #1
 80127be:	f7ff ff03 	bl	80125c8 <_Balloc>
 80127c2:	4602      	mov	r2, r0
 80127c4:	b928      	cbnz	r0, 80127d2 <__i2b+0x1a>
 80127c6:	4b05      	ldr	r3, [pc, #20]	; (80127dc <__i2b+0x24>)
 80127c8:	4805      	ldr	r0, [pc, #20]	; (80127e0 <__i2b+0x28>)
 80127ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80127ce:	f7fe ff35 	bl	801163c <__assert_func>
 80127d2:	2301      	movs	r3, #1
 80127d4:	6144      	str	r4, [r0, #20]
 80127d6:	6103      	str	r3, [r0, #16]
 80127d8:	bd10      	pop	{r4, pc}
 80127da:	bf00      	nop
 80127dc:	08013bb8 	.word	0x08013bb8
 80127e0:	08013c36 	.word	0x08013c36

080127e4 <__multiply>:
 80127e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e8:	4691      	mov	r9, r2
 80127ea:	690a      	ldr	r2, [r1, #16]
 80127ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	bfb8      	it	lt
 80127f4:	460b      	movlt	r3, r1
 80127f6:	460c      	mov	r4, r1
 80127f8:	bfbc      	itt	lt
 80127fa:	464c      	movlt	r4, r9
 80127fc:	4699      	movlt	r9, r3
 80127fe:	6927      	ldr	r7, [r4, #16]
 8012800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012804:	68a3      	ldr	r3, [r4, #8]
 8012806:	6861      	ldr	r1, [r4, #4]
 8012808:	eb07 060a 	add.w	r6, r7, sl
 801280c:	42b3      	cmp	r3, r6
 801280e:	b085      	sub	sp, #20
 8012810:	bfb8      	it	lt
 8012812:	3101      	addlt	r1, #1
 8012814:	f7ff fed8 	bl	80125c8 <_Balloc>
 8012818:	b930      	cbnz	r0, 8012828 <__multiply+0x44>
 801281a:	4602      	mov	r2, r0
 801281c:	4b44      	ldr	r3, [pc, #272]	; (8012930 <__multiply+0x14c>)
 801281e:	4845      	ldr	r0, [pc, #276]	; (8012934 <__multiply+0x150>)
 8012820:	f240 115d 	movw	r1, #349	; 0x15d
 8012824:	f7fe ff0a 	bl	801163c <__assert_func>
 8012828:	f100 0514 	add.w	r5, r0, #20
 801282c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012830:	462b      	mov	r3, r5
 8012832:	2200      	movs	r2, #0
 8012834:	4543      	cmp	r3, r8
 8012836:	d321      	bcc.n	801287c <__multiply+0x98>
 8012838:	f104 0314 	add.w	r3, r4, #20
 801283c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012840:	f109 0314 	add.w	r3, r9, #20
 8012844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012848:	9202      	str	r2, [sp, #8]
 801284a:	1b3a      	subs	r2, r7, r4
 801284c:	3a15      	subs	r2, #21
 801284e:	f022 0203 	bic.w	r2, r2, #3
 8012852:	3204      	adds	r2, #4
 8012854:	f104 0115 	add.w	r1, r4, #21
 8012858:	428f      	cmp	r7, r1
 801285a:	bf38      	it	cc
 801285c:	2204      	movcc	r2, #4
 801285e:	9201      	str	r2, [sp, #4]
 8012860:	9a02      	ldr	r2, [sp, #8]
 8012862:	9303      	str	r3, [sp, #12]
 8012864:	429a      	cmp	r2, r3
 8012866:	d80c      	bhi.n	8012882 <__multiply+0x9e>
 8012868:	2e00      	cmp	r6, #0
 801286a:	dd03      	ble.n	8012874 <__multiply+0x90>
 801286c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012870:	2b00      	cmp	r3, #0
 8012872:	d05a      	beq.n	801292a <__multiply+0x146>
 8012874:	6106      	str	r6, [r0, #16]
 8012876:	b005      	add	sp, #20
 8012878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287c:	f843 2b04 	str.w	r2, [r3], #4
 8012880:	e7d8      	b.n	8012834 <__multiply+0x50>
 8012882:	f8b3 a000 	ldrh.w	sl, [r3]
 8012886:	f1ba 0f00 	cmp.w	sl, #0
 801288a:	d024      	beq.n	80128d6 <__multiply+0xf2>
 801288c:	f104 0e14 	add.w	lr, r4, #20
 8012890:	46a9      	mov	r9, r5
 8012892:	f04f 0c00 	mov.w	ip, #0
 8012896:	f85e 2b04 	ldr.w	r2, [lr], #4
 801289a:	f8d9 1000 	ldr.w	r1, [r9]
 801289e:	fa1f fb82 	uxth.w	fp, r2
 80128a2:	b289      	uxth	r1, r1
 80128a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80128a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80128ac:	f8d9 2000 	ldr.w	r2, [r9]
 80128b0:	4461      	add	r1, ip
 80128b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80128ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128be:	b289      	uxth	r1, r1
 80128c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80128c4:	4577      	cmp	r7, lr
 80128c6:	f849 1b04 	str.w	r1, [r9], #4
 80128ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128ce:	d8e2      	bhi.n	8012896 <__multiply+0xb2>
 80128d0:	9a01      	ldr	r2, [sp, #4]
 80128d2:	f845 c002 	str.w	ip, [r5, r2]
 80128d6:	9a03      	ldr	r2, [sp, #12]
 80128d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80128dc:	3304      	adds	r3, #4
 80128de:	f1b9 0f00 	cmp.w	r9, #0
 80128e2:	d020      	beq.n	8012926 <__multiply+0x142>
 80128e4:	6829      	ldr	r1, [r5, #0]
 80128e6:	f104 0c14 	add.w	ip, r4, #20
 80128ea:	46ae      	mov	lr, r5
 80128ec:	f04f 0a00 	mov.w	sl, #0
 80128f0:	f8bc b000 	ldrh.w	fp, [ip]
 80128f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80128f8:	fb09 220b 	mla	r2, r9, fp, r2
 80128fc:	4492      	add	sl, r2
 80128fe:	b289      	uxth	r1, r1
 8012900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012904:	f84e 1b04 	str.w	r1, [lr], #4
 8012908:	f85c 2b04 	ldr.w	r2, [ip], #4
 801290c:	f8be 1000 	ldrh.w	r1, [lr]
 8012910:	0c12      	lsrs	r2, r2, #16
 8012912:	fb09 1102 	mla	r1, r9, r2, r1
 8012916:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801291a:	4567      	cmp	r7, ip
 801291c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012920:	d8e6      	bhi.n	80128f0 <__multiply+0x10c>
 8012922:	9a01      	ldr	r2, [sp, #4]
 8012924:	50a9      	str	r1, [r5, r2]
 8012926:	3504      	adds	r5, #4
 8012928:	e79a      	b.n	8012860 <__multiply+0x7c>
 801292a:	3e01      	subs	r6, #1
 801292c:	e79c      	b.n	8012868 <__multiply+0x84>
 801292e:	bf00      	nop
 8012930:	08013bb8 	.word	0x08013bb8
 8012934:	08013c36 	.word	0x08013c36

08012938 <__pow5mult>:
 8012938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801293c:	4615      	mov	r5, r2
 801293e:	f012 0203 	ands.w	r2, r2, #3
 8012942:	4606      	mov	r6, r0
 8012944:	460f      	mov	r7, r1
 8012946:	d007      	beq.n	8012958 <__pow5mult+0x20>
 8012948:	4c25      	ldr	r4, [pc, #148]	; (80129e0 <__pow5mult+0xa8>)
 801294a:	3a01      	subs	r2, #1
 801294c:	2300      	movs	r3, #0
 801294e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012952:	f7ff fe9b 	bl	801268c <__multadd>
 8012956:	4607      	mov	r7, r0
 8012958:	10ad      	asrs	r5, r5, #2
 801295a:	d03d      	beq.n	80129d8 <__pow5mult+0xa0>
 801295c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801295e:	b97c      	cbnz	r4, 8012980 <__pow5mult+0x48>
 8012960:	2010      	movs	r0, #16
 8012962:	f7fe f8db 	bl	8010b1c <malloc>
 8012966:	4602      	mov	r2, r0
 8012968:	6270      	str	r0, [r6, #36]	; 0x24
 801296a:	b928      	cbnz	r0, 8012978 <__pow5mult+0x40>
 801296c:	4b1d      	ldr	r3, [pc, #116]	; (80129e4 <__pow5mult+0xac>)
 801296e:	481e      	ldr	r0, [pc, #120]	; (80129e8 <__pow5mult+0xb0>)
 8012970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012974:	f7fe fe62 	bl	801163c <__assert_func>
 8012978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801297c:	6004      	str	r4, [r0, #0]
 801297e:	60c4      	str	r4, [r0, #12]
 8012980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012988:	b94c      	cbnz	r4, 801299e <__pow5mult+0x66>
 801298a:	f240 2171 	movw	r1, #625	; 0x271
 801298e:	4630      	mov	r0, r6
 8012990:	f7ff ff12 	bl	80127b8 <__i2b>
 8012994:	2300      	movs	r3, #0
 8012996:	f8c8 0008 	str.w	r0, [r8, #8]
 801299a:	4604      	mov	r4, r0
 801299c:	6003      	str	r3, [r0, #0]
 801299e:	f04f 0900 	mov.w	r9, #0
 80129a2:	07eb      	lsls	r3, r5, #31
 80129a4:	d50a      	bpl.n	80129bc <__pow5mult+0x84>
 80129a6:	4639      	mov	r1, r7
 80129a8:	4622      	mov	r2, r4
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7ff ff1a 	bl	80127e4 <__multiply>
 80129b0:	4639      	mov	r1, r7
 80129b2:	4680      	mov	r8, r0
 80129b4:	4630      	mov	r0, r6
 80129b6:	f7ff fe47 	bl	8012648 <_Bfree>
 80129ba:	4647      	mov	r7, r8
 80129bc:	106d      	asrs	r5, r5, #1
 80129be:	d00b      	beq.n	80129d8 <__pow5mult+0xa0>
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	b938      	cbnz	r0, 80129d4 <__pow5mult+0x9c>
 80129c4:	4622      	mov	r2, r4
 80129c6:	4621      	mov	r1, r4
 80129c8:	4630      	mov	r0, r6
 80129ca:	f7ff ff0b 	bl	80127e4 <__multiply>
 80129ce:	6020      	str	r0, [r4, #0]
 80129d0:	f8c0 9000 	str.w	r9, [r0]
 80129d4:	4604      	mov	r4, r0
 80129d6:	e7e4      	b.n	80129a2 <__pow5mult+0x6a>
 80129d8:	4638      	mov	r0, r7
 80129da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129de:	bf00      	nop
 80129e0:	08013d88 	.word	0x08013d88
 80129e4:	08013b46 	.word	0x08013b46
 80129e8:	08013c36 	.word	0x08013c36

080129ec <__lshift>:
 80129ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f0:	460c      	mov	r4, r1
 80129f2:	6849      	ldr	r1, [r1, #4]
 80129f4:	6923      	ldr	r3, [r4, #16]
 80129f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	4607      	mov	r7, r0
 80129fe:	4691      	mov	r9, r2
 8012a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a04:	f108 0601 	add.w	r6, r8, #1
 8012a08:	42b3      	cmp	r3, r6
 8012a0a:	db0b      	blt.n	8012a24 <__lshift+0x38>
 8012a0c:	4638      	mov	r0, r7
 8012a0e:	f7ff fddb 	bl	80125c8 <_Balloc>
 8012a12:	4605      	mov	r5, r0
 8012a14:	b948      	cbnz	r0, 8012a2a <__lshift+0x3e>
 8012a16:	4602      	mov	r2, r0
 8012a18:	4b2a      	ldr	r3, [pc, #168]	; (8012ac4 <__lshift+0xd8>)
 8012a1a:	482b      	ldr	r0, [pc, #172]	; (8012ac8 <__lshift+0xdc>)
 8012a1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a20:	f7fe fe0c 	bl	801163c <__assert_func>
 8012a24:	3101      	adds	r1, #1
 8012a26:	005b      	lsls	r3, r3, #1
 8012a28:	e7ee      	b.n	8012a08 <__lshift+0x1c>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f100 0114 	add.w	r1, r0, #20
 8012a30:	f100 0210 	add.w	r2, r0, #16
 8012a34:	4618      	mov	r0, r3
 8012a36:	4553      	cmp	r3, sl
 8012a38:	db37      	blt.n	8012aaa <__lshift+0xbe>
 8012a3a:	6920      	ldr	r0, [r4, #16]
 8012a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a40:	f104 0314 	add.w	r3, r4, #20
 8012a44:	f019 091f 	ands.w	r9, r9, #31
 8012a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012a50:	d02f      	beq.n	8012ab2 <__lshift+0xc6>
 8012a52:	f1c9 0e20 	rsb	lr, r9, #32
 8012a56:	468a      	mov	sl, r1
 8012a58:	f04f 0c00 	mov.w	ip, #0
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	fa02 f209 	lsl.w	r2, r2, r9
 8012a62:	ea42 020c 	orr.w	r2, r2, ip
 8012a66:	f84a 2b04 	str.w	r2, [sl], #4
 8012a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a6e:	4298      	cmp	r0, r3
 8012a70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012a74:	d8f2      	bhi.n	8012a5c <__lshift+0x70>
 8012a76:	1b03      	subs	r3, r0, r4
 8012a78:	3b15      	subs	r3, #21
 8012a7a:	f023 0303 	bic.w	r3, r3, #3
 8012a7e:	3304      	adds	r3, #4
 8012a80:	f104 0215 	add.w	r2, r4, #21
 8012a84:	4290      	cmp	r0, r2
 8012a86:	bf38      	it	cc
 8012a88:	2304      	movcc	r3, #4
 8012a8a:	f841 c003 	str.w	ip, [r1, r3]
 8012a8e:	f1bc 0f00 	cmp.w	ip, #0
 8012a92:	d001      	beq.n	8012a98 <__lshift+0xac>
 8012a94:	f108 0602 	add.w	r6, r8, #2
 8012a98:	3e01      	subs	r6, #1
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	612e      	str	r6, [r5, #16]
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	f7ff fdd2 	bl	8012648 <_Bfree>
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8012aae:	3301      	adds	r3, #1
 8012ab0:	e7c1      	b.n	8012a36 <__lshift+0x4a>
 8012ab2:	3904      	subs	r1, #4
 8012ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8012abc:	4298      	cmp	r0, r3
 8012abe:	d8f9      	bhi.n	8012ab4 <__lshift+0xc8>
 8012ac0:	e7ea      	b.n	8012a98 <__lshift+0xac>
 8012ac2:	bf00      	nop
 8012ac4:	08013bb8 	.word	0x08013bb8
 8012ac8:	08013c36 	.word	0x08013c36

08012acc <__mcmp>:
 8012acc:	b530      	push	{r4, r5, lr}
 8012ace:	6902      	ldr	r2, [r0, #16]
 8012ad0:	690c      	ldr	r4, [r1, #16]
 8012ad2:	1b12      	subs	r2, r2, r4
 8012ad4:	d10e      	bne.n	8012af4 <__mcmp+0x28>
 8012ad6:	f100 0314 	add.w	r3, r0, #20
 8012ada:	3114      	adds	r1, #20
 8012adc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012aec:	42a5      	cmp	r5, r4
 8012aee:	d003      	beq.n	8012af8 <__mcmp+0x2c>
 8012af0:	d305      	bcc.n	8012afe <__mcmp+0x32>
 8012af2:	2201      	movs	r2, #1
 8012af4:	4610      	mov	r0, r2
 8012af6:	bd30      	pop	{r4, r5, pc}
 8012af8:	4283      	cmp	r3, r0
 8012afa:	d3f3      	bcc.n	8012ae4 <__mcmp+0x18>
 8012afc:	e7fa      	b.n	8012af4 <__mcmp+0x28>
 8012afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b02:	e7f7      	b.n	8012af4 <__mcmp+0x28>

08012b04 <__mdiff>:
 8012b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	460c      	mov	r4, r1
 8012b0a:	4606      	mov	r6, r0
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	4620      	mov	r0, r4
 8012b10:	4690      	mov	r8, r2
 8012b12:	f7ff ffdb 	bl	8012acc <__mcmp>
 8012b16:	1e05      	subs	r5, r0, #0
 8012b18:	d110      	bne.n	8012b3c <__mdiff+0x38>
 8012b1a:	4629      	mov	r1, r5
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f7ff fd53 	bl	80125c8 <_Balloc>
 8012b22:	b930      	cbnz	r0, 8012b32 <__mdiff+0x2e>
 8012b24:	4b3a      	ldr	r3, [pc, #232]	; (8012c10 <__mdiff+0x10c>)
 8012b26:	4602      	mov	r2, r0
 8012b28:	f240 2132 	movw	r1, #562	; 0x232
 8012b2c:	4839      	ldr	r0, [pc, #228]	; (8012c14 <__mdiff+0x110>)
 8012b2e:	f7fe fd85 	bl	801163c <__assert_func>
 8012b32:	2301      	movs	r3, #1
 8012b34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	bfa4      	itt	ge
 8012b3e:	4643      	movge	r3, r8
 8012b40:	46a0      	movge	r8, r4
 8012b42:	4630      	mov	r0, r6
 8012b44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b48:	bfa6      	itte	ge
 8012b4a:	461c      	movge	r4, r3
 8012b4c:	2500      	movge	r5, #0
 8012b4e:	2501      	movlt	r5, #1
 8012b50:	f7ff fd3a 	bl	80125c8 <_Balloc>
 8012b54:	b920      	cbnz	r0, 8012b60 <__mdiff+0x5c>
 8012b56:	4b2e      	ldr	r3, [pc, #184]	; (8012c10 <__mdiff+0x10c>)
 8012b58:	4602      	mov	r2, r0
 8012b5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b5e:	e7e5      	b.n	8012b2c <__mdiff+0x28>
 8012b60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b64:	6926      	ldr	r6, [r4, #16]
 8012b66:	60c5      	str	r5, [r0, #12]
 8012b68:	f104 0914 	add.w	r9, r4, #20
 8012b6c:	f108 0514 	add.w	r5, r8, #20
 8012b70:	f100 0e14 	add.w	lr, r0, #20
 8012b74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012b78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012b7c:	f108 0210 	add.w	r2, r8, #16
 8012b80:	46f2      	mov	sl, lr
 8012b82:	2100      	movs	r1, #0
 8012b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8012b88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012b8c:	fa1f f883 	uxth.w	r8, r3
 8012b90:	fa11 f18b 	uxtah	r1, r1, fp
 8012b94:	0c1b      	lsrs	r3, r3, #16
 8012b96:	eba1 0808 	sub.w	r8, r1, r8
 8012b9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012b9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012ba2:	fa1f f888 	uxth.w	r8, r8
 8012ba6:	1419      	asrs	r1, r3, #16
 8012ba8:	454e      	cmp	r6, r9
 8012baa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012bae:	f84a 3b04 	str.w	r3, [sl], #4
 8012bb2:	d8e7      	bhi.n	8012b84 <__mdiff+0x80>
 8012bb4:	1b33      	subs	r3, r6, r4
 8012bb6:	3b15      	subs	r3, #21
 8012bb8:	f023 0303 	bic.w	r3, r3, #3
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	3415      	adds	r4, #21
 8012bc0:	42a6      	cmp	r6, r4
 8012bc2:	bf38      	it	cc
 8012bc4:	2304      	movcc	r3, #4
 8012bc6:	441d      	add	r5, r3
 8012bc8:	4473      	add	r3, lr
 8012bca:	469e      	mov	lr, r3
 8012bcc:	462e      	mov	r6, r5
 8012bce:	4566      	cmp	r6, ip
 8012bd0:	d30e      	bcc.n	8012bf0 <__mdiff+0xec>
 8012bd2:	f10c 0203 	add.w	r2, ip, #3
 8012bd6:	1b52      	subs	r2, r2, r5
 8012bd8:	f022 0203 	bic.w	r2, r2, #3
 8012bdc:	3d03      	subs	r5, #3
 8012bde:	45ac      	cmp	ip, r5
 8012be0:	bf38      	it	cc
 8012be2:	2200      	movcc	r2, #0
 8012be4:	441a      	add	r2, r3
 8012be6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012bea:	b17b      	cbz	r3, 8012c0c <__mdiff+0x108>
 8012bec:	6107      	str	r7, [r0, #16]
 8012bee:	e7a3      	b.n	8012b38 <__mdiff+0x34>
 8012bf0:	f856 8b04 	ldr.w	r8, [r6], #4
 8012bf4:	fa11 f288 	uxtah	r2, r1, r8
 8012bf8:	1414      	asrs	r4, r2, #16
 8012bfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012bfe:	b292      	uxth	r2, r2
 8012c00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012c04:	f84e 2b04 	str.w	r2, [lr], #4
 8012c08:	1421      	asrs	r1, r4, #16
 8012c0a:	e7e0      	b.n	8012bce <__mdiff+0xca>
 8012c0c:	3f01      	subs	r7, #1
 8012c0e:	e7ea      	b.n	8012be6 <__mdiff+0xe2>
 8012c10:	08013bb8 	.word	0x08013bb8
 8012c14:	08013c36 	.word	0x08013c36

08012c18 <__d2b>:
 8012c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	4689      	mov	r9, r1
 8012c1e:	2101      	movs	r1, #1
 8012c20:	ec57 6b10 	vmov	r6, r7, d0
 8012c24:	4690      	mov	r8, r2
 8012c26:	f7ff fccf 	bl	80125c8 <_Balloc>
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	b930      	cbnz	r0, 8012c3c <__d2b+0x24>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	4b25      	ldr	r3, [pc, #148]	; (8012cc8 <__d2b+0xb0>)
 8012c32:	4826      	ldr	r0, [pc, #152]	; (8012ccc <__d2b+0xb4>)
 8012c34:	f240 310a 	movw	r1, #778	; 0x30a
 8012c38:	f7fe fd00 	bl	801163c <__assert_func>
 8012c3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c44:	bb35      	cbnz	r5, 8012c94 <__d2b+0x7c>
 8012c46:	2e00      	cmp	r6, #0
 8012c48:	9301      	str	r3, [sp, #4]
 8012c4a:	d028      	beq.n	8012c9e <__d2b+0x86>
 8012c4c:	4668      	mov	r0, sp
 8012c4e:	9600      	str	r6, [sp, #0]
 8012c50:	f7ff fd82 	bl	8012758 <__lo0bits>
 8012c54:	9900      	ldr	r1, [sp, #0]
 8012c56:	b300      	cbz	r0, 8012c9a <__d2b+0x82>
 8012c58:	9a01      	ldr	r2, [sp, #4]
 8012c5a:	f1c0 0320 	rsb	r3, r0, #32
 8012c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012c62:	430b      	orrs	r3, r1
 8012c64:	40c2      	lsrs	r2, r0
 8012c66:	6163      	str	r3, [r4, #20]
 8012c68:	9201      	str	r2, [sp, #4]
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	61a3      	str	r3, [r4, #24]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	bf14      	ite	ne
 8012c72:	2202      	movne	r2, #2
 8012c74:	2201      	moveq	r2, #1
 8012c76:	6122      	str	r2, [r4, #16]
 8012c78:	b1d5      	cbz	r5, 8012cb0 <__d2b+0x98>
 8012c7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012c7e:	4405      	add	r5, r0
 8012c80:	f8c9 5000 	str.w	r5, [r9]
 8012c84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012c88:	f8c8 0000 	str.w	r0, [r8]
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	b003      	add	sp, #12
 8012c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012c98:	e7d5      	b.n	8012c46 <__d2b+0x2e>
 8012c9a:	6161      	str	r1, [r4, #20]
 8012c9c:	e7e5      	b.n	8012c6a <__d2b+0x52>
 8012c9e:	a801      	add	r0, sp, #4
 8012ca0:	f7ff fd5a 	bl	8012758 <__lo0bits>
 8012ca4:	9b01      	ldr	r3, [sp, #4]
 8012ca6:	6163      	str	r3, [r4, #20]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	6122      	str	r2, [r4, #16]
 8012cac:	3020      	adds	r0, #32
 8012cae:	e7e3      	b.n	8012c78 <__d2b+0x60>
 8012cb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012cb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012cb8:	f8c9 0000 	str.w	r0, [r9]
 8012cbc:	6918      	ldr	r0, [r3, #16]
 8012cbe:	f7ff fd2b 	bl	8012718 <__hi0bits>
 8012cc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012cc6:	e7df      	b.n	8012c88 <__d2b+0x70>
 8012cc8:	08013bb8 	.word	0x08013bb8
 8012ccc:	08013c36 	.word	0x08013c36

08012cd0 <_calloc_r>:
 8012cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cd2:	fba1 2402 	umull	r2, r4, r1, r2
 8012cd6:	b94c      	cbnz	r4, 8012cec <_calloc_r+0x1c>
 8012cd8:	4611      	mov	r1, r2
 8012cda:	9201      	str	r2, [sp, #4]
 8012cdc:	f7fd ffa8 	bl	8010c30 <_malloc_r>
 8012ce0:	9a01      	ldr	r2, [sp, #4]
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	b930      	cbnz	r0, 8012cf4 <_calloc_r+0x24>
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	b003      	add	sp, #12
 8012cea:	bd30      	pop	{r4, r5, pc}
 8012cec:	220c      	movs	r2, #12
 8012cee:	6002      	str	r2, [r0, #0]
 8012cf0:	2500      	movs	r5, #0
 8012cf2:	e7f8      	b.n	8012ce6 <_calloc_r+0x16>
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	f7fd ff27 	bl	8010b48 <memset>
 8012cfa:	e7f4      	b.n	8012ce6 <_calloc_r+0x16>

08012cfc <__sfputc_r>:
 8012cfc:	6893      	ldr	r3, [r2, #8]
 8012cfe:	3b01      	subs	r3, #1
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	b410      	push	{r4}
 8012d04:	6093      	str	r3, [r2, #8]
 8012d06:	da08      	bge.n	8012d1a <__sfputc_r+0x1e>
 8012d08:	6994      	ldr	r4, [r2, #24]
 8012d0a:	42a3      	cmp	r3, r4
 8012d0c:	db01      	blt.n	8012d12 <__sfputc_r+0x16>
 8012d0e:	290a      	cmp	r1, #10
 8012d10:	d103      	bne.n	8012d1a <__sfputc_r+0x1e>
 8012d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d16:	f000 b98f 	b.w	8013038 <__swbuf_r>
 8012d1a:	6813      	ldr	r3, [r2, #0]
 8012d1c:	1c58      	adds	r0, r3, #1
 8012d1e:	6010      	str	r0, [r2, #0]
 8012d20:	7019      	strb	r1, [r3, #0]
 8012d22:	4608      	mov	r0, r1
 8012d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d28:	4770      	bx	lr

08012d2a <__sfputs_r>:
 8012d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	460f      	mov	r7, r1
 8012d30:	4614      	mov	r4, r2
 8012d32:	18d5      	adds	r5, r2, r3
 8012d34:	42ac      	cmp	r4, r5
 8012d36:	d101      	bne.n	8012d3c <__sfputs_r+0x12>
 8012d38:	2000      	movs	r0, #0
 8012d3a:	e007      	b.n	8012d4c <__sfputs_r+0x22>
 8012d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d40:	463a      	mov	r2, r7
 8012d42:	4630      	mov	r0, r6
 8012d44:	f7ff ffda 	bl	8012cfc <__sfputc_r>
 8012d48:	1c43      	adds	r3, r0, #1
 8012d4a:	d1f3      	bne.n	8012d34 <__sfputs_r+0xa>
 8012d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d50 <_vfiprintf_r>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	460d      	mov	r5, r1
 8012d56:	b09d      	sub	sp, #116	; 0x74
 8012d58:	4614      	mov	r4, r2
 8012d5a:	4698      	mov	r8, r3
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	b118      	cbz	r0, 8012d68 <_vfiprintf_r+0x18>
 8012d60:	6983      	ldr	r3, [r0, #24]
 8012d62:	b90b      	cbnz	r3, 8012d68 <_vfiprintf_r+0x18>
 8012d64:	f7ff fb5a 	bl	801241c <__sinit>
 8012d68:	4b89      	ldr	r3, [pc, #548]	; (8012f90 <_vfiprintf_r+0x240>)
 8012d6a:	429d      	cmp	r5, r3
 8012d6c:	d11b      	bne.n	8012da6 <_vfiprintf_r+0x56>
 8012d6e:	6875      	ldr	r5, [r6, #4]
 8012d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d72:	07d9      	lsls	r1, r3, #31
 8012d74:	d405      	bmi.n	8012d82 <_vfiprintf_r+0x32>
 8012d76:	89ab      	ldrh	r3, [r5, #12]
 8012d78:	059a      	lsls	r2, r3, #22
 8012d7a:	d402      	bmi.n	8012d82 <_vfiprintf_r+0x32>
 8012d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d7e:	f7ff fc02 	bl	8012586 <__retarget_lock_acquire_recursive>
 8012d82:	89ab      	ldrh	r3, [r5, #12]
 8012d84:	071b      	lsls	r3, r3, #28
 8012d86:	d501      	bpl.n	8012d8c <_vfiprintf_r+0x3c>
 8012d88:	692b      	ldr	r3, [r5, #16]
 8012d8a:	b9eb      	cbnz	r3, 8012dc8 <_vfiprintf_r+0x78>
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f000 f9c4 	bl	801311c <__swsetup_r>
 8012d94:	b1c0      	cbz	r0, 8012dc8 <_vfiprintf_r+0x78>
 8012d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d98:	07dc      	lsls	r4, r3, #31
 8012d9a:	d50e      	bpl.n	8012dba <_vfiprintf_r+0x6a>
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012da0:	b01d      	add	sp, #116	; 0x74
 8012da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da6:	4b7b      	ldr	r3, [pc, #492]	; (8012f94 <_vfiprintf_r+0x244>)
 8012da8:	429d      	cmp	r5, r3
 8012daa:	d101      	bne.n	8012db0 <_vfiprintf_r+0x60>
 8012dac:	68b5      	ldr	r5, [r6, #8]
 8012dae:	e7df      	b.n	8012d70 <_vfiprintf_r+0x20>
 8012db0:	4b79      	ldr	r3, [pc, #484]	; (8012f98 <_vfiprintf_r+0x248>)
 8012db2:	429d      	cmp	r5, r3
 8012db4:	bf08      	it	eq
 8012db6:	68f5      	ldreq	r5, [r6, #12]
 8012db8:	e7da      	b.n	8012d70 <_vfiprintf_r+0x20>
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	0598      	lsls	r0, r3, #22
 8012dbe:	d4ed      	bmi.n	8012d9c <_vfiprintf_r+0x4c>
 8012dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dc2:	f7ff fbe1 	bl	8012588 <__retarget_lock_release_recursive>
 8012dc6:	e7e9      	b.n	8012d9c <_vfiprintf_r+0x4c>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	9309      	str	r3, [sp, #36]	; 0x24
 8012dcc:	2320      	movs	r3, #32
 8012dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dd6:	2330      	movs	r3, #48	; 0x30
 8012dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f9c <_vfiprintf_r+0x24c>
 8012ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012de0:	f04f 0901 	mov.w	r9, #1
 8012de4:	4623      	mov	r3, r4
 8012de6:	469a      	mov	sl, r3
 8012de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dec:	b10a      	cbz	r2, 8012df2 <_vfiprintf_r+0xa2>
 8012dee:	2a25      	cmp	r2, #37	; 0x25
 8012df0:	d1f9      	bne.n	8012de6 <_vfiprintf_r+0x96>
 8012df2:	ebba 0b04 	subs.w	fp, sl, r4
 8012df6:	d00b      	beq.n	8012e10 <_vfiprintf_r+0xc0>
 8012df8:	465b      	mov	r3, fp
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	4629      	mov	r1, r5
 8012dfe:	4630      	mov	r0, r6
 8012e00:	f7ff ff93 	bl	8012d2a <__sfputs_r>
 8012e04:	3001      	adds	r0, #1
 8012e06:	f000 80aa 	beq.w	8012f5e <_vfiprintf_r+0x20e>
 8012e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e0c:	445a      	add	r2, fp
 8012e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012e10:	f89a 3000 	ldrb.w	r3, [sl]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	f000 80a2 	beq.w	8012f5e <_vfiprintf_r+0x20e>
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e24:	f10a 0a01 	add.w	sl, sl, #1
 8012e28:	9304      	str	r3, [sp, #16]
 8012e2a:	9307      	str	r3, [sp, #28]
 8012e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e30:	931a      	str	r3, [sp, #104]	; 0x68
 8012e32:	4654      	mov	r4, sl
 8012e34:	2205      	movs	r2, #5
 8012e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e3a:	4858      	ldr	r0, [pc, #352]	; (8012f9c <_vfiprintf_r+0x24c>)
 8012e3c:	f7ed f9e8 	bl	8000210 <memchr>
 8012e40:	9a04      	ldr	r2, [sp, #16]
 8012e42:	b9d8      	cbnz	r0, 8012e7c <_vfiprintf_r+0x12c>
 8012e44:	06d1      	lsls	r1, r2, #27
 8012e46:	bf44      	itt	mi
 8012e48:	2320      	movmi	r3, #32
 8012e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e4e:	0713      	lsls	r3, r2, #28
 8012e50:	bf44      	itt	mi
 8012e52:	232b      	movmi	r3, #43	; 0x2b
 8012e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e58:	f89a 3000 	ldrb.w	r3, [sl]
 8012e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8012e5e:	d015      	beq.n	8012e8c <_vfiprintf_r+0x13c>
 8012e60:	9a07      	ldr	r2, [sp, #28]
 8012e62:	4654      	mov	r4, sl
 8012e64:	2000      	movs	r0, #0
 8012e66:	f04f 0c0a 	mov.w	ip, #10
 8012e6a:	4621      	mov	r1, r4
 8012e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e70:	3b30      	subs	r3, #48	; 0x30
 8012e72:	2b09      	cmp	r3, #9
 8012e74:	d94e      	bls.n	8012f14 <_vfiprintf_r+0x1c4>
 8012e76:	b1b0      	cbz	r0, 8012ea6 <_vfiprintf_r+0x156>
 8012e78:	9207      	str	r2, [sp, #28]
 8012e7a:	e014      	b.n	8012ea6 <_vfiprintf_r+0x156>
 8012e7c:	eba0 0308 	sub.w	r3, r0, r8
 8012e80:	fa09 f303 	lsl.w	r3, r9, r3
 8012e84:	4313      	orrs	r3, r2
 8012e86:	9304      	str	r3, [sp, #16]
 8012e88:	46a2      	mov	sl, r4
 8012e8a:	e7d2      	b.n	8012e32 <_vfiprintf_r+0xe2>
 8012e8c:	9b03      	ldr	r3, [sp, #12]
 8012e8e:	1d19      	adds	r1, r3, #4
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	9103      	str	r1, [sp, #12]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	bfbb      	ittet	lt
 8012e98:	425b      	neglt	r3, r3
 8012e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e9e:	9307      	strge	r3, [sp, #28]
 8012ea0:	9307      	strlt	r3, [sp, #28]
 8012ea2:	bfb8      	it	lt
 8012ea4:	9204      	strlt	r2, [sp, #16]
 8012ea6:	7823      	ldrb	r3, [r4, #0]
 8012ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8012eaa:	d10c      	bne.n	8012ec6 <_vfiprintf_r+0x176>
 8012eac:	7863      	ldrb	r3, [r4, #1]
 8012eae:	2b2a      	cmp	r3, #42	; 0x2a
 8012eb0:	d135      	bne.n	8012f1e <_vfiprintf_r+0x1ce>
 8012eb2:	9b03      	ldr	r3, [sp, #12]
 8012eb4:	1d1a      	adds	r2, r3, #4
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	9203      	str	r2, [sp, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	bfb8      	it	lt
 8012ebe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012ec2:	3402      	adds	r4, #2
 8012ec4:	9305      	str	r3, [sp, #20]
 8012ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012fac <_vfiprintf_r+0x25c>
 8012eca:	7821      	ldrb	r1, [r4, #0]
 8012ecc:	2203      	movs	r2, #3
 8012ece:	4650      	mov	r0, sl
 8012ed0:	f7ed f99e 	bl	8000210 <memchr>
 8012ed4:	b140      	cbz	r0, 8012ee8 <_vfiprintf_r+0x198>
 8012ed6:	2340      	movs	r3, #64	; 0x40
 8012ed8:	eba0 000a 	sub.w	r0, r0, sl
 8012edc:	fa03 f000 	lsl.w	r0, r3, r0
 8012ee0:	9b04      	ldr	r3, [sp, #16]
 8012ee2:	4303      	orrs	r3, r0
 8012ee4:	3401      	adds	r4, #1
 8012ee6:	9304      	str	r3, [sp, #16]
 8012ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eec:	482c      	ldr	r0, [pc, #176]	; (8012fa0 <_vfiprintf_r+0x250>)
 8012eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ef2:	2206      	movs	r2, #6
 8012ef4:	f7ed f98c 	bl	8000210 <memchr>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d03f      	beq.n	8012f7c <_vfiprintf_r+0x22c>
 8012efc:	4b29      	ldr	r3, [pc, #164]	; (8012fa4 <_vfiprintf_r+0x254>)
 8012efe:	bb1b      	cbnz	r3, 8012f48 <_vfiprintf_r+0x1f8>
 8012f00:	9b03      	ldr	r3, [sp, #12]
 8012f02:	3307      	adds	r3, #7
 8012f04:	f023 0307 	bic.w	r3, r3, #7
 8012f08:	3308      	adds	r3, #8
 8012f0a:	9303      	str	r3, [sp, #12]
 8012f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f0e:	443b      	add	r3, r7
 8012f10:	9309      	str	r3, [sp, #36]	; 0x24
 8012f12:	e767      	b.n	8012de4 <_vfiprintf_r+0x94>
 8012f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f18:	460c      	mov	r4, r1
 8012f1a:	2001      	movs	r0, #1
 8012f1c:	e7a5      	b.n	8012e6a <_vfiprintf_r+0x11a>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	3401      	adds	r4, #1
 8012f22:	9305      	str	r3, [sp, #20]
 8012f24:	4619      	mov	r1, r3
 8012f26:	f04f 0c0a 	mov.w	ip, #10
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f30:	3a30      	subs	r2, #48	; 0x30
 8012f32:	2a09      	cmp	r2, #9
 8012f34:	d903      	bls.n	8012f3e <_vfiprintf_r+0x1ee>
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d0c5      	beq.n	8012ec6 <_vfiprintf_r+0x176>
 8012f3a:	9105      	str	r1, [sp, #20]
 8012f3c:	e7c3      	b.n	8012ec6 <_vfiprintf_r+0x176>
 8012f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f42:	4604      	mov	r4, r0
 8012f44:	2301      	movs	r3, #1
 8012f46:	e7f0      	b.n	8012f2a <_vfiprintf_r+0x1da>
 8012f48:	ab03      	add	r3, sp, #12
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	462a      	mov	r2, r5
 8012f4e:	4b16      	ldr	r3, [pc, #88]	; (8012fa8 <_vfiprintf_r+0x258>)
 8012f50:	a904      	add	r1, sp, #16
 8012f52:	4630      	mov	r0, r6
 8012f54:	f7fd ff80 	bl	8010e58 <_printf_float>
 8012f58:	4607      	mov	r7, r0
 8012f5a:	1c78      	adds	r0, r7, #1
 8012f5c:	d1d6      	bne.n	8012f0c <_vfiprintf_r+0x1bc>
 8012f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f60:	07d9      	lsls	r1, r3, #31
 8012f62:	d405      	bmi.n	8012f70 <_vfiprintf_r+0x220>
 8012f64:	89ab      	ldrh	r3, [r5, #12]
 8012f66:	059a      	lsls	r2, r3, #22
 8012f68:	d402      	bmi.n	8012f70 <_vfiprintf_r+0x220>
 8012f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f6c:	f7ff fb0c 	bl	8012588 <__retarget_lock_release_recursive>
 8012f70:	89ab      	ldrh	r3, [r5, #12]
 8012f72:	065b      	lsls	r3, r3, #25
 8012f74:	f53f af12 	bmi.w	8012d9c <_vfiprintf_r+0x4c>
 8012f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f7a:	e711      	b.n	8012da0 <_vfiprintf_r+0x50>
 8012f7c:	ab03      	add	r3, sp, #12
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	462a      	mov	r2, r5
 8012f82:	4b09      	ldr	r3, [pc, #36]	; (8012fa8 <_vfiprintf_r+0x258>)
 8012f84:	a904      	add	r1, sp, #16
 8012f86:	4630      	mov	r0, r6
 8012f88:	f7fe fa0a 	bl	80113a0 <_printf_i>
 8012f8c:	e7e4      	b.n	8012f58 <_vfiprintf_r+0x208>
 8012f8e:	bf00      	nop
 8012f90:	08013bec 	.word	0x08013bec
 8012f94:	08013c0c 	.word	0x08013c0c
 8012f98:	08013bcc 	.word	0x08013bcc
 8012f9c:	08013d94 	.word	0x08013d94
 8012fa0:	08013d9e 	.word	0x08013d9e
 8012fa4:	08010e59 	.word	0x08010e59
 8012fa8:	08012d2b 	.word	0x08012d2b
 8012fac:	08013d9a 	.word	0x08013d9a

08012fb0 <__sread>:
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	460c      	mov	r4, r1
 8012fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb8:	f000 fa70 	bl	801349c <_read_r>
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	bfab      	itete	ge
 8012fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8012fc4:	181b      	addge	r3, r3, r0
 8012fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012fca:	bfac      	ite	ge
 8012fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012fce:	81a3      	strhlt	r3, [r4, #12]
 8012fd0:	bd10      	pop	{r4, pc}

08012fd2 <__swrite>:
 8012fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd6:	461f      	mov	r7, r3
 8012fd8:	898b      	ldrh	r3, [r1, #12]
 8012fda:	05db      	lsls	r3, r3, #23
 8012fdc:	4605      	mov	r5, r0
 8012fde:	460c      	mov	r4, r1
 8012fe0:	4616      	mov	r6, r2
 8012fe2:	d505      	bpl.n	8012ff0 <__swrite+0x1e>
 8012fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe8:	2302      	movs	r3, #2
 8012fea:	2200      	movs	r2, #0
 8012fec:	f000 f9de 	bl	80133ac <_lseek_r>
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ffa:	81a3      	strh	r3, [r4, #12]
 8012ffc:	4632      	mov	r2, r6
 8012ffe:	463b      	mov	r3, r7
 8013000:	4628      	mov	r0, r5
 8013002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013006:	f000 b877 	b.w	80130f8 <_write_r>

0801300a <__sseek>:
 801300a:	b510      	push	{r4, lr}
 801300c:	460c      	mov	r4, r1
 801300e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013012:	f000 f9cb 	bl	80133ac <_lseek_r>
 8013016:	1c43      	adds	r3, r0, #1
 8013018:	89a3      	ldrh	r3, [r4, #12]
 801301a:	bf15      	itete	ne
 801301c:	6560      	strne	r0, [r4, #84]	; 0x54
 801301e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013026:	81a3      	strheq	r3, [r4, #12]
 8013028:	bf18      	it	ne
 801302a:	81a3      	strhne	r3, [r4, #12]
 801302c:	bd10      	pop	{r4, pc}

0801302e <__sclose>:
 801302e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013032:	f000 b8e9 	b.w	8013208 <_close_r>
	...

08013038 <__swbuf_r>:
 8013038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303a:	460e      	mov	r6, r1
 801303c:	4614      	mov	r4, r2
 801303e:	4605      	mov	r5, r0
 8013040:	b118      	cbz	r0, 801304a <__swbuf_r+0x12>
 8013042:	6983      	ldr	r3, [r0, #24]
 8013044:	b90b      	cbnz	r3, 801304a <__swbuf_r+0x12>
 8013046:	f7ff f9e9 	bl	801241c <__sinit>
 801304a:	4b21      	ldr	r3, [pc, #132]	; (80130d0 <__swbuf_r+0x98>)
 801304c:	429c      	cmp	r4, r3
 801304e:	d12b      	bne.n	80130a8 <__swbuf_r+0x70>
 8013050:	686c      	ldr	r4, [r5, #4]
 8013052:	69a3      	ldr	r3, [r4, #24]
 8013054:	60a3      	str	r3, [r4, #8]
 8013056:	89a3      	ldrh	r3, [r4, #12]
 8013058:	071a      	lsls	r2, r3, #28
 801305a:	d52f      	bpl.n	80130bc <__swbuf_r+0x84>
 801305c:	6923      	ldr	r3, [r4, #16]
 801305e:	b36b      	cbz	r3, 80130bc <__swbuf_r+0x84>
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	6820      	ldr	r0, [r4, #0]
 8013064:	1ac0      	subs	r0, r0, r3
 8013066:	6963      	ldr	r3, [r4, #20]
 8013068:	b2f6      	uxtb	r6, r6
 801306a:	4283      	cmp	r3, r0
 801306c:	4637      	mov	r7, r6
 801306e:	dc04      	bgt.n	801307a <__swbuf_r+0x42>
 8013070:	4621      	mov	r1, r4
 8013072:	4628      	mov	r0, r5
 8013074:	f000 f95e 	bl	8013334 <_fflush_r>
 8013078:	bb30      	cbnz	r0, 80130c8 <__swbuf_r+0x90>
 801307a:	68a3      	ldr	r3, [r4, #8]
 801307c:	3b01      	subs	r3, #1
 801307e:	60a3      	str	r3, [r4, #8]
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	6022      	str	r2, [r4, #0]
 8013086:	701e      	strb	r6, [r3, #0]
 8013088:	6963      	ldr	r3, [r4, #20]
 801308a:	3001      	adds	r0, #1
 801308c:	4283      	cmp	r3, r0
 801308e:	d004      	beq.n	801309a <__swbuf_r+0x62>
 8013090:	89a3      	ldrh	r3, [r4, #12]
 8013092:	07db      	lsls	r3, r3, #31
 8013094:	d506      	bpl.n	80130a4 <__swbuf_r+0x6c>
 8013096:	2e0a      	cmp	r6, #10
 8013098:	d104      	bne.n	80130a4 <__swbuf_r+0x6c>
 801309a:	4621      	mov	r1, r4
 801309c:	4628      	mov	r0, r5
 801309e:	f000 f949 	bl	8013334 <_fflush_r>
 80130a2:	b988      	cbnz	r0, 80130c8 <__swbuf_r+0x90>
 80130a4:	4638      	mov	r0, r7
 80130a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130a8:	4b0a      	ldr	r3, [pc, #40]	; (80130d4 <__swbuf_r+0x9c>)
 80130aa:	429c      	cmp	r4, r3
 80130ac:	d101      	bne.n	80130b2 <__swbuf_r+0x7a>
 80130ae:	68ac      	ldr	r4, [r5, #8]
 80130b0:	e7cf      	b.n	8013052 <__swbuf_r+0x1a>
 80130b2:	4b09      	ldr	r3, [pc, #36]	; (80130d8 <__swbuf_r+0xa0>)
 80130b4:	429c      	cmp	r4, r3
 80130b6:	bf08      	it	eq
 80130b8:	68ec      	ldreq	r4, [r5, #12]
 80130ba:	e7ca      	b.n	8013052 <__swbuf_r+0x1a>
 80130bc:	4621      	mov	r1, r4
 80130be:	4628      	mov	r0, r5
 80130c0:	f000 f82c 	bl	801311c <__swsetup_r>
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d0cb      	beq.n	8013060 <__swbuf_r+0x28>
 80130c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80130cc:	e7ea      	b.n	80130a4 <__swbuf_r+0x6c>
 80130ce:	bf00      	nop
 80130d0:	08013bec 	.word	0x08013bec
 80130d4:	08013c0c 	.word	0x08013c0c
 80130d8:	08013bcc 	.word	0x08013bcc

080130dc <__ascii_wctomb>:
 80130dc:	b149      	cbz	r1, 80130f2 <__ascii_wctomb+0x16>
 80130de:	2aff      	cmp	r2, #255	; 0xff
 80130e0:	bf85      	ittet	hi
 80130e2:	238a      	movhi	r3, #138	; 0x8a
 80130e4:	6003      	strhi	r3, [r0, #0]
 80130e6:	700a      	strbls	r2, [r1, #0]
 80130e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80130ec:	bf98      	it	ls
 80130ee:	2001      	movls	r0, #1
 80130f0:	4770      	bx	lr
 80130f2:	4608      	mov	r0, r1
 80130f4:	4770      	bx	lr
	...

080130f8 <_write_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	4d07      	ldr	r5, [pc, #28]	; (8013118 <_write_r+0x20>)
 80130fc:	4604      	mov	r4, r0
 80130fe:	4608      	mov	r0, r1
 8013100:	4611      	mov	r1, r2
 8013102:	2200      	movs	r2, #0
 8013104:	602a      	str	r2, [r5, #0]
 8013106:	461a      	mov	r2, r3
 8013108:	f000 fa86 	bl	8013618 <_write>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d102      	bne.n	8013116 <_write_r+0x1e>
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	b103      	cbz	r3, 8013116 <_write_r+0x1e>
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	bd38      	pop	{r3, r4, r5, pc}
 8013118:	2000293c 	.word	0x2000293c

0801311c <__swsetup_r>:
 801311c:	4b32      	ldr	r3, [pc, #200]	; (80131e8 <__swsetup_r+0xcc>)
 801311e:	b570      	push	{r4, r5, r6, lr}
 8013120:	681d      	ldr	r5, [r3, #0]
 8013122:	4606      	mov	r6, r0
 8013124:	460c      	mov	r4, r1
 8013126:	b125      	cbz	r5, 8013132 <__swsetup_r+0x16>
 8013128:	69ab      	ldr	r3, [r5, #24]
 801312a:	b913      	cbnz	r3, 8013132 <__swsetup_r+0x16>
 801312c:	4628      	mov	r0, r5
 801312e:	f7ff f975 	bl	801241c <__sinit>
 8013132:	4b2e      	ldr	r3, [pc, #184]	; (80131ec <__swsetup_r+0xd0>)
 8013134:	429c      	cmp	r4, r3
 8013136:	d10f      	bne.n	8013158 <__swsetup_r+0x3c>
 8013138:	686c      	ldr	r4, [r5, #4]
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013140:	0719      	lsls	r1, r3, #28
 8013142:	d42c      	bmi.n	801319e <__swsetup_r+0x82>
 8013144:	06dd      	lsls	r5, r3, #27
 8013146:	d411      	bmi.n	801316c <__swsetup_r+0x50>
 8013148:	2309      	movs	r3, #9
 801314a:	6033      	str	r3, [r6, #0]
 801314c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013150:	81a3      	strh	r3, [r4, #12]
 8013152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013156:	e03e      	b.n	80131d6 <__swsetup_r+0xba>
 8013158:	4b25      	ldr	r3, [pc, #148]	; (80131f0 <__swsetup_r+0xd4>)
 801315a:	429c      	cmp	r4, r3
 801315c:	d101      	bne.n	8013162 <__swsetup_r+0x46>
 801315e:	68ac      	ldr	r4, [r5, #8]
 8013160:	e7eb      	b.n	801313a <__swsetup_r+0x1e>
 8013162:	4b24      	ldr	r3, [pc, #144]	; (80131f4 <__swsetup_r+0xd8>)
 8013164:	429c      	cmp	r4, r3
 8013166:	bf08      	it	eq
 8013168:	68ec      	ldreq	r4, [r5, #12]
 801316a:	e7e6      	b.n	801313a <__swsetup_r+0x1e>
 801316c:	0758      	lsls	r0, r3, #29
 801316e:	d512      	bpl.n	8013196 <__swsetup_r+0x7a>
 8013170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013172:	b141      	cbz	r1, 8013186 <__swsetup_r+0x6a>
 8013174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013178:	4299      	cmp	r1, r3
 801317a:	d002      	beq.n	8013182 <__swsetup_r+0x66>
 801317c:	4630      	mov	r0, r6
 801317e:	f7fd fceb 	bl	8010b58 <_free_r>
 8013182:	2300      	movs	r3, #0
 8013184:	6363      	str	r3, [r4, #52]	; 0x34
 8013186:	89a3      	ldrh	r3, [r4, #12]
 8013188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801318c:	81a3      	strh	r3, [r4, #12]
 801318e:	2300      	movs	r3, #0
 8013190:	6063      	str	r3, [r4, #4]
 8013192:	6923      	ldr	r3, [r4, #16]
 8013194:	6023      	str	r3, [r4, #0]
 8013196:	89a3      	ldrh	r3, [r4, #12]
 8013198:	f043 0308 	orr.w	r3, r3, #8
 801319c:	81a3      	strh	r3, [r4, #12]
 801319e:	6923      	ldr	r3, [r4, #16]
 80131a0:	b94b      	cbnz	r3, 80131b6 <__swsetup_r+0x9a>
 80131a2:	89a3      	ldrh	r3, [r4, #12]
 80131a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80131a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131ac:	d003      	beq.n	80131b6 <__swsetup_r+0x9a>
 80131ae:	4621      	mov	r1, r4
 80131b0:	4630      	mov	r0, r6
 80131b2:	f000 f933 	bl	801341c <__smakebuf_r>
 80131b6:	89a0      	ldrh	r0, [r4, #12]
 80131b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131bc:	f010 0301 	ands.w	r3, r0, #1
 80131c0:	d00a      	beq.n	80131d8 <__swsetup_r+0xbc>
 80131c2:	2300      	movs	r3, #0
 80131c4:	60a3      	str	r3, [r4, #8]
 80131c6:	6963      	ldr	r3, [r4, #20]
 80131c8:	425b      	negs	r3, r3
 80131ca:	61a3      	str	r3, [r4, #24]
 80131cc:	6923      	ldr	r3, [r4, #16]
 80131ce:	b943      	cbnz	r3, 80131e2 <__swsetup_r+0xc6>
 80131d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131d4:	d1ba      	bne.n	801314c <__swsetup_r+0x30>
 80131d6:	bd70      	pop	{r4, r5, r6, pc}
 80131d8:	0781      	lsls	r1, r0, #30
 80131da:	bf58      	it	pl
 80131dc:	6963      	ldrpl	r3, [r4, #20]
 80131de:	60a3      	str	r3, [r4, #8]
 80131e0:	e7f4      	b.n	80131cc <__swsetup_r+0xb0>
 80131e2:	2000      	movs	r0, #0
 80131e4:	e7f7      	b.n	80131d6 <__swsetup_r+0xba>
 80131e6:	bf00      	nop
 80131e8:	20000100 	.word	0x20000100
 80131ec:	08013bec 	.word	0x08013bec
 80131f0:	08013c0c 	.word	0x08013c0c
 80131f4:	08013bcc 	.word	0x08013bcc

080131f8 <abort>:
 80131f8:	b508      	push	{r3, lr}
 80131fa:	2006      	movs	r0, #6
 80131fc:	f000 f988 	bl	8013510 <raise>
 8013200:	2001      	movs	r0, #1
 8013202:	f000 fa11 	bl	8013628 <_exit>
	...

08013208 <_close_r>:
 8013208:	b538      	push	{r3, r4, r5, lr}
 801320a:	4d06      	ldr	r5, [pc, #24]	; (8013224 <_close_r+0x1c>)
 801320c:	2300      	movs	r3, #0
 801320e:	4604      	mov	r4, r0
 8013210:	4608      	mov	r0, r1
 8013212:	602b      	str	r3, [r5, #0]
 8013214:	f000 f9ba 	bl	801358c <_close>
 8013218:	1c43      	adds	r3, r0, #1
 801321a:	d102      	bne.n	8013222 <_close_r+0x1a>
 801321c:	682b      	ldr	r3, [r5, #0]
 801321e:	b103      	cbz	r3, 8013222 <_close_r+0x1a>
 8013220:	6023      	str	r3, [r4, #0]
 8013222:	bd38      	pop	{r3, r4, r5, pc}
 8013224:	2000293c 	.word	0x2000293c

08013228 <__sflush_r>:
 8013228:	898a      	ldrh	r2, [r1, #12]
 801322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801322e:	4605      	mov	r5, r0
 8013230:	0710      	lsls	r0, r2, #28
 8013232:	460c      	mov	r4, r1
 8013234:	d458      	bmi.n	80132e8 <__sflush_r+0xc0>
 8013236:	684b      	ldr	r3, [r1, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	dc05      	bgt.n	8013248 <__sflush_r+0x20>
 801323c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801323e:	2b00      	cmp	r3, #0
 8013240:	dc02      	bgt.n	8013248 <__sflush_r+0x20>
 8013242:	2000      	movs	r0, #0
 8013244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801324a:	2e00      	cmp	r6, #0
 801324c:	d0f9      	beq.n	8013242 <__sflush_r+0x1a>
 801324e:	2300      	movs	r3, #0
 8013250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013254:	682f      	ldr	r7, [r5, #0]
 8013256:	602b      	str	r3, [r5, #0]
 8013258:	d032      	beq.n	80132c0 <__sflush_r+0x98>
 801325a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801325c:	89a3      	ldrh	r3, [r4, #12]
 801325e:	075a      	lsls	r2, r3, #29
 8013260:	d505      	bpl.n	801326e <__sflush_r+0x46>
 8013262:	6863      	ldr	r3, [r4, #4]
 8013264:	1ac0      	subs	r0, r0, r3
 8013266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013268:	b10b      	cbz	r3, 801326e <__sflush_r+0x46>
 801326a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801326c:	1ac0      	subs	r0, r0, r3
 801326e:	2300      	movs	r3, #0
 8013270:	4602      	mov	r2, r0
 8013272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013274:	6a21      	ldr	r1, [r4, #32]
 8013276:	4628      	mov	r0, r5
 8013278:	47b0      	blx	r6
 801327a:	1c43      	adds	r3, r0, #1
 801327c:	89a3      	ldrh	r3, [r4, #12]
 801327e:	d106      	bne.n	801328e <__sflush_r+0x66>
 8013280:	6829      	ldr	r1, [r5, #0]
 8013282:	291d      	cmp	r1, #29
 8013284:	d82c      	bhi.n	80132e0 <__sflush_r+0xb8>
 8013286:	4a2a      	ldr	r2, [pc, #168]	; (8013330 <__sflush_r+0x108>)
 8013288:	40ca      	lsrs	r2, r1
 801328a:	07d6      	lsls	r6, r2, #31
 801328c:	d528      	bpl.n	80132e0 <__sflush_r+0xb8>
 801328e:	2200      	movs	r2, #0
 8013290:	6062      	str	r2, [r4, #4]
 8013292:	04d9      	lsls	r1, r3, #19
 8013294:	6922      	ldr	r2, [r4, #16]
 8013296:	6022      	str	r2, [r4, #0]
 8013298:	d504      	bpl.n	80132a4 <__sflush_r+0x7c>
 801329a:	1c42      	adds	r2, r0, #1
 801329c:	d101      	bne.n	80132a2 <__sflush_r+0x7a>
 801329e:	682b      	ldr	r3, [r5, #0]
 80132a0:	b903      	cbnz	r3, 80132a4 <__sflush_r+0x7c>
 80132a2:	6560      	str	r0, [r4, #84]	; 0x54
 80132a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132a6:	602f      	str	r7, [r5, #0]
 80132a8:	2900      	cmp	r1, #0
 80132aa:	d0ca      	beq.n	8013242 <__sflush_r+0x1a>
 80132ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132b0:	4299      	cmp	r1, r3
 80132b2:	d002      	beq.n	80132ba <__sflush_r+0x92>
 80132b4:	4628      	mov	r0, r5
 80132b6:	f7fd fc4f 	bl	8010b58 <_free_r>
 80132ba:	2000      	movs	r0, #0
 80132bc:	6360      	str	r0, [r4, #52]	; 0x34
 80132be:	e7c1      	b.n	8013244 <__sflush_r+0x1c>
 80132c0:	6a21      	ldr	r1, [r4, #32]
 80132c2:	2301      	movs	r3, #1
 80132c4:	4628      	mov	r0, r5
 80132c6:	47b0      	blx	r6
 80132c8:	1c41      	adds	r1, r0, #1
 80132ca:	d1c7      	bne.n	801325c <__sflush_r+0x34>
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0c4      	beq.n	801325c <__sflush_r+0x34>
 80132d2:	2b1d      	cmp	r3, #29
 80132d4:	d001      	beq.n	80132da <__sflush_r+0xb2>
 80132d6:	2b16      	cmp	r3, #22
 80132d8:	d101      	bne.n	80132de <__sflush_r+0xb6>
 80132da:	602f      	str	r7, [r5, #0]
 80132dc:	e7b1      	b.n	8013242 <__sflush_r+0x1a>
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132e4:	81a3      	strh	r3, [r4, #12]
 80132e6:	e7ad      	b.n	8013244 <__sflush_r+0x1c>
 80132e8:	690f      	ldr	r7, [r1, #16]
 80132ea:	2f00      	cmp	r7, #0
 80132ec:	d0a9      	beq.n	8013242 <__sflush_r+0x1a>
 80132ee:	0793      	lsls	r3, r2, #30
 80132f0:	680e      	ldr	r6, [r1, #0]
 80132f2:	bf08      	it	eq
 80132f4:	694b      	ldreq	r3, [r1, #20]
 80132f6:	600f      	str	r7, [r1, #0]
 80132f8:	bf18      	it	ne
 80132fa:	2300      	movne	r3, #0
 80132fc:	eba6 0807 	sub.w	r8, r6, r7
 8013300:	608b      	str	r3, [r1, #8]
 8013302:	f1b8 0f00 	cmp.w	r8, #0
 8013306:	dd9c      	ble.n	8013242 <__sflush_r+0x1a>
 8013308:	6a21      	ldr	r1, [r4, #32]
 801330a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801330c:	4643      	mov	r3, r8
 801330e:	463a      	mov	r2, r7
 8013310:	4628      	mov	r0, r5
 8013312:	47b0      	blx	r6
 8013314:	2800      	cmp	r0, #0
 8013316:	dc06      	bgt.n	8013326 <__sflush_r+0xfe>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801331e:	81a3      	strh	r3, [r4, #12]
 8013320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013324:	e78e      	b.n	8013244 <__sflush_r+0x1c>
 8013326:	4407      	add	r7, r0
 8013328:	eba8 0800 	sub.w	r8, r8, r0
 801332c:	e7e9      	b.n	8013302 <__sflush_r+0xda>
 801332e:	bf00      	nop
 8013330:	20400001 	.word	0x20400001

08013334 <_fflush_r>:
 8013334:	b538      	push	{r3, r4, r5, lr}
 8013336:	690b      	ldr	r3, [r1, #16]
 8013338:	4605      	mov	r5, r0
 801333a:	460c      	mov	r4, r1
 801333c:	b913      	cbnz	r3, 8013344 <_fflush_r+0x10>
 801333e:	2500      	movs	r5, #0
 8013340:	4628      	mov	r0, r5
 8013342:	bd38      	pop	{r3, r4, r5, pc}
 8013344:	b118      	cbz	r0, 801334e <_fflush_r+0x1a>
 8013346:	6983      	ldr	r3, [r0, #24]
 8013348:	b90b      	cbnz	r3, 801334e <_fflush_r+0x1a>
 801334a:	f7ff f867 	bl	801241c <__sinit>
 801334e:	4b14      	ldr	r3, [pc, #80]	; (80133a0 <_fflush_r+0x6c>)
 8013350:	429c      	cmp	r4, r3
 8013352:	d11b      	bne.n	801338c <_fflush_r+0x58>
 8013354:	686c      	ldr	r4, [r5, #4]
 8013356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d0ef      	beq.n	801333e <_fflush_r+0xa>
 801335e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013360:	07d0      	lsls	r0, r2, #31
 8013362:	d404      	bmi.n	801336e <_fflush_r+0x3a>
 8013364:	0599      	lsls	r1, r3, #22
 8013366:	d402      	bmi.n	801336e <_fflush_r+0x3a>
 8013368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801336a:	f7ff f90c 	bl	8012586 <__retarget_lock_acquire_recursive>
 801336e:	4628      	mov	r0, r5
 8013370:	4621      	mov	r1, r4
 8013372:	f7ff ff59 	bl	8013228 <__sflush_r>
 8013376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013378:	07da      	lsls	r2, r3, #31
 801337a:	4605      	mov	r5, r0
 801337c:	d4e0      	bmi.n	8013340 <_fflush_r+0xc>
 801337e:	89a3      	ldrh	r3, [r4, #12]
 8013380:	059b      	lsls	r3, r3, #22
 8013382:	d4dd      	bmi.n	8013340 <_fflush_r+0xc>
 8013384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013386:	f7ff f8ff 	bl	8012588 <__retarget_lock_release_recursive>
 801338a:	e7d9      	b.n	8013340 <_fflush_r+0xc>
 801338c:	4b05      	ldr	r3, [pc, #20]	; (80133a4 <_fflush_r+0x70>)
 801338e:	429c      	cmp	r4, r3
 8013390:	d101      	bne.n	8013396 <_fflush_r+0x62>
 8013392:	68ac      	ldr	r4, [r5, #8]
 8013394:	e7df      	b.n	8013356 <_fflush_r+0x22>
 8013396:	4b04      	ldr	r3, [pc, #16]	; (80133a8 <_fflush_r+0x74>)
 8013398:	429c      	cmp	r4, r3
 801339a:	bf08      	it	eq
 801339c:	68ec      	ldreq	r4, [r5, #12]
 801339e:	e7da      	b.n	8013356 <_fflush_r+0x22>
 80133a0:	08013bec 	.word	0x08013bec
 80133a4:	08013c0c 	.word	0x08013c0c
 80133a8:	08013bcc 	.word	0x08013bcc

080133ac <_lseek_r>:
 80133ac:	b538      	push	{r3, r4, r5, lr}
 80133ae:	4d07      	ldr	r5, [pc, #28]	; (80133cc <_lseek_r+0x20>)
 80133b0:	4604      	mov	r4, r0
 80133b2:	4608      	mov	r0, r1
 80133b4:	4611      	mov	r1, r2
 80133b6:	2200      	movs	r2, #0
 80133b8:	602a      	str	r2, [r5, #0]
 80133ba:	461a      	mov	r2, r3
 80133bc:	f000 f90e 	bl	80135dc <_lseek>
 80133c0:	1c43      	adds	r3, r0, #1
 80133c2:	d102      	bne.n	80133ca <_lseek_r+0x1e>
 80133c4:	682b      	ldr	r3, [r5, #0]
 80133c6:	b103      	cbz	r3, 80133ca <_lseek_r+0x1e>
 80133c8:	6023      	str	r3, [r4, #0]
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
 80133cc:	2000293c 	.word	0x2000293c

080133d0 <__swhatbuf_r>:
 80133d0:	b570      	push	{r4, r5, r6, lr}
 80133d2:	460e      	mov	r6, r1
 80133d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d8:	2900      	cmp	r1, #0
 80133da:	b096      	sub	sp, #88	; 0x58
 80133dc:	4614      	mov	r4, r2
 80133de:	461d      	mov	r5, r3
 80133e0:	da08      	bge.n	80133f4 <__swhatbuf_r+0x24>
 80133e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80133e6:	2200      	movs	r2, #0
 80133e8:	602a      	str	r2, [r5, #0]
 80133ea:	061a      	lsls	r2, r3, #24
 80133ec:	d410      	bmi.n	8013410 <__swhatbuf_r+0x40>
 80133ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133f2:	e00e      	b.n	8013412 <__swhatbuf_r+0x42>
 80133f4:	466a      	mov	r2, sp
 80133f6:	f000 f8a7 	bl	8013548 <_fstat_r>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	dbf1      	blt.n	80133e2 <__swhatbuf_r+0x12>
 80133fe:	9a01      	ldr	r2, [sp, #4]
 8013400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013408:	425a      	negs	r2, r3
 801340a:	415a      	adcs	r2, r3
 801340c:	602a      	str	r2, [r5, #0]
 801340e:	e7ee      	b.n	80133ee <__swhatbuf_r+0x1e>
 8013410:	2340      	movs	r3, #64	; 0x40
 8013412:	2000      	movs	r0, #0
 8013414:	6023      	str	r3, [r4, #0]
 8013416:	b016      	add	sp, #88	; 0x58
 8013418:	bd70      	pop	{r4, r5, r6, pc}
	...

0801341c <__smakebuf_r>:
 801341c:	898b      	ldrh	r3, [r1, #12]
 801341e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013420:	079d      	lsls	r5, r3, #30
 8013422:	4606      	mov	r6, r0
 8013424:	460c      	mov	r4, r1
 8013426:	d507      	bpl.n	8013438 <__smakebuf_r+0x1c>
 8013428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	6123      	str	r3, [r4, #16]
 8013430:	2301      	movs	r3, #1
 8013432:	6163      	str	r3, [r4, #20]
 8013434:	b002      	add	sp, #8
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	ab01      	add	r3, sp, #4
 801343a:	466a      	mov	r2, sp
 801343c:	f7ff ffc8 	bl	80133d0 <__swhatbuf_r>
 8013440:	9900      	ldr	r1, [sp, #0]
 8013442:	4605      	mov	r5, r0
 8013444:	4630      	mov	r0, r6
 8013446:	f7fd fbf3 	bl	8010c30 <_malloc_r>
 801344a:	b948      	cbnz	r0, 8013460 <__smakebuf_r+0x44>
 801344c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013450:	059a      	lsls	r2, r3, #22
 8013452:	d4ef      	bmi.n	8013434 <__smakebuf_r+0x18>
 8013454:	f023 0303 	bic.w	r3, r3, #3
 8013458:	f043 0302 	orr.w	r3, r3, #2
 801345c:	81a3      	strh	r3, [r4, #12]
 801345e:	e7e3      	b.n	8013428 <__smakebuf_r+0xc>
 8013460:	4b0d      	ldr	r3, [pc, #52]	; (8013498 <__smakebuf_r+0x7c>)
 8013462:	62b3      	str	r3, [r6, #40]	; 0x28
 8013464:	89a3      	ldrh	r3, [r4, #12]
 8013466:	6020      	str	r0, [r4, #0]
 8013468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801346c:	81a3      	strh	r3, [r4, #12]
 801346e:	9b00      	ldr	r3, [sp, #0]
 8013470:	6163      	str	r3, [r4, #20]
 8013472:	9b01      	ldr	r3, [sp, #4]
 8013474:	6120      	str	r0, [r4, #16]
 8013476:	b15b      	cbz	r3, 8013490 <__smakebuf_r+0x74>
 8013478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801347c:	4630      	mov	r0, r6
 801347e:	f000 f875 	bl	801356c <_isatty_r>
 8013482:	b128      	cbz	r0, 8013490 <__smakebuf_r+0x74>
 8013484:	89a3      	ldrh	r3, [r4, #12]
 8013486:	f023 0303 	bic.w	r3, r3, #3
 801348a:	f043 0301 	orr.w	r3, r3, #1
 801348e:	81a3      	strh	r3, [r4, #12]
 8013490:	89a0      	ldrh	r0, [r4, #12]
 8013492:	4305      	orrs	r5, r0
 8013494:	81a5      	strh	r5, [r4, #12]
 8013496:	e7cd      	b.n	8013434 <__smakebuf_r+0x18>
 8013498:	080123b5 	.word	0x080123b5

0801349c <_read_r>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4d07      	ldr	r5, [pc, #28]	; (80134bc <_read_r+0x20>)
 80134a0:	4604      	mov	r4, r0
 80134a2:	4608      	mov	r0, r1
 80134a4:	4611      	mov	r1, r2
 80134a6:	2200      	movs	r2, #0
 80134a8:	602a      	str	r2, [r5, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f000 f89e 	bl	80135ec <_read>
 80134b0:	1c43      	adds	r3, r0, #1
 80134b2:	d102      	bne.n	80134ba <_read_r+0x1e>
 80134b4:	682b      	ldr	r3, [r5, #0]
 80134b6:	b103      	cbz	r3, 80134ba <_read_r+0x1e>
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	bd38      	pop	{r3, r4, r5, pc}
 80134bc:	2000293c 	.word	0x2000293c

080134c0 <_raise_r>:
 80134c0:	291f      	cmp	r1, #31
 80134c2:	b538      	push	{r3, r4, r5, lr}
 80134c4:	4604      	mov	r4, r0
 80134c6:	460d      	mov	r5, r1
 80134c8:	d904      	bls.n	80134d4 <_raise_r+0x14>
 80134ca:	2316      	movs	r3, #22
 80134cc:	6003      	str	r3, [r0, #0]
 80134ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134d2:	bd38      	pop	{r3, r4, r5, pc}
 80134d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80134d6:	b112      	cbz	r2, 80134de <_raise_r+0x1e>
 80134d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134dc:	b94b      	cbnz	r3, 80134f2 <_raise_r+0x32>
 80134de:	4620      	mov	r0, r4
 80134e0:	f000 f830 	bl	8013544 <_getpid_r>
 80134e4:	462a      	mov	r2, r5
 80134e6:	4601      	mov	r1, r0
 80134e8:	4620      	mov	r0, r4
 80134ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134ee:	f000 b817 	b.w	8013520 <_kill_r>
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d00a      	beq.n	801350c <_raise_r+0x4c>
 80134f6:	1c59      	adds	r1, r3, #1
 80134f8:	d103      	bne.n	8013502 <_raise_r+0x42>
 80134fa:	2316      	movs	r3, #22
 80134fc:	6003      	str	r3, [r0, #0]
 80134fe:	2001      	movs	r0, #1
 8013500:	e7e7      	b.n	80134d2 <_raise_r+0x12>
 8013502:	2400      	movs	r4, #0
 8013504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013508:	4628      	mov	r0, r5
 801350a:	4798      	blx	r3
 801350c:	2000      	movs	r0, #0
 801350e:	e7e0      	b.n	80134d2 <_raise_r+0x12>

08013510 <raise>:
 8013510:	4b02      	ldr	r3, [pc, #8]	; (801351c <raise+0xc>)
 8013512:	4601      	mov	r1, r0
 8013514:	6818      	ldr	r0, [r3, #0]
 8013516:	f7ff bfd3 	b.w	80134c0 <_raise_r>
 801351a:	bf00      	nop
 801351c:	20000100 	.word	0x20000100

08013520 <_kill_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4d07      	ldr	r5, [pc, #28]	; (8013540 <_kill_r+0x20>)
 8013524:	2300      	movs	r3, #0
 8013526:	4604      	mov	r4, r0
 8013528:	4608      	mov	r0, r1
 801352a:	4611      	mov	r1, r2
 801352c:	602b      	str	r3, [r5, #0]
 801352e:	f000 f84d 	bl	80135cc <_kill>
 8013532:	1c43      	adds	r3, r0, #1
 8013534:	d102      	bne.n	801353c <_kill_r+0x1c>
 8013536:	682b      	ldr	r3, [r5, #0]
 8013538:	b103      	cbz	r3, 801353c <_kill_r+0x1c>
 801353a:	6023      	str	r3, [r4, #0]
 801353c:	bd38      	pop	{r3, r4, r5, pc}
 801353e:	bf00      	nop
 8013540:	2000293c 	.word	0x2000293c

08013544 <_getpid_r>:
 8013544:	f000 b832 	b.w	80135ac <_getpid>

08013548 <_fstat_r>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	4d07      	ldr	r5, [pc, #28]	; (8013568 <_fstat_r+0x20>)
 801354c:	2300      	movs	r3, #0
 801354e:	4604      	mov	r4, r0
 8013550:	4608      	mov	r0, r1
 8013552:	4611      	mov	r1, r2
 8013554:	602b      	str	r3, [r5, #0]
 8013556:	f000 f821 	bl	801359c <_fstat>
 801355a:	1c43      	adds	r3, r0, #1
 801355c:	d102      	bne.n	8013564 <_fstat_r+0x1c>
 801355e:	682b      	ldr	r3, [r5, #0]
 8013560:	b103      	cbz	r3, 8013564 <_fstat_r+0x1c>
 8013562:	6023      	str	r3, [r4, #0]
 8013564:	bd38      	pop	{r3, r4, r5, pc}
 8013566:	bf00      	nop
 8013568:	2000293c 	.word	0x2000293c

0801356c <_isatty_r>:
 801356c:	b538      	push	{r3, r4, r5, lr}
 801356e:	4d06      	ldr	r5, [pc, #24]	; (8013588 <_isatty_r+0x1c>)
 8013570:	2300      	movs	r3, #0
 8013572:	4604      	mov	r4, r0
 8013574:	4608      	mov	r0, r1
 8013576:	602b      	str	r3, [r5, #0]
 8013578:	f000 f820 	bl	80135bc <_isatty>
 801357c:	1c43      	adds	r3, r0, #1
 801357e:	d102      	bne.n	8013586 <_isatty_r+0x1a>
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	b103      	cbz	r3, 8013586 <_isatty_r+0x1a>
 8013584:	6023      	str	r3, [r4, #0]
 8013586:	bd38      	pop	{r3, r4, r5, pc}
 8013588:	2000293c 	.word	0x2000293c

0801358c <_close>:
 801358c:	4b02      	ldr	r3, [pc, #8]	; (8013598 <_close+0xc>)
 801358e:	2258      	movs	r2, #88	; 0x58
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013596:	4770      	bx	lr
 8013598:	2000293c 	.word	0x2000293c

0801359c <_fstat>:
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <_fstat+0xc>)
 801359e:	2258      	movs	r2, #88	; 0x58
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135a6:	4770      	bx	lr
 80135a8:	2000293c 	.word	0x2000293c

080135ac <_getpid>:
 80135ac:	4b02      	ldr	r3, [pc, #8]	; (80135b8 <_getpid+0xc>)
 80135ae:	2258      	movs	r2, #88	; 0x58
 80135b0:	601a      	str	r2, [r3, #0]
 80135b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135b6:	4770      	bx	lr
 80135b8:	2000293c 	.word	0x2000293c

080135bc <_isatty>:
 80135bc:	4b02      	ldr	r3, [pc, #8]	; (80135c8 <_isatty+0xc>)
 80135be:	2258      	movs	r2, #88	; 0x58
 80135c0:	601a      	str	r2, [r3, #0]
 80135c2:	2000      	movs	r0, #0
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop
 80135c8:	2000293c 	.word	0x2000293c

080135cc <_kill>:
 80135cc:	4b02      	ldr	r3, [pc, #8]	; (80135d8 <_kill+0xc>)
 80135ce:	2258      	movs	r2, #88	; 0x58
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135d6:	4770      	bx	lr
 80135d8:	2000293c 	.word	0x2000293c

080135dc <_lseek>:
 80135dc:	4b02      	ldr	r3, [pc, #8]	; (80135e8 <_lseek+0xc>)
 80135de:	2258      	movs	r2, #88	; 0x58
 80135e0:	601a      	str	r2, [r3, #0]
 80135e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135e6:	4770      	bx	lr
 80135e8:	2000293c 	.word	0x2000293c

080135ec <_read>:
 80135ec:	4b02      	ldr	r3, [pc, #8]	; (80135f8 <_read+0xc>)
 80135ee:	2258      	movs	r2, #88	; 0x58
 80135f0:	601a      	str	r2, [r3, #0]
 80135f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135f6:	4770      	bx	lr
 80135f8:	2000293c 	.word	0x2000293c

080135fc <_sbrk>:
 80135fc:	4a04      	ldr	r2, [pc, #16]	; (8013610 <_sbrk+0x14>)
 80135fe:	6811      	ldr	r1, [r2, #0]
 8013600:	4603      	mov	r3, r0
 8013602:	b909      	cbnz	r1, 8013608 <_sbrk+0xc>
 8013604:	4903      	ldr	r1, [pc, #12]	; (8013614 <_sbrk+0x18>)
 8013606:	6011      	str	r1, [r2, #0]
 8013608:	6810      	ldr	r0, [r2, #0]
 801360a:	4403      	add	r3, r0
 801360c:	6013      	str	r3, [r2, #0]
 801360e:	4770      	bx	lr
 8013610:	20002940 	.word	0x20002940
 8013614:	20002948 	.word	0x20002948

08013618 <_write>:
 8013618:	4b02      	ldr	r3, [pc, #8]	; (8013624 <_write+0xc>)
 801361a:	2258      	movs	r2, #88	; 0x58
 801361c:	601a      	str	r2, [r3, #0]
 801361e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013622:	4770      	bx	lr
 8013624:	2000293c 	.word	0x2000293c

08013628 <_exit>:
 8013628:	e7fe      	b.n	8013628 <_exit>
	...

0801362c <_init>:
 801362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362e:	bf00      	nop
 8013630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013632:	bc08      	pop	{r3}
 8013634:	469e      	mov	lr, r3
 8013636:	4770      	bx	lr

08013638 <_fini>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	bf00      	nop
 801363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801363e:	bc08      	pop	{r3}
 8013640:	469e      	mov	lr, r3
 8013642:	4770      	bx	lr
