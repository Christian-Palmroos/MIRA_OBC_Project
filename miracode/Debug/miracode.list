
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ff8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080151b8  080151b8  000251b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015530  08015530  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08015530  08015530  00025530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015538  08015538  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015538  08015538  00025538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801553c  0801553c  0002553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08015540  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b54  200001e4  08015724  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002d38  08015724  00032d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff9b  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c9d  00000000  00000000  000601af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002608  00000000  00000000  00065e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c0  00000000  00000000  00068458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000337fb  00000000  00000000  0006a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031aa2  00000000  00000000  0009e013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e6e9  00000000  00000000  000cfab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ee19e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac78  00000000  00000000  001ee1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001f8e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001f8f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080151a0 	.word	0x080151a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	080151a0 	.word	0x080151a0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 b974 	b.w	8000f3c <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	4604      	mov	r4, r0
 8000c74:	468e      	mov	lr, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14d      	bne.n	8000d16 <__udivmoddi4+0xaa>
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	4694      	mov	ip, r2
 8000c7e:	d969      	bls.n	8000d54 <__udivmoddi4+0xe8>
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	b152      	cbz	r2, 8000c9c <__udivmoddi4+0x30>
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	f1c2 0120 	rsb	r1, r2, #32
 8000c8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c96:	ea41 0e03 	orr.w	lr, r1, r3
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	0c21      	lsrs	r1, r4, #16
 8000ca2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca6:	fa1f f78c 	uxth.w	r7, ip
 8000caa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb2:	fb06 f107 	mul.w	r1, r6, r7
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x64>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 811f 	bcs.w	8000f04 <__udivmoddi4+0x298>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 811c 	bls.w	8000f04 <__udivmoddi4+0x298>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb00 f707 	mul.w	r7, r0, r7
 8000ce4:	42a7      	cmp	r7, r4
 8000ce6:	d90a      	bls.n	8000cfe <__udivmoddi4+0x92>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf0:	f080 810a 	bcs.w	8000f08 <__udivmoddi4+0x29c>
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	f240 8107 	bls.w	8000f08 <__udivmoddi4+0x29c>
 8000cfa:	4464      	add	r4, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d02:	1be4      	subs	r4, r4, r7
 8000d04:	2600      	movs	r6, #0
 8000d06:	b11d      	cbz	r5, 8000d10 <__udivmoddi4+0xa4>
 8000d08:	40d4      	lsrs	r4, r2
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xc2>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80ef 	beq.w	8000efe <__udivmoddi4+0x292>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x160>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd4>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80f9 	bhi.w	8000f32 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469e      	mov	lr, r3
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa4>
 8000d4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xec>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 8092 	bne.w	8000e86 <__udivmoddi4+0x21a>
 8000d62:	eba1 010c 	sub.w	r1, r1, ip
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f fe8c 	uxth.w	lr, ip
 8000d6e:	2601      	movs	r6, #1
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d76:	fb07 1113 	mls	r1, r7, r3, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb0e f003 	mul.w	r0, lr, r3
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x12c>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x12a>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f200 80cb 	bhi.w	8000f2c <__udivmoddi4+0x2c0>
 8000d96:	4643      	mov	r3, r8
 8000d98:	1a09      	subs	r1, r1, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1110 	mls	r1, r7, r0, r1
 8000da4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x156>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x154>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f200 80bb 	bhi.w	8000f36 <__udivmoddi4+0x2ca>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	eba4 040e 	sub.w	r4, r4, lr
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	e79c      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000dcc:	f1c6 0720 	rsb	r7, r6, #32
 8000dd0:	40b3      	lsls	r3, r6
 8000dd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dda:	fa20 f407 	lsr.w	r4, r0, r7
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	431c      	orrs	r4, r3
 8000de4:	40f9      	lsrs	r1, r7
 8000de6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dea:	fa00 f306 	lsl.w	r3, r0, r6
 8000dee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000df2:	0c20      	lsrs	r0, r4, #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e00:	fb08 f00e 	mul.w	r0, r8, lr
 8000e04:	4288      	cmp	r0, r1
 8000e06:	fa02 f206 	lsl.w	r2, r2, r6
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x1b8>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e14:	f080 8088 	bcs.w	8000f28 <__udivmoddi4+0x2bc>
 8000e18:	4288      	cmp	r0, r1
 8000e1a:	f240 8085 	bls.w	8000f28 <__udivmoddi4+0x2bc>
 8000e1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	458e      	cmp	lr, r1
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x1e2>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e44:	d26c      	bcs.n	8000f20 <__udivmoddi4+0x2b4>
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d96a      	bls.n	8000f20 <__udivmoddi4+0x2b4>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4461      	add	r1, ip
 8000e4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e52:	fba0 9402 	umull	r9, r4, r0, r2
 8000e56:	eba1 010e 	sub.w	r1, r1, lr
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	46c8      	mov	r8, r9
 8000e5e:	46a6      	mov	lr, r4
 8000e60:	d356      	bcc.n	8000f10 <__udivmoddi4+0x2a4>
 8000e62:	d053      	beq.n	8000f0c <__udivmoddi4+0x2a0>
 8000e64:	b15d      	cbz	r5, 8000e7e <__udivmoddi4+0x212>
 8000e66:	ebb3 0208 	subs.w	r2, r3, r8
 8000e6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e72:	fa22 f306 	lsr.w	r3, r2, r6
 8000e76:	40f1      	lsrs	r1, r6
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7e:	2600      	movs	r6, #0
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	f1c2 0320 	rsb	r3, r2, #32
 8000e8a:	40d8      	lsrs	r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	fa21 f303 	lsr.w	r3, r1, r3
 8000e94:	4091      	lsls	r1, r2
 8000e96:	4301      	orrs	r1, r0
 8000e98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea8:	0c0b      	lsrs	r3, r1, #16
 8000eaa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eae:	fb00 f60e 	mul.w	r6, r0, lr
 8000eb2:	429e      	cmp	r6, r3
 8000eb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x260>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec2:	d22f      	bcs.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d92d      	bls.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	b289      	uxth	r1, r1
 8000ed0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000edc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x28a>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000eec:	d216      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d914      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ef2:	3e02      	subs	r6, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000efc:	e738      	b.n	8000d70 <__udivmoddi4+0x104>
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e705      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e3      	b.n	8000cd0 <__udivmoddi4+0x64>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6f8      	b.n	8000cfe <__udivmoddi4+0x92>
 8000f0c:	454b      	cmp	r3, r9
 8000f0e:	d2a9      	bcs.n	8000e64 <__udivmoddi4+0x1f8>
 8000f10:	ebb9 0802 	subs.w	r8, r9, r2
 8000f14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7a3      	b.n	8000e64 <__udivmoddi4+0x1f8>
 8000f1c:	4646      	mov	r6, r8
 8000f1e:	e7ea      	b.n	8000ef6 <__udivmoddi4+0x28a>
 8000f20:	4620      	mov	r0, r4
 8000f22:	e794      	b.n	8000e4e <__udivmoddi4+0x1e2>
 8000f24:	4640      	mov	r0, r8
 8000f26:	e7d1      	b.n	8000ecc <__udivmoddi4+0x260>
 8000f28:	46d0      	mov	r8, sl
 8000f2a:	e77b      	b.n	8000e24 <__udivmoddi4+0x1b8>
 8000f2c:	3b02      	subs	r3, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	e732      	b.n	8000d98 <__udivmoddi4+0x12c>
 8000f32:	4630      	mov	r0, r6
 8000f34:	e709      	b.n	8000d4a <__udivmoddi4+0xde>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	e742      	b.n	8000dc2 <__udivmoddi4+0x156>

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 fbe0 	bl	8002712 <null_ptr_check>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d13a      	bne.n	8000fd4 <bmp3_init+0x94>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d003      	beq.n	8000f6e <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	729a      	strb	r2, [r3, #10]
 8000f6c:	e002      	b.n	8000f74 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	729a      	strb	r2, [r3, #10]
        }


	/* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000f74:	f107 010e 	add.w	r1, r7, #14
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f82f 	bl	8000fe0 <bmp3_get_regs>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000f86:	f107 010e 	add.w	r1, r7, #14
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f826 	bl	8000fe0 <bmp3_get_regs>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d119      	bne.n	8000fd4 <bmp3_init+0x94>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b50      	cmp	r3, #80	; 0x50
 8000fa4:	d002      	beq.n	8000fac <bmp3_init+0x6c>
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b60      	cmp	r3, #96	; 0x60
 8000faa:	d111      	bne.n	8000fd0 <bmp3_init+0x90>
            {
                dev->chip_id = chip_id;
 8000fac:	7bba      	ldrb	r2, [r7, #14]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f9ae 	bl	8001314 <bmp3_soft_reset>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <bmp3_init+0x94>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fb4e 	bl	8001666 <get_calib_data>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fce:	e001      	b.n	8000fd4 <bmp3_init+0x94>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000fd0:	23f9      	movs	r3, #249	; 0xf9
 8000fd2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fe4:	b08b      	sub	sp, #44	; 0x2c
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f001 fb8d 	bl	8002712 <null_ptr_check>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8000ffe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001002:	2b00      	cmp	r3, #0
 8001004:	d172      	bne.n	80010ec <bmp3_get_regs+0x10c>
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06f      	beq.n	80010ec <bmp3_get_regs+0x10c>
    {
 800100c:	466b      	mov	r3, sp
 800100e:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	7a9b      	ldrb	r3, [r3, #10]
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	7a9b      	ldrb	r3, [r3, #10]
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	18d1      	adds	r1, r2, r3
 8001026:	460b      	mov	r3, r1
 8001028:	3b01      	subs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	2300      	movs	r3, #0
 800102e:	4688      	mov	r8, r1
 8001030:	4699      	mov	r9, r3
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001046:	2300      	movs	r3, #0
 8001048:	460c      	mov	r4, r1
 800104a:	461d      	mov	r5, r3
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	00eb      	lsls	r3, r5, #3
 8001056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800105a:	00e2      	lsls	r2, r4, #3
 800105c:	1dcb      	adds	r3, r1, #7
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	ebad 0d03 	sub.w	sp, sp, r3
 8001066:	466b      	mov	r3, sp
 8001068:	3300      	adds	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	7a1b      	ldrb	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d025      	beq.n	80010c0 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107a:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68dc      	ldr	r4, [r3, #12]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	7bf8      	ldrb	r0, [r7, #15]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	6979      	ldr	r1, [r7, #20]
 800108a:	47a0      	blx	r4
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	e00d      	b.n	80010b6 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	7a9b      	ldrb	r3, [r3, #10]
 800109e:	461a      	mov	r2, r3
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	441a      	add	r2, r3
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	440b      	add	r3, r1
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	5c8a      	ldrb	r2, [r1, r2]
 80010ae:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	3301      	adds	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
 80010b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d3ed      	bcc.n	800109a <bmp3_get_regs+0xba>
 80010be:	e00b      	b.n	80010d8 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68dc      	ldr	r4, [r3, #12]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	7bf8      	ldrb	r0, [r7, #15]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	47a0      	blx	r4
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80010e2:	23fe      	movs	r3, #254	; 0xfe
 80010e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010e8:	46b5      	mov	sp, r6
    {
 80010ea:	e002      	b.n	80010f2 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 80010f2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	372c      	adds	r7, #44	; 0x2c
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001100 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001104:	b089      	sub	sp, #36	; 0x24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	466b      	mov	r3, sp
 8001112:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	0059      	lsls	r1, r3, #1
 8001118:	460b      	mov	r3, r1
 800111a:	3b01      	subs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	2300      	movs	r3, #0
 8001120:	4688      	mov	r8, r1
 8001122:	4699      	mov	r9, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001138:	2300      	movs	r3, #0
 800113a:	460c      	mov	r4, r1
 800113c:	461d      	mov	r5, r3
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	00eb      	lsls	r3, r5, #3
 8001148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800114c:	00e2      	lsls	r2, r4, #3
 800114e:	1dcb      	adds	r3, r1, #7
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	ebad 0d03 	sub.w	sp, sp, r3
 8001158:	466b      	mov	r3, sp
 800115a:	3300      	adds	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800115e:	6838      	ldr	r0, [r7, #0]
 8001160:	f001 fad7 	bl	8002712 <null_ptr_check>
 8001164:	4603      	mov	r3, r0
 8001166:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001168:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d14c      	bne.n	800120a <bmp3_set_regs+0x10a>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d049      	beq.n	800120a <bmp3_set_regs+0x10a>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d046      	beq.n	800120a <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d040      	beq.n	8001204 <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	7a1b      	ldrb	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d114      	bne.n	80011bc <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001192:	2300      	movs	r3, #0
 8001194:	76bb      	strb	r3, [r7, #26]
 8001196:	e00d      	b.n	80011b4 <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001198:	7ebb      	ldrb	r3, [r7, #26]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	7ebb      	ldrb	r3, [r7, #26]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	440b      	add	r3, r1
 80011a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011ae:	7ebb      	ldrb	r3, [r7, #26]
 80011b0:	3301      	adds	r3, #1
 80011b2:	76bb      	strb	r3, [r7, #26]
 80011b4:	7ebb      	ldrb	r3, [r7, #26]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8ed      	bhi.n	8001198 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d909      	bls.n	80011d6 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	6939      	ldr	r1, [r7, #16]
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f000 fa71 	bl	80016b0 <interleave_reg_addr>
                temp_len = len * 2;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e001      	b.n	80011da <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691c      	ldr	r4, [r3, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	7818      	ldrb	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	6939      	ldr	r1, [r7, #16]
 80011ea:	47a0      	blx	r4
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 80011fe:	23fe      	movs	r3, #254	; 0xfe
 8001200:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001202:	e005      	b.n	8001210 <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8001204:	23fa      	movs	r3, #250	; 0xfa
 8001206:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001208:	e002      	b.n	8001210 <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800120a:	23ff      	movs	r3, #255	; 0xff
 800120c:	76fb      	strb	r3, [r7, #27]
 800120e:	e000      	b.n	8001212 <bmp3_set_regs+0x112>
        if (len != 0)
 8001210:	bf00      	nop
    }

    return rslt;
 8001212:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001216:	46b5      	mov	sp, r6
}
 8001218:	4618      	mov	r0, r3
 800121a:	3724      	adds	r7, #36	; 0x24
 800121c:	46bd      	mov	sp, r7
 800121e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001222 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d03a      	beq.n	80012ae <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	2006      	movs	r0, #6
 800123c:	f001 fa51 	bl	80026e2 <are_settings_changed>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fa96 	bl	800177c <set_pwr_ctrl_settings>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	20f0      	movs	r0, #240	; 0xf0
 8001258:	f001 fa43 	bl	80026e2 <are_settings_changed>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 fad6 	bl	8001818 <set_odr_filter_settings>
 800126c:	4603      	mov	r3, r0
 800126e:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8001270:	68f9      	ldr	r1, [r7, #12]
 8001272:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001276:	f001 fa34 	bl	80026e2 <are_settings_changed>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fb35 	bl	80018f4 <set_int_ctrl_settings>
 800128a:	4603      	mov	r3, r0
 800128c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 800128e:	68f9      	ldr	r1, [r7, #12]
 8001290:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001294:	f001 fa25 	bl	80026e2 <are_settings_changed>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 fba0 	bl	80019e8 <set_advance_settings>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e001      	b.n	80012b2 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012ae:	23ff      	movs	r3, #255	; 0xff
 80012b0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01a      	beq.n	8001304 <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f001 fa42 	bl	800275a <get_sensor_status>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d112      	bne.n	8001308 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 fa7b 	bl	80027e0 <get_int_status>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f001 fa9f 	bl	800283c <get_err_status>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e001      	b.n	8001308 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 800131c:	237e      	movs	r3, #126	; 0x7e
 800131e:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001320:	23b6      	movs	r3, #182	; 0xb6
 8001322:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8001324:	f107 010c 	add.w	r1, r7, #12
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fe57 	bl	8000fe0 <bmp3_get_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02d      	beq.n	800139c <bmp3_soft_reset+0x88>
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d129      	bne.n	800139c <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001348:	f107 010d 	add.w	r1, r7, #13
 800134c:	f107 000e 	add.w	r0, r7, #14
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f7ff fed4 	bl	8001100 <bmp3_set_regs>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11b      	bne.n	800139c <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6852      	ldr	r2, [r2, #4]
 800136c:	4611      	mov	r1, r2
 800136e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001372:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8001374:	f107 010b 	add.w	r1, r7, #11
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff fe2f 	bl	8000fe0 <bmp3_get_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <bmp3_soft_reset+0x84>
 8001390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8001398:	23fc      	movs	r3, #252	; 0xfc
 800139a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f001 f9ad 	bl	8002712 <null_ptr_check>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d139      	bne.n	8001438 <bmp3_set_op_mode+0x90>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d036      	beq.n	8001438 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013d0:	f107 030d 	add.w	r3, r7, #13
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f838 	bl	800144c <bmp3_get_op_mode>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <bmp3_set_op_mode+0x60>
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f000 f8f7 	bl	80015e2 <put_device_to_sleep>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	6852      	ldr	r2, [r2, #4]
 8001400:	4611      	mov	r1, r2
 8001402:	f241 3088 	movw	r0, #5000	; 0x1388
 8001406:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d116      	bne.n	800143e <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d106      	bne.n	8001424 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f879 	bl	8001510 <set_normal_mode>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
    {
 8001422:	e00c      	b.n	800143e <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d109      	bne.n	800143e <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f8a2 	bl	8001576 <write_power_mode>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
    {
 8001436:	e002      	b.n	800143e <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e000      	b.n	8001440 <bmp3_set_op_mode+0x98>
    {
 800143e:	bf00      	nop
    }

    return rslt;
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d011      	beq.n	8001480 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	201b      	movs	r0, #27
 8001464:	f7ff fdbc 	bl	8000fe0 <bmp3_get_regs>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	111b      	asrs	r3, r3, #4
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e001      	b.n	8001484 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	2300      	movs	r3, #0
 80014a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d021      	beq.n	80014fe <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014ba:	f107 0120 	add.w	r1, r7, #32
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2206      	movs	r2, #6
 80014c2:	2004      	movs	r0, #4
 80014c4:	f7ff fd8c 	bl	8000fe0 <bmp3_get_regs>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80014d6:	f107 0210 	add.w	r2, r7, #16
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fc6f 	bl	8001dc4 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3318      	adds	r3, #24
 80014ea:	f107 0110 	add.w	r1, r7, #16
 80014ee:	7bf8      	ldrb	r0, [r7, #15]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	f000 fca2 	bl	8001e3a <compensate_data>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fc:	e002      	b.n	8001504 <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014fe:	23ff      	movs	r3, #255	; 0xff
 8001500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f888 	bl	8001632 <validate_normal_mode_settings>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d11d      	bne.n	800156a <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f820 	bl	8001576 <write_power_mode>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d113      	bne.n	800156a <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001542:	f107 010e 	add.w	r1, r7, #14
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	2002      	movs	r0, #2
 800154c:	f7ff fd48 	bl	8000fe0 <bmp3_get_regs>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d106      	bne.n	800156a <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001566:	23fb      	movs	r3, #251	; 0xfb
 8001568:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001580:	231b      	movs	r3, #27
 8001582:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800158a:	7b78      	ldrb	r0, [r7, #13]
 800158c:	f107 010c 	add.w	r1, r7, #12
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	f7ff fd24 	bl	8000fe0 <bmp3_get_regs>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 800159c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d118      	bne.n	80015d6 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015a4:	7b3b      	ldrb	r3, [r7, #12]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015ac:	b25a      	sxtb	r2, r3
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015c2:	f107 010c 	add.w	r1, r7, #12
 80015c6:	f107 000d 	add.w	r0, r7, #13
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f7ff fd97 	bl	8001100 <bmp3_set_regs>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015ea:	231b      	movs	r3, #27
 80015ec:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80015ee:	f107 010d 	add.w	r1, r7, #13
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	201b      	movs	r0, #27
 80015f8:	f7ff fcf2 	bl	8000fe0 <bmp3_get_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10e      	bne.n	8001626 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800160e:	b2db      	uxtb	r3, r3
 8001610:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001612:	f107 010d 	add.w	r1, r7, #13
 8001616:	f107 000e 	add.w	r0, r7, #14
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f7ff fd6f 	bl	8001100 <bmp3_set_regs>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fa25 	bl	8001a8e <get_odr_filter_settings>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d104      	bne.n	800165a <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fa39 	bl	8001ac8 <validate_osr_and_odr_settings>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b088      	sub	sp, #32
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 800166e:	2331      	movs	r3, #49	; 0x31
 8001670:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8001686:	f107 0108 	add.w	r1, r7, #8
 800168a:	7ff8      	ldrb	r0, [r7, #31]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2215      	movs	r2, #21
 8001690:	f7ff fca6 	bl	8000fe0 <bmp3_get_regs>
 8001694:	4603      	mov	r3, r0
 8001696:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fc3e 	bl	8001f20 <parse_calib_data>

    return rslt;
 80016a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e015      	b.n	80016f0 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	441a      	add	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	440b      	add	r3, r1
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	441a      	add	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	440b      	add	r3, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3e5      	bcc.n	80016c4 <interleave_reg_addr+0x14>
    }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	10db      	asrs	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	b2da      	uxtb	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	b2da      	uxtb	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3302      	adds	r3, #2
 8001758:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	105b      	asrs	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	b2da      	uxtb	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	709a      	strb	r2, [r3, #2]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001788:	231b      	movs	r3, #27
 800178a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800178c:	7db8      	ldrb	r0, [r7, #22]
 800178e:	f107 0115 	add.w	r1, r7, #21
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f7ff fc23 	bl	8000fe0 <bmp3_get_regs>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800179e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d132      	bne.n	800180c <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017b0:	7d7b      	ldrb	r3, [r7, #21]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00f      	beq.n	80017f8 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 80017d8:	7d7b      	ldrb	r3, [r7, #21]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f023 0302 	bic.w	r3, r3, #2
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80017f8:	f107 0115 	add.w	r1, r7, #21
 80017fc:	f107 0016 	add.w	r0, r7, #22
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f7ff fc7c 	bl	8001100 <bmp3_set_regs>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800180c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <set_odr_filter_settings+0xd8>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	83bb      	strh	r3, [r7, #28]
 800182a:	2300      	movs	r3, #0
 800182c:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001832:	f107 0118 	add.w	r1, r7, #24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	201c      	movs	r0, #28
 800183c:	f7ff fbd0 	bl	8000fe0 <bmp3_get_regs>
 8001840:	4603      	mov	r3, r0
 8001842:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d14a      	bne.n	80018e2 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	2030      	movs	r0, #48	; 0x30
 8001850:	f000 ff47 	bl	80026e2 <are_settings_changed>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800185a:	f107 0017 	add.w	r0, r7, #23
 800185e:	f107 0218 	add.w	r2, r7, #24
 8001862:	f107 011c 	add.w	r1, r7, #28
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	4603      	mov	r3, r0
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f9e1 	bl	8001c34 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	2080      	movs	r0, #128	; 0x80
 8001876:	f000 ff34 	bl	80026e2 <are_settings_changed>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001880:	f107 0217 	add.w	r2, r7, #23
 8001884:	f107 0118 	add.w	r1, r7, #24
 8001888:	f107 001c 	add.w	r0, r7, #28
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f000 fa29 	bl	8001ce4 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001892:	68f9      	ldr	r1, [r7, #12]
 8001894:	2040      	movs	r0, #64	; 0x40
 8001896:	f000 ff24 	bl	80026e2 <are_settings_changed>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018a0:	f107 0217 	add.w	r2, r7, #23
 80018a4:	f107 0118 	add.w	r1, r7, #24
 80018a8:	f107 001c 	add.w	r0, r7, #28
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f000 fa53 	bl	8001d58 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d104      	bne.n	80018c4 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 f904 	bl	8001ac8 <validate_osr_and_odr_settings>
 80018c0:	4603      	mov	r3, r0
 80018c2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f7ff fc11 	bl	8001100 <bmp3_set_regs>
 80018de:	4603      	mov	r3, r0
 80018e0:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80018e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	080151b8 	.word	0x080151b8

080018f4 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8001900:	2319      	movs	r3, #25
 8001902:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001904:	7d78      	ldrb	r0, [r7, #21]
 8001906:	f107 0116 	add.w	r1, r7, #22
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f7ff fb67 	bl	8000fe0 <bmp3_get_regs>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d15e      	bne.n	80019dc <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	3207      	adds	r2, #7
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	b25b      	sxtb	r3, r3
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	b25a      	sxtb	r2, r3
 800193e:	7c3b      	ldrb	r3, [r7, #16]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	b25b      	sxtb	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b25b      	sxtb	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00e      	beq.n	8001978 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800195a:	7dbb      	ldrb	r3, [r7, #22]
 800195c:	b25b      	sxtb	r3, r3
 800195e:	f023 0302 	bic.w	r3, r3, #2
 8001962:	b25a      	sxtb	r2, r3
 8001964:	7c7b      	ldrb	r3, [r7, #17]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	b25b      	sxtb	r3, r3
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	b25b      	sxtb	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b25b      	sxtb	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00e      	beq.n	80019a0 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	b25a      	sxtb	r2, r3
 800198c:	7cbb      	ldrb	r3, [r7, #18]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	b25b      	sxtb	r3, r3
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00e      	beq.n	80019c8 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019aa:	7dbb      	ldrb	r3, [r7, #22]
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019b2:	b25a      	sxtb	r2, r3
 80019b4:	7cfb      	ldrb	r3, [r7, #19]
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019c8:	f107 0116 	add.w	r1, r7, #22
 80019cc:	f107 0015 	add.w	r0, r7, #21
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f7ff fb94 	bl	8001100 <bmp3_set_regs>
 80019d8:	4603      	mov	r3, r0
 80019da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80019dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	320b      	adds	r2, #11
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a00:	231a      	movs	r3, #26
 8001a02:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a04:	7db8      	ldrb	r0, [r7, #22]
 8001a06:	f107 0115 	add.w	r1, r7, #21
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f7ff fae7 	bl	8000fe0 <bmp3_get_regs>
 8001a12:	4603      	mov	r3, r0
 8001a14:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d131      	bne.n	8001a82 <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	f023 0302 	bic.w	r3, r3, #2
 8001a30:	b25a      	sxtb	r2, r3
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a50:	7d7b      	ldrb	r3, [r7, #21]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	7c7b      	ldrb	r3, [r7, #17]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a6e:	f107 0115 	add.w	r1, r7, #21
 8001a72:	f107 0016 	add.w	r0, r7, #22
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f7ff fb41 	bl	8001100 <bmp3_set_regs>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001a98:	f107 0108 	add.w	r1, r7, #8
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	201c      	movs	r0, #28
 8001aa2:	f7ff fa9d 	bl	8000fe0 <bmp3_get_regs>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	1cda      	adds	r2, r3, #3
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe26 	bl	8001706 <parse_odr_filter_settings>

    return rslt;
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b098      	sub	sp, #96	; 0x60
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001ad0:	23ea      	movs	r3, #234	; 0xea
 8001ad2:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <validate_osr_and_odr_settings+0x7c>)
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4611      	mov	r1, r2
 8001ae0:	2248      	movs	r2, #72	; 0x48
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f012 fb7a 	bl	80141dc <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f83f 	bl	8001b74 <calculate_press_meas_time>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afa:	4413      	add	r3, r2
 8001afc:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	789b      	ldrb	r3, [r3, #2]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f864 	bl	8001bd4 <calculate_temp_meas_time>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b10:	4413      	add	r3, r2
 8001b12:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b18:	4413      	add	r3, r2
 8001b1a:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	799b      	ldrb	r3, [r3, #6]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3360      	adds	r3, #96	; 0x60
 8001b24:	443b      	add	r3, r7
 8001b26:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b2e:	f000 f80b 	bl	8001b48 <verify_meas_time_and_odr_duration>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3760      	adds	r7, #96	; 0x60
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	080151bc 	.word	0x080151bc

08001b48 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d202      	bcs.n	8001b60 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e001      	b.n	8001b64 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b60:	23fd      	movs	r3, #253	; 0xfd
 8001b62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	3203      	adds	r2, #3
 8001b84:	6810      	ldr	r0, [r2, #0]
 8001b86:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	4618      	mov	r0, r3
 8001b98:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b9c:	f000 fd7c 	bl	8002698 <pow_bmp3>
 8001ba0:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001ba4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bcc <calculate_press_meas_time+0x58>
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bd0 <calculate_press_meas_time+0x5c>
 8001bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bc2:	693b      	ldr	r3, [r7, #16]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	44fa0000 	.word	0x44fa0000
 8001bd0:	43c40000 	.word	0x43c40000

08001bd4 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	3203      	adds	r2, #3
 8001be4:	6810      	ldr	r0, [r2, #0]
 8001be6:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001bf4:	7b7b      	ldrb	r3, [r7, #13]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bfc:	f000 fd4c 	bl	8002698 <pow_bmp3>
 8001c00:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c08:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c2c <calculate_temp_meas_time+0x58>
 8001c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c10:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c30 <calculate_temp_meas_time+0x5c>
 8001c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1c:	ee17 3a90 	vmov	r3, s15
 8001c20:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c22:	693b      	ldr	r3, [r7, #16]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	44fa0000 	.word	0x44fa0000
 8001c30:	439c8000 	.word	0x439c8000

08001c34 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c42:	6a3a      	ldr	r2, [r7, #32]
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	3203      	adds	r2, #3
 8001c4a:	6810      	ldr	r0, [r2, #0]
 8001c4c:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d03f      	beq.n	8001cd8 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d013      	beq.n	8001c8a <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	f023 0307 	bic.w	r3, r3, #7
 8001c6c:	b25a      	sxtb	r2, r3
 8001c6e:	7d3b      	ldrb	r3, [r7, #20]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	440b      	add	r3, r1
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	7d7b      	ldrb	r3, [r7, #21]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	440b      	add	r3, r1
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	221c      	movs	r2, #28
 8001cca:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	701a      	strb	r2, [r3, #0]
    }
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3303      	adds	r3, #3
 8001cf6:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2b11      	cmp	r3, #17
 8001cfe:	d902      	bls.n	8001d06 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2211      	movs	r2, #17
 8001d04:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f023 031f 	bic.w	r3, r3, #31
 8001d12:	b25a      	sxtb	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b25a      	sxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	221d      	movs	r2, #29
 8001d3e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	701a      	strb	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	3203      	adds	r2, #3
 8001d6e:	6810      	ldr	r0, [r2, #0]
 8001d70:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3303      	adds	r3, #3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	f023 030e 	bic.w	r3, r3, #14
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	7dbb      	ldrb	r3, [r7, #22]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	f003 030e 	and.w	r3, r3, #14
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	440b      	add	r3, r1
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	221f      	movs	r2, #31
 8001daa:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	701a      	strb	r2, [r3, #0]
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001dc4:	b4b0      	push	{r4, r5, r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	7809      	ldrb	r1, [r1, #0]
 8001dd2:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	3101      	adds	r1, #1
 8001dd8:	7809      	ldrb	r1, [r1, #0]
 8001dda:	0209      	lsls	r1, r1, #8
 8001ddc:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	3102      	adds	r1, #2
 8001de2:	7809      	ldrb	r1, [r1, #0]
 8001de4:	0409      	lsls	r1, r1, #16
 8001de6:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	6939      	ldr	r1, [r7, #16]
 8001dec:	4308      	orrs	r0, r1
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	4301      	orrs	r1, r0
 8001df2:	2000      	movs	r0, #0
 8001df4:	460c      	mov	r4, r1
 8001df6:	4605      	mov	r5, r0
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	3103      	adds	r1, #3
 8001e02:	7809      	ldrb	r1, [r1, #0]
 8001e04:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	3104      	adds	r1, #4
 8001e0a:	7809      	ldrb	r1, [r1, #0]
 8001e0c:	0209      	lsls	r1, r1, #8
 8001e0e:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	3105      	adds	r1, #5
 8001e14:	7809      	ldrb	r1, [r1, #0]
 8001e16:	0409      	lsls	r1, r1, #16
 8001e18:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	6939      	ldr	r1, [r7, #16]
 8001e1e:	4308      	orrs	r0, r1
 8001e20:	6979      	ldr	r1, [r7, #20]
 8001e22:	4301      	orrs	r1, r0
 8001e24:	2000      	movs	r0, #0
 8001e26:	460a      	mov	r2, r1
 8001e28:	4603      	mov	r3, r0
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bcb0      	pop	{r4, r5, r7}
 8001e38:	4770      	bx	lr

08001e3a <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d05a      	beq.n	8001f0a <compensate_data+0xd0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d057      	beq.n	8001f0a <compensate_data+0xd0>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d054      	beq.n	8001f0a <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d115      	bne.n	8001e92 <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fa1f 	bl	80022b0 <compensate_temperature>
 8001e72:	4603      	mov	r3, r0
 8001e74:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d148      	bne.n	8001f10 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fa8e 	bl	80023a8 <compensate_pressure>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e90:	e03e      	b.n	8001f10 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d116      	bne.n	8001ec6 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa06 	bl	80022b0 <compensate_temperature>
            comp_data->temperature = 0;
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fa74 	bl	80023a8 <compensate_pressure>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ec4:	e024      	b.n	8001f10 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d10f      	bne.n	8001eec <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f9ec 	bl	80022b0 <compensate_temperature>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001eea:	e011      	b.n	8001f10 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f08:	e002      	b.n	8001f10 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	75fb      	strb	r3, [r7, #23]
 8001f0e:	e000      	b.n	8001f12 <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f10:	bf00      	nop
    }

    return rslt;
 8001f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3390      	adds	r3, #144	; 0x90
 8001f2e:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	3318      	adds	r3, #24
 8001f34:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4ba4      	ldr	r3, [pc, #656]	; (80021cc <parse_calib_data+0x2ac>)
 8001f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3301      	adds	r3, #1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae8 	bl	8000534 <__aeabi_ui2d>
 8001f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f68:	f7fe fc88 	bl	800087c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	6939      	ldr	r1, [r7, #16]
 8001f72:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3303      	adds	r3, #3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3302      	adds	r3, #2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <parse_calib_data+0x2b0>)
 8001f98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	885b      	ldrh	r3, [r3, #2]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fac7 	bl	8000534 <__aeabi_ui2d>
 8001fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001faa:	f7fe fc67 	bl	800087c <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25a      	sxtb	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <parse_calib_data+0x2b4>)
 8001fca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fabd 	bl	8000554 <__aeabi_i2d>
 8001fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fde:	f7fe fc4d 	bl	800087c <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	6939      	ldr	r1, [r7, #16]
 8001fe8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3306      	adds	r3, #6
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3305      	adds	r3, #5
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21a      	sxth	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <parse_calib_data+0x2b8>)
 800200c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002016:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa9a 	bl	8000554 <__aeabi_i2d>
 8002020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002024:	f7fe fc2a 	bl	800087c <__aeabi_ddiv>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3308      	adds	r3, #8
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21a      	sxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3307      	adds	r3, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21a      	sxth	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <parse_calib_data+0x2bc>)
 8002052:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800205c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa77 	bl	8000554 <__aeabi_i2d>
 8002066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800206a:	f7fe fc07 	bl	800087c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3309      	adds	r3, #9
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b25a      	sxtb	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <parse_calib_data+0x2c0>)
 800208a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa5d 	bl	8000554 <__aeabi_i2d>
 800209a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800209e:	f7fe fbed 	bl	800087c <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	6939      	ldr	r1, [r7, #16]
 80020a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	330a      	adds	r3, #10
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <parse_calib_data+0x2c4>)
 80020be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa43 	bl	8000554 <__aeabi_i2d>
 80020ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020d2:	f7fe fbd3 	bl	800087c <__aeabi_ddiv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	6939      	ldr	r1, [r7, #16]
 80020dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	330c      	adds	r3, #12
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	330b      	adds	r3, #11
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002104:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	899b      	ldrh	r3, [r3, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fa11 	bl	8000534 <__aeabi_ui2d>
 8002112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002116:	f7fe fbb1 	bl	800087c <__aeabi_ddiv>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	6939      	ldr	r1, [r7, #16]
 8002120:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	330e      	adds	r3, #14
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b21a      	sxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	330d      	adds	r3, #13
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21b      	sxth	r3, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <parse_calib_data+0x2c8>)
 8002146:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	89db      	ldrh	r3, [r3, #14]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9f0 	bl	8000534 <__aeabi_ui2d>
 8002154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002158:	f7fe fb90 	bl	800087c <__aeabi_ddiv>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	6939      	ldr	r1, [r7, #16]
 8002162:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	330f      	adds	r3, #15
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25a      	sxtb	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <parse_calib_data+0x2cc>)
 8002178:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9e6 	bl	8000554 <__aeabi_i2d>
 8002188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218c:	f7fe fb76 	bl	800087c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3310      	adds	r3, #16
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b25a      	sxtb	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <parse_calib_data+0x2d0>)
 80021ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f9cc 	bl	8000554 <__aeabi_i2d>
 80021bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c0:	f7fe fb5c 	bl	800087c <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	e013      	b.n	80021f4 <parse_calib_data+0x2d4>
 80021cc:	3f700000 	.word	0x3f700000
 80021d0:	41d00000 	.word	0x41d00000
 80021d4:	42f00000 	.word	0x42f00000
 80021d8:	41300000 	.word	0x41300000
 80021dc:	41c00000 	.word	0x41c00000
 80021e0:	41f00000 	.word	0x41f00000
 80021e4:	42400000 	.word	0x42400000
 80021e8:	40500000 	.word	0x40500000
 80021ec:	40700000 	.word	0x40700000
 80021f0:	40e00000 	.word	0x40e00000
 80021f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3312      	adds	r3, #18
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3311      	adds	r3, #17
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21a      	sxth	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <parse_calib_data+0x38c>)
 8002218:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f996 	bl	8000554 <__aeabi_i2d>
 8002228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222c:	f7fe fb26 	bl	800087c <__aeabi_ddiv>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	6939      	ldr	r1, [r7, #16]
 8002236:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3313      	adds	r3, #19
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b25a      	sxtb	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <parse_calib_data+0x38c>)
 800224c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f97c 	bl	8000554 <__aeabi_i2d>
 800225c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002260:	f7fe fb0c 	bl	800087c <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	6939      	ldr	r1, [r7, #16]
 800226a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3314      	adds	r3, #20
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b25a      	sxtb	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8002282:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f961 	bl	8000554 <__aeabi_i2d>
 8002292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002296:	f7fe faf1 	bl	800087c <__aeabi_ddiv>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	42f00000 	.word	0x42f00000

080022b0 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022d0:	f7fe f97c 	bl	80005cc <__aeabi_l2d>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fd ffed 	bl	80002b8 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022f0:	f7fe f99a 	bl	8000628 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80022fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002304:	f7fe f990 	bl	8000628 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002316:	f7fe f987 	bl	8000628 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002326:	f7fd ffc9 	bl	80002bc <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <compensate_temperature+0xec>)
 8002340:	f7fe fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <compensate_temperature+0xec>)
 8002352:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002356:	2303      	movs	r3, #3
 8002358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <compensate_temperature+0xf0>)
 8002368:	f7fe fbee 	bl	8000b48 <__aeabi_dcmpgt>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <compensate_temperature+0xf0>)
 800237a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 800237e:	2304      	movs	r3, #4
 8002380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002390:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002394:	4618      	mov	r0, r3
 8002396:	3730      	adds	r7, #48	; 0x30
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	c0440000 	.word	0xc0440000
 80023a0:	40554000 	.word	0x40554000
 80023a4:	00000000 	.word	0x00000000

080023a8 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b096      	sub	sp, #88	; 0x58
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023ca:	f7fe f92d 	bl	8000628 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d8:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80023dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023de:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80023e2:	2002      	movs	r0, #2
 80023e4:	eeb0 0a47 	vmov.f32	s0, s14
 80023e8:	eef0 0a67 	vmov.f32	s1, s15
 80023ec:	f000 f954 	bl	8002698 <pow_bmp3>
 80023f0:	ee10 3a10 	vmov	r3, s0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8bf 	bl	8000578 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe f911 	bl	8000628 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002410:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002416:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800241a:	2003      	movs	r0, #3
 800241c:	eeb0 0a47 	vmov.f32	s0, s14
 8002420:	eef0 0a67 	vmov.f32	s1, s15
 8002424:	f000 f938 	bl	8002698 <pow_bmp3>
 8002428:	ee10 3a10 	vmov	r3, s0
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f8a3 	bl	8000578 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fe f8f5 	bl	8000628 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800244c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002450:	f7fd ff34 	bl	80002bc <__adddf3>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002460:	f7fd ff2c 	bl	80002bc <__adddf3>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800246c:	f7fd ff26 	bl	80002bc <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800247e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002480:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002484:	f7fe f8d0 	bl	8000628 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8002490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002492:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002498:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800249c:	2002      	movs	r0, #2
 800249e:	eeb0 0a47 	vmov.f32	s0, s14
 80024a2:	eef0 0a67 	vmov.f32	s1, s15
 80024a6:	f000 f8f7 	bl	8002698 <pow_bmp3>
 80024aa:	ee10 3a10 	vmov	r3, s0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f862 	bl	8000578 <__aeabi_f2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fe f8b4 	bl	8000628 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024d4:	2003      	movs	r0, #3
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	f000 f8db 	bl	8002698 <pow_bmp3>
 80024e2:	ee10 3a10 	vmov	r3, s0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f846 	bl	8000578 <__aeabi_f2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fe f898 	bl	8000628 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe f857 	bl	80005bc <__aeabi_ul2d>
 800250e:	4604      	mov	r4, r0
 8002510:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800251c:	f7fd fece 	bl	80002bc <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800252c:	f7fd fec6 	bl	80002bc <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800253c:	f7fd febe 	bl	80002bc <__adddf3>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fe f86e 	bl	8000628 <__aeabi_dmul>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f7fe f82d 	bl	80005bc <__aeabi_ul2d>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	2002      	movs	r0, #2
 8002568:	ec43 2b10 	vmov	d0, r2, r3
 800256c:	f000 f894 	bl	8002698 <pow_bmp3>
 8002570:	ee10 3a10 	vmov	r3, s0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffff 	bl	8000578 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8002582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002584:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002594:	f7fe f848 	bl	8000628 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fd fe8c 	bl	80002bc <__adddf3>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025b4:	f7fe f838 	bl	8000628 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fd fff7 	bl	80005bc <__aeabi_ul2d>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	2003      	movs	r0, #3
 80025d4:	ec43 2b10 	vmov	d0, r2, r3
 80025d8:	f000 f85e 	bl	8002698 <pow_bmp3>
 80025dc:	ee10 3a10 	vmov	r3, s0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffc9 	bl	8000578 <__aeabi_f2d>
 80025e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80025ec:	f7fe f81c 	bl	8000628 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025f8:	f7fd fe60 	bl	80002bc <__adddf3>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8002604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002608:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800260c:	f7fd fe56 	bl	80002bc <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002618:	f7fd fe50 	bl	80002bc <__adddf3>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 8002624:	a318      	add	r3, pc, #96	; (adr r3, 8002688 <compensate_pressure+0x2e0>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800262e:	f7fe fa6d 	bl	8000b0c <__aeabi_dcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002638:	a313      	add	r3, pc, #76	; (adr r3, 8002688 <compensate_pressure+0x2e0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 8002642:	2305      	movs	r3, #5
 8002644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002648:	a311      	add	r3, pc, #68	; (adr r3, 8002690 <compensate_pressure+0x2e8>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002652:	f7fe fa79 	bl	8000b48 <__aeabi_dcmpgt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 800265c:	a30c      	add	r3, pc, #48	; (adr r3, 8002690 <compensate_pressure+0x2e8>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 8002666:	2306      	movs	r3, #6
 8002668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002672:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002676:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800267a:	4618      	mov	r0, r3
 800267c:	3758      	adds	r7, #88	; 0x58
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	40dd4c00 	.word	0x40dd4c00
 8002690:	00000000 	.word	0x00000000
 8002694:	40fe8480 	.word	0x40fe8480

08002698 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	ed87 0b02 	vstr	d0, [r7, #8]
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026aa:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026ac:	e00e      	b.n	80026cc <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b2:	f7fe fa73 	bl	8000b9c <__aeabi_d2f>
 80026b6:	ee07 0a10 	vmov	s14, r0
 80026ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80026be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c2:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ed      	bne.n	80026ae <pow_bmp3+0x16>
    }

    return pow_output;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	ee07 3a90 	vmov	s15, r3
}
 80026d8:	eeb0 0a67 	vmov.f32	s0, s15
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e001      	b.n	8002704 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00f      	beq.n	8002740 <null_ptr_check+0x2e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <null_ptr_check+0x2e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <null_ptr_check+0x2e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002740:	23ff      	movs	r3, #255	; 0xff
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 8002764:	2303      	movs	r3, #3
 8002766:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002768:	f107 010d 	add.w	r1, r7, #13
 800276c:	7bb8      	ldrb	r0, [r7, #14]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	f7fe fc35 	bl	8000fe0 <bmp3_get_regs>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d128      	bne.n	80027d4 <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 8002782:	7b7b      	ldrb	r3, [r7, #13]
 8002784:	111b      	asrs	r3, r3, #4
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	115b      	asrs	r3, r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027a2:	7b7b      	ldrb	r3, [r7, #13]
 80027a4:	119b      	asrs	r3, r3, #6
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027b2:	2310      	movs	r3, #16
 80027b4:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027b6:	f107 010d 	add.w	r1, r7, #13
 80027ba:	7bb8      	ldrb	r0, [r7, #14]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	f7fe fc0e 	bl	8000fe0 <bmp3_get_regs>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027c8:	7b7b      	ldrb	r3, [r7, #13]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 80027ea:	f107 010e 	add.w	r1, r7, #14
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	2011      	movs	r0, #17
 80027f4:	f7fe fbf4 	bl	8000fe0 <bmp3_get_regs>
 80027f8:	4603      	mov	r3, r0
 80027fa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d115      	bne.n	8002830 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	105b      	asrs	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	10db      	asrs	r3, r3, #3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 8002846:	f107 010e 	add.w	r1, r7, #14
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	2002      	movs	r0, #2
 8002850:	f7fe fbc6 	bl	8000fe0 <bmp3_get_regs>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 800286c:	7bbb      	ldrb	r3, [r7, #14]
 800286e:	105b      	asrs	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	109b      	asrs	r3, r3, #2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{/*
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
            break;
        default:
            PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
            break;
    }*/
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10b      	bne.n	80028e4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <bmp3_interface_init+0x58>)
 80028ce:	2277      	movs	r2, #119	; 0x77
 80028d0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <bmp3_interface_init+0x5c>)
 80028d6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <bmp3_interface_init+0x60>)
 80028dc:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <bmp3_interface_init+0x64>)
 80028e8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <bmp3_interface_init+0x58>)
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e001      	b.n	80028f6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80028f2:	23ff      	movs	r3, #255	; 0xff
 80028f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000200 	.word	0x20000200
 800290c:	08002951 	.word	0x08002951
 8002910:	080029a5 	.word	0x080029a5
 8002914:	08002919 	.word	0x08002919

08002918 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8002922:	e008      	b.n	8002936 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e002      	b.n	8002930 <bmp3_delay_us+0x18>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b53      	cmp	r3, #83	; 0x53
 8002934:	d9f9      	bls.n	800292a <bmp3_delay_us+0x12>
	while(period--)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f1      	bne.n	8002924 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	4613      	mov	r3, r2
 8002960:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	b29b      	uxth	r3, r3
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002970:	f107 020f 	add.w	r2, r7, #15
 8002974:	8ab9      	ldrh	r1, [r7, #20]
 8002976:	f241 3388 	movw	r3, #5000	; 0x1388
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	4808      	ldr	r0, [pc, #32]	; (80029a0 <SensorAPI_I2Cx_Read+0x50>)
 8002980:	f001 fe44 	bl	800460c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	8ab9      	ldrh	r1, [r7, #20]
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	9200      	str	r2, [sp, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <SensorAPI_I2Cx_Read+0x50>)
 8002992:	f001 ff2f 	bl	80047f4 <HAL_I2C_Master_Receive>
	return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000404 	.word	0x20000404

080029a4 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	4613      	mov	r3, r2
 80029b4:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <SensorAPI_I2Cx_Write+0x54>)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 80029ca:	89bb      	ldrh	r3, [r7, #12]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	480a      	ldr	r0, [pc, #40]	; (80029fc <SensorAPI_I2Cx_Write+0x58>)
 80029d2:	f011 fc03 	bl	80141dc <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 80029d6:	89bb      	ldrh	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8ab9      	ldrh	r1, [r7, #20]
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	9200      	str	r2, [sp, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <SensorAPI_I2Cx_Write+0x54>)
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <SensorAPI_I2Cx_Write+0x5c>)
 80029e8:	f001 fe10 	bl	800460c <HAL_I2C_Master_Transmit>
	return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000204 	.word	0x20000204
 80029fc:	20000205 	.word	0x20000205
 8002a00:	20000404 	.word	0x20000404

08002a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	f5ad 6dff 	sub.w	sp, sp, #2040	; 0x7f8
 8002a0a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002a0c:	4bbf      	ldr	r3, [pc, #764]	; (8002d0c <main+0x308>)
 8002a0e:	f207 745c 	addw	r4, r7, #1884	; 0x75c
 8002a12:	461d      	mov	r5, r3
 8002a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a1c:	c403      	stmia	r4!, {r0, r1}
 8002a1e:	7022      	strb	r2, [r4, #0]
 8002a20:	f207 7375 	addw	r3, r7, #1909	; 0x775
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
 8002a30:	615a      	str	r2, [r3, #20]
 8002a32:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 8002a34:	4bb6      	ldr	r3, [pc, #728]	; (8002d10 <main+0x30c>)
 8002a36:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec

	uint8_t USB_TxBuffer_FS;
	uint32_t USB_TxBuffer_Length = 1000;
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
	uint8_t DataBuffer[BufferSize];

	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data bmpdata = { 0 };
 8002a42:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002a46:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	6053      	str	r3, [r2, #4]
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings settings = { 0 };
 8002a56:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002a5a:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	731a      	strb	r2, [r3, #12]
	struct bmp3_status status = { { 0 } };
 8002a68:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002a6c:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	811a      	strh	r2, [r3, #8]

	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8002a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff16 	bl	80028b0 <bmp3_interface_init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
	bmp3_check_rslt("bmp3_interface_init", rslt);
 8002a8a:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002a8e:	4619      	mov	r1, r3
 8002a90:	48a0      	ldr	r0, [pc, #640]	; (8002d14 <main+0x310>)
 8002a92:	f7ff ff01 	bl	8002898 <bmp3_check_rslt>

	rslt = bmp3_init(&dev);
 8002a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fa50 	bl	8000f40 <bmp3_init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
	bmp3_check_rslt("bmp3_init", rslt);
 8002aa6:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002aaa:	4619      	mov	r1, r3
 8002aac:	489a      	ldr	r0, [pc, #616]	; (8002d18 <main+0x314>)
 8002aae:	f7ff fef3 	bl	8002898 <bmp3_check_rslt>

	settings.int_settings.drdy_en = BMP3_DISABLE;
 8002ab2:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002ab6:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002aba:	2200      	movs	r2, #0
 8002abc:	729a      	strb	r2, [r3, #10]
	settings.press_en = BMP3_ENABLE;
 8002abe:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002ac2:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 8002aca:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002ace:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8002ad6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002ada:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002ade:	2202      	movs	r2, #2
 8002ae0:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8002ae2:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002ae6:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002aea:	2200      	movs	r2, #0
 8002aec:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8002aee:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002af2:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002af6:	2201      	movs	r2, #1
 8002af8:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8002afa:	23be      	movs	r3, #190	; 0xbe
 8002afc:	f8a7 37e4 	strh.w	r3, [r7, #2020]	; 0x7e4
				   BMP3_SEL_DRDY_EN;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 8002b00:	f8b7 37e4 	ldrh.w	r3, [r7, #2020]	; 0x7e4
 8002b04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b08:	f107 0110 	add.w	r1, r7, #16
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fb88 	bl	8001222 <bmp3_set_sensor_settings>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 8002b18:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	487f      	ldr	r0, [pc, #508]	; (8002d1c <main+0x318>)
 8002b20:	f7ff feba 	bl	8002898 <bmp3_check_rslt>

	settings.op_mode = BMP3_MODE_NORMAL;
 8002b24:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002b28:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	701a      	strb	r2, [r3, #0]
	rslt = bmp3_set_op_mode(&settings, &dev);
 8002b30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fc34 	bl	80013a8 <bmp3_set_op_mode>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
	bmp3_check_rslt("bmp3_set_op_mode", rslt);
 8002b46:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4874      	ldr	r0, [pc, #464]	; (8002d20 <main+0x31c>)
 8002b4e:	f7ff fea3 	bl	8002898 <bmp3_check_rslt>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b52:	f001 f88a 	bl	8003c6a <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 8002b56:	f00b ffd7 	bl	800eb08 <MX_FATFS_Init>
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5a:	f000 fa19 	bl	8002f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5e:	f000 fc6d 	bl	800343c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b62:	f000 fa7b 	bl	800305c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b66:	f000 fab9 	bl	80030dc <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002b6a:	f000 faf7 	bl	800315c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002b6e:	f000 fb17 	bl	80031a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b72:	f000 fbc9 	bl	8003308 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b76:	f000 fc15 	bl	80033a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002b7a:	f00b ffc5 	bl	800eb08 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002b7e:	f010 fd1f 	bl	80135c0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002b82:	f000 fb4b 	bl	800321c <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002b86:	f000 fa55 	bl	8003034 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <main+0x320>)
 8002b8c:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <main+0x324>)
 8002b8e:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8002b90:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <main+0x328>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
   return(result);
 8002ba4:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
 8002bb0:	4b5e      	ldr	r3, [pc, #376]	; (8002d2c <main+0x328>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8002bba:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 8002bbe:	f8c7 27cc 	str.w	r2, [r7, #1996]	; 0x7cc
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 8002bc6:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	; 0x7d0
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
   return(result);
 8002bd2:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1da      	bne.n	8002b90 <main+0x18c>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <main+0x328>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
   return(result);
 8002bee:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <main+0x328>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8002c04:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8002c08:	f8c7 27b8 	str.w	r2, [r7, #1976]	; 0x7b8
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 8002c10:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
   return(result);
 8002c1c:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1da      	bne.n	8002bda <main+0x1d6>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <main+0x328>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	f8c7 3798 	str.w	r3, [r7, #1944]	; 0x798
   return(result);
 8002c38:	f8d7 3798 	ldr.w	r3, [r7, #1944]	; 0x798
 8002c3c:	f043 0320 	orr.w	r3, r3, #32
 8002c40:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <main+0x328>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8002c4e:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 8002c52:	f8c7 27a4 	str.w	r2, [r7, #1956]	; 0x7a4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 8002c5a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
   return(result);
 8002c66:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1da      	bne.n	8002c24 <main+0x220>


  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	492f      	ldr	r1, [pc, #188]	; (8002d30 <main+0x32c>)
 8002c72:	4830      	ldr	r0, [pc, #192]	; (8002d34 <main+0x330>)
 8002c74:	f00f fabc 	bl	80121f0 <f_mount>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <main+0x29c>
      	{
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002c7e:	2108      	movs	r1, #8
 8002c80:	482d      	ldr	r0, [pc, #180]	; (8002d38 <main+0x334>)
 8002c82:	f001 fc19 	bl	80044b8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (300);
 8002c86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c8a:	f001 f863 	bl	8003d54 <HAL_Delay>
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8002c8e:	2108      	movs	r1, #8
 8002c90:	4829      	ldr	r0, [pc, #164]	; (8002d38 <main+0x334>)
 8002c92:	f001 fc11 	bl	80044b8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (1000);
 8002c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c9a:	f001 f85b 	bl	8003d54 <HAL_Delay>
 8002c9e:	e08e      	b.n	8002dbe <main+0x3ba>
      	}
  // here f_mount == FR_OK -> mounting was a success
  else
      	{
	  // f_mkfs
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8002ca0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8002ca4:	2264      	movs	r2, #100	; 0x64
 8002ca6:	9200      	str	r2, [sp, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2107      	movs	r1, #7
 8002cac:	4820      	ldr	r0, [pc, #128]	; (8002d30 <main+0x32c>)
 8002cae:	f00f ffff 	bl	8012cb0 <f_mkfs>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <main+0x2d6>
      	    {
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002cb8:	2110      	movs	r1, #16
 8002cba:	481f      	ldr	r0, [pc, #124]	; (8002d38 <main+0x334>)
 8002cbc:	f001 fbfc 	bl	80044b8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (300);
 8002cc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cc4:	f001 f846 	bl	8003d54 <HAL_Delay>
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8002cc8:	2110      	movs	r1, #16
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <main+0x334>)
 8002ccc:	f001 fbf4 	bl	80044b8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (1000);
 8002cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd4:	f001 f83e 	bl	8003d54 <HAL_Delay>
 8002cd8:	e071      	b.n	8002dbe <main+0x3ba>
      	    }
	  else
      		{
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8002cda:	220a      	movs	r2, #10
 8002cdc:	4917      	ldr	r1, [pc, #92]	; (8002d3c <main+0x338>)
 8002cde:	4818      	ldr	r0, [pc, #96]	; (8002d40 <main+0x33c>)
 8002ce0:	f00f facc 	bl	801227c <f_open>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02c      	beq.n	8002d44 <main+0x340>
				{
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002cea:	2120      	movs	r1, #32
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <main+0x334>)
 8002cee:	f001 fbe3 	bl	80044b8 <HAL_GPIO_TogglePin>
				  HAL_Delay (300);
 8002cf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cf6:	f001 f82d 	bl	8003d54 <HAL_Delay>
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	480e      	ldr	r0, [pc, #56]	; (8002d38 <main+0x334>)
 8002cfe:	f001 fbdb 	bl	80044b8 <HAL_GPIO_TogglePin>
				  HAL_Delay (1000);
 8002d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d06:	f001 f825 	bl	8003d54 <HAL_Delay>
 8002d0a:	e058      	b.n	8002dbe <main+0x3ba>
 8002d0c:	0801529c 	.word	0x0801529c
 8002d10:	08015204 	.word	0x08015204
 8002d14:	0801520c 	.word	0x0801520c
 8002d18:	08015220 	.word	0x08015220
 8002d1c:	0801522c 	.word	0x0801522c
 8002d20:	08015248 	.word	0x08015248
 8002d24:	20000c74 	.word	0x20000c74
 8002d28:	200006fc 	.word	0x200006fc
 8002d2c:	2000066c 	.word	0x2000066c
 8002d30:	20000c8c 	.word	0x20000c8c
 8002d34:	20000c90 	.word	0x20000c90
 8002d38:	48000c00 	.word	0x48000c00
 8002d3c:	0801525c 	.word	0x0801525c
 8002d40:	20000ec0 	.word	0x20000ec0
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8002d44:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fa59 	bl	8000200 <strlen>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8002d54:	f207 715c 	addw	r1, r7, #1884	; 0x75c
 8002d58:	4882      	ldr	r0, [pc, #520]	; (8002f64 <main+0x560>)
 8002d5a:	f00f fd8c 	bl	8012876 <f_write>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 37d7 	strb.w	r3, [r7, #2007]	; 0x7d7
				f_read(&SDFile, &rtext, 100, &bytesread);
 8002d64:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8002d68:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002d6c:	2264      	movs	r2, #100	; 0x64
 8002d6e:	487d      	ldr	r0, [pc, #500]	; (8002f64 <main+0x560>)
 8002d70:	f00f fc42 	bl	80125f8 <f_read>
				//f_read();

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 8002d74:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8002d78:	2164      	movs	r1, #100	; 0x64
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f010 fcde 	bl	801373c <CDC_Transmit_FS>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 37d6 	strb.w	r3, [r7, #2006]	; 0x7d6
				if((byteswritten == 0) || (res != FR_OK))
 8002d86:	f8d7 3794 	ldr.w	r3, [r7, #1940]	; 0x794
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <main+0x392>
 8002d8e:	f897 37d7 	ldrb.w	r3, [r7, #2007]	; 0x7d7
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <main+0x3b4>
					{
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002d96:	2140      	movs	r1, #64	; 0x40
 8002d98:	4873      	ldr	r0, [pc, #460]	; (8002f68 <main+0x564>)
 8002d9a:	f001 fb8d 	bl	80044b8 <HAL_GPIO_TogglePin>
					  HAL_Delay (300);
 8002d9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002da2:	f000 ffd7 	bl	8003d54 <HAL_Delay>
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	486f      	ldr	r0, [pc, #444]	; (8002f68 <main+0x564>)
 8002daa:	f001 fb85 	bl	80044b8 <HAL_GPIO_TogglePin>
					  HAL_Delay (1000);
 8002dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db2:	f000 ffcf 	bl	8003d54 <HAL_Delay>
 8002db6:	e002      	b.n	8002dbe <main+0x3ba>
					}
				else
					{

					f_close(&SDFile);
 8002db8:	486a      	ldr	r0, [pc, #424]	; (8002f64 <main+0x560>)
 8002dba:	f00f ff4f 	bl	8012c5c <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	486a      	ldr	r0, [pc, #424]	; (8002f6c <main+0x568>)
 8002dc4:	f00f fa14 	bl	80121f0 <f_mount>
  {

	  // Lesson learned: do NOT place delays between data transfers and receives; it will mess up the data flow

	  // Check here if data is ready
	  if (data_ready)
 8002dc8:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <main+0x56c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03d      	beq.n	8002e4c <main+0x448>
		      while (CDC_Transmit_FS ((uint8_t)longitude, strlen((uint8_t)longitude)) == USBD_BUSY);
		      while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

		  //}*/

		  if (rxBuffer == rxBuffer1)
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <main+0x570>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <main+0x574>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d11c      	bne.n	8002e14 <main+0x410>
			  // USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2));
			  /*USBD_TxBuffer_Status = CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2));
			  while (USBD_TxBuffer_Status == USBD_BUSY);
			  	  USBD_TxBuffer_Status = CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2));*/

			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002dda:	2120      	movs	r1, #32
 8002ddc:	4862      	ldr	r0, [pc, #392]	; (8002f68 <main+0x564>)
 8002dde:	f001 fb6b 	bl	80044b8 <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2)) == USBD_BUSY);
 8002de2:	bf00      	nop
 8002de4:	4865      	ldr	r0, [pc, #404]	; (8002f7c <main+0x578>)
 8002de6:	f7fd fa0b 	bl	8000200 <strlen>
 8002dea:	4603      	mov	r3, r0
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	4862      	ldr	r0, [pc, #392]	; (8002f7c <main+0x578>)
 8002df2:	f010 fca3 	bl	801373c <CDC_Transmit_FS>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d0f3      	beq.n	8002de4 <main+0x3e0>
			  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	485a      	ldr	r0, [pc, #360]	; (8002f68 <main+0x564>)
 8002e00:	f001 fb5a 	bl	80044b8 <HAL_GPIO_TogglePin>
			  rxBuffer = rxBuffer2;
 8002e04:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <main+0x570>)
 8002e06:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <main+0x578>)
 8002e08:	601a      	str	r2, [r3, #0]
			  data_ready |= 0;
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <main+0x56c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <main+0x56c>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01b      	b.n	8002e4c <main+0x448>
		  }
		  else
		  {
			  // Saving the transmit status for debugging
			  // USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1));
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	4854      	ldr	r0, [pc, #336]	; (8002f68 <main+0x564>)
 8002e18:	f001 fb4e 	bl	80044b8 <HAL_GPIO_TogglePin>
			  while (CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1)) == USBD_BUSY);
 8002e1c:	bf00      	nop
 8002e1e:	4856      	ldr	r0, [pc, #344]	; (8002f78 <main+0x574>)
 8002e20:	f7fd f9ee 	bl	8000200 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4853      	ldr	r0, [pc, #332]	; (8002f78 <main+0x574>)
 8002e2c:	f010 fc86 	bl	801373c <CDC_Transmit_FS>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d0f3      	beq.n	8002e1e <main+0x41a>
			  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	484b      	ldr	r0, [pc, #300]	; (8002f68 <main+0x564>)
 8002e3a:	f001 fb3d 	bl	80044b8 <HAL_GPIO_TogglePin>
			  rxBuffer = rxBuffer1;
 8002e3e:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <main+0x570>)
 8002e40:	4a4d      	ldr	r2, [pc, #308]	; (8002f78 <main+0x574>)
 8002e42:	601a      	str	r2, [r3, #0]
			  data_ready |= 0;
 8002e44:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <main+0x56c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <main+0x56c>)
 8002e4a:	6013      	str	r3, [r2, #0]
		  // Flash LED4
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
		  //HAL_Delay(100);
	  }*/

	  rslt = bmp3_get_status(&status, &dev);
 8002e4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fa32 	bl	80012be <bmp3_get_status>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
		bmp3_check_rslt("bmp3_get_status", rslt);
 8002e60:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002e64:	4619      	mov	r1, r3
 8002e66:	4846      	ldr	r0, [pc, #280]	; (8002f80 <main+0x57c>)
 8002e68:	f7ff fd16 	bl	8002898 <bmp3_check_rslt>


		/* Read temperature and pressure data iteratively based on data ready interrupt */
		if ((rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE))
 8002e6c:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1a9      	bne.n	8002dc8 <main+0x3c4>
 8002e74:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002e78:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8002e7c:	789b      	ldrb	r3, [r3, #2]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d1a2      	bne.n	8002dc8 <main+0x3c4>
			 * First parameter indicates the type of data to be read
			 * BMP3_PRESS_TEMP : To read pressure and temperature data
			 * BMP3_TEMP       : To read only temperature data
			 * BMP3_PRESS      : To read only pressure data
			 */
			rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmpdata, &dev);
 8002e82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f7fe faff 	bl	8001490 <bmp3_get_sensor_data>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
			bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 8002e98:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4839      	ldr	r0, [pc, #228]	; (8002f84 <main+0x580>)
 8002ea0:	f7ff fcfa 	bl	8002898 <bmp3_check_rslt>

			/* NOTE : Read status register again to clear data ready interrupt status */
			rslt = bmp3_get_status(&status, &dev);
 8002ea4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fa06 	bl	80012be <bmp3_get_status>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 37e7 	strb.w	r3, [r7, #2023]	; 0x7e7
			bmp3_check_rslt("bmp3_get_status", rslt);
 8002eb8:	f997 37e7 	ldrsb.w	r3, [r7, #2023]	; 0x7e7
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4830      	ldr	r0, [pc, #192]	; (8002f80 <main+0x57c>)
 8002ec0:	f7ff fcea 	bl	8002898 <bmp3_check_rslt>


			//#ifdef BMP3_FLOAT_COMPENSATION
			while (CDC_Transmit_FS ("BMP390\n", 7) == USBD_BUSY);
 8002ec4:	bf00      	nop
 8002ec6:	2107      	movs	r1, #7
 8002ec8:	482f      	ldr	r0, [pc, #188]	; (8002f88 <main+0x584>)
 8002eca:	f010 fc37 	bl	801373c <CDC_Transmit_FS>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d0f8      	beq.n	8002ec6 <main+0x4c2>
			while (CDC_Transmit_FS (&bmpdata.temperature, strlen((uint16_t)bmpdata.temperature)) == USBD_BUSY);
 8002ed4:	bf00      	nop
 8002ed6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002eda:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe39 	bl	8000b5c <__aeabi_d2uiz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd f986 	bl	8000200 <strlen>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	f107 0320 	add.w	r3, r7, #32
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f010 fc1c 	bl	801373c <CDC_Transmit_FS>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d0e5      	beq.n	8002ed6 <main+0x4d2>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8002f0a:	bf00      	nop
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	481f      	ldr	r0, [pc, #124]	; (8002f8c <main+0x588>)
 8002f10:	f010 fc14 	bl	801373c <CDC_Transmit_FS>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d0f8      	beq.n	8002f0c <main+0x508>
			while (CDC_Transmit_FS (&bmpdata.pressure, strlen((uint16_t)bmpdata.pressure)) == USBD_BUSY);
 8002f1a:	bf00      	nop
 8002f1c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002f20:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002f24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7fd fe16 	bl	8000b5c <__aeabi_d2uiz>
 8002f30:	4603      	mov	r3, r0
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd f963 	bl	8000200 <strlen>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	f107 0320 	add.w	r3, r7, #32
 8002f42:	3308      	adds	r3, #8
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f010 fbf8 	bl	801373c <CDC_Transmit_FS>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d0e4      	beq.n	8002f1c <main+0x518>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8002f52:	bf00      	nop
 8002f54:	2101      	movs	r1, #1
 8002f56:	480d      	ldr	r0, [pc, #52]	; (8002f8c <main+0x588>)
 8002f58:	f010 fbf0 	bl	801373c <CDC_Transmit_FS>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d0f8      	beq.n	8002f54 <main+0x550>
	  if (data_ready)
 8002f62:	e731      	b.n	8002dc8 <main+0x3c4>
 8002f64:	20000ec0 	.word	0x20000ec0
 8002f68:	48000c00 	.word	0x48000c00
 8002f6c:	20000c90 	.word	0x20000c90
 8002f70:	20000c80 	.word	0x20000c80
 8002f74:	20000c74 	.word	0x20000c74
 8002f78:	200006fc 	.word	0x200006fc
 8002f7c:	200009b8 	.word	0x200009b8
 8002f80:	08015268 	.word	0x08015268
 8002f84:	08015278 	.word	0x08015278
 8002f88:	08015290 	.word	0x08015290
 8002f8c:	08015298 	.word	0x08015298

08002f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b096      	sub	sp, #88	; 0x58
 8002f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	2244      	movs	r2, #68	; 0x44
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f011 f92a 	bl	80141f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f003 fa0e 	bl	80063d4 <HAL_PWREx_ControlVoltageScaling>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002fbe:	f000 fb1b 	bl	80035f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002fc2:	2321      	movs	r3, #33	; 0x21
 8002fc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002fdc:	231e      	movs	r3, #30
 8002fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 8002fe0:	2314      	movs	r3, #20
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 faa3 	bl	800653c <HAL_RCC_OscConfig>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002ffc:	f000 fafc 	bl	80035f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003000:	230f      	movs	r3, #15
 8003002:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003004:	2303      	movs	r3, #3
 8003006:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003014:	463b      	mov	r3, r7
 8003016:	2105      	movs	r1, #5
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fea9 	bl	8006d70 <HAL_RCC_ClockConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003024:	f000 fae8 	bl	80035f8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003028:	f004 f8a0 	bl	800716c <HAL_RCC_EnableCSS>
}
 800302c:	bf00      	nop
 800302e:	3758      	adds	r7, #88	; 0x58
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	201a      	movs	r0, #26
 800303e:	f000 ff88 	bl	8003f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003042:	201a      	movs	r0, #26
 8003044:	f000 ffa1 	bl	8003f8a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	2026      	movs	r0, #38	; 0x26
 800304e:	f000 ff80 	bl	8003f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003052:	2026      	movs	r0, #38	; 0x26
 8003054:	f000 ff99 	bl	8003f8a <HAL_NVIC_EnableIRQ>
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <MX_I2C1_Init+0x78>)
 8003064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <MX_I2C1_Init+0x7c>)
 800306a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <MX_I2C1_Init+0x74>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003074:	2201      	movs	r2, #1
 8003076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MX_I2C1_Init+0x74>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_I2C1_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003096:	480e      	ldr	r0, [pc, #56]	; (80030d0 <MX_I2C1_Init+0x74>)
 8003098:	f001 fa28 	bl	80044ec <HAL_I2C_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030a2:	f000 faa9 	bl	80035f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030a6:	2100      	movs	r1, #0
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <MX_I2C1_Init+0x74>)
 80030aa:	f001 ff11 	bl	8004ed0 <HAL_I2CEx_ConfigAnalogFilter>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030b4:	f000 faa0 	bl	80035f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_I2C1_Init+0x74>)
 80030bc:	f001 ff53 	bl	8004f66 <HAL_I2CEx_ConfigDigitalFilter>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030c6:	f000 fa97 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000404 	.word	0x20000404
 80030d4:	40005400 	.word	0x40005400
 80030d8:	307075b1 	.word	0x307075b1

080030dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <MX_I2C2_Init+0x74>)
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <MX_I2C2_Init+0x78>)
 80030e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_I2C2_Init+0x74>)
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <MX_I2C2_Init+0x7c>)
 80030ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <MX_I2C2_Init+0x74>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <MX_I2C2_Init+0x74>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <MX_I2C2_Init+0x74>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <MX_I2C2_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <MX_I2C2_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_I2C2_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <MX_I2C2_Init+0x74>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003116:	480e      	ldr	r0, [pc, #56]	; (8003150 <MX_I2C2_Init+0x74>)
 8003118:	f001 f9e8 	bl	80044ec <HAL_I2C_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003122:	f000 fa69 	bl	80035f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003126:	2100      	movs	r1, #0
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <MX_I2C2_Init+0x74>)
 800312a:	f001 fed1 	bl	8004ed0 <HAL_I2CEx_ConfigAnalogFilter>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003134:	f000 fa60 	bl	80035f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003138:	2100      	movs	r1, #0
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_I2C2_Init+0x74>)
 800313c:	f001 ff13 	bl	8004f66 <HAL_I2CEx_ConfigDigitalFilter>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003146:	f000 fa57 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000458 	.word	0x20000458
 8003154:	40005800 	.word	0x40005800
 8003158:	307075b1 	.word	0x307075b1

0800315c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <MX_SDMMC1_SD_Init+0x40>)
 8003164:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 8003174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003178:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <MX_SDMMC1_SD_Init+0x3c>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200004ac 	.word	0x200004ac
 800319c:	50062400 	.word	0x50062400

080031a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <MX_SPI1_Init+0x74>)
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <MX_SPI1_Init+0x78>)
 80031a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <MX_SPI1_Init+0x74>)
 80031ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <MX_SPI1_Init+0x74>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_SPI1_Init+0x74>)
 80031ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <MX_SPI1_Init+0x74>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <MX_SPI1_Init+0x74>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_SPI1_Init+0x74>)
 80031ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MX_SPI1_Init+0x74>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_SPI1_Init+0x74>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_SPI1_Init+0x74>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_SPI1_Init+0x74>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_SPI1_Init+0x74>)
 80031ee:	2207      	movs	r2, #7
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_SPI1_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_SPI1_Init+0x74>)
 80031fa:	2208      	movs	r2, #8
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_SPI1_Init+0x74>)
 8003200:	f007 fa2b 	bl	800a65a <HAL_SPI_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800320a:	f000 f9f5 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000052c 	.word	0x2000052c
 8003218:	40013000 	.word	0x40013000

0800321c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b092      	sub	sp, #72	; 0x48
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	615a      	str	r2, [r3, #20]
 8003234:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003236:	463b      	mov	r3, r7
 8003238:	222c      	movs	r2, #44	; 0x2c
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f010 ffdb 	bl	80141f8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003244:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <MX_TIM17_Init+0xe8>)
 8003246:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <MX_TIM17_Init+0xe4>)
 800324a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800324e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003258:	f642 62df 	movw	r2, #11999	; 0x2edf
 800325c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003266:	2200      	movs	r2, #0
 8003268:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <MX_TIM17_Init+0xe4>)
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003270:	4823      	ldr	r0, [pc, #140]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003272:	f007 fa95 	bl	800a7a0 <HAL_TIM_Base_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800327c:	f000 f9bc 	bl	80035f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003280:	481f      	ldr	r0, [pc, #124]	; (8003300 <MX_TIM17_Init+0xe4>)
 8003282:	f007 fae4 	bl	800a84e <HAL_TIM_OC_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800328c:	f000 f9b4 	bl	80035f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003298:	2300      	movs	r3, #0
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800329c:	2300      	movs	r3, #0
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032a8:	2300      	movs	r3, #0
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032b0:	2200      	movs	r2, #0
 80032b2:	4619      	mov	r1, r3
 80032b4:	4812      	ldr	r0, [pc, #72]	; (8003300 <MX_TIM17_Init+0xe4>)
 80032b6:	f007 fc4b 	bl	800ab50 <HAL_TIM_OC_ConfigChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80032c0:	f000 f99a 	bl	80035f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80032e2:	463b      	mov	r3, r7
 80032e4:	4619      	mov	r1, r3
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <MX_TIM17_Init+0xe4>)
 80032e8:	f008 f84e 	bl	800b388 <HAL_TIMEx_ConfigBreakDeadTime>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80032f2:	f000 f981 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80032f6:	bf00      	nop
 80032f8:	3748      	adds	r7, #72	; 0x48
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000590 	.word	0x20000590
 8003304:	40014800 	.word	0x40014800

08003308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <MX_USART1_UART_Init+0x90>)
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <MX_USART1_UART_Init+0x94>)
 8003310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <MX_USART1_UART_Init+0x98>)
 8003316:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003318:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <MX_USART1_UART_Init+0x90>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <MX_USART1_UART_Init+0x90>)
 800332c:	220c      	movs	r2, #12
 800332e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <MX_USART1_UART_Init+0x90>)
 800333e:	2200      	movs	r2, #0
 8003340:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003344:	2200      	movs	r2, #0
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <MX_USART1_UART_Init+0x90>)
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800334e:	4812      	ldr	r0, [pc, #72]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003350:	f008 f8b6 	bl	800b4c0 <HAL_UART_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800335a:	f000 f94d 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800335e:	2100      	movs	r1, #0
 8003360:	480d      	ldr	r0, [pc, #52]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003362:	f009 f9e4 	bl	800c72e <HAL_UARTEx_SetTxFifoThreshold>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800336c:	f000 f944 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003370:	2100      	movs	r1, #0
 8003372:	4809      	ldr	r0, [pc, #36]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003374:	f009 fa19 	bl	800c7aa <HAL_UARTEx_SetRxFifoThreshold>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800337e:	f000 f93b 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_USART1_UART_Init+0x90>)
 8003384:	f009 f99a 	bl	800c6bc <HAL_UARTEx_DisableFifoMode>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800338e:	f000 f933 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200005dc 	.word	0x200005dc
 800339c:	40013800 	.word	0x40013800
 80033a0:	0001c138 	.word	0x0001c138

080033a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033aa:	4a23      	ldr	r2, [pc, #140]	; (8003438 <MX_USART2_UART_Init+0x94>)
 80033ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033ca:	220c      	movs	r2, #12
 80033cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033ec:	4811      	ldr	r0, [pc, #68]	; (8003434 <MX_USART2_UART_Init+0x90>)
 80033ee:	f008 f867 	bl	800b4c0 <HAL_UART_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80033f8:	f000 f8fe 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033fc:	2100      	movs	r1, #0
 80033fe:	480d      	ldr	r0, [pc, #52]	; (8003434 <MX_USART2_UART_Init+0x90>)
 8003400:	f009 f995 	bl	800c72e <HAL_UARTEx_SetTxFifoThreshold>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800340a:	f000 f8f5 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800340e:	2100      	movs	r1, #0
 8003410:	4808      	ldr	r0, [pc, #32]	; (8003434 <MX_USART2_UART_Init+0x90>)
 8003412:	f009 f9ca 	bl	800c7aa <HAL_UARTEx_SetRxFifoThreshold>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800341c:	f000 f8ec 	bl	80035f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003420:	4804      	ldr	r0, [pc, #16]	; (8003434 <MX_USART2_UART_Init+0x90>)
 8003422:	f009 f94b 	bl	800c6bc <HAL_UARTEx_DisableFifoMode>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800342c:	f000 f8e4 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000066c 	.word	0x2000066c
 8003438:	40004400 	.word	0x40004400

0800343c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	; 0x30
 8003440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003452:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003458:	f043 0310 	orr.w	r3, r3, #16
 800345c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345e:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	4a5d      	ldr	r2, [pc, #372]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003482:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800348e:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a6:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ca:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a45      	ldr	r2, [pc, #276]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <MX_GPIO_Init+0x1a8>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80034e2:	2200      	movs	r2, #0
 80034e4:	f641 013c 	movw	r1, #6204	; 0x183c
 80034e8:	483f      	ldr	r0, [pc, #252]	; (80035e8 <MX_GPIO_Init+0x1ac>)
 80034ea:	f000 ffcd 	bl	8004488 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2130      	movs	r1, #48	; 0x30
 80034f2:	483e      	ldr	r0, [pc, #248]	; (80035ec <MX_GPIO_Init+0x1b0>)
 80034f4:	f000 ffc8 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2178      	movs	r1, #120	; 0x78
 80034fc:	483c      	ldr	r0, [pc, #240]	; (80035f0 <MX_GPIO_Init+0x1b4>)
 80034fe:	f000 ffc3 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003502:	f641 033c 	movw	r3, #6204	; 0x183c
 8003506:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4619      	mov	r1, r3
 800351a:	4833      	ldr	r0, [pc, #204]	; (80035e8 <MX_GPIO_Init+0x1ac>)
 800351c:	f000 fe0a 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	4619      	mov	r1, r3
 8003534:	482d      	ldr	r0, [pc, #180]	; (80035ec <MX_GPIO_Init+0x1b0>)
 8003536:	f000 fdfd 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 800353a:	2302      	movs	r3, #2
 800353c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003550:	f000 fdf0 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8003554:	2330      	movs	r3, #48	; 0x30
 8003556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003558:	2301      	movs	r3, #1
 800355a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4820      	ldr	r0, [pc, #128]	; (80035ec <MX_GPIO_Init+0x1b0>)
 800356c:	f000 fde2 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8003570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357a:	2301      	movs	r3, #1
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4818      	ldr	r0, [pc, #96]	; (80035e8 <MX_GPIO_Init+0x1ac>)
 8003586:	f000 fdd5 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 800358a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003594:	2301      	movs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a2:	f000 fdc7 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80035a6:	2378      	movs	r3, #120	; 0x78
 80035a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b6:	f107 031c 	add.w	r3, r7, #28
 80035ba:	4619      	mov	r1, r3
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_GPIO_Init+0x1b4>)
 80035be:	f000 fdb9 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80035c2:	2320      	movs	r3, #32
 80035c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	4807      	ldr	r0, [pc, #28]	; (80035f4 <MX_GPIO_Init+0x1b8>)
 80035d6:	f000 fdad 	bl	8004134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035da:	bf00      	nop
 80035dc:	3730      	adds	r7, #48	; 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	48001000 	.word	0x48001000
 80035ec:	48000800 	.word	0x48000800
 80035f0:	48000c00 	.word	0x48000c00
 80035f4:	48000400 	.word	0x48000400

080035f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
}
 80035fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8003600:	4801      	ldr	r0, [pc, #4]	; (8003608 <Error_Handler+0x10>)
 8003602:	f010 fee1 	bl	80143c8 <iprintf>
  while (1)
 8003606:	e7fe      	b.n	8003606 <Error_Handler+0xe>
 8003608:	080152d0 	.word	0x080152d0

0800360c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_MspInit+0x44>)
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <HAL_MspInit+0x44>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6613      	str	r3, [r2, #96]	; 0x60
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_MspInit+0x44>)
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_MspInit+0x44>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_MspInit+0x44>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_MspInit+0x44>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0b0      	sub	sp, #192	; 0xc0
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366c:	f107 0318 	add.w	r3, r7, #24
 8003670:	2294      	movs	r2, #148	; 0x94
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f010 fdbf 	bl	80141f8 <memset>
  if(hi2c->Instance==I2C1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_I2C_MspInit+0x134>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d13b      	bne.n	80036fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003688:	2300      	movs	r3, #0
 800368a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fe57 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800369c:	f7ff ffac 	bl	80035f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b3a      	ldr	r3, [pc, #232]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a4:	4a39      	ldr	r2, [pc, #228]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036be:	2312      	movs	r3, #18
 80036c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036d0:	2304      	movs	r3, #4
 80036d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036da:	4619      	mov	r1, r3
 80036dc:	482c      	ldr	r0, [pc, #176]	; (8003790 <HAL_I2C_MspInit+0x13c>)
 80036de:	f000 fd29 	bl	8004134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	4a29      	ldr	r2, [pc, #164]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ec:	6593      	str	r3, [r2, #88]	; 0x58
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_I2C_MspInit+0x138>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80036fa:	e040      	b.n	800377e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <HAL_I2C_MspInit+0x140>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d13b      	bne.n	800377e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800370a:	2300      	movs	r3, #0
 800370c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800370e:	f107 0318 	add.w	r3, r7, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fe16 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800371e:	f7ff ff6b 	bl	80035f8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <HAL_I2C_MspInit+0x138>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_I2C_MspInit+0x138>)
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_I2C_MspInit+0x138>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800373a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800373e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003742:	2312      	movs	r3, #18
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003754:	2304      	movs	r3, #4
 8003756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800375e:	4619      	mov	r1, r3
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <HAL_I2C_MspInit+0x13c>)
 8003762:	f000 fce7 	bl	8004134 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_I2C_MspInit+0x138>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_I2C_MspInit+0x138>)
 800376c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_I2C_MspInit+0x138>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
}
 800377e:	bf00      	nop
 8003780:	37c0      	adds	r7, #192	; 0xc0
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40005400 	.word	0x40005400
 800378c:	40021000 	.word	0x40021000
 8003790:	48000400 	.word	0x48000400
 8003794:	40005800 	.word	0x40005800

08003798 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b0b0      	sub	sp, #192	; 0xc0
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b0:	f107 0318 	add.w	r3, r7, #24
 80037b4:	2294      	movs	r2, #148	; 0x94
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f010 fd1d 	bl	80141f8 <memset>
  if(hsd->Instance==SDMMC1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a33      	ldr	r2, [pc, #204]	; (8003890 <HAL_SD_MspInit+0xf8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d15f      	bne.n	8003888 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80037c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80037ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d6:	f107 0318 	add.w	r3, r7, #24
 80037da:	4618      	mov	r0, r3
 80037dc:	f003 fdb2 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80037e6:	f7ff ff07 	bl	80035f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_SD_MspInit+0xfc>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <HAL_SD_MspInit+0xfc>)
 80037f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_SD_MspInit+0xfc>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_SD_MspInit+0xfc>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <HAL_SD_MspInit+0xfc>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_SD_MspInit+0xfc>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_SD_MspInit+0xfc>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_SD_MspInit+0xfc>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_SD_MspInit+0xfc>)
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003832:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800384c:	230c      	movs	r3, #12
 800384e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003856:	4619      	mov	r1, r3
 8003858:	480f      	ldr	r0, [pc, #60]	; (8003898 <HAL_SD_MspInit+0x100>)
 800385a:	f000 fc6b 	bl	8004134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800385e:	2304      	movs	r3, #4
 8003860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003876:	230c      	movs	r3, #12
 8003878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800387c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003880:	4619      	mov	r1, r3
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <HAL_SD_MspInit+0x104>)
 8003884:	f000 fc56 	bl	8004134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003888:	bf00      	nop
 800388a:	37c0      	adds	r7, #192	; 0xc0
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	50062400 	.word	0x50062400
 8003894:	40021000 	.word	0x40021000
 8003898:	48000800 	.word	0x48000800
 800389c:	48000c00 	.word	0x48000c00

080038a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_SPI_MspInit+0x7c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d128      	bne.n	8003914 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038cc:	6613      	str	r3, [r2, #96]	; 0x60
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_SPI_MspInit+0x80>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038f2:	23f0      	movs	r3, #240	; 0xf0
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003902:	2305      	movs	r3, #5
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003910:	f000 fc10 	bl	8004134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013000 	.word	0x40013000
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_TIM_Base_MspInit+0x38>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10b      	bne.n	800394e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003940:	6613      	str	r3, [r2, #96]	; 0x60
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40014800 	.word	0x40014800
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0b0      	sub	sp, #192	; 0xc0
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	2294      	movs	r2, #148	; 0x94
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f010 fc37 	bl	80141f8 <memset>
  if(huart->Instance==USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_UART_MspInit+0x138>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d13d      	bne.n	8003a10 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003994:	2301      	movs	r3, #1
 8003996:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003998:	2300      	movs	r3, #0
 800399a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800399c:	f107 0318 	add.w	r3, r7, #24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fccf 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039ac:	f7ff fe24 	bl	80035f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ba:	6613      	str	r3, [r2, #96]	; 0x60
 80039bc:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80039e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039fa:	2307      	movs	r3, #7
 80039fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a04:	4619      	mov	r1, r3
 8003a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0a:	f000 fb93 	bl	8004134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a0e:	e040      	b.n	8003a92 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_UART_MspInit+0x140>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d13b      	bne.n	8003a92 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a22:	f107 0318 	add.w	r3, r7, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 fc8c 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003a32:	f7ff fde1 	bl	80035f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_UART_MspInit+0x13c>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003a66:	230c      	movs	r3, #12
 8003a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a7e:	2307      	movs	r3, #7
 8003a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f000 fb51 	bl	8004134 <HAL_GPIO_Init>
}
 8003a92:	bf00      	nop
 8003a94:	37c0      	adds	r7, #192	; 0xc0
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40004400 	.word	0x40004400

08003aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003aac:	f003 fb6e 	bl	800718c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <NMI_Handler+0x8>

08003ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <HardFault_Handler+0x4>

08003ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <MemManage_Handler+0x4>

08003abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac2:	e7fe      	b.n	8003ac2 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af8:	f000 f90c 	bl	8003d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003b06:	f006 ff03 	bl	800a910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000590 	.word	0x20000590

08003b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <USART2_IRQHandler+0xac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1) { rxBuffer[rxBufferPos++] = (uint8_t) c; }
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <USART2_IRQHandler+0xb4>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	b2c8      	uxtb	r0, r1
 8003b36:	4923      	ldr	r1, [pc, #140]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b38:	7008      	strb	r0, [r1, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	79fa      	ldrb	r2, [r7, #7]
 8003b3e:	701a      	strb	r2, [r3, #0]

    if ((c == '\n')) { //(c == '\r') ||
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	2b0a      	cmp	r3, #10
 8003b44:	d131      	bne.n	8003baa <USART2_IRQHandler+0x96>
    	messagecounter++;
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <USART2_IRQHandler+0xb8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <USART2_IRQHandler+0xb8>)
 8003b4e:	6013      	str	r3, [r2, #0]
    	if (messagecounter == 12) {
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <USART2_IRQHandler+0xb8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d128      	bne.n	8003baa <USART2_IRQHandler+0x96>
    	messagecounter = 0;
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <USART2_IRQHandler+0xb8>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
        rxBuffer[rxBufferPos] = 0;
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <USART2_IRQHandler+0xb4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	4413      	add	r3, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
        if (rxBufferPos > 1) {
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d905      	bls.n	8003b84 <USART2_IRQHandler+0x70>
            data_ready |= 1;
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <USART2_IRQHandler+0xbc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <USART2_IRQHandler+0xbc>)
 8003b82:	6013      	str	r3, [r2, #0]
        }
        rxBufferPos = 0;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <USART2_IRQHandler+0xb0>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
        if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <USART2_IRQHandler+0xb4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <USART2_IRQHandler+0xc0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d103      	bne.n	8003b9c <USART2_IRQHandler+0x88>
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <USART2_IRQHandler+0xb4>)
 8003b96:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <USART2_IRQHandler+0xc4>)
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e002      	b.n	8003ba2 <USART2_IRQHandler+0x8e>
        else {rxBuffer = rxBuffer1;}
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <USART2_IRQHandler+0xb4>)
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <USART2_IRQHandler+0xc0>)
 8003ba0:	601a      	str	r2, [r3, #0]
  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <USART2_IRQHandler+0xc8>)
 8003ba6:	f000 fc87 	bl	80044b8 <HAL_GPIO_TogglePin>
    } }
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003baa:	2108      	movs	r1, #8
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <USART2_IRQHandler+0xc8>)
 8003bae:	f000 fc83 	bl	80044b8 <HAL_GPIO_TogglePin>
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <USART2_IRQHandler+0xac>)
 8003bb4:	f007 fcd4 	bl	800b560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	2000066c 	.word	0x2000066c
 8003bc4:	20000c78 	.word	0x20000c78
 8003bc8:	20000c74 	.word	0x20000c74
 8003bcc:	20000c7c 	.word	0x20000c7c
 8003bd0:	20000c80 	.word	0x20000c80
 8003bd4:	200006fc 	.word	0x200006fc
 8003bd8:	200009b8 	.word	0x200009b8
 8003bdc:	48000c00 	.word	0x48000c00

08003be0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <OTG_FS_IRQHandler+0x10>)
 8003be6:	f001 fb5d 	bl	80052a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200025f8 	.word	0x200025f8

08003bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <SystemInit+0x20>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <SystemInit+0x20>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c1c:	f7ff ffea 	bl	8003bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c20:	480c      	ldr	r0, [pc, #48]	; (8003c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c22:	490d      	ldr	r1, [pc, #52]	; (8003c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <LoopForever+0xe>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c28:	e002      	b.n	8003c30 <LoopCopyDataInit>

08003c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c2e:	3304      	adds	r3, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c34:	d3f9      	bcc.n	8003c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c38:	4c0a      	ldr	r4, [pc, #40]	; (8003c64 <LoopForever+0x16>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c3c:	e001      	b.n	8003c42 <LoopFillZerobss>

08003c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c40:	3204      	adds	r2, #4

08003c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c44:	d3fb      	bcc.n	8003c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c46:	f010 faa5 	bl	8014194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c4a:	f7fe fedb 	bl	8002a04 <main>

08003c4e <LoopForever>:

LoopForever:
    b LoopForever
 8003c4e:	e7fe      	b.n	8003c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c50:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003c5c:	08015540 	.word	0x08015540
  ldr r2, =_sbss
 8003c60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003c64:	20002d38 	.word	0x20002d38

08003c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c68:	e7fe      	b.n	8003c68 <ADC1_IRQHandler>

08003c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f000 f961 	bl	8003f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c7a:	200f      	movs	r0, #15
 8003c7c:	f000 f80e 	bl	8003c9c <HAL_InitTick>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	e001      	b.n	8003c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c8c:	f7ff fcbe 	bl	800360c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c90:	79fb      	ldrb	r3, [r7, #7]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_InitTick+0x6c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_InitTick+0x70>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_InitTick+0x6c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f96d 	bl	8003fa6 <HAL_SYSTICK_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d809      	bhi.n	8003cec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce0:	f000 f937 	bl	8003f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_InitTick+0x74>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e007      	b.n	8003cfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
 8003cf0:	e004      	b.n	8003cfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	e001      	b.n	8003cfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000008 	.word	0x20000008
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_IncTick+0x20>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_IncTick+0x24>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_IncTick+0x24>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000008 	.word	0x20000008
 8003d38:	20000c84 	.word	0x20000c84

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_GetTick+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000c84 	.word	0x20000c84

08003d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7ff ffee 	bl	8003d3c <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6c:	d005      	beq.n	8003d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_Delay+0x44>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d7a:	bf00      	nop
 8003d7c:	f7ff ffde 	bl	8003d3c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d8f7      	bhi.n	8003d7c <HAL_Delay+0x28>
  {
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000008 	.word	0x20000008

08003d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dce:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	60d3      	str	r3, [r2, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <__NVIC_GetPriorityGrouping+0x18>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	f003 0307 	and.w	r3, r3, #7
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	4907      	ldr	r1, [pc, #28]	; (8003e38 <__NVIC_EnableIRQ+0x38>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000e100 	.word	0xe000e100

08003e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	db0a      	blt.n	8003e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	490c      	ldr	r1, [pc, #48]	; (8003e88 <__NVIC_SetPriority+0x4c>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e64:	e00a      	b.n	8003e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <__NVIC_SetPriority+0x50>)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3b04      	subs	r3, #4
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	761a      	strb	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1c3 0307 	rsb	r3, r3, #7
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf28      	it	cs
 8003eae:	2304      	movcs	r3, #4
 8003eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d902      	bls.n	8003ec0 <NVIC_EncodePriority+0x30>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3b03      	subs	r3, #3
 8003ebe:	e000      	b.n	8003ec2 <NVIC_EncodePriority+0x32>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	43d9      	mvns	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	4313      	orrs	r3, r2
         );
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3724      	adds	r7, #36	; 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f08:	d301      	bcc.n	8003f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00f      	b.n	8003f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <SysTick_Config+0x40>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f16:	210f      	movs	r1, #15
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1c:	f7ff ff8e 	bl	8003e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <SysTick_Config+0x40>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f26:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <SysTick_Config+0x40>)
 8003f28:	2207      	movs	r2, #7
 8003f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000e010 	.word	0xe000e010

08003f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff29 	bl	8003d9c <__NVIC_SetPriorityGrouping>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f64:	f7ff ff3e 	bl	8003de4 <__NVIC_GetPriorityGrouping>
 8003f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f7ff ff8e 	bl	8003e90 <NVIC_EncodePriority>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff5d 	bl	8003e3c <__NVIC_SetPriority>
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff31 	bl	8003e00 <__NVIC_EnableIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ffa2 	bl	8003ef8 <SysTick_Config>
 8003fb4:	4603      	mov	r3, r0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d008      	beq.n	8003fe8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e040      	b.n	800406a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020e 	bic.w	r2, r2, #14
 8003ff6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f003 021c 	and.w	r2, r3, #28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f202 	lsl.w	r2, r1, r2
 800402a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004034:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004056:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d005      	beq.n	800409a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e047      	b.n	800412a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 020e 	bic.w	r2, r2, #14
 80040a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f003 021c 	and.w	r2, r3, #28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040e6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004108:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
    }
  }
  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004142:	e166      	b.n	8004412 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8158 	beq.w	800440c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d005      	beq.n	8004174 <HAL_GPIO_Init+0x40>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d130      	bne.n	80041d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041aa:	2201      	movs	r2, #1
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0201 	and.w	r2, r3, #1
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d017      	beq.n	8004212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d123      	bne.n	8004266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0203 	and.w	r2, r3, #3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80b2 	beq.w	800440c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a8:	4b61      	ldr	r3, [pc, #388]	; (8004430 <HAL_GPIO_Init+0x2fc>)
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	4a60      	ldr	r2, [pc, #384]	; (8004430 <HAL_GPIO_Init+0x2fc>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6613      	str	r3, [r2, #96]	; 0x60
 80042b4:	4b5e      	ldr	r3, [pc, #376]	; (8004430 <HAL_GPIO_Init+0x2fc>)
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042c0:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <HAL_GPIO_Init+0x300>)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	3302      	adds	r3, #2
 80042c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	220f      	movs	r2, #15
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042ea:	d02b      	beq.n	8004344 <HAL_GPIO_Init+0x210>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_GPIO_Init+0x304>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d025      	beq.n	8004340 <HAL_GPIO_Init+0x20c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a51      	ldr	r2, [pc, #324]	; (800443c <HAL_GPIO_Init+0x308>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01f      	beq.n	800433c <HAL_GPIO_Init+0x208>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a50      	ldr	r2, [pc, #320]	; (8004440 <HAL_GPIO_Init+0x30c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d019      	beq.n	8004338 <HAL_GPIO_Init+0x204>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a4f      	ldr	r2, [pc, #316]	; (8004444 <HAL_GPIO_Init+0x310>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_GPIO_Init+0x200>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <HAL_GPIO_Init+0x314>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00d      	beq.n	8004330 <HAL_GPIO_Init+0x1fc>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a4d      	ldr	r2, [pc, #308]	; (800444c <HAL_GPIO_Init+0x318>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <HAL_GPIO_Init+0x1f8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a4c      	ldr	r2, [pc, #304]	; (8004450 <HAL_GPIO_Init+0x31c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_GPIO_Init+0x1f4>
 8004324:	2307      	movs	r3, #7
 8004326:	e00e      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004328:	2308      	movs	r3, #8
 800432a:	e00c      	b.n	8004346 <HAL_GPIO_Init+0x212>
 800432c:	2306      	movs	r3, #6
 800432e:	e00a      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004330:	2305      	movs	r3, #5
 8004332:	e008      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004334:	2304      	movs	r3, #4
 8004336:	e006      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004338:	2303      	movs	r3, #3
 800433a:	e004      	b.n	8004346 <HAL_GPIO_Init+0x212>
 800433c:	2302      	movs	r3, #2
 800433e:	e002      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_GPIO_Init+0x212>
 8004344:	2300      	movs	r3, #0
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	f002 0203 	and.w	r2, r2, #3
 800434c:	0092      	lsls	r2, r2, #2
 800434e:	4093      	lsls	r3, r2
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004356:	4937      	ldr	r1, [pc, #220]	; (8004434 <HAL_GPIO_Init+0x300>)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	3302      	adds	r3, #2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004364:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_GPIO_Init+0x320>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004388:	4a32      	ldr	r2, [pc, #200]	; (8004454 <HAL_GPIO_Init+0x320>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_GPIO_Init+0x320>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043b2:	4a28      	ldr	r2, [pc, #160]	; (8004454 <HAL_GPIO_Init+0x320>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043b8:	4b26      	ldr	r3, [pc, #152]	; (8004454 <HAL_GPIO_Init+0x320>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4013      	ands	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_GPIO_Init+0x320>)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_GPIO_Init+0x320>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <HAL_GPIO_Init+0x320>)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f ae91 	bne.w	8004144 <HAL_GPIO_Init+0x10>
  }
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40021000 	.word	0x40021000
 8004434:	40010000 	.word	0x40010000
 8004438:	48000400 	.word	0x48000400
 800443c:	48000800 	.word	0x48000800
 8004440:	48000c00 	.word	0x48000c00
 8004444:	48001000 	.word	0x48001000
 8004448:	48001400 	.word	0x48001400
 800444c:	48001800 	.word	0x48001800
 8004450:	48001c00 	.word	0x48001c00
 8004454:	40010400 	.word	0x40010400

08004458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	887b      	ldrh	r3, [r7, #2]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e001      	b.n	800447a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044a4:	e002      	b.n	80044ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43d9      	mvns	r1, r3
 80044d6:	887b      	ldrh	r3, [r7, #2]
 80044d8:	400b      	ands	r3, r1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e081      	b.n	8004602 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff f89e 	bl	8003654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800453c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800454c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e006      	b.n	8004574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d104      	bne.n	8004586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	460b      	mov	r3, r1
 800461a:	817b      	strh	r3, [r7, #10]
 800461c:	4613      	mov	r3, r2
 800461e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 80da 	bne.w	80047e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_I2C_Master_Transmit+0x30>
 8004638:	2302      	movs	r3, #2
 800463a:	e0d3      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004644:	f7ff fb7a 	bl	8003d3c <HAL_GetTick>
 8004648:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2319      	movs	r3, #25
 8004650:	2201      	movs	r2, #1
 8004652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f9e6 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0be      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	; 0x21
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2210      	movs	r2, #16
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	893a      	ldrh	r2, [r7, #8]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2bff      	cmp	r3, #255	; 0xff
 8004696:	d90e      	bls.n	80046b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	8979      	ldrh	r1, [r7, #10]
 80046a6:	4b51      	ldr	r3, [pc, #324]	; (80047ec <HAL_I2C_Master_Transmit+0x1e0>)
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fbdc 	bl	8004e6c <I2C_TransferConfig>
 80046b4:	e06c      	b.n	8004790 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	8979      	ldrh	r1, [r7, #10]
 80046c8:	4b48      	ldr	r3, [pc, #288]	; (80047ec <HAL_I2C_Master_Transmit+0x1e0>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fbcb 	bl	8004e6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046d6:	e05b      	b.n	8004790 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	6a39      	ldr	r1, [r7, #32]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9e3 	bl	8004aa8 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e07b      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d034      	beq.n	8004790 <HAL_I2C_Master_Transmit+0x184>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d130      	bne.n	8004790 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	2200      	movs	r2, #0
 8004736:	2180      	movs	r1, #128	; 0x80
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f975 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e04d      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d90e      	bls.n	8004770 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	8979      	ldrh	r1, [r7, #10]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fb7f 	bl	8004e6c <I2C_TransferConfig>
 800476e:	e00f      	b.n	8004790 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	b2da      	uxtb	r2, r3
 8004780:	8979      	ldrh	r1, [r7, #10]
 8004782:	2300      	movs	r3, #0
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb6e 	bl	8004e6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d19e      	bne.n	80046d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	6a39      	ldr	r1, [r7, #32]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f9c2 	bl	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e01a      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2220      	movs	r2, #32
 80047b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80047c2:	400b      	ands	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	80002000 	.word	0x80002000
 80047f0:	fe00e800 	.word	0xfe00e800

080047f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b20      	cmp	r3, #32
 8004812:	f040 80db 	bne.w	80049cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_I2C_Master_Receive+0x30>
 8004820:	2302      	movs	r3, #2
 8004822:	e0d4      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800482c:	f7ff fa86 	bl	8003d3c <HAL_GetTick>
 8004830:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2319      	movs	r3, #25
 8004838:	2201      	movs	r2, #1
 800483a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f8f2 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0bf      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2222      	movs	r2, #34	; 0x22
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2210      	movs	r2, #16
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	893a      	ldrh	r2, [r7, #8]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2bff      	cmp	r3, #255	; 0xff
 800487e:	d90e      	bls.n	800489e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <HAL_I2C_Master_Receive+0x1e4>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fae8 	bl	8004e6c <I2C_TransferConfig>
 800489c:	e06d      	b.n	800497a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <HAL_I2C_Master_Receive+0x1e4>)
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fad7 	bl	8004e6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048be:	e05c      	b.n	800497a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	6a39      	ldr	r1, [r7, #32]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f96b 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e07c      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d034      	beq.n	800497a <HAL_I2C_Master_Receive+0x186>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d130      	bne.n	800497a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f880 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e04d      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	2bff      	cmp	r3, #255	; 0xff
 800493a:	d90e      	bls.n	800495a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	22ff      	movs	r2, #255	; 0xff
 8004940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	b2da      	uxtb	r2, r3
 8004948:	8979      	ldrh	r1, [r7, #10]
 800494a:	2300      	movs	r3, #0
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fa8a 	bl	8004e6c <I2C_TransferConfig>
 8004958:	e00f      	b.n	800497a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	b2da      	uxtb	r2, r3
 800496a:	8979      	ldrh	r1, [r7, #10]
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fa79 	bl	8004e6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d19d      	bne.n	80048c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	6a39      	ldr	r1, [r7, #32]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f8cd 	bl	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e01a      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2220      	movs	r2, #32
 800499e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_I2C_Master_Receive+0x1e8>)
 80049ac:	400b      	ands	r3, r1
 80049ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	80002400 	.word	0x80002400
 80049dc:	fe00e800 	.word	0xfe00e800

080049e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d103      	bne.n	80049fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d007      	beq.n	8004a1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	619a      	str	r2, [r3, #24]
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a38:	e022      	b.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a40:	d01e      	beq.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7ff f97b 	bl	8003d3c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e00f      	b.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d0cd      	beq.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab4:	e02c      	b.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8ea 	bl	8004c94 <I2C_IsErrorOccurred>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e02a      	b.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d01e      	beq.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7ff f933 	bl	8003d3c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d1cb      	bne.n	8004ab6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b34:	e028      	b.n	8004b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f8aa 	bl	8004c94 <I2C_IsErrorOccurred>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e026      	b.n	8004b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7ff f8f7 	bl	8003d3c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d113      	bne.n	8004b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e007      	b.n	8004b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d1cf      	bne.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bac:	e064      	b.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f86e 	bl	8004c94 <I2C_IsErrorOccurred>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e062      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d138      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d105      	bne.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e04e      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d107      	bne.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2204      	movs	r2, #4
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
 8004c06:	e002      	b.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2220      	movs	r2, #32
 8004c14:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7ff f87b 	bl	8003d3c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d193      	bne.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	fe00e800 	.word	0xfe00e800

08004c94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d075      	beq.n	8004dac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cc8:	e056      	b.n	8004d78 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd0:	d052      	beq.n	8004d78 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7ff f833 	bl	8003d3c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <I2C_IsErrorOccurred+0x54>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d147      	bne.n	8004d78 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0a:	d12e      	bne.n	8004d6a <I2C_IsErrorOccurred+0xd6>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d12:	d02a      	beq.n	8004d6a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d027      	beq.n	8004d6a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d2a:	f7ff f807 	bl	8003d3c <HAL_GetTick>
 8004d2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d30:	e01b      	b.n	8004d6a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d32:	f7ff f803 	bl	8003d3c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b19      	cmp	r3, #25
 8004d3e:	d914      	bls.n	8004d6a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d1dc      	bne.n	8004d32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d003      	beq.n	8004d8e <I2C_IsErrorOccurred+0xfa>
 8004d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d09d      	beq.n	8004cca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f043 0308 	orr.w	r3, r3, #8
 8004de6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01c      	beq.n	8004e5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff fddc 	bl	80049e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <I2C_IsErrorOccurred+0x1d4>)
 8004e34:	400b      	ands	r3, r1
 8004e36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fe00e800 	.word	0xfe00e800

08004e6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e84:	7a7b      	ldrb	r3, [r7, #9]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <I2C_TransferConfig+0x60>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	ea02 0103 	and.w	r1, r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	03ff63ff 	.word	0x03ff63ff

08004ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d138      	bne.n	8004f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e032      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d139      	bne.n	8004ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e033      	b.n	8004ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2224      	movs	r2, #36	; 0x24
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005000:	b08f      	sub	sp, #60	; 0x3c
 8005002:	af0a      	add	r7, sp, #40	; 0x28
 8005004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e116      	b.n	800523e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f00e fcce 	bl	80139cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2203      	movs	r2, #3
 8005034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f008 faf7 	bl	800d642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	687e      	ldr	r6, [r7, #4]
 800505c:	466d      	mov	r5, sp
 800505e:	f106 0410 	add.w	r4, r6, #16
 8005062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800506a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800506e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005072:	1d33      	adds	r3, r6, #4
 8005074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005076:	6838      	ldr	r0, [r7, #0]
 8005078:	f008 fa0a 	bl	800d490 <USB_CoreInit>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0d7      	b.n	800523e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f008 fae5 	bl	800d664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
 800509e:	e04a      	b.n	8005136 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	333d      	adds	r3, #61	; 0x3d
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	333c      	adds	r3, #60	; 0x3c
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	b298      	uxth	r0, r3
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3344      	adds	r3, #68	; 0x44
 80050dc:	4602      	mov	r2, r0
 80050de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3340      	adds	r3, #64	; 0x40
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3348      	adds	r3, #72	; 0x48
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	334c      	adds	r3, #76	; 0x4c
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	3354      	adds	r3, #84	; 0x54
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	3301      	adds	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	7bfa      	ldrb	r2, [r7, #15]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d3af      	bcc.n	80050a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e044      	b.n	80051d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005188:	7bfa      	ldrb	r2, [r7, #15]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	3301      	adds	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3b5      	bcc.n	8005146 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	687e      	ldr	r6, [r7, #4]
 80051e2:	466d      	mov	r5, sp
 80051e4:	f106 0410 	add.w	r4, r6, #16
 80051e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80051f8:	1d33      	adds	r3, r6, #4
 80051fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051fc:	6838      	ldr	r0, [r7, #0]
 80051fe:	f008 fa7d 	bl	800d6fc <USB_DevInit>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e014      	b.n	800523e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b01      	cmp	r3, #1
 800522a:	d102      	bne.n	8005232 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f881 	bl	8006334 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f009 fb05 	bl	800e846 <USB_DevDisconnect>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005246 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_PCD_Start+0x1c>
 800525e:	2302      	movs	r3, #2
 8005260:	e01c      	b.n	800529c <HAL_PCD_Start+0x56>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f008 f9cc 	bl	800d620 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f009 fab9 	bl	800e804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b08d      	sub	sp, #52	; 0x34
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f009 fb77 	bl	800e9ae <USB_GetMode>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 847e 	bne.w	8005bc4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f009 fadb 	bl	800e888 <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8474 	beq.w	8005bc2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f009 fac8 	bl	800e888 <USB_ReadInterrupts>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d107      	bne.n	8005312 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f002 0202 	and.w	r2, r2, #2
 8005310:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f009 fab6 	bl	800e888 <USB_ReadInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b10      	cmp	r3, #16
 8005324:	d161      	bne.n	80053ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0210 	bic.w	r2, r2, #16
 8005334:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f003 020f 	and.w	r2, r3, #15
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	3304      	adds	r3, #4
 8005354:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	0c5b      	lsrs	r3, r3, #17
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	2b02      	cmp	r3, #2
 8005360:	d124      	bne.n	80053ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d035      	beq.n	80053da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	6a38      	ldr	r0, [r7, #32]
 8005382:	f009 f8ed 	bl	800e560 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005392:	441a      	add	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a4:	441a      	add	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	621a      	str	r2, [r3, #32]
 80053aa:	e016      	b.n	80053da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	0c5b      	lsrs	r3, r3, #17
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d110      	bne.n	80053da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053be:	2208      	movs	r2, #8
 80053c0:	4619      	mov	r1, r3
 80053c2:	6a38      	ldr	r0, [r7, #32]
 80053c4:	f009 f8cc 	bl	800e560 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053d4:	441a      	add	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0210 	orr.w	r2, r2, #16
 80053e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f009 fa4a 	bl	800e888 <USB_ReadInterrupts>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053fe:	f040 80a7 	bne.w	8005550 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f009 fa4f 	bl	800e8ae <USB_ReadDevAllOutEpInterrupt>
 8005410:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005412:	e099      	b.n	8005548 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808e 	beq.w	800553c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f009 fa73 	bl	800e916 <USB_ReadDevOutEPInterrupt>
 8005430:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	461a      	mov	r2, r3
 800544a:	2301      	movs	r3, #1
 800544c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800544e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fe95 	bl	8006180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	461a      	mov	r2, r3
 800546e:	2308      	movs	r3, #8
 8005470:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fed1 	bl	800621c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	461a      	mov	r2, r3
 8005492:	2310      	movs	r3, #16
 8005494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d030      	beq.n	8005502 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d109      	bne.n	80054c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d108      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f00e fbb2 	bl	8013c54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	461a      	mov	r2, r3
 80054fe:	2302      	movs	r3, #2
 8005500:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	2320      	movs	r3, #32
 800551c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	461a      	mov	r2, r3
 8005536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800553a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	3301      	adds	r3, #1
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	f47f af62 	bne.w	8005414 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f009 f997 	bl	800e888 <USB_ReadInterrupts>
 800555a:	4603      	mov	r3, r0
 800555c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005564:	f040 80a4 	bne.w	80056b0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f009 f9b8 	bl	800e8e2 <USB_ReadDevAllInEpInterrupt>
 8005572:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005578:	e096      	b.n	80056a8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 808b 	beq.w	800569c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f009 f9de 	bl	800e952 <USB_ReadDevInEPInterrupt>
 8005596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d020      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2201      	movs	r2, #1
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c2:	4013      	ands	r3, r2
 80055c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	461a      	mov	r2, r3
 80055d4:	2301      	movs	r3, #1
 80055d6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f00e faa3 	bl	8013b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	461a      	mov	r2, r3
 80055fc:	2308      	movs	r3, #8
 80055fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	461a      	mov	r2, r3
 8005618:	2310      	movs	r3, #16
 800561a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	461a      	mov	r2, r3
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d023      	beq.n	800568a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005644:	6a38      	ldr	r0, [r7, #32]
 8005646:	f008 f9a5 	bl	800d994 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	3338      	adds	r3, #56	; 0x38
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	3304      	adds	r3, #4
 800565c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	78db      	ldrb	r3, [r3, #3]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d108      	bne.n	8005678 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2200      	movs	r2, #0
 800566a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f00e fb00 	bl	8013c78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	461a      	mov	r2, r3
 8005686:	2302      	movs	r3, #2
 8005688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fcea 	bl	8006070 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f47f af65 	bne.w	800557a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f009 f8e7 	bl	800e888 <USB_ReadInterrupts>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c4:	d122      	bne.n	800570c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d108      	bne.n	80056f6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056ec:	2100      	movs	r1, #0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fe44 	bl	800637c <HAL_PCDEx_LPM_Callback>
 80056f4:	e002      	b.n	80056fc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f00e fa84 	bl	8013c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800570a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f009 f8b9 	bl	800e888 <USB_ReadInterrupts>
 8005716:	4603      	mov	r3, r0
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005720:	d112      	bne.n	8005748 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d102      	bne.n	8005738 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f00e fa40 	bl	8013bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005746:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f009 f89b 	bl	800e888 <USB_ReadInterrupts>
 8005752:	4603      	mov	r3, r0
 8005754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575c:	d121      	bne.n	80057a2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800576c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d111      	bne.n	800579c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005792:	2101      	movs	r1, #1
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fdf1 	bl	800637c <HAL_PCDEx_LPM_Callback>
 800579a:	e002      	b.n	80057a2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f00e fa0b 	bl	8013bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f009 f86e 	bl	800e888 <USB_ReadInterrupts>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	f040 80b5 	bne.w	8005924 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2110      	movs	r1, #16
 80057d4:	4618      	mov	r0, r3
 80057d6:	f008 f8dd 	bl	800d994 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057de:	e046      	b.n	800586e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	461a      	mov	r2, r3
 80057ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005826:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005866:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	3301      	adds	r3, #1
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d3b3      	bcc.n	80057e0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005886:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800588a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	2b00      	cmp	r3, #0
 8005892:	d016      	beq.n	80058c2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a4:	f043 030b 	orr.w	r3, r3, #11
 80058a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ba:	f043 030b 	orr.w	r3, r3, #11
 80058be:	6453      	str	r3, [r2, #68]	; 0x44
 80058c0:	e015      	b.n	80058ee <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80058d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e8:	f043 030b 	orr.w	r3, r3, #11
 80058ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005900:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f009 f87e 	bl	800ea10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f008 ffad 	bl	800e888 <USB_ReadInterrupts>
 800592e:	4603      	mov	r3, r0
 8005930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d124      	bne.n	8005984 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f009 f843 	bl	800e9ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f008 f8a0 	bl	800da8e <USB_GetDevSpeed>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681c      	ldr	r4, [r3, #0]
 800595a:	f001 fbcf 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 800595e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	4620      	mov	r0, r4
 800596a:	f007 fdbd 	bl	800d4e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f00e f903 	bl	8013b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005982:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f008 ff7d 	bl	800e888 <USB_ReadInterrupts>
 800598e:	4603      	mov	r3, r0
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d10a      	bne.n	80059ae <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f00e f8e0 	bl	8013b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f002 0208 	and.w	r2, r2, #8
 80059ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 ff68 	bl	800e888 <USB_ReadInterrupts>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d122      	bne.n	8005a08 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059ce:	2301      	movs	r3, #1
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
 80059d2:	e014      	b.n	80059fe <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb0b 	bl	800600e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	3301      	adds	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d3e5      	bcc.n	80059d4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f008 ff3b 	bl	800e888 <USB_ReadInterrupts>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1c:	d13b      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a1e:	2301      	movs	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	e02b      	b.n	8005a7c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	3340      	adds	r3, #64	; 0x40
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d115      	bne.n	8005a76 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da12      	bge.n	8005a76 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	333f      	adds	r3, #63	; 0x3f
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 facc 	bl	800600e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	3301      	adds	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d3ce      	bcc.n	8005a24 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f008 fef4 	bl	800e888 <USB_ReadInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aaa:	d155      	bne.n	8005b58 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aac:	2301      	movs	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	e045      	b.n	8005b3e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d12e      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da2b      	bge.n	8005b38 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005aec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d121      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	4613      	mov	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b34:	6053      	str	r3, [r2, #4]
            break;
 8005b36:	e007      	b.n	8005b48 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d3b4      	bcc.n	8005ab2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f008 fe93 	bl	800e888 <USB_ReadInterrupts>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6c:	d10a      	bne.n	8005b84 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f00e f894 	bl	8013c9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f008 fe7d 	bl	800e888 <USB_ReadInterrupts>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d115      	bne.n	8005bc4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f00e f884 	bl	8013cb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e000      	b.n	8005bc4 <HAL_PCD_IRQHandler+0x920>
      return;
 8005bc2:	bf00      	nop
    }
  }
}
 8005bc4:	3734      	adds	r7, #52	; 0x34
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}

08005bca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_PCD_SetAddress+0x1a>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e013      	b.n	8005c0c <HAL_PCD_SetAddress+0x42>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f008 fddb 	bl	800e7b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	70fb      	strb	r3, [r7, #3]
 8005c26:	460b      	mov	r3, r1
 8005c28:	803b      	strh	r3, [r7, #0]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da0f      	bge.n	8005c5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	3338      	adds	r3, #56	; 0x38
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3304      	adds	r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	705a      	strb	r2, [r3, #1]
 8005c58:	e00f      	b.n	8005c7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 020f 	and.w	r2, r3, #15
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3304      	adds	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005c86:	883a      	ldrh	r2, [r7, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	78ba      	ldrb	r2, [r7, #2]
 8005c90:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ca4:	78bb      	ldrb	r3, [r7, #2]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d102      	bne.n	8005cb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_PCD_EP_Open+0xaa>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e00e      	b.n	8005cdc <HAL_PCD_EP_Open+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f007 fefd 	bl	800dacc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005cda:	7afb      	ldrb	r3, [r7, #11]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da0f      	bge.n	8005d18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	3338      	adds	r3, #56	; 0x38
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	705a      	strb	r2, [r3, #1]
 8005d16:	e00f      	b.n	8005d38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_PCD_EP_Close+0x6e>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e00e      	b.n	8005d70 <HAL_PCD_EP_Close+0x8c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f007 ff3b 	bl	800dbdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	460b      	mov	r3, r1
 8005d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	f003 020f 	and.w	r2, r3, #15
 8005d8e:	4613      	mov	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3304      	adds	r3, #4
 8005da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f008 f9bc 	bl	800e154 <USB_EP0StartXfer>
 8005ddc:	e005      	b.n	8005dea <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6979      	ldr	r1, [r7, #20]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f007 ffd5 	bl	800dd94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005e16:	681b      	ldr	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e34:	7afb      	ldrb	r3, [r7, #11]
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	3338      	adds	r3, #56	; 0x38
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2201      	movs	r2, #1
 8005e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f008 f967 	bl	800e154 <USB_EP0StartXfer>
 8005e86:	e005      	b.n	8005e94 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f007 ff80 	bl	800dd94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d901      	bls.n	8005ebc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e04e      	b.n	8005f5a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da0f      	bge.n	8005ee4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	3338      	adds	r3, #56	; 0x38
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3304      	adds	r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	705a      	strb	r2, [r3, #1]
 8005ee2:	e00d      	b.n	8005f00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_PCD_EP_SetStall+0x82>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e01c      	b.n	8005f5a <HAL_PCD_EP_SetStall+0xbc>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f008 fb6e 	bl	800e610 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f008 fd60 	bl	800ea10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d901      	bls.n	8005f80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e042      	b.n	8006006 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da0f      	bge.n	8005fa8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	3338      	adds	r3, #56	; 0x38
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	705a      	strb	r2, [r3, #1]
 8005fa6:	e00f      	b.n	8005fc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_PCD_EP_ClrStall+0x86>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e00e      	b.n	8006006 <HAL_PCD_EP_ClrStall+0xa4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68f9      	ldr	r1, [r7, #12]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f008 fb78 	bl	800e6ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800601a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da0c      	bge.n	800603c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	3338      	adds	r3, #56	; 0x38
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e00c      	b.n	8006056 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	3304      	adds	r3, #4
 8006054:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	4618      	mov	r0, r3
 800605e:	f008 f99b 	bl	800e398 <USB_EPStopXfer>
 8006062:	4603      	mov	r3, r0
 8006064:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006066:	7afb      	ldrb	r3, [r7, #11]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	3338      	adds	r3, #56	; 0x38
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	3304      	adds	r3, #4
 8006096:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d901      	bls.n	80060a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e067      	b.n	8006178 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d902      	bls.n	80060c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3303      	adds	r3, #3
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060cc:	e026      	b.n	800611c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d902      	bls.n	80060ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	3303      	adds	r3, #3
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6919      	ldr	r1, [r3, #16]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f008 f9f4 	bl	800e4ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	441a      	add	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	b29b      	uxth	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	429a      	cmp	r2, r3
 8006130:	d809      	bhi.n	8006146 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800613a:	429a      	cmp	r2, r3
 800613c:	d203      	bcs.n	8006146 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1c3      	bne.n	80060ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	429a      	cmp	r2, r3
 8006150:	d811      	bhi.n	8006176 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	43db      	mvns	r3, r3
 800616c:	6939      	ldr	r1, [r7, #16]
 800616e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006172:	4013      	ands	r3, r2
 8006174:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	333c      	adds	r3, #60	; 0x3c
 8006198:	3304      	adds	r3, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <PCD_EP_OutXfrComplete_int+0x98>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d124      	bne.n	8006200 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	461a      	mov	r2, r3
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	6093      	str	r3, [r2, #8]
 80061d4:	e01a      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2320      	movs	r3, #32
 80061f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f00d fc7b 	bl	8013af4 <HAL_PCD_DataOutStageCallback>
 80061fe:	e005      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f00d fc74 	bl	8013af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	4f54310a 	.word	0x4f54310a

0800621c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	333c      	adds	r3, #60	; 0x3c
 8006234:	3304      	adds	r3, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <PCD_EP_OutSetupPacket_int+0x64>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d90e      	bls.n	8006270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	461a      	mov	r2, r3
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f00d fc2d 	bl	8013ad0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	4f54300a 	.word	0x4f54300a

08006284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
 8006290:	4613      	mov	r3, r2
 8006292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062a2:	883b      	ldrh	r3, [r7, #0]
 80062a4:	0419      	lsls	r1, r3, #16
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
 80062b0:	e028      	b.n	8006304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
 80062c4:	e00d      	b.n	80062e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	3340      	adds	r3, #64	; 0x40
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	3301      	adds	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3ec      	bcc.n	80062c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062ec:	883b      	ldrh	r3, [r7, #0]
 80062ee:	0418      	lsls	r0, r3, #16
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4302      	orrs	r2, r0
 80062fc:	3340      	adds	r3, #64	; 0x40
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	f043 0303 	orr.w	r3, r3, #3
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006398:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a4:	d102      	bne.n	80063ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80063a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063aa:	e00b      	b.n	80063c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80063ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ba:	d102      	bne.n	80063c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80063bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c0:	e000      	b.n	80063c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80063c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40007000 	.word	0x40007000

080063d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d141      	bne.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063e2:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ee:	d131      	bne.n	8006454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063f0:	4b47      	ldr	r3, [pc, #284]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f6:	4a46      	ldr	r2, [pc, #280]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006400:	4b43      	ldr	r3, [pc, #268]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006408:	4a41      	ldr	r2, [pc, #260]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800640e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006410:	4b40      	ldr	r3, [pc, #256]	; (8006514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2232      	movs	r2, #50	; 0x32
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	4a3f      	ldr	r2, [pc, #252]	; (8006518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	0c9b      	lsrs	r3, r3, #18
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006426:	e002      	b.n	800642e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b01      	subs	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800642e:	4b38      	ldr	r3, [pc, #224]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643a:	d102      	bne.n	8006442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f2      	bne.n	8006428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006442:	4b33      	ldr	r3, [pc, #204]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644e:	d158      	bne.n	8006502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e057      	b.n	8006504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006454:	4b2e      	ldr	r3, [pc, #184]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	4a2d      	ldr	r2, [pc, #180]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006464:	e04d      	b.n	8006502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646c:	d141      	bne.n	80064f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800646e:	4b28      	ldr	r3, [pc, #160]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647a:	d131      	bne.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006482:	4a23      	ldr	r2, [pc, #140]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800648c:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800649a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800649c:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2232      	movs	r2, #50	; 0x32
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	4a1c      	ldr	r2, [pc, #112]	; (8006518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	0c9b      	lsrs	r3, r3, #18
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064b2:	e002      	b.n	80064ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c6:	d102      	bne.n	80064ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1f2      	bne.n	80064b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064ce:	4b10      	ldr	r3, [pc, #64]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064da:	d112      	bne.n	8006502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e011      	b.n	8006504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e6:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80064f0:	e007      	b.n	8006502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064fa:	4a05      	ldr	r2, [pc, #20]	; (8006510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006500:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	40007000 	.word	0x40007000
 8006514:	20000000 	.word	0x20000000
 8006518:	431bde83 	.word	0x431bde83

0800651c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800652a:	6053      	str	r3, [r2, #4]
}
 800652c:	bf00      	nop
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40007000 	.word	0x40007000

0800653c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f000 bc08 	b.w	8006d60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006550:	4b96      	ldr	r3, [pc, #600]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 030c 	and.w	r3, r3, #12
 8006558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800655a:	4b94      	ldr	r3, [pc, #592]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80e4 	beq.w	800673a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_RCC_OscConfig+0x4c>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b0c      	cmp	r3, #12
 800657c:	f040 808b 	bne.w	8006696 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b01      	cmp	r3, #1
 8006584:	f040 8087 	bne.w	8006696 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006588:	4b88      	ldr	r3, [pc, #544]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_RCC_OscConfig+0x64>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e3df      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	4b81      	ldr	r3, [pc, #516]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_RCC_OscConfig+0x7e>
 80065b0:	4b7e      	ldr	r3, [pc, #504]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065b8:	e005      	b.n	80065c6 <HAL_RCC_OscConfig+0x8a>
 80065ba:	4b7c      	ldr	r3, [pc, #496]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d223      	bcs.n	8006612 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fdf8 	bl	80071c4 <RCC_SetFlashLatencyFromMSIRange>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e3c0      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065de:	4b73      	ldr	r3, [pc, #460]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a72      	ldr	r2, [pc, #456]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065e4:	f043 0308 	orr.w	r3, r3, #8
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4b70      	ldr	r3, [pc, #448]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	496d      	ldr	r1, [pc, #436]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065fc:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	4968      	ldr	r1, [pc, #416]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800660c:	4313      	orrs	r3, r2
 800660e:	604b      	str	r3, [r1, #4]
 8006610:	e025      	b.n	800665e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006612:	4b66      	ldr	r3, [pc, #408]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a65      	ldr	r2, [pc, #404]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006618:	f043 0308 	orr.w	r3, r3, #8
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4b63      	ldr	r3, [pc, #396]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	4960      	ldr	r1, [pc, #384]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006630:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	495b      	ldr	r1, [pc, #364]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006640:	4313      	orrs	r3, r2
 8006642:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fdb8 	bl	80071c4 <RCC_SetFlashLatencyFromMSIRange>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e380      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800665e:	f000 fcc1 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b51      	ldr	r3, [pc, #324]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	4950      	ldr	r1, [pc, #320]	; (80067b0 <HAL_RCC_OscConfig+0x274>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	fa22 f303 	lsr.w	r3, r2, r3
 800667a:	4a4e      	ldr	r2, [pc, #312]	; (80067b4 <HAL_RCC_OscConfig+0x278>)
 800667c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800667e:	4b4e      	ldr	r3, [pc, #312]	; (80067b8 <HAL_RCC_OscConfig+0x27c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fb0a 	bl	8003c9c <HAL_InitTick>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d052      	beq.n	8006738 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	e364      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d032      	beq.n	8006704 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800669e:	4b43      	ldr	r3, [pc, #268]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a42      	ldr	r2, [pc, #264]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066aa:	f7fd fb47 	bl	8003d3c <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066b2:	f7fd fb43 	bl	8003d3c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e34d      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066c4:	4b39      	ldr	r3, [pc, #228]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0f0      	beq.n	80066b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066d0:	4b36      	ldr	r3, [pc, #216]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066d6:	f043 0308 	orr.w	r3, r3, #8
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	4b33      	ldr	r3, [pc, #204]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	4930      	ldr	r1, [pc, #192]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ee:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	492b      	ldr	r1, [pc, #172]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]
 8006702:	e01a      	b.n	800673a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006704:	4b29      	ldr	r3, [pc, #164]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a28      	ldr	r2, [pc, #160]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006710:	f7fd fb14 	bl	8003d3c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006718:	f7fd fb10 	bl	8003d3c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e31a      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800672a:	4b20      	ldr	r3, [pc, #128]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x1dc>
 8006736:	e000      	b.n	800673a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006738:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d073      	beq.n	800682e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d005      	beq.n	8006758 <HAL_RCC_OscConfig+0x21c>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b0c      	cmp	r3, #12
 8006750:	d10e      	bne.n	8006770 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d10b      	bne.n	8006770 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d063      	beq.n	800682c <HAL_RCC_OscConfig+0x2f0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d15f      	bne.n	800682c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e2f7      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d106      	bne.n	8006788 <HAL_RCC_OscConfig+0x24c>
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a0b      	ldr	r2, [pc, #44]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e025      	b.n	80067d4 <HAL_RCC_OscConfig+0x298>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006790:	d114      	bne.n	80067bc <HAL_RCC_OscConfig+0x280>
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a05      	ldr	r2, [pc, #20]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 8006798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b03      	ldr	r3, [pc, #12]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a02      	ldr	r2, [pc, #8]	; (80067ac <HAL_RCC_OscConfig+0x270>)
 80067a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	e013      	b.n	80067d4 <HAL_RCC_OscConfig+0x298>
 80067ac:	40021000 	.word	0x40021000
 80067b0:	08015374 	.word	0x08015374
 80067b4:	20000000 	.word	0x20000000
 80067b8:	20000004 	.word	0x20000004
 80067bc:	4ba0      	ldr	r3, [pc, #640]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a9f      	ldr	r2, [pc, #636]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b9d      	ldr	r3, [pc, #628]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a9c      	ldr	r2, [pc, #624]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80067ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fd faae 	bl	8003d3c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e4:	f7fd faaa 	bl	8003d3c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	; 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e2b4      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f6:	4b92      	ldr	r3, [pc, #584]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x2a8>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fd fa9a 	bl	8003d3c <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800680c:	f7fd fa96 	bl	8003d3c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e2a0      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800681e:	4b88      	ldr	r3, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x2d0>
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d060      	beq.n	80068fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d005      	beq.n	800684c <HAL_RCC_OscConfig+0x310>
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b0c      	cmp	r3, #12
 8006844:	d119      	bne.n	800687a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d116      	bne.n	800687a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800684c:	4b7c      	ldr	r3, [pc, #496]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_OscConfig+0x328>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e27d      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b76      	ldr	r3, [pc, #472]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	061b      	lsls	r3, r3, #24
 8006872:	4973      	ldr	r1, [pc, #460]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006874:	4313      	orrs	r3, r2
 8006876:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006878:	e040      	b.n	80068fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d023      	beq.n	80068ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006882:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6e      	ldr	r2, [pc, #440]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800688c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fd fa55 	bl	8003d3c <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006896:	f7fd fa51 	bl	8003d3c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e25b      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a8:	4b65      	ldr	r3, [pc, #404]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0f0      	beq.n	8006896 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b4:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	495f      	ldr	r1, [pc, #380]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]
 80068c8:	e018      	b.n	80068fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ca:	4b5d      	ldr	r3, [pc, #372]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a5c      	ldr	r2, [pc, #368]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d6:	f7fd fa31 	bl	8003d3c <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068de:	f7fd fa2d 	bl	8003d3c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e237      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f0:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d03c      	beq.n	8006982 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01c      	beq.n	800694a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006910:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006916:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006920:	f7fd fa0c 	bl	8003d3c <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006928:	f7fd fa08 	bl	8003d3c <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e212      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 800693c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ef      	beq.n	8006928 <HAL_RCC_OscConfig+0x3ec>
 8006948:	e01b      	b.n	8006982 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 800694c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006950:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695a:	f7fd f9ef 	bl	8003d3c <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006962:	f7fd f9eb 	bl	8003d3c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1f5      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006974:	4b32      	ldr	r3, [pc, #200]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ef      	bne.n	8006962 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a6 	beq.w	8006adc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006994:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10d      	bne.n	80069bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80069a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069aa:	6593      	str	r3, [r2, #88]	; 0x58
 80069ac:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 80069ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b8:	2301      	movs	r3, #1
 80069ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069bc:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <HAL_RCC_OscConfig+0x508>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d118      	bne.n	80069fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c8:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <HAL_RCC_OscConfig+0x508>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_RCC_OscConfig+0x508>)
 80069ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d4:	f7fd f9b2 	bl	8003d3c <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fd f9ae 	bl	8003d3c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e1b8      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <HAL_RCC_OscConfig+0x508>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d108      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4d8>
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a08:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a12:	e029      	b.n	8006a68 <HAL_RCC_OscConfig+0x52c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	d115      	bne.n	8006a48 <HAL_RCC_OscConfig+0x50c>
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a22:	4a07      	ldr	r2, [pc, #28]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	4a03      	ldr	r2, [pc, #12]	; (8006a40 <HAL_RCC_OscConfig+0x504>)
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a3c:	e014      	b.n	8006a68 <HAL_RCC_OscConfig+0x52c>
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40007000 	.word	0x40007000
 8006a48:	4b9d      	ldr	r3, [pc, #628]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	4a9c      	ldr	r2, [pc, #624]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a58:	4b99      	ldr	r3, [pc, #612]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	4a98      	ldr	r2, [pc, #608]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006a60:	f023 0304 	bic.w	r3, r3, #4
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a70:	f7fd f964 	bl	8003d3c <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a78:	f7fd f960 	bl	8003d3c <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e168      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8e:	4b8c      	ldr	r3, [pc, #560]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0ed      	beq.n	8006a78 <HAL_RCC_OscConfig+0x53c>
 8006a9c:	e015      	b.n	8006aca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9e:	f7fd f94d 	bl	8003d3c <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa6:	f7fd f949 	bl	8003d3c <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e151      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abc:	4b80      	ldr	r3, [pc, #512]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1ed      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad0:	4b7b      	ldr	r3, [pc, #492]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad4:	4a7a      	ldr	r2, [pc, #488]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03c      	beq.n	8006b62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01c      	beq.n	8006b2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006af0:	4b73      	ldr	r3, [pc, #460]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af6:	4a72      	ldr	r2, [pc, #456]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fd f91c 	bl	8003d3c <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b08:	f7fd f918 	bl	8003d3c <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e122      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b1a:	4b69      	ldr	r3, [pc, #420]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ef      	beq.n	8006b08 <HAL_RCC_OscConfig+0x5cc>
 8006b28:	e01b      	b.n	8006b62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b2a:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b30:	4a63      	ldr	r2, [pc, #396]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fd f8ff 	bl	8003d3c <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b42:	f7fd f8fb 	bl	8003d3c <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e105      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b54:	4b5a      	ldr	r3, [pc, #360]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80f9 	beq.w	8006d5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f040 80cf 	bne.w	8006d14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b76:	4b52      	ldr	r3, [pc, #328]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 0203 	and.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d12c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	3b01      	subs	r3, #1
 8006b96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d123      	bne.n	8006be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d11b      	bne.n	8006be4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d113      	bne.n	8006be4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d109      	bne.n	8006be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d071      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b0c      	cmp	r3, #12
 8006be8:	d068      	beq.n	8006cbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006bea:	4b35      	ldr	r3, [pc, #212]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006bf6:	4b32      	ldr	r3, [pc, #200]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0ac      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2d      	ldr	r2, [pc, #180]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c12:	f7fd f893 	bl	8003d3c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fd f88f 	bl	8003d3c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e099      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c2c:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f0      	bne.n	8006c1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <HAL_RCC_OscConfig+0x788>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c48:	3a01      	subs	r2, #1
 8006c4a:	0112      	lsls	r2, r2, #4
 8006c4c:	4311      	orrs	r1, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c52:	0212      	lsls	r2, r2, #8
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c5a:	0852      	lsrs	r2, r2, #1
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	0552      	lsls	r2, r2, #21
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c66:	0852      	lsrs	r2, r2, #1
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	0652      	lsls	r2, r2, #25
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c72:	06d2      	lsls	r2, r2, #27
 8006c74:	430a      	orrs	r2, r1
 8006c76:	4912      	ldr	r1, [pc, #72]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0f      	ldr	r2, [pc, #60]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c88:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4a0c      	ldr	r2, [pc, #48]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c94:	f7fd f852 	bl	8003d3c <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fd f84e 	bl	8003d3c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e058      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cae:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <HAL_RCC_OscConfig+0x784>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cba:	e050      	b.n	8006d5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e04f      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d144      	bne.n	8006d5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cd4:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a23      	ldr	r2, [pc, #140]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ce0:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cec:	f7fd f826 	bl	8003d3c <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fd f822 	bl	8003d3c <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e02c      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x7b8>
 8006d12:	e024      	b.n	8006d5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b0c      	cmp	r3, #12
 8006d18:	d01f      	beq.n	8006d5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d26:	f7fd f809 	bl	8003d3c <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2e:	f7fd f805 	bl	8003d3c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e00f      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d40:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	4905      	ldr	r1, [pc, #20]	; (8006d68 <HAL_RCC_OscConfig+0x82c>)
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_OscConfig+0x830>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	60cb      	str	r3, [r1, #12]
 8006d58:	e001      	b.n	8006d5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	feeefffc 	.word	0xfeeefffc

08006d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e11d      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d88:	4b90      	ldr	r3, [pc, #576]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d910      	bls.n	8006db8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d96:	4b8d      	ldr	r3, [pc, #564]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 020f 	bic.w	r2, r3, #15
 8006d9e:	498b      	ldr	r1, [pc, #556]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b89      	ldr	r3, [pc, #548]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e105      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d010      	beq.n	8006de6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	4b81      	ldr	r3, [pc, #516]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d908      	bls.n	8006de6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd4:	4b7e      	ldr	r3, [pc, #504]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	497b      	ldr	r1, [pc, #492]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d079      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d11e      	bne.n	8006e38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfa:	4b75      	ldr	r3, [pc, #468]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e0dc      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006e0a:	f000 fa35 	bl	8007278 <RCC_GetSysClockFreqFromPLLSource>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a70      	ldr	r2, [pc, #448]	; (8006fd4 <HAL_RCC_ClockConfig+0x264>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d946      	bls.n	8006ea4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006e16:	4b6e      	ldr	r3, [pc, #440]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d140      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e22:	4b6b      	ldr	r3, [pc, #428]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2a:	4a69      	ldr	r2, [pc, #420]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e035      	b.n	8006ea4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d107      	bne.n	8006e50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e40:	4b63      	ldr	r3, [pc, #396]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d115      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0b9      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d107      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e58:	4b5d      	ldr	r3, [pc, #372]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0ad      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e68:	4b59      	ldr	r3, [pc, #356]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0a5      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006e78:	f000 f8b4 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4a55      	ldr	r2, [pc, #340]	; (8006fd4 <HAL_RCC_ClockConfig+0x264>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d90f      	bls.n	8006ea4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006e84:	4b52      	ldr	r3, [pc, #328]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e90:	4b4f      	ldr	r3, [pc, #316]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e98:	4a4d      	ldr	r2, [pc, #308]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 0203 	bic.w	r2, r3, #3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4947      	ldr	r1, [pc, #284]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fc ff41 	bl	8003d3c <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ebe:	f7fc ff3d 	bl	8003d3c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e077      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed4:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 020c 	and.w	r2, r3, #12
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d1eb      	bne.n	8006ebe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d105      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eec:	4b38      	ldr	r3, [pc, #224]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	4a37      	ldr	r2, [pc, #220]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ef6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d208      	bcs.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f14:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	492b      	ldr	r1, [pc, #172]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f26:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d210      	bcs.n	8006f56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f34:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f023 020f 	bic.w	r2, r3, #15
 8006f3c:	4923      	ldr	r1, [pc, #140]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d001      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e036      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	4918      	ldr	r1, [pc, #96]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f80:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4910      	ldr	r1, [pc, #64]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f94:	f000 f826 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <HAL_RCC_ClockConfig+0x268>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <HAL_RCC_ClockConfig+0x26c>)
 8006fb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <HAL_RCC_ClockConfig+0x270>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fc fe6f 	bl	8003c9c <HAL_InitTick>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]

  return status;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40022000 	.word	0x40022000
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	04c4b400 	.word	0x04c4b400
 8006fd8:	08015374 	.word	0x08015374
 8006fdc:	20000000 	.word	0x20000000
 8006fe0:	20000004 	.word	0x20000004

08006fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ffc:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x34>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d121      	bne.n	8007056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d11e      	bne.n	8007056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007024:	4b31      	ldr	r3, [pc, #196]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	e005      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007040:	4a2b      	ldr	r2, [pc, #172]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007054:	e00a      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d102      	bne.n	8007062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e004      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d101      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800706a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b0c      	cmp	r3, #12
 8007070:	d134      	bne.n	80070dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007072:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d003      	beq.n	800708a <HAL_RCC_GetSysClockFreq+0xa6>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d003      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0xac>
 8007088:	e005      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800708a:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800708c:	617b      	str	r3, [r7, #20]
      break;
 800708e:	e005      	b.n	800709c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007090:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007092:	617b      	str	r3, [r7, #20]
      break;
 8007094:	e002      	b.n	800709c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	617b      	str	r3, [r7, #20]
      break;
 800709a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800709c:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3301      	adds	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	fb03 f202 	mul.w	r2, r3, r2
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	0e5b      	lsrs	r3, r3, #25
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	3301      	adds	r3, #1
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80070dc:	69bb      	ldr	r3, [r7, #24]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3724      	adds	r7, #36	; 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40021000 	.word	0x40021000
 80070f0:	0801538c 	.word	0x0801538c
 80070f4:	00f42400 	.word	0x00f42400
 80070f8:	007a1200 	.word	0x007a1200

080070fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <HAL_RCC_GetHCLKFreq+0x14>)
 8007102:	681b      	ldr	r3, [r3, #0]
}
 8007104:	4618      	mov	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000000 	.word	0x20000000

08007114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007118:	f7ff fff0 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 800711c:	4602      	mov	r2, r0
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <HAL_RCC_GetPCLK1Freq+0x28>)
 800712a:	5ccb      	ldrb	r3, [r1, r3]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000
 800713c:	08015384 	.word	0x08015384

08007140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007144:	f7ff ffda 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 8007148:	4602      	mov	r2, r0
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0adb      	lsrs	r3, r3, #11
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	4904      	ldr	r1, [pc, #16]	; (8007168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000
 8007168:	08015384 	.word	0x08015384

0800716c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <HAL_RCC_EnableCSS+0x1c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a04      	ldr	r2, [pc, #16]	; (8007188 <HAL_RCC_EnableCSS+0x1c>)
 8007176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800717a:	6013      	str	r3, [r2, #0]
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40021000 	.word	0x40021000

0800718c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007190:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719c:	d105      	bne.n	80071aa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800719e:	f000 f809 	bl	80071b4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80071a2:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80071a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071a8:	621a      	str	r2, [r3, #32]
  }
}
 80071aa:	bf00      	nop
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000

080071b4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071dc:	f7ff f8da 	bl	8006394 <HAL_PWREx_GetVoltageRange>
 80071e0:	6178      	str	r0, [r7, #20]
 80071e2:	e014      	b.n	800720e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	4b22      	ldr	r3, [pc, #136]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80071e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e8:	4a21      	ldr	r2, [pc, #132]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ee:	6593      	str	r3, [r2, #88]	; 0x58
 80071f0:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071fc:	f7ff f8ca 	bl	8006394 <HAL_PWREx_GetVoltageRange>
 8007200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007206:	4a1a      	ldr	r2, [pc, #104]	; (8007270 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007214:	d10b      	bne.n	800722e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b80      	cmp	r3, #128	; 0x80
 800721a:	d913      	bls.n	8007244 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2ba0      	cmp	r3, #160	; 0xa0
 8007220:	d902      	bls.n	8007228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007222:	2302      	movs	r3, #2
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	e00d      	b.n	8007244 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007228:	2301      	movs	r3, #1
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	e00a      	b.n	8007244 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b7f      	cmp	r3, #127	; 0x7f
 8007232:	d902      	bls.n	800723a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007234:	2302      	movs	r3, #2
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	e004      	b.n	8007244 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b70      	cmp	r3, #112	; 0x70
 800723e:	d101      	bne.n	8007244 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007240:	2301      	movs	r3, #1
 8007242:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007244:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f023 020f 	bic.w	r2, r3, #15
 800724c:	4909      	ldr	r1, [pc, #36]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d001      	beq.n	8007266 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40021000 	.word	0x40021000
 8007274:	40022000 	.word	0x40022000

08007278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800727e:	4b2d      	ldr	r3, [pc, #180]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b03      	cmp	r3, #3
 800728c:	d00b      	beq.n	80072a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d825      	bhi.n	80072e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d008      	beq.n	80072ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d11f      	bne.n	80072e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80072a2:	613b      	str	r3, [r7, #16]
    break;
 80072a4:	e01f      	b.n	80072e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80072a6:	4b25      	ldr	r3, [pc, #148]	; (800733c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80072a8:	613b      	str	r3, [r7, #16]
    break;
 80072aa:	e01c      	b.n	80072e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d107      	bne.n	80072c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e005      	b.n	80072d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072c8:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	091b      	lsrs	r3, r3, #4
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80072d4:	4a1a      	ldr	r2, [pc, #104]	; (8007340 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072dc:	613b      	str	r3, [r7, #16]
    break;
 80072de:	e002      	b.n	80072e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
    break;
 80072e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	3301      	adds	r3, #1
 80072f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	fb03 f202 	mul.w	r2, r3, r2
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	0e5b      	lsrs	r3, r3, #25
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	3301      	adds	r3, #1
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007326:	683b      	ldr	r3, [r7, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40021000 	.word	0x40021000
 8007338:	00f42400 	.word	0x00f42400
 800733c:	007a1200 	.word	0x007a1200
 8007340:	0801538c 	.word	0x0801538c

08007344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800734c:	2300      	movs	r3, #0
 800734e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007350:	2300      	movs	r3, #0
 8007352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735c:	2b00      	cmp	r3, #0
 800735e:	d040      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d02a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007368:	2b80      	cmp	r3, #128	; 0x80
 800736a:	d825      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800736c:	2b60      	cmp	r3, #96	; 0x60
 800736e:	d026      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007370:	2b60      	cmp	r3, #96	; 0x60
 8007372:	d821      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d006      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d81d      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d010      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007384:	e018      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007386:	4b89      	ldr	r3, [pc, #548]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4a88      	ldr	r2, [pc, #544]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800738c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007390:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007392:	e015      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fa24 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073a4:	e00c      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3320      	adds	r3, #32
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb0f 	bl	80089d0 <RCCEx_PLLSAI2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073b6:	e003      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	74fb      	strb	r3, [r7, #19]
      break;
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80073be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073c6:	4b79      	ldr	r3, [pc, #484]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073cc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d4:	4975      	ldr	r1, [pc, #468]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80073dc:	e001      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073de:	7cfb      	ldrb	r3, [r7, #19]
 80073e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d047      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f6:	d030      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fc:	d82a      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80073fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007402:	d02a      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007408:	d824      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800740a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740e:	d008      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007414:	d81e      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d010      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007420:	e018      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007422:	4b62      	ldr	r3, [pc, #392]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	4a61      	ldr	r2, [pc, #388]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800742c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800742e:	e015      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f9d6 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007440:	e00c      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3320      	adds	r3, #32
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fac1 	bl	80089d0 <RCCEx_PLLSAI2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007452:	e003      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	74fb      	strb	r3, [r7, #19]
      break;
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800745a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800745c:	7cfb      	ldrb	r3, [r7, #19]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007462:	4b52      	ldr	r3, [pc, #328]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	494e      	ldr	r1, [pc, #312]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007478:	e001      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	7cfb      	ldrb	r3, [r7, #19]
 800747c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 809f 	beq.w	80075ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800748c:	2300      	movs	r3, #0
 800748e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007490:	4b46      	ldr	r3, [pc, #280]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a6:	4b41      	ldr	r3, [pc, #260]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	4a40      	ldr	r2, [pc, #256]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6593      	str	r3, [r2, #88]	; 0x58
 80074b2:	4b3e      	ldr	r3, [pc, #248]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074be:	2301      	movs	r3, #1
 80074c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074c2:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a3a      	ldr	r2, [pc, #232]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80074c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ce:	f7fc fc35 	bl	8003d3c <HAL_GetTick>
 80074d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074d4:	e009      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074d6:	f7fc fc31 	bl	8003d3c <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d902      	bls.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	74fb      	strb	r3, [r7, #19]
        break;
 80074e8:	e005      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0ef      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80074f6:	7cfb      	ldrb	r3, [r7, #19]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d15b      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01f      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	429a      	cmp	r2, r3
 8007518:	d019      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007524:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800752e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007546:	4a19      	ldr	r2, [pc, #100]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fc fbf0 	bl	8003d3c <HAL_GetTick>
 800755c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800755e:	e00b      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007560:	f7fc fbec 	bl	8003d3c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	f241 3288 	movw	r2, #5000	; 0x1388
 800756e:	4293      	cmp	r3, r2
 8007570:	d902      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	74fb      	strb	r3, [r7, #19]
            break;
 8007576:	e006      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0ec      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007586:	7cfb      	ldrb	r3, [r7, #19]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10c      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	4903      	ldr	r1, [pc, #12]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075a4:	e008      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075a6:	7cfb      	ldrb	r3, [r7, #19]
 80075a8:	74bb      	strb	r3, [r7, #18]
 80075aa:	e005      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80075ac:	40021000 	.word	0x40021000
 80075b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	7cfb      	ldrb	r3, [r7, #19]
 80075b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075b8:	7c7b      	ldrb	r3, [r7, #17]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d105      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075be:	4ba0      	ldr	r3, [pc, #640]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	4a9f      	ldr	r2, [pc, #636]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075d6:	4b9a      	ldr	r3, [pc, #616]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f023 0203 	bic.w	r2, r3, #3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e4:	4996      	ldr	r1, [pc, #600]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075f8:	4b91      	ldr	r3, [pc, #580]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	f023 020c 	bic.w	r2, r3, #12
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	498e      	ldr	r1, [pc, #568]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800761a:	4b89      	ldr	r3, [pc, #548]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	4985      	ldr	r1, [pc, #532]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800763c:	4b80      	ldr	r3, [pc, #512]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764a:	497d      	ldr	r1, [pc, #500]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800765e:	4b78      	ldr	r3, [pc, #480]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766c:	4974      	ldr	r1, [pc, #464]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007680:	4b6f      	ldr	r3, [pc, #444]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	496c      	ldr	r1, [pc, #432]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a2:	4b67      	ldr	r3, [pc, #412]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b0:	4963      	ldr	r1, [pc, #396]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076c4:	4b5e      	ldr	r3, [pc, #376]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d2:	495b      	ldr	r1, [pc, #364]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076e6:	4b56      	ldr	r3, [pc, #344]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f4:	4952      	ldr	r1, [pc, #328]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007708:	4b4d      	ldr	r3, [pc, #308]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800770a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	494a      	ldr	r1, [pc, #296]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800772a:	4b45      	ldr	r3, [pc, #276]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007738:	4941      	ldr	r1, [pc, #260]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800774c:	4b3c      	ldr	r3, [pc, #240]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800774e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007752:	f023 0203 	bic.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775a:	4939      	ldr	r1, [pc, #228]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d028      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800776e:	4b34      	ldr	r3, [pc, #208]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007774:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	4930      	ldr	r1, [pc, #192]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800778c:	d106      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800778e:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	4a2b      	ldr	r2, [pc, #172]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007798:	60d3      	str	r3, [r2, #12]
 800779a:	e011      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077a4:	d10c      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3304      	adds	r3, #4
 80077aa:	2101      	movs	r1, #1
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f81b 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077b6:	7cfb      	ldrb	r3, [r7, #19]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80077bc:	7cfb      	ldrb	r3, [r7, #19]
 80077be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d04d      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d4:	d108      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077dc:	4a18      	ldr	r2, [pc, #96]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80077e6:	e012      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077e8:	4b15      	ldr	r3, [pc, #84]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077ee:	4a14      	ldr	r2, [pc, #80]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80077f8:	4b11      	ldr	r3, [pc, #68]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007806:	490e      	ldr	r1, [pc, #56]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007816:	d106      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4a08      	ldr	r2, [pc, #32]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800781e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007822:	60d3      	str	r3, [r2, #12]
 8007824:	e020      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800782a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782e:	d109      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	4a02      	ldr	r2, [pc, #8]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783a:	60d3      	str	r3, [r2, #12]
 800783c:	e014      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800783e:	bf00      	nop
 8007840:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800784c:	d10c      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3304      	adds	r3, #4
 8007852:	2101      	movs	r1, #1
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ffc7 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800785e:	7cfb      	ldrb	r3, [r7, #19]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007864:	7cfb      	ldrb	r3, [r7, #19]
 8007866:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d028      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007874:	4b4a      	ldr	r3, [pc, #296]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007882:	4947      	ldr	r1, [pc, #284]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007884:	4313      	orrs	r3, r2
 8007886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007892:	d106      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007894:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	4a41      	ldr	r2, [pc, #260]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800789a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800789e:	60d3      	str	r3, [r2, #12]
 80078a0:	e011      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078aa:	d10c      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	2101      	movs	r1, #1
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 ff98 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
 80078c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01e      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078d2:	4b33      	ldr	r3, [pc, #204]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e2:	492f      	ldr	r1, [pc, #188]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f4:	d10c      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2102      	movs	r1, #2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 ff73 	bl	80087e8 <RCCEx_PLLSAI1_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007906:	7cfb      	ldrb	r3, [r7, #19]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800790c:	7cfb      	ldrb	r3, [r7, #19]
 800790e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800791c:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007922:	f023 0204 	bic.w	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792c:	491c      	ldr	r1, [pc, #112]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007940:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007946:	f023 0218 	bic.w	r2, r3, #24
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	4913      	ldr	r1, [pc, #76]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d017      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800796a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007974:	490a      	ldr	r1, [pc, #40]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007986:	d105      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007992:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007994:	7cbb      	ldrb	r3, [r7, #18]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40021000 	.word	0x40021000

080079a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b6:	d13e      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80079b8:	4bb6      	ldr	r3, [pc, #728]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d028      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d2:	f200 86f4 	bhi.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079dc:	d005      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e4:	d00e      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80079e6:	f000 beea 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80079ea:	4baa      	ldr	r3, [pc, #680]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	f040 86e4 	bne.w	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	61fb      	str	r3, [r7, #28]
      break;
 8007a00:	f000 bedf 	b.w	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007a04:	4ba3      	ldr	r3, [pc, #652]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f040 86d9 	bne.w	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8007a14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a18:	61fb      	str	r3, [r7, #28]
      break;
 8007a1a:	f000 bed4 	b.w	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a1e:	4b9d      	ldr	r3, [pc, #628]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a2a:	f040 86ce 	bne.w	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8007a2e:	4b9a      	ldr	r3, [pc, #616]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007a30:	61fb      	str	r3, [r7, #28]
      break;
 8007a32:	f000 beca 	b.w	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a36:	4b97      	ldr	r3, [pc, #604]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d036      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d840      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d003      	beq.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d020      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007a58:	e039      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007a5a:	4b8e      	ldr	r3, [pc, #568]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d116      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007a66:	4b8b      	ldr	r3, [pc, #556]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007a72:	4b88      	ldr	r3, [pc, #544]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	e005      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007a7e:	4b85      	ldr	r3, [pc, #532]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a84:	0a1b      	lsrs	r3, r3, #8
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	4a84      	ldr	r2, [pc, #528]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a92:	e01f      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
      break;
 8007a98:	e01c      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a9a:	4b7e      	ldr	r3, [pc, #504]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa6:	d102      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007aa8:	4b7d      	ldr	r3, [pc, #500]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007aaa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007aac:	e012      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
      break;
 8007ab2:	e00f      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ab4:	4b77      	ldr	r3, [pc, #476]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac0:	d102      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007ac2:	4b78      	ldr	r3, [pc, #480]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007ac4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007ac6:	e005      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
      break;
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61bb      	str	r3, [r7, #24]
      break;
 8007ad2:	bf00      	nop
    }

    switch(PeriphClk)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ada:	f000 8606 	beq.w	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ae4:	f200 8673 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aee:	f000 8469 	beq.w	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af8:	f200 8669 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b02:	f000 8531 	beq.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0c:	f200 865f 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b16:	f000 8187 	beq.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b20:	f200 8655 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b2a:	f000 80cd 	beq.w	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b34:	f200 864b 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3e:	f000 8430 	beq.w	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b48:	f200 8641 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b52:	f000 83e4 	beq.w	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b5c:	f200 8637 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	f000 80af 	beq.w	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b70:	f200 862d 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7a:	f000 809d 	beq.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b84:	f200 8623 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8e:	f000 808b 	beq.w	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b98:	f200 8619 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba2:	f000 8554 	beq.w	800864e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bac:	f200 860f 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb6:	f000 8500 	beq.w	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc0:	f200 8605 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bca:	f000 84a1 	beq.w	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd4:	f200 85fb 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b80      	cmp	r3, #128	; 0x80
 8007bdc:	f000 846c 	beq.w	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	f200 85f3 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d84c      	bhi.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 85ec 	beq.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	2b1f      	cmp	r3, #31
 8007bfc:	f200 85e7 	bhi.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	0800801d 	.word	0x0800801d
 8007c0c:	0800808b 	.word	0x0800808b
 8007c10:	080087cf 	.word	0x080087cf
 8007c14:	0800811f 	.word	0x0800811f
 8007c18:	080087cf 	.word	0x080087cf
 8007c1c:	080087cf 	.word	0x080087cf
 8007c20:	080087cf 	.word	0x080087cf
 8007c24:	08008197 	.word	0x08008197
 8007c28:	080087cf 	.word	0x080087cf
 8007c2c:	080087cf 	.word	0x080087cf
 8007c30:	080087cf 	.word	0x080087cf
 8007c34:	080087cf 	.word	0x080087cf
 8007c38:	080087cf 	.word	0x080087cf
 8007c3c:	080087cf 	.word	0x080087cf
 8007c40:	080087cf 	.word	0x080087cf
 8007c44:	0800821b 	.word	0x0800821b
 8007c48:	080087cf 	.word	0x080087cf
 8007c4c:	080087cf 	.word	0x080087cf
 8007c50:	080087cf 	.word	0x080087cf
 8007c54:	080087cf 	.word	0x080087cf
 8007c58:	080087cf 	.word	0x080087cf
 8007c5c:	080087cf 	.word	0x080087cf
 8007c60:	080087cf 	.word	0x080087cf
 8007c64:	080087cf 	.word	0x080087cf
 8007c68:	080087cf 	.word	0x080087cf
 8007c6c:	080087cf 	.word	0x080087cf
 8007c70:	080087cf 	.word	0x080087cf
 8007c74:	080087cf 	.word	0x080087cf
 8007c78:	080087cf 	.word	0x080087cf
 8007c7c:	080087cf 	.word	0x080087cf
 8007c80:	080087cf 	.word	0x080087cf
 8007c84:	0800829d 	.word	0x0800829d
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	f000 83e8 	beq.w	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007c90:	f000 bd9d 	b.w	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007c94:	40021000 	.word	0x40021000
 8007c98:	0003d090 	.word	0x0003d090
 8007c9c:	0801538c 	.word	0x0801538c
 8007ca0:	00f42400 	.word	0x00f42400
 8007ca4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007cae:	f000 ff83 	bl	8008bb8 <RCCEx_GetSAIxPeriphCLKFreq>
 8007cb2:	61f8      	str	r0, [r7, #28]
      break;
 8007cb4:	f000 bd8e 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007cb8:	69b9      	ldr	r1, [r7, #24]
 8007cba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007cbe:	f000 ff7b 	bl	8008bb8 <RCCEx_GetSAIxPeriphCLKFreq>
 8007cc2:	61f8      	str	r0, [r7, #28]
      break;
 8007cc4:	f000 bd86 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007cc8:	4b9a      	ldr	r3, [pc, #616]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007cda:	d015      	beq.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ce2:	f200 8092 	bhi.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cec:	d029      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf4:	f200 8089 	bhi.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d07b      	beq.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d04:	d04a      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007d06:	e080      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007d08:	4b8a      	ldr	r3, [pc, #552]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d17d      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007d14:	4b87      	ldr	r3, [pc, #540]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8007d20:	4b84      	ldr	r3, [pc, #528]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	e005      	b.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8007d2c:	4b81      	ldr	r3, [pc, #516]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	4a7f      	ldr	r2, [pc, #508]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d3e:	61fb      	str	r3, [r7, #28]
          break;
 8007d40:	e066      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007d42:	4b7c      	ldr	r3, [pc, #496]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d4e:	d162      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007d50:	4b78      	ldr	r3, [pc, #480]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5c:	d15b      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007d5e:	4b75      	ldr	r3, [pc, #468]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d68:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	fb03 f202 	mul.w	r2, r3, r2
 8007d72:	4b70      	ldr	r3, [pc, #448]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	091b      	lsrs	r3, r3, #4
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007d84:	4b6b      	ldr	r3, [pc, #428]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	0d5b      	lsrs	r3, r3, #21
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d98:	61fb      	str	r3, [r7, #28]
          break;
 8007d9a:	e03c      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007d9c:	4b65      	ldr	r3, [pc, #404]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007da8:	d138      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007daa:	4b62      	ldr	r3, [pc, #392]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db6:	d131      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007db8:	4b5e      	ldr	r3, [pc, #376]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	0a1b      	lsrs	r3, r3, #8
 8007dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	fb03 f202 	mul.w	r2, r3, r2
 8007dcc:	4b59      	ldr	r3, [pc, #356]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007dde:	4b55      	ldr	r3, [pc, #340]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	0d5b      	lsrs	r3, r3, #21
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	3301      	adds	r3, #1
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df2:	61fb      	str	r3, [r7, #28]
          break;
 8007df4:	e012      	b.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007df6:	4b4f      	ldr	r3, [pc, #316]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d10e      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007e04:	4b4d      	ldr	r3, [pc, #308]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007e06:	61fb      	str	r3, [r7, #28]
          break;
 8007e08:	e00b      	b.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8007e0a:	bf00      	nop
 8007e0c:	f000 bce2 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e10:	bf00      	nop
 8007e12:	f000 bcdf 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e16:	bf00      	nop
 8007e18:	f000 bcdc 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e1c:	bf00      	nop
 8007e1e:	f000 bcd9 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e22:	bf00      	nop
        break;
 8007e24:	f000 bcd6 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e36:	d13d      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007e38:	4b3e      	ldr	r3, [pc, #248]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e44:	f040 84c5 	bne.w	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007e48:	4b3a      	ldr	r3, [pc, #232]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e54:	f040 84bd 	bne.w	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007e58:	4b36      	ldr	r3, [pc, #216]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	0a1b      	lsrs	r3, r3, #8
 8007e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e62:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	fb03 f202 	mul.w	r2, r3, r2
 8007e6c:	4b31      	ldr	r3, [pc, #196]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	091b      	lsrs	r3, r3, #4
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	3301      	adds	r3, #1
 8007e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007e7e:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	0edb      	lsrs	r3, r3, #27
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007e90:	4b28      	ldr	r3, [pc, #160]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8007e9c:	2311      	movs	r3, #17
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e001      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8007ea2:	2307      	movs	r3, #7
 8007ea4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	61fb      	str	r3, [r7, #28]
      break;
 8007eb0:	f000 bc8f 	b.w	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007eb4:	4b1f      	ldr	r3, [pc, #124]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ec6:	d016      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ece:	f200 809b 	bhi.w	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed8:	d032      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ee0:	f200 8092 	bhi.w	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8084 	beq.w	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef2:	d052      	beq.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007ef4:	e088      	b.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f040 8084 	bne.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	e005      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	4a03      	ldr	r2, [pc, #12]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f2e:	61fb      	str	r3, [r7, #28]
          break;
 8007f30:	e06c      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8007f32:	bf00      	nop
 8007f34:	40021000 	.word	0x40021000
 8007f38:	0801538c 	.word	0x0801538c
 8007f3c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007f40:	4ba5      	ldr	r3, [pc, #660]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4c:	d160      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007f4e:	4ba2      	ldr	r3, [pc, #648]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f5a:	d159      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f5c:	4b9e      	ldr	r3, [pc, #632]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	0a1b      	lsrs	r3, r3, #8
 8007f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f66:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	fb03 f202 	mul.w	r2, r3, r2
 8007f70:	4b99      	ldr	r3, [pc, #612]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	091b      	lsrs	r3, r3, #4
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007f82:	4b95      	ldr	r3, [pc, #596]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	0d5b      	lsrs	r3, r3, #21
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	61fb      	str	r3, [r7, #28]
          break;
 8007f98:	e03a      	b.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007f9a:	4b8f      	ldr	r3, [pc, #572]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa6:	d135      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007fa8:	4b8b      	ldr	r3, [pc, #556]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb4:	d12e      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007fb6:	4b88      	ldr	r3, [pc, #544]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	fb03 f202 	mul.w	r2, r3, r2
 8007fca:	4b83      	ldr	r3, [pc, #524]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	091b      	lsrs	r3, r3, #4
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fda:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007fdc:	4b7e      	ldr	r3, [pc, #504]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	0d5b      	lsrs	r3, r3, #21
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff0:	61fb      	str	r3, [r7, #28]
          break;
 8007ff2:	e00f      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007ff4:	4b78      	ldr	r3, [pc, #480]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d10a      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8008002:	4b76      	ldr	r3, [pc, #472]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008004:	61fb      	str	r3, [r7, #28]
          break;
 8008006:	e007      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8008008:	bf00      	nop
 800800a:	e3e2      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800800c:	bf00      	nop
 800800e:	e3e0      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008010:	bf00      	nop
 8008012:	e3de      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008014:	bf00      	nop
 8008016:	e3dc      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8008018:	bf00      	nop
      break;
 800801a:	e3da      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800801c:	4b6e      	ldr	r3, [pc, #440]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b03      	cmp	r3, #3
 800802c:	d827      	bhi.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008045 	.word	0x08008045
 8008038:	0800804d 	.word	0x0800804d
 800803c:	08008055 	.word	0x08008055
 8008040:	08008069 	.word	0x08008069
          frequency = HAL_RCC_GetPCLK2Freq();
 8008044:	f7ff f87c 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 8008048:	61f8      	str	r0, [r7, #28]
          break;
 800804a:	e01d      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800804c:	f7fe ffca 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8008050:	61f8      	str	r0, [r7, #28]
          break;
 8008052:	e019      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008054:	4b60      	ldr	r3, [pc, #384]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008060:	d10f      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8008062:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008064:	61fb      	str	r3, [r7, #28]
          break;
 8008066:	e00c      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008068:	4b5b      	ldr	r3, [pc, #364]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b02      	cmp	r3, #2
 8008074:	d107      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8008076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800807a:	61fb      	str	r3, [r7, #28]
          break;
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800807e:	bf00      	nop
 8008080:	e3a8      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008082:	bf00      	nop
 8008084:	e3a6      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008086:	bf00      	nop
        break;
 8008088:	e3a4      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800808a:	4b53      	ldr	r3, [pc, #332]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f003 030c 	and.w	r3, r3, #12
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b0c      	cmp	r3, #12
 800809a:	d83a      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080d9 	.word	0x080080d9
 80080a8:	08008113 	.word	0x08008113
 80080ac:	08008113 	.word	0x08008113
 80080b0:	08008113 	.word	0x08008113
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	08008113 	.word	0x08008113
 80080bc:	08008113 	.word	0x08008113
 80080c0:	08008113 	.word	0x08008113
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	08008113 	.word	0x08008113
 80080cc:	08008113 	.word	0x08008113
 80080d0:	08008113 	.word	0x08008113
 80080d4:	080080fd 	.word	0x080080fd
          frequency = HAL_RCC_GetPCLK1Freq();
 80080d8:	f7ff f81c 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 80080dc:	61f8      	str	r0, [r7, #28]
          break;
 80080de:	e01d      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80080e0:	f7fe ff80 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80080e4:	61f8      	str	r0, [r7, #28]
          break;
 80080e6:	e019      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080e8:	4b3b      	ldr	r3, [pc, #236]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f4:	d10f      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80080f6:	4b3a      	ldr	r3, [pc, #232]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80080f8:	61fb      	str	r3, [r7, #28]
          break;
 80080fa:	e00c      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080fc:	4b36      	ldr	r3, [pc, #216]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b02      	cmp	r3, #2
 8008108:	d107      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800810a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810e:	61fb      	str	r3, [r7, #28]
          break;
 8008110:	e003      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8008112:	bf00      	nop
 8008114:	e35e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008116:	bf00      	nop
 8008118:	e35c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800811a:	bf00      	nop
        break;
 800811c:	e35a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800811e:	4b2e      	ldr	r3, [pc, #184]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d021      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b30      	cmp	r3, #48	; 0x30
 8008134:	d829      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b20      	cmp	r3, #32
 800813a:	d011      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b20      	cmp	r3, #32
 8008140:	d823      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b10      	cmp	r3, #16
 800814c:	d004      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800814e:	e01c      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008150:	f7fe ffe0 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8008154:	61f8      	str	r0, [r7, #28]
          break;
 8008156:	e01d      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008158:	f7fe ff44 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800815c:	61f8      	str	r0, [r7, #28]
          break;
 800815e:	e019      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008160:	4b1d      	ldr	r3, [pc, #116]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816c:	d10f      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800816e:	4b1c      	ldr	r3, [pc, #112]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008170:	61fb      	str	r3, [r7, #28]
          break;
 8008172:	e00c      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008174:	4b18      	ldr	r3, [pc, #96]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d107      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	61fb      	str	r3, [r7, #28]
          break;
 8008188:	e003      	b.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800818a:	bf00      	nop
 800818c:	e322      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800818e:	bf00      	nop
 8008190:	e320      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008192:	bf00      	nop
        break;
 8008194:	e31e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008196:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2bc0      	cmp	r3, #192	; 0xc0
 80081a6:	d027      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2bc0      	cmp	r3, #192	; 0xc0
 80081ac:	d82f      	bhi.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b80      	cmp	r3, #128	; 0x80
 80081b2:	d017      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d829      	bhi.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	d004      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80081c6:	e022      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081c8:	f7fe ffa4 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 80081cc:	61f8      	str	r0, [r7, #28]
          break;
 80081ce:	e023      	b.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80081d0:	f7fe ff08 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80081d4:	61f8      	str	r0, [r7, #28]
          break;
 80081d6:	e01f      	b.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80081d8:	40021000 	.word	0x40021000
 80081dc:	02dc6c00 	.word	0x02dc6c00
 80081e0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e4:	4b9b      	ldr	r3, [pc, #620]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f0:	d10f      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80081f2:	4b99      	ldr	r3, [pc, #612]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80081f4:	61fb      	str	r3, [r7, #28]
          break;
 80081f6:	e00c      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081f8:	4b96      	ldr	r3, [pc, #600]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b02      	cmp	r3, #2
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8008206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820a:	61fb      	str	r3, [r7, #28]
          break;
 800820c:	e003      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800820e:	bf00      	nop
 8008210:	e2e0      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008212:	bf00      	nop
 8008214:	e2de      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008216:	bf00      	nop
        break;
 8008218:	e2dc      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800821a:	4b8e      	ldr	r3, [pc, #568]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800821c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822c:	d025      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008234:	d82c      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d013      	beq.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008244:	d824      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008252:	d004      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8008254:	e01c      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008256:	f7fe ff5d 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800825a:	61f8      	str	r0, [r7, #28]
          break;
 800825c:	e01d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800825e:	f7fe fec1 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8008262:	61f8      	str	r0, [r7, #28]
          break;
 8008264:	e019      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008266:	4b7b      	ldr	r3, [pc, #492]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008272:	d10f      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8008274:	4b78      	ldr	r3, [pc, #480]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008276:	61fb      	str	r3, [r7, #28]
          break;
 8008278:	e00c      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800827a:	4b76      	ldr	r3, [pc, #472]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800827c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b02      	cmp	r3, #2
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8008288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828c:	61fb      	str	r3, [r7, #28]
          break;
 800828e:	e003      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8008290:	bf00      	nop
 8008292:	e29f      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008294:	bf00      	nop
 8008296:	e29d      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008298:	bf00      	nop
        break;
 800829a:	e29b      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800829c:	4b6d      	ldr	r3, [pc, #436]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082ae:	d025      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082b6:	d82c      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082be:	d013      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c6:	d824      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d4:	d004      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80082d6:	e01c      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7fe ff1c 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 80082dc:	61f8      	str	r0, [r7, #28]
          break;
 80082de:	e01d      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80082e0:	f7fe fe80 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80082e4:	61f8      	str	r0, [r7, #28]
          break;
 80082e6:	e019      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082e8:	4b5a      	ldr	r3, [pc, #360]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d10f      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80082f6:	4b58      	ldr	r3, [pc, #352]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80082f8:	61fb      	str	r3, [r7, #28]
          break;
 80082fa:	e00c      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082fc:	4b55      	ldr	r3, [pc, #340]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d107      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	61fb      	str	r3, [r7, #28]
          break;
 8008310:	e003      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8008312:	bf00      	nop
 8008314:	e25e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008316:	bf00      	nop
 8008318:	e25c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800831a:	bf00      	nop
        break;
 800831c:	e25a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800831e:	4b4d      	ldr	r3, [pc, #308]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008330:	d007      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008338:	d12f      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800833a:	f7fe fe53 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800833e:	61f8      	str	r0, [r7, #28]
          break;
 8008340:	e02e      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008342:	4b44      	ldr	r3, [pc, #272]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800834e:	d126      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008350:	4b40      	ldr	r3, [pc, #256]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d020      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800835c:	4b3d      	ldr	r3, [pc, #244]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008366:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	fb03 f202 	mul.w	r2, r3, r2
 8008370:	4b38      	ldr	r3, [pc, #224]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	091b      	lsrs	r3, r3, #4
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	3301      	adds	r3, #1
 800837c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008380:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008382:	4b34      	ldr	r3, [pc, #208]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	0e5b      	lsrs	r3, r3, #25
 8008388:	f003 0303 	and.w	r3, r3, #3
 800838c:	3301      	adds	r3, #1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	61fb      	str	r3, [r7, #28]
          break;
 8008398:	e001      	b.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800839a:	bf00      	nop
 800839c:	e21a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800839e:	bf00      	nop
        break;
 80083a0:	e218      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80083a2:	4b2c      	ldr	r3, [pc, #176]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80083a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80083b4:	f7fe fec4 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 80083b8:	61f8      	str	r0, [r7, #28]
        break;
 80083ba:	e20b      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80083bc:	f7fe fe12 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80083c0:	61f8      	str	r0, [r7, #28]
        break;
 80083c2:	e207      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80083c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083ca:	f003 0318 	and.w	r3, r3, #24
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b10      	cmp	r3, #16
 80083d4:	d010      	beq.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d834      	bhi.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d024      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80083e8:	e02d      	b.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80083ea:	69b9      	ldr	r1, [r7, #24]
 80083ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083f0:	f000 fbe2 	bl	8008bb8 <RCCEx_GetSAIxPeriphCLKFreq>
 80083f4:	61f8      	str	r0, [r7, #28]
          break;
 80083f6:	e02b      	b.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80083f8:	4b16      	ldr	r3, [pc, #88]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b02      	cmp	r3, #2
 8008402:	d122      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8008410:	4b10      	ldr	r3, [pc, #64]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	091b      	lsrs	r3, r3, #4
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	e005      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	4a0c      	ldr	r2, [pc, #48]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800842a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842e:	61fb      	str	r3, [r7, #28]
          break;
 8008430:	e00b      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8008442:	61fb      	str	r3, [r7, #28]
          break;
 8008444:	e003      	b.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8008446:	bf00      	nop
 8008448:	e1c4      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800844a:	bf00      	nop
 800844c:	e1c2      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800844e:	bf00      	nop
        break;
 8008450:	e1c0      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8008452:	bf00      	nop
 8008454:	40021000 	.word	0x40021000
 8008458:	00f42400 	.word	0x00f42400
 800845c:	0801538c 	.word	0x0801538c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008460:	4b96      	ldr	r3, [pc, #600]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d013      	beq.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847a:	d819      	bhi.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008488:	d004      	beq.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800848a:	e011      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800848c:	f7fe fe42 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8008490:	61f8      	str	r0, [r7, #28]
          break;
 8008492:	e010      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8008494:	f7fe fda6 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8008498:	61f8      	str	r0, [r7, #28]
          break;
 800849a:	e00c      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800849c:	4b87      	ldr	r3, [pc, #540]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d104      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80084aa:	4b85      	ldr	r3, [pc, #532]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80084ac:	61fb      	str	r3, [r7, #28]
          break;
 80084ae:	e001      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80084b0:	bf00      	nop
 80084b2:	e18f      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80084b4:	bf00      	nop
        break;
 80084b6:	e18d      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80084b8:	4b80      	ldr	r3, [pc, #512]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80084ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ca:	d013      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d2:	d819      	bhi.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084e0:	d004      	beq.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80084e2:	e011      	b.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084e4:	f7fe fe16 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 80084e8:	61f8      	str	r0, [r7, #28]
          break;
 80084ea:	e010      	b.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80084ec:	f7fe fd7a 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80084f0:	61f8      	str	r0, [r7, #28]
          break;
 80084f2:	e00c      	b.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084f4:	4b71      	ldr	r3, [pc, #452]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008500:	d104      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8008502:	4b6f      	ldr	r3, [pc, #444]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008504:	61fb      	str	r3, [r7, #28]
          break;
 8008506:	e001      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8008508:	bf00      	nop
 800850a:	e163      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800850c:	bf00      	nop
        break;
 800850e:	e161      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008510:	4b6a      	ldr	r3, [pc, #424]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008522:	d013      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852a:	d819      	bhi.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008538:	d004      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800853c:	f7fe fdea 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8008540:	61f8      	str	r0, [r7, #28]
          break;
 8008542:	e010      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008544:	f7fe fd4e 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8008548:	61f8      	str	r0, [r7, #28]
          break;
 800854a:	e00c      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800854c:	4b5b      	ldr	r3, [pc, #364]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008558:	d104      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800855a:	4b59      	ldr	r3, [pc, #356]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800855c:	61fb      	str	r3, [r7, #28]
          break;
 800855e:	e001      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8008560:	bf00      	nop
 8008562:	e137      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008564:	bf00      	nop
        break;
 8008566:	e135      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008568:	4b54      	ldr	r3, [pc, #336]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800856a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d011      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d818      	bhi.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d004      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800858c:	e011      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800858e:	f7fe fdc1 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8008592:	61f8      	str	r0, [r7, #28]
          break;
 8008594:	e010      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8008596:	f7fe fd25 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800859a:	61f8      	str	r0, [r7, #28]
          break;
 800859c:	e00c      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800859e:	4b47      	ldr	r3, [pc, #284]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085aa:	d104      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80085ac:	4b44      	ldr	r3, [pc, #272]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80085ae:	61fb      	str	r3, [r7, #28]
          break;
 80085b0:	e001      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80085b2:	bf00      	nop
 80085b4:	e10e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80085b6:	bf00      	nop
        break;
 80085b8:	e10c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80085ba:	4b40      	ldr	r3, [pc, #256]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085cc:	d02c      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085d4:	d833      	bhi.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085dc:	d01a      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085e4:	d82b      	bhi.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085f2:	d004      	beq.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80085f4:	e023      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085f6:	f7fe fd8d 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 80085fa:	61f8      	str	r0, [r7, #28]
          break;
 80085fc:	e026      	b.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085fe:	4b2f      	ldr	r3, [pc, #188]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b02      	cmp	r3, #2
 800860a:	d11a      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800860c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008610:	61fb      	str	r3, [r7, #28]
          break;
 8008612:	e016      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008614:	4b29      	ldr	r3, [pc, #164]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800861c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008620:	d111      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8008622:	4b27      	ldr	r3, [pc, #156]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008624:	61fb      	str	r3, [r7, #28]
          break;
 8008626:	e00e      	b.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008628:	4b24      	ldr	r3, [pc, #144]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8008636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863a:	61fb      	str	r3, [r7, #28]
          break;
 800863c:	e005      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800863e:	bf00      	nop
 8008640:	e0c8      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008642:	bf00      	nop
 8008644:	e0c6      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008646:	bf00      	nop
 8008648:	e0c4      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800864a:	bf00      	nop
        break;
 800864c:	e0c2      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800864e:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008654:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008660:	d030      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008668:	d837      	bhi.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008670:	d01a      	beq.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008678:	d82f      	bhi.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008686:	d004      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8008688:	e027      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800868a:	f7fe fd43 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800868e:	61f8      	str	r0, [r7, #28]
          break;
 8008690:	e02a      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b02      	cmp	r3, #2
 800869e:	d11e      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80086a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086a4:	61fb      	str	r3, [r7, #28]
          break;
 80086a6:	e01a      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b4:	d115      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80086b6:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80086b8:	61fb      	str	r3, [r7, #28]
          break;
 80086ba:	e012      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80086bc:	40021000 	.word	0x40021000
 80086c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086c4:	4b46      	ldr	r3, [pc, #280]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d109      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80086d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d6:	61fb      	str	r3, [r7, #28]
          break;
 80086d8:	e005      	b.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80086da:	bf00      	nop
 80086dc:	e07a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80086de:	bf00      	nop
 80086e0:	e078      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80086e2:	bf00      	nop
 80086e4:	e076      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80086e6:	bf00      	nop
        break;
 80086e8:	e074      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80086ea:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80086ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086fc:	d02c      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008704:	d855      	bhi.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008712:	d004      	beq.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8008714:	e04d      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008716:	f7fe fc65 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800871a:	61f8      	str	r0, [r7, #28]
          break;
 800871c:	e04e      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800871e:	4b30      	ldr	r3, [pc, #192]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	d145      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800872a:	4b2d      	ldr	r3, [pc, #180]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008736:	4b2a      	ldr	r3, [pc, #168]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	091b      	lsrs	r3, r3, #4
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	e005      	b.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8008742:	4b27      	ldr	r3, [pc, #156]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008748:	0a1b      	lsrs	r3, r3, #8
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	4a25      	ldr	r2, [pc, #148]	; (80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8008750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008754:	61fb      	str	r3, [r7, #28]
          break;
 8008756:	e02e      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008758:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008764:	d129      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008766:	4b1e      	ldr	r3, [pc, #120]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800876e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008772:	d122      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008774:	4b1a      	ldr	r3, [pc, #104]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	0a1b      	lsrs	r3, r3, #8
 800877a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	fb03 f202 	mul.w	r2, r3, r2
 8008788:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	091b      	lsrs	r3, r3, #4
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	3301      	adds	r3, #1
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800879a:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	0d5b      	lsrs	r3, r3, #21
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	3301      	adds	r3, #1
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	61fb      	str	r3, [r7, #28]
          break;
 80087b0:	e003      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80087b2:	bf00      	nop
 80087b4:	e00e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80087b6:	bf00      	nop
 80087b8:	e00c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80087ba:	bf00      	nop
        break;
 80087bc:	e00a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087be:	bf00      	nop
 80087c0:	e008      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087c2:	bf00      	nop
 80087c4:	e006      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087c6:	bf00      	nop
 80087c8:	e004      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087ca:	bf00      	nop
 80087cc:	e002      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087ce:	bf00      	nop
 80087d0:	e000      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80087d2:	bf00      	nop
    }
  }

  return(frequency);
 80087d4:	69fb      	ldr	r3, [r7, #28]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	40021000 	.word	0x40021000
 80087e4:	0801538c 	.word	0x0801538c

080087e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087f6:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008802:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f003 0203 	and.w	r2, r3, #3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d103      	bne.n	800881a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
       ||
 8008816:	2b00      	cmp	r3, #0
 8008818:	d142      	bne.n	80088a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
 800881e:	e03f      	b.n	80088a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d018      	beq.n	800885a <RCCEx_PLLSAI1_Config+0x72>
 8008828:	2b03      	cmp	r3, #3
 800882a:	d825      	bhi.n	8008878 <RCCEx_PLLSAI1_Config+0x90>
 800882c:	2b01      	cmp	r3, #1
 800882e:	d002      	beq.n	8008836 <RCCEx_PLLSAI1_Config+0x4e>
 8008830:	2b02      	cmp	r3, #2
 8008832:	d009      	beq.n	8008848 <RCCEx_PLLSAI1_Config+0x60>
 8008834:	e020      	b.n	8008878 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008836:	4b62      	ldr	r3, [pc, #392]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11d      	bne.n	800887e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008846:	e01a      	b.n	800887e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008848:	4b5d      	ldr	r3, [pc, #372]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008850:	2b00      	cmp	r3, #0
 8008852:	d116      	bne.n	8008882 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008858:	e013      	b.n	8008882 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800885a:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10f      	bne.n	8008886 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008866:	4b56      	ldr	r3, [pc, #344]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008876:	e006      	b.n	8008886 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
      break;
 800887c:	e004      	b.n	8008888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800887e:	bf00      	nop
 8008880:	e002      	b.n	8008888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008886:	bf00      	nop
    }

    if(status == HAL_OK)
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d108      	bne.n	80088a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800888e:	4b4c      	ldr	r3, [pc, #304]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f023 0203 	bic.w	r2, r3, #3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4949      	ldr	r1, [pc, #292]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800889c:	4313      	orrs	r3, r2
 800889e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f040 8086 	bne.w	80089b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088a8:	4b45      	ldr	r3, [pc, #276]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a44      	ldr	r2, [pc, #272]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b4:	f7fb fa42 	bl	8003d3c <HAL_GetTick>
 80088b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088ba:	e009      	b.n	80088d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088bc:	f7fb fa3e 	bl	8003d3c <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d902      	bls.n	80088d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	73fb      	strb	r3, [r7, #15]
        break;
 80088ce:	e005      	b.n	80088dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088d0:	4b3b      	ldr	r3, [pc, #236]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1ef      	bne.n	80088bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d168      	bne.n	80089b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d113      	bne.n	8008910 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088e8:	4b35      	ldr	r3, [pc, #212]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	4b35      	ldr	r3, [pc, #212]	; (80089c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6892      	ldr	r2, [r2, #8]
 80088f4:	0211      	lsls	r1, r2, #8
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68d2      	ldr	r2, [r2, #12]
 80088fa:	06d2      	lsls	r2, r2, #27
 80088fc:	4311      	orrs	r1, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6852      	ldr	r2, [r2, #4]
 8008902:	3a01      	subs	r2, #1
 8008904:	0112      	lsls	r2, r2, #4
 8008906:	430a      	orrs	r2, r1
 8008908:	492d      	ldr	r1, [pc, #180]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800890a:	4313      	orrs	r3, r2
 800890c:	610b      	str	r3, [r1, #16]
 800890e:	e02d      	b.n	800896c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d115      	bne.n	8008942 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008916:	4b2a      	ldr	r3, [pc, #168]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008918:	691a      	ldr	r2, [r3, #16]
 800891a:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800891c:	4013      	ands	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6892      	ldr	r2, [r2, #8]
 8008922:	0211      	lsls	r1, r2, #8
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6912      	ldr	r2, [r2, #16]
 8008928:	0852      	lsrs	r2, r2, #1
 800892a:	3a01      	subs	r2, #1
 800892c:	0552      	lsls	r2, r2, #21
 800892e:	4311      	orrs	r1, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6852      	ldr	r2, [r2, #4]
 8008934:	3a01      	subs	r2, #1
 8008936:	0112      	lsls	r2, r2, #4
 8008938:	430a      	orrs	r2, r1
 800893a:	4921      	ldr	r1, [pc, #132]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800893c:	4313      	orrs	r3, r2
 800893e:	610b      	str	r3, [r1, #16]
 8008940:	e014      	b.n	800896c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008942:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008944:	691a      	ldr	r2, [r3, #16]
 8008946:	4b21      	ldr	r3, [pc, #132]	; (80089cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008948:	4013      	ands	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6892      	ldr	r2, [r2, #8]
 800894e:	0211      	lsls	r1, r2, #8
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6952      	ldr	r2, [r2, #20]
 8008954:	0852      	lsrs	r2, r2, #1
 8008956:	3a01      	subs	r2, #1
 8008958:	0652      	lsls	r2, r2, #25
 800895a:	4311      	orrs	r1, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6852      	ldr	r2, [r2, #4]
 8008960:	3a01      	subs	r2, #1
 8008962:	0112      	lsls	r2, r2, #4
 8008964:	430a      	orrs	r2, r1
 8008966:	4916      	ldr	r1, [pc, #88]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008968:	4313      	orrs	r3, r2
 800896a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800896c:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a13      	ldr	r2, [pc, #76]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008978:	f7fb f9e0 	bl	8003d3c <HAL_GetTick>
 800897c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800897e:	e009      	b.n	8008994 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008980:	f7fb f9dc 	bl	8003d3c <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d902      	bls.n	8008994 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	73fb      	strb	r3, [r7, #15]
          break;
 8008992:	e005      	b.n	80089a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0ef      	beq.n	8008980 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80089a6:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	4904      	ldr	r1, [pc, #16]	; (80089c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40021000 	.word	0x40021000
 80089c4:	07ff800f 	.word	0x07ff800f
 80089c8:	ff9f800f 	.word	0xff9f800f
 80089cc:	f9ff800f 	.word	0xf9ff800f

080089d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089de:	4b72      	ldr	r3, [pc, #456]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00e      	beq.n	8008a08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80089ea:	4b6f      	ldr	r3, [pc, #444]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f003 0203 	and.w	r2, r3, #3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d103      	bne.n	8008a02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
       ||
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d142      	bne.n	8008a88 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
 8008a06:	e03f      	b.n	8008a88 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d018      	beq.n	8008a42 <RCCEx_PLLSAI2_Config+0x72>
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d825      	bhi.n	8008a60 <RCCEx_PLLSAI2_Config+0x90>
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d002      	beq.n	8008a1e <RCCEx_PLLSAI2_Config+0x4e>
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d009      	beq.n	8008a30 <RCCEx_PLLSAI2_Config+0x60>
 8008a1c:	e020      	b.n	8008a60 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a1e:	4b62      	ldr	r3, [pc, #392]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d11d      	bne.n	8008a66 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a2e:	e01a      	b.n	8008a66 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a30:	4b5d      	ldr	r3, [pc, #372]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d116      	bne.n	8008a6a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a40:	e013      	b.n	8008a6a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a42:	4b59      	ldr	r3, [pc, #356]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a4e:	4b56      	ldr	r3, [pc, #344]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a5e:	e006      	b.n	8008a6e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
      break;
 8008a64:	e004      	b.n	8008a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a66:	bf00      	nop
 8008a68:	e002      	b.n	8008a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d108      	bne.n	8008a88 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008a76:	4b4c      	ldr	r3, [pc, #304]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f023 0203 	bic.w	r2, r3, #3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4949      	ldr	r1, [pc, #292]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 8086 	bne.w	8008b9c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a90:	4b45      	ldr	r3, [pc, #276]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a44      	ldr	r2, [pc, #272]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a9c:	f7fb f94e 	bl	8003d3c <HAL_GetTick>
 8008aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008aa2:	e009      	b.n	8008ab8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008aa4:	f7fb f94a 	bl	8003d3c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d902      	bls.n	8008ab8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ab6:	e005      	b.n	8008ac4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ab8:	4b3b      	ldr	r3, [pc, #236]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1ef      	bne.n	8008aa4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d168      	bne.n	8008b9c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d113      	bne.n	8008af8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ad0:	4b35      	ldr	r3, [pc, #212]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	4b35      	ldr	r3, [pc, #212]	; (8008bac <RCCEx_PLLSAI2_Config+0x1dc>)
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6892      	ldr	r2, [r2, #8]
 8008adc:	0211      	lsls	r1, r2, #8
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	68d2      	ldr	r2, [r2, #12]
 8008ae2:	06d2      	lsls	r2, r2, #27
 8008ae4:	4311      	orrs	r1, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6852      	ldr	r2, [r2, #4]
 8008aea:	3a01      	subs	r2, #1
 8008aec:	0112      	lsls	r2, r2, #4
 8008aee:	430a      	orrs	r2, r1
 8008af0:	492d      	ldr	r1, [pc, #180]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	614b      	str	r3, [r1, #20]
 8008af6:	e02d      	b.n	8008b54 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d115      	bne.n	8008b2a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008afe:	4b2a      	ldr	r3, [pc, #168]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	4b2b      	ldr	r3, [pc, #172]	; (8008bb0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6892      	ldr	r2, [r2, #8]
 8008b0a:	0211      	lsls	r1, r2, #8
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6912      	ldr	r2, [r2, #16]
 8008b10:	0852      	lsrs	r2, r2, #1
 8008b12:	3a01      	subs	r2, #1
 8008b14:	0552      	lsls	r2, r2, #21
 8008b16:	4311      	orrs	r1, r2
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	6852      	ldr	r2, [r2, #4]
 8008b1c:	3a01      	subs	r2, #1
 8008b1e:	0112      	lsls	r2, r2, #4
 8008b20:	430a      	orrs	r2, r1
 8008b22:	4921      	ldr	r1, [pc, #132]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	614b      	str	r3, [r1, #20]
 8008b28:	e014      	b.n	8008b54 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008b2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6892      	ldr	r2, [r2, #8]
 8008b36:	0211      	lsls	r1, r2, #8
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6952      	ldr	r2, [r2, #20]
 8008b3c:	0852      	lsrs	r2, r2, #1
 8008b3e:	3a01      	subs	r2, #1
 8008b40:	0652      	lsls	r2, r2, #25
 8008b42:	4311      	orrs	r1, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6852      	ldr	r2, [r2, #4]
 8008b48:	3a01      	subs	r2, #1
 8008b4a:	0112      	lsls	r2, r2, #4
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	4916      	ldr	r1, [pc, #88]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b60:	f7fb f8ec 	bl	8003d3c <HAL_GetTick>
 8008b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b66:	e009      	b.n	8008b7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b68:	f7fb f8e8 	bl	8003d3c <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d902      	bls.n	8008b7c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	73fb      	strb	r3, [r7, #15]
          break;
 8008b7a:	e005      	b.n	8008b88 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0ef      	beq.n	8008b68 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	4904      	ldr	r1, [pc, #16]	; (8008ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	07ff800f 	.word	0x07ff800f
 8008bb0:	ff9f800f 	.word	0xff9f800f
 8008bb4:	f9ff800f 	.word	0xf9ff800f

08008bb8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	; 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d10b      	bne.n	8008bee <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008bd6:	4b7e      	ldr	r3, [pc, #504]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bdc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008be0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b60      	cmp	r3, #96	; 0x60
 8008be6:	d112      	bne.n	8008c0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008be8:	4b7a      	ldr	r3, [pc, #488]	; (8008dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e00f      	b.n	8008c0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf4:	d10b      	bne.n	8008c0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008bf6:	4b76      	ldr	r3, [pc, #472]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c00:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c08:	d101      	bne.n	8008c0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008c0a:	4b72      	ldr	r3, [pc, #456]	; (8008dd4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008c0c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f040 80d6 	bne.w	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d003      	beq.n	8008c28 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c26:	d13b      	bne.n	8008ca0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008c28:	4b69      	ldr	r3, [pc, #420]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c34:	f040 80c4 	bne.w	8008dc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008c38:	4b65      	ldr	r3, [pc, #404]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80bd 	beq.w	8008dc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c46:	4b62      	ldr	r3, [pc, #392]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	f003 030f 	and.w	r3, r3, #15
 8008c50:	3301      	adds	r3, #1
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c58:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c5a:	4b5d      	ldr	r3, [pc, #372]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008c66:	4b5a      	ldr	r3, [pc, #360]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	0edb      	lsrs	r3, r3, #27
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008c78:	4b55      	ldr	r3, [pc, #340]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8008c84:	2311      	movs	r3, #17
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e001      	b.n	8008c8e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008c8a:	2307      	movs	r3, #7
 8008c8c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	fb03 f202 	mul.w	r2, r3, r2
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008c9e:	e08f      	b.n	8008dc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d13a      	bne.n	8008d1c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008ca6:	4b4a      	ldr	r3, [pc, #296]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb2:	f040 8086 	bne.w	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008cb6:	4b46      	ldr	r3, [pc, #280]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d07f      	beq.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008cc2:	4b43      	ldr	r3, [pc, #268]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	3301      	adds	r3, #1
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008cd6:	4b3e      	ldr	r3, [pc, #248]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	0a1b      	lsrs	r3, r3, #8
 8008cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008ce2:	4b3b      	ldr	r3, [pc, #236]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	0edb      	lsrs	r3, r3, #27
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008cf4:	4b36      	ldr	r3, [pc, #216]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008d00:	2311      	movs	r3, #17
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e001      	b.n	8008d0a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008d06:	2307      	movs	r3, #7
 8008d08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fb03 f202 	mul.w	r2, r3, r2
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	e052      	b.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d003      	beq.n	8008d2a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d28:	d109      	bne.n	8008d3e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d2a:	4b29      	ldr	r3, [pc, #164]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d36:	d144      	bne.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008d38:	4b27      	ldr	r3, [pc, #156]	; (8008dd8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8008d3a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d3c:	e041      	b.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d003      	beq.n	8008d4c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4a:	d13a      	bne.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008d4c:	4b20      	ldr	r3, [pc, #128]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d58:	d133      	bne.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d02d      	beq.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	3301      	adds	r3, #1
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d84:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008d86:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	0edb      	lsrs	r3, r3, #27
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008d98:	4b0d      	ldr	r3, [pc, #52]	; (8008dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008da4:	2311      	movs	r3, #17
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	e001      	b.n	8008dae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008daa:	2307      	movs	r3, #7
 8008dac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	fb03 f202 	mul.w	r2, r3, r2
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	e000      	b.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008dc0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3724      	adds	r7, #36	; 0x24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	001fff68 	.word	0x001fff68
 8008dd8:	00f42400 	.word	0x00f42400

08008ddc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e078      	b.n	8008ee0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7fa fcc9 	bl	8003798 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2203      	movs	r2, #3
 8008e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f86a 	bl	8008ee8 <HAL_SD_InitCard>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e060      	b.n	8008ee0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fdcd 	bl	80099c4 <HAL_SD_GetCardStatus>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e055      	b.n	8008ee0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008e34:	7e3b      	ldrb	r3, [r7, #24]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008e3a:	7e7b      	ldrb	r3, [r7, #25]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10a      	bne.n	8008e5e <HAL_SD_Init+0x82>
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <HAL_SD_Init+0x78>
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e5c:	e00b      	b.n	8008e76 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d104      	bne.n	8008e70 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e6e:	e002      	b.n	8008e76 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fe83 	bl	8009b88 <HAL_SD_ConfigWideBusOperation>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e029      	b.n	8008ee0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008e8c:	f7fa ff56 	bl	8003d3c <HAL_GetTick>
 8008e90:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008e92:	e014      	b.n	8008ebe <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008e94:	f7fa ff52 	bl	8003d3c <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea2:	d10c      	bne.n	8008ebe <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e010      	b.n	8008ee0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 ff76 	bl	8009db0 <HAL_SD_GetCardState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d1e4      	bne.n	8008e94 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3728      	adds	r7, #40	; 0x28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ee8:	b5b0      	push	{r4, r5, r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008f04:	f7fe fd4e 	bl	80079a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f08:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e079      	b.n	8009018 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	4a3d      	ldr	r2, [pc, #244]	; (8009020 <HAL_SD_InitCard+0x138>)
 8008f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2e:	091b      	lsrs	r3, r3, #4
 8008f30:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d107      	bne.n	8008f50 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0210 	orr.w	r2, r2, #16
 8008f4e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681d      	ldr	r5, [r3, #0]
 8008f54:	466c      	mov	r4, sp
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f003 fcab 	bl	800c8c4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f003 fcee 	bl	800c954 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008f84:	4a27      	ldr	r2, [pc, #156]	; (8009024 <HAL_SD_InitCard+0x13c>)
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fa fee0 	bl	8003d54 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 ffeb 	bl	8009f70 <SD_PowerON>
 8008f9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e02e      	b.n	8009018 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 ff18 	bl	8009df0 <SD_InitCard>
 8008fc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e01b      	b.n	8009018 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f003 fd49 	bl	800ca80 <SDMMC_CmdBlockLength>
 8008fee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00f      	beq.n	8009016 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <HAL_SD_InitCard+0x140>)
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3728      	adds	r7, #40	; 0x28
 800901c:	46bd      	mov	sp, r7
 800901e:	bdb0      	pop	{r4, r5, r7, pc}
 8009020:	014f8b59 	.word	0x014f8b59
 8009024:	00012110 	.word	0x00012110
 8009028:	1fe00fff 	.word	0x1fe00fff

0800902c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b092      	sub	sp, #72	; 0x48
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800903a:	f7fa fe7f 	bl	8003d3c <HAL_GetTick>
 800903e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e170      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b01      	cmp	r3, #1
 8009068:	f040 8163 	bne.w	8009332 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	429a      	cmp	r2, r3
 800907e:	d907      	bls.n	8009090 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e157      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2203      	movs	r2, #3
 8009094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2200      	movs	r2, #0
 800909e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d002      	beq.n	80090ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	025b      	lsls	r3, r3, #9
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	025b      	lsls	r3, r3, #9
 80090b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090ba:	2390      	movs	r3, #144	; 0x90
 80090bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090be:	2302      	movs	r3, #2
 80090c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f107 0214 	add.w	r2, r7, #20
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f003 fca7 	bl	800ca28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d90a      	bls.n	8009106 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2202      	movs	r2, #2
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090fc:	4618      	mov	r0, r3
 80090fe:	f003 fd05 	bl	800cb0c <SDMMC_CmdReadMultiBlock>
 8009102:	6478      	str	r0, [r7, #68]	; 0x44
 8009104:	e009      	b.n	800911a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009112:	4618      	mov	r0, r3
 8009114:	f003 fcd7 	bl	800cac6 <SDMMC_CmdReadSingleBlock>
 8009118:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800911a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911c:	2b00      	cmp	r3, #0
 800911e:	d012      	beq.n	8009146 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a88      	ldr	r2, [pc, #544]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 8009126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800912c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912e:	431a      	orrs	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e0fc      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800914a:	e061      	b.n	8009210 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d03c      	beq.n	80091d4 <HAL_SD_ReadBlocks+0x1a8>
 800915a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d039      	beq.n	80091d4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009160:	2300      	movs	r3, #0
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
 8009164:	e033      	b.n	80091ce <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f003 fbd4 	bl	800c918 <SDMMC_ReadFIFO>
 8009170:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	b2da      	uxtb	r2, r3
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	3301      	adds	r3, #1
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	3b01      	subs	r3, #1
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	b2da      	uxtb	r2, r3
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	3301      	adds	r3, #1
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	3b01      	subs	r3, #1
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	0c1b      	lsrs	r3, r3, #16
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a8:	3301      	adds	r3, #1
 80091aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	3b01      	subs	r3, #1
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	0e1b      	lsrs	r3, r3, #24
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	3301      	adds	r3, #1
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c4:	3b01      	subs	r3, #1
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80091c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ca:	3301      	adds	r3, #1
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
 80091ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	d9c8      	bls.n	8009166 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80091d4:	f7fa fdb2 	bl	8003d3c <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d902      	bls.n	80091ea <HAL_SD_ReadBlocks+0x1be>
 80091e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d112      	bne.n	8009210 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a56      	ldr	r2, [pc, #344]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e097      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009216:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800921a:	2b00      	cmp	r3, #0
 800921c:	d096      	beq.n	800914c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800922c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d022      	beq.n	8009282 <HAL_SD_ReadBlocks+0x256>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d91f      	bls.n	8009282 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	2b03      	cmp	r3, #3
 8009248:	d01b      	beq.n	8009282 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	f003 fcc6 	bl	800cbe0 <SDMMC_CmdStopTransfer>
 8009254:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009258:	2b00      	cmp	r3, #0
 800925a:	d012      	beq.n	8009282 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a39      	ldr	r2, [pc, #228]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926a:	431a      	orrs	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e05e      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d012      	beq.n	80092b6 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a2c      	ldr	r2, [pc, #176]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	f043 0208 	orr.w	r2, r3, #8
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e044      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d012      	beq.n	80092ea <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a1f      	ldr	r2, [pc, #124]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	f043 0202 	orr.w	r2, r3, #2
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e02a      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d012      	beq.n	800931e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a12      	ldr	r2, [pc, #72]	; (8009348 <HAL_SD_ReadBlocks+0x31c>)
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e010      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a0a      	ldr	r2, [pc, #40]	; (800934c <HAL_SD_ReadBlocks+0x320>)
 8009324:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e006      	b.n	8009340 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	3748      	adds	r7, #72	; 0x48
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	1fe00fff 	.word	0x1fe00fff
 800934c:	18000f3a 	.word	0x18000f3a

08009350 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b092      	sub	sp, #72	; 0x48
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800935e:	f7fa fced 	bl	8003d3c <HAL_GetTick>
 8009362:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d107      	bne.n	8009382 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e174      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	f040 8167 	bne.w	800965e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	441a      	add	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d907      	bls.n	80093b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e15b      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2203      	movs	r2, #3
 80093b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d002      	beq.n	80093d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	025b      	lsls	r3, r3, #9
 80093d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	025b      	lsls	r3, r3, #9
 80093dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80093de:	2390      	movs	r3, #144	; 0x90
 80093e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80093e2:	2300      	movs	r3, #0
 80093e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f107 0218 	add.w	r2, r7, #24
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f003 fb15 	bl	800ca28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800940c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d90a      	bls.n	800942a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009420:	4618      	mov	r0, r3
 8009422:	f003 fbb9 	bl	800cb98 <SDMMC_CmdWriteMultiBlock>
 8009426:	6478      	str	r0, [r7, #68]	; 0x44
 8009428:	e009      	b.n	800943e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2210      	movs	r2, #16
 800942e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009436:	4618      	mov	r0, r3
 8009438:	f003 fb8b 	bl	800cb52 <SDMMC_CmdWriteSingleBlock>
 800943c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800943e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009440:	2b00      	cmp	r3, #0
 8009442:	d012      	beq.n	800946a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a8a      	ldr	r2, [pc, #552]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 800944a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009452:	431a      	orrs	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e100      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800946e:	e065      	b.n	800953c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d040      	beq.n	8009500 <HAL_SD_WriteBlocks+0x1b0>
 800947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d03d      	beq.n	8009500 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009484:	2300      	movs	r3, #0
 8009486:	643b      	str	r3, [r7, #64]	; 0x40
 8009488:	e037      	b.n	80094fa <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009492:	3301      	adds	r3, #1
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	3b01      	subs	r3, #1
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	021a      	lsls	r2, r3, #8
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094aa:	3301      	adds	r3, #1
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	3b01      	subs	r3, #1
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80094b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	041a      	lsls	r2, r3, #16
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4313      	orrs	r3, r2
 80094be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	3301      	adds	r3, #1
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	3b01      	subs	r3, #1
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	061a      	lsls	r2, r3, #24
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	3301      	adds	r3, #1
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	3b01      	subs	r3, #1
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f107 0214 	add.w	r2, r7, #20
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f003 fa1f 	bl	800c932 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80094f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f6:	3301      	adds	r3, #1
 80094f8:	643b      	str	r3, [r7, #64]	; 0x40
 80094fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fc:	2b07      	cmp	r3, #7
 80094fe:	d9c4      	bls.n	800948a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009500:	f7fa fc1c 	bl	8003d3c <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800950c:	429a      	cmp	r2, r3
 800950e:	d902      	bls.n	8009516 <HAL_SD_WriteBlocks+0x1c6>
 8009510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009512:	2b00      	cmp	r3, #0
 8009514:	d112      	bne.n	800953c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a56      	ldr	r2, [pc, #344]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009524:	431a      	orrs	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e097      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009546:	2b00      	cmp	r3, #0
 8009548:	d092      	beq.n	8009470 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009558:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009564:	2b00      	cmp	r3, #0
 8009566:	d022      	beq.n	80095ae <HAL_SD_WriteBlocks+0x25e>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d91f      	bls.n	80095ae <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	2b03      	cmp	r3, #3
 8009574:	d01b      	beq.n	80095ae <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f003 fb30 	bl	800cbe0 <SDMMC_CmdStopTransfer>
 8009580:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009584:	2b00      	cmp	r3, #0
 8009586:	d012      	beq.n	80095ae <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a39      	ldr	r2, [pc, #228]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009596:	431a      	orrs	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e05e      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d012      	beq.n	80095e2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a2c      	ldr	r2, [pc, #176]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	f043 0208 	orr.w	r2, r3, #8
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e044      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d012      	beq.n	8009616 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1f      	ldr	r2, [pc, #124]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	f043 0202 	orr.w	r2, r3, #2
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e02a      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b00      	cmp	r3, #0
 8009622:	d012      	beq.n	800964a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a12      	ldr	r2, [pc, #72]	; (8009674 <HAL_SD_WriteBlocks+0x324>)
 800962a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	f043 0210 	orr.w	r2, r3, #16
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e010      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a0a      	ldr	r2, [pc, #40]	; (8009678 <HAL_SD_WriteBlocks+0x328>)
 8009650:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	e006      	b.n	800966c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
  }
}
 800966c:	4618      	mov	r0, r3
 800966e:	3748      	adds	r7, #72	; 0x48
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	1fe00fff 	.word	0x1fe00fff
 8009678:	18000f3a 	.word	0x18000f3a

0800967c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800968a:	0f9b      	lsrs	r3, r3, #30
 800968c:	b2da      	uxtb	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009696:	0e9b      	lsrs	r3, r3, #26
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a8:	0e1b      	lsrs	r3, r3, #24
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ba:	0c1b      	lsrs	r3, r3, #16
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096dc:	0d1b      	lsrs	r3, r3, #20
 80096de:	b29a      	uxth	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fa:	0bdb      	lsrs	r3, r3, #15
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	b2da      	uxtb	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800970c:	0b9b      	lsrs	r3, r3, #14
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	b2da      	uxtb	r2, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800971e:	0b5b      	lsrs	r3, r3, #13
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009730:	0b1b      	lsrs	r3, r3, #12
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	b2da      	uxtb	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2200      	movs	r2, #0
 8009742:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d163      	bne.n	8009814 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009750:	009a      	lsls	r2, r3, #2
 8009752:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009756:	4013      	ands	r3, r2
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800975c:	0f92      	lsrs	r2, r2, #30
 800975e:	431a      	orrs	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009768:	0edb      	lsrs	r3, r3, #27
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	b2da      	uxtb	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800977a:	0e1b      	lsrs	r3, r3, #24
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	b2da      	uxtb	r2, r3
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800978c:	0d5b      	lsrs	r3, r3, #21
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	b2da      	uxtb	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800979e:	0c9b      	lsrs	r3, r3, #18
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b0:	0bdb      	lsrs	r3, r3, #15
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0307 	and.w	r3, r3, #7
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	7e1b      	ldrb	r3, [r3, #24]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	3302      	adds	r3, #2
 80097d4:	2201      	movs	r2, #1
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80097de:	fb03 f202 	mul.w	r2, r3, r2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	7a1b      	ldrb	r3, [r3, #8]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	2201      	movs	r2, #1
 80097f2:	409a      	lsls	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009800:	0a52      	lsrs	r2, r2, #9
 8009802:	fb03 f202 	mul.w	r2, r3, r2
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009810:	659a      	str	r2, [r3, #88]	; 0x58
 8009812:	e031      	b.n	8009878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d11d      	bne.n	8009858 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800982a:	0c1b      	lsrs	r3, r3, #16
 800982c:	431a      	orrs	r2, r3
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	3301      	adds	r3, #1
 8009838:	029a      	lsls	r2, r3, #10
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800984c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	659a      	str	r2, [r3, #88]	; 0x58
 8009856:	e00f      	b.n	8009878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a58      	ldr	r2, [pc, #352]	; (80099c0 <HAL_SD_GetCardCSD+0x344>)
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e09d      	b.n	80099b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800987c:	0b9b      	lsrs	r3, r3, #14
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800988e:	09db      	lsrs	r3, r3, #7
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b0:	0fdb      	lsrs	r3, r3, #31
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098bc:	0f5b      	lsrs	r3, r3, #29
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	f003 0303 	and.w	r3, r3, #3
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ce:	0e9b      	lsrs	r3, r3, #26
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e0:	0d9b      	lsrs	r3, r3, #22
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 030f 	and.w	r3, r3, #15
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f2:	0d5b      	lsrs	r3, r3, #21
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990e:	0c1b      	lsrs	r3, r3, #16
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009922:	0bdb      	lsrs	r3, r3, #15
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	b2da      	uxtb	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009936:	0b9b      	lsrs	r3, r3, #14
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800994a:	0b5b      	lsrs	r3, r3, #13
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995e:	0b1b      	lsrs	r3, r3, #12
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	b2da      	uxtb	r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009972:	0a9b      	lsrs	r3, r3, #10
 8009974:	b2db      	uxtb	r3, r3
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	b2da      	uxtb	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	b2db      	uxtb	r3, r3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	b2da      	uxtb	r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800999a:	085b      	lsrs	r3, r3, #1
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	1fe00fff 	.word	0x1fe00fff

080099c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b094      	sub	sp, #80	; 0x50
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80099d4:	f107 0308 	add.w	r3, r7, #8
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fbd4 	bl	800a188 <SD_SendSDStatus>
 80099e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80099e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d011      	beq.n	8009a0c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a4f      	ldr	r2, [pc, #316]	; (8009b2c <HAL_SD_GetCardStatus+0x168>)
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009a0a:	e070      	b.n	8009aee <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	099b      	lsrs	r3, r3, #6
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	095b      	lsrs	r3, r3, #5
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	0e1b      	lsrs	r3, r3, #24
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	061a      	lsls	r2, r3, #24
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	021b      	lsls	r3, r3, #8
 8009a4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a52:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a5c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	0e1b      	lsrs	r3, r3, #24
 8009a62:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	0d1b      	lsrs	r3, r3, #20
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	0c1b      	lsrs	r3, r3, #16
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	0a9b      	lsrs	r3, r3, #10
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	091b      	lsrs	r3, r3, #4
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	0e1b      	lsrs	r3, r3, #24
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 ffc2 	bl	800ca80 <SDMMC_CmdBlockLength>
 8009afc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00d      	beq.n	8009b20 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <HAL_SD_GetCardStatus+0x168>)
 8009b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009b20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3750      	adds	r7, #80	; 0x50
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	1fe00fff 	.word	0x1fe00fff

08009b30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b88:	b5b0      	push	{r4, r5, r7, lr}
 8009b8a:	b090      	sub	sp, #64	; 0x40
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d02e      	beq.n	8009c06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bae:	d106      	bne.n	8009bbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38
 8009bbc:	e029      	b.n	8009c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc4:	d10a      	bne.n	8009bdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fbd6 	bl	800a378 <SD_WideBus_Enable>
 8009bcc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8009bda:	e01a      	b.n	8009c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fc13 	bl	800a40e <SD_WideBus_Disable>
 8009be8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8009bf6:	e00c      	b.n	8009c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38
 8009c04:	e005      	b.n	8009c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a60      	ldr	r2, [pc, #384]	; (8009da0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009c20:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c28:	e097      	b.n	8009d5a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009c2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009c2e:	f7fd feb9 	bl	80079a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c32:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8086 	beq.w	8009d48 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	4952      	ldr	r1, [pc, #328]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009c5a:	fba1 1303 	umull	r1, r3, r1, r3
 8009c5e:	0e1b      	lsrs	r3, r3, #24
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d303      	bcc.n	8009c6c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	e05a      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c74:	d103      	bne.n	8009c7e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e051      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c86:	d126      	bne.n	8009cd6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10e      	bne.n	8009cae <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	4a45      	ldr	r2, [pc, #276]	; (8009da8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d906      	bls.n	8009ca6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	4a42      	ldr	r2, [pc, #264]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca0:	0e5b      	lsrs	r3, r3, #25
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	e03d      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	61fb      	str	r3, [r7, #28]
 8009cac:	e039      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cba:	4a3b      	ldr	r2, [pc, #236]	; (8009da8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d906      	bls.n	8009cce <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	4a38      	ldr	r2, [pc, #224]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc8:	0e5b      	lsrs	r3, r3, #25
 8009cca:	61fb      	str	r3, [r7, #28]
 8009ccc:	e029      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	61fb      	str	r3, [r7, #28]
 8009cd4:	e025      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10e      	bne.n	8009cfc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	4a32      	ldr	r2, [pc, #200]	; (8009dac <HAL_SD_ConfigWideBusOperation+0x224>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d906      	bls.n	8009cf4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	4a2e      	ldr	r2, [pc, #184]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	0e1b      	lsrs	r3, r3, #24
 8009cf0:	61fb      	str	r3, [r7, #28]
 8009cf2:	e016      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	61fb      	str	r3, [r7, #28]
 8009cfa:	e012      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d08:	4a28      	ldr	r2, [pc, #160]	; (8009dac <HAL_SD_ConfigWideBusOperation+0x224>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d906      	bls.n	8009d1c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	4a24      	ldr	r2, [pc, #144]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	0e1b      	lsrs	r3, r3, #24
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	e002      	b.n	8009d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681d      	ldr	r5, [r3, #0]
 8009d2c:	466c      	mov	r4, sp
 8009d2e:	f107 0318 	add.w	r3, r7, #24
 8009d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d3a:	f107 030c 	add.w	r3, r7, #12
 8009d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d40:	4628      	mov	r0, r5
 8009d42:	f002 fdbf 	bl	800c8c4 <SDMMC_Init>
 8009d46:	e008      	b.n	8009d5a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 fe8c 	bl	800ca80 <SDMMC_CmdBlockLength>
 8009d68:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3730      	adds	r7, #48	; 0x30
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	1fe00fff 	.word	0x1fe00fff
 8009da4:	55e63b89 	.word	0x55e63b89
 8009da8:	02faf080 	.word	0x02faf080
 8009dac:	017d7840 	.word	0x017d7840

08009db0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fab0 	bl	800a328 <SD_SendStatus>
 8009dc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	0a5b      	lsrs	r3, r3, #9
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009de6:	693b      	ldr	r3, [r7, #16]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009df0:	b5b0      	push	{r4, r5, r7, lr}
 8009df2:	b090      	sub	sp, #64	; 0x40
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fdb9 	bl	800c978 <SDMMC_GetPowerState>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e10:	e0a9      	b.n	8009f66 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d02e      	beq.n	8009e78 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 fffe 	bl	800ce20 <SDMMC_CmdSendCID>
 8009e24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <SD_InitCard+0x40>
    {
      return errorstate;
 8009e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2e:	e09a      	b.n	8009f66 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2100      	movs	r1, #0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f002 fde3 	bl	800ca02 <SDMMC_GetResponse>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2104      	movs	r1, #4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f002 fdda 	bl	800ca02 <SDMMC_GetResponse>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2108      	movs	r1, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 fdd1 	bl	800ca02 <SDMMC_GetResponse>
 8009e60:	4602      	mov	r2, r0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	210c      	movs	r1, #12
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f002 fdc8 	bl	800ca02 <SDMMC_GetResponse>
 8009e72:	4602      	mov	r2, r0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d00d      	beq.n	8009e9c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f107 020e 	add.w	r2, r7, #14
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f003 f807 	bl	800ce9e <SDMMC_CmdSetRelAdd>
 8009e90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <SD_InitCard+0xac>
    {
      return errorstate;
 8009e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9a:	e064      	b.n	8009f66 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d036      	beq.n	8009f12 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009ea4:	89fb      	ldrh	r3, [r7, #14]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f002 ffd0 	bl	800ce5e <SDMMC_CmdSendCSD>
 8009ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <SD_InitCard+0xda>
    {
      return errorstate;
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	e04d      	b.n	8009f66 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 fd96 	bl	800ca02 <SDMMC_GetResponse>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f002 fd8d 	bl	800ca02 <SDMMC_GetResponse>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2108      	movs	r1, #8
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f002 fd84 	bl	800ca02 <SDMMC_GetResponse>
 8009efa:	4602      	mov	r2, r0
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	210c      	movs	r1, #12
 8009f06:	4618      	mov	r0, r3
 8009f08:	f002 fd7b 	bl	800ca02 <SDMMC_GetResponse>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2104      	movs	r1, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fd72 	bl	800ca02 <SDMMC_GetResponse>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	0d1a      	lsrs	r2, r3, #20
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009f26:	f107 0310 	add.w	r3, r7, #16
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff fba5 	bl	800967c <HAL_SD_GetCardCSD>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f3c:	e013      	b.n	8009f66 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f46:	041b      	lsls	r3, r3, #16
 8009f48:	2200      	movs	r2, #0
 8009f4a:	461c      	mov	r4, r3
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	4622      	mov	r2, r4
 8009f50:	462b      	mov	r3, r5
 8009f52:	4608      	mov	r0, r1
 8009f54:	f002 fe7a 	bl	800cc4c <SDMMC_CmdSelDesel>
 8009f58:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <SD_InitCard+0x174>
  {
    return errorstate;
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	e000      	b.n	8009f66 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3740      	adds	r7, #64	; 0x40
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	2300      	movs	r3, #0
 8009f82:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8009f84:	f7f9 feda 	bl	8003d3c <HAL_GetTick>
 8009f88:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f002 fe80 	bl	800cc94 <SDMMC_CmdGoIdleState>
 8009f94:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <SD_PowerON+0x30>
  {
    return errorstate;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	e0ed      	b.n	800a17c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f002 fe93 	bl	800ccd0 <SDMMC_CmdOperCond>
 8009faa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00d      	beq.n	8009fce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 fe69 	bl	800cc94 <SDMMC_CmdGoIdleState>
 8009fc2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <SD_PowerON+0x64>
    {
      return errorstate;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	e0d6      	b.n	800a17c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d137      	bne.n	800a04c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f002 fe94 	bl	800cd10 <SDMMC_CmdAppCommand>
 8009fe8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d02d      	beq.n	800a04c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ff4:	e0c2      	b.n	800a17c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f002 fe87 	bl	800cd10 <SDMMC_CmdAppCommand>
 800a002:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <SD_PowerON+0x9e>
    {
      return errorstate;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	e0b6      	b.n	800a17c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	495c      	ldr	r1, [pc, #368]	; (800a184 <SD_PowerON+0x214>)
 800a014:	4618      	mov	r0, r3
 800a016:	f002 fe9e 	bl	800cd56 <SDMMC_CmdAppOperCommand>
 800a01a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a026:	e0a9      	b.n	800a17c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f002 fce7 	bl	800ca02 <SDMMC_GetResponse>
 800a034:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	0fdb      	lsrs	r3, r3, #31
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <SD_PowerON+0xd2>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <SD_PowerON+0xd4>
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]

    count++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a052:	4293      	cmp	r3, r2
 800a054:	d802      	bhi.n	800a05c <SD_PowerON+0xec>
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0cc      	beq.n	8009ff6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a062:	4293      	cmp	r3, r2
 800a064:	d902      	bls.n	800a06c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a06a:	e087      	b.n	800a17c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d07e      	beq.n	800a174 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d17a      	bne.n	800a17a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d075      	beq.n	800a17a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a094:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f042 0208 	orr.w	r2, r2, #8
 800a0a4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f002 ff5e 	bl	800cf6c <SDMMC_CmdVoltageSwitch>
 800a0b0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00c      	beq.n	800a0d2 <SD_PowerON+0x162>
        {
          return errorstate;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	e05f      	b.n	800a17c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0bc:	f7f9 fe3e 	bl	8003d3c <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ca:	d102      	bne.n	800a0d2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a0cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0d0:	e054      	b.n	800a17c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0e0:	d1ec      	bne.n	800a0bc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fa:	d002      	beq.n	800a102 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a0fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a100:	e03c      	b.n	800a17c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800a102:	2001      	movs	r0, #1
 800a104:	f000 fa9e 	bl	800a644 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0204 	orr.w	r2, r2, #4
 800a116:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a118:	e00a      	b.n	800a130 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a11a:	f7f9 fe0f 	bl	8003d3c <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a128:	d102      	bne.n	800a130 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a12a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a12e:	e025      	b.n	800a17c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a13e:	d1ec      	bne.n	800a11a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a148:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a158:	d102      	bne.n	800a160 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a15a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a15e:	e00d      	b.n	800a17c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2213      	movs	r2, #19
 800a166:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a170:	639a      	str	r2, [r3, #56]	; 0x38
 800a172:	e002      	b.n	800a17a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	c1100000 	.word	0xc1100000

0800a188 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08c      	sub	sp, #48	; 0x30
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a192:	f7f9 fdd3 	bl	8003d3c <HAL_GetTick>
 800a196:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f002 fc2d 	bl	800ca02 <SDMMC_GetResponse>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b2:	d102      	bne.n	800a1ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1b8:	e0b0      	b.n	800a31c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2140      	movs	r1, #64	; 0x40
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f002 fc5d 	bl	800ca80 <SDMMC_CmdBlockLength>
 800a1c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	e0a0      	b.n	800a31c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e2:	041b      	lsls	r3, r3, #16
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f002 fd92 	bl	800cd10 <SDMMC_CmdAppCommand>
 800a1ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	e08d      	b.n	800a31c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a204:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a206:	2340      	movs	r3, #64	; 0x40
 800a208:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a20a:	2360      	movs	r3, #96	; 0x60
 800a20c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a20e:	2302      	movs	r3, #2
 800a210:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a212:	2300      	movs	r3, #0
 800a214:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a216:	2301      	movs	r3, #1
 800a218:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f107 0208 	add.w	r2, r7, #8
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f002 fbff 	bl	800ca28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f002 fe7a 	bl	800cf28 <SDMMC_CmdStatusRegister>
 800a234:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d02b      	beq.n	800a294 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	e069      	b.n	800a31c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d013      	beq.n	800a27e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a256:	2300      	movs	r3, #0
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a25a:	e00d      	b.n	800a278 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f002 fb59 	bl	800c918 <SDMMC_ReadFIFO>
 800a266:	4602      	mov	r2, r0
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	601a      	str	r2, [r3, #0]
        pData++;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	3304      	adds	r3, #4
 800a270:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	3301      	adds	r3, #1
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	d9ee      	bls.n	800a25c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a27e:	f7f9 fd5d 	bl	8003d3c <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28c:	d102      	bne.n	800a294 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a28e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a292:	e043      	b.n	800a31c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0d2      	beq.n	800a248 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a8:	f003 0308 	and.w	r3, r3, #8
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	e033      	b.n	800a31c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e02a      	b.n	800a31c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d017      	beq.n	800a304 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	e021      	b.n	800a31c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 fb1b 	bl	800c918 <SDMMC_ReadFIFO>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	601a      	str	r2, [r3, #0]
    pData++;
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a2ee:	f7f9 fd25 	bl	8003d3c <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2fc:	d102      	bne.n	800a304 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a302:	e00b      	b.n	800a31c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e2      	bne.n	800a2d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a03      	ldr	r2, [pc, #12]	; (800a324 <SD_SendSDStatus+0x19c>)
 800a318:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3730      	adds	r7, #48	; 0x30
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	18000f3a 	.word	0x18000f3a

0800a328 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a33c:	e018      	b.n	800a370 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f002 fdc9 	bl	800cee2 <SDMMC_CmdSendStatus>
 800a350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	e009      	b.n	800a370 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f002 fb4d 	bl	800ca02 <SDMMC_GetResponse>
 800a368:	4602      	mov	r2, r0
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f002 fb37 	bl	800ca02 <SDMMC_GetResponse>
 800a394:	4603      	mov	r3, r0
 800a396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a39a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a39e:	d102      	bne.n	800a3a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a3a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3a4:	e02f      	b.n	800a406 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a3a6:	f107 030c 	add.w	r3, r7, #12
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f879 	bl	800a4a4 <SD_FindSCR>
 800a3b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	e023      	b.n	800a406 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01c      	beq.n	800a402 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f002 fc9b 	bl	800cd10 <SDMMC_CmdAppCommand>
 800a3da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	e00f      	b.n	800a406 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 fcd2 	bl	800cd96 <SDMMC_CmdBusWidth>
 800a3f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	e003      	b.n	800a406 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e001      	b.n	800a406 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	2300      	movs	r3, #0
 800a41c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2100      	movs	r1, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f002 faec 	bl	800ca02 <SDMMC_GetResponse>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a434:	d102      	bne.n	800a43c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a43a:	e02f      	b.n	800a49c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a43c:	f107 030c 	add.w	r3, r7, #12
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f82e 	bl	800a4a4 <SD_FindSCR>
 800a448:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	e023      	b.n	800a49c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d01c      	beq.n	800a498 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f002 fc50 	bl	800cd10 <SDMMC_CmdAppCommand>
 800a470:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	e00f      	b.n	800a49c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f002 fc87 	bl	800cd96 <SDMMC_CmdBusWidth>
 800a488:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	e003      	b.n	800a49c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a494:	2300      	movs	r3, #0
 800a496:	e001      	b.n	800a49c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08e      	sub	sp, #56	; 0x38
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a4ae:	f7f9 fc45 	bl	8003d3c <HAL_GetTick>
 800a4b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60bb      	str	r3, [r7, #8]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2108      	movs	r1, #8
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f002 fad8 	bl	800ca80 <SDMMC_CmdBlockLength>
 800a4d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <SD_FindSCR+0x38>
  {
    return errorstate;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	e0ad      	b.n	800a638 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f002 fc11 	bl	800cd10 <SDMMC_CmdAppCommand>
 800a4ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <SD_FindSCR+0x56>
  {
    return errorstate;
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	e09e      	b.n	800a638 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a500:	2308      	movs	r3, #8
 800a502:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a504:	2330      	movs	r3, #48	; 0x30
 800a506:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a508:	2302      	movs	r3, #2
 800a50a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a510:	2301      	movs	r3, #1
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f107 0210 	add.w	r2, r7, #16
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f002 fa82 	bl	800ca28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f002 fc57 	bl	800cddc <SDMMC_CmdSendSCR>
 800a52e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	2b00      	cmp	r3, #0
 800a534:	d027      	beq.n	800a586 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	e07e      	b.n	800a638 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d113      	bne.n	800a570 <SD_FindSCR+0xcc>
 800a548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d110      	bne.n	800a570 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f002 f9e0 	bl	800c918 <SDMMC_ReadFIFO>
 800a558:	4603      	mov	r3, r0
 800a55a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f002 f9d9 	bl	800c918 <SDMMC_ReadFIFO>
 800a566:	4603      	mov	r3, r0
 800a568:	60fb      	str	r3, [r7, #12]
      index++;
 800a56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56c:	3301      	adds	r3, #1
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a570:	f7f9 fbe4 	bl	8003d3c <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a57e:	d102      	bne.n	800a586 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a584:	e058      	b.n	800a638 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58c:	f240 532a 	movw	r3, #1322	; 0x52a
 800a590:	4013      	ands	r3, r2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0d1      	beq.n	800a53a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	e043      	b.n	800a638 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e036      	b.n	800a638 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	e029      	b.n	800a638 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a15      	ldr	r2, [pc, #84]	; (800a640 <SD_FindSCR+0x19c>)
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	061a      	lsls	r2, r3, #24
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a602:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	0e1b      	lsrs	r3, r3, #24
 800a608:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	601a      	str	r2, [r3, #0]
    scr++;
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	3304      	adds	r3, #4
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	061a      	lsls	r2, r3, #24
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a620:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	0a1b      	lsrs	r3, r3, #8
 800a626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a62a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	0e1b      	lsrs	r3, r3, #24
 800a630:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3738      	adds	r7, #56	; 0x38
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	18000f3a 	.word	0x18000f3a

0800a644 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e095      	b.n	800a798 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	d108      	bne.n	800a686 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a67c:	d009      	beq.n	800a692 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	61da      	str	r2, [r3, #28]
 800a684:	e005      	b.n	800a692 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7f9 f8f7 	bl	80038a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6d2:	d902      	bls.n	800a6da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	e002      	b.n	800a6e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6e8:	d007      	beq.n	800a6fa <HAL_SPI_Init+0xa0>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6f2:	d002      	beq.n	800a6fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a728:	431a      	orrs	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73c:	ea42 0103 	orr.w	r1, r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	0c1b      	lsrs	r3, r3, #16
 800a756:	f003 0204 	and.w	r2, r3, #4
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	f003 0310 	and.w	r3, r3, #16
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	431a      	orrs	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a776:	ea42 0103 	orr.w	r1, r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e049      	b.n	800a846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7f9 f8ac 	bl	8003924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f000 fa62 	bl	800aca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e049      	b.n	800a8f4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f841 	bl	800a8fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f000 fa0b 	bl	800aca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b02      	cmp	r3, #2
 800a924:	d122      	bne.n	800a96c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b02      	cmp	r3, #2
 800a932:	d11b      	bne.n	800a96c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f06f 0202 	mvn.w	r2, #2
 800a93c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f98a 	bl	800ac6c <HAL_TIM_IC_CaptureCallback>
 800a958:	e005      	b.n	800a966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f97c 	bl	800ac58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f98d 	bl	800ac80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b04      	cmp	r3, #4
 800a978:	d122      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b04      	cmp	r3, #4
 800a986:	d11b      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0204 	mvn.w	r2, #4
 800a990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2202      	movs	r2, #2
 800a996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f960 	bl	800ac6c <HAL_TIM_IC_CaptureCallback>
 800a9ac:	e005      	b.n	800a9ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f952 	bl	800ac58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f963 	bl	800ac80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0308 	and.w	r3, r3, #8
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d122      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d11b      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f06f 0208 	mvn.w	r2, #8
 800a9e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2204      	movs	r2, #4
 800a9ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f936 	bl	800ac6c <HAL_TIM_IC_CaptureCallback>
 800aa00:	e005      	b.n	800aa0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f928 	bl	800ac58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f939 	bl	800ac80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	2b10      	cmp	r3, #16
 800aa20:	d122      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d11b      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f06f 0210 	mvn.w	r2, #16
 800aa38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f90c 	bl	800ac6c <HAL_TIM_IC_CaptureCallback>
 800aa54:	e005      	b.n	800aa62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f8fe 	bl	800ac58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f90f 	bl	800ac80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d10e      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d107      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f06f 0201 	mvn.w	r2, #1
 800aa8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f8d8 	bl	800ac44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2b80      	cmp	r3, #128	; 0x80
 800aaa0:	d10e      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaac:	2b80      	cmp	r3, #128	; 0x80
 800aaae:	d107      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fcec 	bl	800b498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aace:	d10e      	bne.n	800aaee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aada:	2b80      	cmp	r3, #128	; 0x80
 800aadc:	d107      	bne.n	800aaee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fcdf 	bl	800b4ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf8:	2b40      	cmp	r3, #64	; 0x40
 800aafa:	d10e      	bne.n	800ab1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b40      	cmp	r3, #64	; 0x40
 800ab08:	d107      	bne.n	800ab1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8bd 	bl	800ac94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	d10e      	bne.n	800ab46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f003 0320 	and.w	r3, r3, #32
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	d107      	bne.n	800ab46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f06f 0220 	mvn.w	r2, #32
 800ab3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc9f 	bl	800b484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_TIM_OC_ConfigChannel+0x1e>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e066      	b.n	800ac3c <HAL_TIM_OC_ConfigChannel+0xec>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b14      	cmp	r3, #20
 800ab7a:	d857      	bhi.n	800ac2c <HAL_TIM_OC_ConfigChannel+0xdc>
 800ab7c:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab82:	bf00      	nop
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ac2d 	.word	0x0800ac2d
 800ab8c:	0800ac2d 	.word	0x0800ac2d
 800ab90:	0800ac2d 	.word	0x0800ac2d
 800ab94:	0800abe7 	.word	0x0800abe7
 800ab98:	0800ac2d 	.word	0x0800ac2d
 800ab9c:	0800ac2d 	.word	0x0800ac2d
 800aba0:	0800ac2d 	.word	0x0800ac2d
 800aba4:	0800abf5 	.word	0x0800abf5
 800aba8:	0800ac2d 	.word	0x0800ac2d
 800abac:	0800ac2d 	.word	0x0800ac2d
 800abb0:	0800ac2d 	.word	0x0800ac2d
 800abb4:	0800ac03 	.word	0x0800ac03
 800abb8:	0800ac2d 	.word	0x0800ac2d
 800abbc:	0800ac2d 	.word	0x0800ac2d
 800abc0:	0800ac2d 	.word	0x0800ac2d
 800abc4:	0800ac11 	.word	0x0800ac11
 800abc8:	0800ac2d 	.word	0x0800ac2d
 800abcc:	0800ac2d 	.word	0x0800ac2d
 800abd0:	0800ac2d 	.word	0x0800ac2d
 800abd4:	0800ac1f 	.word	0x0800ac1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 f8fc 	bl	800addc <TIM_OC1_SetConfig>
      break;
 800abe4:	e025      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f000 f985 	bl	800aefc <TIM_OC2_SetConfig>
      break;
 800abf2:	e01e      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fa08 	bl	800b010 <TIM_OC3_SetConfig>
      break;
 800ac00:	e017      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 fa89 	bl	800b120 <TIM_OC4_SetConfig>
      break;
 800ac0e:	e010      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 faec 	bl	800b1f4 <TIM_OC5_SetConfig>
      break;
 800ac1c:	e009      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68b9      	ldr	r1, [r7, #8]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fb49 	bl	800b2bc <TIM_OC6_SetConfig>
      break;
 800ac2a:	e002      	b.n	800ac32 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a40      	ldr	r2, [pc, #256]	; (800adbc <TIM_Base_SetConfig+0x114>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d013      	beq.n	800ace8 <TIM_Base_SetConfig+0x40>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc6:	d00f      	beq.n	800ace8 <TIM_Base_SetConfig+0x40>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a3d      	ldr	r2, [pc, #244]	; (800adc0 <TIM_Base_SetConfig+0x118>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d00b      	beq.n	800ace8 <TIM_Base_SetConfig+0x40>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a3c      	ldr	r2, [pc, #240]	; (800adc4 <TIM_Base_SetConfig+0x11c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d007      	beq.n	800ace8 <TIM_Base_SetConfig+0x40>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a3b      	ldr	r2, [pc, #236]	; (800adc8 <TIM_Base_SetConfig+0x120>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d003      	beq.n	800ace8 <TIM_Base_SetConfig+0x40>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a3a      	ldr	r2, [pc, #232]	; (800adcc <TIM_Base_SetConfig+0x124>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d108      	bne.n	800acfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a2f      	ldr	r2, [pc, #188]	; (800adbc <TIM_Base_SetConfig+0x114>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d01f      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad08:	d01b      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a2c      	ldr	r2, [pc, #176]	; (800adc0 <TIM_Base_SetConfig+0x118>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d017      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a2b      	ldr	r2, [pc, #172]	; (800adc4 <TIM_Base_SetConfig+0x11c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a2a      	ldr	r2, [pc, #168]	; (800adc8 <TIM_Base_SetConfig+0x120>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00f      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a29      	ldr	r2, [pc, #164]	; (800adcc <TIM_Base_SetConfig+0x124>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d00b      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a28      	ldr	r2, [pc, #160]	; (800add0 <TIM_Base_SetConfig+0x128>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d007      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a27      	ldr	r2, [pc, #156]	; (800add4 <TIM_Base_SetConfig+0x12c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d003      	beq.n	800ad42 <TIM_Base_SetConfig+0x9a>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a26      	ldr	r2, [pc, #152]	; (800add8 <TIM_Base_SetConfig+0x130>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d108      	bne.n	800ad54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689a      	ldr	r2, [r3, #8]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a10      	ldr	r2, [pc, #64]	; (800adbc <TIM_Base_SetConfig+0x114>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d00f      	beq.n	800ada0 <TIM_Base_SetConfig+0xf8>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a12      	ldr	r2, [pc, #72]	; (800adcc <TIM_Base_SetConfig+0x124>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00b      	beq.n	800ada0 <TIM_Base_SetConfig+0xf8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a11      	ldr	r2, [pc, #68]	; (800add0 <TIM_Base_SetConfig+0x128>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d007      	beq.n	800ada0 <TIM_Base_SetConfig+0xf8>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a10      	ldr	r2, [pc, #64]	; (800add4 <TIM_Base_SetConfig+0x12c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d003      	beq.n	800ada0 <TIM_Base_SetConfig+0xf8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a0f      	ldr	r2, [pc, #60]	; (800add8 <TIM_Base_SetConfig+0x130>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d103      	bne.n	800ada8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	691a      	ldr	r2, [r3, #16]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	615a      	str	r2, [r3, #20]
}
 800adae:	bf00      	nop
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	40012c00 	.word	0x40012c00
 800adc0:	40000400 	.word	0x40000400
 800adc4:	40000800 	.word	0x40000800
 800adc8:	40000c00 	.word	0x40000c00
 800adcc:	40013400 	.word	0x40013400
 800add0:	40014000 	.word	0x40014000
 800add4:	40014400 	.word	0x40014400
 800add8:	40014800 	.word	0x40014800

0800addc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800addc:	b480      	push	{r7}
 800adde:	b087      	sub	sp, #28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	f023 0201 	bic.w	r2, r3, #1
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f023 0302 	bic.w	r3, r3, #2
 800ae28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a2c      	ldr	r2, [pc, #176]	; (800aee8 <TIM_OC1_SetConfig+0x10c>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00f      	beq.n	800ae5c <TIM_OC1_SetConfig+0x80>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a2b      	ldr	r2, [pc, #172]	; (800aeec <TIM_OC1_SetConfig+0x110>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00b      	beq.n	800ae5c <TIM_OC1_SetConfig+0x80>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a2a      	ldr	r2, [pc, #168]	; (800aef0 <TIM_OC1_SetConfig+0x114>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d007      	beq.n	800ae5c <TIM_OC1_SetConfig+0x80>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a29      	ldr	r2, [pc, #164]	; (800aef4 <TIM_OC1_SetConfig+0x118>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d003      	beq.n	800ae5c <TIM_OC1_SetConfig+0x80>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a28      	ldr	r2, [pc, #160]	; (800aef8 <TIM_OC1_SetConfig+0x11c>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d10c      	bne.n	800ae76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f023 0308 	bic.w	r3, r3, #8
 800ae62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f023 0304 	bic.w	r3, r3, #4
 800ae74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a1b      	ldr	r2, [pc, #108]	; (800aee8 <TIM_OC1_SetConfig+0x10c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00f      	beq.n	800ae9e <TIM_OC1_SetConfig+0xc2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1a      	ldr	r2, [pc, #104]	; (800aeec <TIM_OC1_SetConfig+0x110>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d00b      	beq.n	800ae9e <TIM_OC1_SetConfig+0xc2>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a19      	ldr	r2, [pc, #100]	; (800aef0 <TIM_OC1_SetConfig+0x114>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d007      	beq.n	800ae9e <TIM_OC1_SetConfig+0xc2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a18      	ldr	r2, [pc, #96]	; (800aef4 <TIM_OC1_SetConfig+0x118>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d003      	beq.n	800ae9e <TIM_OC1_SetConfig+0xc2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <TIM_OC1_SetConfig+0x11c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d111      	bne.n	800aec2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aeac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	621a      	str	r2, [r3, #32]
}
 800aedc:	bf00      	nop
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	40012c00 	.word	0x40012c00
 800aeec:	40013400 	.word	0x40013400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40014400 	.word	0x40014400
 800aef8:	40014800 	.word	0x40014800

0800aefc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	f023 0210 	bic.w	r2, r3, #16
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	021b      	lsls	r3, r3, #8
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0320 	bic.w	r3, r3, #32
 800af4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4313      	orrs	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a28      	ldr	r2, [pc, #160]	; (800affc <TIM_OC2_SetConfig+0x100>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <TIM_OC2_SetConfig+0x6c>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a27      	ldr	r2, [pc, #156]	; (800b000 <TIM_OC2_SetConfig+0x104>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d10d      	bne.n	800af84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	011b      	lsls	r3, r3, #4
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a1d      	ldr	r2, [pc, #116]	; (800affc <TIM_OC2_SetConfig+0x100>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00f      	beq.n	800afac <TIM_OC2_SetConfig+0xb0>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a1c      	ldr	r2, [pc, #112]	; (800b000 <TIM_OC2_SetConfig+0x104>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00b      	beq.n	800afac <TIM_OC2_SetConfig+0xb0>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a1b      	ldr	r2, [pc, #108]	; (800b004 <TIM_OC2_SetConfig+0x108>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d007      	beq.n	800afac <TIM_OC2_SetConfig+0xb0>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a1a      	ldr	r2, [pc, #104]	; (800b008 <TIM_OC2_SetConfig+0x10c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d003      	beq.n	800afac <TIM_OC2_SetConfig+0xb0>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a19      	ldr	r2, [pc, #100]	; (800b00c <TIM_OC2_SetConfig+0x110>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d113      	bne.n	800afd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	621a      	str	r2, [r3, #32]
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	40012c00 	.word	0x40012c00
 800b000:	40013400 	.word	0x40013400
 800b004:	40014000 	.word	0x40014000
 800b008:	40014400 	.word	0x40014400
 800b00c:	40014800 	.word	0x40014800

0800b010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b010:	b480      	push	{r7}
 800b012:	b087      	sub	sp, #28
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	69db      	ldr	r3, [r3, #28]
 800b036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b05c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	021b      	lsls	r3, r3, #8
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	4313      	orrs	r3, r2
 800b068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a27      	ldr	r2, [pc, #156]	; (800b10c <TIM_OC3_SetConfig+0xfc>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d003      	beq.n	800b07a <TIM_OC3_SetConfig+0x6a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a26      	ldr	r2, [pc, #152]	; (800b110 <TIM_OC3_SetConfig+0x100>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d10d      	bne.n	800b096 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	021b      	lsls	r3, r3, #8
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a1c      	ldr	r2, [pc, #112]	; (800b10c <TIM_OC3_SetConfig+0xfc>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00f      	beq.n	800b0be <TIM_OC3_SetConfig+0xae>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a1b      	ldr	r2, [pc, #108]	; (800b110 <TIM_OC3_SetConfig+0x100>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d00b      	beq.n	800b0be <TIM_OC3_SetConfig+0xae>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <TIM_OC3_SetConfig+0x104>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d007      	beq.n	800b0be <TIM_OC3_SetConfig+0xae>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a19      	ldr	r2, [pc, #100]	; (800b118 <TIM_OC3_SetConfig+0x108>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d003      	beq.n	800b0be <TIM_OC3_SetConfig+0xae>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a18      	ldr	r2, [pc, #96]	; (800b11c <TIM_OC3_SetConfig+0x10c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d113      	bne.n	800b0e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	621a      	str	r2, [r3, #32]
}
 800b100:	bf00      	nop
 800b102:	371c      	adds	r7, #28
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40012c00 	.word	0x40012c00
 800b110:	40013400 	.word	0x40013400
 800b114:	40014000 	.word	0x40014000
 800b118:	40014400 	.word	0x40014400
 800b11c:	40014800 	.word	0x40014800

0800b120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	4313      	orrs	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b16e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	031b      	lsls	r3, r3, #12
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a18      	ldr	r2, [pc, #96]	; (800b1e0 <TIM_OC4_SetConfig+0xc0>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00f      	beq.n	800b1a4 <TIM_OC4_SetConfig+0x84>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a17      	ldr	r2, [pc, #92]	; (800b1e4 <TIM_OC4_SetConfig+0xc4>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d00b      	beq.n	800b1a4 <TIM_OC4_SetConfig+0x84>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a16      	ldr	r2, [pc, #88]	; (800b1e8 <TIM_OC4_SetConfig+0xc8>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d007      	beq.n	800b1a4 <TIM_OC4_SetConfig+0x84>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <TIM_OC4_SetConfig+0xcc>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d003      	beq.n	800b1a4 <TIM_OC4_SetConfig+0x84>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a14      	ldr	r2, [pc, #80]	; (800b1f0 <TIM_OC4_SetConfig+0xd0>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d109      	bne.n	800b1b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	019b      	lsls	r3, r3, #6
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	621a      	str	r2, [r3, #32]
}
 800b1d2:	bf00      	nop
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40012c00 	.word	0x40012c00
 800b1e4:	40013400 	.word	0x40013400
 800b1e8:	40014000 	.word	0x40014000
 800b1ec:	40014400 	.word	0x40014400
 800b1f0:	40014800 	.word	0x40014800

0800b1f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	041b      	lsls	r3, r3, #16
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	4313      	orrs	r3, r2
 800b244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a17      	ldr	r2, [pc, #92]	; (800b2a8 <TIM_OC5_SetConfig+0xb4>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00f      	beq.n	800b26e <TIM_OC5_SetConfig+0x7a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a16      	ldr	r2, [pc, #88]	; (800b2ac <TIM_OC5_SetConfig+0xb8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d00b      	beq.n	800b26e <TIM_OC5_SetConfig+0x7a>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a15      	ldr	r2, [pc, #84]	; (800b2b0 <TIM_OC5_SetConfig+0xbc>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d007      	beq.n	800b26e <TIM_OC5_SetConfig+0x7a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a14      	ldr	r2, [pc, #80]	; (800b2b4 <TIM_OC5_SetConfig+0xc0>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <TIM_OC5_SetConfig+0x7a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a13      	ldr	r2, [pc, #76]	; (800b2b8 <TIM_OC5_SetConfig+0xc4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d109      	bne.n	800b282 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	621a      	str	r2, [r3, #32]
}
 800b29c:	bf00      	nop
 800b29e:	371c      	adds	r7, #28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	40012c00 	.word	0x40012c00
 800b2ac:	40013400 	.word	0x40013400
 800b2b0:	40014000 	.word	0x40014000
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800

0800b2bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	051b      	lsls	r3, r3, #20
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a18      	ldr	r2, [pc, #96]	; (800b374 <TIM_OC6_SetConfig+0xb8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00f      	beq.n	800b338 <TIM_OC6_SetConfig+0x7c>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a17      	ldr	r2, [pc, #92]	; (800b378 <TIM_OC6_SetConfig+0xbc>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d00b      	beq.n	800b338 <TIM_OC6_SetConfig+0x7c>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a16      	ldr	r2, [pc, #88]	; (800b37c <TIM_OC6_SetConfig+0xc0>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d007      	beq.n	800b338 <TIM_OC6_SetConfig+0x7c>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a15      	ldr	r2, [pc, #84]	; (800b380 <TIM_OC6_SetConfig+0xc4>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d003      	beq.n	800b338 <TIM_OC6_SetConfig+0x7c>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a14      	ldr	r2, [pc, #80]	; (800b384 <TIM_OC6_SetConfig+0xc8>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d109      	bne.n	800b34c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b33e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	029b      	lsls	r3, r3, #10
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	40012c00 	.word	0x40012c00
 800b378:	40013400 	.word	0x40013400
 800b37c:	40014000 	.word	0x40014000
 800b380:	40014400 	.word	0x40014400
 800b384:	40014800 	.word	0x40014800

0800b388 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e065      	b.n	800b470 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	4313      	orrs	r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	041b      	lsls	r3, r3, #16
 800b41a:	4313      	orrs	r3, r2
 800b41c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a16      	ldr	r2, [pc, #88]	; (800b47c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d004      	beq.n	800b432 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a14      	ldr	r2, [pc, #80]	; (800b480 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d115      	bne.n	800b45e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	051b      	lsls	r3, r3, #20
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	40012c00 	.word	0x40012c00
 800b480:	40013400 	.word	0x40013400

0800b484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e042      	b.n	800b558 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d106      	bne.n	800b4ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7f8 fa3d 	bl	8003964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2224      	movs	r2, #36	; 0x24
 800b4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 0201 	bic.w	r2, r2, #1
 800b500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fb64 	bl	800bbd0 <UART_SetConfig>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d101      	bne.n	800b512 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e022      	b.n	800b558 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fe54 	bl	800c1c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b52e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b53e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f042 0201 	orr.w	r2, r2, #1
 800b54e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fedb 	bl	800c30c <UART_CheckIdleState>
 800b556:	4603      	mov	r3, r0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0ba      	sub	sp, #232	; 0xe8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b586:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b58a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b58e:	4013      	ands	r3, r2
 800b590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11b      	bne.n	800b5d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a0:	f003 0320 	and.w	r3, r3, #32
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d015      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d105      	bne.n	800b5c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 82d6 	beq.w	800bb76 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	4798      	blx	r3
      }
      return;
 800b5d2:	e2d0      	b.n	800bb76 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 811f 	beq.w	800b81c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b5e2:	4b8b      	ldr	r3, [pc, #556]	; (800b810 <HAL_UART_IRQHandler+0x2b0>)
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5ee:	4b89      	ldr	r3, [pc, #548]	; (800b814 <HAL_UART_IRQHandler+0x2b4>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 8112 	beq.w	800b81c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d011      	beq.n	800b628 <HAL_UART_IRQHandler+0xc8>
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00b      	beq.n	800b628 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2201      	movs	r2, #1
 800b616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b61e:	f043 0201 	orr.w	r2, r3, #1
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d011      	beq.n	800b658 <HAL_UART_IRQHandler+0xf8>
 800b634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2202      	movs	r2, #2
 800b646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b64e:	f043 0204 	orr.w	r2, r3, #4
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	d011      	beq.n	800b688 <HAL_UART_IRQHandler+0x128>
 800b664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00b      	beq.n	800b688 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2204      	movs	r2, #4
 800b676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b67e:	f043 0202 	orr.w	r2, r3, #2
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68c:	f003 0308 	and.w	r3, r3, #8
 800b690:	2b00      	cmp	r3, #0
 800b692:	d017      	beq.n	800b6c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d105      	bne.n	800b6ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6a4:	4b5a      	ldr	r3, [pc, #360]	; (800b810 <HAL_UART_IRQHandler+0x2b0>)
 800b6a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ba:	f043 0208 	orr.w	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d012      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x196>
 800b6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00c      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ec:	f043 0220 	orr.w	r2, r3, #32
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f000 823c 	beq.w	800bb7a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b706:	f003 0320 	and.w	r3, r3, #32
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d013      	beq.n	800b736 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b70e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b00      	cmp	r3, #0
 800b718:	d105      	bne.n	800b726 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b71e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b73c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b40      	cmp	r3, #64	; 0x40
 800b74c:	d005      	beq.n	800b75a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b74e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b756:	2b00      	cmp	r3, #0
 800b758:	d04f      	beq.n	800b7fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fee9 	bl	800c532 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76a:	2b40      	cmp	r3, #64	; 0x40
 800b76c:	d141      	bne.n	800b7f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3308      	adds	r3, #8
 800b774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b78c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3308      	adds	r3, #8
 800b796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b79a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b79e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1d9      	bne.n	800b76e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7c6:	4a14      	ldr	r2, [pc, #80]	; (800b818 <HAL_UART_IRQHandler+0x2b8>)
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7f8 fc51 	bl	8004076 <HAL_DMA_Abort_IT>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d017      	beq.n	800b80a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e8:	e00f      	b.n	800b80a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f9da 	bl	800bba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f0:	e00b      	b.n	800b80a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f9d6 	bl	800bba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f8:	e007      	b.n	800b80a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f9d2 	bl	800bba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b808:	e1b7      	b.n	800bb7a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80a:	bf00      	nop
    return;
 800b80c:	e1b5      	b.n	800bb7a <HAL_UART_IRQHandler+0x61a>
 800b80e:	bf00      	nop
 800b810:	10000001 	.word	0x10000001
 800b814:	04000120 	.word	0x04000120
 800b818:	0800c5ff 	.word	0x0800c5ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b820:	2b01      	cmp	r3, #1
 800b822:	f040 814a 	bne.w	800baba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b82a:	f003 0310 	and.w	r3, r3, #16
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 8143 	beq.w	800baba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 813c 	beq.w	800baba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2210      	movs	r2, #16
 800b848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b854:	2b40      	cmp	r3, #64	; 0x40
 800b856:	f040 80b5 	bne.w	800b9c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b866:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 8187 	beq.w	800bb7e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b87a:	429a      	cmp	r2, r3
 800b87c:	f080 817f 	bcs.w	800bb7e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0320 	and.w	r3, r3, #32
 800b896:	2b00      	cmp	r3, #0
 800b898:	f040 8086 	bne.w	800b9a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1da      	bne.n	800b89c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8f8:	f023 0301 	bic.w	r3, r3, #1
 800b8fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b90a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b90e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b91c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e1      	bne.n	800b8e6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3308      	adds	r3, #8
 800b928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3308      	adds	r3, #8
 800b942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b946:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b94c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e3      	bne.n	800b922 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2220      	movs	r2, #32
 800b95e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b970:	e853 3f00 	ldrex	r3, [r3]
 800b974:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b978:	f023 0310 	bic.w	r3, r3, #16
 800b97c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b98a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b98c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e4      	bne.n	800b968 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f8 fb0b 	bl	8003fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f8fb 	bl	800bbb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9c2:	e0dc      	b.n	800bb7e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 80ce 	beq.w	800bb82 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b9e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 80c9 	beq.w	800bb82 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba12:	647b      	str	r3, [r7, #68]	; 0x44
 800ba14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba1a:	e841 2300 	strex	r3, r2, [r1]
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1e4      	bne.n	800b9f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	e853 3f00 	ldrex	r3, [r3]
 800ba34:	623b      	str	r3, [r7, #32]
   return(result);
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba3c:	f023 0301 	bic.w	r3, r3, #1
 800ba40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba4e:	633a      	str	r2, [r7, #48]	; 0x30
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e1      	bne.n	800ba26 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2220      	movs	r2, #32
 800ba66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0310 	bic.w	r3, r3, #16
 800ba8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba98:	61fb      	str	r3, [r7, #28]
 800ba9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9c:	69b9      	ldr	r1, [r7, #24]
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	e841 2300 	strex	r3, r2, [r1]
 800baa4:	617b      	str	r3, [r7, #20]
   return(result);
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e4      	bne.n	800ba76 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800baac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f880 	bl	800bbb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bab8:	e063      	b.n	800bb82 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800baba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00e      	beq.n	800bae4 <HAL_UART_IRQHandler+0x584>
 800bac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fdcf 	bl	800c680 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bae2:	e051      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baec:	2b00      	cmp	r3, #0
 800baee:	d014      	beq.n	800bb1a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800baf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d105      	bne.n	800bb08 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d008      	beq.n	800bb1a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d03a      	beq.n	800bb86 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	4798      	blx	r3
    }
    return;
 800bb18:	e035      	b.n	800bb86 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <HAL_UART_IRQHandler+0x5da>
 800bb26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fd79 	bl	800c62a <UART_EndTransmit_IT>
    return;
 800bb38:	e026      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d009      	beq.n	800bb5a <HAL_UART_IRQHandler+0x5fa>
 800bb46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fda8 	bl	800c6a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb58:	e016      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d010      	beq.n	800bb88 <HAL_UART_IRQHandler+0x628>
 800bb66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da0c      	bge.n	800bb88 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fd90 	bl	800c694 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb74:	e008      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
      return;
 800bb76:	bf00      	nop
 800bb78:	e006      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
    return;
 800bb7a:	bf00      	nop
 800bb7c:	e004      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
      return;
 800bb7e:	bf00      	nop
 800bb80:	e002      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
      return;
 800bb82:	bf00      	nop
 800bb84:	e000      	b.n	800bb88 <HAL_UART_IRQHandler+0x628>
    return;
 800bb86:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800bb88:	37e8      	adds	r7, #232	; 0xe8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop

0800bb90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbd4:	b08c      	sub	sp, #48	; 0x30
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	4baa      	ldr	r3, [pc, #680]	; (800bea8 <UART_SetConfig+0x2d8>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	68da      	ldr	r2, [r3, #12]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a9f      	ldr	r2, [pc, #636]	; (800beac <UART_SetConfig+0x2dc>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d004      	beq.n	800bc3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bc46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc50:	430b      	orrs	r3, r1
 800bc52:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5a:	f023 010f 	bic.w	r1, r3, #15
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a90      	ldr	r2, [pc, #576]	; (800beb0 <UART_SetConfig+0x2e0>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d125      	bne.n	800bcc0 <UART_SetConfig+0xf0>
 800bc74:	4b8f      	ldr	r3, [pc, #572]	; (800beb4 <UART_SetConfig+0x2e4>)
 800bc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d81a      	bhi.n	800bcb8 <UART_SetConfig+0xe8>
 800bc82:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <UART_SetConfig+0xb8>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bca9 	.word	0x0800bca9
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800bcb1 	.word	0x0800bcb1
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc9e:	e116      	b.n	800bece <UART_SetConfig+0x2fe>
 800bca0:	2302      	movs	r3, #2
 800bca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bca6:	e112      	b.n	800bece <UART_SetConfig+0x2fe>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcae:	e10e      	b.n	800bece <UART_SetConfig+0x2fe>
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcb6:	e10a      	b.n	800bece <UART_SetConfig+0x2fe>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcbe:	e106      	b.n	800bece <UART_SetConfig+0x2fe>
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a7c      	ldr	r2, [pc, #496]	; (800beb8 <UART_SetConfig+0x2e8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d138      	bne.n	800bd3c <UART_SetConfig+0x16c>
 800bcca:	4b7a      	ldr	r3, [pc, #488]	; (800beb4 <UART_SetConfig+0x2e4>)
 800bccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd0:	f003 030c 	and.w	r3, r3, #12
 800bcd4:	2b0c      	cmp	r3, #12
 800bcd6:	d82d      	bhi.n	800bd34 <UART_SetConfig+0x164>
 800bcd8:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <UART_SetConfig+0x110>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bd15 	.word	0x0800bd15
 800bce4:	0800bd35 	.word	0x0800bd35
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd35 	.word	0x0800bd35
 800bcf0:	0800bd25 	.word	0x0800bd25
 800bcf4:	0800bd35 	.word	0x0800bd35
 800bcf8:	0800bd35 	.word	0x0800bd35
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd1d 	.word	0x0800bd1d
 800bd04:	0800bd35 	.word	0x0800bd35
 800bd08:	0800bd35 	.word	0x0800bd35
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd2d 	.word	0x0800bd2d
 800bd14:	2300      	movs	r3, #0
 800bd16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd1a:	e0d8      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd22:	e0d4      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd24:	2304      	movs	r3, #4
 800bd26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd2a:	e0d0      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd32:	e0cc      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd34:	2310      	movs	r3, #16
 800bd36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd3a:	e0c8      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5e      	ldr	r2, [pc, #376]	; (800bebc <UART_SetConfig+0x2ec>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d125      	bne.n	800bd92 <UART_SetConfig+0x1c2>
 800bd46:	4b5b      	ldr	r3, [pc, #364]	; (800beb4 <UART_SetConfig+0x2e4>)
 800bd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd50:	2b30      	cmp	r3, #48	; 0x30
 800bd52:	d016      	beq.n	800bd82 <UART_SetConfig+0x1b2>
 800bd54:	2b30      	cmp	r3, #48	; 0x30
 800bd56:	d818      	bhi.n	800bd8a <UART_SetConfig+0x1ba>
 800bd58:	2b20      	cmp	r3, #32
 800bd5a:	d00a      	beq.n	800bd72 <UART_SetConfig+0x1a2>
 800bd5c:	2b20      	cmp	r3, #32
 800bd5e:	d814      	bhi.n	800bd8a <UART_SetConfig+0x1ba>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <UART_SetConfig+0x19a>
 800bd64:	2b10      	cmp	r3, #16
 800bd66:	d008      	beq.n	800bd7a <UART_SetConfig+0x1aa>
 800bd68:	e00f      	b.n	800bd8a <UART_SetConfig+0x1ba>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd70:	e0ad      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd72:	2302      	movs	r3, #2
 800bd74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd78:	e0a9      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd7a:	2304      	movs	r3, #4
 800bd7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd80:	e0a5      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd82:	2308      	movs	r3, #8
 800bd84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd88:	e0a1      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd8a:	2310      	movs	r3, #16
 800bd8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd90:	e09d      	b.n	800bece <UART_SetConfig+0x2fe>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a4a      	ldr	r2, [pc, #296]	; (800bec0 <UART_SetConfig+0x2f0>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d125      	bne.n	800bde8 <UART_SetConfig+0x218>
 800bd9c:	4b45      	ldr	r3, [pc, #276]	; (800beb4 <UART_SetConfig+0x2e4>)
 800bd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bda6:	2bc0      	cmp	r3, #192	; 0xc0
 800bda8:	d016      	beq.n	800bdd8 <UART_SetConfig+0x208>
 800bdaa:	2bc0      	cmp	r3, #192	; 0xc0
 800bdac:	d818      	bhi.n	800bde0 <UART_SetConfig+0x210>
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d00a      	beq.n	800bdc8 <UART_SetConfig+0x1f8>
 800bdb2:	2b80      	cmp	r3, #128	; 0x80
 800bdb4:	d814      	bhi.n	800bde0 <UART_SetConfig+0x210>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <UART_SetConfig+0x1f0>
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d008      	beq.n	800bdd0 <UART_SetConfig+0x200>
 800bdbe:	e00f      	b.n	800bde0 <UART_SetConfig+0x210>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdc6:	e082      	b.n	800bece <UART_SetConfig+0x2fe>
 800bdc8:	2302      	movs	r3, #2
 800bdca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdce:	e07e      	b.n	800bece <UART_SetConfig+0x2fe>
 800bdd0:	2304      	movs	r3, #4
 800bdd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdd6:	e07a      	b.n	800bece <UART_SetConfig+0x2fe>
 800bdd8:	2308      	movs	r3, #8
 800bdda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdde:	e076      	b.n	800bece <UART_SetConfig+0x2fe>
 800bde0:	2310      	movs	r3, #16
 800bde2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bde6:	e072      	b.n	800bece <UART_SetConfig+0x2fe>
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a35      	ldr	r2, [pc, #212]	; (800bec4 <UART_SetConfig+0x2f4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d12a      	bne.n	800be48 <UART_SetConfig+0x278>
 800bdf2:	4b30      	ldr	r3, [pc, #192]	; (800beb4 <UART_SetConfig+0x2e4>)
 800bdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be00:	d01a      	beq.n	800be38 <UART_SetConfig+0x268>
 800be02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be06:	d81b      	bhi.n	800be40 <UART_SetConfig+0x270>
 800be08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0c:	d00c      	beq.n	800be28 <UART_SetConfig+0x258>
 800be0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be12:	d815      	bhi.n	800be40 <UART_SetConfig+0x270>
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <UART_SetConfig+0x250>
 800be18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be1c:	d008      	beq.n	800be30 <UART_SetConfig+0x260>
 800be1e:	e00f      	b.n	800be40 <UART_SetConfig+0x270>
 800be20:	2300      	movs	r3, #0
 800be22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be26:	e052      	b.n	800bece <UART_SetConfig+0x2fe>
 800be28:	2302      	movs	r3, #2
 800be2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be2e:	e04e      	b.n	800bece <UART_SetConfig+0x2fe>
 800be30:	2304      	movs	r3, #4
 800be32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be36:	e04a      	b.n	800bece <UART_SetConfig+0x2fe>
 800be38:	2308      	movs	r3, #8
 800be3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be3e:	e046      	b.n	800bece <UART_SetConfig+0x2fe>
 800be40:	2310      	movs	r3, #16
 800be42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be46:	e042      	b.n	800bece <UART_SetConfig+0x2fe>
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a17      	ldr	r2, [pc, #92]	; (800beac <UART_SetConfig+0x2dc>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d13a      	bne.n	800bec8 <UART_SetConfig+0x2f8>
 800be52:	4b18      	ldr	r3, [pc, #96]	; (800beb4 <UART_SetConfig+0x2e4>)
 800be54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be60:	d01a      	beq.n	800be98 <UART_SetConfig+0x2c8>
 800be62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be66:	d81b      	bhi.n	800bea0 <UART_SetConfig+0x2d0>
 800be68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be6c:	d00c      	beq.n	800be88 <UART_SetConfig+0x2b8>
 800be6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be72:	d815      	bhi.n	800bea0 <UART_SetConfig+0x2d0>
 800be74:	2b00      	cmp	r3, #0
 800be76:	d003      	beq.n	800be80 <UART_SetConfig+0x2b0>
 800be78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be7c:	d008      	beq.n	800be90 <UART_SetConfig+0x2c0>
 800be7e:	e00f      	b.n	800bea0 <UART_SetConfig+0x2d0>
 800be80:	2300      	movs	r3, #0
 800be82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be86:	e022      	b.n	800bece <UART_SetConfig+0x2fe>
 800be88:	2302      	movs	r3, #2
 800be8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be8e:	e01e      	b.n	800bece <UART_SetConfig+0x2fe>
 800be90:	2304      	movs	r3, #4
 800be92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be96:	e01a      	b.n	800bece <UART_SetConfig+0x2fe>
 800be98:	2308      	movs	r3, #8
 800be9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be9e:	e016      	b.n	800bece <UART_SetConfig+0x2fe>
 800bea0:	2310      	movs	r3, #16
 800bea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bea6:	e012      	b.n	800bece <UART_SetConfig+0x2fe>
 800bea8:	cfff69f3 	.word	0xcfff69f3
 800beac:	40008000 	.word	0x40008000
 800beb0:	40013800 	.word	0x40013800
 800beb4:	40021000 	.word	0x40021000
 800beb8:	40004400 	.word	0x40004400
 800bebc:	40004800 	.word	0x40004800
 800bec0:	40004c00 	.word	0x40004c00
 800bec4:	40005000 	.word	0x40005000
 800bec8:	2310      	movs	r3, #16
 800beca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4aae      	ldr	r2, [pc, #696]	; (800c18c <UART_SetConfig+0x5bc>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	f040 8097 	bne.w	800c008 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800beda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bede:	2b08      	cmp	r3, #8
 800bee0:	d823      	bhi.n	800bf2a <UART_SetConfig+0x35a>
 800bee2:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <UART_SetConfig+0x318>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf2b 	.word	0x0800bf2b
 800bef0:	0800bf15 	.word	0x0800bf15
 800bef4:	0800bf2b 	.word	0x0800bf2b
 800bef8:	0800bf1b 	.word	0x0800bf1b
 800befc:	0800bf2b 	.word	0x0800bf2b
 800bf00:	0800bf2b 	.word	0x0800bf2b
 800bf04:	0800bf2b 	.word	0x0800bf2b
 800bf08:	0800bf23 	.word	0x0800bf23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf0c:	f7fb f902 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800bf10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf12:	e010      	b.n	800bf36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf14:	4b9e      	ldr	r3, [pc, #632]	; (800c190 <UART_SetConfig+0x5c0>)
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf18:	e00d      	b.n	800bf36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf1a:	f7fb f863 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800bf1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf20:	e009      	b.n	800bf36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf28:	e005      	b.n	800bf36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 8130 	beq.w	800c19e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf42:	4a94      	ldr	r2, [pc, #592]	; (800c194 <UART_SetConfig+0x5c4>)
 800bf44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	4413      	add	r3, r2
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d305      	bcc.n	800bf6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d903      	bls.n	800bf76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf74:	e113      	b.n	800c19e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	2200      	movs	r2, #0
 800bf7a:	60bb      	str	r3, [r7, #8]
 800bf7c:	60fa      	str	r2, [r7, #12]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	4a84      	ldr	r2, [pc, #528]	; (800c194 <UART_SetConfig+0x5c4>)
 800bf84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	603b      	str	r3, [r7, #0]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf98:	f7f4 fe50 	bl	8000c3c <__aeabi_uldivmod>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	f04f 0200 	mov.w	r2, #0
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	020b      	lsls	r3, r1, #8
 800bfae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfb2:	0202      	lsls	r2, r0, #8
 800bfb4:	6979      	ldr	r1, [r7, #20]
 800bfb6:	6849      	ldr	r1, [r1, #4]
 800bfb8:	0849      	lsrs	r1, r1, #1
 800bfba:	2000      	movs	r0, #0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	eb12 0804 	adds.w	r8, r2, r4
 800bfc4:	eb43 0905 	adc.w	r9, r3, r5
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	469a      	mov	sl, r3
 800bfd0:	4693      	mov	fp, r2
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	465b      	mov	r3, fp
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	f7f4 fe2f 	bl	8000c3c <__aeabi_uldivmod>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfec:	d308      	bcc.n	800c000 <UART_SetConfig+0x430>
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff4:	d204      	bcs.n	800c000 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6a3a      	ldr	r2, [r7, #32]
 800bffc:	60da      	str	r2, [r3, #12]
 800bffe:	e0ce      	b.n	800c19e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c006:	e0ca      	b.n	800c19e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c010:	d166      	bne.n	800c0e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c016:	2b08      	cmp	r3, #8
 800c018:	d827      	bhi.n	800c06a <UART_SetConfig+0x49a>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <UART_SetConfig+0x450>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c045 	.word	0x0800c045
 800c024:	0800c04d 	.word	0x0800c04d
 800c028:	0800c055 	.word	0x0800c055
 800c02c:	0800c06b 	.word	0x0800c06b
 800c030:	0800c05b 	.word	0x0800c05b
 800c034:	0800c06b 	.word	0x0800c06b
 800c038:	0800c06b 	.word	0x0800c06b
 800c03c:	0800c06b 	.word	0x0800c06b
 800c040:	0800c063 	.word	0x0800c063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c044:	f7fb f866 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800c048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c04a:	e014      	b.n	800c076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c04c:	f7fb f878 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 800c050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c052:	e010      	b.n	800c076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c054:	4b4e      	ldr	r3, [pc, #312]	; (800c190 <UART_SetConfig+0x5c0>)
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c058:	e00d      	b.n	800c076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c05a:	f7fa ffc3 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800c05e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c060:	e009      	b.n	800c076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c068:	e005      	b.n	800c076 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8090 	beq.w	800c19e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	4a44      	ldr	r2, [pc, #272]	; (800c194 <UART_SetConfig+0x5c4>)
 800c084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c088:	461a      	mov	r2, r3
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c090:	005a      	lsls	r2, r3, #1
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	085b      	lsrs	r3, r3, #1
 800c098:	441a      	add	r2, r3
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	2b0f      	cmp	r3, #15
 800c0a8:	d916      	bls.n	800c0d8 <UART_SetConfig+0x508>
 800c0aa:	6a3b      	ldr	r3, [r7, #32]
 800c0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0b0:	d212      	bcs.n	800c0d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	f023 030f 	bic.w	r3, r3, #15
 800c0ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	085b      	lsrs	r3, r3, #1
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f003 0307 	and.w	r3, r3, #7
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	8bfa      	ldrh	r2, [r7, #30]
 800c0d4:	60da      	str	r2, [r3, #12]
 800c0d6:	e062      	b.n	800c19e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c0de:	e05e      	b.n	800c19e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	d828      	bhi.n	800c13a <UART_SetConfig+0x56a>
 800c0e8:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <UART_SetConfig+0x520>)
 800c0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ee:	bf00      	nop
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c11d 	.word	0x0800c11d
 800c0f8:	0800c125 	.word	0x0800c125
 800c0fc:	0800c13b 	.word	0x0800c13b
 800c100:	0800c12b 	.word	0x0800c12b
 800c104:	0800c13b 	.word	0x0800c13b
 800c108:	0800c13b 	.word	0x0800c13b
 800c10c:	0800c13b 	.word	0x0800c13b
 800c110:	0800c133 	.word	0x0800c133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c114:	f7fa fffe 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800c118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c11a:	e014      	b.n	800c146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c11c:	f7fb f810 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 800c120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c122:	e010      	b.n	800c146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c124:	4b1a      	ldr	r3, [pc, #104]	; (800c190 <UART_SetConfig+0x5c0>)
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c128:	e00d      	b.n	800c146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c12a:	f7fa ff5b 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 800c12e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c130:	e009      	b.n	800c146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c138:	e005      	b.n	800c146 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c144:	bf00      	nop
    }

    if (pclk != 0U)
 800c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d028      	beq.n	800c19e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	4a10      	ldr	r2, [pc, #64]	; (800c194 <UART_SetConfig+0x5c4>)
 800c152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c156:	461a      	mov	r2, r3
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	085b      	lsrs	r3, r3, #1
 800c164:	441a      	add	r2, r3
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d910      	bls.n	800c198 <UART_SetConfig+0x5c8>
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c17c:	d20c      	bcs.n	800c198 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	b29a      	uxth	r2, r3
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	60da      	str	r2, [r3, #12]
 800c188:	e009      	b.n	800c19e <UART_SetConfig+0x5ce>
 800c18a:	bf00      	nop
 800c18c:	40008000 	.word	0x40008000
 800c190:	00f42400 	.word	0x00f42400
 800c194:	080153bc 	.word	0x080153bc
      }
      else
      {
        ret = HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c1ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3730      	adds	r7, #48	; 0x30
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c1c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	430a      	orrs	r2, r1
 800c212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c218:	f003 0304 	and.w	r3, r3, #4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00a      	beq.n	800c236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23a:	f003 0308 	and.w	r3, r3, #8
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01a      	beq.n	800c2de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2c6:	d10a      	bne.n	800c2de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	605a      	str	r2, [r3, #4]
  }
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af02      	add	r7, sp, #8
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c31c:	f7f7 fd0e 	bl	8003d3c <HAL_GetTick>
 800c320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0308 	and.w	r3, r3, #8
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d10e      	bne.n	800c34e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f82f 	bl	800c3a2 <UART_WaitOnFlagUntilTimeout>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e025      	b.n	800c39a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0304 	and.w	r3, r3, #4
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d10e      	bne.n	800c37a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c35c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f819 	bl	800c3a2 <UART_WaitOnFlagUntilTimeout>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e00f      	b.n	800c39a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2220      	movs	r2, #32
 800c37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2220      	movs	r2, #32
 800c386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b09c      	sub	sp, #112	; 0x70
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	603b      	str	r3, [r7, #0]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3b2:	e0a9      	b.n	800c508 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ba:	f000 80a5 	beq.w	800c508 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3be:	f7f7 fcbd 	bl	8003d3c <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d302      	bcc.n	800c3d4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c3ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d140      	bne.n	800c456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3e8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e6      	bne.n	800c3d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3308      	adds	r3, #8
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	663b      	str	r3, [r7, #96]	; 0x60
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c426:	64ba      	str	r2, [r7, #72]	; 0x48
 800c428:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c42c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2220      	movs	r2, #32
 800c43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2220      	movs	r2, #32
 800c446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e069      	b.n	800c52a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b00      	cmp	r3, #0
 800c462:	d051      	beq.n	800c508 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c46e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c472:	d149      	bne.n	800c508 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c47c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c492:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
 800c49e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a4:	e841 2300 	strex	r3, r2, [r1]
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4d0:	623a      	str	r2, [r7, #32]
 800c4d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	6a3a      	ldr	r2, [r7, #32]
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e5      	bne.n	800c4b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2220      	movs	r2, #32
 800c4f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e010      	b.n	800c52a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	69da      	ldr	r2, [r3, #28]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	4013      	ands	r3, r2
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	429a      	cmp	r2, r3
 800c516:	bf0c      	ite	eq
 800c518:	2301      	moveq	r3, #1
 800c51a:	2300      	movne	r3, #0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	461a      	mov	r2, r3
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	429a      	cmp	r2, r3
 800c524:	f43f af46 	beq.w	800c3b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3770      	adds	r7, #112	; 0x70
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c532:	b480      	push	{r7}
 800c534:	b095      	sub	sp, #84	; 0x54
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c542:	e853 3f00 	ldrex	r3, [r3]
 800c546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c54e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	461a      	mov	r2, r3
 800c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c558:	643b      	str	r3, [r7, #64]	; 0x40
 800c55a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c55e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e6      	bne.n	800c53a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3308      	adds	r3, #8
 800c572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c582:	f023 0301 	bic.w	r3, r3, #1
 800c586:	64bb      	str	r3, [r7, #72]	; 0x48
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3308      	adds	r3, #8
 800c58e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c590:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e3      	bne.n	800c56c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d118      	bne.n	800c5de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	f023 0310 	bic.w	r3, r3, #16
 800c5c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ca:	61bb      	str	r3, [r7, #24]
 800c5cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ce:	6979      	ldr	r1, [r7, #20]
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e6      	bne.n	800c5ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c5f2:	bf00      	nop
 800c5f4:	3754      	adds	r7, #84	; 0x54
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7ff fac1 	bl	800bba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c622:	bf00      	nop
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b088      	sub	sp, #32
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	e853 3f00 	ldrex	r3, [r3]
 800c63e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	461a      	mov	r2, r3
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	6979      	ldr	r1, [r7, #20]
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	e841 2300 	strex	r3, r2, [r1]
 800c65c:	613b      	str	r3, [r7, #16]
   return(result);
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e6      	bne.n	800c632 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2220      	movs	r2, #32
 800c668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff fa8c 	bl	800bb90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c678:	bf00      	nop
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d101      	bne.n	800c6d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	e027      	b.n	800c722 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2224      	movs	r2, #36	; 0x24
 800c6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f022 0201 	bic.w	r2, r2, #1
 800c6f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c700:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2220      	movs	r2, #32
 800c714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c742:	2302      	movs	r3, #2
 800c744:	e02d      	b.n	800c7a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2224      	movs	r2, #36	; 0x24
 800c752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f022 0201 	bic.w	r2, r2, #1
 800c76c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f850 	bl	800c828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2220      	movs	r2, #32
 800c794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d101      	bne.n	800c7c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7be:	2302      	movs	r3, #2
 800c7c0:	e02d      	b.n	800c81e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2224      	movs	r2, #36	; 0x24
 800c7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f022 0201 	bic.w	r2, r2, #1
 800c7e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f812 	bl	800c828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2220      	movs	r2, #32
 800c810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c834:	2b00      	cmp	r3, #0
 800c836:	d108      	bne.n	800c84a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c848:	e031      	b.n	800c8ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c84a:	2308      	movs	r3, #8
 800c84c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c84e:	2308      	movs	r3, #8
 800c850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	0e5b      	lsrs	r3, r3, #25
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	0f5b      	lsrs	r3, r3, #29
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 0307 	and.w	r3, r3, #7
 800c870:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c872:	7bbb      	ldrb	r3, [r7, #14]
 800c874:	7b3a      	ldrb	r2, [r7, #12]
 800c876:	4911      	ldr	r1, [pc, #68]	; (800c8bc <UARTEx_SetNbDataToProcess+0x94>)
 800c878:	5c8a      	ldrb	r2, [r1, r2]
 800c87a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c87e:	7b3a      	ldrb	r2, [r7, #12]
 800c880:	490f      	ldr	r1, [pc, #60]	; (800c8c0 <UARTEx_SetNbDataToProcess+0x98>)
 800c882:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c884:	fb93 f3f2 	sdiv	r3, r3, r2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	7b7a      	ldrb	r2, [r7, #13]
 800c894:	4909      	ldr	r1, [pc, #36]	; (800c8bc <UARTEx_SetNbDataToProcess+0x94>)
 800c896:	5c8a      	ldrb	r2, [r1, r2]
 800c898:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c89c:	7b7a      	ldrb	r2, [r7, #13]
 800c89e:	4908      	ldr	r1, [pc, #32]	; (800c8c0 <UARTEx_SetNbDataToProcess+0x98>)
 800c8a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8ae:	bf00      	nop
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	080153d4 	.word	0x080153d4
 800c8c0:	080153dc 	.word	0x080153dc

0800c8c4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	b480      	push	{r7}
 800c8c8:	b085      	sub	sp, #20
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	f107 001c 	add.w	r0, r7, #28
 800c8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800c8da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c8de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c8e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c8e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c8ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	4b07      	ldr	r3, [pc, #28]	; (800c914 <SDMMC_Init+0x50>)
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	b004      	add	sp, #16
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	ffc02c00 	.word	0xffc02c00

0800c918 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c926:	4618      	mov	r0, r3
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c932:	b480      	push	{r7}
 800c934:	b083      	sub	sp, #12
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f043 0203 	orr.w	r2, r3, #3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c968:	2002      	movs	r0, #2
 800c96a:	f7f7 f9f3 	bl	8003d54 <HAL_Delay>

  return HAL_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0303 	and.w	r3, r3, #3
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c9b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c9b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c9be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <SDMMC_SendCommand+0x50>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	fffee0c0 	.word	0xfffee0c0

0800c9e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	b2db      	uxtb	r3, r3
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b085      	sub	sp, #20
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3314      	adds	r3, #20
 800ca10:	461a      	mov	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	4413      	add	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ca54:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ca5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ca72:	2300      	movs	r3, #0

}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca8e:	2310      	movs	r3, #16
 800ca90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caa2:	f107 0308 	add.w	r3, r7, #8
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7ff ff73 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800caae:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab2:	2110      	movs	r1, #16
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa7b 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800caba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cabc:	69fb      	ldr	r3, [r7, #28]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3720      	adds	r7, #32
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b088      	sub	sp, #32
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cad4:	2311      	movs	r3, #17
 800cad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cade:	2300      	movs	r3, #0
 800cae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cae6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cae8:	f107 0308 	add.w	r3, r7, #8
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff ff50 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800caf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf8:	2111      	movs	r1, #17
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fa58 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cb00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb02:	69fb      	ldr	r3, [r7, #28]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cb1a:	2312      	movs	r3, #18
 800cb1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb24:	2300      	movs	r3, #0
 800cb26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb2e:	f107 0308 	add.w	r3, r7, #8
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff2d 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb3e:	2112      	movs	r1, #18
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fa35 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cb46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb48:	69fb      	ldr	r3, [r7, #28]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b088      	sub	sp, #32
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cb60:	2318      	movs	r3, #24
 800cb62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb74:	f107 0308 	add.w	r3, r7, #8
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff ff0a 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb84:	2118      	movs	r1, #24
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fa12 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cb8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cba6:	2319      	movs	r3, #25
 800cba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbba:	f107 0308 	add.w	r3, r7, #8
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7ff fee7 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cbc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbca:	2119      	movs	r1, #25
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f9ef 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cbd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbd4:	69fb      	ldr	r3, [r7, #28]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
	...

0800cbe0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cbec:	230c      	movs	r3, #12
 800cbee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbfe:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc18:	f107 0308 	add.w	r3, r7, #8
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff feb8 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cc24:	4a08      	ldr	r2, [pc, #32]	; (800cc48 <SDMMC_CmdStopTransfer+0x68>)
 800cc26:	210c      	movs	r1, #12
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f9c1 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cc2e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	05f5e100 	.word	0x05f5e100

0800cc4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08a      	sub	sp, #40	; 0x28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cc5c:	2307      	movs	r3, #7
 800cc5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc64:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc6e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc70:	f107 0310 	add.w	r3, r7, #16
 800cc74:	4619      	mov	r1, r3
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fe8c 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cc7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc80:	2107      	movs	r1, #7
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f000 f994 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cc88:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3728      	adds	r7, #40	; 0x28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cca4:	2300      	movs	r3, #0
 800cca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb2:	f107 0308 	add.w	r3, r7, #8
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff fe6b 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fbb8 	bl	800d434 <SDMMC_GetCmdError>
 800ccc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ccd8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ccdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ccde:	2308      	movs	r3, #8
 800cce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff fe4b 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fb4a 	bl	800d398 <SDMMC_GetCmdResp7>
 800cd04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd06:	69fb      	ldr	r3, [r7, #28]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3720      	adds	r7, #32
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b088      	sub	sp, #32
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cd1e:	2337      	movs	r3, #55	; 0x37
 800cd20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd32:	f107 0308 	add.w	r3, r7, #8
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fe2b 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cd3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd42:	2137      	movs	r1, #55	; 0x37
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f933 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b088      	sub	sp, #32
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cd64:	2329      	movs	r3, #41	; 0x29
 800cd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd78:	f107 0308 	add.w	r3, r7, #8
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fe08 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fa4f 	bl	800d228 <SDMMC_GetCmdResp3>
 800cd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cda4:	2306      	movs	r3, #6
 800cda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cda8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fde8 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cdc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc8:	2106      	movs	r1, #6
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 f8f0 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cdd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdd2:	69fb      	ldr	r3, [r7, #28]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3720      	adds	r7, #32
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cde8:	2333      	movs	r3, #51	; 0x33
 800cdea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdfc:	f107 0308 	add.w	r3, r7, #8
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff fdc6 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ce08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce0c:	2133      	movs	r1, #51	; 0x33
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f8ce 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800ce14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce16:	69fb      	ldr	r3, [r7, #28]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ce2c:	2302      	movs	r3, #2
 800ce2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce30:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce36:	2300      	movs	r3, #0
 800ce38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce40:	f107 0308 	add.w	r3, r7, #8
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff fda4 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f9a1 	bl	800d194 <SDMMC_GetCmdResp2>
 800ce52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce54:	69fb      	ldr	r3, [r7, #28]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3720      	adds	r7, #32
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b088      	sub	sp, #32
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ce6c:	2309      	movs	r3, #9
 800ce6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ce70:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce80:	f107 0308 	add.w	r3, r7, #8
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff fd84 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f981 	bl	800d194 <SDMMC_GetCmdResp2>
 800ce92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce94:	69fb      	ldr	r3, [r7, #28]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3720      	adds	r7, #32
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b088      	sub	sp, #32
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ceac:	2303      	movs	r3, #3
 800ceae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cebe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fd64 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	2103      	movs	r1, #3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f9e9 	bl	800d2a8 <SDMMC_GetCmdResp6>
 800ced6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ced8:	69fb      	ldr	r3, [r7, #28]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b088      	sub	sp, #32
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cef0:	230d      	movs	r3, #13
 800cef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cefe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fd42 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf14:	210d      	movs	r1, #13
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f84a 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cf1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3720      	adds	r7, #32
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cf30:	2300      	movs	r3, #0
 800cf32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cf34:	230d      	movs	r3, #13
 800cf36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf48:	f107 0308 	add.w	r3, r7, #8
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fd20 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cf54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf58:	210d      	movs	r1, #13
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f828 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cf60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf62:	69fb      	ldr	r3, [r7, #28]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b088      	sub	sp, #32
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cf78:	230b      	movs	r3, #11
 800cf7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf82:	2300      	movs	r3, #0
 800cf84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf8c:	f107 0308 	add.w	r3, r7, #8
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff fcfe 	bl	800c994 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800cf98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf9c:	210b      	movs	r1, #11
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f806 	bl	800cfb0 <SDMMC_GetCmdResp1>
 800cfa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3720      	adds	r7, #32
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cfbe:	4b70      	ldr	r3, [pc, #448]	; (800d180 <SDMMC_GetCmdResp1+0x1d0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a70      	ldr	r2, [pc, #448]	; (800d184 <SDMMC_GetCmdResp1+0x1d4>)
 800cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc8:	0a5a      	lsrs	r2, r3, #9
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	fb02 f303 	mul.w	r3, r2, r3
 800cfd0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	1e5a      	subs	r2, r3, #1
 800cfd6:	61fa      	str	r2, [r7, #28]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfe0:	e0c9      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	4b67      	ldr	r3, [pc, #412]	; (800d188 <SDMMC_GetCmdResp1+0x1d8>)
 800cfec:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0ef      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x22>
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ea      	bne.n	800cfd2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2204      	movs	r2, #4
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d00e:	2304      	movs	r3, #4
 800d010:	e0b1      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2201      	movs	r2, #1
 800d022:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d024:	2301      	movs	r3, #1
 800d026:	e0a6      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4a58      	ldr	r2, [pc, #352]	; (800d18c <SDMMC_GetCmdResp1+0x1dc>)
 800d02c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff fcda 	bl	800c9e8 <SDMMC_GetCommandResponse>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	7afb      	ldrb	r3, [r7, #11]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d001      	beq.n	800d042 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d03e:	2301      	movs	r3, #1
 800d040:	e099      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d042:	2100      	movs	r1, #0
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f7ff fcdc 	bl	800ca02 <SDMMC_GetResponse>
 800d04a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	4b50      	ldr	r3, [pc, #320]	; (800d190 <SDMMC_GetCmdResp1+0x1e0>)
 800d050:	4013      	ands	r3, r2
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d056:	2300      	movs	r3, #0
 800d058:	e08d      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	da02      	bge.n	800d066 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d064:	e087      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d070:	2340      	movs	r3, #64	; 0x40
 800d072:	e080      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d07e:	2380      	movs	r3, #128	; 0x80
 800d080:	e079      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d090:	e071      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0a0:	e069      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0b0:	e061      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d0bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0c0:	e059      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d0cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0d0:	e051      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0e0:	e049      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d0ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d0f0:	e041      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d0fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d100:	e039      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d10c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d110:	e031      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d11c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d120:	e029      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d12c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d130:	e021      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d13c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d140:	e019      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d14c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d150:	e011      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d15c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d160:	e009      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f003 0308 	and.w	r3, r3, #8
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d16c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d170:	e001      	b.n	800d176 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d176:	4618      	mov	r0, r3
 800d178:	3720      	adds	r7, #32
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20000000 	.word	0x20000000
 800d184:	10624dd3 	.word	0x10624dd3
 800d188:	00200045 	.word	0x00200045
 800d18c:	002000c5 	.word	0x002000c5
 800d190:	fdffe008 	.word	0xfdffe008

0800d194 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d19c:	4b1f      	ldr	r3, [pc, #124]	; (800d21c <SDMMC_GetCmdResp2+0x88>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <SDMMC_GetCmdResp2+0x8c>)
 800d1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a6:	0a5b      	lsrs	r3, r3, #9
 800d1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ac:	fb02 f303 	mul.w	r3, r2, r3
 800d1b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	1e5a      	subs	r2, r3, #1
 800d1b6:	60fa      	str	r2, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d102      	bne.n	800d1c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1c0:	e026      	b.n	800d210 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d0ef      	beq.n	800d1b2 <SDMMC_GetCmdResp2+0x1e>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1ea      	bne.n	800d1b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e0:	f003 0304 	and.w	r3, r3, #4
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2204      	movs	r2, #4
 800d1ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1ee:	2304      	movs	r3, #4
 800d1f0:	e00e      	b.n	800d210 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f6:	f003 0301 	and.w	r3, r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d204:	2301      	movs	r3, #1
 800d206:	e003      	b.n	800d210 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a06      	ldr	r2, [pc, #24]	; (800d224 <SDMMC_GetCmdResp2+0x90>)
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	20000000 	.word	0x20000000
 800d220:	10624dd3 	.word	0x10624dd3
 800d224:	002000c5 	.word	0x002000c5

0800d228 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d230:	4b1a      	ldr	r3, [pc, #104]	; (800d29c <SDMMC_GetCmdResp3+0x74>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a1a      	ldr	r2, [pc, #104]	; (800d2a0 <SDMMC_GetCmdResp3+0x78>)
 800d236:	fba2 2303 	umull	r2, r3, r2, r3
 800d23a:	0a5b      	lsrs	r3, r3, #9
 800d23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d240:	fb02 f303 	mul.w	r3, r2, r3
 800d244:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	1e5a      	subs	r2, r3, #1
 800d24a:	60fa      	str	r2, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d102      	bne.n	800d256 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d254:	e01b      	b.n	800d28e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0ef      	beq.n	800d246 <SDMMC_GetCmdResp3+0x1e>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1ea      	bne.n	800d246 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d274:	f003 0304 	and.w	r3, r3, #4
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2204      	movs	r2, #4
 800d280:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d282:	2304      	movs	r3, #4
 800d284:	e003      	b.n	800d28e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a06      	ldr	r2, [pc, #24]	; (800d2a4 <SDMMC_GetCmdResp3+0x7c>)
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	20000000 	.word	0x20000000
 800d2a0:	10624dd3 	.word	0x10624dd3
 800d2a4:	002000c5 	.word	0x002000c5

0800d2a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2b6:	4b35      	ldr	r3, [pc, #212]	; (800d38c <SDMMC_GetCmdResp6+0xe4>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a35      	ldr	r2, [pc, #212]	; (800d390 <SDMMC_GetCmdResp6+0xe8>)
 800d2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c0:	0a5b      	lsrs	r3, r3, #9
 800d2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	1e5a      	subs	r2, r3, #1
 800d2d0:	61fa      	str	r2, [r7, #28]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d102      	bne.n	800d2dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2da:	e052      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d0ef      	beq.n	800d2cc <SDMMC_GetCmdResp6+0x24>
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1ea      	bne.n	800d2cc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fa:	f003 0304 	and.w	r3, r3, #4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d004      	beq.n	800d30c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2204      	movs	r2, #4
 800d306:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d308:	2304      	movs	r3, #4
 800d30a:	e03a      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	2b00      	cmp	r3, #0
 800d316:	d004      	beq.n	800d322 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d31e:	2301      	movs	r3, #1
 800d320:	e02f      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff fb60 	bl	800c9e8 <SDMMC_GetCommandResponse>
 800d328:	4603      	mov	r3, r0
 800d32a:	461a      	mov	r2, r3
 800d32c:	7afb      	ldrb	r3, [r7, #11]
 800d32e:	4293      	cmp	r3, r2
 800d330:	d001      	beq.n	800d336 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d332:	2301      	movs	r3, #1
 800d334:	e025      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4a16      	ldr	r2, [pc, #88]	; (800d394 <SDMMC_GetCmdResp6+0xec>)
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d33c:	2100      	movs	r1, #0
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7ff fb5f 	bl	800ca02 <SDMMC_GetResponse>
 800d344:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	0c1b      	lsrs	r3, r3, #16
 800d354:	b29a      	uxth	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e011      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d36c:	e009      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d37c:	e001      	b.n	800d382 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d37e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d382:	4618      	mov	r0, r3
 800d384:	3720      	adds	r7, #32
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	20000000 	.word	0x20000000
 800d390:	10624dd3 	.word	0x10624dd3
 800d394:	002000c5 	.word	0x002000c5

0800d398 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3a0:	4b22      	ldr	r3, [pc, #136]	; (800d42c <SDMMC_GetCmdResp7+0x94>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a22      	ldr	r2, [pc, #136]	; (800d430 <SDMMC_GetCmdResp7+0x98>)
 800d3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3aa:	0a5b      	lsrs	r3, r3, #9
 800d3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
 800d3b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	1e5a      	subs	r2, r3, #1
 800d3ba:	60fa      	str	r2, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3c4:	e02c      	b.n	800d420 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0ef      	beq.n	800d3b6 <SDMMC_GetCmdResp7+0x1e>
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1ea      	bne.n	800d3b6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e4:	f003 0304 	and.w	r3, r3, #4
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2204      	movs	r2, #4
 800d3f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3f2:	2304      	movs	r3, #4
 800d3f4:	e014      	b.n	800d420 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d004      	beq.n	800d40c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d408:	2301      	movs	r3, #1
 800d40a:	e009      	b.n	800d420 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2240      	movs	r2, #64	; 0x40
 800d41c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d41e:	2300      	movs	r3, #0

}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	20000000 	.word	0x20000000
 800d430:	10624dd3 	.word	0x10624dd3

0800d434 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d43c:	4b11      	ldr	r3, [pc, #68]	; (800d484 <SDMMC_GetCmdError+0x50>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a11      	ldr	r2, [pc, #68]	; (800d488 <SDMMC_GetCmdError+0x54>)
 800d442:	fba2 2303 	umull	r2, r3, r2, r3
 800d446:	0a5b      	lsrs	r3, r3, #9
 800d448:	f241 3288 	movw	r2, #5000	; 0x1388
 800d44c:	fb02 f303 	mul.w	r3, r2, r3
 800d450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	1e5a      	subs	r2, r3, #1
 800d456:	60fa      	str	r2, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d45c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d460:	e009      	b.n	800d476 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0f1      	beq.n	800d452 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a06      	ldr	r2, [pc, #24]	; (800d48c <SDMMC_GetCmdError+0x58>)
 800d472:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20000000 	.word	0x20000000
 800d488:	10624dd3 	.word	0x10624dd3
 800d48c:	002000c5 	.word	0x002000c5

0800d490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d490:	b084      	sub	sp, #16
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	f107 001c 	add.w	r0, r7, #28
 800d49e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f001 faf6 	bl	800eaa0 <USB_CoreReset>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ca:	e005      	b.n	800d4d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4e4:	b004      	add	sp, #16
 800d4e6:	4770      	bx	lr

0800d4e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d165      	bne.n	800d5c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	4a3e      	ldr	r2, [pc, #248]	; (800d5f8 <USB_SetTurnaroundTime+0x110>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d906      	bls.n	800d512 <USB_SetTurnaroundTime+0x2a>
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	4a3d      	ldr	r2, [pc, #244]	; (800d5fc <USB_SetTurnaroundTime+0x114>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d202      	bcs.n	800d512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d50c:	230f      	movs	r3, #15
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e05c      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	4a39      	ldr	r2, [pc, #228]	; (800d5fc <USB_SetTurnaroundTime+0x114>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d306      	bcc.n	800d528 <USB_SetTurnaroundTime+0x40>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	4a38      	ldr	r2, [pc, #224]	; (800d600 <USB_SetTurnaroundTime+0x118>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d202      	bcs.n	800d528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d522:	230e      	movs	r3, #14
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	e051      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	4a35      	ldr	r2, [pc, #212]	; (800d600 <USB_SetTurnaroundTime+0x118>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d306      	bcc.n	800d53e <USB_SetTurnaroundTime+0x56>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	4a34      	ldr	r2, [pc, #208]	; (800d604 <USB_SetTurnaroundTime+0x11c>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d202      	bcs.n	800d53e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d538:	230d      	movs	r3, #13
 800d53a:	617b      	str	r3, [r7, #20]
 800d53c:	e046      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	4a30      	ldr	r2, [pc, #192]	; (800d604 <USB_SetTurnaroundTime+0x11c>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d306      	bcc.n	800d554 <USB_SetTurnaroundTime+0x6c>
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	4a2f      	ldr	r2, [pc, #188]	; (800d608 <USB_SetTurnaroundTime+0x120>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d802      	bhi.n	800d554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d54e:	230c      	movs	r3, #12
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	e03b      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	4a2c      	ldr	r2, [pc, #176]	; (800d608 <USB_SetTurnaroundTime+0x120>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d906      	bls.n	800d56a <USB_SetTurnaroundTime+0x82>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	4a2b      	ldr	r2, [pc, #172]	; (800d60c <USB_SetTurnaroundTime+0x124>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d802      	bhi.n	800d56a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d564:	230b      	movs	r3, #11
 800d566:	617b      	str	r3, [r7, #20]
 800d568:	e030      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	4a27      	ldr	r2, [pc, #156]	; (800d60c <USB_SetTurnaroundTime+0x124>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d906      	bls.n	800d580 <USB_SetTurnaroundTime+0x98>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	4a26      	ldr	r2, [pc, #152]	; (800d610 <USB_SetTurnaroundTime+0x128>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d802      	bhi.n	800d580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d57a:	230a      	movs	r3, #10
 800d57c:	617b      	str	r3, [r7, #20]
 800d57e:	e025      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	4a23      	ldr	r2, [pc, #140]	; (800d610 <USB_SetTurnaroundTime+0x128>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d906      	bls.n	800d596 <USB_SetTurnaroundTime+0xae>
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	4a22      	ldr	r2, [pc, #136]	; (800d614 <USB_SetTurnaroundTime+0x12c>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d202      	bcs.n	800d596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d590:	2309      	movs	r3, #9
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	e01a      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	4a1e      	ldr	r2, [pc, #120]	; (800d614 <USB_SetTurnaroundTime+0x12c>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d306      	bcc.n	800d5ac <USB_SetTurnaroundTime+0xc4>
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	4a1d      	ldr	r2, [pc, #116]	; (800d618 <USB_SetTurnaroundTime+0x130>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d802      	bhi.n	800d5ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d5a6:	2308      	movs	r3, #8
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	e00f      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	4a1a      	ldr	r2, [pc, #104]	; (800d618 <USB_SetTurnaroundTime+0x130>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d906      	bls.n	800d5c2 <USB_SetTurnaroundTime+0xda>
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	4a19      	ldr	r2, [pc, #100]	; (800d61c <USB_SetTurnaroundTime+0x134>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d202      	bcs.n	800d5c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d5bc:	2307      	movs	r3, #7
 800d5be:	617b      	str	r3, [r7, #20]
 800d5c0:	e004      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d5c2:	2306      	movs	r3, #6
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	e001      	b.n	800d5cc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d5c8:	2309      	movs	r3, #9
 800d5ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68da      	ldr	r2, [r3, #12]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	029b      	lsls	r3, r3, #10
 800d5e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	371c      	adds	r7, #28
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	00d8acbf 	.word	0x00d8acbf
 800d5fc:	00e4e1c0 	.word	0x00e4e1c0
 800d600:	00f42400 	.word	0x00f42400
 800d604:	01067380 	.word	0x01067380
 800d608:	011a499f 	.word	0x011a499f
 800d60c:	01312cff 	.word	0x01312cff
 800d610:	014ca43f 	.word	0x014ca43f
 800d614:	016e3600 	.word	0x016e3600
 800d618:	01a6ab1f 	.word	0x01a6ab1f
 800d61c:	01e84800 	.word	0x01e84800

0800d620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	f043 0201 	orr.w	r2, r3, #1
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d642:	b480      	push	{r7}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f023 0201 	bic.w	r2, r3, #1
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d670:	2300      	movs	r3, #0
 800d672:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d115      	bne.n	800d6b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d692:	2001      	movs	r0, #1
 800d694:	f7f6 fb5e 	bl	8003d54 <HAL_Delay>
      ms++;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3301      	adds	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f001 f985 	bl	800e9ae <USB_GetMode>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d01e      	beq.n	800d6e8 <USB_SetCurrentMode+0x84>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2b31      	cmp	r3, #49	; 0x31
 800d6ae:	d9f0      	bls.n	800d692 <USB_SetCurrentMode+0x2e>
 800d6b0:	e01a      	b.n	800d6e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d6b2:	78fb      	ldrb	r3, [r7, #3]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d115      	bne.n	800d6e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	f7f6 fb45 	bl	8003d54 <HAL_Delay>
      ms++;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f001 f96c 	bl	800e9ae <USB_GetMode>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <USB_SetCurrentMode+0x84>
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b31      	cmp	r3, #49	; 0x31
 800d6e0:	d9f0      	bls.n	800d6c4 <USB_SetCurrentMode+0x60>
 800d6e2:	e001      	b.n	800d6e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e005      	b.n	800d6f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b32      	cmp	r3, #50	; 0x32
 800d6ec:	d101      	bne.n	800d6f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d716:	2300      	movs	r3, #0
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	e009      	b.n	800d730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	3340      	adds	r3, #64	; 0x40
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	2200      	movs	r2, #0
 800d728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	3301      	adds	r3, #1
 800d72e:	613b      	str	r3, [r7, #16]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	2b0e      	cmp	r3, #14
 800d734:	d9f2      	bls.n	800d71c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d11c      	bne.n	800d776 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d74a:	f043 0302 	orr.w	r3, r3, #2
 800d74e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d754:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	e005      	b.n	800d782 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d788:	461a      	mov	r2, r3
 800d78a:	2300      	movs	r3, #0
 800d78c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d794:	4619      	mov	r1, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d79c:	461a      	mov	r2, r3
 800d79e:	680b      	ldr	r3, [r1, #0]
 800d7a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d7a2:	2103      	movs	r1, #3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f959 	bl	800da5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d7aa:	2110      	movs	r1, #16
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f8f1 	bl	800d994 <USB_FlushTxFifo>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f91d 	bl	800d9fc <USB_FlushRxFifo>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7de:	461a      	mov	r2, r3
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	613b      	str	r3, [r7, #16]
 800d7f4:	e043      	b.n	800d87e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d80c:	d118      	bne.n	800d840 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	015a      	lsls	r2, r3, #5
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4413      	add	r3, r2
 800d81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d820:	461a      	mov	r2, r3
 800d822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	e013      	b.n	800d852 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	e008      	b.n	800d852 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	015a      	lsls	r2, r3, #5
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	4413      	add	r3, r2
 800d848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d84c:	461a      	mov	r2, r3
 800d84e:	2300      	movs	r3, #0
 800d850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	015a      	lsls	r2, r3, #5
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85e:	461a      	mov	r2, r3
 800d860:	2300      	movs	r3, #0
 800d862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d870:	461a      	mov	r2, r3
 800d872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	3301      	adds	r3, #1
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	429a      	cmp	r2, r3
 800d884:	d3b7      	bcc.n	800d7f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d886:	2300      	movs	r3, #0
 800d888:	613b      	str	r3, [r7, #16]
 800d88a:	e043      	b.n	800d914 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	015a      	lsls	r2, r3, #5
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	4413      	add	r3, r2
 800d894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d89e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8a2:	d118      	bne.n	800d8d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10a      	bne.n	800d8c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	015a      	lsls	r2, r3, #5
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	e013      	b.n	800d8e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	015a      	lsls	r2, r3, #5
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	e008      	b.n	800d8e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	015a      	lsls	r2, r3, #5
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	015a      	lsls	r2, r3, #5
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4413      	add	r3, r2
 800d902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d906:	461a      	mov	r2, r3
 800d908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d90c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	3301      	adds	r3, #1
 800d912:	613b      	str	r3, [r7, #16]
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d3b7      	bcc.n	800d88c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d92a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d92e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d93c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	f043 0210 	orr.w	r2, r3, #16
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	699a      	ldr	r2, [r3, #24]
 800d94e:	4b10      	ldr	r3, [pc, #64]	; (800d990 <USB_DevInit+0x294>)
 800d950:	4313      	orrs	r3, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d005      	beq.n	800d968 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	f043 0208 	orr.w	r2, r3, #8
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d107      	bne.n	800d97e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d976:	f043 0304 	orr.w	r3, r3, #4
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d98a:	b004      	add	sp, #16
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	803c3800 	.word	0x803c3800

0800d994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4a13      	ldr	r2, [pc, #76]	; (800d9f8 <USB_FlushTxFifo+0x64>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d901      	bls.n	800d9b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	e01b      	b.n	800d9ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	daf2      	bge.n	800d9a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	019b      	lsls	r3, r3, #6
 800d9c4:	f043 0220 	orr.w	r2, r3, #32
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	4a08      	ldr	r2, [pc, #32]	; (800d9f8 <USB_FlushTxFifo+0x64>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d901      	bls.n	800d9de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d9da:	2303      	movs	r3, #3
 800d9dc:	e006      	b.n	800d9ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	f003 0320 	and.w	r3, r3, #32
 800d9e6:	2b20      	cmp	r3, #32
 800d9e8:	d0f0      	beq.n	800d9cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	00030d40 	.word	0x00030d40

0800d9fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da04:	2300      	movs	r3, #0
 800da06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	3301      	adds	r3, #1
 800da0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4a11      	ldr	r2, [pc, #68]	; (800da58 <USB_FlushRxFifo+0x5c>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d901      	bls.n	800da1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e018      	b.n	800da4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	daf2      	bge.n	800da08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da22:	2300      	movs	r3, #0
 800da24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2210      	movs	r2, #16
 800da2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3301      	adds	r3, #1
 800da30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4a08      	ldr	r2, [pc, #32]	; (800da58 <USB_FlushRxFifo+0x5c>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d901      	bls.n	800da3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e006      	b.n	800da4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	f003 0310 	and.w	r3, r3, #16
 800da46:	2b10      	cmp	r3, #16
 800da48:	d0f0      	beq.n	800da2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	00030d40 	.word	0x00030d40

0800da5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	78fb      	ldrb	r3, [r7, #3]
 800da76:	68f9      	ldr	r1, [r7, #12]
 800da78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da7c:	4313      	orrs	r3, r2
 800da7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800da8e:	b480      	push	{r7}
 800da90:	b087      	sub	sp, #28
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f003 0306 	and.w	r3, r3, #6
 800daa6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d002      	beq.n	800dab4 <USB_GetDevSpeed+0x26>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b06      	cmp	r3, #6
 800dab2:	d102      	bne.n	800daba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dab4:	2302      	movs	r3, #2
 800dab6:	75fb      	strb	r3, [r7, #23]
 800dab8:	e001      	b.n	800dabe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800daba:	230f      	movs	r3, #15
 800dabc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	371c      	adds	r7, #28
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	785b      	ldrb	r3, [r3, #1]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d13a      	bne.n	800db5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	f003 030f 	and.w	r3, r3, #15
 800daf8:	2101      	movs	r1, #1
 800dafa:	fa01 f303 	lsl.w	r3, r1, r3
 800dafe:	b29b      	uxth	r3, r3
 800db00:	68f9      	ldr	r1, [r7, #12]
 800db02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db06:	4313      	orrs	r3, r2
 800db08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	4413      	add	r3, r2
 800db12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d155      	bne.n	800dbcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	015a      	lsls	r2, r3, #5
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	4413      	add	r3, r2
 800db28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	791b      	ldrb	r3, [r3, #4]
 800db3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	059b      	lsls	r3, r3, #22
 800db42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db44:	4313      	orrs	r3, r2
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	0151      	lsls	r1, r2, #5
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	440a      	add	r2, r1
 800db4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	e036      	b.n	800dbcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db64:	69da      	ldr	r2, [r3, #28]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f003 030f 	and.w	r3, r3, #15
 800db6e:	2101      	movs	r1, #1
 800db70:	fa01 f303 	lsl.w	r3, r1, r3
 800db74:	041b      	lsls	r3, r3, #16
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db7c:	4313      	orrs	r3, r2
 800db7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	015a      	lsls	r2, r3, #5
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4413      	add	r3, r2
 800db88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db92:	2b00      	cmp	r3, #0
 800db94:	d11a      	bne.n	800dbcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	015a      	lsls	r2, r3, #5
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	4413      	add	r3, r2
 800db9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	791b      	ldrb	r3, [r3, #4]
 800dbb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dbb2:	430b      	orrs	r3, r1
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	0151      	lsls	r1, r2, #5
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	440a      	add	r2, r1
 800dbbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3714      	adds	r7, #20
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
	...

0800dbdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	785b      	ldrb	r3, [r3, #1]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d161      	bne.n	800dcbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc0e:	d11f      	bne.n	800dc50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	015a      	lsls	r2, r3, #5
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68ba      	ldr	r2, [r7, #8]
 800dc20:	0151      	lsls	r1, r2, #5
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	440a      	add	r2, r1
 800dc26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	0151      	lsls	r1, r2, #5
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	440a      	add	r2, r1
 800dc46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f003 030f 	and.w	r3, r3, #15
 800dc60:	2101      	movs	r1, #1
 800dc62:	fa01 f303 	lsl.w	r3, r1, r3
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	43db      	mvns	r3, r3
 800dc6a:	68f9      	ldr	r1, [r7, #12]
 800dc6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc70:	4013      	ands	r3, r2
 800dc72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7a:	69da      	ldr	r2, [r3, #28]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f003 030f 	and.w	r3, r3, #15
 800dc84:	2101      	movs	r1, #1
 800dc86:	fa01 f303 	lsl.w	r3, r1, r3
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	43db      	mvns	r3, r3
 800dc8e:	68f9      	ldr	r1, [r7, #12]
 800dc90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc94:	4013      	ands	r3, r2
 800dc96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	015a      	lsls	r2, r3, #5
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	0159      	lsls	r1, r3, #5
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	440b      	add	r3, r1
 800dcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4b35      	ldr	r3, [pc, #212]	; (800dd8c <USB_DeactivateEndpoint+0x1b0>)
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	600b      	str	r3, [r1, #0]
 800dcba:	e060      	b.n	800dd7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	015a      	lsls	r2, r3, #5
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcd2:	d11f      	bne.n	800dd14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	0151      	lsls	r1, r2, #5
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	440a      	add	r2, r1
 800dcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dcf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	015a      	lsls	r2, r3, #5
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	0151      	lsls	r1, r2, #5
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	440a      	add	r2, r1
 800dd0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	f003 030f 	and.w	r3, r3, #15
 800dd24:	2101      	movs	r1, #1
 800dd26:	fa01 f303 	lsl.w	r3, r1, r3
 800dd2a:	041b      	lsls	r3, r3, #16
 800dd2c:	43db      	mvns	r3, r3
 800dd2e:	68f9      	ldr	r1, [r7, #12]
 800dd30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd34:	4013      	ands	r3, r2
 800dd36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd3e:	69da      	ldr	r2, [r3, #28]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	f003 030f 	and.w	r3, r3, #15
 800dd48:	2101      	movs	r1, #1
 800dd4a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd4e:	041b      	lsls	r3, r3, #16
 800dd50:	43db      	mvns	r3, r3
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd58:	4013      	ands	r3, r2
 800dd5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	015a      	lsls	r2, r3, #5
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	4413      	add	r3, r2
 800dd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	0159      	lsls	r1, r3, #5
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	440b      	add	r3, r1
 800dd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd76:	4619      	mov	r1, r3
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <USB_DeactivateEndpoint+0x1b4>)
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	ec337800 	.word	0xec337800
 800dd90:	eff37800 	.word	0xeff37800

0800dd94 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	785b      	ldrb	r3, [r3, #1]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	f040 810a 	bne.w	800dfc6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	699b      	ldr	r3, [r3, #24]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d132      	bne.n	800de20 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	0151      	lsls	r1, r2, #5
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	440a      	add	r2, r1
 800ddd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ddd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	015a      	lsls	r2, r3, #5
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	4413      	add	r3, r2
 800dde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	0151      	lsls	r1, r2, #5
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	440a      	add	r2, r1
 800ddf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	0151      	lsls	r1, r2, #5
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	440a      	add	r2, r1
 800de14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de18:	0cdb      	lsrs	r3, r3, #19
 800de1a:	04db      	lsls	r3, r3, #19
 800de1c:	6113      	str	r3, [r2, #16]
 800de1e:	e074      	b.n	800df0a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	4413      	add	r3, r2
 800de28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2c:	691b      	ldr	r3, [r3, #16]
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	0151      	lsls	r1, r2, #5
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	440a      	add	r2, r1
 800de36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3a:	0cdb      	lsrs	r3, r3, #19
 800de3c:	04db      	lsls	r3, r3, #19
 800de3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	4413      	add	r3, r2
 800de48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	0151      	lsls	r1, r2, #5
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	440a      	add	r2, r1
 800de56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	015a      	lsls	r2, r3, #5
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	4413      	add	r3, r2
 800de6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	6999      	ldr	r1, [r3, #24]
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	440b      	add	r3, r1
 800de7c:	1e59      	subs	r1, r3, #1
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	fbb1 f3f3 	udiv	r3, r1, r3
 800de86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800de88:	4b9e      	ldr	r3, [pc, #632]	; (800e104 <USB_EPStartXfer+0x370>)
 800de8a:	400b      	ands	r3, r1
 800de8c:	6939      	ldr	r1, [r7, #16]
 800de8e:	0148      	lsls	r0, r1, #5
 800de90:	6979      	ldr	r1, [r7, #20]
 800de92:	4401      	add	r1, r0
 800de94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800de98:	4313      	orrs	r3, r2
 800de9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	015a      	lsls	r2, r3, #5
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	4413      	add	r3, r2
 800dea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dea8:	691a      	ldr	r2, [r3, #16]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	699b      	ldr	r3, [r3, #24]
 800deae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800deb2:	6939      	ldr	r1, [r7, #16]
 800deb4:	0148      	lsls	r0, r1, #5
 800deb6:	6979      	ldr	r1, [r7, #20]
 800deb8:	4401      	add	r1, r0
 800deba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800debe:	4313      	orrs	r3, r2
 800dec0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	791b      	ldrb	r3, [r3, #4]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d11f      	bne.n	800df0a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	015a      	lsls	r2, r3, #5
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	4413      	add	r3, r2
 800ded2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	0151      	lsls	r1, r2, #5
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	440a      	add	r2, r1
 800dee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dee4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dee8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	015a      	lsls	r2, r3, #5
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	4413      	add	r3, r2
 800def2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	0151      	lsls	r1, r2, #5
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	440a      	add	r2, r1
 800df00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df08:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	4413      	add	r3, r2
 800df12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	0151      	lsls	r1, r2, #5
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	440a      	add	r2, r1
 800df20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df28:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	791b      	ldrb	r3, [r3, #4]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d015      	beq.n	800df5e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 8106 	beq.w	800e148 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 030f 	and.w	r3, r3, #15
 800df4c:	2101      	movs	r1, #1
 800df4e:	fa01 f303 	lsl.w	r3, r1, r3
 800df52:	6979      	ldr	r1, [r7, #20]
 800df54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df58:	4313      	orrs	r3, r2
 800df5a:	634b      	str	r3, [r1, #52]	; 0x34
 800df5c:	e0f4      	b.n	800e148 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d110      	bne.n	800df90 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	0151      	lsls	r1, r2, #5
 800df80:	697a      	ldr	r2, [r7, #20]
 800df82:	440a      	add	r2, r1
 800df84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	e00f      	b.n	800dfb0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	015a      	lsls	r2, r3, #5
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	4413      	add	r3, r2
 800df98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	0151      	lsls	r1, r2, #5
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	440a      	add	r2, r1
 800dfa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	6919      	ldr	r1, [r3, #16]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	781a      	ldrb	r2, [r3, #0]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fa94 	bl	800e4ec <USB_WritePacket>
 800dfc4:	e0c0      	b.n	800e148 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	0151      	lsls	r1, r2, #5
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	440a      	add	r2, r1
 800dfdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfe0:	0cdb      	lsrs	r3, r3, #19
 800dfe2:	04db      	lsls	r3, r3, #19
 800dfe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	0151      	lsls	r1, r2, #5
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	440a      	add	r2, r1
 800dffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d123      	bne.n	800e05a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	015a      	lsls	r2, r3, #5
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	4413      	add	r3, r2
 800e01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e01e:	691a      	ldr	r2, [r3, #16]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e028:	6939      	ldr	r1, [r7, #16]
 800e02a:	0148      	lsls	r0, r1, #5
 800e02c:	6979      	ldr	r1, [r7, #20]
 800e02e:	4401      	add	r1, r0
 800e030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e034:	4313      	orrs	r3, r2
 800e036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	0151      	lsls	r1, r2, #5
 800e04a:	697a      	ldr	r2, [r7, #20]
 800e04c:	440a      	add	r2, r1
 800e04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e056:	6113      	str	r3, [r2, #16]
 800e058:	e037      	b.n	800e0ca <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	699a      	ldr	r2, [r3, #24]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	4413      	add	r3, r2
 800e064:	1e5a      	subs	r2, r3, #1
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	89fa      	ldrh	r2, [r7, #14]
 800e076:	fb03 f202 	mul.w	r2, r3, r2
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	015a      	lsls	r2, r3, #5
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	4413      	add	r3, r2
 800e086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e08a:	691a      	ldr	r2, [r3, #16]
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	04d9      	lsls	r1, r3, #19
 800e090:	4b1c      	ldr	r3, [pc, #112]	; (800e104 <USB_EPStartXfer+0x370>)
 800e092:	400b      	ands	r3, r1
 800e094:	6939      	ldr	r1, [r7, #16]
 800e096:	0148      	lsls	r0, r1, #5
 800e098:	6979      	ldr	r1, [r7, #20]
 800e09a:	4401      	add	r1, r0
 800e09c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	015a      	lsls	r2, r3, #5
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b0:	691a      	ldr	r2, [r3, #16]
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0ba:	6939      	ldr	r1, [r7, #16]
 800e0bc:	0148      	lsls	r0, r1, #5
 800e0be:	6979      	ldr	r1, [r7, #20]
 800e0c0:	4401      	add	r1, r0
 800e0c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	791b      	ldrb	r3, [r3, #4]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d12a      	bne.n	800e128 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d112      	bne.n	800e108 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	0151      	lsls	r1, r2, #5
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	440a      	add	r2, r1
 800e0f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	e011      	b.n	800e128 <USB_EPStartXfer+0x394>
 800e104:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	0151      	lsls	r1, r2, #5
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	440a      	add	r2, r1
 800e11e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	015a      	lsls	r2, r3, #5
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	4413      	add	r3, r2
 800e130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	0151      	lsls	r1, r2, #5
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	440a      	add	r2, r1
 800e13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3718      	adds	r7, #24
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop

0800e154 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	785b      	ldrb	r3, [r3, #1]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	f040 80ab 	bne.w	800e2c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	699b      	ldr	r3, [r3, #24]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d132      	bne.n	800e1e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	015a      	lsls	r2, r3, #5
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	4413      	add	r3, r2
 800e182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	0151      	lsls	r1, r2, #5
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	440a      	add	r2, r1
 800e190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e19c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	015a      	lsls	r2, r3, #5
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	0151      	lsls	r1, r2, #5
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	440a      	add	r2, r1
 800e1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	015a      	lsls	r2, r3, #5
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	0151      	lsls	r1, r2, #5
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	440a      	add	r2, r1
 800e1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d8:	0cdb      	lsrs	r3, r3, #19
 800e1da:	04db      	lsls	r3, r3, #19
 800e1dc:	6113      	str	r3, [r2, #16]
 800e1de:	e04e      	b.n	800e27e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	0151      	lsls	r1, r2, #5
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	440a      	add	r2, r1
 800e1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1fa:	0cdb      	lsrs	r3, r3, #19
 800e1fc:	04db      	lsls	r3, r3, #19
 800e1fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	015a      	lsls	r2, r3, #5
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4413      	add	r3, r2
 800e208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	0151      	lsls	r1, r2, #5
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	440a      	add	r2, r1
 800e216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e21a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e21e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	699a      	ldr	r2, [r3, #24]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d903      	bls.n	800e238 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	68da      	ldr	r2, [r3, #12]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	0151      	lsls	r1, r2, #5
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	440a      	add	r2, r1
 800e24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	015a      	lsls	r2, r3, #5
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e264:	691a      	ldr	r2, [r3, #16]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	699b      	ldr	r3, [r3, #24]
 800e26a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e26e:	68b9      	ldr	r1, [r7, #8]
 800e270:	0148      	lsls	r0, r1, #5
 800e272:	68f9      	ldr	r1, [r7, #12]
 800e274:	4401      	add	r1, r0
 800e276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e27a:	4313      	orrs	r3, r2
 800e27c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	015a      	lsls	r2, r3, #5
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4413      	add	r3, r2
 800e286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	0151      	lsls	r1, r2, #5
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	440a      	add	r2, r1
 800e294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e29c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	699b      	ldr	r3, [r3, #24]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d071      	beq.n	800e38a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	f003 030f 	and.w	r3, r3, #15
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e2bc:	68f9      	ldr	r1, [r7, #12]
 800e2be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	634b      	str	r3, [r1, #52]	; 0x34
 800e2c6:	e060      	b.n	800e38a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	015a      	lsls	r2, r3, #5
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	0151      	lsls	r1, r2, #5
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	440a      	add	r2, r1
 800e2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2e2:	0cdb      	lsrs	r3, r3, #19
 800e2e4:	04db      	lsls	r3, r3, #19
 800e2e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	015a      	lsls	r2, r3, #5
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	0151      	lsls	r1, r2, #5
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	440a      	add	r2, r1
 800e2fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e30a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d003      	beq.n	800e31c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	68da      	ldr	r2, [r3, #12]
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	68da      	ldr	r2, [r3, #12]
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	0151      	lsls	r1, r2, #5
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	440a      	add	r2, r1
 800e33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e33e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	015a      	lsls	r2, r3, #5
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	4413      	add	r3, r2
 800e34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e350:	691a      	ldr	r2, [r3, #16]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	69db      	ldr	r3, [r3, #28]
 800e356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e35a:	68b9      	ldr	r1, [r7, #8]
 800e35c:	0148      	lsls	r0, r1, #5
 800e35e:	68f9      	ldr	r1, [r7, #12]
 800e360:	4401      	add	r1, r0
 800e362:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e366:	4313      	orrs	r3, r2
 800e368:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	015a      	lsls	r2, r3, #5
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	0151      	lsls	r1, r2, #5
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	440a      	add	r2, r1
 800e380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e398:	b480      	push	{r7}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	785b      	ldrb	r3, [r3, #1]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d14a      	bne.n	800e44c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	015a      	lsls	r2, r3, #5
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	4413      	add	r3, r2
 800e3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3ce:	f040 8086 	bne.w	800e4de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	7812      	ldrb	r2, [r2, #0]
 800e3e6:	0151      	lsls	r1, r2, #5
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	440a      	add	r2, r1
 800e3ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e3f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	015a      	lsls	r2, r3, #5
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	7812      	ldrb	r2, [r2, #0]
 800e40a:	0151      	lsls	r1, r2, #5
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	440a      	add	r2, r1
 800e410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e418:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3301      	adds	r3, #1
 800e41e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f242 7210 	movw	r2, #10000	; 0x2710
 800e426:	4293      	cmp	r3, r2
 800e428:	d902      	bls.n	800e430 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	75fb      	strb	r3, [r7, #23]
          break;
 800e42e:	e056      	b.n	800e4de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	015a      	lsls	r2, r3, #5
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	4413      	add	r3, r2
 800e43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e448:	d0e7      	beq.n	800e41a <USB_EPStopXfer+0x82>
 800e44a:	e048      	b.n	800e4de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	015a      	lsls	r2, r3, #5
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	4413      	add	r3, r2
 800e456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e464:	d13b      	bne.n	800e4de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	683a      	ldr	r2, [r7, #0]
 800e478:	7812      	ldrb	r2, [r2, #0]
 800e47a:	0151      	lsls	r1, r2, #5
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	440a      	add	r2, r1
 800e480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e488:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	7812      	ldrb	r2, [r2, #0]
 800e49e:	0151      	lsls	r1, r2, #5
 800e4a0:	693a      	ldr	r2, [r7, #16]
 800e4a2:	440a      	add	r2, r1
 800e4a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d902      	bls.n	800e4c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	75fb      	strb	r3, [r7, #23]
          break;
 800e4c2:	e00c      	b.n	800e4de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4dc:	d0e7      	beq.n	800e4ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b089      	sub	sp, #36	; 0x24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	71fb      	strb	r3, [r7, #7]
 800e4fe:	4613      	mov	r3, r2
 800e500:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e50a:	88bb      	ldrh	r3, [r7, #4]
 800e50c:	3303      	adds	r3, #3
 800e50e:	089b      	lsrs	r3, r3, #2
 800e510:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e512:	2300      	movs	r3, #0
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	e018      	b.n	800e54a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e518:	79fb      	ldrb	r3, [r7, #7]
 800e51a:	031a      	lsls	r2, r3, #12
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e524:	461a      	mov	r2, r3
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	3301      	adds	r3, #1
 800e530:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	3301      	adds	r3, #1
 800e536:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	3301      	adds	r3, #1
 800e53c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	3301      	adds	r3, #1
 800e542:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	3301      	adds	r3, #1
 800e548:	61bb      	str	r3, [r7, #24]
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d3e2      	bcc.n	800e518 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3724      	adds	r7, #36	; 0x24
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e560:	b480      	push	{r7}
 800e562:	b08b      	sub	sp, #44	; 0x2c
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	4613      	mov	r3, r2
 800e56c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e576:	88fb      	ldrh	r3, [r7, #6]
 800e578:	089b      	lsrs	r3, r3, #2
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e57e:	88fb      	ldrh	r3, [r7, #6]
 800e580:	f003 0303 	and.w	r3, r3, #3
 800e584:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e586:	2300      	movs	r3, #0
 800e588:	623b      	str	r3, [r7, #32]
 800e58a:	e014      	b.n	800e5b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	601a      	str	r2, [r3, #0]
    pDest++;
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	3301      	adds	r3, #1
 800e59c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e5b0:	6a3b      	ldr	r3, [r7, #32]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	623b      	str	r3, [r7, #32]
 800e5b6:	6a3a      	ldr	r2, [r7, #32]
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d3e6      	bcc.n	800e58c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e5be:	8bfb      	ldrh	r3, [r7, #30]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01e      	beq.n	800e602 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f107 0310 	add.w	r3, r7, #16
 800e5d4:	6812      	ldr	r2, [r2, #0]
 800e5d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	701a      	strb	r2, [r3, #0]
      i++;
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	623b      	str	r3, [r7, #32]
      pDest++;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e5f6:	8bfb      	ldrh	r3, [r7, #30]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e5fc:	8bfb      	ldrh	r3, [r7, #30]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1ea      	bne.n	800e5d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e604:	4618      	mov	r0, r3
 800e606:	372c      	adds	r7, #44	; 0x2c
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	785b      	ldrb	r3, [r3, #1]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d12c      	bne.n	800e686 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	db12      	blt.n	800e664 <USB_EPSetStall+0x54>
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00f      	beq.n	800e664 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	0151      	lsls	r1, r2, #5
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	440a      	add	r2, r1
 800e65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e65e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e662:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	0151      	lsls	r1, r2, #5
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	440a      	add	r2, r1
 800e67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e67e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	e02b      	b.n	800e6de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	015a      	lsls	r2, r3, #5
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	4413      	add	r3, r2
 800e68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	db12      	blt.n	800e6be <USB_EPSetStall+0xae>
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00f      	beq.n	800e6be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	015a      	lsls	r2, r3, #5
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	0151      	lsls	r1, r2, #5
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	440a      	add	r2, r1
 800e6b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e6bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	015a      	lsls	r2, r3, #5
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	0151      	lsls	r1, r2, #5
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	440a      	add	r2, r1
 800e6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e6dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3714      	adds	r7, #20
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	785b      	ldrb	r3, [r3, #1]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d128      	bne.n	800e75a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	015a      	lsls	r2, r3, #5
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4413      	add	r3, r2
 800e710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	0151      	lsls	r1, r2, #5
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	440a      	add	r2, r1
 800e71e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	791b      	ldrb	r3, [r3, #4]
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	d003      	beq.n	800e738 <USB_EPClearStall+0x4c>
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	791b      	ldrb	r3, [r3, #4]
 800e734:	2b02      	cmp	r3, #2
 800e736:	d138      	bne.n	800e7aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	015a      	lsls	r2, r3, #5
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	4413      	add	r3, r2
 800e740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	0151      	lsls	r1, r2, #5
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	440a      	add	r2, r1
 800e74e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	e027      	b.n	800e7aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	0151      	lsls	r1, r2, #5
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	440a      	add	r2, r1
 800e770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	791b      	ldrb	r3, [r3, #4]
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d003      	beq.n	800e78a <USB_EPClearStall+0x9e>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	791b      	ldrb	r3, [r3, #4]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d10f      	bne.n	800e7aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	015a      	lsls	r2, r3, #5
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	4413      	add	r3, r2
 800e792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e7da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e7ec:	68f9      	ldr	r1, [r7, #12]
 800e7ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3714      	adds	r7, #20
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e832:	f023 0302 	bic.w	r3, r3, #2
 800e836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3714      	adds	r7, #20
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e846:	b480      	push	{r7}
 800e848:	b085      	sub	sp, #20
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e860:	f023 0303 	bic.w	r3, r3, #3
 800e864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	695b      	ldr	r3, [r3, #20]
 800e894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	4013      	ands	r3, r2
 800e89e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b085      	sub	sp, #20
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	4013      	ands	r3, r2
 800e8d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	0c1b      	lsrs	r3, r3, #16
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3714      	adds	r7, #20
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr

0800e8e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8e2:	b480      	push	{r7}
 800e8e4:	b085      	sub	sp, #20
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	4013      	ands	r3, r2
 800e904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	b29b      	uxth	r3, r3
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3714      	adds	r7, #20
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e916:	b480      	push	{r7}
 800e918:	b085      	sub	sp, #20
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	460b      	mov	r3, r1
 800e920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e926:	78fb      	ldrb	r3, [r7, #3]
 800e928:	015a      	lsls	r2, r3, #5
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	4413      	add	r3, r2
 800e92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	4013      	ands	r3, r2
 800e942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e944:	68bb      	ldr	r3, [r7, #8]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e952:	b480      	push	{r7}
 800e954:	b087      	sub	sp, #28
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	460b      	mov	r3, r1
 800e95c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e974:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e976:	78fb      	ldrb	r3, [r7, #3]
 800e978:	f003 030f 	and.w	r3, r3, #15
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	fa22 f303 	lsr.w	r3, r2, r3
 800e982:	01db      	lsls	r3, r3, #7
 800e984:	b2db      	uxtb	r3, r3
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	4313      	orrs	r3, r2
 800e98a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	015a      	lsls	r2, r3, #5
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	4413      	add	r3, r2
 800e994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	4013      	ands	r3, r2
 800e99e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e9a0:	68bb      	ldr	r3, [r7, #8]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	371c      	adds	r7, #28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr

0800e9ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ae:	b480      	push	{r7}
 800e9b0:	b083      	sub	sp, #12
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b085      	sub	sp, #20
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e9e8:	f023 0307 	bic.w	r3, r3, #7
 800e9ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	333c      	adds	r3, #60	; 0x3c
 800ea22:	3304      	adds	r3, #4
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	4a1c      	ldr	r2, [pc, #112]	; (800ea9c <USB_EP0_OutStart+0x8c>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d90a      	bls.n	800ea46 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea40:	d101      	bne.n	800ea46 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	e024      	b.n	800ea90 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	2300      	movs	r3, #0
 800ea50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea74:	f043 0318 	orr.w	r3, r3, #24
 800ea78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ea8c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3714      	adds	r7, #20
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	4f54300a 	.word	0x4f54300a

0800eaa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3301      	adds	r3, #1
 800eab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	4a13      	ldr	r2, [pc, #76]	; (800eb04 <USB_CoreReset+0x64>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d901      	bls.n	800eabe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e01b      	b.n	800eaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	daf2      	bge.n	800eaac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	691b      	ldr	r3, [r3, #16]
 800eace:	f043 0201 	orr.w	r2, r3, #1
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3301      	adds	r3, #1
 800eada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4a09      	ldr	r2, [pc, #36]	; (800eb04 <USB_CoreReset+0x64>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d901      	bls.n	800eae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eae4:	2303      	movs	r3, #3
 800eae6:	e006      	b.n	800eaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d0f0      	beq.n	800ead6 <USB_CoreReset+0x36>

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	00030d40 	.word	0x00030d40

0800eb08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eb0c:	4904      	ldr	r1, [pc, #16]	; (800eb20 <MX_FATFS_Init+0x18>)
 800eb0e:	4805      	ldr	r0, [pc, #20]	; (800eb24 <MX_FATFS_Init+0x1c>)
 800eb10:	f004 fd46 	bl	80135a0 <FATFS_LinkDriver>
 800eb14:	4603      	mov	r3, r0
 800eb16:	461a      	mov	r2, r3
 800eb18:	4b03      	ldr	r3, [pc, #12]	; (800eb28 <MX_FATFS_Init+0x20>)
 800eb1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb1c:	bf00      	nop
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20000c8c 	.word	0x20000c8c
 800eb24:	080153e4 	.word	0x080153e4
 800eb28:	20000c88 	.word	0x20000c88

0800eb2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800eb30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eb46:	f000 f879 	bl	800ec3c <BSP_SD_IsDetected>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d001      	beq.n	800eb54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eb50:	2302      	movs	r3, #2
 800eb52:	e012      	b.n	800eb7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eb54:	480b      	ldr	r0, [pc, #44]	; (800eb84 <BSP_SD_Init+0x48>)
 800eb56:	f7fa f941 	bl	8008ddc <HAL_SD_Init>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eb64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eb68:	4806      	ldr	r0, [pc, #24]	; (800eb84 <BSP_SD_Init+0x48>)
 800eb6a:	f7fb f80d 	bl	8009b88 <HAL_SD_ConfigWideBusOperation>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eb78:	79fb      	ldrb	r3, [r7, #7]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	200004ac 	.word	0x200004ac

0800eb88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	68f9      	ldr	r1, [r7, #12]
 800eba4:	4806      	ldr	r0, [pc, #24]	; (800ebc0 <BSP_SD_ReadBlocks+0x38>)
 800eba6:	f7fa fa41 	bl	800902c <HAL_SD_ReadBlocks>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ebb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200004ac 	.word	0x200004ac

0800ebc4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b088      	sub	sp, #32
 800ebc8:	af02      	add	r7, sp, #8
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
 800ebd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	68f9      	ldr	r1, [r7, #12]
 800ebe0:	4806      	ldr	r0, [pc, #24]	; (800ebfc <BSP_SD_WriteBlocks+0x38>)
 800ebe2:	f7fa fbb5 	bl	8009350 <HAL_SD_WriteBlocks>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	200004ac 	.word	0x200004ac

0800ec00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ec04:	4805      	ldr	r0, [pc, #20]	; (800ec1c <BSP_SD_GetCardState+0x1c>)
 800ec06:	f7fb f8d3 	bl	8009db0 <HAL_SD_GetCardState>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b04      	cmp	r3, #4
 800ec0e:	bf14      	ite	ne
 800ec10:	2301      	movne	r3, #1
 800ec12:	2300      	moveq	r3, #0
 800ec14:	b2db      	uxtb	r3, r3
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	200004ac 	.word	0x200004ac

0800ec20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	4803      	ldr	r0, [pc, #12]	; (800ec38 <BSP_SD_GetCardInfo+0x18>)
 800ec2c:	f7fa ff80 	bl	8009b30 <HAL_SD_GetCardInfo>
}
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	200004ac 	.word	0x200004ac

0800ec3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ec42:	2301      	movs	r3, #1
 800ec44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ec46:	f000 f80b 	bl	800ec60 <BSP_PlatformIsDetected>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ec50:	2300      	movs	r3, #0
 800ec52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	b2db      	uxtb	r3, r3
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ec66:	2301      	movs	r3, #1
 800ec68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ec6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ec6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ec72:	f7f5 fbf1 	bl	8004458 <HAL_GPIO_ReadPin>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ec80:	79fb      	ldrb	r3, [r7, #7]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
	...

0800ec8c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ec96:	4b0b      	ldr	r3, [pc, #44]	; (800ecc4 <SD_CheckStatus+0x38>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ec9c:	f7ff ffb0 	bl	800ec00 <BSP_SD_GetCardState>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d107      	bne.n	800ecb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eca6:	4b07      	ldr	r3, [pc, #28]	; (800ecc4 <SD_CheckStatus+0x38>)
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f023 0301 	bic.w	r3, r3, #1
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	4b04      	ldr	r3, [pc, #16]	; (800ecc4 <SD_CheckStatus+0x38>)
 800ecb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ecb6:	4b03      	ldr	r3, [pc, #12]	; (800ecc4 <SD_CheckStatus+0x38>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	b2db      	uxtb	r3, r3
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20000009 	.word	0x20000009

0800ecc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ecd2:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <SD_initialize+0x38>)
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ecd8:	f7ff ff30 	bl	800eb3c <BSP_SD_Init>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d107      	bne.n	800ecf2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7ff ffd1 	bl	800ec8c <SD_CheckStatus>
 800ecea:	4603      	mov	r3, r0
 800ecec:	461a      	mov	r2, r3
 800ecee:	4b04      	ldr	r3, [pc, #16]	; (800ed00 <SD_initialize+0x38>)
 800ecf0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ecf2:	4b03      	ldr	r3, [pc, #12]	; (800ed00 <SD_initialize+0x38>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	b2db      	uxtb	r3, r3
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	20000009 	.word	0x20000009

0800ed04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff ffbb 	bl	800ec8c <SD_CheckStatus>
 800ed16:	4603      	mov	r3, r0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60b9      	str	r1, [r7, #8]
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ed34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	6879      	ldr	r1, [r7, #4]
 800ed3c:	68b8      	ldr	r0, [r7, #8]
 800ed3e:	f7ff ff23 	bl	800eb88 <BSP_SD_ReadBlocks>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d107      	bne.n	800ed58 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ed48:	bf00      	nop
 800ed4a:	f7ff ff59 	bl	800ec00 <BSP_SD_GetCardState>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1fa      	bne.n	800ed4a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b086      	sub	sp, #24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ed76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	68b8      	ldr	r0, [r7, #8]
 800ed80:	f7ff ff20 	bl	800ebc4 <BSP_SD_WriteBlocks>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d107      	bne.n	800ed9a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ed8a:	bf00      	nop
 800ed8c:	f7ff ff38 	bl	800ec00 <BSP_SD_GetCardState>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1fa      	bne.n	800ed8c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3718      	adds	r7, #24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08c      	sub	sp, #48	; 0x30
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	603a      	str	r2, [r7, #0]
 800edae:	71fb      	strb	r3, [r7, #7]
 800edb0:	460b      	mov	r3, r1
 800edb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800edb4:	2301      	movs	r3, #1
 800edb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800edba:	4b25      	ldr	r3, [pc, #148]	; (800ee50 <SD_ioctl+0xac>)
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	f003 0301 	and.w	r3, r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <SD_ioctl+0x28>
 800edc8:	2303      	movs	r3, #3
 800edca:	e03c      	b.n	800ee46 <SD_ioctl+0xa2>

  switch (cmd)
 800edcc:	79bb      	ldrb	r3, [r7, #6]
 800edce:	2b03      	cmp	r3, #3
 800edd0:	d834      	bhi.n	800ee3c <SD_ioctl+0x98>
 800edd2:	a201      	add	r2, pc, #4	; (adr r2, 800edd8 <SD_ioctl+0x34>)
 800edd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd8:	0800ede9 	.word	0x0800ede9
 800eddc:	0800edf1 	.word	0x0800edf1
 800ede0:	0800ee09 	.word	0x0800ee09
 800ede4:	0800ee23 	.word	0x0800ee23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edee:	e028      	b.n	800ee42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800edf0:	f107 0308 	add.w	r3, r7, #8
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff ff13 	bl	800ec20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800edfa:	6a3a      	ldr	r2, [r7, #32]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee06:	e01c      	b.n	800ee42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee08:	f107 0308 	add.w	r3, r7, #8
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff ff07 	bl	800ec20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee20:	e00f      	b.n	800ee42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee22:	f107 0308 	add.w	r3, r7, #8
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff fefa 	bl	800ec20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	0a5a      	lsrs	r2, r3, #9
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee3a:	e002      	b.n	800ee42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ee3c:	2304      	movs	r3, #4
 800ee3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ee42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3730      	adds	r7, #48	; 0x30
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	20000009 	.word	0x20000009

0800ee54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ee60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ee64:	f005 f978 	bl	8014158 <USBD_static_malloc>
 800ee68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d105      	bne.n	800ee7c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ee78:	2302      	movs	r3, #2
 800ee7a:	e066      	b.n	800ef4a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7c1b      	ldrb	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d119      	bne.n	800eec0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee90:	2202      	movs	r2, #2
 800ee92:	2181      	movs	r1, #129	; 0x81
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f004 ff99 	bl	8013dcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eea4:	2202      	movs	r2, #2
 800eea6:	2101      	movs	r1, #1
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f004 ff8f 	bl	8013dcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2210      	movs	r2, #16
 800eeba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800eebe:	e016      	b.n	800eeee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eec0:	2340      	movs	r3, #64	; 0x40
 800eec2:	2202      	movs	r2, #2
 800eec4:	2181      	movs	r1, #129	; 0x81
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f004 ff80 	bl	8013dcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eed2:	2340      	movs	r3, #64	; 0x40
 800eed4:	2202      	movs	r2, #2
 800eed6:	2101      	movs	r1, #1
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f004 ff77 	bl	8013dcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2210      	movs	r2, #16
 800eeea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eeee:	2308      	movs	r3, #8
 800eef0:	2203      	movs	r2, #3
 800eef2:	2182      	movs	r1, #130	; 0x82
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f004 ff69 	bl	8013dcc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	7c1b      	ldrb	r3, [r3, #16]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d109      	bne.n	800ef38 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef2e:	2101      	movs	r1, #1
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f005 f8c5 	bl	80140c0 <USBD_LL_PrepareReceive>
 800ef36:	e007      	b.n	800ef48 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef3e:	2340      	movs	r3, #64	; 0x40
 800ef40:	2101      	movs	r1, #1
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f005 f8bc 	bl	80140c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b082      	sub	sp, #8
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef5e:	2181      	movs	r1, #129	; 0x81
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f004 ff71 	bl	8013e48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f004 ff6a 	bl	8013e48 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ef7c:	2182      	movs	r1, #130	; 0x82
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f004 ff62 	bl	8013e48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00e      	beq.n	800efbc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efae:	4618      	mov	r0, r3
 800efb0:	f005 f8e0 	bl	8014174 <USBD_static_free>
    pdev->pClassData = NULL;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3708      	adds	r7, #8
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800efda:	2300      	movs	r3, #0
 800efdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800efde:	2300      	movs	r3, #0
 800efe0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800efec:	2303      	movs	r3, #3
 800efee:	e0af      	b.n	800f150 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d03f      	beq.n	800f07c <USBD_CDC_Setup+0xb4>
 800effc:	2b20      	cmp	r3, #32
 800effe:	f040 809f 	bne.w	800f140 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	88db      	ldrh	r3, [r3, #6]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d02e      	beq.n	800f068 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	b25b      	sxtb	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	da16      	bge.n	800f042 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f020:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	88d2      	ldrh	r2, [r2, #6]
 800f026:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	88db      	ldrh	r3, [r3, #6]
 800f02c:	2b07      	cmp	r3, #7
 800f02e:	bf28      	it	cs
 800f030:	2307      	movcs	r3, #7
 800f032:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	89fa      	ldrh	r2, [r7, #14]
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f001 fb19 	bl	8010672 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f040:	e085      	b.n	800f14e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	785a      	ldrb	r2, [r3, #1]
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	88db      	ldrh	r3, [r3, #6]
 800f050:	b2da      	uxtb	r2, r3
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f058:	6939      	ldr	r1, [r7, #16]
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	88db      	ldrh	r3, [r3, #6]
 800f05e:	461a      	mov	r2, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 fb32 	bl	80106ca <USBD_CtlPrepareRx>
      break;
 800f066:	e072      	b.n	800f14e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	7850      	ldrb	r0, [r2, #1]
 800f074:	2200      	movs	r2, #0
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	4798      	blx	r3
      break;
 800f07a:	e068      	b.n	800f14e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	785b      	ldrb	r3, [r3, #1]
 800f080:	2b0b      	cmp	r3, #11
 800f082:	d852      	bhi.n	800f12a <USBD_CDC_Setup+0x162>
 800f084:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <USBD_CDC_Setup+0xc4>)
 800f086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08a:	bf00      	nop
 800f08c:	0800f0bd 	.word	0x0800f0bd
 800f090:	0800f139 	.word	0x0800f139
 800f094:	0800f12b 	.word	0x0800f12b
 800f098:	0800f12b 	.word	0x0800f12b
 800f09c:	0800f12b 	.word	0x0800f12b
 800f0a0:	0800f12b 	.word	0x0800f12b
 800f0a4:	0800f12b 	.word	0x0800f12b
 800f0a8:	0800f12b 	.word	0x0800f12b
 800f0ac:	0800f12b 	.word	0x0800f12b
 800f0b0:	0800f12b 	.word	0x0800f12b
 800f0b4:	0800f0e7 	.word	0x0800f0e7
 800f0b8:	0800f111 	.word	0x0800f111
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d107      	bne.n	800f0d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f0c8:	f107 030a 	add.w	r3, r7, #10
 800f0cc:	2202      	movs	r2, #2
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f001 face 	bl	8010672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0d6:	e032      	b.n	800f13e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f0d8:	6839      	ldr	r1, [r7, #0]
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f001 fa58 	bl	8010590 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	75fb      	strb	r3, [r7, #23]
          break;
 800f0e4:	e02b      	b.n	800f13e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d107      	bne.n	800f102 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f0f2:	f107 030d 	add.w	r3, r7, #13
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 fab9 	bl	8010672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f100:	e01d      	b.n	800f13e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f001 fa43 	bl	8010590 <USBD_CtlError>
            ret = USBD_FAIL;
 800f10a:	2303      	movs	r3, #3
 800f10c:	75fb      	strb	r3, [r7, #23]
          break;
 800f10e:	e016      	b.n	800f13e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f116:	b2db      	uxtb	r3, r3
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d00f      	beq.n	800f13c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f001 fa36 	bl	8010590 <USBD_CtlError>
            ret = USBD_FAIL;
 800f124:	2303      	movs	r3, #3
 800f126:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f128:	e008      	b.n	800f13c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f001 fa2f 	bl	8010590 <USBD_CtlError>
          ret = USBD_FAIL;
 800f132:	2303      	movs	r3, #3
 800f134:	75fb      	strb	r3, [r7, #23]
          break;
 800f136:	e002      	b.n	800f13e <USBD_CDC_Setup+0x176>
          break;
 800f138:	bf00      	nop
 800f13a:	e008      	b.n	800f14e <USBD_CDC_Setup+0x186>
          break;
 800f13c:	bf00      	nop
      }
      break;
 800f13e:	e006      	b.n	800f14e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f001 fa24 	bl	8010590 <USBD_CtlError>
      ret = USBD_FAIL;
 800f148:	2303      	movs	r3, #3
 800f14a:	75fb      	strb	r3, [r7, #23]
      break;
 800f14c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f16a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f176:	2303      	movs	r3, #3
 800f178:	e04f      	b.n	800f21a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f180:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f182:	78fa      	ldrb	r2, [r7, #3]
 800f184:	6879      	ldr	r1, [r7, #4]
 800f186:	4613      	mov	r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	440b      	add	r3, r1
 800f190:	3318      	adds	r3, #24
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d029      	beq.n	800f1ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f198:	78fa      	ldrb	r2, [r7, #3]
 800f19a:	6879      	ldr	r1, [r7, #4]
 800f19c:	4613      	mov	r3, r2
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	440b      	add	r3, r1
 800f1a6:	3318      	adds	r3, #24
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	78f9      	ldrb	r1, [r7, #3]
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	440b      	add	r3, r1
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4403      	add	r3, r0
 800f1b8:	3348      	adds	r3, #72	; 0x48
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f1c0:	fb01 f303 	mul.w	r3, r1, r3
 800f1c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d110      	bne.n	800f1ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f1ca:	78fa      	ldrb	r2, [r7, #3]
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4413      	add	r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	440b      	add	r3, r1
 800f1d8:	3318      	adds	r3, #24
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f1de:	78f9      	ldrb	r1, [r7, #3]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f004 ff33 	bl	8014050 <USBD_LL_Transmit>
 800f1ea:	e015      	b.n	800f218 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f214:	78fa      	ldrb	r2, [r7, #3]
 800f216:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	460b      	mov	r3, r1
 800f22c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f234:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f240:	2303      	movs	r3, #3
 800f242:	e015      	b.n	800f270 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f004 ff71 	bl	8014130 <USBD_LL_GetRxDataSize>
 800f24e:	4602      	mov	r2, r0
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f26a:	4611      	mov	r1, r2
 800f26c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f286:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d101      	bne.n	800f292 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f28e:	2303      	movs	r3, #3
 800f290:	e01b      	b.n	800f2ca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d015      	beq.n	800f2c8 <USBD_CDC_EP0_RxReady+0x50>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f2a2:	2bff      	cmp	r3, #255	; 0xff
 800f2a4:	d010      	beq.n	800f2c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f2b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f2bc:	b292      	uxth	r2, r2
 800f2be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	22ff      	movs	r2, #255	; 0xff
 800f2c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2243      	movs	r2, #67	; 0x43
 800f2e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f2e2:	4b03      	ldr	r3, [pc, #12]	; (800f2f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr
 800f2f0:	20000094 	.word	0x20000094

0800f2f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2243      	movs	r2, #67	; 0x43
 800f300:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f302:	4b03      	ldr	r3, [pc, #12]	; (800f310 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f304:	4618      	mov	r0, r3
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	20000050 	.word	0x20000050

0800f314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2243      	movs	r2, #67	; 0x43
 800f320:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f322:	4b03      	ldr	r3, [pc, #12]	; (800f330 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f324:	4618      	mov	r0, r3
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	200000d8 	.word	0x200000d8

0800f334 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	220a      	movs	r2, #10
 800f340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f342:	4b03      	ldr	r3, [pc, #12]	; (800f350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f344:	4618      	mov	r0, r3
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	2000000c 	.word	0x2000000c

0800f354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f364:	2303      	movs	r3, #3
 800f366:	e004      	b.n	800f372 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	370c      	adds	r7, #12
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f37e:	b480      	push	{r7}
 800f380:	b087      	sub	sp, #28
 800f382:	af00      	add	r7, sp, #0
 800f384:	60f8      	str	r0, [r7, #12]
 800f386:	60b9      	str	r1, [r7, #8]
 800f388:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f390:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f398:	2303      	movs	r3, #3
 800f39a:	e008      	b.n	800f3ae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	371c      	adds	r7, #28
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	b085      	sub	sp, #20
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	e004      	b.n	800f3e0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f406:	2b00      	cmp	r3, #0
 800f408:	d101      	bne.n	800f40e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e01a      	b.n	800f444 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f414:	2b00      	cmp	r3, #0
 800f416:	d114      	bne.n	800f442 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f436:	2181      	movs	r1, #129	; 0x81
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f004 fe09 	bl	8014050 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f43e:	2300      	movs	r3, #0
 800f440:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f442:	7bfb      	ldrb	r3, [r7, #15]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f466:	2303      	movs	r3, #3
 800f468:	e016      	b.n	800f498 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	7c1b      	ldrb	r3, [r3, #16]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f47c:	2101      	movs	r1, #1
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f004 fe1e 	bl	80140c0 <USBD_LL_PrepareReceive>
 800f484:	e007      	b.n	800f496 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f48c:	2340      	movs	r3, #64	; 0x40
 800f48e:	2101      	movs	r1, #1
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f004 fe15 	bl	80140c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	e01f      	b.n	800f4f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	79fa      	ldrb	r2, [r7, #7]
 800f4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f004 fbf1 	bl	8013cd4 <USBD_LL_Init>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f514:	2303      	movs	r3, #3
 800f516:	e016      	b.n	800f546 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00b      	beq.n	800f544 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f534:	f107 020e 	add.w	r2, r7, #14
 800f538:	4610      	mov	r0, r2
 800f53a:	4798      	blx	r3
 800f53c:	4602      	mov	r2, r0
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f004 fc06 	bl	8013d68 <USBD_LL_Start>
 800f55c:	4603      	mov	r3, r0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f566:	b480      	push	{r7}
 800f568:	b083      	sub	sp, #12
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f588:	2303      	movs	r3, #3
 800f58a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f592:	2b00      	cmp	r3, #0
 800f594:	d009      	beq.n	800f5aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	78fa      	ldrb	r2, [r7, #3]
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	4798      	blx	r3
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d007      	beq.n	800f5da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	78fa      	ldrb	r2, [r7, #3]
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	4798      	blx	r3
  }

  return USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 ff90 	bl	801051c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f60a:	461a      	mov	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f618:	f003 031f 	and.w	r3, r3, #31
 800f61c:	2b02      	cmp	r3, #2
 800f61e:	d01a      	beq.n	800f656 <USBD_LL_SetupStage+0x72>
 800f620:	2b02      	cmp	r3, #2
 800f622:	d822      	bhi.n	800f66a <USBD_LL_SetupStage+0x86>
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <USBD_LL_SetupStage+0x4a>
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d00a      	beq.n	800f642 <USBD_LL_SetupStage+0x5e>
 800f62c:	e01d      	b.n	800f66a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f634:	4619      	mov	r1, r3
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fa62 	bl	800fb00 <USBD_StdDevReq>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
      break;
 800f640:	e020      	b.n	800f684 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f648:	4619      	mov	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fac6 	bl	800fbdc <USBD_StdItfReq>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]
      break;
 800f654:	e016      	b.n	800f684 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fb05 	bl	800fc6e <USBD_StdEPReq>
 800f664:	4603      	mov	r3, r0
 800f666:	73fb      	strb	r3, [r7, #15]
      break;
 800f668:	e00c      	b.n	800f684 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f670:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f674:	b2db      	uxtb	r3, r3
 800f676:	4619      	mov	r1, r3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f004 fc1b 	bl	8013eb4 <USBD_LL_StallEP>
 800f67e:	4603      	mov	r3, r0
 800f680:	73fb      	strb	r3, [r7, #15]
      break;
 800f682:	bf00      	nop
  }

  return ret;
 800f684:	7bfb      	ldrb	r3, [r7, #15]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b086      	sub	sp, #24
 800f692:	af00      	add	r7, sp, #0
 800f694:	60f8      	str	r0, [r7, #12]
 800f696:	460b      	mov	r3, r1
 800f698:	607a      	str	r2, [r7, #4]
 800f69a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d138      	bne.n	800f714 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6b0:	2b03      	cmp	r3, #3
 800f6b2:	d14a      	bne.n	800f74a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	689a      	ldr	r2, [r3, #8]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d913      	bls.n	800f6e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	689a      	ldr	r2, [r3, #8]
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	1ad2      	subs	r2, r2, r3
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	68da      	ldr	r2, [r3, #12]
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	bf28      	it	cs
 800f6da:	4613      	movcs	r3, r2
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f001 f80f 	bl	8010704 <USBD_CtlContinueRx>
 800f6e6:	e030      	b.n	800f74a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d10b      	bne.n	800f70c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d005      	beq.n	800f70c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f706:	691b      	ldr	r3, [r3, #16]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f001 f80a 	bl	8010726 <USBD_CtlSendStatus>
 800f712:	e01a      	b.n	800f74a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d114      	bne.n	800f74a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00e      	beq.n	800f74a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f732:	699b      	ldr	r3, [r3, #24]
 800f734:	7afa      	ldrb	r2, [r7, #11]
 800f736:	4611      	mov	r1, r2
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	4798      	blx	r3
 800f73c:	4603      	mov	r3, r0
 800f73e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d001      	beq.n	800f74a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f746:	7dfb      	ldrb	r3, [r7, #23]
 800f748:	e000      	b.n	800f74c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b086      	sub	sp, #24
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	460b      	mov	r3, r1
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f762:	7afb      	ldrb	r3, [r7, #11]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d16b      	bne.n	800f840 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	3314      	adds	r3, #20
 800f76c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f774:	2b02      	cmp	r3, #2
 800f776:	d156      	bne.n	800f826 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	689a      	ldr	r2, [r3, #8]
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	429a      	cmp	r2, r3
 800f782:	d914      	bls.n	800f7ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	689a      	ldr	r2, [r3, #8]
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	1ad2      	subs	r2, r2, r3
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	461a      	mov	r2, r3
 800f798:	6879      	ldr	r1, [r7, #4]
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f000 ff84 	bl	80106a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f004 fc8a 	bl	80140c0 <USBD_LL_PrepareReceive>
 800f7ac:	e03b      	b.n	800f826 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	68da      	ldr	r2, [r3, #12]
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d11c      	bne.n	800f7f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d316      	bcc.n	800f7f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	685a      	ldr	r2, [r3, #4]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d20f      	bcs.n	800f7f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f000 ff65 	bl	80106a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f004 fc67 	bl	80140c0 <USBD_LL_PrepareReceive>
 800f7f2:	e018      	b.n	800f826 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	d10b      	bne.n	800f818 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d005      	beq.n	800f818 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f818:	2180      	movs	r1, #128	; 0x80
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f004 fb4a 	bl	8013eb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 ff93 	bl	801074c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d122      	bne.n	800f876 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7ff fe98 	bl	800f566 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f83e:	e01a      	b.n	800f876 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d114      	bne.n	800f876 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00e      	beq.n	800f876 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f85e:	695b      	ldr	r3, [r3, #20]
 800f860:	7afa      	ldrb	r2, [r7, #11]
 800f862:	4611      	mov	r1, r2
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	4798      	blx	r3
 800f868:	4603      	mov	r3, r0
 800f86a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f86c:	7dfb      	ldrb	r3, [r7, #23]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	e000      	b.n	800f878 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3718      	adds	r7, #24
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d101      	bne.n	800f8b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f8b0:	2303      	movs	r3, #3
 800f8b2:	e02f      	b.n	800f914 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00f      	beq.n	800f8de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d009      	beq.n	800f8de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	6852      	ldr	r2, [r2, #4]
 800f8d6:	b2d2      	uxtb	r2, r2
 800f8d8:	4611      	mov	r1, r2
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8de:	2340      	movs	r3, #64	; 0x40
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f004 fa71 	bl	8013dcc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2240      	movs	r2, #64	; 0x40
 800f8f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8fa:	2340      	movs	r3, #64	; 0x40
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2180      	movs	r1, #128	; 0x80
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f004 fa63 	bl	8013dcc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2201      	movs	r2, #1
 800f90a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2240      	movs	r2, #64	; 0x40
 800f910:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	78fa      	ldrb	r2, [r7, #3]
 800f92c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2204      	movs	r2, #4
 800f956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d106      	bne.n	800f98a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f982:	b2da      	uxtb	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	e012      	b.n	800f9d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	2b03      	cmp	r3, #3
 800f9b8:	d10b      	bne.n	800f9d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9c0:	69db      	ldr	r3, [r3, #28]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d005      	beq.n	800f9d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9cc:	69db      	ldr	r3, [r3, #28]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d101      	bne.n	800f9f6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f9f2:	2303      	movs	r3, #3
 800f9f4:	e014      	b.n	800fa20 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b03      	cmp	r3, #3
 800fa00:	d10d      	bne.n	800fa1e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d007      	beq.n	800fa1e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	78fa      	ldrb	r2, [r7, #3]
 800fa18:	4611      	mov	r1, r2
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	460b      	mov	r3, r1
 800fa32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d101      	bne.n	800fa42 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fa3e:	2303      	movs	r3, #3
 800fa40:	e014      	b.n	800fa6c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d10d      	bne.n	800fa6a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d007      	beq.n	800fa6a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa62:	78fa      	ldrb	r2, [r7, #3]
 800fa64:	4611      	mov	r1, r2
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d009      	beq.n	800fab8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	6852      	ldr	r2, [r2, #4]
 800fab0:	b2d2      	uxtb	r2, r2
 800fab2:	4611      	mov	r1, r2
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	4798      	blx	r3
  }

  return USBD_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fac2:	b480      	push	{r7}
 800fac4:	b087      	sub	sp, #28
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	3301      	adds	r3, #1
 800fad8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fae0:	8a3b      	ldrh	r3, [r7, #16]
 800fae2:	021b      	lsls	r3, r3, #8
 800fae4:	b21a      	sxth	r2, r3
 800fae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800faea:	4313      	orrs	r3, r2
 800faec:	b21b      	sxth	r3, r3
 800faee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800faf0:	89fb      	ldrh	r3, [r7, #14]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	371c      	adds	r7, #28
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr
	...

0800fb00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb16:	2b40      	cmp	r3, #64	; 0x40
 800fb18:	d005      	beq.n	800fb26 <USBD_StdDevReq+0x26>
 800fb1a:	2b40      	cmp	r3, #64	; 0x40
 800fb1c:	d853      	bhi.n	800fbc6 <USBD_StdDevReq+0xc6>
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00b      	beq.n	800fb3a <USBD_StdDevReq+0x3a>
 800fb22:	2b20      	cmp	r3, #32
 800fb24:	d14f      	bne.n	800fbc6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	4798      	blx	r3
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]
      break;
 800fb38:	e04a      	b.n	800fbd0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	785b      	ldrb	r3, [r3, #1]
 800fb3e:	2b09      	cmp	r3, #9
 800fb40:	d83b      	bhi.n	800fbba <USBD_StdDevReq+0xba>
 800fb42:	a201      	add	r2, pc, #4	; (adr r2, 800fb48 <USBD_StdDevReq+0x48>)
 800fb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb48:	0800fb9d 	.word	0x0800fb9d
 800fb4c:	0800fbb1 	.word	0x0800fbb1
 800fb50:	0800fbbb 	.word	0x0800fbbb
 800fb54:	0800fba7 	.word	0x0800fba7
 800fb58:	0800fbbb 	.word	0x0800fbbb
 800fb5c:	0800fb7b 	.word	0x0800fb7b
 800fb60:	0800fb71 	.word	0x0800fb71
 800fb64:	0800fbbb 	.word	0x0800fbbb
 800fb68:	0800fb93 	.word	0x0800fb93
 800fb6c:	0800fb85 	.word	0x0800fb85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f9de 	bl	800ff34 <USBD_GetDescriptor>
          break;
 800fb78:	e024      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fb43 	bl	8010208 <USBD_SetAddress>
          break;
 800fb82:	e01f      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fb82 	bl	8010290 <USBD_SetConfig>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	73fb      	strb	r3, [r7, #15]
          break;
 800fb90:	e018      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fc21 	bl	80103dc <USBD_GetConfig>
          break;
 800fb9a:	e013      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fc52 	bl	8010448 <USBD_GetStatus>
          break;
 800fba4:	e00e      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fba6:	6839      	ldr	r1, [r7, #0]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fc81 	bl	80104b0 <USBD_SetFeature>
          break;
 800fbae:	e009      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc90 	bl	80104d8 <USBD_ClrFeature>
          break;
 800fbb8:	e004      	b.n	800fbc4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fce7 	bl	8010590 <USBD_CtlError>
          break;
 800fbc2:	bf00      	nop
      }
      break;
 800fbc4:	e004      	b.n	800fbd0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fbc6:	6839      	ldr	r1, [r7, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fce1 	bl	8010590 <USBD_CtlError>
      break;
 800fbce:	bf00      	nop
  }

  return ret;
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop

0800fbdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbf2:	2b40      	cmp	r3, #64	; 0x40
 800fbf4:	d005      	beq.n	800fc02 <USBD_StdItfReq+0x26>
 800fbf6:	2b40      	cmp	r3, #64	; 0x40
 800fbf8:	d82f      	bhi.n	800fc5a <USBD_StdItfReq+0x7e>
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <USBD_StdItfReq+0x26>
 800fbfe:	2b20      	cmp	r3, #32
 800fc00:	d12b      	bne.n	800fc5a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d81d      	bhi.n	800fc4c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	889b      	ldrh	r3, [r3, #4]
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d813      	bhi.n	800fc42 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc20:	689b      	ldr	r3, [r3, #8]
 800fc22:	6839      	ldr	r1, [r7, #0]
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	4798      	blx	r3
 800fc28:	4603      	mov	r3, r0
 800fc2a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	88db      	ldrh	r3, [r3, #6]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d110      	bne.n	800fc56 <USBD_StdItfReq+0x7a>
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10d      	bne.n	800fc56 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fd73 	bl	8010726 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fc40:	e009      	b.n	800fc56 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fca3 	bl	8010590 <USBD_CtlError>
          break;
 800fc4a:	e004      	b.n	800fc56 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fc4c:	6839      	ldr	r1, [r7, #0]
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 fc9e 	bl	8010590 <USBD_CtlError>
          break;
 800fc54:	e000      	b.n	800fc58 <USBD_StdItfReq+0x7c>
          break;
 800fc56:	bf00      	nop
      }
      break;
 800fc58:	e004      	b.n	800fc64 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fc5a:	6839      	ldr	r1, [r7, #0]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fc97 	bl	8010590 <USBD_CtlError>
      break;
 800fc62:	bf00      	nop
  }

  return ret;
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b084      	sub	sp, #16
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	889b      	ldrh	r3, [r3, #4]
 800fc80:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc8a:	2b40      	cmp	r3, #64	; 0x40
 800fc8c:	d007      	beq.n	800fc9e <USBD_StdEPReq+0x30>
 800fc8e:	2b40      	cmp	r3, #64	; 0x40
 800fc90:	f200 8145 	bhi.w	800ff1e <USBD_StdEPReq+0x2b0>
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00c      	beq.n	800fcb2 <USBD_StdEPReq+0x44>
 800fc98:	2b20      	cmp	r3, #32
 800fc9a:	f040 8140 	bne.w	800ff1e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	4798      	blx	r3
 800fcac:	4603      	mov	r3, r0
 800fcae:	73fb      	strb	r3, [r7, #15]
      break;
 800fcb0:	e13a      	b.n	800ff28 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	785b      	ldrb	r3, [r3, #1]
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	d007      	beq.n	800fcca <USBD_StdEPReq+0x5c>
 800fcba:	2b03      	cmp	r3, #3
 800fcbc:	f300 8129 	bgt.w	800ff12 <USBD_StdEPReq+0x2a4>
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d07f      	beq.n	800fdc4 <USBD_StdEPReq+0x156>
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d03c      	beq.n	800fd42 <USBD_StdEPReq+0xd4>
 800fcc8:	e123      	b.n	800ff12 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	d002      	beq.n	800fcdc <USBD_StdEPReq+0x6e>
 800fcd6:	2b03      	cmp	r3, #3
 800fcd8:	d016      	beq.n	800fd08 <USBD_StdEPReq+0x9a>
 800fcda:	e02c      	b.n	800fd36 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcdc:	7bbb      	ldrb	r3, [r7, #14]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00d      	beq.n	800fcfe <USBD_StdEPReq+0x90>
 800fce2:	7bbb      	ldrb	r3, [r7, #14]
 800fce4:	2b80      	cmp	r3, #128	; 0x80
 800fce6:	d00a      	beq.n	800fcfe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f004 f8e1 	bl	8013eb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcf2:	2180      	movs	r1, #128	; 0x80
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f004 f8dd 	bl	8013eb4 <USBD_LL_StallEP>
 800fcfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fcfc:	e020      	b.n	800fd40 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fc45 	bl	8010590 <USBD_CtlError>
              break;
 800fd06:	e01b      	b.n	800fd40 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	885b      	ldrh	r3, [r3, #2]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10e      	bne.n	800fd2e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fd10:	7bbb      	ldrb	r3, [r7, #14]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00b      	beq.n	800fd2e <USBD_StdEPReq+0xc0>
 800fd16:	7bbb      	ldrb	r3, [r7, #14]
 800fd18:	2b80      	cmp	r3, #128	; 0x80
 800fd1a:	d008      	beq.n	800fd2e <USBD_StdEPReq+0xc0>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	88db      	ldrh	r3, [r3, #6]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d104      	bne.n	800fd2e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd24:	7bbb      	ldrb	r3, [r7, #14]
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f004 f8c3 	bl	8013eb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fcf9 	bl	8010726 <USBD_CtlSendStatus>

              break;
 800fd34:	e004      	b.n	800fd40 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fc29 	bl	8010590 <USBD_CtlError>
              break;
 800fd3e:	bf00      	nop
          }
          break;
 800fd40:	e0ec      	b.n	800ff1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d002      	beq.n	800fd54 <USBD_StdEPReq+0xe6>
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d016      	beq.n	800fd80 <USBD_StdEPReq+0x112>
 800fd52:	e030      	b.n	800fdb6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd54:	7bbb      	ldrb	r3, [r7, #14]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00d      	beq.n	800fd76 <USBD_StdEPReq+0x108>
 800fd5a:	7bbb      	ldrb	r3, [r7, #14]
 800fd5c:	2b80      	cmp	r3, #128	; 0x80
 800fd5e:	d00a      	beq.n	800fd76 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd60:	7bbb      	ldrb	r3, [r7, #14]
 800fd62:	4619      	mov	r1, r3
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f004 f8a5 	bl	8013eb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd6a:	2180      	movs	r1, #128	; 0x80
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f004 f8a1 	bl	8013eb4 <USBD_LL_StallEP>
 800fd72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fd74:	e025      	b.n	800fdc2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fc09 	bl	8010590 <USBD_CtlError>
              break;
 800fd7e:	e020      	b.n	800fdc2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	885b      	ldrh	r3, [r3, #2]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11b      	bne.n	800fdc0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fd88:	7bbb      	ldrb	r3, [r7, #14]
 800fd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d004      	beq.n	800fd9c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd92:	7bbb      	ldrb	r3, [r7, #14]
 800fd94:	4619      	mov	r1, r3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f004 f8c2 	bl	8013f20 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fcc2 	bl	8010726 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	4798      	blx	r3
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fdb4:	e004      	b.n	800fdc0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fdb6:	6839      	ldr	r1, [r7, #0]
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 fbe9 	bl	8010590 <USBD_CtlError>
              break;
 800fdbe:	e000      	b.n	800fdc2 <USBD_StdEPReq+0x154>
              break;
 800fdc0:	bf00      	nop
          }
          break;
 800fdc2:	e0ab      	b.n	800ff1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d002      	beq.n	800fdd6 <USBD_StdEPReq+0x168>
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d032      	beq.n	800fe3a <USBD_StdEPReq+0x1cc>
 800fdd4:	e097      	b.n	800ff06 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d007      	beq.n	800fdec <USBD_StdEPReq+0x17e>
 800fddc:	7bbb      	ldrb	r3, [r7, #14]
 800fdde:	2b80      	cmp	r3, #128	; 0x80
 800fde0:	d004      	beq.n	800fdec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fde2:	6839      	ldr	r1, [r7, #0]
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fbd3 	bl	8010590 <USBD_CtlError>
                break;
 800fdea:	e091      	b.n	800ff10 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	da0b      	bge.n	800fe0c <USBD_StdEPReq+0x19e>
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
 800fdf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	3310      	adds	r3, #16
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	4413      	add	r3, r2
 800fe08:	3304      	adds	r3, #4
 800fe0a:	e00b      	b.n	800fe24 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe0c:	7bbb      	ldrb	r3, [r7, #14]
 800fe0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe12:	4613      	mov	r3, r2
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	4413      	add	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	4413      	add	r3, r2
 800fe22:	3304      	adds	r3, #4
 800fe24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	2202      	movs	r2, #2
 800fe30:	4619      	mov	r1, r3
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fc1d 	bl	8010672 <USBD_CtlSendData>
              break;
 800fe38:	e06a      	b.n	800ff10 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fe3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	da11      	bge.n	800fe66 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fe42:	7bbb      	ldrb	r3, [r7, #14]
 800fe44:	f003 020f 	and.w	r2, r3, #15
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	440b      	add	r3, r1
 800fe54:	3324      	adds	r3, #36	; 0x24
 800fe56:	881b      	ldrh	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d117      	bne.n	800fe8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 fb96 	bl	8010590 <USBD_CtlError>
                  break;
 800fe64:	e054      	b.n	800ff10 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	f003 020f 	and.w	r2, r3, #15
 800fe6c:	6879      	ldr	r1, [r7, #4]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	4413      	add	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	440b      	add	r3, r1
 800fe78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d104      	bne.n	800fe8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fe82:	6839      	ldr	r1, [r7, #0]
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fb83 	bl	8010590 <USBD_CtlError>
                  break;
 800fe8a:	e041      	b.n	800ff10 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	da0b      	bge.n	800feac <USBD_StdEPReq+0x23e>
 800fe94:	7bbb      	ldrb	r3, [r7, #14]
 800fe96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4413      	add	r3, r2
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	3310      	adds	r3, #16
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	4413      	add	r3, r2
 800fea8:	3304      	adds	r3, #4
 800feaa:	e00b      	b.n	800fec4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	4413      	add	r3, r2
 800fec2:	3304      	adds	r3, #4
 800fec4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fec6:	7bbb      	ldrb	r3, [r7, #14]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <USBD_StdEPReq+0x264>
 800fecc:	7bbb      	ldrb	r3, [r7, #14]
 800fece:	2b80      	cmp	r3, #128	; 0x80
 800fed0:	d103      	bne.n	800feda <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	e00e      	b.n	800fef8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800feda:	7bbb      	ldrb	r3, [r7, #14]
 800fedc:	4619      	mov	r1, r3
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f004 f854 	bl	8013f8c <USBD_LL_IsStallEP>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d003      	beq.n	800fef2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2201      	movs	r2, #1
 800feee:	601a      	str	r2, [r3, #0]
 800fef0:	e002      	b.n	800fef8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2200      	movs	r2, #0
 800fef6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2202      	movs	r2, #2
 800fefc:	4619      	mov	r1, r3
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fbb7 	bl	8010672 <USBD_CtlSendData>
              break;
 800ff04:	e004      	b.n	800ff10 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fb41 	bl	8010590 <USBD_CtlError>
              break;
 800ff0e:	bf00      	nop
          }
          break;
 800ff10:	e004      	b.n	800ff1c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 fb3b 	bl	8010590 <USBD_CtlError>
          break;
 800ff1a:	bf00      	nop
      }
      break;
 800ff1c:	e004      	b.n	800ff28 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fb35 	bl	8010590 <USBD_CtlError>
      break;
 800ff26:	bf00      	nop
  }

  return ret;
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
	...

0800ff34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ff46:	2300      	movs	r3, #0
 800ff48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	885b      	ldrh	r3, [r3, #2]
 800ff4e:	0a1b      	lsrs	r3, r3, #8
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	3b01      	subs	r3, #1
 800ff54:	2b06      	cmp	r3, #6
 800ff56:	f200 8128 	bhi.w	80101aa <USBD_GetDescriptor+0x276>
 800ff5a:	a201      	add	r2, pc, #4	; (adr r2, 800ff60 <USBD_GetDescriptor+0x2c>)
 800ff5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff60:	0800ff7d 	.word	0x0800ff7d
 800ff64:	0800ff95 	.word	0x0800ff95
 800ff68:	0800ffd5 	.word	0x0800ffd5
 800ff6c:	080101ab 	.word	0x080101ab
 800ff70:	080101ab 	.word	0x080101ab
 800ff74:	0801014b 	.word	0x0801014b
 800ff78:	08010177 	.word	0x08010177
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	7c12      	ldrb	r2, [r2, #16]
 800ff88:	f107 0108 	add.w	r1, r7, #8
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	4798      	blx	r3
 800ff90:	60f8      	str	r0, [r7, #12]
      break;
 800ff92:	e112      	b.n	80101ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	7c1b      	ldrb	r3, [r3, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10d      	bne.n	800ffb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa4:	f107 0208 	add.w	r2, r7, #8
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	4798      	blx	r3
 800ffac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	2202      	movs	r2, #2
 800ffb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ffb6:	e100      	b.n	80101ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc0:	f107 0208 	add.w	r2, r7, #8
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	4798      	blx	r3
 800ffc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	2202      	movs	r2, #2
 800ffd0:	701a      	strb	r2, [r3, #0]
      break;
 800ffd2:	e0f2      	b.n	80101ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	885b      	ldrh	r3, [r3, #2]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b05      	cmp	r3, #5
 800ffdc:	f200 80ac 	bhi.w	8010138 <USBD_GetDescriptor+0x204>
 800ffe0:	a201      	add	r2, pc, #4	; (adr r2, 800ffe8 <USBD_GetDescriptor+0xb4>)
 800ffe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe6:	bf00      	nop
 800ffe8:	08010001 	.word	0x08010001
 800ffec:	08010035 	.word	0x08010035
 800fff0:	08010069 	.word	0x08010069
 800fff4:	0801009d 	.word	0x0801009d
 800fff8:	080100d1 	.word	0x080100d1
 800fffc:	08010105 	.word	0x08010105
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00b      	beq.n	8010024 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	7c12      	ldrb	r2, [r2, #16]
 8010018:	f107 0108 	add.w	r1, r7, #8
 801001c:	4610      	mov	r0, r2
 801001e:	4798      	blx	r3
 8010020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010022:	e091      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 fab2 	bl	8010590 <USBD_CtlError>
            err++;
 801002c:	7afb      	ldrb	r3, [r7, #11]
 801002e:	3301      	adds	r3, #1
 8010030:	72fb      	strb	r3, [r7, #11]
          break;
 8010032:	e089      	b.n	8010148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00b      	beq.n	8010058 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	7c12      	ldrb	r2, [r2, #16]
 801004c:	f107 0108 	add.w	r1, r7, #8
 8010050:	4610      	mov	r0, r2
 8010052:	4798      	blx	r3
 8010054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010056:	e077      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fa98 	bl	8010590 <USBD_CtlError>
            err++;
 8010060:	7afb      	ldrb	r3, [r7, #11]
 8010062:	3301      	adds	r3, #1
 8010064:	72fb      	strb	r3, [r7, #11]
          break;
 8010066:	e06f      	b.n	8010148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00b      	beq.n	801008c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	7c12      	ldrb	r2, [r2, #16]
 8010080:	f107 0108 	add.w	r1, r7, #8
 8010084:	4610      	mov	r0, r2
 8010086:	4798      	blx	r3
 8010088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801008a:	e05d      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 fa7e 	bl	8010590 <USBD_CtlError>
            err++;
 8010094:	7afb      	ldrb	r3, [r7, #11]
 8010096:	3301      	adds	r3, #1
 8010098:	72fb      	strb	r3, [r7, #11]
          break;
 801009a:	e055      	b.n	8010148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00b      	beq.n	80100c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	7c12      	ldrb	r2, [r2, #16]
 80100b4:	f107 0108 	add.w	r1, r7, #8
 80100b8:	4610      	mov	r0, r2
 80100ba:	4798      	blx	r3
 80100bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100be:	e043      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 fa64 	bl	8010590 <USBD_CtlError>
            err++;
 80100c8:	7afb      	ldrb	r3, [r7, #11]
 80100ca:	3301      	adds	r3, #1
 80100cc:	72fb      	strb	r3, [r7, #11]
          break;
 80100ce:	e03b      	b.n	8010148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100d6:	695b      	ldr	r3, [r3, #20]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00b      	beq.n	80100f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100e2:	695b      	ldr	r3, [r3, #20]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	7c12      	ldrb	r2, [r2, #16]
 80100e8:	f107 0108 	add.w	r1, r7, #8
 80100ec:	4610      	mov	r0, r2
 80100ee:	4798      	blx	r3
 80100f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100f2:	e029      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fa4a 	bl	8010590 <USBD_CtlError>
            err++;
 80100fc:	7afb      	ldrb	r3, [r7, #11]
 80100fe:	3301      	adds	r3, #1
 8010100:	72fb      	strb	r3, [r7, #11]
          break;
 8010102:	e021      	b.n	8010148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801010a:	699b      	ldr	r3, [r3, #24]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00b      	beq.n	8010128 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010116:	699b      	ldr	r3, [r3, #24]
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	7c12      	ldrb	r2, [r2, #16]
 801011c:	f107 0108 	add.w	r1, r7, #8
 8010120:	4610      	mov	r0, r2
 8010122:	4798      	blx	r3
 8010124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010126:	e00f      	b.n	8010148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010128:	6839      	ldr	r1, [r7, #0]
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 fa30 	bl	8010590 <USBD_CtlError>
            err++;
 8010130:	7afb      	ldrb	r3, [r7, #11]
 8010132:	3301      	adds	r3, #1
 8010134:	72fb      	strb	r3, [r7, #11]
          break;
 8010136:	e007      	b.n	8010148 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010138:	6839      	ldr	r1, [r7, #0]
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fa28 	bl	8010590 <USBD_CtlError>
          err++;
 8010140:	7afb      	ldrb	r3, [r7, #11]
 8010142:	3301      	adds	r3, #1
 8010144:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010146:	bf00      	nop
      }
      break;
 8010148:	e037      	b.n	80101ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	7c1b      	ldrb	r3, [r3, #16]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d109      	bne.n	8010166 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801015a:	f107 0208 	add.w	r2, r7, #8
 801015e:	4610      	mov	r0, r2
 8010160:	4798      	blx	r3
 8010162:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010164:	e029      	b.n	80101ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 fa11 	bl	8010590 <USBD_CtlError>
        err++;
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	3301      	adds	r3, #1
 8010172:	72fb      	strb	r3, [r7, #11]
      break;
 8010174:	e021      	b.n	80101ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	7c1b      	ldrb	r3, [r3, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d10d      	bne.n	801019a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010186:	f107 0208 	add.w	r2, r7, #8
 801018a:	4610      	mov	r0, r2
 801018c:	4798      	blx	r3
 801018e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	3301      	adds	r3, #1
 8010194:	2207      	movs	r2, #7
 8010196:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010198:	e00f      	b.n	80101ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f9f7 	bl	8010590 <USBD_CtlError>
        err++;
 80101a2:	7afb      	ldrb	r3, [r7, #11]
 80101a4:	3301      	adds	r3, #1
 80101a6:	72fb      	strb	r3, [r7, #11]
      break;
 80101a8:	e007      	b.n	80101ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f9ef 	bl	8010590 <USBD_CtlError>
      err++;
 80101b2:	7afb      	ldrb	r3, [r7, #11]
 80101b4:	3301      	adds	r3, #1
 80101b6:	72fb      	strb	r3, [r7, #11]
      break;
 80101b8:	bf00      	nop
  }

  if (err != 0U)
 80101ba:	7afb      	ldrb	r3, [r7, #11]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d11e      	bne.n	80101fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	88db      	ldrh	r3, [r3, #6]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d016      	beq.n	80101f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80101c8:	893b      	ldrh	r3, [r7, #8]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	88da      	ldrh	r2, [r3, #6]
 80101d2:	893b      	ldrh	r3, [r7, #8]
 80101d4:	4293      	cmp	r3, r2
 80101d6:	bf28      	it	cs
 80101d8:	4613      	movcs	r3, r2
 80101da:	b29b      	uxth	r3, r3
 80101dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80101de:	893b      	ldrh	r3, [r7, #8]
 80101e0:	461a      	mov	r2, r3
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 fa44 	bl	8010672 <USBD_CtlSendData>
 80101ea:	e009      	b.n	8010200 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 f9ce 	bl	8010590 <USBD_CtlError>
 80101f4:	e004      	b.n	8010200 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 fa95 	bl	8010726 <USBD_CtlSendStatus>
 80101fc:	e000      	b.n	8010200 <USBD_GetDescriptor+0x2cc>
    return;
 80101fe:	bf00      	nop
  }
}
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop

08010208 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	889b      	ldrh	r3, [r3, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d131      	bne.n	801027e <USBD_SetAddress+0x76>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	88db      	ldrh	r3, [r3, #6]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d12d      	bne.n	801027e <USBD_SetAddress+0x76>
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	885b      	ldrh	r3, [r3, #2]
 8010226:	2b7f      	cmp	r3, #127	; 0x7f
 8010228:	d829      	bhi.n	801027e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	885b      	ldrh	r3, [r3, #2]
 801022e:	b2db      	uxtb	r3, r3
 8010230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010234:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801023c:	b2db      	uxtb	r3, r3
 801023e:	2b03      	cmp	r3, #3
 8010240:	d104      	bne.n	801024c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 f9a3 	bl	8010590 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801024a:	e01d      	b.n	8010288 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	7bfa      	ldrb	r2, [r7, #15]
 8010250:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010254:	7bfb      	ldrb	r3, [r7, #15]
 8010256:	4619      	mov	r1, r3
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f003 fec3 	bl	8013fe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fa61 	bl	8010726 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010264:	7bfb      	ldrb	r3, [r7, #15]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d004      	beq.n	8010274 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2202      	movs	r2, #2
 801026e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010272:	e009      	b.n	8010288 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2201      	movs	r2, #1
 8010278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801027c:	e004      	b.n	8010288 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801027e:	6839      	ldr	r1, [r7, #0]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f985 	bl	8010590 <USBD_CtlError>
  }
}
 8010286:	bf00      	nop
 8010288:	bf00      	nop
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801029a:	2300      	movs	r3, #0
 801029c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	885b      	ldrh	r3, [r3, #2]
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	4b4c      	ldr	r3, [pc, #304]	; (80103d8 <USBD_SetConfig+0x148>)
 80102a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80102a8:	4b4b      	ldr	r3, [pc, #300]	; (80103d8 <USBD_SetConfig+0x148>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d905      	bls.n	80102bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f96c 	bl	8010590 <USBD_CtlError>
    return USBD_FAIL;
 80102b8:	2303      	movs	r3, #3
 80102ba:	e088      	b.n	80103ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d002      	beq.n	80102ce <USBD_SetConfig+0x3e>
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d025      	beq.n	8010318 <USBD_SetConfig+0x88>
 80102cc:	e071      	b.n	80103b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80102ce:	4b42      	ldr	r3, [pc, #264]	; (80103d8 <USBD_SetConfig+0x148>)
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d01c      	beq.n	8010310 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80102d6:	4b40      	ldr	r3, [pc, #256]	; (80103d8 <USBD_SetConfig+0x148>)
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102e0:	4b3d      	ldr	r3, [pc, #244]	; (80103d8 <USBD_SetConfig+0x148>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	4619      	mov	r1, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff f948 	bl	800f57c <USBD_SetClassConfig>
 80102ec:	4603      	mov	r3, r0
 80102ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80102f0:	7bfb      	ldrb	r3, [r7, #15]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f949 	bl	8010590 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80102fe:	e065      	b.n	80103cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fa10 	bl	8010726 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2203      	movs	r2, #3
 801030a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801030e:	e05d      	b.n	80103cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 fa08 	bl	8010726 <USBD_CtlSendStatus>
      break;
 8010316:	e059      	b.n	80103cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010318:	4b2f      	ldr	r3, [pc, #188]	; (80103d8 <USBD_SetConfig+0x148>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d112      	bne.n	8010346 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2202      	movs	r2, #2
 8010324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010328:	4b2b      	ldr	r3, [pc, #172]	; (80103d8 <USBD_SetConfig+0x148>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	461a      	mov	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010332:	4b29      	ldr	r3, [pc, #164]	; (80103d8 <USBD_SetConfig+0x148>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	4619      	mov	r1, r3
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7ff f93b 	bl	800f5b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f9f1 	bl	8010726 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010344:	e042      	b.n	80103cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010346:	4b24      	ldr	r3, [pc, #144]	; (80103d8 <USBD_SetConfig+0x148>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d02a      	beq.n	80103aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	b2db      	uxtb	r3, r3
 801035a:	4619      	mov	r1, r3
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff f929 	bl	800f5b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010362:	4b1d      	ldr	r3, [pc, #116]	; (80103d8 <USBD_SetConfig+0x148>)
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	461a      	mov	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801036c:	4b1a      	ldr	r3, [pc, #104]	; (80103d8 <USBD_SetConfig+0x148>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	4619      	mov	r1, r3
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff f902 	bl	800f57c <USBD_SetClassConfig>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00f      	beq.n	80103a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010382:	6839      	ldr	r1, [r7, #0]
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 f903 	bl	8010590 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	b2db      	uxtb	r3, r3
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff f90e 	bl	800f5b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2202      	movs	r2, #2
 801039c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80103a0:	e014      	b.n	80103cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f9bf 	bl	8010726 <USBD_CtlSendStatus>
      break;
 80103a8:	e010      	b.n	80103cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f9bb 	bl	8010726 <USBD_CtlSendStatus>
      break;
 80103b0:	e00c      	b.n	80103cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 f8eb 	bl	8010590 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103ba:	4b07      	ldr	r3, [pc, #28]	; (80103d8 <USBD_SetConfig+0x148>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	4619      	mov	r1, r3
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff f8f7 	bl	800f5b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80103c6:	2303      	movs	r3, #3
 80103c8:	73fb      	strb	r3, [r7, #15]
      break;
 80103ca:	bf00      	nop
  }

  return ret;
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200010f0 	.word	0x200010f0

080103dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	88db      	ldrh	r3, [r3, #6]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d004      	beq.n	80103f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80103ee:	6839      	ldr	r1, [r7, #0]
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 f8cd 	bl	8010590 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80103f6:	e023      	b.n	8010440 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b02      	cmp	r3, #2
 8010402:	dc02      	bgt.n	801040a <USBD_GetConfig+0x2e>
 8010404:	2b00      	cmp	r3, #0
 8010406:	dc03      	bgt.n	8010410 <USBD_GetConfig+0x34>
 8010408:	e015      	b.n	8010436 <USBD_GetConfig+0x5a>
 801040a:	2b03      	cmp	r3, #3
 801040c:	d00b      	beq.n	8010426 <USBD_GetConfig+0x4a>
 801040e:	e012      	b.n	8010436 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3308      	adds	r3, #8
 801041a:	2201      	movs	r2, #1
 801041c:	4619      	mov	r1, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f927 	bl	8010672 <USBD_CtlSendData>
        break;
 8010424:	e00c      	b.n	8010440 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	3304      	adds	r3, #4
 801042a:	2201      	movs	r2, #1
 801042c:	4619      	mov	r1, r3
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 f91f 	bl	8010672 <USBD_CtlSendData>
        break;
 8010434:	e004      	b.n	8010440 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 f8a9 	bl	8010590 <USBD_CtlError>
        break;
 801043e:	bf00      	nop
}
 8010440:	bf00      	nop
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010458:	b2db      	uxtb	r3, r3
 801045a:	3b01      	subs	r3, #1
 801045c:	2b02      	cmp	r3, #2
 801045e:	d81e      	bhi.n	801049e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	88db      	ldrh	r3, [r3, #6]
 8010464:	2b02      	cmp	r3, #2
 8010466:	d004      	beq.n	8010472 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 f890 	bl	8010590 <USBD_CtlError>
        break;
 8010470:	e01a      	b.n	80104a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2201      	movs	r2, #1
 8010476:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801047e:	2b00      	cmp	r3, #0
 8010480:	d005      	beq.n	801048e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	f043 0202 	orr.w	r2, r3, #2
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	330c      	adds	r3, #12
 8010492:	2202      	movs	r2, #2
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f8eb 	bl	8010672 <USBD_CtlSendData>
      break;
 801049c:	e004      	b.n	80104a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 f875 	bl	8010590 <USBD_CtlError>
      break;
 80104a6:	bf00      	nop
  }
}
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	885b      	ldrh	r3, [r3, #2]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d106      	bne.n	80104d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2201      	movs	r2, #1
 80104c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 f92b 	bl	8010726 <USBD_CtlSendStatus>
  }
}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	3b01      	subs	r3, #1
 80104ec:	2b02      	cmp	r3, #2
 80104ee:	d80b      	bhi.n	8010508 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	885b      	ldrh	r3, [r3, #2]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d10c      	bne.n	8010512 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 f910 	bl	8010726 <USBD_CtlSendStatus>
      }
      break;
 8010506:	e004      	b.n	8010512 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010508:	6839      	ldr	r1, [r7, #0]
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 f840 	bl	8010590 <USBD_CtlError>
      break;
 8010510:	e000      	b.n	8010514 <USBD_ClrFeature+0x3c>
      break;
 8010512:	bf00      	nop
  }
}
 8010514:	bf00      	nop
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	781a      	ldrb	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	3301      	adds	r3, #1
 8010536:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	781a      	ldrb	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	3301      	adds	r3, #1
 8010544:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f7ff fabb 	bl	800fac2 <SWAPBYTE>
 801054c:	4603      	mov	r3, r0
 801054e:	461a      	mov	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3301      	adds	r3, #1
 8010558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3301      	adds	r3, #1
 801055e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f7ff faae 	bl	800fac2 <SWAPBYTE>
 8010566:	4603      	mov	r3, r0
 8010568:	461a      	mov	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	3301      	adds	r3, #1
 8010572:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3301      	adds	r3, #1
 8010578:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f7ff faa1 	bl	800fac2 <SWAPBYTE>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	80da      	strh	r2, [r3, #6]
}
 8010588:	bf00      	nop
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801059a:	2180      	movs	r1, #128	; 0x80
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f003 fc89 	bl	8013eb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80105a2:	2100      	movs	r1, #0
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f003 fc85 	bl	8013eb4 <USBD_LL_StallEP>
}
 80105aa:	bf00      	nop
 80105ac:	3708      	adds	r7, #8
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b086      	sub	sp, #24
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	60f8      	str	r0, [r7, #12]
 80105ba:	60b9      	str	r1, [r7, #8]
 80105bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80105be:	2300      	movs	r3, #0
 80105c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d036      	beq.n	8010636 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80105cc:	6938      	ldr	r0, [r7, #16]
 80105ce:	f000 f836 	bl	801063e <USBD_GetLen>
 80105d2:	4603      	mov	r3, r0
 80105d4:	3301      	adds	r3, #1
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	b29a      	uxth	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80105e0:	7dfb      	ldrb	r3, [r7, #23]
 80105e2:	68ba      	ldr	r2, [r7, #8]
 80105e4:	4413      	add	r3, r2
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	7812      	ldrb	r2, [r2, #0]
 80105ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80105ec:	7dfb      	ldrb	r3, [r7, #23]
 80105ee:	3301      	adds	r3, #1
 80105f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	4413      	add	r3, r2
 80105f8:	2203      	movs	r2, #3
 80105fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80105fc:	7dfb      	ldrb	r3, [r7, #23]
 80105fe:	3301      	adds	r3, #1
 8010600:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010602:	e013      	b.n	801062c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010604:	7dfb      	ldrb	r3, [r7, #23]
 8010606:	68ba      	ldr	r2, [r7, #8]
 8010608:	4413      	add	r3, r2
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	7812      	ldrb	r2, [r2, #0]
 801060e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	3301      	adds	r3, #1
 8010614:	613b      	str	r3, [r7, #16]
    idx++;
 8010616:	7dfb      	ldrb	r3, [r7, #23]
 8010618:	3301      	adds	r3, #1
 801061a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801061c:	7dfb      	ldrb	r3, [r7, #23]
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	4413      	add	r3, r2
 8010622:	2200      	movs	r2, #0
 8010624:	701a      	strb	r2, [r3, #0]
    idx++;
 8010626:	7dfb      	ldrb	r3, [r7, #23]
 8010628:	3301      	adds	r3, #1
 801062a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1e7      	bne.n	8010604 <USBD_GetString+0x52>
 8010634:	e000      	b.n	8010638 <USBD_GetString+0x86>
    return;
 8010636:	bf00      	nop
  }
}
 8010638:	3718      	adds	r7, #24
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}

0801063e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801063e:	b480      	push	{r7}
 8010640:	b085      	sub	sp, #20
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010646:	2300      	movs	r3, #0
 8010648:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801064e:	e005      	b.n	801065c <USBD_GetLen+0x1e>
  {
    len++;
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	3301      	adds	r3, #1
 8010654:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	3301      	adds	r3, #1
 801065a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f5      	bne.n	8010650 <USBD_GetLen+0x12>
  }

  return len;
 8010664:	7bfb      	ldrb	r3, [r7, #15]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3714      	adds	r7, #20
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	60f8      	str	r0, [r7, #12]
 801067a:	60b9      	str	r1, [r7, #8]
 801067c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2202      	movs	r2, #2
 8010682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	2100      	movs	r1, #0
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f003 fcd9 	bl	8014050 <USBD_LL_Transmit>

  return USBD_OK;
 801069e:	2300      	movs	r3, #0
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	2100      	movs	r1, #0
 80106ba:	68f8      	ldr	r0, [r7, #12]
 80106bc:	f003 fcc8 	bl	8014050 <USBD_LL_Transmit>

  return USBD_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2203      	movs	r2, #3
 80106da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	2100      	movs	r1, #0
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f003 fce3 	bl	80140c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	2100      	movs	r1, #0
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f003 fcd2 	bl	80140c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2204      	movs	r2, #4
 8010732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010736:	2300      	movs	r3, #0
 8010738:	2200      	movs	r2, #0
 801073a:	2100      	movs	r1, #0
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f003 fc87 	bl	8014050 <USBD_LL_Transmit>

  return USBD_OK;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2205      	movs	r2, #5
 8010758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801075c:	2300      	movs	r3, #0
 801075e:	2200      	movs	r2, #0
 8010760:	2100      	movs	r1, #0
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f003 fcac 	bl	80140c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	4a08      	ldr	r2, [pc, #32]	; (80107a4 <disk_status+0x30>)
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	4413      	add	r3, r2
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	79fa      	ldrb	r2, [r7, #7]
 801078c:	4905      	ldr	r1, [pc, #20]	; (80107a4 <disk_status+0x30>)
 801078e:	440a      	add	r2, r1
 8010790:	7a12      	ldrb	r2, [r2, #8]
 8010792:	4610      	mov	r0, r2
 8010794:	4798      	blx	r3
 8010796:	4603      	mov	r3, r0
 8010798:	73fb      	strb	r3, [r7, #15]
  return stat;
 801079a:	7bfb      	ldrb	r3, [r7, #15]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	2000111c 	.word	0x2000111c

080107a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80107b6:	79fb      	ldrb	r3, [r7, #7]
 80107b8:	4a0d      	ldr	r2, [pc, #52]	; (80107f0 <disk_initialize+0x48>)
 80107ba:	5cd3      	ldrb	r3, [r2, r3]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d111      	bne.n	80107e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80107c0:	79fb      	ldrb	r3, [r7, #7]
 80107c2:	4a0b      	ldr	r2, [pc, #44]	; (80107f0 <disk_initialize+0x48>)
 80107c4:	2101      	movs	r1, #1
 80107c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <disk_initialize+0x48>)
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	79fa      	ldrb	r2, [r7, #7]
 80107d6:	4906      	ldr	r1, [pc, #24]	; (80107f0 <disk_initialize+0x48>)
 80107d8:	440a      	add	r2, r1
 80107da:	7a12      	ldrb	r2, [r2, #8]
 80107dc:	4610      	mov	r0, r2
 80107de:	4798      	blx	r3
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	2000111c 	.word	0x2000111c

080107f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80107f4:	b590      	push	{r4, r7, lr}
 80107f6:	b087      	sub	sp, #28
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60b9      	str	r1, [r7, #8]
 80107fc:	607a      	str	r2, [r7, #4]
 80107fe:	603b      	str	r3, [r7, #0]
 8010800:	4603      	mov	r3, r0
 8010802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	4a0a      	ldr	r2, [pc, #40]	; (8010830 <disk_read+0x3c>)
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	689c      	ldr	r4, [r3, #8]
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	4a07      	ldr	r2, [pc, #28]	; (8010830 <disk_read+0x3c>)
 8010814:	4413      	add	r3, r2
 8010816:	7a18      	ldrb	r0, [r3, #8]
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	68b9      	ldr	r1, [r7, #8]
 801081e:	47a0      	blx	r4
 8010820:	4603      	mov	r3, r0
 8010822:	75fb      	strb	r3, [r7, #23]
  return res;
 8010824:	7dfb      	ldrb	r3, [r7, #23]
}
 8010826:	4618      	mov	r0, r3
 8010828:	371c      	adds	r7, #28
 801082a:	46bd      	mov	sp, r7
 801082c:	bd90      	pop	{r4, r7, pc}
 801082e:	bf00      	nop
 8010830:	2000111c 	.word	0x2000111c

08010834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b087      	sub	sp, #28
 8010838:	af00      	add	r7, sp, #0
 801083a:	60b9      	str	r1, [r7, #8]
 801083c:	607a      	str	r2, [r7, #4]
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4603      	mov	r3, r0
 8010842:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010844:	7bfb      	ldrb	r3, [r7, #15]
 8010846:	4a0a      	ldr	r2, [pc, #40]	; (8010870 <disk_write+0x3c>)
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	4413      	add	r3, r2
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	68dc      	ldr	r4, [r3, #12]
 8010850:	7bfb      	ldrb	r3, [r7, #15]
 8010852:	4a07      	ldr	r2, [pc, #28]	; (8010870 <disk_write+0x3c>)
 8010854:	4413      	add	r3, r2
 8010856:	7a18      	ldrb	r0, [r3, #8]
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	68b9      	ldr	r1, [r7, #8]
 801085e:	47a0      	blx	r4
 8010860:	4603      	mov	r3, r0
 8010862:	75fb      	strb	r3, [r7, #23]
  return res;
 8010864:	7dfb      	ldrb	r3, [r7, #23]
}
 8010866:	4618      	mov	r0, r3
 8010868:	371c      	adds	r7, #28
 801086a:	46bd      	mov	sp, r7
 801086c:	bd90      	pop	{r4, r7, pc}
 801086e:	bf00      	nop
 8010870:	2000111c 	.word	0x2000111c

08010874 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	603a      	str	r2, [r7, #0]
 801087e:	71fb      	strb	r3, [r7, #7]
 8010880:	460b      	mov	r3, r1
 8010882:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	4a09      	ldr	r2, [pc, #36]	; (80108ac <disk_ioctl+0x38>)
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	4413      	add	r3, r2
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	79fa      	ldrb	r2, [r7, #7]
 8010892:	4906      	ldr	r1, [pc, #24]	; (80108ac <disk_ioctl+0x38>)
 8010894:	440a      	add	r2, r1
 8010896:	7a10      	ldrb	r0, [r2, #8]
 8010898:	79b9      	ldrb	r1, [r7, #6]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	4798      	blx	r3
 801089e:	4603      	mov	r3, r0
 80108a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	2000111c 	.word	0x2000111c

080108b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	3301      	adds	r3, #1
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80108c0:	89fb      	ldrh	r3, [r7, #14]
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	b21a      	sxth	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	b21b      	sxth	r3, r3
 80108cc:	4313      	orrs	r3, r2
 80108ce:	b21b      	sxth	r3, r3
 80108d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80108d2:	89fb      	ldrh	r3, [r7, #14]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3714      	adds	r7, #20
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	3303      	adds	r3, #3
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	021b      	lsls	r3, r3, #8
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	3202      	adds	r2, #2
 80108f8:	7812      	ldrb	r2, [r2, #0]
 80108fa:	4313      	orrs	r3, r2
 80108fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	021b      	lsls	r3, r3, #8
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	3201      	adds	r2, #1
 8010906:	7812      	ldrb	r2, [r2, #0]
 8010908:	4313      	orrs	r3, r2
 801090a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	021b      	lsls	r3, r3, #8
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	7812      	ldrb	r2, [r2, #0]
 8010914:	4313      	orrs	r3, r2
 8010916:	60fb      	str	r3, [r7, #12]
	return rv;
 8010918:	68fb      	ldr	r3, [r7, #12]
}
 801091a:	4618      	mov	r0, r3
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010926:	b480      	push	{r7}
 8010928:	b083      	sub	sp, #12
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	460b      	mov	r3, r1
 8010930:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	1c5a      	adds	r2, r3, #1
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	887a      	ldrh	r2, [r7, #2]
 801093a:	b2d2      	uxtb	r2, r2
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	887b      	ldrh	r3, [r7, #2]
 8010940:	0a1b      	lsrs	r3, r3, #8
 8010942:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	607a      	str	r2, [r7, #4]
 801094a:	887a      	ldrh	r2, [r7, #2]
 801094c:	b2d2      	uxtb	r2, r2
 801094e:	701a      	strb	r2, [r3, #0]
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	607a      	str	r2, [r7, #4]
 801096c:	683a      	ldr	r2, [r7, #0]
 801096e:	b2d2      	uxtb	r2, r2
 8010970:	701a      	strb	r2, [r3, #0]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	0a1b      	lsrs	r3, r3, #8
 8010976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	1c5a      	adds	r2, r3, #1
 801097c:	607a      	str	r2, [r7, #4]
 801097e:	683a      	ldr	r2, [r7, #0]
 8010980:	b2d2      	uxtb	r2, r2
 8010982:	701a      	strb	r2, [r3, #0]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	0a1b      	lsrs	r3, r3, #8
 8010988:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	1c5a      	adds	r2, r3, #1
 801098e:	607a      	str	r2, [r7, #4]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	b2d2      	uxtb	r2, r2
 8010994:	701a      	strb	r2, [r3, #0]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	0a1b      	lsrs	r3, r3, #8
 801099a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	1c5a      	adds	r2, r3, #1
 80109a0:	607a      	str	r2, [r7, #4]
 80109a2:	683a      	ldr	r2, [r7, #0]
 80109a4:	b2d2      	uxtb	r2, r2
 80109a6:	701a      	strb	r2, [r3, #0]
}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80109b4:	b480      	push	{r7}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00d      	beq.n	80109ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	1c53      	adds	r3, r2, #1
 80109d2:	613b      	str	r3, [r7, #16]
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	1c59      	adds	r1, r3, #1
 80109d8:	6179      	str	r1, [r7, #20]
 80109da:	7812      	ldrb	r2, [r2, #0]
 80109dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	607b      	str	r3, [r7, #4]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1f1      	bne.n	80109ce <mem_cpy+0x1a>
	}
}
 80109ea:	bf00      	nop
 80109ec:	371c      	adds	r7, #28
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80109f6:	b480      	push	{r7}
 80109f8:	b087      	sub	sp, #28
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	60f8      	str	r0, [r7, #12]
 80109fe:	60b9      	str	r1, [r7, #8]
 8010a00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	1c5a      	adds	r2, r3, #1
 8010a0a:	617a      	str	r2, [r7, #20]
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	b2d2      	uxtb	r2, r2
 8010a10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	607b      	str	r3, [r7, #4]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1f3      	bne.n	8010a06 <mem_set+0x10>
}
 8010a1e:	bf00      	nop
 8010a20:	bf00      	nop
 8010a22:	371c      	adds	r7, #28
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010a2c:	b480      	push	{r7}
 8010a2e:	b089      	sub	sp, #36	; 0x24
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	61fb      	str	r3, [r7, #28]
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010a40:	2300      	movs	r3, #0
 8010a42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	61fa      	str	r2, [r7, #28]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	1c5a      	adds	r2, r3, #1
 8010a52:	61ba      	str	r2, [r7, #24]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	1acb      	subs	r3, r1, r3
 8010a58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	607b      	str	r3, [r7, #4]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d002      	beq.n	8010a6c <mem_cmp+0x40>
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d0eb      	beq.n	8010a44 <mem_cmp+0x18>

	return r;
 8010a6c:	697b      	ldr	r3, [r7, #20]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3724      	adds	r7, #36	; 0x24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010a7a:	b480      	push	{r7}
 8010a7c:	b083      	sub	sp, #12
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010a84:	e002      	b.n	8010a8c <chk_chr+0x12>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	607b      	str	r3, [r7, #4]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d005      	beq.n	8010aa0 <chk_chr+0x26>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d1f2      	bne.n	8010a86 <chk_chr+0xc>
	return *str;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	781b      	ldrb	r3, [r3, #0]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010aba:	2300      	movs	r3, #0
 8010abc:	60bb      	str	r3, [r7, #8]
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	60fb      	str	r3, [r7, #12]
 8010ac2:	e029      	b.n	8010b18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010ac4:	4a27      	ldr	r2, [pc, #156]	; (8010b64 <chk_lock+0xb4>)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	011b      	lsls	r3, r3, #4
 8010aca:	4413      	add	r3, r2
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d01d      	beq.n	8010b0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010ad2:	4a24      	ldr	r2, [pc, #144]	; (8010b64 <chk_lock+0xb4>)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	011b      	lsls	r3, r3, #4
 8010ad8:	4413      	add	r3, r2
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d116      	bne.n	8010b12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ae4:	4a1f      	ldr	r2, [pc, #124]	; (8010b64 <chk_lock+0xb4>)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	011b      	lsls	r3, r3, #4
 8010aea:	4413      	add	r3, r2
 8010aec:	3304      	adds	r3, #4
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d10c      	bne.n	8010b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010af8:	4a1a      	ldr	r2, [pc, #104]	; (8010b64 <chk_lock+0xb4>)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	4413      	add	r3, r2
 8010b00:	3308      	adds	r3, #8
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d102      	bne.n	8010b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010b0c:	e007      	b.n	8010b1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010b0e:	2301      	movs	r3, #1
 8010b10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3301      	adds	r3, #1
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d9d2      	bls.n	8010ac4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2b02      	cmp	r3, #2
 8010b22:	d109      	bne.n	8010b38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d102      	bne.n	8010b30 <chk_lock+0x80>
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d101      	bne.n	8010b34 <chk_lock+0x84>
 8010b30:	2300      	movs	r3, #0
 8010b32:	e010      	b.n	8010b56 <chk_lock+0xa6>
 8010b34:	2312      	movs	r3, #18
 8010b36:	e00e      	b.n	8010b56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d108      	bne.n	8010b50 <chk_lock+0xa0>
 8010b3e:	4a09      	ldr	r2, [pc, #36]	; (8010b64 <chk_lock+0xb4>)
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	011b      	lsls	r3, r3, #4
 8010b44:	4413      	add	r3, r2
 8010b46:	330c      	adds	r3, #12
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b4e:	d101      	bne.n	8010b54 <chk_lock+0xa4>
 8010b50:	2310      	movs	r3, #16
 8010b52:	e000      	b.n	8010b56 <chk_lock+0xa6>
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	200010fc 	.word	0x200010fc

08010b68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	607b      	str	r3, [r7, #4]
 8010b72:	e002      	b.n	8010b7a <enq_lock+0x12>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3301      	adds	r3, #1
 8010b78:	607b      	str	r3, [r7, #4]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d806      	bhi.n	8010b8e <enq_lock+0x26>
 8010b80:	4a09      	ldr	r2, [pc, #36]	; (8010ba8 <enq_lock+0x40>)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	011b      	lsls	r3, r3, #4
 8010b86:	4413      	add	r3, r2
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1f2      	bne.n	8010b74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	bf14      	ite	ne
 8010b94:	2301      	movne	r3, #1
 8010b96:	2300      	moveq	r3, #0
 8010b98:	b2db      	uxtb	r3, r3
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	200010fc 	.word	0x200010fc

08010bac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	60fb      	str	r3, [r7, #12]
 8010bba:	e01f      	b.n	8010bfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010bbc:	4a41      	ldr	r2, [pc, #260]	; (8010cc4 <inc_lock+0x118>)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	011b      	lsls	r3, r3, #4
 8010bc2:	4413      	add	r3, r2
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d113      	bne.n	8010bf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010bce:	4a3d      	ldr	r2, [pc, #244]	; (8010cc4 <inc_lock+0x118>)
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	011b      	lsls	r3, r3, #4
 8010bd4:	4413      	add	r3, r2
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d109      	bne.n	8010bf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010be2:	4a38      	ldr	r2, [pc, #224]	; (8010cc4 <inc_lock+0x118>)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	011b      	lsls	r3, r3, #4
 8010be8:	4413      	add	r3, r2
 8010bea:	3308      	adds	r3, #8
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d006      	beq.n	8010c04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d9dc      	bls.n	8010bbc <inc_lock+0x10>
 8010c02:	e000      	b.n	8010c06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010c04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d132      	bne.n	8010c72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	e002      	b.n	8010c18 <inc_lock+0x6c>
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	3301      	adds	r3, #1
 8010c16:	60fb      	str	r3, [r7, #12]
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d806      	bhi.n	8010c2c <inc_lock+0x80>
 8010c1e:	4a29      	ldr	r2, [pc, #164]	; (8010cc4 <inc_lock+0x118>)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	011b      	lsls	r3, r3, #4
 8010c24:	4413      	add	r3, r2
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d1f2      	bne.n	8010c12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b02      	cmp	r3, #2
 8010c30:	d101      	bne.n	8010c36 <inc_lock+0x8a>
 8010c32:	2300      	movs	r3, #0
 8010c34:	e040      	b.n	8010cb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	4922      	ldr	r1, [pc, #136]	; (8010cc4 <inc_lock+0x118>)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	011b      	lsls	r3, r3, #4
 8010c40:	440b      	add	r3, r1
 8010c42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	491e      	ldr	r1, [pc, #120]	; (8010cc4 <inc_lock+0x118>)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	011b      	lsls	r3, r3, #4
 8010c4e:	440b      	add	r3, r1
 8010c50:	3304      	adds	r3, #4
 8010c52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	695a      	ldr	r2, [r3, #20]
 8010c58:	491a      	ldr	r1, [pc, #104]	; (8010cc4 <inc_lock+0x118>)
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	011b      	lsls	r3, r3, #4
 8010c5e:	440b      	add	r3, r1
 8010c60:	3308      	adds	r3, #8
 8010c62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010c64:	4a17      	ldr	r2, [pc, #92]	; (8010cc4 <inc_lock+0x118>)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	011b      	lsls	r3, r3, #4
 8010c6a:	4413      	add	r3, r2
 8010c6c:	330c      	adds	r3, #12
 8010c6e:	2200      	movs	r2, #0
 8010c70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d009      	beq.n	8010c8c <inc_lock+0xe0>
 8010c78:	4a12      	ldr	r2, [pc, #72]	; (8010cc4 <inc_lock+0x118>)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	011b      	lsls	r3, r3, #4
 8010c7e:	4413      	add	r3, r2
 8010c80:	330c      	adds	r3, #12
 8010c82:	881b      	ldrh	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <inc_lock+0xe0>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e015      	b.n	8010cb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d108      	bne.n	8010ca4 <inc_lock+0xf8>
 8010c92:	4a0c      	ldr	r2, [pc, #48]	; (8010cc4 <inc_lock+0x118>)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	011b      	lsls	r3, r3, #4
 8010c98:	4413      	add	r3, r2
 8010c9a:	330c      	adds	r3, #12
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	e001      	b.n	8010ca8 <inc_lock+0xfc>
 8010ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ca8:	4906      	ldr	r1, [pc, #24]	; (8010cc4 <inc_lock+0x118>)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	011b      	lsls	r3, r3, #4
 8010cae:	440b      	add	r3, r1
 8010cb0:	330c      	adds	r3, #12
 8010cb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	3301      	adds	r3, #1
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	200010fc 	.word	0x200010fc

08010cc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	607b      	str	r3, [r7, #4]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d825      	bhi.n	8010d28 <dec_lock+0x60>
		n = Files[i].ctr;
 8010cdc:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <dec_lock+0x74>)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	011b      	lsls	r3, r3, #4
 8010ce2:	4413      	add	r3, r2
 8010ce4:	330c      	adds	r3, #12
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010cea:	89fb      	ldrh	r3, [r7, #14]
 8010cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cf0:	d101      	bne.n	8010cf6 <dec_lock+0x2e>
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010cf6:	89fb      	ldrh	r3, [r7, #14]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <dec_lock+0x3a>
 8010cfc:	89fb      	ldrh	r3, [r7, #14]
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010d02:	4a0e      	ldr	r2, [pc, #56]	; (8010d3c <dec_lock+0x74>)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	011b      	lsls	r3, r3, #4
 8010d08:	4413      	add	r3, r2
 8010d0a:	330c      	adds	r3, #12
 8010d0c:	89fa      	ldrh	r2, [r7, #14]
 8010d0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010d10:	89fb      	ldrh	r3, [r7, #14]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <dec_lock+0x5a>
 8010d16:	4a09      	ldr	r2, [pc, #36]	; (8010d3c <dec_lock+0x74>)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	011b      	lsls	r3, r3, #4
 8010d1c:	4413      	add	r3, r2
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	737b      	strb	r3, [r7, #13]
 8010d26:	e001      	b.n	8010d2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010d28:	2302      	movs	r3, #2
 8010d2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010d2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	200010fc 	.word	0x200010fc

08010d40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b085      	sub	sp, #20
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	e010      	b.n	8010d70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010d4e:	4a0d      	ldr	r2, [pc, #52]	; (8010d84 <clear_lock+0x44>)
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	011b      	lsls	r3, r3, #4
 8010d54:	4413      	add	r3, r2
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d105      	bne.n	8010d6a <clear_lock+0x2a>
 8010d5e:	4a09      	ldr	r2, [pc, #36]	; (8010d84 <clear_lock+0x44>)
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	011b      	lsls	r3, r3, #4
 8010d64:	4413      	add	r3, r2
 8010d66:	2200      	movs	r2, #0
 8010d68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	60fb      	str	r3, [r7, #12]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d9eb      	bls.n	8010d4e <clear_lock+0xe>
	}
}
 8010d76:	bf00      	nop
 8010d78:	bf00      	nop
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	200010fc 	.word	0x200010fc

08010d88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	78db      	ldrb	r3, [r3, #3]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d034      	beq.n	8010e06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7858      	ldrb	r0, [r3, #1]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dac:	2301      	movs	r3, #1
 8010dae:	697a      	ldr	r2, [r7, #20]
 8010db0:	f7ff fd40 	bl	8010834 <disk_write>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	73fb      	strb	r3, [r7, #15]
 8010dbe:	e022      	b.n	8010e06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6a1b      	ldr	r3, [r3, #32]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	1ad2      	subs	r2, r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d217      	bcs.n	8010e06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	789b      	ldrb	r3, [r3, #2]
 8010dda:	613b      	str	r3, [r7, #16]
 8010ddc:	e010      	b.n	8010e00 <sync_window+0x78>
					wsect += fs->fsize;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	699b      	ldr	r3, [r3, #24]
 8010de2:	697a      	ldr	r2, [r7, #20]
 8010de4:	4413      	add	r3, r2
 8010de6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	7858      	ldrb	r0, [r3, #1]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010df2:	2301      	movs	r3, #1
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	f7ff fd1d 	bl	8010834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	613b      	str	r3, [r7, #16]
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d8eb      	bhi.n	8010dde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3718      	adds	r7, #24
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e22:	683a      	ldr	r2, [r7, #0]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d01b      	beq.n	8010e60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff ffad 	bl	8010d88 <sync_window>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d113      	bne.n	8010e60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	7858      	ldrb	r0, [r3, #1]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e42:	2301      	movs	r3, #1
 8010e44:	683a      	ldr	r2, [r7, #0]
 8010e46:	f7ff fcd5 	bl	80107f4 <disk_read>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d004      	beq.n	8010e5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	683a      	ldr	r2, [r7, #0]
 8010e5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
	...

08010e6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7ff ff87 	bl	8010d88 <sync_window>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d158      	bne.n	8010f36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	d148      	bne.n	8010f1e <sync_fs+0xb2>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	791b      	ldrb	r3, [r3, #4]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d144      	bne.n	8010f1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3330      	adds	r3, #48	; 0x30
 8010e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff fda9 	bl	80109f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3330      	adds	r3, #48	; 0x30
 8010ea8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010eac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7ff fd38 	bl	8010926 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	3330      	adds	r3, #48	; 0x30
 8010eba:	4921      	ldr	r1, [pc, #132]	; (8010f40 <sync_fs+0xd4>)
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fd4d 	bl	801095c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	3330      	adds	r3, #48	; 0x30
 8010ec6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010eca:	491e      	ldr	r1, [pc, #120]	; (8010f44 <sync_fs+0xd8>)
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fd45 	bl	801095c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3330      	adds	r3, #48	; 0x30
 8010ed6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7ff fd3b 	bl	801095c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	3330      	adds	r3, #48	; 0x30
 8010eea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7ff fd31 	bl	801095c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	69db      	ldr	r3, [r3, #28]
 8010efe:	1c5a      	adds	r2, r3, #1
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7858      	ldrb	r0, [r3, #1]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f12:	2301      	movs	r3, #1
 8010f14:	f7ff fc8e 	bl	8010834 <disk_write>
			fs->fsi_flag = 0;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	785b      	ldrb	r3, [r3, #1]
 8010f22:	2200      	movs	r2, #0
 8010f24:	2100      	movs	r1, #0
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fca4 	bl	8010874 <disk_ioctl>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d001      	beq.n	8010f36 <sync_fs+0xca>
 8010f32:	2301      	movs	r3, #1
 8010f34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3710      	adds	r7, #16
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	41615252 	.word	0x41615252
 8010f44:	61417272 	.word	0x61417272

08010f48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	3b02      	subs	r3, #2
 8010f56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	695b      	ldr	r3, [r3, #20]
 8010f5c:	3b02      	subs	r3, #2
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d301      	bcc.n	8010f68 <clust2sect+0x20>
 8010f64:	2300      	movs	r3, #0
 8010f66:	e008      	b.n	8010f7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	895b      	ldrh	r3, [r3, #10]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	fb03 f202 	mul.w	r2, r3, r2
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f78:	4413      	add	r3, r2
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b086      	sub	sp, #24
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d904      	bls.n	8010fa6 <get_fat+0x20>
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	695b      	ldr	r3, [r3, #20]
 8010fa0:	683a      	ldr	r2, [r7, #0]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d302      	bcc.n	8010fac <get_fat+0x26>
		val = 1;	/* Internal error */
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	617b      	str	r3, [r7, #20]
 8010faa:	e08f      	b.n	80110cc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	2b03      	cmp	r3, #3
 8010fb8:	d062      	beq.n	8011080 <get_fat+0xfa>
 8010fba:	2b03      	cmp	r3, #3
 8010fbc:	dc7c      	bgt.n	80110b8 <get_fat+0x132>
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d002      	beq.n	8010fc8 <get_fat+0x42>
 8010fc2:	2b02      	cmp	r3, #2
 8010fc4:	d042      	beq.n	801104c <get_fat+0xc6>
 8010fc6:	e077      	b.n	80110b8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	60fb      	str	r3, [r7, #12]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	085b      	lsrs	r3, r3, #1
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	6a1a      	ldr	r2, [r3, #32]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	0a5b      	lsrs	r3, r3, #9
 8010fde:	4413      	add	r3, r2
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	6938      	ldr	r0, [r7, #16]
 8010fe4:	f7ff ff14 	bl	8010e10 <move_window>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d167      	bne.n	80110be <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	60fa      	str	r2, [r7, #12]
 8010ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011000:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	6a1a      	ldr	r2, [r3, #32]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	0a5b      	lsrs	r3, r3, #9
 801100a:	4413      	add	r3, r2
 801100c:	4619      	mov	r1, r3
 801100e:	6938      	ldr	r0, [r7, #16]
 8011010:	f7ff fefe 	bl	8010e10 <move_window>
 8011014:	4603      	mov	r3, r0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d153      	bne.n	80110c2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	4413      	add	r3, r2
 8011024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011028:	021b      	lsls	r3, r3, #8
 801102a:	461a      	mov	r2, r3
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	4313      	orrs	r3, r2
 8011030:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d002      	beq.n	8011042 <get_fat+0xbc>
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	091b      	lsrs	r3, r3, #4
 8011040:	e002      	b.n	8011048 <get_fat+0xc2>
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011048:	617b      	str	r3, [r7, #20]
			break;
 801104a:	e03f      	b.n	80110cc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	6a1a      	ldr	r2, [r3, #32]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	0a1b      	lsrs	r3, r3, #8
 8011054:	4413      	add	r3, r2
 8011056:	4619      	mov	r1, r3
 8011058:	6938      	ldr	r0, [r7, #16]
 801105a:	f7ff fed9 	bl	8010e10 <move_window>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d130      	bne.n	80110c6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	005b      	lsls	r3, r3, #1
 801106e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011072:	4413      	add	r3, r2
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff fc1b 	bl	80108b0 <ld_word>
 801107a:	4603      	mov	r3, r0
 801107c:	617b      	str	r3, [r7, #20]
			break;
 801107e:	e025      	b.n	80110cc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	6a1a      	ldr	r2, [r3, #32]
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	09db      	lsrs	r3, r3, #7
 8011088:	4413      	add	r3, r2
 801108a:	4619      	mov	r1, r3
 801108c:	6938      	ldr	r0, [r7, #16]
 801108e:	f7ff febf 	bl	8010e10 <move_window>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d118      	bne.n	80110ca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80110a6:	4413      	add	r3, r2
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fc19 	bl	80108e0 <ld_dword>
 80110ae:	4603      	mov	r3, r0
 80110b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80110b4:	617b      	str	r3, [r7, #20]
			break;
 80110b6:	e009      	b.n	80110cc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80110b8:	2301      	movs	r3, #1
 80110ba:	617b      	str	r3, [r7, #20]
 80110bc:	e006      	b.n	80110cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80110be:	bf00      	nop
 80110c0:	e004      	b.n	80110cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80110c2:	bf00      	nop
 80110c4:	e002      	b.n	80110cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80110c6:	bf00      	nop
 80110c8:	e000      	b.n	80110cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80110ca:	bf00      	nop
		}
	}

	return val;
 80110cc:	697b      	ldr	r3, [r7, #20]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80110d6:	b590      	push	{r4, r7, lr}
 80110d8:	b089      	sub	sp, #36	; 0x24
 80110da:	af00      	add	r7, sp, #0
 80110dc:	60f8      	str	r0, [r7, #12]
 80110de:	60b9      	str	r1, [r7, #8]
 80110e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80110e2:	2302      	movs	r3, #2
 80110e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	f240 80d2 	bls.w	8011292 <put_fat+0x1bc>
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	f080 80cc 	bcs.w	8011292 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	2b03      	cmp	r3, #3
 8011100:	f000 8096 	beq.w	8011230 <put_fat+0x15a>
 8011104:	2b03      	cmp	r3, #3
 8011106:	f300 80cd 	bgt.w	80112a4 <put_fat+0x1ce>
 801110a:	2b01      	cmp	r3, #1
 801110c:	d002      	beq.n	8011114 <put_fat+0x3e>
 801110e:	2b02      	cmp	r3, #2
 8011110:	d06e      	beq.n	80111f0 <put_fat+0x11a>
 8011112:	e0c7      	b.n	80112a4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	61bb      	str	r3, [r7, #24]
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	085b      	lsrs	r3, r3, #1
 801111c:	69ba      	ldr	r2, [r7, #24]
 801111e:	4413      	add	r3, r2
 8011120:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	6a1a      	ldr	r2, [r3, #32]
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	0a5b      	lsrs	r3, r3, #9
 801112a:	4413      	add	r3, r2
 801112c:	4619      	mov	r1, r3
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f7ff fe6e 	bl	8010e10 <move_window>
 8011134:	4603      	mov	r3, r0
 8011136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011138:	7ffb      	ldrb	r3, [r7, #31]
 801113a:	2b00      	cmp	r3, #0
 801113c:	f040 80ab 	bne.w	8011296 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	1c59      	adds	r1, r3, #1
 801114a:	61b9      	str	r1, [r7, #24]
 801114c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011150:	4413      	add	r3, r2
 8011152:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	f003 0301 	and.w	r3, r3, #1
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00d      	beq.n	801117a <put_fat+0xa4>
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	b25b      	sxtb	r3, r3
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	b25a      	sxtb	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	011b      	lsls	r3, r3, #4
 8011170:	b25b      	sxtb	r3, r3
 8011172:	4313      	orrs	r3, r2
 8011174:	b25b      	sxtb	r3, r3
 8011176:	b2db      	uxtb	r3, r3
 8011178:	e001      	b.n	801117e <put_fat+0xa8>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	b2db      	uxtb	r3, r3
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2201      	movs	r2, #1
 8011186:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6a1a      	ldr	r2, [r3, #32]
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	0a5b      	lsrs	r3, r3, #9
 8011190:	4413      	add	r3, r2
 8011192:	4619      	mov	r1, r3
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f7ff fe3b 	bl	8010e10 <move_window>
 801119a:	4603      	mov	r3, r0
 801119c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801119e:	7ffb      	ldrb	r3, [r7, #31]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d17a      	bne.n	801129a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80111aa:	69bb      	ldr	r3, [r7, #24]
 80111ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111b0:	4413      	add	r3, r2
 80111b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	f003 0301 	and.w	r3, r3, #1
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d003      	beq.n	80111c6 <put_fat+0xf0>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	091b      	lsrs	r3, r3, #4
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	e00e      	b.n	80111e4 <put_fat+0x10e>
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	b25b      	sxtb	r3, r3
 80111cc:	f023 030f 	bic.w	r3, r3, #15
 80111d0:	b25a      	sxtb	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	0a1b      	lsrs	r3, r3, #8
 80111d6:	b25b      	sxtb	r3, r3
 80111d8:	f003 030f 	and.w	r3, r3, #15
 80111dc:	b25b      	sxtb	r3, r3
 80111de:	4313      	orrs	r3, r2
 80111e0:	b25b      	sxtb	r3, r3
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2201      	movs	r2, #1
 80111ec:	70da      	strb	r2, [r3, #3]
			break;
 80111ee:	e059      	b.n	80112a4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6a1a      	ldr	r2, [r3, #32]
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	0a1b      	lsrs	r3, r3, #8
 80111f8:	4413      	add	r3, r2
 80111fa:	4619      	mov	r1, r3
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7ff fe07 	bl	8010e10 <move_window>
 8011202:	4603      	mov	r3, r0
 8011204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011206:	7ffb      	ldrb	r3, [r7, #31]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d148      	bne.n	801129e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801121a:	4413      	add	r3, r2
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	b292      	uxth	r2, r2
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f7ff fb7f 	bl	8010926 <st_word>
			fs->wflag = 1;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2201      	movs	r2, #1
 801122c:	70da      	strb	r2, [r3, #3]
			break;
 801122e:	e039      	b.n	80112a4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6a1a      	ldr	r2, [r3, #32]
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	09db      	lsrs	r3, r3, #7
 8011238:	4413      	add	r3, r2
 801123a:	4619      	mov	r1, r3
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	f7ff fde7 	bl	8010e10 <move_window>
 8011242:	4603      	mov	r3, r0
 8011244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011246:	7ffb      	ldrb	r3, [r7, #31]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d12a      	bne.n	80112a2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011260:	4413      	add	r3, r2
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff fb3c 	bl	80108e0 <ld_dword>
 8011268:	4603      	mov	r3, r0
 801126a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801126e:	4323      	orrs	r3, r4
 8011270:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011280:	4413      	add	r3, r2
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fb69 	bl	801095c <st_dword>
			fs->wflag = 1;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2201      	movs	r2, #1
 801128e:	70da      	strb	r2, [r3, #3]
			break;
 8011290:	e008      	b.n	80112a4 <put_fat+0x1ce>
		}
	}
 8011292:	bf00      	nop
 8011294:	e006      	b.n	80112a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011296:	bf00      	nop
 8011298:	e004      	b.n	80112a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801129a:	bf00      	nop
 801129c:	e002      	b.n	80112a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801129e:	bf00      	nop
 80112a0:	e000      	b.n	80112a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80112a2:	bf00      	nop
	return res;
 80112a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3724      	adds	r7, #36	; 0x24
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd90      	pop	{r4, r7, pc}

080112ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b088      	sub	sp, #32
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	60f8      	str	r0, [r7, #12]
 80112b6:	60b9      	str	r1, [r7, #8]
 80112b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80112ba:	2300      	movs	r3, #0
 80112bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d904      	bls.n	80112d4 <remove_chain+0x26>
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d301      	bcc.n	80112d8 <remove_chain+0x2a>
 80112d4:	2302      	movs	r3, #2
 80112d6:	e04b      	b.n	8011370 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00c      	beq.n	80112f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80112de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112e2:	6879      	ldr	r1, [r7, #4]
 80112e4:	69b8      	ldr	r0, [r7, #24]
 80112e6:	f7ff fef6 	bl	80110d6 <put_fat>
 80112ea:	4603      	mov	r3, r0
 80112ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80112ee:	7ffb      	ldrb	r3, [r7, #31]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <remove_chain+0x4a>
 80112f4:	7ffb      	ldrb	r3, [r7, #31]
 80112f6:	e03b      	b.n	8011370 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80112f8:	68b9      	ldr	r1, [r7, #8]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7ff fe43 	bl	8010f86 <get_fat>
 8011300:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d031      	beq.n	801136c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d101      	bne.n	8011312 <remove_chain+0x64>
 801130e:	2302      	movs	r3, #2
 8011310:	e02e      	b.n	8011370 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011318:	d101      	bne.n	801131e <remove_chain+0x70>
 801131a:	2301      	movs	r3, #1
 801131c:	e028      	b.n	8011370 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801131e:	2200      	movs	r2, #0
 8011320:	68b9      	ldr	r1, [r7, #8]
 8011322:	69b8      	ldr	r0, [r7, #24]
 8011324:	f7ff fed7 	bl	80110d6 <put_fat>
 8011328:	4603      	mov	r3, r0
 801132a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801132c:	7ffb      	ldrb	r3, [r7, #31]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <remove_chain+0x88>
 8011332:	7ffb      	ldrb	r3, [r7, #31]
 8011334:	e01c      	b.n	8011370 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	691a      	ldr	r2, [r3, #16]
 801133a:	69bb      	ldr	r3, [r7, #24]
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	3b02      	subs	r3, #2
 8011340:	429a      	cmp	r2, r3
 8011342:	d20b      	bcs.n	801135c <remove_chain+0xae>
			fs->free_clst++;
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	69bb      	ldr	r3, [r7, #24]
 801134c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	791b      	ldrb	r3, [r3, #4]
 8011352:	f043 0301 	orr.w	r3, r3, #1
 8011356:	b2da      	uxtb	r2, r3
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	695b      	ldr	r3, [r3, #20]
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	429a      	cmp	r2, r3
 8011368:	d3c6      	bcc.n	80112f8 <remove_chain+0x4a>
 801136a:	e000      	b.n	801136e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801136c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801136e:	2300      	movs	r3, #0
}
 8011370:	4618      	mov	r0, r3
 8011372:	3720      	adds	r7, #32
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10d      	bne.n	80113aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d004      	beq.n	80113a4 <create_chain+0x2c>
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	695b      	ldr	r3, [r3, #20]
 801139e:	69ba      	ldr	r2, [r7, #24]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d31b      	bcc.n	80113dc <create_chain+0x64>
 80113a4:	2301      	movs	r3, #1
 80113a6:	61bb      	str	r3, [r7, #24]
 80113a8:	e018      	b.n	80113dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7ff fdea 	bl	8010f86 <get_fat>
 80113b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d801      	bhi.n	80113be <create_chain+0x46>
 80113ba:	2301      	movs	r3, #1
 80113bc:	e070      	b.n	80114a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113c4:	d101      	bne.n	80113ca <create_chain+0x52>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	e06a      	b.n	80114a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d201      	bcs.n	80113d8 <create_chain+0x60>
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	e063      	b.n	80114a0 <create_chain+0x128>
		scl = clst;
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80113e0:	69fb      	ldr	r3, [r7, #28]
 80113e2:	3301      	adds	r3, #1
 80113e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	69fa      	ldr	r2, [r7, #28]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d307      	bcc.n	8011400 <create_chain+0x88>
				ncl = 2;
 80113f0:	2302      	movs	r3, #2
 80113f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80113f4:	69fa      	ldr	r2, [r7, #28]
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d901      	bls.n	8011400 <create_chain+0x88>
 80113fc:	2300      	movs	r3, #0
 80113fe:	e04f      	b.n	80114a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011400:	69f9      	ldr	r1, [r7, #28]
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff fdbf 	bl	8010f86 <get_fat>
 8011408:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00e      	beq.n	801142e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b01      	cmp	r3, #1
 8011414:	d003      	beq.n	801141e <create_chain+0xa6>
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801141c:	d101      	bne.n	8011422 <create_chain+0xaa>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	e03e      	b.n	80114a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011422:	69fa      	ldr	r2, [r7, #28]
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	429a      	cmp	r2, r3
 8011428:	d1da      	bne.n	80113e0 <create_chain+0x68>
 801142a:	2300      	movs	r3, #0
 801142c:	e038      	b.n	80114a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801142e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011434:	69f9      	ldr	r1, [r7, #28]
 8011436:	6938      	ldr	r0, [r7, #16]
 8011438:	f7ff fe4d 	bl	80110d6 <put_fat>
 801143c:	4603      	mov	r3, r0
 801143e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d109      	bne.n	801145a <create_chain+0xe2>
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d006      	beq.n	801145a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	6938      	ldr	r0, [r7, #16]
 8011452:	f7ff fe40 	bl	80110d6 <put_fat>
 8011456:	4603      	mov	r3, r0
 8011458:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d116      	bne.n	801148e <create_chain+0x116>
		fs->last_clst = ncl;
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	69fa      	ldr	r2, [r7, #28]
 8011464:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	691a      	ldr	r2, [r3, #16]
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	3b02      	subs	r3, #2
 8011470:	429a      	cmp	r2, r3
 8011472:	d804      	bhi.n	801147e <create_chain+0x106>
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	1e5a      	subs	r2, r3, #1
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	791b      	ldrb	r3, [r3, #4]
 8011482:	f043 0301 	orr.w	r3, r3, #1
 8011486:	b2da      	uxtb	r2, r3
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	711a      	strb	r2, [r3, #4]
 801148c:	e007      	b.n	801149e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	2b01      	cmp	r3, #1
 8011492:	d102      	bne.n	801149a <create_chain+0x122>
 8011494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011498:	e000      	b.n	801149c <create_chain+0x124>
 801149a:	2301      	movs	r3, #1
 801149c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801149e:	69fb      	ldr	r3, [r7, #28]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3720      	adds	r7, #32
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b087      	sub	sp, #28
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114bc:	3304      	adds	r3, #4
 80114be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	0a5b      	lsrs	r3, r3, #9
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	8952      	ldrh	r2, [r2, #10]
 80114c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80114cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	1d1a      	adds	r2, r3, #4
 80114d2:	613a      	str	r2, [r7, #16]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d101      	bne.n	80114e2 <clmt_clust+0x3a>
 80114de:	2300      	movs	r3, #0
 80114e0:	e010      	b.n	8011504 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d307      	bcc.n	80114fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	617b      	str	r3, [r7, #20]
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	3304      	adds	r3, #4
 80114f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80114f8:	e7e9      	b.n	80114ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80114fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	4413      	add	r3, r2
}
 8011504:	4618      	mov	r0, r3
 8011506:	371c      	adds	r7, #28
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011526:	d204      	bcs.n	8011532 <dir_sdi+0x22>
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	f003 031f 	and.w	r3, r3, #31
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011532:	2302      	movs	r3, #2
 8011534:	e063      	b.n	80115fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	683a      	ldr	r2, [r7, #0]
 801153a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d106      	bne.n	8011556 <dir_sdi+0x46>
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b02      	cmp	r3, #2
 801154e:	d902      	bls.n	8011556 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011554:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10c      	bne.n	8011576 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	095b      	lsrs	r3, r3, #5
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	8912      	ldrh	r2, [r2, #8]
 8011564:	4293      	cmp	r3, r2
 8011566:	d301      	bcc.n	801156c <dir_sdi+0x5c>
 8011568:	2302      	movs	r3, #2
 801156a:	e048      	b.n	80115fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	61da      	str	r2, [r3, #28]
 8011574:	e029      	b.n	80115ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	895b      	ldrh	r3, [r3, #10]
 801157a:	025b      	lsls	r3, r3, #9
 801157c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801157e:	e019      	b.n	80115b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6979      	ldr	r1, [r7, #20]
 8011584:	4618      	mov	r0, r3
 8011586:	f7ff fcfe 	bl	8010f86 <get_fat>
 801158a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011592:	d101      	bne.n	8011598 <dir_sdi+0x88>
 8011594:	2301      	movs	r3, #1
 8011596:	e032      	b.n	80115fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d904      	bls.n	80115a8 <dir_sdi+0x98>
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	697a      	ldr	r2, [r7, #20]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d301      	bcc.n	80115ac <dir_sdi+0x9c>
 80115a8:	2302      	movs	r3, #2
 80115aa:	e028      	b.n	80115fe <dir_sdi+0xee>
			ofs -= csz;
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80115b4:	683a      	ldr	r2, [r7, #0]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d2e1      	bcs.n	8011580 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80115bc:	6979      	ldr	r1, [r7, #20]
 80115be:	6938      	ldr	r0, [r7, #16]
 80115c0:	f7ff fcc2 	bl	8010f48 <clust2sect>
 80115c4:	4602      	mov	r2, r0
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	69db      	ldr	r3, [r3, #28]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <dir_sdi+0xcc>
 80115d8:	2302      	movs	r3, #2
 80115da:	e010      	b.n	80115fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	69da      	ldr	r2, [r3, #28]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	0a5b      	lsrs	r3, r3, #9
 80115e4:	441a      	add	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115f6:	441a      	add	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3718      	adds	r7, #24
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b086      	sub	sp, #24
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
 801160e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	695b      	ldr	r3, [r3, #20]
 801161a:	3320      	adds	r3, #32
 801161c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	69db      	ldr	r3, [r3, #28]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d003      	beq.n	801162e <dir_next+0x28>
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801162c:	d301      	bcc.n	8011632 <dir_next+0x2c>
 801162e:	2304      	movs	r3, #4
 8011630:	e0aa      	b.n	8011788 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011638:	2b00      	cmp	r3, #0
 801163a:	f040 8098 	bne.w	801176e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	1c5a      	adds	r2, r3, #1
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	699b      	ldr	r3, [r3, #24]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d10b      	bne.n	8011668 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	095b      	lsrs	r3, r3, #5
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	8912      	ldrh	r2, [r2, #8]
 8011658:	4293      	cmp	r3, r2
 801165a:	f0c0 8088 	bcc.w	801176e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	61da      	str	r2, [r3, #28]
 8011664:	2304      	movs	r3, #4
 8011666:	e08f      	b.n	8011788 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	0a5b      	lsrs	r3, r3, #9
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	8952      	ldrh	r2, [r2, #10]
 8011670:	3a01      	subs	r2, #1
 8011672:	4013      	ands	r3, r2
 8011674:	2b00      	cmp	r3, #0
 8011676:	d17a      	bne.n	801176e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	4619      	mov	r1, r3
 8011680:	4610      	mov	r0, r2
 8011682:	f7ff fc80 	bl	8010f86 <get_fat>
 8011686:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d801      	bhi.n	8011692 <dir_next+0x8c>
 801168e:	2302      	movs	r3, #2
 8011690:	e07a      	b.n	8011788 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011698:	d101      	bne.n	801169e <dir_next+0x98>
 801169a:	2301      	movs	r3, #1
 801169c:	e074      	b.n	8011788 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	695b      	ldr	r3, [r3, #20]
 80116a2:	697a      	ldr	r2, [r7, #20]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d358      	bcc.n	801175a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d104      	bne.n	80116b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	61da      	str	r2, [r3, #28]
 80116b4:	2304      	movs	r3, #4
 80116b6:	e067      	b.n	8011788 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	699b      	ldr	r3, [r3, #24]
 80116be:	4619      	mov	r1, r3
 80116c0:	4610      	mov	r0, r2
 80116c2:	f7ff fe59 	bl	8011378 <create_chain>
 80116c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <dir_next+0xcc>
 80116ce:	2307      	movs	r3, #7
 80116d0:	e05a      	b.n	8011788 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d101      	bne.n	80116dc <dir_next+0xd6>
 80116d8:	2302      	movs	r3, #2
 80116da:	e055      	b.n	8011788 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116e2:	d101      	bne.n	80116e8 <dir_next+0xe2>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e04f      	b.n	8011788 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f7ff fb4d 	bl	8010d88 <sync_window>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d001      	beq.n	80116f8 <dir_next+0xf2>
 80116f4:	2301      	movs	r3, #1
 80116f6:	e047      	b.n	8011788 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	3330      	adds	r3, #48	; 0x30
 80116fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011700:	2100      	movs	r1, #0
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff f977 	bl	80109f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011708:	2300      	movs	r3, #0
 801170a:	613b      	str	r3, [r7, #16]
 801170c:	6979      	ldr	r1, [r7, #20]
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7ff fc1a 	bl	8010f48 <clust2sect>
 8011714:	4602      	mov	r2, r0
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	62da      	str	r2, [r3, #44]	; 0x2c
 801171a:	e012      	b.n	8011742 <dir_next+0x13c>
						fs->wflag = 1;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2201      	movs	r2, #1
 8011720:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f7ff fb30 	bl	8010d88 <sync_window>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <dir_next+0x12c>
 801172e:	2301      	movs	r3, #1
 8011730:	e02a      	b.n	8011788 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	3301      	adds	r3, #1
 8011736:	613b      	str	r3, [r7, #16]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801173c:	1c5a      	adds	r2, r3, #1
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	62da      	str	r2, [r3, #44]	; 0x2c
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	895b      	ldrh	r3, [r3, #10]
 8011746:	461a      	mov	r2, r3
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	4293      	cmp	r3, r2
 801174c:	d3e6      	bcc.n	801171c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	1ad2      	subs	r2, r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011760:	6979      	ldr	r1, [r7, #20]
 8011762:	68f8      	ldr	r0, [r7, #12]
 8011764:	f7ff fbf0 	bl	8010f48 <clust2sect>
 8011768:	4602      	mov	r2, r0
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011780:	441a      	add	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3718      	adds	r7, #24
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b086      	sub	sp, #24
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80117a0:	2100      	movs	r1, #0
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff feb4 	bl	8011510 <dir_sdi>
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d12b      	bne.n	801180a <dir_alloc+0x7a>
		n = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	69db      	ldr	r3, [r3, #28]
 80117ba:	4619      	mov	r1, r3
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f7ff fb27 	bl	8010e10 <move_window>
 80117c2:	4603      	mov	r3, r0
 80117c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80117c6:	7dfb      	ldrb	r3, [r7, #23]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d11d      	bne.n	8011808 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6a1b      	ldr	r3, [r3, #32]
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2be5      	cmp	r3, #229	; 0xe5
 80117d4:	d004      	beq.n	80117e0 <dir_alloc+0x50>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a1b      	ldr	r3, [r3, #32]
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d107      	bne.n	80117f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	3301      	adds	r3, #1
 80117e4:	613b      	str	r3, [r7, #16]
 80117e6:	693a      	ldr	r2, [r7, #16]
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d102      	bne.n	80117f4 <dir_alloc+0x64>
 80117ee:	e00c      	b.n	801180a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80117f0:	2300      	movs	r3, #0
 80117f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80117f4:	2101      	movs	r1, #1
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff ff05 	bl	8011606 <dir_next>
 80117fc:	4603      	mov	r3, r0
 80117fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011800:	7dfb      	ldrb	r3, [r7, #23]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0d7      	beq.n	80117b6 <dir_alloc+0x26>
 8011806:	e000      	b.n	801180a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011808:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	2b04      	cmp	r3, #4
 801180e:	d101      	bne.n	8011814 <dir_alloc+0x84>
 8011810:	2307      	movs	r3, #7
 8011812:	75fb      	strb	r3, [r7, #23]
	return res;
 8011814:	7dfb      	ldrb	r3, [r7, #23]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b084      	sub	sp, #16
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	331a      	adds	r3, #26
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff f83f 	bl	80108b0 <ld_word>
 8011832:	4603      	mov	r3, r0
 8011834:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	2b03      	cmp	r3, #3
 801183c:	d109      	bne.n	8011852 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	3314      	adds	r3, #20
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff f834 	bl	80108b0 <ld_word>
 8011848:	4603      	mov	r3, r0
 801184a:	041b      	lsls	r3, r3, #16
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	4313      	orrs	r3, r2
 8011850:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011852:	68fb      	ldr	r3, [r7, #12]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	331a      	adds	r3, #26
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	b292      	uxth	r2, r2
 8011870:	4611      	mov	r1, r2
 8011872:	4618      	mov	r0, r3
 8011874:	f7ff f857 	bl	8010926 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b03      	cmp	r3, #3
 801187e:	d109      	bne.n	8011894 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	f103 0214 	add.w	r2, r3, #20
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	0c1b      	lsrs	r3, r3, #16
 801188a:	b29b      	uxth	r3, r3
 801188c:	4619      	mov	r1, r3
 801188e:	4610      	mov	r0, r2
 8011890:	f7ff f849 	bl	8010926 <st_word>
	}
}
 8011894:	bf00      	nop
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80118aa:	2100      	movs	r1, #0
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7ff fe2f 	bl	8011510 <dir_sdi>
 80118b2:	4603      	mov	r3, r0
 80118b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80118b6:	7dfb      	ldrb	r3, [r7, #23]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <dir_find+0x24>
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
 80118be:	e03e      	b.n	801193e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	69db      	ldr	r3, [r3, #28]
 80118c4:	4619      	mov	r1, r3
 80118c6:	6938      	ldr	r0, [r7, #16]
 80118c8:	f7ff faa2 	bl	8010e10 <move_window>
 80118cc:	4603      	mov	r3, r0
 80118ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80118d0:	7dfb      	ldrb	r3, [r7, #23]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d12f      	bne.n	8011936 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a1b      	ldr	r3, [r3, #32]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80118de:	7bfb      	ldrb	r3, [r7, #15]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d102      	bne.n	80118ea <dir_find+0x4e>
 80118e4:	2304      	movs	r3, #4
 80118e6:	75fb      	strb	r3, [r7, #23]
 80118e8:	e028      	b.n	801193c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6a1b      	ldr	r3, [r3, #32]
 80118ee:	330b      	adds	r3, #11
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a1b      	ldr	r3, [r3, #32]
 8011900:	330b      	adds	r3, #11
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f003 0308 	and.w	r3, r3, #8
 8011908:	2b00      	cmp	r3, #0
 801190a:	d10a      	bne.n	8011922 <dir_find+0x86>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6a18      	ldr	r0, [r3, #32]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3324      	adds	r3, #36	; 0x24
 8011914:	220b      	movs	r2, #11
 8011916:	4619      	mov	r1, r3
 8011918:	f7ff f888 	bl	8010a2c <mem_cmp>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011922:	2100      	movs	r1, #0
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7ff fe6e 	bl	8011606 <dir_next>
 801192a:	4603      	mov	r3, r0
 801192c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801192e:	7dfb      	ldrb	r3, [r7, #23]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d0c5      	beq.n	80118c0 <dir_find+0x24>
 8011934:	e002      	b.n	801193c <dir_find+0xa0>
		if (res != FR_OK) break;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801193a:	bf00      	nop

	return res;
 801193c:	7dfb      	ldrb	r3, [r7, #23]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3718      	adds	r7, #24
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b084      	sub	sp, #16
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011954:	2101      	movs	r1, #1
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff ff1a 	bl	8011790 <dir_alloc>
 801195c:	4603      	mov	r3, r0
 801195e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d11c      	bne.n	80119a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	69db      	ldr	r3, [r3, #28]
 801196a:	4619      	mov	r1, r3
 801196c:	68b8      	ldr	r0, [r7, #8]
 801196e:	f7ff fa4f 	bl	8010e10 <move_window>
 8011972:	4603      	mov	r3, r0
 8011974:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011976:	7bfb      	ldrb	r3, [r7, #15]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d111      	bne.n	80119a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6a1b      	ldr	r3, [r3, #32]
 8011980:	2220      	movs	r2, #32
 8011982:	2100      	movs	r1, #0
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff f836 	bl	80109f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6a18      	ldr	r0, [r3, #32]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3324      	adds	r3, #36	; 0x24
 8011992:	220b      	movs	r2, #11
 8011994:	4619      	mov	r1, r3
 8011996:	f7ff f80d 	bl	80109b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	2201      	movs	r2, #1
 801199e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
	...

080119ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b088      	sub	sp, #32
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	3324      	adds	r3, #36	; 0x24
 80119c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80119c2:	220b      	movs	r2, #11
 80119c4:	2120      	movs	r1, #32
 80119c6:	68b8      	ldr	r0, [r7, #8]
 80119c8:	f7ff f815 	bl	80109f6 <mem_set>
	si = i = 0; ni = 8;
 80119cc:	2300      	movs	r3, #0
 80119ce:	613b      	str	r3, [r7, #16]
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	61fb      	str	r3, [r7, #28]
 80119d4:	2308      	movs	r3, #8
 80119d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	1c5a      	adds	r2, r3, #1
 80119dc:	61fa      	str	r2, [r7, #28]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	4413      	add	r3, r2
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80119e6:	7efb      	ldrb	r3, [r7, #27]
 80119e8:	2b20      	cmp	r3, #32
 80119ea:	d94e      	bls.n	8011a8a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80119ec:	7efb      	ldrb	r3, [r7, #27]
 80119ee:	2b2f      	cmp	r3, #47	; 0x2f
 80119f0:	d006      	beq.n	8011a00 <create_name+0x54>
 80119f2:	7efb      	ldrb	r3, [r7, #27]
 80119f4:	2b5c      	cmp	r3, #92	; 0x5c
 80119f6:	d110      	bne.n	8011a1a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80119f8:	e002      	b.n	8011a00 <create_name+0x54>
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	3301      	adds	r3, #1
 80119fe:	61fb      	str	r3, [r7, #28]
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	4413      	add	r3, r2
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b2f      	cmp	r3, #47	; 0x2f
 8011a0a:	d0f6      	beq.n	80119fa <create_name+0x4e>
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	4413      	add	r3, r2
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	2b5c      	cmp	r3, #92	; 0x5c
 8011a16:	d0f0      	beq.n	80119fa <create_name+0x4e>
			break;
 8011a18:	e038      	b.n	8011a8c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011a1a:	7efb      	ldrb	r3, [r7, #27]
 8011a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a1e:	d003      	beq.n	8011a28 <create_name+0x7c>
 8011a20:	693a      	ldr	r2, [r7, #16]
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	429a      	cmp	r2, r3
 8011a26:	d30c      	bcc.n	8011a42 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2b0b      	cmp	r3, #11
 8011a2c:	d002      	beq.n	8011a34 <create_name+0x88>
 8011a2e:	7efb      	ldrb	r3, [r7, #27]
 8011a30:	2b2e      	cmp	r3, #46	; 0x2e
 8011a32:	d001      	beq.n	8011a38 <create_name+0x8c>
 8011a34:	2306      	movs	r3, #6
 8011a36:	e044      	b.n	8011ac2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011a38:	2308      	movs	r3, #8
 8011a3a:	613b      	str	r3, [r7, #16]
 8011a3c:	230b      	movs	r3, #11
 8011a3e:	617b      	str	r3, [r7, #20]
			continue;
 8011a40:	e022      	b.n	8011a88 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011a42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	da04      	bge.n	8011a54 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011a4a:	7efb      	ldrb	r3, [r7, #27]
 8011a4c:	3b80      	subs	r3, #128	; 0x80
 8011a4e:	4a1f      	ldr	r2, [pc, #124]	; (8011acc <create_name+0x120>)
 8011a50:	5cd3      	ldrb	r3, [r2, r3]
 8011a52:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011a54:	7efb      	ldrb	r3, [r7, #27]
 8011a56:	4619      	mov	r1, r3
 8011a58:	481d      	ldr	r0, [pc, #116]	; (8011ad0 <create_name+0x124>)
 8011a5a:	f7ff f80e 	bl	8010a7a <chk_chr>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <create_name+0xbc>
 8011a64:	2306      	movs	r3, #6
 8011a66:	e02c      	b.n	8011ac2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011a68:	7efb      	ldrb	r3, [r7, #27]
 8011a6a:	2b60      	cmp	r3, #96	; 0x60
 8011a6c:	d905      	bls.n	8011a7a <create_name+0xce>
 8011a6e:	7efb      	ldrb	r3, [r7, #27]
 8011a70:	2b7a      	cmp	r3, #122	; 0x7a
 8011a72:	d802      	bhi.n	8011a7a <create_name+0xce>
 8011a74:	7efb      	ldrb	r3, [r7, #27]
 8011a76:	3b20      	subs	r3, #32
 8011a78:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	1c5a      	adds	r2, r3, #1
 8011a7e:	613a      	str	r2, [r7, #16]
 8011a80:	68ba      	ldr	r2, [r7, #8]
 8011a82:	4413      	add	r3, r2
 8011a84:	7efa      	ldrb	r2, [r7, #27]
 8011a86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011a88:	e7a6      	b.n	80119d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011a8c:	68fa      	ldr	r2, [r7, #12]
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	441a      	add	r2, r3
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <create_name+0xf4>
 8011a9c:	2306      	movs	r3, #6
 8011a9e:	e010      	b.n	8011ac2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	2be5      	cmp	r3, #229	; 0xe5
 8011aa6:	d102      	bne.n	8011aae <create_name+0x102>
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	2205      	movs	r2, #5
 8011aac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011aae:	7efb      	ldrb	r3, [r7, #27]
 8011ab0:	2b20      	cmp	r3, #32
 8011ab2:	d801      	bhi.n	8011ab8 <create_name+0x10c>
 8011ab4:	2204      	movs	r2, #4
 8011ab6:	e000      	b.n	8011aba <create_name+0x10e>
 8011ab8:	2200      	movs	r2, #0
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	330b      	adds	r3, #11
 8011abe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ac0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3720      	adds	r7, #32
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	080153f8 	.word	0x080153f8
 8011ad0:	080152e8 	.word	0x080152e8

08011ad4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011ae8:	e002      	b.n	8011af0 <follow_path+0x1c>
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	3301      	adds	r3, #1
 8011aee:	603b      	str	r3, [r7, #0]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b2f      	cmp	r3, #47	; 0x2f
 8011af6:	d0f8      	beq.n	8011aea <follow_path+0x16>
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	2b5c      	cmp	r3, #92	; 0x5c
 8011afe:	d0f4      	beq.n	8011aea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	2200      	movs	r2, #0
 8011b04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	2b1f      	cmp	r3, #31
 8011b0c:	d80a      	bhi.n	8011b24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2280      	movs	r2, #128	; 0x80
 8011b12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011b16:	2100      	movs	r1, #0
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7ff fcf9 	bl	8011510 <dir_sdi>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	75fb      	strb	r3, [r7, #23]
 8011b22:	e043      	b.n	8011bac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b24:	463b      	mov	r3, r7
 8011b26:	4619      	mov	r1, r3
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f7ff ff3f 	bl	80119ac <create_name>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b32:	7dfb      	ldrb	r3, [r7, #23]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d134      	bne.n	8011ba2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7ff feaf 	bl	801189c <dir_find>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d00a      	beq.n	8011b66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011b50:	7dfb      	ldrb	r3, [r7, #23]
 8011b52:	2b04      	cmp	r3, #4
 8011b54:	d127      	bne.n	8011ba6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b56:	7afb      	ldrb	r3, [r7, #11]
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d122      	bne.n	8011ba6 <follow_path+0xd2>
 8011b60:	2305      	movs	r3, #5
 8011b62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011b64:	e01f      	b.n	8011ba6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b66:	7afb      	ldrb	r3, [r7, #11]
 8011b68:	f003 0304 	and.w	r3, r3, #4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d11c      	bne.n	8011baa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	799b      	ldrb	r3, [r3, #6]
 8011b74:	f003 0310 	and.w	r3, r3, #16
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011b7c:	2305      	movs	r3, #5
 8011b7e:	75fb      	strb	r3, [r7, #23]
 8011b80:	e014      	b.n	8011bac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	695b      	ldr	r3, [r3, #20]
 8011b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b90:	4413      	add	r3, r2
 8011b92:	4619      	mov	r1, r3
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f7ff fe42 	bl	801181e <ld_clust>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ba0:	e7c0      	b.n	8011b24 <follow_path+0x50>
			if (res != FR_OK) break;
 8011ba2:	bf00      	nop
 8011ba4:	e002      	b.n	8011bac <follow_path+0xd8>
				break;
 8011ba6:	bf00      	nop
 8011ba8:	e000      	b.n	8011bac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011baa:	bf00      	nop
			}
		}
	}

	return res;
 8011bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b087      	sub	sp, #28
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bc2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d031      	beq.n	8011c30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	e002      	b.n	8011bda <get_ldnumber+0x24>
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	617b      	str	r3, [r7, #20]
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b20      	cmp	r3, #32
 8011be0:	d903      	bls.n	8011bea <get_ldnumber+0x34>
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b3a      	cmp	r3, #58	; 0x3a
 8011be8:	d1f4      	bne.n	8011bd4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	2b3a      	cmp	r3, #58	; 0x3a
 8011bf0:	d11c      	bne.n	8011c2c <get_ldnumber+0x76>
			tp = *path;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	60fa      	str	r2, [r7, #12]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	3b30      	subs	r3, #48	; 0x30
 8011c02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	2b09      	cmp	r3, #9
 8011c08:	d80e      	bhi.n	8011c28 <get_ldnumber+0x72>
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d10a      	bne.n	8011c28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d107      	bne.n	8011c28 <get_ldnumber+0x72>
					vol = (int)i;
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	617b      	str	r3, [r7, #20]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	697a      	ldr	r2, [r7, #20]
 8011c26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	e002      	b.n	8011c32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011c30:	693b      	ldr	r3, [r7, #16]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	371c      	adds	r7, #28
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr
	...

08011c40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	70da      	strb	r2, [r3, #3]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c56:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011c58:	6839      	ldr	r1, [r7, #0]
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7ff f8d8 	bl	8010e10 <move_window>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d001      	beq.n	8011c6a <check_fs+0x2a>
 8011c66:	2304      	movs	r3, #4
 8011c68:	e038      	b.n	8011cdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	3330      	adds	r3, #48	; 0x30
 8011c6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fe fe1c 	bl	80108b0 <ld_word>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d001      	beq.n	8011c88 <check_fs+0x48>
 8011c84:	2303      	movs	r3, #3
 8011c86:	e029      	b.n	8011cdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c8e:	2be9      	cmp	r3, #233	; 0xe9
 8011c90:	d009      	beq.n	8011ca6 <check_fs+0x66>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c98:	2beb      	cmp	r3, #235	; 0xeb
 8011c9a:	d11e      	bne.n	8011cda <check_fs+0x9a>
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011ca2:	2b90      	cmp	r3, #144	; 0x90
 8011ca4:	d119      	bne.n	8011cda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	3330      	adds	r3, #48	; 0x30
 8011caa:	3336      	adds	r3, #54	; 0x36
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe fe17 	bl	80108e0 <ld_dword>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011cb8:	4a0a      	ldr	r2, [pc, #40]	; (8011ce4 <check_fs+0xa4>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d101      	bne.n	8011cc2 <check_fs+0x82>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	e00c      	b.n	8011cdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	3330      	adds	r3, #48	; 0x30
 8011cc6:	3352      	adds	r3, #82	; 0x52
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fe fe09 	bl	80108e0 <ld_dword>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	4a05      	ldr	r2, [pc, #20]	; (8011ce8 <check_fs+0xa8>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d101      	bne.n	8011cda <check_fs+0x9a>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	e000      	b.n	8011cdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011cda:	2302      	movs	r3, #2
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	00544146 	.word	0x00544146
 8011ce8:	33544146 	.word	0x33544146

08011cec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b096      	sub	sp, #88	; 0x58
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d00:	68f8      	ldr	r0, [r7, #12]
 8011d02:	f7ff ff58 	bl	8011bb6 <get_ldnumber>
 8011d06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	da01      	bge.n	8011d12 <find_volume+0x26>
 8011d0e:	230b      	movs	r3, #11
 8011d10:	e22d      	b.n	801216e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d12:	4aa1      	ldr	r2, [pc, #644]	; (8011f98 <find_volume+0x2ac>)
 8011d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <find_volume+0x3a>
 8011d22:	230c      	movs	r3, #12
 8011d24:	e223      	b.n	801216e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011d2c:	79fb      	ldrb	r3, [r7, #7]
 8011d2e:	f023 0301 	bic.w	r3, r3, #1
 8011d32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d01a      	beq.n	8011d72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	785b      	ldrb	r3, [r3, #1]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fe fd17 	bl	8010774 <disk_status>
 8011d46:	4603      	mov	r3, r0
 8011d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d50:	f003 0301 	and.w	r3, r3, #1
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011d58:	79fb      	ldrb	r3, [r7, #7]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d007      	beq.n	8011d6e <find_volume+0x82>
 8011d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d62:	f003 0304 	and.w	r3, r3, #4
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011d6a:	230a      	movs	r3, #10
 8011d6c:	e1ff      	b.n	801216e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e1fd      	b.n	801216e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	2200      	movs	r2, #0
 8011d76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	785b      	ldrb	r3, [r3, #1]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fe fd0f 	bl	80107a8 <disk_initialize>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d94:	f003 0301 	and.w	r3, r3, #1
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	e1e6      	b.n	801216e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011da0:	79fb      	ldrb	r3, [r7, #7]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d007      	beq.n	8011db6 <find_volume+0xca>
 8011da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011daa:	f003 0304 	and.w	r3, r3, #4
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011db2:	230a      	movs	r3, #10
 8011db4:	e1db      	b.n	801216e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011db6:	2300      	movs	r3, #0
 8011db8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011dbe:	f7ff ff3f 	bl	8011c40 <check_fs>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d149      	bne.n	8011e64 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8011dd4:	e01e      	b.n	8011e14 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dde:	011b      	lsls	r3, r3, #4
 8011de0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011de4:	4413      	add	r3, r2
 8011de6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dea:	3304      	adds	r3, #4
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d006      	beq.n	8011e00 <find_volume+0x114>
 8011df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df4:	3308      	adds	r3, #8
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fe fd72 	bl	80108e0 <ld_dword>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	e000      	b.n	8011e02 <find_volume+0x116>
 8011e00:	2200      	movs	r2, #0
 8011e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	3358      	adds	r3, #88	; 0x58
 8011e08:	443b      	add	r3, r7
 8011e0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e10:	3301      	adds	r3, #1
 8011e12:	643b      	str	r3, [r7, #64]	; 0x40
 8011e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e16:	2b03      	cmp	r3, #3
 8011e18:	d9dd      	bls.n	8011dd6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d002      	beq.n	8011e2a <find_volume+0x13e>
 8011e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e26:	3b01      	subs	r3, #1
 8011e28:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	3358      	adds	r3, #88	; 0x58
 8011e30:	443b      	add	r3, r7
 8011e32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011e36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d005      	beq.n	8011e4a <find_volume+0x15e>
 8011e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e42:	f7ff fefd 	bl	8011c40 <check_fs>
 8011e46:	4603      	mov	r3, r0
 8011e48:	e000      	b.n	8011e4c <find_volume+0x160>
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d905      	bls.n	8011e64 <find_volume+0x178>
 8011e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e60:	2b03      	cmp	r3, #3
 8011e62:	d9e2      	bls.n	8011e2a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e68:	2b04      	cmp	r3, #4
 8011e6a:	d101      	bne.n	8011e70 <find_volume+0x184>
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e17e      	b.n	801216e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d901      	bls.n	8011e7c <find_volume+0x190>
 8011e78:	230d      	movs	r3, #13
 8011e7a:	e178      	b.n	801216e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7e:	3330      	adds	r3, #48	; 0x30
 8011e80:	330b      	adds	r3, #11
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fe fd14 	bl	80108b0 <ld_word>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e8e:	d001      	beq.n	8011e94 <find_volume+0x1a8>
 8011e90:	230d      	movs	r3, #13
 8011e92:	e16c      	b.n	801216e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e96:	3330      	adds	r3, #48	; 0x30
 8011e98:	3316      	adds	r3, #22
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fe fd08 	bl	80108b0 <ld_word>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d106      	bne.n	8011eb8 <find_volume+0x1cc>
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	3330      	adds	r3, #48	; 0x30
 8011eae:	3324      	adds	r3, #36	; 0x24
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fe fd15 	bl	80108e0 <ld_dword>
 8011eb6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ebc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	789b      	ldrb	r3, [r3, #2]
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d005      	beq.n	8011edc <find_volume+0x1f0>
 8011ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed2:	789b      	ldrb	r3, [r3, #2]
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d001      	beq.n	8011edc <find_volume+0x1f0>
 8011ed8:	230d      	movs	r3, #13
 8011eda:	e148      	b.n	801216e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	789b      	ldrb	r3, [r3, #2]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee4:	fb02 f303 	mul.w	r3, r2, r3
 8011ee8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef8:	895b      	ldrh	r3, [r3, #10]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d008      	beq.n	8011f10 <find_volume+0x224>
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	895b      	ldrh	r3, [r3, #10]
 8011f02:	461a      	mov	r2, r3
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	895b      	ldrh	r3, [r3, #10]
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d001      	beq.n	8011f14 <find_volume+0x228>
 8011f10:	230d      	movs	r3, #13
 8011f12:	e12c      	b.n	801216e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f16:	3330      	adds	r3, #48	; 0x30
 8011f18:	3311      	adds	r3, #17
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fcc8 	bl	80108b0 <ld_word>
 8011f20:	4603      	mov	r3, r0
 8011f22:	461a      	mov	r2, r3
 8011f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	891b      	ldrh	r3, [r3, #8]
 8011f2c:	f003 030f 	and.w	r3, r3, #15
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <find_volume+0x24e>
 8011f36:	230d      	movs	r3, #13
 8011f38:	e119      	b.n	801216e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3c:	3330      	adds	r3, #48	; 0x30
 8011f3e:	3313      	adds	r3, #19
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fe fcb5 	bl	80108b0 <ld_word>
 8011f46:	4603      	mov	r3, r0
 8011f48:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d106      	bne.n	8011f5e <find_volume+0x272>
 8011f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f52:	3330      	adds	r3, #48	; 0x30
 8011f54:	3320      	adds	r3, #32
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe fcc2 	bl	80108e0 <ld_dword>
 8011f5c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f60:	3330      	adds	r3, #48	; 0x30
 8011f62:	330e      	adds	r3, #14
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7fe fca3 	bl	80108b0 <ld_word>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <find_volume+0x28c>
 8011f74:	230d      	movs	r3, #13
 8011f76:	e0fa      	b.n	801216e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011f78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f7c:	4413      	add	r3, r2
 8011f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f80:	8912      	ldrh	r2, [r2, #8]
 8011f82:	0912      	lsrs	r2, r2, #4
 8011f84:	b292      	uxth	r2, r2
 8011f86:	4413      	add	r3, r2
 8011f88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d204      	bcs.n	8011f9c <find_volume+0x2b0>
 8011f92:	230d      	movs	r3, #13
 8011f94:	e0eb      	b.n	801216e <find_volume+0x482>
 8011f96:	bf00      	nop
 8011f98:	200010f4 	.word	0x200010f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa0:	1ad3      	subs	r3, r2, r3
 8011fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fa4:	8952      	ldrh	r2, [r2, #10]
 8011fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011faa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <find_volume+0x2ca>
 8011fb2:	230d      	movs	r3, #13
 8011fb4:	e0db      	b.n	801216e <find_volume+0x482>
		fmt = FS_FAT32;
 8011fb6:	2303      	movs	r3, #3
 8011fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d802      	bhi.n	8011fcc <find_volume+0x2e0>
 8011fc6:	2302      	movs	r3, #2
 8011fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fce:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d802      	bhi.n	8011fdc <find_volume+0x2f0>
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	1c9a      	adds	r2, r3, #2
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fe8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011fea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fee:	441a      	add	r2, r3
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011ff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff8:	441a      	add	r2, r3
 8011ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012002:	2b03      	cmp	r3, #3
 8012004:	d11e      	bne.n	8012044 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012008:	3330      	adds	r3, #48	; 0x30
 801200a:	332a      	adds	r3, #42	; 0x2a
 801200c:	4618      	mov	r0, r3
 801200e:	f7fe fc4f 	bl	80108b0 <ld_word>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d001      	beq.n	801201c <find_volume+0x330>
 8012018:	230d      	movs	r3, #13
 801201a:	e0a8      	b.n	801216e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	891b      	ldrh	r3, [r3, #8]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <find_volume+0x33c>
 8012024:	230d      	movs	r3, #13
 8012026:	e0a2      	b.n	801216e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	3330      	adds	r3, #48	; 0x30
 801202c:	332c      	adds	r3, #44	; 0x2c
 801202e:	4618      	mov	r0, r3
 8012030:	f7fe fc56 	bl	80108e0 <ld_dword>
 8012034:	4602      	mov	r2, r0
 8012036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012038:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	647b      	str	r3, [r7, #68]	; 0x44
 8012042:	e01f      	b.n	8012084 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012046:	891b      	ldrh	r3, [r3, #8]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d101      	bne.n	8012050 <find_volume+0x364>
 801204c:	230d      	movs	r3, #13
 801204e:	e08e      	b.n	801216e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	6a1a      	ldr	r2, [r3, #32]
 8012054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012056:	441a      	add	r2, r3
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801205c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012060:	2b02      	cmp	r3, #2
 8012062:	d103      	bne.n	801206c <find_volume+0x380>
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	695b      	ldr	r3, [r3, #20]
 8012068:	005b      	lsls	r3, r3, #1
 801206a:	e00a      	b.n	8012082 <find_volume+0x396>
 801206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206e:	695a      	ldr	r2, [r3, #20]
 8012070:	4613      	mov	r3, r2
 8012072:	005b      	lsls	r3, r3, #1
 8012074:	4413      	add	r3, r2
 8012076:	085a      	lsrs	r2, r3, #1
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	695b      	ldr	r3, [r3, #20]
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012082:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	699a      	ldr	r2, [r3, #24]
 8012088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801208a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801208e:	0a5b      	lsrs	r3, r3, #9
 8012090:	429a      	cmp	r2, r3
 8012092:	d201      	bcs.n	8012098 <find_volume+0x3ac>
 8012094:	230d      	movs	r3, #13
 8012096:	e06a      	b.n	801216e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801209e:	611a      	str	r2, [r3, #16]
 80120a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a2:	691a      	ldr	r2, [r3, #16]
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	2280      	movs	r2, #128	; 0x80
 80120ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80120ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120b2:	2b03      	cmp	r3, #3
 80120b4:	d149      	bne.n	801214a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	3330      	adds	r3, #48	; 0x30
 80120ba:	3330      	adds	r3, #48	; 0x30
 80120bc:	4618      	mov	r0, r3
 80120be:	f7fe fbf7 	bl	80108b0 <ld_word>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d140      	bne.n	801214a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80120c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ca:	3301      	adds	r3, #1
 80120cc:	4619      	mov	r1, r3
 80120ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80120d0:	f7fe fe9e 	bl	8010e10 <move_window>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d137      	bne.n	801214a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80120da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120dc:	2200      	movs	r2, #0
 80120de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	3330      	adds	r3, #48	; 0x30
 80120e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fe fbe1 	bl	80108b0 <ld_word>
 80120ee:	4603      	mov	r3, r0
 80120f0:	461a      	mov	r2, r3
 80120f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d127      	bne.n	801214a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80120fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fc:	3330      	adds	r3, #48	; 0x30
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fe fbee 	bl	80108e0 <ld_dword>
 8012104:	4603      	mov	r3, r0
 8012106:	4a1c      	ldr	r2, [pc, #112]	; (8012178 <find_volume+0x48c>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d11e      	bne.n	801214a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210e:	3330      	adds	r3, #48	; 0x30
 8012110:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012114:	4618      	mov	r0, r3
 8012116:	f7fe fbe3 	bl	80108e0 <ld_dword>
 801211a:	4603      	mov	r3, r0
 801211c:	4a17      	ldr	r2, [pc, #92]	; (801217c <find_volume+0x490>)
 801211e:	4293      	cmp	r3, r2
 8012120:	d113      	bne.n	801214a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	3330      	adds	r3, #48	; 0x30
 8012126:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801212a:	4618      	mov	r0, r3
 801212c:	f7fe fbd8 	bl	80108e0 <ld_dword>
 8012130:	4602      	mov	r2, r0
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012138:	3330      	adds	r3, #48	; 0x30
 801213a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801213e:	4618      	mov	r0, r3
 8012140:	f7fe fbce 	bl	80108e0 <ld_dword>
 8012144:	4602      	mov	r2, r0
 8012146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012148:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012150:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012152:	4b0b      	ldr	r3, [pc, #44]	; (8012180 <find_volume+0x494>)
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	3301      	adds	r3, #1
 8012158:	b29a      	uxth	r2, r3
 801215a:	4b09      	ldr	r3, [pc, #36]	; (8012180 <find_volume+0x494>)
 801215c:	801a      	strh	r2, [r3, #0]
 801215e:	4b08      	ldr	r3, [pc, #32]	; (8012180 <find_volume+0x494>)
 8012160:	881a      	ldrh	r2, [r3, #0]
 8012162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012164:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012168:	f7fe fdea 	bl	8010d40 <clear_lock>
#endif
	return FR_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3758      	adds	r7, #88	; 0x58
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	41615252 	.word	0x41615252
 801217c:	61417272 	.word	0x61417272
 8012180:	200010f8 	.word	0x200010f8

08012184 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801218e:	2309      	movs	r3, #9
 8012190:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d01c      	beq.n	80121d2 <validate+0x4e>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d018      	beq.n	80121d2 <validate+0x4e>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d013      	beq.n	80121d2 <validate+0x4e>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	889a      	ldrh	r2, [r3, #4]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	88db      	ldrh	r3, [r3, #6]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d10c      	bne.n	80121d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	785b      	ldrb	r3, [r3, #1]
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fe fad8 	bl	8010774 <disk_status>
 80121c4:	4603      	mov	r3, r0
 80121c6:	f003 0301 	and.w	r3, r3, #1
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d101      	bne.n	80121d2 <validate+0x4e>
			res = FR_OK;
 80121ce:	2300      	movs	r3, #0
 80121d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80121d2:	7bfb      	ldrb	r3, [r7, #15]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d102      	bne.n	80121de <validate+0x5a>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	e000      	b.n	80121e0 <validate+0x5c>
 80121de:	2300      	movs	r3, #0
 80121e0:	683a      	ldr	r2, [r7, #0]
 80121e2:	6013      	str	r3, [r2, #0]
	return res;
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
	...

080121f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	4613      	mov	r3, r2
 80121fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012202:	f107 0310 	add.w	r3, r7, #16
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff fcd5 	bl	8011bb6 <get_ldnumber>
 801220c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	2b00      	cmp	r3, #0
 8012212:	da01      	bge.n	8012218 <f_mount+0x28>
 8012214:	230b      	movs	r3, #11
 8012216:	e02b      	b.n	8012270 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012218:	4a17      	ldr	r2, [pc, #92]	; (8012278 <f_mount+0x88>)
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012220:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d005      	beq.n	8012234 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012228:	69b8      	ldr	r0, [r7, #24]
 801222a:	f7fe fd89 	bl	8010d40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	2200      	movs	r2, #0
 8012232:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	2200      	movs	r2, #0
 801223e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	490d      	ldr	r1, [pc, #52]	; (8012278 <f_mount+0x88>)
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d002      	beq.n	8012256 <f_mount+0x66>
 8012250:	79fb      	ldrb	r3, [r7, #7]
 8012252:	2b01      	cmp	r3, #1
 8012254:	d001      	beq.n	801225a <f_mount+0x6a>
 8012256:	2300      	movs	r3, #0
 8012258:	e00a      	b.n	8012270 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801225a:	f107 010c 	add.w	r1, r7, #12
 801225e:	f107 0308 	add.w	r3, r7, #8
 8012262:	2200      	movs	r2, #0
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff fd41 	bl	8011cec <find_volume>
 801226a:	4603      	mov	r3, r0
 801226c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3720      	adds	r7, #32
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	200010f4 	.word	0x200010f4

0801227c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b09a      	sub	sp, #104	; 0x68
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	4613      	mov	r3, r2
 8012288:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <f_open+0x18>
 8012290:	2309      	movs	r3, #9
 8012292:	e1ad      	b.n	80125f0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012294:	79fb      	ldrb	r3, [r7, #7]
 8012296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801229a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801229c:	79fa      	ldrb	r2, [r7, #7]
 801229e:	f107 0114 	add.w	r1, r7, #20
 80122a2:	f107 0308 	add.w	r3, r7, #8
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff fd20 	bl	8011cec <find_volume>
 80122ac:	4603      	mov	r3, r0
 80122ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80122b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f040 8191 	bne.w	80125de <f_open+0x362>
		dj.obj.fs = fs;
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	f107 0318 	add.w	r3, r7, #24
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7ff fc03 	bl	8011ad4 <follow_path>
 80122ce:	4603      	mov	r3, r0
 80122d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80122d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d11a      	bne.n	8012312 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80122dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80122e0:	b25b      	sxtb	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	da03      	bge.n	80122ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80122e6:	2306      	movs	r3, #6
 80122e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80122ec:	e011      	b.n	8012312 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80122ee:	79fb      	ldrb	r3, [r7, #7]
 80122f0:	f023 0301 	bic.w	r3, r3, #1
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	bf14      	ite	ne
 80122f8:	2301      	movne	r3, #1
 80122fa:	2300      	moveq	r3, #0
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	461a      	mov	r2, r3
 8012300:	f107 0318 	add.w	r3, r7, #24
 8012304:	4611      	mov	r1, r2
 8012306:	4618      	mov	r0, r3
 8012308:	f7fe fbd2 	bl	8010ab0 <chk_lock>
 801230c:	4603      	mov	r3, r0
 801230e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	f003 031c 	and.w	r3, r3, #28
 8012318:	2b00      	cmp	r3, #0
 801231a:	d07f      	beq.n	801241c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801231c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012320:	2b00      	cmp	r3, #0
 8012322:	d017      	beq.n	8012354 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012328:	2b04      	cmp	r3, #4
 801232a:	d10e      	bne.n	801234a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801232c:	f7fe fc1c 	bl	8010b68 <enq_lock>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d006      	beq.n	8012344 <f_open+0xc8>
 8012336:	f107 0318 	add.w	r3, r7, #24
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff fb03 	bl	8011946 <dir_register>
 8012340:	4603      	mov	r3, r0
 8012342:	e000      	b.n	8012346 <f_open+0xca>
 8012344:	2312      	movs	r3, #18
 8012346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801234a:	79fb      	ldrb	r3, [r7, #7]
 801234c:	f043 0308 	orr.w	r3, r3, #8
 8012350:	71fb      	strb	r3, [r7, #7]
 8012352:	e010      	b.n	8012376 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012354:	7fbb      	ldrb	r3, [r7, #30]
 8012356:	f003 0311 	and.w	r3, r3, #17
 801235a:	2b00      	cmp	r3, #0
 801235c:	d003      	beq.n	8012366 <f_open+0xea>
					res = FR_DENIED;
 801235e:	2307      	movs	r3, #7
 8012360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012364:	e007      	b.n	8012376 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012366:	79fb      	ldrb	r3, [r7, #7]
 8012368:	f003 0304 	and.w	r3, r3, #4
 801236c:	2b00      	cmp	r3, #0
 801236e:	d002      	beq.n	8012376 <f_open+0xfa>
 8012370:	2308      	movs	r3, #8
 8012372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801237a:	2b00      	cmp	r3, #0
 801237c:	d168      	bne.n	8012450 <f_open+0x1d4>
 801237e:	79fb      	ldrb	r3, [r7, #7]
 8012380:	f003 0308 	and.w	r3, r3, #8
 8012384:	2b00      	cmp	r3, #0
 8012386:	d063      	beq.n	8012450 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012388:	f7fc fbd0 	bl	800eb2c <get_fattime>
 801238c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012390:	330e      	adds	r3, #14
 8012392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012394:	4618      	mov	r0, r3
 8012396:	f7fe fae1 	bl	801095c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239c:	3316      	adds	r3, #22
 801239e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fe fadb 	bl	801095c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80123a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a8:	330b      	adds	r3, #11
 80123aa:	2220      	movs	r2, #32
 80123ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123b2:	4611      	mov	r1, r2
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff fa32 	bl	801181e <ld_clust>
 80123ba:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123c0:	2200      	movs	r2, #0
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7ff fa4a 	bl	801185c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	331c      	adds	r3, #28
 80123cc:	2100      	movs	r1, #0
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe fac4 	bl	801095c <st_dword>
					fs->wflag = 1;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2201      	movs	r2, #1
 80123d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80123da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d037      	beq.n	8012450 <f_open+0x1d4>
						dw = fs->winsect;
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80123e6:	f107 0318 	add.w	r3, r7, #24
 80123ea:	2200      	movs	r2, #0
 80123ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe ff5d 	bl	80112ae <remove_chain>
 80123f4:	4603      	mov	r3, r0
 80123f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80123fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d126      	bne.n	8012450 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe fd02 	bl	8010e10 <move_window>
 801240c:	4603      	mov	r3, r0
 801240e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012416:	3a01      	subs	r2, #1
 8012418:	60da      	str	r2, [r3, #12]
 801241a:	e019      	b.n	8012450 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801241c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012420:	2b00      	cmp	r3, #0
 8012422:	d115      	bne.n	8012450 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012424:	7fbb      	ldrb	r3, [r7, #30]
 8012426:	f003 0310 	and.w	r3, r3, #16
 801242a:	2b00      	cmp	r3, #0
 801242c:	d003      	beq.n	8012436 <f_open+0x1ba>
					res = FR_NO_FILE;
 801242e:	2304      	movs	r3, #4
 8012430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012434:	e00c      	b.n	8012450 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012436:	79fb      	ldrb	r3, [r7, #7]
 8012438:	f003 0302 	and.w	r3, r3, #2
 801243c:	2b00      	cmp	r3, #0
 801243e:	d007      	beq.n	8012450 <f_open+0x1d4>
 8012440:	7fbb      	ldrb	r3, [r7, #30]
 8012442:	f003 0301 	and.w	r3, r3, #1
 8012446:	2b00      	cmp	r3, #0
 8012448:	d002      	beq.n	8012450 <f_open+0x1d4>
						res = FR_DENIED;
 801244a:	2307      	movs	r3, #7
 801244c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012454:	2b00      	cmp	r3, #0
 8012456:	d128      	bne.n	80124aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012458:	79fb      	ldrb	r3, [r7, #7]
 801245a:	f003 0308 	and.w	r3, r3, #8
 801245e:	2b00      	cmp	r3, #0
 8012460:	d003      	beq.n	801246a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012462:	79fb      	ldrb	r3, [r7, #7]
 8012464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012468:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012478:	79fb      	ldrb	r3, [r7, #7]
 801247a:	f023 0301 	bic.w	r3, r3, #1
 801247e:	2b00      	cmp	r3, #0
 8012480:	bf14      	ite	ne
 8012482:	2301      	movne	r3, #1
 8012484:	2300      	moveq	r3, #0
 8012486:	b2db      	uxtb	r3, r3
 8012488:	461a      	mov	r2, r3
 801248a:	f107 0318 	add.w	r3, r7, #24
 801248e:	4611      	mov	r1, r2
 8012490:	4618      	mov	r0, r3
 8012492:	f7fe fb8b 	bl	8010bac <inc_lock>
 8012496:	4602      	mov	r2, r0
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	691b      	ldr	r3, [r3, #16]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d102      	bne.n	80124aa <f_open+0x22e>
 80124a4:	2302      	movs	r3, #2
 80124a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80124aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f040 8095 	bne.w	80125de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124b8:	4611      	mov	r1, r2
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7ff f9af 	bl	801181e <ld_clust>
 80124c0:	4602      	mov	r2, r0
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80124c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c8:	331c      	adds	r3, #28
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fe fa08 	bl	80108e0 <ld_dword>
 80124d0:	4602      	mov	r2, r0
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2200      	movs	r2, #0
 80124da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	88da      	ldrh	r2, [r3, #6]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	79fa      	ldrb	r2, [r7, #7]
 80124ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2200      	movs	r2, #0
 80124f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2200      	movs	r2, #0
 80124fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2200      	movs	r2, #0
 8012500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	3330      	adds	r3, #48	; 0x30
 8012506:	f44f 7200 	mov.w	r2, #512	; 0x200
 801250a:	2100      	movs	r1, #0
 801250c:	4618      	mov	r0, r3
 801250e:	f7fe fa72 	bl	80109f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012512:	79fb      	ldrb	r3, [r7, #7]
 8012514:	f003 0320 	and.w	r3, r3, #32
 8012518:	2b00      	cmp	r3, #0
 801251a:	d060      	beq.n	80125de <f_open+0x362>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d05c      	beq.n	80125de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	68da      	ldr	r2, [r3, #12]
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	895b      	ldrh	r3, [r3, #10]
 8012530:	025b      	lsls	r3, r3, #9
 8012532:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	689b      	ldr	r3, [r3, #8]
 8012538:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012540:	e016      	b.n	8012570 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012546:	4618      	mov	r0, r3
 8012548:	f7fe fd1d 	bl	8010f86 <get_fat>
 801254c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801254e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012550:	2b01      	cmp	r3, #1
 8012552:	d802      	bhi.n	801255a <f_open+0x2de>
 8012554:	2302      	movs	r3, #2
 8012556:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801255a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012560:	d102      	bne.n	8012568 <f_open+0x2ec>
 8012562:	2301      	movs	r3, #1
 8012564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801256a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012570:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012574:	2b00      	cmp	r3, #0
 8012576:	d103      	bne.n	8012580 <f_open+0x304>
 8012578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801257a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801257c:	429a      	cmp	r2, r3
 801257e:	d8e0      	bhi.n	8012542 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012584:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012586:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801258a:	2b00      	cmp	r3, #0
 801258c:	d127      	bne.n	80125de <f_open+0x362>
 801258e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012594:	2b00      	cmp	r3, #0
 8012596:	d022      	beq.n	80125de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801259c:	4618      	mov	r0, r3
 801259e:	f7fe fcd3 	bl	8010f48 <clust2sect>
 80125a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80125a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d103      	bne.n	80125b2 <f_open+0x336>
						res = FR_INT_ERR;
 80125aa:	2302      	movs	r3, #2
 80125ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80125b0:	e015      	b.n	80125de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80125b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125b4:	0a5a      	lsrs	r2, r3, #9
 80125b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125b8:	441a      	add	r2, r3
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	7858      	ldrb	r0, [r3, #1]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	6a1a      	ldr	r2, [r3, #32]
 80125cc:	2301      	movs	r3, #1
 80125ce:	f7fe f911 	bl	80107f4 <disk_read>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d002      	beq.n	80125de <f_open+0x362>
 80125d8:	2301      	movs	r3, #1
 80125da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80125de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <f_open+0x370>
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2200      	movs	r2, #0
 80125ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80125ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3768      	adds	r7, #104	; 0x68
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08e      	sub	sp, #56	; 0x38
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	2200      	movs	r2, #0
 801260e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f107 0214 	add.w	r2, r7, #20
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff fdb3 	bl	8012184 <validate>
 801261e:	4603      	mov	r3, r0
 8012620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012628:	2b00      	cmp	r3, #0
 801262a:	d107      	bne.n	801263c <f_read+0x44>
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	7d5b      	ldrb	r3, [r3, #21]
 8012630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <f_read+0x4a>
 801263c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012640:	e115      	b.n	801286e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	7d1b      	ldrb	r3, [r3, #20]
 8012646:	f003 0301 	and.w	r3, r3, #1
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <f_read+0x5a>
 801264e:	2307      	movs	r3, #7
 8012650:	e10d      	b.n	801286e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	68da      	ldr	r2, [r3, #12]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	1ad3      	subs	r3, r2, r3
 801265c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	429a      	cmp	r2, r3
 8012664:	f240 80fe 	bls.w	8012864 <f_read+0x26c>
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801266c:	e0fa      	b.n	8012864 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	699b      	ldr	r3, [r3, #24]
 8012672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012676:	2b00      	cmp	r3, #0
 8012678:	f040 80c6 	bne.w	8012808 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	699b      	ldr	r3, [r3, #24]
 8012680:	0a5b      	lsrs	r3, r3, #9
 8012682:	697a      	ldr	r2, [r7, #20]
 8012684:	8952      	ldrh	r2, [r2, #10]
 8012686:	3a01      	subs	r2, #1
 8012688:	4013      	ands	r3, r2
 801268a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d12f      	bne.n	80126f2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	699b      	ldr	r3, [r3, #24]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d103      	bne.n	80126a2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	633b      	str	r3, [r7, #48]	; 0x30
 80126a0:	e013      	b.n	80126ca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d007      	beq.n	80126ba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	4619      	mov	r1, r3
 80126b0:	68f8      	ldr	r0, [r7, #12]
 80126b2:	f7fe fef9 	bl	80114a8 <clmt_clust>
 80126b6:	6338      	str	r0, [r7, #48]	; 0x30
 80126b8:	e007      	b.n	80126ca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80126ba:	68fa      	ldr	r2, [r7, #12]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	69db      	ldr	r3, [r3, #28]
 80126c0:	4619      	mov	r1, r3
 80126c2:	4610      	mov	r0, r2
 80126c4:	f7fe fc5f 	bl	8010f86 <get_fat>
 80126c8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d804      	bhi.n	80126da <f_read+0xe2>
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2202      	movs	r2, #2
 80126d4:	755a      	strb	r2, [r3, #21]
 80126d6:	2302      	movs	r3, #2
 80126d8:	e0c9      	b.n	801286e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126e0:	d104      	bne.n	80126ec <f_read+0xf4>
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2201      	movs	r2, #1
 80126e6:	755a      	strb	r2, [r3, #21]
 80126e8:	2301      	movs	r3, #1
 80126ea:	e0c0      	b.n	801286e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80126f2:	697a      	ldr	r2, [r7, #20]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	69db      	ldr	r3, [r3, #28]
 80126f8:	4619      	mov	r1, r3
 80126fa:	4610      	mov	r0, r2
 80126fc:	f7fe fc24 	bl	8010f48 <clust2sect>
 8012700:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d104      	bne.n	8012712 <f_read+0x11a>
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2202      	movs	r2, #2
 801270c:	755a      	strb	r2, [r3, #21]
 801270e:	2302      	movs	r3, #2
 8012710:	e0ad      	b.n	801286e <f_read+0x276>
			sect += csect;
 8012712:	69ba      	ldr	r2, [r7, #24]
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	4413      	add	r3, r2
 8012718:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	0a5b      	lsrs	r3, r3, #9
 801271e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012722:	2b00      	cmp	r3, #0
 8012724:	d039      	beq.n	801279a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012726:	69fa      	ldr	r2, [r7, #28]
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	4413      	add	r3, r2
 801272c:	697a      	ldr	r2, [r7, #20]
 801272e:	8952      	ldrh	r2, [r2, #10]
 8012730:	4293      	cmp	r3, r2
 8012732:	d905      	bls.n	8012740 <f_read+0x148>
					cc = fs->csize - csect;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	895b      	ldrh	r3, [r3, #10]
 8012738:	461a      	mov	r2, r3
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	7858      	ldrb	r0, [r3, #1]
 8012744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012746:	69ba      	ldr	r2, [r7, #24]
 8012748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801274a:	f7fe f853 	bl	80107f4 <disk_read>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d004      	beq.n	801275e <f_read+0x166>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2201      	movs	r2, #1
 8012758:	755a      	strb	r2, [r3, #21]
 801275a:	2301      	movs	r3, #1
 801275c:	e087      	b.n	801286e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	7d1b      	ldrb	r3, [r3, #20]
 8012762:	b25b      	sxtb	r3, r3
 8012764:	2b00      	cmp	r3, #0
 8012766:	da14      	bge.n	8012792 <f_read+0x19a>
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	6a1a      	ldr	r2, [r3, #32]
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	1ad3      	subs	r3, r2, r3
 8012770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012772:	429a      	cmp	r2, r3
 8012774:	d90d      	bls.n	8012792 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	6a1a      	ldr	r2, [r3, #32]
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	025b      	lsls	r3, r3, #9
 8012780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012782:	18d0      	adds	r0, r2, r3
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	3330      	adds	r3, #48	; 0x30
 8012788:	f44f 7200 	mov.w	r2, #512	; 0x200
 801278c:	4619      	mov	r1, r3
 801278e:	f7fe f911 	bl	80109b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012794:	025b      	lsls	r3, r3, #9
 8012796:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012798:	e050      	b.n	801283c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6a1b      	ldr	r3, [r3, #32]
 801279e:	69ba      	ldr	r2, [r7, #24]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d02e      	beq.n	8012802 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	7d1b      	ldrb	r3, [r3, #20]
 80127a8:	b25b      	sxtb	r3, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	da18      	bge.n	80127e0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	7858      	ldrb	r0, [r3, #1]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6a1a      	ldr	r2, [r3, #32]
 80127bc:	2301      	movs	r3, #1
 80127be:	f7fe f839 	bl	8010834 <disk_write>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d004      	beq.n	80127d2 <f_read+0x1da>
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2201      	movs	r2, #1
 80127cc:	755a      	strb	r2, [r3, #21]
 80127ce:	2301      	movs	r3, #1
 80127d0:	e04d      	b.n	801286e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	7d1b      	ldrb	r3, [r3, #20]
 80127d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	7858      	ldrb	r0, [r3, #1]
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127ea:	2301      	movs	r3, #1
 80127ec:	69ba      	ldr	r2, [r7, #24]
 80127ee:	f7fe f801 	bl	80107f4 <disk_read>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d004      	beq.n	8012802 <f_read+0x20a>
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2201      	movs	r2, #1
 80127fc:	755a      	strb	r2, [r3, #21]
 80127fe:	2301      	movs	r3, #1
 8012800:	e035      	b.n	801286e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	69ba      	ldr	r2, [r7, #24]
 8012806:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012810:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012814:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	429a      	cmp	r2, r3
 801281c:	d901      	bls.n	8012822 <f_read+0x22a>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	699b      	ldr	r3, [r3, #24]
 801282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012830:	4413      	add	r3, r2
 8012832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012834:	4619      	mov	r1, r3
 8012836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012838:	f7fe f8bc 	bl	80109b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	4413      	add	r3, r2
 8012842:	627b      	str	r3, [r7, #36]	; 0x24
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	699a      	ldr	r2, [r3, #24]
 8012848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284a:	441a      	add	r2, r3
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	619a      	str	r2, [r3, #24]
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	441a      	add	r2, r3
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012860:	1ad3      	subs	r3, r2, r3
 8012862:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	f47f af01 	bne.w	801266e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801286c:	2300      	movs	r3, #0
}
 801286e:	4618      	mov	r0, r3
 8012870:	3738      	adds	r7, #56	; 0x38
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b08c      	sub	sp, #48	; 0x30
 801287a:	af00      	add	r7, sp, #0
 801287c:	60f8      	str	r0, [r7, #12]
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	607a      	str	r2, [r7, #4]
 8012882:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	2200      	movs	r2, #0
 801288c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	f107 0210 	add.w	r2, r7, #16
 8012894:	4611      	mov	r1, r2
 8012896:	4618      	mov	r0, r3
 8012898:	f7ff fc74 	bl	8012184 <validate>
 801289c:	4603      	mov	r3, r0
 801289e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80128a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d107      	bne.n	80128ba <f_write+0x44>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	7d5b      	ldrb	r3, [r3, #21]
 80128ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80128b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d002      	beq.n	80128c0 <f_write+0x4a>
 80128ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128be:	e14b      	b.n	8012b58 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	7d1b      	ldrb	r3, [r3, #20]
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <f_write+0x5a>
 80128cc:	2307      	movs	r3, #7
 80128ce:	e143      	b.n	8012b58 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	699a      	ldr	r2, [r3, #24]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	441a      	add	r2, r3
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	699b      	ldr	r3, [r3, #24]
 80128dc:	429a      	cmp	r2, r3
 80128de:	f080 812d 	bcs.w	8012b3c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	699b      	ldr	r3, [r3, #24]
 80128e6:	43db      	mvns	r3, r3
 80128e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80128ea:	e127      	b.n	8012b3c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	699b      	ldr	r3, [r3, #24]
 80128f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f040 80e3 	bne.w	8012ac0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	699b      	ldr	r3, [r3, #24]
 80128fe:	0a5b      	lsrs	r3, r3, #9
 8012900:	693a      	ldr	r2, [r7, #16]
 8012902:	8952      	ldrh	r2, [r2, #10]
 8012904:	3a01      	subs	r2, #1
 8012906:	4013      	ands	r3, r2
 8012908:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d143      	bne.n	8012998 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	699b      	ldr	r3, [r3, #24]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d10c      	bne.n	8012932 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012920:	2b00      	cmp	r3, #0
 8012922:	d11a      	bne.n	801295a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2100      	movs	r1, #0
 8012928:	4618      	mov	r0, r3
 801292a:	f7fe fd25 	bl	8011378 <create_chain>
 801292e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012930:	e013      	b.n	801295a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012936:	2b00      	cmp	r3, #0
 8012938:	d007      	beq.n	801294a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	699b      	ldr	r3, [r3, #24]
 801293e:	4619      	mov	r1, r3
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f7fe fdb1 	bl	80114a8 <clmt_clust>
 8012946:	62b8      	str	r0, [r7, #40]	; 0x28
 8012948:	e007      	b.n	801295a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	69db      	ldr	r3, [r3, #28]
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f7fe fd10 	bl	8011378 <create_chain>
 8012958:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295c:	2b00      	cmp	r3, #0
 801295e:	f000 80f2 	beq.w	8012b46 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	2b01      	cmp	r3, #1
 8012966:	d104      	bne.n	8012972 <f_write+0xfc>
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2202      	movs	r2, #2
 801296c:	755a      	strb	r2, [r3, #21]
 801296e:	2302      	movs	r3, #2
 8012970:	e0f2      	b.n	8012b58 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012978:	d104      	bne.n	8012984 <f_write+0x10e>
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2201      	movs	r2, #1
 801297e:	755a      	strb	r2, [r3, #21]
 8012980:	2301      	movs	r3, #1
 8012982:	e0e9      	b.n	8012b58 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012988:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d102      	bne.n	8012998 <f_write+0x122>
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012996:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	7d1b      	ldrb	r3, [r3, #20]
 801299c:	b25b      	sxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	da18      	bge.n	80129d4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	7858      	ldrb	r0, [r3, #1]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6a1a      	ldr	r2, [r3, #32]
 80129b0:	2301      	movs	r3, #1
 80129b2:	f7fd ff3f 	bl	8010834 <disk_write>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d004      	beq.n	80129c6 <f_write+0x150>
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2201      	movs	r2, #1
 80129c0:	755a      	strb	r2, [r3, #21]
 80129c2:	2301      	movs	r3, #1
 80129c4:	e0c8      	b.n	8012b58 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	7d1b      	ldrb	r3, [r3, #20]
 80129ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80129d4:	693a      	ldr	r2, [r7, #16]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	69db      	ldr	r3, [r3, #28]
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f7fe fab3 	bl	8010f48 <clust2sect>
 80129e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d104      	bne.n	80129f4 <f_write+0x17e>
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2202      	movs	r2, #2
 80129ee:	755a      	strb	r2, [r3, #21]
 80129f0:	2302      	movs	r3, #2
 80129f2:	e0b1      	b.n	8012b58 <f_write+0x2e2>
			sect += csect;
 80129f4:	697a      	ldr	r2, [r7, #20]
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	4413      	add	r3, r2
 80129fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	0a5b      	lsrs	r3, r3, #9
 8012a00:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d03c      	beq.n	8012a82 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012a08:	69ba      	ldr	r2, [r7, #24]
 8012a0a:	6a3b      	ldr	r3, [r7, #32]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	693a      	ldr	r2, [r7, #16]
 8012a10:	8952      	ldrh	r2, [r2, #10]
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d905      	bls.n	8012a22 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	895b      	ldrh	r3, [r3, #10]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	7858      	ldrb	r0, [r3, #1]
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	69f9      	ldr	r1, [r7, #28]
 8012a2c:	f7fd ff02 	bl	8010834 <disk_write>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d004      	beq.n	8012a40 <f_write+0x1ca>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	755a      	strb	r2, [r3, #21]
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	e08b      	b.n	8012b58 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6a1a      	ldr	r2, [r3, #32]
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	1ad3      	subs	r3, r2, r3
 8012a48:	6a3a      	ldr	r2, [r7, #32]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d915      	bls.n	8012a7a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	6a1a      	ldr	r2, [r3, #32]
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	025b      	lsls	r3, r3, #9
 8012a5e:	69fa      	ldr	r2, [r7, #28]
 8012a60:	4413      	add	r3, r2
 8012a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a66:	4619      	mov	r1, r3
 8012a68:	f7fd ffa4 	bl	80109b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7d1b      	ldrb	r3, [r3, #20]
 8012a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a74:	b2da      	uxtb	r2, r3
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012a7a:	6a3b      	ldr	r3, [r7, #32]
 8012a7c:	025b      	lsls	r3, r3, #9
 8012a7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012a80:	e03f      	b.n	8012b02 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	697a      	ldr	r2, [r7, #20]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d016      	beq.n	8012aba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	699a      	ldr	r2, [r3, #24]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d210      	bcs.n	8012aba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	7858      	ldrb	r0, [r3, #1]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	697a      	ldr	r2, [r7, #20]
 8012aa6:	f7fd fea5 	bl	80107f4 <disk_read>
 8012aaa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d004      	beq.n	8012aba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	755a      	strb	r2, [r3, #21]
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e04e      	b.n	8012b58 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	697a      	ldr	r2, [r7, #20]
 8012abe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	699b      	ldr	r3, [r3, #24]
 8012ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ac8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012acc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d901      	bls.n	8012ada <f_write+0x264>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	699b      	ldr	r3, [r3, #24]
 8012ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ae8:	4413      	add	r3, r2
 8012aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aec:	69f9      	ldr	r1, [r7, #28]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fd ff60 	bl	80109b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	7d1b      	ldrb	r3, [r3, #20]
 8012af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012afc:	b2da      	uxtb	r2, r3
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012b02:	69fa      	ldr	r2, [r7, #28]
 8012b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b06:	4413      	add	r3, r2
 8012b08:	61fb      	str	r3, [r7, #28]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	699a      	ldr	r2, [r3, #24]
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b10:	441a      	add	r2, r3
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	619a      	str	r2, [r3, #24]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	699b      	ldr	r3, [r3, #24]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	bf38      	it	cc
 8012b22:	461a      	movcc	r2, r3
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	60da      	str	r2, [r3, #12]
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2e:	441a      	add	r2, r3
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	1ad3      	subs	r3, r2, r3
 8012b3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	f47f aed4 	bne.w	80128ec <f_write+0x76>
 8012b44:	e000      	b.n	8012b48 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012b46:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	7d1b      	ldrb	r3, [r3, #20]
 8012b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3730      	adds	r7, #48	; 0x30
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b086      	sub	sp, #24
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f107 0208 	add.w	r2, r7, #8
 8012b6e:	4611      	mov	r1, r2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff fb07 	bl	8012184 <validate>
 8012b76:	4603      	mov	r3, r0
 8012b78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012b7a:	7dfb      	ldrb	r3, [r7, #23]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d168      	bne.n	8012c52 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	7d1b      	ldrb	r3, [r3, #20]
 8012b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d062      	beq.n	8012c52 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	7d1b      	ldrb	r3, [r3, #20]
 8012b90:	b25b      	sxtb	r3, r3
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	da15      	bge.n	8012bc2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	7858      	ldrb	r0, [r3, #1]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a1a      	ldr	r2, [r3, #32]
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	f7fd fe45 	bl	8010834 <disk_write>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <f_sync+0x54>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e04f      	b.n	8012c54 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	7d1b      	ldrb	r3, [r3, #20]
 8012bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012bc2:	f7fb ffb3 	bl	800eb2c <get_fattime>
 8012bc6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012bc8:	68ba      	ldr	r2, [r7, #8]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bce:	4619      	mov	r1, r3
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	f7fe f91d 	bl	8010e10 <move_window>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012bda:	7dfb      	ldrb	r3, [r7, #23]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d138      	bne.n	8012c52 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012be4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	330b      	adds	r3, #11
 8012bea:	781a      	ldrb	r2, [r3, #0]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	330b      	adds	r3, #11
 8012bf0:	f042 0220 	orr.w	r2, r2, #32
 8012bf4:	b2d2      	uxtb	r2, r2
 8012bf6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6818      	ldr	r0, [r3, #0]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	461a      	mov	r2, r3
 8012c02:	68f9      	ldr	r1, [r7, #12]
 8012c04:	f7fe fe2a 	bl	801185c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f103 021c 	add.w	r2, r3, #28
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	4619      	mov	r1, r3
 8012c14:	4610      	mov	r0, r2
 8012c16:	f7fd fea1 	bl	801095c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	3316      	adds	r3, #22
 8012c1e:	6939      	ldr	r1, [r7, #16]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fd fe9b 	bl	801095c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	3312      	adds	r3, #18
 8012c2a:	2100      	movs	r1, #0
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fd fe7a 	bl	8010926 <st_word>
					fs->wflag = 1;
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2201      	movs	r2, #1
 8012c36:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe f916 	bl	8010e6c <sync_fs>
 8012c40:	4603      	mov	r3, r0
 8012c42:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7d1b      	ldrb	r3, [r3, #20]
 8012c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c4c:	b2da      	uxtb	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3718      	adds	r7, #24
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff ff7b 	bl	8012b60 <f_sync>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012c6e:	7bfb      	ldrb	r3, [r7, #15]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d118      	bne.n	8012ca6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f107 0208 	add.w	r2, r7, #8
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fa81 	bl	8012184 <validate>
 8012c82:	4603      	mov	r3, r0
 8012c84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012c86:	7bfb      	ldrb	r3, [r7, #15]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d10c      	bne.n	8012ca6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fe f819 	bl	8010cc8 <dec_lock>
 8012c96:	4603      	mov	r3, r0
 8012c98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012c9a:	7bfb      	ldrb	r3, [r7, #15]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d102      	bne.n	8012ca6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8012cb0:	b590      	push	{r4, r7, lr}
 8012cb2:	b09d      	sub	sp, #116	; 0x74
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	607a      	str	r2, [r7, #4]
 8012cba:	603b      	str	r3, [r7, #0]
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8012cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cc8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8012cca:	f107 030c 	add.w	r3, r7, #12
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe ff71 	bl	8011bb6 <get_ldnumber>
 8012cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	da02      	bge.n	8012ce2 <f_mkfs+0x32>
 8012cdc:	230b      	movs	r3, #11
 8012cde:	f000 bc0d 	b.w	80134fc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8012ce2:	4a94      	ldr	r2, [pc, #592]	; (8012f34 <f_mkfs+0x284>)
 8012ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d005      	beq.n	8012cfa <f_mkfs+0x4a>
 8012cee:	4a91      	ldr	r2, [pc, #580]	; (8012f34 <f_mkfs+0x284>)
 8012cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8012cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8012d00:	2300      	movs	r3, #0
 8012d02:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8012d06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fd fd4c 	bl	80107a8 <disk_initialize>
 8012d10:	4603      	mov	r3, r0
 8012d12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8012d16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012d1a:	f003 0301 	and.w	r3, r3, #1
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <f_mkfs+0x76>
 8012d22:	2303      	movs	r3, #3
 8012d24:	e3ea      	b.n	80134fc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8012d26:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012d2a:	f003 0304 	and.w	r3, r3, #4
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <f_mkfs+0x86>
 8012d32:	230a      	movs	r3, #10
 8012d34:	e3e2      	b.n	80134fc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8012d36:	f107 0214 	add.w	r2, r7, #20
 8012d3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012d3e:	2103      	movs	r1, #3
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fd fd97 	bl	8010874 <disk_ioctl>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d10c      	bne.n	8012d66 <f_mkfs+0xb6>
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d009      	beq.n	8012d66 <f_mkfs+0xb6>
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d58:	d805      	bhi.n	8012d66 <f_mkfs+0xb6>
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	1e5a      	subs	r2, r3, #1
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <f_mkfs+0xba>
 8012d66:	2301      	movs	r3, #1
 8012d68:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8012d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d6e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <f_mkfs+0xce>
 8012d76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d309      	bcc.n	8012d92 <f_mkfs+0xe2>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012d84:	d805      	bhi.n	8012d92 <f_mkfs+0xe2>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	1e5a      	subs	r2, r3, #1
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d001      	beq.n	8012d96 <f_mkfs+0xe6>
 8012d92:	2313      	movs	r3, #19
 8012d94:	e3b2      	b.n	80134fc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8012d96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d9e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8012da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8012dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8012db0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	fb02 f303 	mul.w	r3, r2, r3
 8012db8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8012dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <f_mkfs+0x114>
 8012dc0:	230e      	movs	r3, #14
 8012dc2:	e39b      	b.n	80134fc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8012dc4:	f107 0210 	add.w	r2, r7, #16
 8012dc8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012dcc:	2101      	movs	r1, #1
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fd fd50 	bl	8010874 <disk_ioctl>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d001      	beq.n	8012dde <f_mkfs+0x12e>
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e38e      	b.n	80134fc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8012dde:	7afb      	ldrb	r3, [r7, #11]
 8012de0:	f003 0308 	and.w	r3, r3, #8
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d001      	beq.n	8012dec <f_mkfs+0x13c>
 8012de8:	2300      	movs	r3, #0
 8012dea:	e000      	b.n	8012dee <f_mkfs+0x13e>
 8012dec:	233f      	movs	r3, #63	; 0x3f
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d901      	bls.n	8012dfc <f_mkfs+0x14c>
 8012df8:	230e      	movs	r3, #14
 8012dfa:	e37f      	b.n	80134fc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8012dfc:	693a      	ldr	r2, [r7, #16]
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	1ad3      	subs	r3, r2, r3
 8012e02:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	2b7f      	cmp	r3, #127	; 0x7f
 8012e08:	d801      	bhi.n	8012e0e <f_mkfs+0x15e>
 8012e0a:	230e      	movs	r3, #14
 8012e0c:	e376      	b.n	80134fc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b80      	cmp	r3, #128	; 0x80
 8012e12:	d901      	bls.n	8012e18 <f_mkfs+0x168>
 8012e14:	2313      	movs	r3, #19
 8012e16:	e371      	b.n	80134fc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8012e18:	7afb      	ldrb	r3, [r7, #11]
 8012e1a:	f003 0302 	and.w	r3, r3, #2
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00d      	beq.n	8012e3e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8012e22:	7afb      	ldrb	r3, [r7, #11]
 8012e24:	f003 0307 	and.w	r3, r3, #7
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d004      	beq.n	8012e36 <f_mkfs+0x186>
 8012e2c:	7afb      	ldrb	r3, [r7, #11]
 8012e2e:	f003 0301 	and.w	r3, r3, #1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d103      	bne.n	8012e3e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8012e36:	2303      	movs	r3, #3
 8012e38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8012e3c:	e009      	b.n	8012e52 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8012e3e:	7afb      	ldrb	r3, [r7, #11]
 8012e40:	f003 0301 	and.w	r3, r3, #1
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d101      	bne.n	8012e4c <f_mkfs+0x19c>
 8012e48:	2313      	movs	r3, #19
 8012e4a:	e357      	b.n	80134fc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8012e4c:	2302      	movs	r3, #2
 8012e4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8012e56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e5a:	2b03      	cmp	r3, #3
 8012e5c:	d13c      	bne.n	8012ed8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8012e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d11b      	bne.n	8012e9c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	0c5b      	lsrs	r3, r3, #17
 8012e68:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e6e:	2301      	movs	r3, #1
 8012e70:	653b      	str	r3, [r7, #80]	; 0x50
 8012e72:	e005      	b.n	8012e80 <f_mkfs+0x1d0>
 8012e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e76:	3301      	adds	r3, #1
 8012e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8012e80:	4a2d      	ldr	r2, [pc, #180]	; (8012f38 <f_mkfs+0x288>)
 8012e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d007      	beq.n	8012e9c <f_mkfs+0x1ec>
 8012e8c:	4a2a      	ldr	r2, [pc, #168]	; (8012f38 <f_mkfs+0x288>)
 8012e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e94:	461a      	mov	r2, r3
 8012e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d2eb      	bcs.n	8012e74 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8012e9c:	693a      	ldr	r2, [r7, #16]
 8012e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ea4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	3302      	adds	r3, #2
 8012eaa:	009a      	lsls	r2, r3, #2
 8012eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012eae:	4413      	add	r3, r2
 8012eb0:	1e5a      	subs	r2, r3, #1
 8012eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012eb8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8012eba:	2320      	movs	r3, #32
 8012ebc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8012ec2:	6a3b      	ldr	r3, [r7, #32]
 8012ec4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d903      	bls.n	8012ed4 <f_mkfs+0x224>
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	4a1b      	ldr	r2, [pc, #108]	; (8012f3c <f_mkfs+0x28c>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d952      	bls.n	8012f7a <f_mkfs+0x2ca>
 8012ed4:	230e      	movs	r3, #14
 8012ed6:	e311      	b.n	80134fc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8012ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d11b      	bne.n	8012f16 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	0b1b      	lsrs	r3, r3, #12
 8012ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ee8:	2301      	movs	r3, #1
 8012eea:	653b      	str	r3, [r7, #80]	; 0x50
 8012eec:	e005      	b.n	8012efa <f_mkfs+0x24a>
 8012eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef6:	005b      	lsls	r3, r3, #1
 8012ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8012efa:	4a11      	ldr	r2, [pc, #68]	; (8012f40 <f_mkfs+0x290>)
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d007      	beq.n	8012f16 <f_mkfs+0x266>
 8012f06:	4a0e      	ldr	r2, [pc, #56]	; (8012f40 <f_mkfs+0x290>)
 8012f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d2eb      	bcs.n	8012eee <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8012f16:	693a      	ldr	r2, [r7, #16]
 8012f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f1e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8012f20:	6a3b      	ldr	r3, [r7, #32]
 8012f22:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d90c      	bls.n	8012f44 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8012f2a:	6a3b      	ldr	r3, [r7, #32]
 8012f2c:	3302      	adds	r3, #2
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f32:	e012      	b.n	8012f5a <f_mkfs+0x2aa>
 8012f34:	200010f4 	.word	0x200010f4
 8012f38:	08015478 	.word	0x08015478
 8012f3c:	0ffffff5 	.word	0x0ffffff5
 8012f40:	08015488 	.word	0x08015488
				} else {
					fmt = FS_FAT12;
 8012f44:	2301      	movs	r3, #1
 8012f46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8012f4a:	6a3a      	ldr	r2, [r7, #32]
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	005b      	lsls	r3, r3, #1
 8012f50:	4413      	add	r3, r2
 8012f52:	3301      	adds	r3, #1
 8012f54:	085b      	lsrs	r3, r3, #1
 8012f56:	3303      	adds	r3, #3
 8012f58:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8012f5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f5e:	4413      	add	r3, r2
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f68:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8012f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f70:	015a      	lsls	r2, r3, #5
 8012f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f78:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8012f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f7e:	4413      	add	r3, r2
 8012f80:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8012f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f86:	fb03 f202 	mul.w	r2, r3, r2
 8012f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f8c:	4413      	add	r3, r2
 8012f8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012f90:	4413      	add	r3, r2
 8012f92:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8012f94:	697a      	ldr	r2, [r7, #20]
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	4413      	add	r3, r2
 8012f9a:	1e5a      	subs	r2, r3, #1
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	425b      	negs	r3, r3
 8012fa0:	401a      	ands	r2, r3
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8012fa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012fac:	2b03      	cmp	r3, #3
 8012fae:	d108      	bne.n	8012fc2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8012fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012fb4:	4413      	add	r3, r2
 8012fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8012fb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012fbc:	4413      	add	r3, r2
 8012fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8012fc0:	e006      	b.n	8012fd0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8012fc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fcc:	4413      	add	r3, r2
 8012fce:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8012fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd2:	011a      	lsls	r2, r3, #4
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	441a      	add	r2, r3
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	1ad2      	subs	r2, r2, r3
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d901      	bls.n	8012fe6 <f_mkfs+0x336>
 8012fe2:	230e      	movs	r3, #14
 8012fe4:	e28a      	b.n	80134fc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8012fe6:	693a      	ldr	r2, [r7, #16]
 8012fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fea:	1ad2      	subs	r2, r2, r3
 8012fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ff0:	fb01 f303 	mul.w	r3, r1, r3
 8012ff4:	1ad2      	subs	r2, r2, r3
 8012ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012ff8:	1ad2      	subs	r2, r2, r3
 8012ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013000:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013002:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013006:	2b03      	cmp	r3, #3
 8013008:	d10f      	bne.n	801302a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013010:	4293      	cmp	r3, r2
 8013012:	d80a      	bhi.n	801302a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d105      	bne.n	8013026 <f_mkfs+0x376>
 801301a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801301c:	085b      	lsrs	r3, r3, #1
 801301e:	607b      	str	r3, [r7, #4]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d144      	bne.n	80130b0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013026:	230e      	movs	r3, #14
 8013028:	e268      	b.n	80134fc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801302a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801302e:	2b02      	cmp	r3, #2
 8013030:	d133      	bne.n	801309a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013032:	6a3b      	ldr	r3, [r7, #32]
 8013034:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013038:	4293      	cmp	r3, r2
 801303a:	d91e      	bls.n	801307a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d107      	bne.n	8013052 <f_mkfs+0x3a2>
 8013042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013044:	005b      	lsls	r3, r3, #1
 8013046:	2b40      	cmp	r3, #64	; 0x40
 8013048:	d803      	bhi.n	8013052 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	e033      	b.n	80130ba <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013052:	7afb      	ldrb	r3, [r7, #11]
 8013054:	f003 0302 	and.w	r3, r3, #2
 8013058:	2b00      	cmp	r3, #0
 801305a:	d003      	beq.n	8013064 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801305c:	2303      	movs	r3, #3
 801305e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013062:	e02a      	b.n	80130ba <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d105      	bne.n	8013076 <f_mkfs+0x3c6>
 801306a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801306c:	005b      	lsls	r3, r3, #1
 801306e:	607b      	str	r3, [r7, #4]
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b80      	cmp	r3, #128	; 0x80
 8013074:	d91e      	bls.n	80130b4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013076:	230e      	movs	r3, #14
 8013078:	e240      	b.n	80134fc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013080:	4293      	cmp	r3, r2
 8013082:	d80a      	bhi.n	801309a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d105      	bne.n	8013096 <f_mkfs+0x3e6>
 801308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801308c:	005b      	lsls	r3, r3, #1
 801308e:	607b      	str	r3, [r7, #4]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b80      	cmp	r3, #128	; 0x80
 8013094:	d910      	bls.n	80130b8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8013096:	230e      	movs	r3, #14
 8013098:	e230      	b.n	80134fc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801309a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d10c      	bne.n	80130bc <f_mkfs+0x40c>
 80130a2:	6a3b      	ldr	r3, [r7, #32]
 80130a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d907      	bls.n	80130bc <f_mkfs+0x40c>
 80130ac:	230e      	movs	r3, #14
 80130ae:	e225      	b.n	80134fc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80130b0:	bf00      	nop
 80130b2:	e6ce      	b.n	8012e52 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80130b4:	bf00      	nop
 80130b6:	e6cc      	b.n	8012e52 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80130b8:	bf00      	nop
			pau = au;
 80130ba:	e6ca      	b.n	8012e52 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80130bc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80130be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130c0:	461a      	mov	r2, r3
 80130c2:	2100      	movs	r1, #0
 80130c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130c6:	f7fd fc96 	bl	80109f6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80130ca:	220b      	movs	r2, #11
 80130cc:	49b2      	ldr	r1, [pc, #712]	; (8013398 <f_mkfs+0x6e8>)
 80130ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130d0:	f7fd fc70 	bl	80109b4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80130d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d6:	330b      	adds	r3, #11
 80130d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130da:	4611      	mov	r1, r2
 80130dc:	4618      	mov	r0, r3
 80130de:	f7fd fc22 	bl	8010926 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	330d      	adds	r3, #13
 80130e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130e8:	b2d2      	uxtb	r2, r2
 80130ea:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80130ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ee:	330e      	adds	r3, #14
 80130f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130f2:	b292      	uxth	r2, r2
 80130f4:	4611      	mov	r1, r2
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fd fc15 	bl	8010926 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80130fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fe:	3310      	adds	r3, #16
 8013100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013102:	b2d2      	uxtb	r2, r2
 8013104:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013108:	f103 0211 	add.w	r2, r3, #17
 801310c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013110:	2b03      	cmp	r3, #3
 8013112:	d002      	beq.n	801311a <f_mkfs+0x46a>
 8013114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013116:	b29b      	uxth	r3, r3
 8013118:	e000      	b.n	801311c <f_mkfs+0x46c>
 801311a:	2300      	movs	r3, #0
 801311c:	4619      	mov	r1, r3
 801311e:	4610      	mov	r0, r2
 8013120:	f7fd fc01 	bl	8010926 <st_word>
		if (sz_vol < 0x10000) {
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801312a:	d208      	bcs.n	801313e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312e:	3313      	adds	r3, #19
 8013130:	693a      	ldr	r2, [r7, #16]
 8013132:	b292      	uxth	r2, r2
 8013134:	4611      	mov	r1, r2
 8013136:	4618      	mov	r0, r3
 8013138:	f7fd fbf5 	bl	8010926 <st_word>
 801313c:	e006      	b.n	801314c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	3320      	adds	r3, #32
 8013142:	693a      	ldr	r2, [r7, #16]
 8013144:	4611      	mov	r1, r2
 8013146:	4618      	mov	r0, r3
 8013148:	f7fd fc08 	bl	801095c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	3315      	adds	r3, #21
 8013150:	22f8      	movs	r2, #248	; 0xf8
 8013152:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013156:	3318      	adds	r3, #24
 8013158:	213f      	movs	r1, #63	; 0x3f
 801315a:	4618      	mov	r0, r3
 801315c:	f7fd fbe3 	bl	8010926 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	331a      	adds	r3, #26
 8013164:	21ff      	movs	r1, #255	; 0xff
 8013166:	4618      	mov	r0, r3
 8013168:	f7fd fbdd 	bl	8010926 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	331c      	adds	r3, #28
 8013170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013172:	4618      	mov	r0, r3
 8013174:	f7fd fbf2 	bl	801095c <st_dword>
		if (fmt == FS_FAT32) {
 8013178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801317c:	2b03      	cmp	r3, #3
 801317e:	d131      	bne.n	80131e4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013182:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8013186:	f7fb fcd1 	bl	800eb2c <get_fattime>
 801318a:	4603      	mov	r3, r0
 801318c:	4619      	mov	r1, r3
 801318e:	4620      	mov	r0, r4
 8013190:	f7fd fbe4 	bl	801095c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	3324      	adds	r3, #36	; 0x24
 8013198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801319a:	4618      	mov	r0, r3
 801319c:	f7fd fbde 	bl	801095c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80131a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a2:	332c      	adds	r3, #44	; 0x2c
 80131a4:	2102      	movs	r1, #2
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fd fbd8 	bl	801095c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80131ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ae:	3330      	adds	r3, #48	; 0x30
 80131b0:	2101      	movs	r1, #1
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fd fbb7 	bl	8010926 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80131b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ba:	3332      	adds	r3, #50	; 0x32
 80131bc:	2106      	movs	r1, #6
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fd fbb1 	bl	8010926 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80131c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c6:	3340      	adds	r3, #64	; 0x40
 80131c8:	2280      	movs	r2, #128	; 0x80
 80131ca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80131cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ce:	3342      	adds	r3, #66	; 0x42
 80131d0:	2229      	movs	r2, #41	; 0x29
 80131d2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80131d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d6:	3347      	adds	r3, #71	; 0x47
 80131d8:	2213      	movs	r2, #19
 80131da:	4970      	ldr	r1, [pc, #448]	; (801339c <f_mkfs+0x6ec>)
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fd fbe9 	bl	80109b4 <mem_cpy>
 80131e2:	e020      	b.n	8013226 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80131e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80131ea:	f7fb fc9f 	bl	800eb2c <get_fattime>
 80131ee:	4603      	mov	r3, r0
 80131f0:	4619      	mov	r1, r3
 80131f2:	4620      	mov	r0, r4
 80131f4:	f7fd fbb2 	bl	801095c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80131f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fa:	3316      	adds	r3, #22
 80131fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80131fe:	b292      	uxth	r2, r2
 8013200:	4611      	mov	r1, r2
 8013202:	4618      	mov	r0, r3
 8013204:	f7fd fb8f 	bl	8010926 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320a:	3324      	adds	r3, #36	; 0x24
 801320c:	2280      	movs	r2, #128	; 0x80
 801320e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013212:	3326      	adds	r3, #38	; 0x26
 8013214:	2229      	movs	r2, #41	; 0x29
 8013216:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321a:	332b      	adds	r3, #43	; 0x2b
 801321c:	2213      	movs	r2, #19
 801321e:	4960      	ldr	r1, [pc, #384]	; (80133a0 <f_mkfs+0x6f0>)
 8013220:	4618      	mov	r0, r3
 8013222:	f7fd fbc7 	bl	80109b4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013228:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801322c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013230:	4618      	mov	r0, r3
 8013232:	f7fd fb78 	bl	8010926 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013236:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801323a:	2301      	movs	r3, #1
 801323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801323e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013240:	f7fd faf8 	bl	8010834 <disk_write>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <f_mkfs+0x59e>
 801324a:	2301      	movs	r3, #1
 801324c:	e156      	b.n	80134fc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801324e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013252:	2b03      	cmp	r3, #3
 8013254:	d140      	bne.n	80132d8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013258:	1d9a      	adds	r2, r3, #6
 801325a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801325e:	2301      	movs	r3, #1
 8013260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013262:	f7fd fae7 	bl	8010834 <disk_write>
			mem_set(buf, 0, ss);
 8013266:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013268:	461a      	mov	r2, r3
 801326a:	2100      	movs	r1, #0
 801326c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801326e:	f7fd fbc2 	bl	80109f6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013272:	494c      	ldr	r1, [pc, #304]	; (80133a4 <f_mkfs+0x6f4>)
 8013274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013276:	f7fd fb71 	bl	801095c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013280:	4949      	ldr	r1, [pc, #292]	; (80133a8 <f_mkfs+0x6f8>)
 8013282:	4618      	mov	r0, r3
 8013284:	f7fd fb6a 	bl	801095c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801328e:	6a3b      	ldr	r3, [r7, #32]
 8013290:	3b01      	subs	r3, #1
 8013292:	4619      	mov	r1, r3
 8013294:	4610      	mov	r0, r2
 8013296:	f7fd fb61 	bl	801095c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80132a0:	2102      	movs	r1, #2
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fd fb5a 	bl	801095c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80132a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fd fb37 	bl	8010926 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80132b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ba:	1dda      	adds	r2, r3, #7
 80132bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80132c0:	2301      	movs	r3, #1
 80132c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80132c4:	f7fd fab6 	bl	8010834 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	1c5a      	adds	r2, r3, #1
 80132cc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80132d0:	2301      	movs	r3, #1
 80132d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80132d4:	f7fd faae 	bl	8010834 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80132d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132da:	2100      	movs	r1, #0
 80132dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132de:	f7fd fb8a 	bl	80109f6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80132e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80132e4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80132e6:	2300      	movs	r3, #0
 80132e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80132ea:	e04b      	b.n	8013384 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80132ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80132f0:	2b03      	cmp	r3, #3
 80132f2:	d113      	bne.n	801331c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80132f4:	f06f 0107 	mvn.w	r1, #7
 80132f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132fa:	f7fd fb2f 	bl	801095c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	3304      	adds	r3, #4
 8013302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013306:	4618      	mov	r0, r3
 8013308:	f7fd fb28 	bl	801095c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	3308      	adds	r3, #8
 8013310:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013314:	4618      	mov	r0, r3
 8013316:	f7fd fb21 	bl	801095c <st_dword>
 801331a:	e00b      	b.n	8013334 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801331c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013320:	2b01      	cmp	r3, #1
 8013322:	d101      	bne.n	8013328 <f_mkfs+0x678>
 8013324:	4b21      	ldr	r3, [pc, #132]	; (80133ac <f_mkfs+0x6fc>)
 8013326:	e001      	b.n	801332c <f_mkfs+0x67c>
 8013328:	f06f 0307 	mvn.w	r3, #7
 801332c:	4619      	mov	r1, r3
 801332e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013330:	f7fd fb14 	bl	801095c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013336:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333c:	4293      	cmp	r3, r2
 801333e:	bf28      	it	cs
 8013340:	4613      	movcs	r3, r2
 8013342:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013344:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801334a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801334c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801334e:	f7fd fa71 	bl	8010834 <disk_write>
 8013352:	4603      	mov	r3, r0
 8013354:	2b00      	cmp	r3, #0
 8013356:	d001      	beq.n	801335c <f_mkfs+0x6ac>
 8013358:	2301      	movs	r3, #1
 801335a:	e0cf      	b.n	80134fc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801335c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801335e:	461a      	mov	r2, r3
 8013360:	2100      	movs	r1, #0
 8013362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013364:	f7fd fb47 	bl	80109f6 <mem_set>
				sect += n; nsect -= n;
 8013368:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801336c:	4413      	add	r3, r2
 801336e:	667b      	str	r3, [r7, #100]	; 0x64
 8013370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013374:	1ad3      	subs	r3, r2, r3
 8013376:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8013378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801337a:	2b00      	cmp	r3, #0
 801337c:	d1dc      	bne.n	8013338 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013380:	3301      	adds	r3, #1
 8013382:	64bb      	str	r3, [r7, #72]	; 0x48
 8013384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013388:	429a      	cmp	r2, r3
 801338a:	d3af      	bcc.n	80132ec <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801338c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013390:	2b03      	cmp	r3, #3
 8013392:	d10d      	bne.n	80133b0 <f_mkfs+0x700>
 8013394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013396:	e00c      	b.n	80133b2 <f_mkfs+0x702>
 8013398:	080152f8 	.word	0x080152f8
 801339c:	08015304 	.word	0x08015304
 80133a0:	08015318 	.word	0x08015318
 80133a4:	41615252 	.word	0x41615252
 80133a8:	61417272 	.word	0x61417272
 80133ac:	00fffff8 	.word	0x00fffff8
 80133b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133b2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80133b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b8:	4293      	cmp	r3, r2
 80133ba:	bf28      	it	cs
 80133bc:	4613      	movcs	r3, r2
 80133be:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80133c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80133c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80133c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133ca:	f7fd fa33 	bl	8010834 <disk_write>
 80133ce:	4603      	mov	r3, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d001      	beq.n	80133d8 <f_mkfs+0x728>
 80133d4:	2301      	movs	r3, #1
 80133d6:	e091      	b.n	80134fc <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80133d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80133da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133dc:	4413      	add	r3, r2
 80133de:	667b      	str	r3, [r7, #100]	; 0x64
 80133e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80133e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d1e2      	bne.n	80133b4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80133ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80133f2:	2b03      	cmp	r3, #3
 80133f4:	d103      	bne.n	80133fe <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80133f6:	230c      	movs	r3, #12
 80133f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80133fc:	e010      	b.n	8013420 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013404:	d303      	bcc.n	801340e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8013406:	2306      	movs	r3, #6
 8013408:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801340c:	e008      	b.n	8013420 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801340e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013412:	2b02      	cmp	r3, #2
 8013414:	d101      	bne.n	801341a <f_mkfs+0x76a>
 8013416:	2304      	movs	r3, #4
 8013418:	e000      	b.n	801341c <f_mkfs+0x76c>
 801341a:	2301      	movs	r3, #1
 801341c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013420:	7afb      	ldrb	r3, [r7, #11]
 8013422:	f003 0308 	and.w	r3, r3, #8
 8013426:	2b00      	cmp	r3, #0
 8013428:	d15b      	bne.n	80134e2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801342a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801342c:	461a      	mov	r2, r3
 801342e:	2100      	movs	r1, #0
 8013430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013432:	f7fd fae0 	bl	80109f6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801343c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013440:	4618      	mov	r0, r3
 8013442:	f7fd fa70 	bl	8010926 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801344c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801344e:	69bb      	ldr	r3, [r7, #24]
 8013450:	2200      	movs	r2, #0
 8013452:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	3301      	adds	r3, #1
 8013458:	2201      	movs	r2, #1
 801345a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	3302      	adds	r3, #2
 8013460:	2201      	movs	r2, #1
 8013462:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	3303      	adds	r3, #3
 8013468:	2200      	movs	r2, #0
 801346a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	3304      	adds	r3, #4
 8013470:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8013474:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8013476:	693a      	ldr	r2, [r7, #16]
 8013478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347a:	441a      	add	r2, r3
 801347c:	4b21      	ldr	r3, [pc, #132]	; (8013504 <f_mkfs+0x854>)
 801347e:	fba3 1302 	umull	r1, r3, r3, r2
 8013482:	1ad2      	subs	r2, r2, r3
 8013484:	0852      	lsrs	r2, r2, #1
 8013486:	4413      	add	r3, r2
 8013488:	0b5b      	lsrs	r3, r3, #13
 801348a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	3305      	adds	r3, #5
 8013490:	22fe      	movs	r2, #254	; 0xfe
 8013492:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8013494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013496:	089b      	lsrs	r3, r3, #2
 8013498:	b2da      	uxtb	r2, r3
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	3306      	adds	r3, #6
 801349e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80134a2:	b2d2      	uxtb	r2, r2
 80134a4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	3307      	adds	r3, #7
 80134aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80134ac:	b2d2      	uxtb	r2, r2
 80134ae:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80134b0:	69bb      	ldr	r3, [r7, #24]
 80134b2:	3308      	adds	r3, #8
 80134b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fd fa50 	bl	801095c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	330c      	adds	r3, #12
 80134c0:	693a      	ldr	r2, [r7, #16]
 80134c2:	4611      	mov	r1, r2
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fd fa49 	bl	801095c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80134ca:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80134ce:	2301      	movs	r3, #1
 80134d0:	2200      	movs	r2, #0
 80134d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134d4:	f7fd f9ae 	bl	8010834 <disk_write>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d001      	beq.n	80134e2 <f_mkfs+0x832>
 80134de:	2301      	movs	r3, #1
 80134e0:	e00c      	b.n	80134fc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80134e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80134e6:	2200      	movs	r2, #0
 80134e8:	2100      	movs	r1, #0
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fd f9c2 	bl	8010874 <disk_ioctl>
 80134f0:	4603      	mov	r3, r0
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d001      	beq.n	80134fa <f_mkfs+0x84a>
 80134f6:	2301      	movs	r3, #1
 80134f8:	e000      	b.n	80134fc <f_mkfs+0x84c>

	return FR_OK;
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3774      	adds	r7, #116	; 0x74
 8013500:	46bd      	mov	sp, r7
 8013502:	bd90      	pop	{r4, r7, pc}
 8013504:	0515565b 	.word	0x0515565b

08013508 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013508:	b480      	push	{r7}
 801350a:	b087      	sub	sp, #28
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	4613      	mov	r3, r2
 8013514:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013516:	2301      	movs	r3, #1
 8013518:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801351e:	4b1f      	ldr	r3, [pc, #124]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013520:	7a5b      	ldrb	r3, [r3, #9]
 8013522:	b2db      	uxtb	r3, r3
 8013524:	2b00      	cmp	r3, #0
 8013526:	d131      	bne.n	801358c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013528:	4b1c      	ldr	r3, [pc, #112]	; (801359c <FATFS_LinkDriverEx+0x94>)
 801352a:	7a5b      	ldrb	r3, [r3, #9]
 801352c:	b2db      	uxtb	r3, r3
 801352e:	461a      	mov	r2, r3
 8013530:	4b1a      	ldr	r3, [pc, #104]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013532:	2100      	movs	r1, #0
 8013534:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013536:	4b19      	ldr	r3, [pc, #100]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013538:	7a5b      	ldrb	r3, [r3, #9]
 801353a:	b2db      	uxtb	r3, r3
 801353c:	4a17      	ldr	r2, [pc, #92]	; (801359c <FATFS_LinkDriverEx+0x94>)
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	4413      	add	r3, r2
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013546:	4b15      	ldr	r3, [pc, #84]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013548:	7a5b      	ldrb	r3, [r3, #9]
 801354a:	b2db      	uxtb	r3, r3
 801354c:	461a      	mov	r2, r3
 801354e:	4b13      	ldr	r3, [pc, #76]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013550:	4413      	add	r3, r2
 8013552:	79fa      	ldrb	r2, [r7, #7]
 8013554:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013556:	4b11      	ldr	r3, [pc, #68]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013558:	7a5b      	ldrb	r3, [r3, #9]
 801355a:	b2db      	uxtb	r3, r3
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	b2d1      	uxtb	r1, r2
 8013560:	4a0e      	ldr	r2, [pc, #56]	; (801359c <FATFS_LinkDriverEx+0x94>)
 8013562:	7251      	strb	r1, [r2, #9]
 8013564:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013566:	7dbb      	ldrb	r3, [r7, #22]
 8013568:	3330      	adds	r3, #48	; 0x30
 801356a:	b2da      	uxtb	r2, r3
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	3301      	adds	r3, #1
 8013574:	223a      	movs	r2, #58	; 0x3a
 8013576:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	3302      	adds	r3, #2
 801357c:	222f      	movs	r2, #47	; 0x2f
 801357e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	3303      	adds	r3, #3
 8013584:	2200      	movs	r2, #0
 8013586:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013588:	2300      	movs	r3, #0
 801358a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801358c:	7dfb      	ldrb	r3, [r7, #23]
}
 801358e:	4618      	mov	r0, r3
 8013590:	371c      	adds	r7, #28
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	2000111c 	.word	0x2000111c

080135a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80135aa:	2200      	movs	r2, #0
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff ffaa 	bl	8013508 <FATFS_LinkDriverEx>
 80135b4:	4603      	mov	r3, r0
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3708      	adds	r7, #8
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
	...

080135c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80135c4:	2200      	movs	r2, #0
 80135c6:	4912      	ldr	r1, [pc, #72]	; (8013610 <MX_USB_DEVICE_Init+0x50>)
 80135c8:	4812      	ldr	r0, [pc, #72]	; (8013614 <MX_USB_DEVICE_Init+0x54>)
 80135ca:	f7fb ff69 	bl	800f4a0 <USBD_Init>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d001      	beq.n	80135d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80135d4:	f7f0 f810 	bl	80035f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80135d8:	490f      	ldr	r1, [pc, #60]	; (8013618 <MX_USB_DEVICE_Init+0x58>)
 80135da:	480e      	ldr	r0, [pc, #56]	; (8013614 <MX_USB_DEVICE_Init+0x54>)
 80135dc:	f7fb ff90 	bl	800f500 <USBD_RegisterClass>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d001      	beq.n	80135ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80135e6:	f7f0 f807 	bl	80035f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80135ea:	490c      	ldr	r1, [pc, #48]	; (801361c <MX_USB_DEVICE_Init+0x5c>)
 80135ec:	4809      	ldr	r0, [pc, #36]	; (8013614 <MX_USB_DEVICE_Init+0x54>)
 80135ee:	f7fb feb1 	bl	800f354 <USBD_CDC_RegisterInterface>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80135f8:	f7ef fffe 	bl	80035f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80135fc:	4805      	ldr	r0, [pc, #20]	; (8013614 <MX_USB_DEVICE_Init+0x54>)
 80135fe:	f7fb ffa6 	bl	800f54e <USBD_Start>
 8013602:	4603      	mov	r3, r0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d001      	beq.n	801360c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013608:	f7ef fff6 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801360c:	bf00      	nop
 801360e:	bd80      	pop	{r7, pc}
 8013610:	20000130 	.word	0x20000130
 8013614:	20001128 	.word	0x20001128
 8013618:	20000018 	.word	0x20000018
 801361c:	2000011c 	.word	0x2000011c

08013620 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013624:	2200      	movs	r2, #0
 8013626:	4905      	ldr	r1, [pc, #20]	; (801363c <CDC_Init_FS+0x1c>)
 8013628:	4805      	ldr	r0, [pc, #20]	; (8013640 <CDC_Init_FS+0x20>)
 801362a:	f7fb fea8 	bl	800f37e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801362e:	4905      	ldr	r1, [pc, #20]	; (8013644 <CDC_Init_FS+0x24>)
 8013630:	4803      	ldr	r0, [pc, #12]	; (8013640 <CDC_Init_FS+0x20>)
 8013632:	f7fb fec2 	bl	800f3ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013636:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013638:	4618      	mov	r0, r3
 801363a:	bd80      	pop	{r7, pc}
 801363c:	20001bf8 	.word	0x20001bf8
 8013640:	20001128 	.word	0x20001128
 8013644:	200013f8 	.word	0x200013f8

08013648 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013648:	b480      	push	{r7}
 801364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801364c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801364e:	4618      	mov	r0, r3
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	4603      	mov	r3, r0
 8013660:	6039      	str	r1, [r7, #0]
 8013662:	71fb      	strb	r3, [r7, #7]
 8013664:	4613      	mov	r3, r2
 8013666:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	2b23      	cmp	r3, #35	; 0x23
 801366c:	d84a      	bhi.n	8013704 <CDC_Control_FS+0xac>
 801366e:	a201      	add	r2, pc, #4	; (adr r2, 8013674 <CDC_Control_FS+0x1c>)
 8013670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013674:	08013705 	.word	0x08013705
 8013678:	08013705 	.word	0x08013705
 801367c:	08013705 	.word	0x08013705
 8013680:	08013705 	.word	0x08013705
 8013684:	08013705 	.word	0x08013705
 8013688:	08013705 	.word	0x08013705
 801368c:	08013705 	.word	0x08013705
 8013690:	08013705 	.word	0x08013705
 8013694:	08013705 	.word	0x08013705
 8013698:	08013705 	.word	0x08013705
 801369c:	08013705 	.word	0x08013705
 80136a0:	08013705 	.word	0x08013705
 80136a4:	08013705 	.word	0x08013705
 80136a8:	08013705 	.word	0x08013705
 80136ac:	08013705 	.word	0x08013705
 80136b0:	08013705 	.word	0x08013705
 80136b4:	08013705 	.word	0x08013705
 80136b8:	08013705 	.word	0x08013705
 80136bc:	08013705 	.word	0x08013705
 80136c0:	08013705 	.word	0x08013705
 80136c4:	08013705 	.word	0x08013705
 80136c8:	08013705 	.word	0x08013705
 80136cc:	08013705 	.word	0x08013705
 80136d0:	08013705 	.word	0x08013705
 80136d4:	08013705 	.word	0x08013705
 80136d8:	08013705 	.word	0x08013705
 80136dc:	08013705 	.word	0x08013705
 80136e0:	08013705 	.word	0x08013705
 80136e4:	08013705 	.word	0x08013705
 80136e8:	08013705 	.word	0x08013705
 80136ec:	08013705 	.word	0x08013705
 80136f0:	08013705 	.word	0x08013705
 80136f4:	08013705 	.word	0x08013705
 80136f8:	08013705 	.word	0x08013705
 80136fc:	08013705 	.word	0x08013705
 8013700:	08013705 	.word	0x08013705
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013704:	bf00      	nop
  }

  return (USBD_OK);
 8013706:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013708:	4618      	mov	r0, r3
 801370a:	370c      	adds	r7, #12
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr

08013714 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801371e:	6879      	ldr	r1, [r7, #4]
 8013720:	4805      	ldr	r0, [pc, #20]	; (8013738 <CDC_Receive_FS+0x24>)
 8013722:	f7fb fe4a 	bl	800f3ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013726:	4804      	ldr	r0, [pc, #16]	; (8013738 <CDC_Receive_FS+0x24>)
 8013728:	f7fb fe90 	bl	800f44c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801372c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801372e:	4618      	mov	r0, r3
 8013730:	3708      	adds	r7, #8
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	20001128 	.word	0x20001128

0801373c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013748:	2300      	movs	r3, #0
 801374a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801374c:	4b0d      	ldr	r3, [pc, #52]	; (8013784 <CDC_Transmit_FS+0x48>)
 801374e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013752:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801375a:	2b00      	cmp	r3, #0
 801375c:	d001      	beq.n	8013762 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801375e:	2301      	movs	r3, #1
 8013760:	e00b      	b.n	801377a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013762:	887b      	ldrh	r3, [r7, #2]
 8013764:	461a      	mov	r2, r3
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	4806      	ldr	r0, [pc, #24]	; (8013784 <CDC_Transmit_FS+0x48>)
 801376a:	f7fb fe08 	bl	800f37e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801376e:	4805      	ldr	r0, [pc, #20]	; (8013784 <CDC_Transmit_FS+0x48>)
 8013770:	f7fb fe3c 	bl	800f3ec <USBD_CDC_TransmitPacket>
 8013774:	4603      	mov	r3, r0
 8013776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013778:	7bfb      	ldrb	r3, [r7, #15]
}
 801377a:	4618      	mov	r0, r3
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	20001128 	.word	0x20001128

08013788 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013788:	b480      	push	{r7}
 801378a:	b087      	sub	sp, #28
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	4613      	mov	r3, r2
 8013794:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013796:	2300      	movs	r3, #0
 8013798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801379a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	371c      	adds	r7, #28
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr
	...

080137ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	4603      	mov	r3, r0
 80137b4:	6039      	str	r1, [r7, #0]
 80137b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	2212      	movs	r2, #18
 80137bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80137be:	4b03      	ldr	r3, [pc, #12]	; (80137cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	370c      	adds	r7, #12
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	2000014c 	.word	0x2000014c

080137d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b083      	sub	sp, #12
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	4603      	mov	r3, r0
 80137d8:	6039      	str	r1, [r7, #0]
 80137da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	2204      	movs	r2, #4
 80137e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80137e2:	4b03      	ldr	r3, [pc, #12]	; (80137f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	370c      	adds	r7, #12
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr
 80137f0:	20000160 	.word	0x20000160

080137f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	4603      	mov	r3, r0
 80137fc:	6039      	str	r1, [r7, #0]
 80137fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013800:	79fb      	ldrb	r3, [r7, #7]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d105      	bne.n	8013812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013806:	683a      	ldr	r2, [r7, #0]
 8013808:	4907      	ldr	r1, [pc, #28]	; (8013828 <USBD_FS_ProductStrDescriptor+0x34>)
 801380a:	4808      	ldr	r0, [pc, #32]	; (801382c <USBD_FS_ProductStrDescriptor+0x38>)
 801380c:	f7fc fed1 	bl	80105b2 <USBD_GetString>
 8013810:	e004      	b.n	801381c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013812:	683a      	ldr	r2, [r7, #0]
 8013814:	4904      	ldr	r1, [pc, #16]	; (8013828 <USBD_FS_ProductStrDescriptor+0x34>)
 8013816:	4805      	ldr	r0, [pc, #20]	; (801382c <USBD_FS_ProductStrDescriptor+0x38>)
 8013818:	f7fc fecb 	bl	80105b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801381c:	4b02      	ldr	r3, [pc, #8]	; (8013828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801381e:	4618      	mov	r0, r3
 8013820:	3708      	adds	r7, #8
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	200023f8 	.word	0x200023f8
 801382c:	0801532c 	.word	0x0801532c

08013830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	4603      	mov	r3, r0
 8013838:	6039      	str	r1, [r7, #0]
 801383a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801383c:	683a      	ldr	r2, [r7, #0]
 801383e:	4904      	ldr	r1, [pc, #16]	; (8013850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013840:	4804      	ldr	r0, [pc, #16]	; (8013854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013842:	f7fc feb6 	bl	80105b2 <USBD_GetString>
  return USBD_StrDesc;
 8013846:	4b02      	ldr	r3, [pc, #8]	; (8013850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013848:	4618      	mov	r0, r3
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}
 8013850:	200023f8 	.word	0x200023f8
 8013854:	08015344 	.word	0x08015344

08013858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	4603      	mov	r3, r0
 8013860:	6039      	str	r1, [r7, #0]
 8013862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	221a      	movs	r2, #26
 8013868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801386a:	f000 f843 	bl	80138f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801386e:	4b02      	ldr	r3, [pc, #8]	; (8013878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	20000164 	.word	0x20000164

0801387c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	4603      	mov	r3, r0
 8013884:	6039      	str	r1, [r7, #0]
 8013886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013888:	79fb      	ldrb	r3, [r7, #7]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d105      	bne.n	801389a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801388e:	683a      	ldr	r2, [r7, #0]
 8013890:	4907      	ldr	r1, [pc, #28]	; (80138b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013892:	4808      	ldr	r0, [pc, #32]	; (80138b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013894:	f7fc fe8d 	bl	80105b2 <USBD_GetString>
 8013898:	e004      	b.n	80138a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801389a:	683a      	ldr	r2, [r7, #0]
 801389c:	4904      	ldr	r1, [pc, #16]	; (80138b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801389e:	4805      	ldr	r0, [pc, #20]	; (80138b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80138a0:	f7fc fe87 	bl	80105b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138a4:	4b02      	ldr	r3, [pc, #8]	; (80138b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3708      	adds	r7, #8
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	200023f8 	.word	0x200023f8
 80138b4:	08015358 	.word	0x08015358

080138b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	4603      	mov	r3, r0
 80138c0:	6039      	str	r1, [r7, #0]
 80138c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80138c4:	79fb      	ldrb	r3, [r7, #7]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d105      	bne.n	80138d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138ca:	683a      	ldr	r2, [r7, #0]
 80138cc:	4907      	ldr	r1, [pc, #28]	; (80138ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138ce:	4808      	ldr	r0, [pc, #32]	; (80138f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138d0:	f7fc fe6f 	bl	80105b2 <USBD_GetString>
 80138d4:	e004      	b.n	80138e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138d6:	683a      	ldr	r2, [r7, #0]
 80138d8:	4904      	ldr	r1, [pc, #16]	; (80138ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138da:	4805      	ldr	r0, [pc, #20]	; (80138f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138dc:	f7fc fe69 	bl	80105b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138e0:	4b02      	ldr	r3, [pc, #8]	; (80138ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	200023f8 	.word	0x200023f8
 80138f0:	08015364 	.word	0x08015364

080138f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80138fa:	4b0f      	ldr	r3, [pc, #60]	; (8013938 <Get_SerialNum+0x44>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013900:	4b0e      	ldr	r3, [pc, #56]	; (801393c <Get_SerialNum+0x48>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013906:	4b0e      	ldr	r3, [pc, #56]	; (8013940 <Get_SerialNum+0x4c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	4413      	add	r3, r2
 8013912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d009      	beq.n	801392e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801391a:	2208      	movs	r2, #8
 801391c:	4909      	ldr	r1, [pc, #36]	; (8013944 <Get_SerialNum+0x50>)
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f000 f814 	bl	801394c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013924:	2204      	movs	r2, #4
 8013926:	4908      	ldr	r1, [pc, #32]	; (8013948 <Get_SerialNum+0x54>)
 8013928:	68b8      	ldr	r0, [r7, #8]
 801392a:	f000 f80f 	bl	801394c <IntToUnicode>
  }
}
 801392e:	bf00      	nop
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	1fff7590 	.word	0x1fff7590
 801393c:	1fff7594 	.word	0x1fff7594
 8013940:	1fff7598 	.word	0x1fff7598
 8013944:	20000166 	.word	0x20000166
 8013948:	20000176 	.word	0x20000176

0801394c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801394c:	b480      	push	{r7}
 801394e:	b087      	sub	sp, #28
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	4613      	mov	r3, r2
 8013958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801395a:	2300      	movs	r3, #0
 801395c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801395e:	2300      	movs	r3, #0
 8013960:	75fb      	strb	r3, [r7, #23]
 8013962:	e027      	b.n	80139b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	0f1b      	lsrs	r3, r3, #28
 8013968:	2b09      	cmp	r3, #9
 801396a:	d80b      	bhi.n	8013984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	0f1b      	lsrs	r3, r3, #28
 8013970:	b2da      	uxtb	r2, r3
 8013972:	7dfb      	ldrb	r3, [r7, #23]
 8013974:	005b      	lsls	r3, r3, #1
 8013976:	4619      	mov	r1, r3
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	440b      	add	r3, r1
 801397c:	3230      	adds	r2, #48	; 0x30
 801397e:	b2d2      	uxtb	r2, r2
 8013980:	701a      	strb	r2, [r3, #0]
 8013982:	e00a      	b.n	801399a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	0f1b      	lsrs	r3, r3, #28
 8013988:	b2da      	uxtb	r2, r3
 801398a:	7dfb      	ldrb	r3, [r7, #23]
 801398c:	005b      	lsls	r3, r3, #1
 801398e:	4619      	mov	r1, r3
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	440b      	add	r3, r1
 8013994:	3237      	adds	r2, #55	; 0x37
 8013996:	b2d2      	uxtb	r2, r2
 8013998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	011b      	lsls	r3, r3, #4
 801399e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80139a0:	7dfb      	ldrb	r3, [r7, #23]
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	3301      	adds	r3, #1
 80139a6:	68ba      	ldr	r2, [r7, #8]
 80139a8:	4413      	add	r3, r2
 80139aa:	2200      	movs	r2, #0
 80139ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80139ae:	7dfb      	ldrb	r3, [r7, #23]
 80139b0:	3301      	adds	r3, #1
 80139b2:	75fb      	strb	r3, [r7, #23]
 80139b4:	7dfa      	ldrb	r2, [r7, #23]
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d3d3      	bcc.n	8013964 <IntToUnicode+0x18>
  }
}
 80139bc:	bf00      	nop
 80139be:	bf00      	nop
 80139c0:	371c      	adds	r7, #28
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr
	...

080139cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b0b0      	sub	sp, #192	; 0xc0
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80139d8:	2200      	movs	r2, #0
 80139da:	601a      	str	r2, [r3, #0]
 80139dc:	605a      	str	r2, [r3, #4]
 80139de:	609a      	str	r2, [r3, #8]
 80139e0:	60da      	str	r2, [r3, #12]
 80139e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80139e4:	f107 0318 	add.w	r3, r7, #24
 80139e8:	2294      	movs	r2, #148	; 0x94
 80139ea:	2100      	movs	r1, #0
 80139ec:	4618      	mov	r0, r3
 80139ee:	f000 fc03 	bl	80141f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80139fa:	d163      	bne.n	8013ac4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80139fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013a02:	2300      	movs	r3, #0
 8013a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013a08:	f107 0318 	add.w	r3, r7, #24
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7f3 fc99 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d001      	beq.n	8013a1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013a18:	f7ef fdee 	bl	80035f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a1c:	4b2b      	ldr	r3, [pc, #172]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a20:	4a2a      	ldr	r2, [pc, #168]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013a28:	4b28      	ldr	r3, [pc, #160]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a2c:	f003 0301 	and.w	r3, r3, #1
 8013a30:	617b      	str	r3, [r7, #20]
 8013a32:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013a4e:	230a      	movs	r3, #10
 8013a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013a5e:	f7f0 fb69 	bl	8004134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a62:	4b1a      	ldr	r3, [pc, #104]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a66:	4a19      	ldr	r2, [pc, #100]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013a6e:	4b17      	ldr	r3, [pc, #92]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013a76:	613b      	str	r3, [r7, #16]
 8013a78:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013a7a:	4b14      	ldr	r3, [pc, #80]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d114      	bne.n	8013ab0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a86:	4b11      	ldr	r3, [pc, #68]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a8a:	4a10      	ldr	r2, [pc, #64]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a90:	6593      	str	r3, [r2, #88]	; 0x58
 8013a92:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a9a:	60fb      	str	r3, [r7, #12]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8013a9e:	f7f2 fd3d 	bl	800651c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013aa2:	4b0a      	ldr	r3, [pc, #40]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013aa6:	4a09      	ldr	r2, [pc, #36]	; (8013acc <HAL_PCD_MspInit+0x100>)
 8013aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013aac:	6593      	str	r3, [r2, #88]	; 0x58
 8013aae:	e001      	b.n	8013ab4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8013ab0:	f7f2 fd34 	bl	800651c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	2043      	movs	r0, #67	; 0x43
 8013aba:	f7f0 fa4a 	bl	8003f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013abe:	2043      	movs	r0, #67	; 0x43
 8013ac0:	f7f0 fa63 	bl	8003f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013ac4:	bf00      	nop
 8013ac6:	37c0      	adds	r7, #192	; 0xc0
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	40021000 	.word	0x40021000

08013ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4610      	mov	r0, r2
 8013ae8:	f7fb fd7c 	bl	800f5e4 <USBD_LL_SetupStage>
}
 8013aec:	bf00      	nop
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	460b      	mov	r3, r1
 8013afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013b06:	78fa      	ldrb	r2, [r7, #3]
 8013b08:	6879      	ldr	r1, [r7, #4]
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	00db      	lsls	r3, r3, #3
 8013b0e:	4413      	add	r3, r2
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	440b      	add	r3, r1
 8013b14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	78fb      	ldrb	r3, [r7, #3]
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	f7fb fdb6 	bl	800f68e <USBD_LL_DataOutStage>
}
 8013b22:	bf00      	nop
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}

08013b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b082      	sub	sp, #8
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	460b      	mov	r3, r1
 8013b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013b3c:	78fa      	ldrb	r2, [r7, #3]
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	4613      	mov	r3, r2
 8013b42:	00db      	lsls	r3, r3, #3
 8013b44:	4413      	add	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	440b      	add	r3, r1
 8013b4a:	334c      	adds	r3, #76	; 0x4c
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	78fb      	ldrb	r3, [r7, #3]
 8013b50:	4619      	mov	r1, r3
 8013b52:	f7fb fdff 	bl	800f754 <USBD_LL_DataInStage>
}
 8013b56:	bf00      	nop
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b082      	sub	sp, #8
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fb ff13 	bl	800f998 <USBD_LL_SOF>
}
 8013b72:	bf00      	nop
 8013b74:	3708      	adds	r7, #8
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013b82:	2301      	movs	r3, #1
 8013b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	2b02      	cmp	r3, #2
 8013b8c:	d001      	beq.n	8013b92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013b8e:	f7ef fd33 	bl	80035f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b98:	7bfa      	ldrb	r2, [r7, #15]
 8013b9a:	4611      	mov	r1, r2
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fb febd 	bl	800f91c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fb fe69 	bl	800f880 <USBD_LL_Reset>
}
 8013bae:	bf00      	nop
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
	...

08013bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	6812      	ldr	r2, [r2, #0]
 8013bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013bd2:	f043 0301 	orr.w	r3, r3, #1
 8013bd6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7fb feac 	bl	800f93c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6a1b      	ldr	r3, [r3, #32]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d005      	beq.n	8013bf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013bec:	4b04      	ldr	r3, [pc, #16]	; (8013c00 <HAL_PCD_SuspendCallback+0x48>)
 8013bee:	691b      	ldr	r3, [r3, #16]
 8013bf0:	4a03      	ldr	r2, [pc, #12]	; (8013c00 <HAL_PCD_SuspendCallback+0x48>)
 8013bf2:	f043 0306 	orr.w	r3, r3, #6
 8013bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	e000ed00 	.word	0xe000ed00

08013c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	6812      	ldr	r2, [r2, #0]
 8013c1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c1e:	f023 0301 	bic.w	r3, r3, #1
 8013c22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a1b      	ldr	r3, [r3, #32]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d007      	beq.n	8013c3c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c2c:	4b08      	ldr	r3, [pc, #32]	; (8013c50 <HAL_PCD_ResumeCallback+0x4c>)
 8013c2e:	691b      	ldr	r3, [r3, #16]
 8013c30:	4a07      	ldr	r2, [pc, #28]	; (8013c50 <HAL_PCD_ResumeCallback+0x4c>)
 8013c32:	f023 0306 	bic.w	r3, r3, #6
 8013c36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013c38:	f000 faa6 	bl	8014188 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fb fe90 	bl	800f968 <USBD_LL_Resume>
}
 8013c48:	bf00      	nop
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	e000ed00 	.word	0xe000ed00

08013c54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c66:	78fa      	ldrb	r2, [r7, #3]
 8013c68:	4611      	mov	r1, r2
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fb fedc 	bl	800fa28 <USBD_LL_IsoOUTIncomplete>
}
 8013c70:	bf00      	nop
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	460b      	mov	r3, r1
 8013c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c8a:	78fa      	ldrb	r2, [r7, #3]
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fb fea4 	bl	800f9dc <USBD_LL_IsoINIncomplete>
}
 8013c94:	bf00      	nop
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fb fee2 	bl	800fa74 <USBD_LL_DevConnected>
}
 8013cb0:	bf00      	nop
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7fb fedf 	bl	800fa8a <USBD_LL_DevDisconnected>
}
 8013ccc:	bf00      	nop
 8013cce:	3708      	adds	r7, #8
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d139      	bne.n	8013d58 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013ce4:	4a1f      	ldr	r2, [pc, #124]	; (8013d64 <USBD_LL_Init+0x90>)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	4a1d      	ldr	r2, [pc, #116]	; (8013d64 <USBD_LL_Init+0x90>)
 8013cf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013cf4:	4b1b      	ldr	r3, [pc, #108]	; (8013d64 <USBD_LL_Init+0x90>)
 8013cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013cfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013cfc:	4b19      	ldr	r3, [pc, #100]	; (8013d64 <USBD_LL_Init+0x90>)
 8013cfe:	2206      	movs	r2, #6
 8013d00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013d02:	4b18      	ldr	r3, [pc, #96]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d04:	2202      	movs	r2, #2
 8013d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013d08:	4b16      	ldr	r3, [pc, #88]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013d0e:	4b15      	ldr	r3, [pc, #84]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d10:	2200      	movs	r2, #0
 8013d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013d14:	4b13      	ldr	r3, [pc, #76]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d16:	2200      	movs	r2, #0
 8013d18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013d1a:	4b12      	ldr	r3, [pc, #72]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013d20:	4b10      	ldr	r3, [pc, #64]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013d26:	4b0f      	ldr	r3, [pc, #60]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d28:	2200      	movs	r2, #0
 8013d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013d2c:	480d      	ldr	r0, [pc, #52]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d2e:	f7f1 f966 	bl	8004ffe <HAL_PCD_Init>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d001      	beq.n	8013d3c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013d38:	f7ef fc5e 	bl	80035f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013d3c:	2180      	movs	r1, #128	; 0x80
 8013d3e:	4809      	ldr	r0, [pc, #36]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d40:	f7f2 fae7 	bl	8006312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013d44:	2240      	movs	r2, #64	; 0x40
 8013d46:	2100      	movs	r1, #0
 8013d48:	4806      	ldr	r0, [pc, #24]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d4a:	f7f2 fa9b 	bl	8006284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013d4e:	2280      	movs	r2, #128	; 0x80
 8013d50:	2101      	movs	r1, #1
 8013d52:	4804      	ldr	r0, [pc, #16]	; (8013d64 <USBD_LL_Init+0x90>)
 8013d54:	f7f2 fa96 	bl	8006284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013d58:	2300      	movs	r3, #0
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	200025f8 	.word	0x200025f8

08013d68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d70:	2300      	movs	r3, #0
 8013d72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d74:	2300      	movs	r3, #0
 8013d76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f1 fa61 	bl	8005246 <HAL_PCD_Start>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013d88:	7bbb      	ldrb	r3, [r7, #14]
 8013d8a:	2b03      	cmp	r3, #3
 8013d8c:	d816      	bhi.n	8013dbc <USBD_LL_Start+0x54>
 8013d8e:	a201      	add	r2, pc, #4	; (adr r2, 8013d94 <USBD_LL_Start+0x2c>)
 8013d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d94:	08013da5 	.word	0x08013da5
 8013d98:	08013dab 	.word	0x08013dab
 8013d9c:	08013db1 	.word	0x08013db1
 8013da0:	08013db7 	.word	0x08013db7
    case HAL_OK :
      usb_status = USBD_OK;
 8013da4:	2300      	movs	r3, #0
 8013da6:	73fb      	strb	r3, [r7, #15]
    break;
 8013da8:	e00b      	b.n	8013dc2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013daa:	2303      	movs	r3, #3
 8013dac:	73fb      	strb	r3, [r7, #15]
    break;
 8013dae:	e008      	b.n	8013dc2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013db0:	2301      	movs	r3, #1
 8013db2:	73fb      	strb	r3, [r7, #15]
    break;
 8013db4:	e005      	b.n	8013dc2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013db6:	2303      	movs	r3, #3
 8013db8:	73fb      	strb	r3, [r7, #15]
    break;
 8013dba:	e002      	b.n	8013dc2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013dbc:	2303      	movs	r3, #3
 8013dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8013dc0:	bf00      	nop
  }
  return usb_status;
 8013dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	4608      	mov	r0, r1
 8013dd6:	4611      	mov	r1, r2
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4603      	mov	r3, r0
 8013ddc:	70fb      	strb	r3, [r7, #3]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70bb      	strb	r3, [r7, #2]
 8013de2:	4613      	mov	r3, r2
 8013de4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dea:	2300      	movs	r3, #0
 8013dec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013df4:	78bb      	ldrb	r3, [r7, #2]
 8013df6:	883a      	ldrh	r2, [r7, #0]
 8013df8:	78f9      	ldrb	r1, [r7, #3]
 8013dfa:	f7f1 ff0b 	bl	8005c14 <HAL_PCD_EP_Open>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013e02:	7bbb      	ldrb	r3, [r7, #14]
 8013e04:	2b03      	cmp	r3, #3
 8013e06:	d817      	bhi.n	8013e38 <USBD_LL_OpenEP+0x6c>
 8013e08:	a201      	add	r2, pc, #4	; (adr r2, 8013e10 <USBD_LL_OpenEP+0x44>)
 8013e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e0e:	bf00      	nop
 8013e10:	08013e21 	.word	0x08013e21
 8013e14:	08013e27 	.word	0x08013e27
 8013e18:	08013e2d 	.word	0x08013e2d
 8013e1c:	08013e33 	.word	0x08013e33
    case HAL_OK :
      usb_status = USBD_OK;
 8013e20:	2300      	movs	r3, #0
 8013e22:	73fb      	strb	r3, [r7, #15]
    break;
 8013e24:	e00b      	b.n	8013e3e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013e26:	2303      	movs	r3, #3
 8013e28:	73fb      	strb	r3, [r7, #15]
    break;
 8013e2a:	e008      	b.n	8013e3e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8013e30:	e005      	b.n	8013e3e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013e32:	2303      	movs	r3, #3
 8013e34:	73fb      	strb	r3, [r7, #15]
    break;
 8013e36:	e002      	b.n	8013e3e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013e38:	2303      	movs	r3, #3
 8013e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e3c:	bf00      	nop
  }
  return usb_status;
 8013e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	460b      	mov	r3, r1
 8013e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e54:	2300      	movs	r3, #0
 8013e56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e62:	78fa      	ldrb	r2, [r7, #3]
 8013e64:	4611      	mov	r1, r2
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7f1 ff3c 	bl	8005ce4 <HAL_PCD_EP_Close>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013e70:	7bbb      	ldrb	r3, [r7, #14]
 8013e72:	2b03      	cmp	r3, #3
 8013e74:	d816      	bhi.n	8013ea4 <USBD_LL_CloseEP+0x5c>
 8013e76:	a201      	add	r2, pc, #4	; (adr r2, 8013e7c <USBD_LL_CloseEP+0x34>)
 8013e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e7c:	08013e8d 	.word	0x08013e8d
 8013e80:	08013e93 	.word	0x08013e93
 8013e84:	08013e99 	.word	0x08013e99
 8013e88:	08013e9f 	.word	0x08013e9f
    case HAL_OK :
      usb_status = USBD_OK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8013e90:	e00b      	b.n	8013eaa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013e92:	2303      	movs	r3, #3
 8013e94:	73fb      	strb	r3, [r7, #15]
    break;
 8013e96:	e008      	b.n	8013eaa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e9c:	e005      	b.n	8013eaa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013e9e:	2303      	movs	r3, #3
 8013ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ea2:	e002      	b.n	8013eaa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013ea4:	2303      	movs	r3, #3
 8013ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ea8:	bf00      	nop
  }
  return usb_status;
 8013eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	460b      	mov	r3, r1
 8013ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013ece:	78fa      	ldrb	r2, [r7, #3]
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7f1 ffe3 	bl	8005e9e <HAL_PCD_EP_SetStall>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013edc:	7bbb      	ldrb	r3, [r7, #14]
 8013ede:	2b03      	cmp	r3, #3
 8013ee0:	d816      	bhi.n	8013f10 <USBD_LL_StallEP+0x5c>
 8013ee2:	a201      	add	r2, pc, #4	; (adr r2, 8013ee8 <USBD_LL_StallEP+0x34>)
 8013ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee8:	08013ef9 	.word	0x08013ef9
 8013eec:	08013eff 	.word	0x08013eff
 8013ef0:	08013f05 	.word	0x08013f05
 8013ef4:	08013f0b 	.word	0x08013f0b
    case HAL_OK :
      usb_status = USBD_OK;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	73fb      	strb	r3, [r7, #15]
    break;
 8013efc:	e00b      	b.n	8013f16 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013efe:	2303      	movs	r3, #3
 8013f00:	73fb      	strb	r3, [r7, #15]
    break;
 8013f02:	e008      	b.n	8013f16 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013f04:	2301      	movs	r3, #1
 8013f06:	73fb      	strb	r3, [r7, #15]
    break;
 8013f08:	e005      	b.n	8013f16 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8013f0e:	e002      	b.n	8013f16 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013f10:	2303      	movs	r3, #3
 8013f12:	73fb      	strb	r3, [r7, #15]
    break;
 8013f14:	bf00      	nop
  }
  return usb_status;
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3710      	adds	r7, #16
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b084      	sub	sp, #16
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	460b      	mov	r3, r1
 8013f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f30:	2300      	movs	r3, #0
 8013f32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013f3a:	78fa      	ldrb	r2, [r7, #3]
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7f2 f80f 	bl	8005f62 <HAL_PCD_EP_ClrStall>
 8013f44:	4603      	mov	r3, r0
 8013f46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013f48:	7bbb      	ldrb	r3, [r7, #14]
 8013f4a:	2b03      	cmp	r3, #3
 8013f4c:	d816      	bhi.n	8013f7c <USBD_LL_ClearStallEP+0x5c>
 8013f4e:	a201      	add	r2, pc, #4	; (adr r2, 8013f54 <USBD_LL_ClearStallEP+0x34>)
 8013f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f54:	08013f65 	.word	0x08013f65
 8013f58:	08013f6b 	.word	0x08013f6b
 8013f5c:	08013f71 	.word	0x08013f71
 8013f60:	08013f77 	.word	0x08013f77
    case HAL_OK :
      usb_status = USBD_OK;
 8013f64:	2300      	movs	r3, #0
 8013f66:	73fb      	strb	r3, [r7, #15]
    break;
 8013f68:	e00b      	b.n	8013f82 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8013f6e:	e008      	b.n	8013f82 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013f70:	2301      	movs	r3, #1
 8013f72:	73fb      	strb	r3, [r7, #15]
    break;
 8013f74:	e005      	b.n	8013f82 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013f76:	2303      	movs	r3, #3
 8013f78:	73fb      	strb	r3, [r7, #15]
    break;
 8013f7a:	e002      	b.n	8013f82 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013f7c:	2303      	movs	r3, #3
 8013f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8013f80:	bf00      	nop
  }
  return usb_status;
 8013f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b085      	sub	sp, #20
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013f9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	da0b      	bge.n	8013fc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013fa8:	78fb      	ldrb	r3, [r7, #3]
 8013faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013fae:	68f9      	ldr	r1, [r7, #12]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	4413      	add	r3, r2
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	440b      	add	r3, r1
 8013fba:	333e      	adds	r3, #62	; 0x3e
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	e00b      	b.n	8013fd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013fc0:	78fb      	ldrb	r3, [r7, #3]
 8013fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013fc6:	68f9      	ldr	r1, [r7, #12]
 8013fc8:	4613      	mov	r3, r2
 8013fca:	00db      	lsls	r3, r3, #3
 8013fcc:	4413      	add	r3, r2
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	440b      	add	r3, r1
 8013fd2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013fd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3714      	adds	r7, #20
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr

08013fe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	460b      	mov	r3, r1
 8013fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013ffe:	78fa      	ldrb	r2, [r7, #3]
 8014000:	4611      	mov	r1, r2
 8014002:	4618      	mov	r0, r3
 8014004:	f7f1 fde1 	bl	8005bca <HAL_PCD_SetAddress>
 8014008:	4603      	mov	r3, r0
 801400a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	2b03      	cmp	r3, #3
 8014010:	d816      	bhi.n	8014040 <USBD_LL_SetUSBAddress+0x5c>
 8014012:	a201      	add	r2, pc, #4	; (adr r2, 8014018 <USBD_LL_SetUSBAddress+0x34>)
 8014014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014018:	08014029 	.word	0x08014029
 801401c:	0801402f 	.word	0x0801402f
 8014020:	08014035 	.word	0x08014035
 8014024:	0801403b 	.word	0x0801403b
    case HAL_OK :
      usb_status = USBD_OK;
 8014028:	2300      	movs	r3, #0
 801402a:	73fb      	strb	r3, [r7, #15]
    break;
 801402c:	e00b      	b.n	8014046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801402e:	2303      	movs	r3, #3
 8014030:	73fb      	strb	r3, [r7, #15]
    break;
 8014032:	e008      	b.n	8014046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014034:	2301      	movs	r3, #1
 8014036:	73fb      	strb	r3, [r7, #15]
    break;
 8014038:	e005      	b.n	8014046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801403a:	2303      	movs	r3, #3
 801403c:	73fb      	strb	r3, [r7, #15]
    break;
 801403e:	e002      	b.n	8014046 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014040:	2303      	movs	r3, #3
 8014042:	73fb      	strb	r3, [r7, #15]
    break;
 8014044:	bf00      	nop
  }
  return usb_status;
 8014046:	7bfb      	ldrb	r3, [r7, #15]
}
 8014048:	4618      	mov	r0, r3
 801404a:	3710      	adds	r7, #16
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	607a      	str	r2, [r7, #4]
 801405a:	603b      	str	r3, [r7, #0]
 801405c:	460b      	mov	r3, r1
 801405e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014060:	2300      	movs	r3, #0
 8014062:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014064:	2300      	movs	r3, #0
 8014066:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801406e:	7af9      	ldrb	r1, [r7, #11]
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	f7f1 fed6 	bl	8005e24 <HAL_PCD_EP_Transmit>
 8014078:	4603      	mov	r3, r0
 801407a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801407c:	7dbb      	ldrb	r3, [r7, #22]
 801407e:	2b03      	cmp	r3, #3
 8014080:	d816      	bhi.n	80140b0 <USBD_LL_Transmit+0x60>
 8014082:	a201      	add	r2, pc, #4	; (adr r2, 8014088 <USBD_LL_Transmit+0x38>)
 8014084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014088:	08014099 	.word	0x08014099
 801408c:	0801409f 	.word	0x0801409f
 8014090:	080140a5 	.word	0x080140a5
 8014094:	080140ab 	.word	0x080140ab
    case HAL_OK :
      usb_status = USBD_OK;
 8014098:	2300      	movs	r3, #0
 801409a:	75fb      	strb	r3, [r7, #23]
    break;
 801409c:	e00b      	b.n	80140b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801409e:	2303      	movs	r3, #3
 80140a0:	75fb      	strb	r3, [r7, #23]
    break;
 80140a2:	e008      	b.n	80140b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80140a4:	2301      	movs	r3, #1
 80140a6:	75fb      	strb	r3, [r7, #23]
    break;
 80140a8:	e005      	b.n	80140b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80140aa:	2303      	movs	r3, #3
 80140ac:	75fb      	strb	r3, [r7, #23]
    break;
 80140ae:	e002      	b.n	80140b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80140b0:	2303      	movs	r3, #3
 80140b2:	75fb      	strb	r3, [r7, #23]
    break;
 80140b4:	bf00      	nop
  }
  return usb_status;
 80140b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3718      	adds	r7, #24
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	607a      	str	r2, [r7, #4]
 80140ca:	603b      	str	r3, [r7, #0]
 80140cc:	460b      	mov	r3, r1
 80140ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140d0:	2300      	movs	r3, #0
 80140d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80140d4:	2300      	movs	r3, #0
 80140d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80140de:	7af9      	ldrb	r1, [r7, #11]
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	f7f1 fe48 	bl	8005d78 <HAL_PCD_EP_Receive>
 80140e8:	4603      	mov	r3, r0
 80140ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80140ec:	7dbb      	ldrb	r3, [r7, #22]
 80140ee:	2b03      	cmp	r3, #3
 80140f0:	d816      	bhi.n	8014120 <USBD_LL_PrepareReceive+0x60>
 80140f2:	a201      	add	r2, pc, #4	; (adr r2, 80140f8 <USBD_LL_PrepareReceive+0x38>)
 80140f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140f8:	08014109 	.word	0x08014109
 80140fc:	0801410f 	.word	0x0801410f
 8014100:	08014115 	.word	0x08014115
 8014104:	0801411b 	.word	0x0801411b
    case HAL_OK :
      usb_status = USBD_OK;
 8014108:	2300      	movs	r3, #0
 801410a:	75fb      	strb	r3, [r7, #23]
    break;
 801410c:	e00b      	b.n	8014126 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801410e:	2303      	movs	r3, #3
 8014110:	75fb      	strb	r3, [r7, #23]
    break;
 8014112:	e008      	b.n	8014126 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014114:	2301      	movs	r3, #1
 8014116:	75fb      	strb	r3, [r7, #23]
    break;
 8014118:	e005      	b.n	8014126 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801411a:	2303      	movs	r3, #3
 801411c:	75fb      	strb	r3, [r7, #23]
    break;
 801411e:	e002      	b.n	8014126 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8014120:	2303      	movs	r3, #3
 8014122:	75fb      	strb	r3, [r7, #23]
    break;
 8014124:	bf00      	nop
  }
  return usb_status;
 8014126:	7dfb      	ldrb	r3, [r7, #23]
}
 8014128:	4618      	mov	r0, r3
 801412a:	3718      	adds	r7, #24
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	460b      	mov	r3, r1
 801413a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014142:	78fa      	ldrb	r2, [r7, #3]
 8014144:	4611      	mov	r1, r2
 8014146:	4618      	mov	r0, r3
 8014148:	f7f1 fe54 	bl	8005df4 <HAL_PCD_EP_GetRxCount>
 801414c:	4603      	mov	r3, r0
}
 801414e:	4618      	mov	r0, r3
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
	...

08014158 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014160:	4b03      	ldr	r3, [pc, #12]	; (8014170 <USBD_static_malloc+0x18>)
}
 8014162:	4618      	mov	r0, r3
 8014164:	370c      	adds	r7, #12
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	20002b04 	.word	0x20002b04

08014174 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014174:	b480      	push	{r7}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]

}
 801417c:	bf00      	nop
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801418c:	f7ee ff00 	bl	8002f90 <SystemClock_Config>
}
 8014190:	bf00      	nop
 8014192:	bd80      	pop	{r7, pc}

08014194 <__libc_init_array>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	4d0d      	ldr	r5, [pc, #52]	; (80141cc <__libc_init_array+0x38>)
 8014198:	4c0d      	ldr	r4, [pc, #52]	; (80141d0 <__libc_init_array+0x3c>)
 801419a:	1b64      	subs	r4, r4, r5
 801419c:	10a4      	asrs	r4, r4, #2
 801419e:	2600      	movs	r6, #0
 80141a0:	42a6      	cmp	r6, r4
 80141a2:	d109      	bne.n	80141b8 <__libc_init_array+0x24>
 80141a4:	4d0b      	ldr	r5, [pc, #44]	; (80141d4 <__libc_init_array+0x40>)
 80141a6:	4c0c      	ldr	r4, [pc, #48]	; (80141d8 <__libc_init_array+0x44>)
 80141a8:	f000 fffa 	bl	80151a0 <_init>
 80141ac:	1b64      	subs	r4, r4, r5
 80141ae:	10a4      	asrs	r4, r4, #2
 80141b0:	2600      	movs	r6, #0
 80141b2:	42a6      	cmp	r6, r4
 80141b4:	d105      	bne.n	80141c2 <__libc_init_array+0x2e>
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80141bc:	4798      	blx	r3
 80141be:	3601      	adds	r6, #1
 80141c0:	e7ee      	b.n	80141a0 <__libc_init_array+0xc>
 80141c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80141c6:	4798      	blx	r3
 80141c8:	3601      	adds	r6, #1
 80141ca:	e7f2      	b.n	80141b2 <__libc_init_array+0x1e>
 80141cc:	08015538 	.word	0x08015538
 80141d0:	08015538 	.word	0x08015538
 80141d4:	08015538 	.word	0x08015538
 80141d8:	0801553c 	.word	0x0801553c

080141dc <memcpy>:
 80141dc:	440a      	add	r2, r1
 80141de:	4291      	cmp	r1, r2
 80141e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80141e4:	d100      	bne.n	80141e8 <memcpy+0xc>
 80141e6:	4770      	bx	lr
 80141e8:	b510      	push	{r4, lr}
 80141ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141f2:	4291      	cmp	r1, r2
 80141f4:	d1f9      	bne.n	80141ea <memcpy+0xe>
 80141f6:	bd10      	pop	{r4, pc}

080141f8 <memset>:
 80141f8:	4402      	add	r2, r0
 80141fa:	4603      	mov	r3, r0
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d100      	bne.n	8014202 <memset+0xa>
 8014200:	4770      	bx	lr
 8014202:	f803 1b01 	strb.w	r1, [r3], #1
 8014206:	e7f9      	b.n	80141fc <memset+0x4>

08014208 <_free_r>:
 8014208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801420a:	2900      	cmp	r1, #0
 801420c:	d044      	beq.n	8014298 <_free_r+0x90>
 801420e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014212:	9001      	str	r0, [sp, #4]
 8014214:	2b00      	cmp	r3, #0
 8014216:	f1a1 0404 	sub.w	r4, r1, #4
 801421a:	bfb8      	it	lt
 801421c:	18e4      	addlt	r4, r4, r3
 801421e:	f000 f9f3 	bl	8014608 <__malloc_lock>
 8014222:	4a1e      	ldr	r2, [pc, #120]	; (801429c <_free_r+0x94>)
 8014224:	9801      	ldr	r0, [sp, #4]
 8014226:	6813      	ldr	r3, [r2, #0]
 8014228:	b933      	cbnz	r3, 8014238 <_free_r+0x30>
 801422a:	6063      	str	r3, [r4, #4]
 801422c:	6014      	str	r4, [r2, #0]
 801422e:	b003      	add	sp, #12
 8014230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014234:	f000 b9ee 	b.w	8014614 <__malloc_unlock>
 8014238:	42a3      	cmp	r3, r4
 801423a:	d908      	bls.n	801424e <_free_r+0x46>
 801423c:	6825      	ldr	r5, [r4, #0]
 801423e:	1961      	adds	r1, r4, r5
 8014240:	428b      	cmp	r3, r1
 8014242:	bf01      	itttt	eq
 8014244:	6819      	ldreq	r1, [r3, #0]
 8014246:	685b      	ldreq	r3, [r3, #4]
 8014248:	1949      	addeq	r1, r1, r5
 801424a:	6021      	streq	r1, [r4, #0]
 801424c:	e7ed      	b.n	801422a <_free_r+0x22>
 801424e:	461a      	mov	r2, r3
 8014250:	685b      	ldr	r3, [r3, #4]
 8014252:	b10b      	cbz	r3, 8014258 <_free_r+0x50>
 8014254:	42a3      	cmp	r3, r4
 8014256:	d9fa      	bls.n	801424e <_free_r+0x46>
 8014258:	6811      	ldr	r1, [r2, #0]
 801425a:	1855      	adds	r5, r2, r1
 801425c:	42a5      	cmp	r5, r4
 801425e:	d10b      	bne.n	8014278 <_free_r+0x70>
 8014260:	6824      	ldr	r4, [r4, #0]
 8014262:	4421      	add	r1, r4
 8014264:	1854      	adds	r4, r2, r1
 8014266:	42a3      	cmp	r3, r4
 8014268:	6011      	str	r1, [r2, #0]
 801426a:	d1e0      	bne.n	801422e <_free_r+0x26>
 801426c:	681c      	ldr	r4, [r3, #0]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	6053      	str	r3, [r2, #4]
 8014272:	4421      	add	r1, r4
 8014274:	6011      	str	r1, [r2, #0]
 8014276:	e7da      	b.n	801422e <_free_r+0x26>
 8014278:	d902      	bls.n	8014280 <_free_r+0x78>
 801427a:	230c      	movs	r3, #12
 801427c:	6003      	str	r3, [r0, #0]
 801427e:	e7d6      	b.n	801422e <_free_r+0x26>
 8014280:	6825      	ldr	r5, [r4, #0]
 8014282:	1961      	adds	r1, r4, r5
 8014284:	428b      	cmp	r3, r1
 8014286:	bf04      	itt	eq
 8014288:	6819      	ldreq	r1, [r3, #0]
 801428a:	685b      	ldreq	r3, [r3, #4]
 801428c:	6063      	str	r3, [r4, #4]
 801428e:	bf04      	itt	eq
 8014290:	1949      	addeq	r1, r1, r5
 8014292:	6021      	streq	r1, [r4, #0]
 8014294:	6054      	str	r4, [r2, #4]
 8014296:	e7ca      	b.n	801422e <_free_r+0x26>
 8014298:	b003      	add	sp, #12
 801429a:	bd30      	pop	{r4, r5, pc}
 801429c:	20002d24 	.word	0x20002d24

080142a0 <sbrk_aligned>:
 80142a0:	b570      	push	{r4, r5, r6, lr}
 80142a2:	4e0e      	ldr	r6, [pc, #56]	; (80142dc <sbrk_aligned+0x3c>)
 80142a4:	460c      	mov	r4, r1
 80142a6:	6831      	ldr	r1, [r6, #0]
 80142a8:	4605      	mov	r5, r0
 80142aa:	b911      	cbnz	r1, 80142b2 <sbrk_aligned+0x12>
 80142ac:	f000 f8a4 	bl	80143f8 <_sbrk_r>
 80142b0:	6030      	str	r0, [r6, #0]
 80142b2:	4621      	mov	r1, r4
 80142b4:	4628      	mov	r0, r5
 80142b6:	f000 f89f 	bl	80143f8 <_sbrk_r>
 80142ba:	1c43      	adds	r3, r0, #1
 80142bc:	d00a      	beq.n	80142d4 <sbrk_aligned+0x34>
 80142be:	1cc4      	adds	r4, r0, #3
 80142c0:	f024 0403 	bic.w	r4, r4, #3
 80142c4:	42a0      	cmp	r0, r4
 80142c6:	d007      	beq.n	80142d8 <sbrk_aligned+0x38>
 80142c8:	1a21      	subs	r1, r4, r0
 80142ca:	4628      	mov	r0, r5
 80142cc:	f000 f894 	bl	80143f8 <_sbrk_r>
 80142d0:	3001      	adds	r0, #1
 80142d2:	d101      	bne.n	80142d8 <sbrk_aligned+0x38>
 80142d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80142d8:	4620      	mov	r0, r4
 80142da:	bd70      	pop	{r4, r5, r6, pc}
 80142dc:	20002d28 	.word	0x20002d28

080142e0 <_malloc_r>:
 80142e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e4:	1ccd      	adds	r5, r1, #3
 80142e6:	f025 0503 	bic.w	r5, r5, #3
 80142ea:	3508      	adds	r5, #8
 80142ec:	2d0c      	cmp	r5, #12
 80142ee:	bf38      	it	cc
 80142f0:	250c      	movcc	r5, #12
 80142f2:	2d00      	cmp	r5, #0
 80142f4:	4607      	mov	r7, r0
 80142f6:	db01      	blt.n	80142fc <_malloc_r+0x1c>
 80142f8:	42a9      	cmp	r1, r5
 80142fa:	d905      	bls.n	8014308 <_malloc_r+0x28>
 80142fc:	230c      	movs	r3, #12
 80142fe:	603b      	str	r3, [r7, #0]
 8014300:	2600      	movs	r6, #0
 8014302:	4630      	mov	r0, r6
 8014304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014308:	4e2e      	ldr	r6, [pc, #184]	; (80143c4 <_malloc_r+0xe4>)
 801430a:	f000 f97d 	bl	8014608 <__malloc_lock>
 801430e:	6833      	ldr	r3, [r6, #0]
 8014310:	461c      	mov	r4, r3
 8014312:	bb34      	cbnz	r4, 8014362 <_malloc_r+0x82>
 8014314:	4629      	mov	r1, r5
 8014316:	4638      	mov	r0, r7
 8014318:	f7ff ffc2 	bl	80142a0 <sbrk_aligned>
 801431c:	1c43      	adds	r3, r0, #1
 801431e:	4604      	mov	r4, r0
 8014320:	d14d      	bne.n	80143be <_malloc_r+0xde>
 8014322:	6834      	ldr	r4, [r6, #0]
 8014324:	4626      	mov	r6, r4
 8014326:	2e00      	cmp	r6, #0
 8014328:	d140      	bne.n	80143ac <_malloc_r+0xcc>
 801432a:	6823      	ldr	r3, [r4, #0]
 801432c:	4631      	mov	r1, r6
 801432e:	4638      	mov	r0, r7
 8014330:	eb04 0803 	add.w	r8, r4, r3
 8014334:	f000 f860 	bl	80143f8 <_sbrk_r>
 8014338:	4580      	cmp	r8, r0
 801433a:	d13a      	bne.n	80143b2 <_malloc_r+0xd2>
 801433c:	6821      	ldr	r1, [r4, #0]
 801433e:	3503      	adds	r5, #3
 8014340:	1a6d      	subs	r5, r5, r1
 8014342:	f025 0503 	bic.w	r5, r5, #3
 8014346:	3508      	adds	r5, #8
 8014348:	2d0c      	cmp	r5, #12
 801434a:	bf38      	it	cc
 801434c:	250c      	movcc	r5, #12
 801434e:	4629      	mov	r1, r5
 8014350:	4638      	mov	r0, r7
 8014352:	f7ff ffa5 	bl	80142a0 <sbrk_aligned>
 8014356:	3001      	adds	r0, #1
 8014358:	d02b      	beq.n	80143b2 <_malloc_r+0xd2>
 801435a:	6823      	ldr	r3, [r4, #0]
 801435c:	442b      	add	r3, r5
 801435e:	6023      	str	r3, [r4, #0]
 8014360:	e00e      	b.n	8014380 <_malloc_r+0xa0>
 8014362:	6822      	ldr	r2, [r4, #0]
 8014364:	1b52      	subs	r2, r2, r5
 8014366:	d41e      	bmi.n	80143a6 <_malloc_r+0xc6>
 8014368:	2a0b      	cmp	r2, #11
 801436a:	d916      	bls.n	801439a <_malloc_r+0xba>
 801436c:	1961      	adds	r1, r4, r5
 801436e:	42a3      	cmp	r3, r4
 8014370:	6025      	str	r5, [r4, #0]
 8014372:	bf18      	it	ne
 8014374:	6059      	strne	r1, [r3, #4]
 8014376:	6863      	ldr	r3, [r4, #4]
 8014378:	bf08      	it	eq
 801437a:	6031      	streq	r1, [r6, #0]
 801437c:	5162      	str	r2, [r4, r5]
 801437e:	604b      	str	r3, [r1, #4]
 8014380:	4638      	mov	r0, r7
 8014382:	f104 060b 	add.w	r6, r4, #11
 8014386:	f000 f945 	bl	8014614 <__malloc_unlock>
 801438a:	f026 0607 	bic.w	r6, r6, #7
 801438e:	1d23      	adds	r3, r4, #4
 8014390:	1af2      	subs	r2, r6, r3
 8014392:	d0b6      	beq.n	8014302 <_malloc_r+0x22>
 8014394:	1b9b      	subs	r3, r3, r6
 8014396:	50a3      	str	r3, [r4, r2]
 8014398:	e7b3      	b.n	8014302 <_malloc_r+0x22>
 801439a:	6862      	ldr	r2, [r4, #4]
 801439c:	42a3      	cmp	r3, r4
 801439e:	bf0c      	ite	eq
 80143a0:	6032      	streq	r2, [r6, #0]
 80143a2:	605a      	strne	r2, [r3, #4]
 80143a4:	e7ec      	b.n	8014380 <_malloc_r+0xa0>
 80143a6:	4623      	mov	r3, r4
 80143a8:	6864      	ldr	r4, [r4, #4]
 80143aa:	e7b2      	b.n	8014312 <_malloc_r+0x32>
 80143ac:	4634      	mov	r4, r6
 80143ae:	6876      	ldr	r6, [r6, #4]
 80143b0:	e7b9      	b.n	8014326 <_malloc_r+0x46>
 80143b2:	230c      	movs	r3, #12
 80143b4:	603b      	str	r3, [r7, #0]
 80143b6:	4638      	mov	r0, r7
 80143b8:	f000 f92c 	bl	8014614 <__malloc_unlock>
 80143bc:	e7a1      	b.n	8014302 <_malloc_r+0x22>
 80143be:	6025      	str	r5, [r4, #0]
 80143c0:	e7de      	b.n	8014380 <_malloc_r+0xa0>
 80143c2:	bf00      	nop
 80143c4:	20002d24 	.word	0x20002d24

080143c8 <iprintf>:
 80143c8:	b40f      	push	{r0, r1, r2, r3}
 80143ca:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <iprintf+0x2c>)
 80143cc:	b513      	push	{r0, r1, r4, lr}
 80143ce:	681c      	ldr	r4, [r3, #0]
 80143d0:	b124      	cbz	r4, 80143dc <iprintf+0x14>
 80143d2:	69a3      	ldr	r3, [r4, #24]
 80143d4:	b913      	cbnz	r3, 80143dc <iprintf+0x14>
 80143d6:	4620      	mov	r0, r4
 80143d8:	f000 f876 	bl	80144c8 <__sinit>
 80143dc:	ab05      	add	r3, sp, #20
 80143de:	9a04      	ldr	r2, [sp, #16]
 80143e0:	68a1      	ldr	r1, [r4, #8]
 80143e2:	9301      	str	r3, [sp, #4]
 80143e4:	4620      	mov	r0, r4
 80143e6:	f000 f945 	bl	8014674 <_vfiprintf_r>
 80143ea:	b002      	add	sp, #8
 80143ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143f0:	b004      	add	sp, #16
 80143f2:	4770      	bx	lr
 80143f4:	20000180 	.word	0x20000180

080143f8 <_sbrk_r>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	4d06      	ldr	r5, [pc, #24]	; (8014414 <_sbrk_r+0x1c>)
 80143fc:	2300      	movs	r3, #0
 80143fe:	4604      	mov	r4, r0
 8014400:	4608      	mov	r0, r1
 8014402:	602b      	str	r3, [r5, #0]
 8014404:	f000 feb6 	bl	8015174 <_sbrk>
 8014408:	1c43      	adds	r3, r0, #1
 801440a:	d102      	bne.n	8014412 <_sbrk_r+0x1a>
 801440c:	682b      	ldr	r3, [r5, #0]
 801440e:	b103      	cbz	r3, 8014412 <_sbrk_r+0x1a>
 8014410:	6023      	str	r3, [r4, #0]
 8014412:	bd38      	pop	{r3, r4, r5, pc}
 8014414:	20002d30 	.word	0x20002d30

08014418 <std>:
 8014418:	2300      	movs	r3, #0
 801441a:	b510      	push	{r4, lr}
 801441c:	4604      	mov	r4, r0
 801441e:	e9c0 3300 	strd	r3, r3, [r0]
 8014422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014426:	6083      	str	r3, [r0, #8]
 8014428:	8181      	strh	r1, [r0, #12]
 801442a:	6643      	str	r3, [r0, #100]	; 0x64
 801442c:	81c2      	strh	r2, [r0, #14]
 801442e:	6183      	str	r3, [r0, #24]
 8014430:	4619      	mov	r1, r3
 8014432:	2208      	movs	r2, #8
 8014434:	305c      	adds	r0, #92	; 0x5c
 8014436:	f7ff fedf 	bl	80141f8 <memset>
 801443a:	4b05      	ldr	r3, [pc, #20]	; (8014450 <std+0x38>)
 801443c:	6263      	str	r3, [r4, #36]	; 0x24
 801443e:	4b05      	ldr	r3, [pc, #20]	; (8014454 <std+0x3c>)
 8014440:	62a3      	str	r3, [r4, #40]	; 0x28
 8014442:	4b05      	ldr	r3, [pc, #20]	; (8014458 <std+0x40>)
 8014444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014446:	4b05      	ldr	r3, [pc, #20]	; (801445c <std+0x44>)
 8014448:	6224      	str	r4, [r4, #32]
 801444a:	6323      	str	r3, [r4, #48]	; 0x30
 801444c:	bd10      	pop	{r4, pc}
 801444e:	bf00      	nop
 8014450:	08014bfd 	.word	0x08014bfd
 8014454:	08014c1f 	.word	0x08014c1f
 8014458:	08014c57 	.word	0x08014c57
 801445c:	08014c7b 	.word	0x08014c7b

08014460 <_cleanup_r>:
 8014460:	4901      	ldr	r1, [pc, #4]	; (8014468 <_cleanup_r+0x8>)
 8014462:	f000 b8af 	b.w	80145c4 <_fwalk_reent>
 8014466:	bf00      	nop
 8014468:	08014f55 	.word	0x08014f55

0801446c <__sfmoreglue>:
 801446c:	b570      	push	{r4, r5, r6, lr}
 801446e:	2268      	movs	r2, #104	; 0x68
 8014470:	1e4d      	subs	r5, r1, #1
 8014472:	4355      	muls	r5, r2
 8014474:	460e      	mov	r6, r1
 8014476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801447a:	f7ff ff31 	bl	80142e0 <_malloc_r>
 801447e:	4604      	mov	r4, r0
 8014480:	b140      	cbz	r0, 8014494 <__sfmoreglue+0x28>
 8014482:	2100      	movs	r1, #0
 8014484:	e9c0 1600 	strd	r1, r6, [r0]
 8014488:	300c      	adds	r0, #12
 801448a:	60a0      	str	r0, [r4, #8]
 801448c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014490:	f7ff feb2 	bl	80141f8 <memset>
 8014494:	4620      	mov	r0, r4
 8014496:	bd70      	pop	{r4, r5, r6, pc}

08014498 <__sfp_lock_acquire>:
 8014498:	4801      	ldr	r0, [pc, #4]	; (80144a0 <__sfp_lock_acquire+0x8>)
 801449a:	f000 b8b3 	b.w	8014604 <__retarget_lock_acquire_recursive>
 801449e:	bf00      	nop
 80144a0:	20002d2d 	.word	0x20002d2d

080144a4 <__sfp_lock_release>:
 80144a4:	4801      	ldr	r0, [pc, #4]	; (80144ac <__sfp_lock_release+0x8>)
 80144a6:	f000 b8ae 	b.w	8014606 <__retarget_lock_release_recursive>
 80144aa:	bf00      	nop
 80144ac:	20002d2d 	.word	0x20002d2d

080144b0 <__sinit_lock_acquire>:
 80144b0:	4801      	ldr	r0, [pc, #4]	; (80144b8 <__sinit_lock_acquire+0x8>)
 80144b2:	f000 b8a7 	b.w	8014604 <__retarget_lock_acquire_recursive>
 80144b6:	bf00      	nop
 80144b8:	20002d2e 	.word	0x20002d2e

080144bc <__sinit_lock_release>:
 80144bc:	4801      	ldr	r0, [pc, #4]	; (80144c4 <__sinit_lock_release+0x8>)
 80144be:	f000 b8a2 	b.w	8014606 <__retarget_lock_release_recursive>
 80144c2:	bf00      	nop
 80144c4:	20002d2e 	.word	0x20002d2e

080144c8 <__sinit>:
 80144c8:	b510      	push	{r4, lr}
 80144ca:	4604      	mov	r4, r0
 80144cc:	f7ff fff0 	bl	80144b0 <__sinit_lock_acquire>
 80144d0:	69a3      	ldr	r3, [r4, #24]
 80144d2:	b11b      	cbz	r3, 80144dc <__sinit+0x14>
 80144d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144d8:	f7ff bff0 	b.w	80144bc <__sinit_lock_release>
 80144dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80144e0:	6523      	str	r3, [r4, #80]	; 0x50
 80144e2:	4b13      	ldr	r3, [pc, #76]	; (8014530 <__sinit+0x68>)
 80144e4:	4a13      	ldr	r2, [pc, #76]	; (8014534 <__sinit+0x6c>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80144ea:	42a3      	cmp	r3, r4
 80144ec:	bf04      	itt	eq
 80144ee:	2301      	moveq	r3, #1
 80144f0:	61a3      	streq	r3, [r4, #24]
 80144f2:	4620      	mov	r0, r4
 80144f4:	f000 f820 	bl	8014538 <__sfp>
 80144f8:	6060      	str	r0, [r4, #4]
 80144fa:	4620      	mov	r0, r4
 80144fc:	f000 f81c 	bl	8014538 <__sfp>
 8014500:	60a0      	str	r0, [r4, #8]
 8014502:	4620      	mov	r0, r4
 8014504:	f000 f818 	bl	8014538 <__sfp>
 8014508:	2200      	movs	r2, #0
 801450a:	60e0      	str	r0, [r4, #12]
 801450c:	2104      	movs	r1, #4
 801450e:	6860      	ldr	r0, [r4, #4]
 8014510:	f7ff ff82 	bl	8014418 <std>
 8014514:	68a0      	ldr	r0, [r4, #8]
 8014516:	2201      	movs	r2, #1
 8014518:	2109      	movs	r1, #9
 801451a:	f7ff ff7d 	bl	8014418 <std>
 801451e:	68e0      	ldr	r0, [r4, #12]
 8014520:	2202      	movs	r2, #2
 8014522:	2112      	movs	r1, #18
 8014524:	f7ff ff78 	bl	8014418 <std>
 8014528:	2301      	movs	r3, #1
 801452a:	61a3      	str	r3, [r4, #24]
 801452c:	e7d2      	b.n	80144d4 <__sinit+0xc>
 801452e:	bf00      	nop
 8014530:	08015498 	.word	0x08015498
 8014534:	08014461 	.word	0x08014461

08014538 <__sfp>:
 8014538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801453a:	4607      	mov	r7, r0
 801453c:	f7ff ffac 	bl	8014498 <__sfp_lock_acquire>
 8014540:	4b1e      	ldr	r3, [pc, #120]	; (80145bc <__sfp+0x84>)
 8014542:	681e      	ldr	r6, [r3, #0]
 8014544:	69b3      	ldr	r3, [r6, #24]
 8014546:	b913      	cbnz	r3, 801454e <__sfp+0x16>
 8014548:	4630      	mov	r0, r6
 801454a:	f7ff ffbd 	bl	80144c8 <__sinit>
 801454e:	3648      	adds	r6, #72	; 0x48
 8014550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014554:	3b01      	subs	r3, #1
 8014556:	d503      	bpl.n	8014560 <__sfp+0x28>
 8014558:	6833      	ldr	r3, [r6, #0]
 801455a:	b30b      	cbz	r3, 80145a0 <__sfp+0x68>
 801455c:	6836      	ldr	r6, [r6, #0]
 801455e:	e7f7      	b.n	8014550 <__sfp+0x18>
 8014560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014564:	b9d5      	cbnz	r5, 801459c <__sfp+0x64>
 8014566:	4b16      	ldr	r3, [pc, #88]	; (80145c0 <__sfp+0x88>)
 8014568:	60e3      	str	r3, [r4, #12]
 801456a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801456e:	6665      	str	r5, [r4, #100]	; 0x64
 8014570:	f000 f847 	bl	8014602 <__retarget_lock_init_recursive>
 8014574:	f7ff ff96 	bl	80144a4 <__sfp_lock_release>
 8014578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801457c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014580:	6025      	str	r5, [r4, #0]
 8014582:	61a5      	str	r5, [r4, #24]
 8014584:	2208      	movs	r2, #8
 8014586:	4629      	mov	r1, r5
 8014588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801458c:	f7ff fe34 	bl	80141f8 <memset>
 8014590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014598:	4620      	mov	r0, r4
 801459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801459c:	3468      	adds	r4, #104	; 0x68
 801459e:	e7d9      	b.n	8014554 <__sfp+0x1c>
 80145a0:	2104      	movs	r1, #4
 80145a2:	4638      	mov	r0, r7
 80145a4:	f7ff ff62 	bl	801446c <__sfmoreglue>
 80145a8:	4604      	mov	r4, r0
 80145aa:	6030      	str	r0, [r6, #0]
 80145ac:	2800      	cmp	r0, #0
 80145ae:	d1d5      	bne.n	801455c <__sfp+0x24>
 80145b0:	f7ff ff78 	bl	80144a4 <__sfp_lock_release>
 80145b4:	230c      	movs	r3, #12
 80145b6:	603b      	str	r3, [r7, #0]
 80145b8:	e7ee      	b.n	8014598 <__sfp+0x60>
 80145ba:	bf00      	nop
 80145bc:	08015498 	.word	0x08015498
 80145c0:	ffff0001 	.word	0xffff0001

080145c4 <_fwalk_reent>:
 80145c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145c8:	4606      	mov	r6, r0
 80145ca:	4688      	mov	r8, r1
 80145cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80145d0:	2700      	movs	r7, #0
 80145d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80145d6:	f1b9 0901 	subs.w	r9, r9, #1
 80145da:	d505      	bpl.n	80145e8 <_fwalk_reent+0x24>
 80145dc:	6824      	ldr	r4, [r4, #0]
 80145de:	2c00      	cmp	r4, #0
 80145e0:	d1f7      	bne.n	80145d2 <_fwalk_reent+0xe>
 80145e2:	4638      	mov	r0, r7
 80145e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145e8:	89ab      	ldrh	r3, [r5, #12]
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d907      	bls.n	80145fe <_fwalk_reent+0x3a>
 80145ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145f2:	3301      	adds	r3, #1
 80145f4:	d003      	beq.n	80145fe <_fwalk_reent+0x3a>
 80145f6:	4629      	mov	r1, r5
 80145f8:	4630      	mov	r0, r6
 80145fa:	47c0      	blx	r8
 80145fc:	4307      	orrs	r7, r0
 80145fe:	3568      	adds	r5, #104	; 0x68
 8014600:	e7e9      	b.n	80145d6 <_fwalk_reent+0x12>

08014602 <__retarget_lock_init_recursive>:
 8014602:	4770      	bx	lr

08014604 <__retarget_lock_acquire_recursive>:
 8014604:	4770      	bx	lr

08014606 <__retarget_lock_release_recursive>:
 8014606:	4770      	bx	lr

08014608 <__malloc_lock>:
 8014608:	4801      	ldr	r0, [pc, #4]	; (8014610 <__malloc_lock+0x8>)
 801460a:	f7ff bffb 	b.w	8014604 <__retarget_lock_acquire_recursive>
 801460e:	bf00      	nop
 8014610:	20002d2c 	.word	0x20002d2c

08014614 <__malloc_unlock>:
 8014614:	4801      	ldr	r0, [pc, #4]	; (801461c <__malloc_unlock+0x8>)
 8014616:	f7ff bff6 	b.w	8014606 <__retarget_lock_release_recursive>
 801461a:	bf00      	nop
 801461c:	20002d2c 	.word	0x20002d2c

08014620 <__sfputc_r>:
 8014620:	6893      	ldr	r3, [r2, #8]
 8014622:	3b01      	subs	r3, #1
 8014624:	2b00      	cmp	r3, #0
 8014626:	b410      	push	{r4}
 8014628:	6093      	str	r3, [r2, #8]
 801462a:	da08      	bge.n	801463e <__sfputc_r+0x1e>
 801462c:	6994      	ldr	r4, [r2, #24]
 801462e:	42a3      	cmp	r3, r4
 8014630:	db01      	blt.n	8014636 <__sfputc_r+0x16>
 8014632:	290a      	cmp	r1, #10
 8014634:	d103      	bne.n	801463e <__sfputc_r+0x1e>
 8014636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801463a:	f000 bb23 	b.w	8014c84 <__swbuf_r>
 801463e:	6813      	ldr	r3, [r2, #0]
 8014640:	1c58      	adds	r0, r3, #1
 8014642:	6010      	str	r0, [r2, #0]
 8014644:	7019      	strb	r1, [r3, #0]
 8014646:	4608      	mov	r0, r1
 8014648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801464c:	4770      	bx	lr

0801464e <__sfputs_r>:
 801464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014650:	4606      	mov	r6, r0
 8014652:	460f      	mov	r7, r1
 8014654:	4614      	mov	r4, r2
 8014656:	18d5      	adds	r5, r2, r3
 8014658:	42ac      	cmp	r4, r5
 801465a:	d101      	bne.n	8014660 <__sfputs_r+0x12>
 801465c:	2000      	movs	r0, #0
 801465e:	e007      	b.n	8014670 <__sfputs_r+0x22>
 8014660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014664:	463a      	mov	r2, r7
 8014666:	4630      	mov	r0, r6
 8014668:	f7ff ffda 	bl	8014620 <__sfputc_r>
 801466c:	1c43      	adds	r3, r0, #1
 801466e:	d1f3      	bne.n	8014658 <__sfputs_r+0xa>
 8014670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014674 <_vfiprintf_r>:
 8014674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014678:	460d      	mov	r5, r1
 801467a:	b09d      	sub	sp, #116	; 0x74
 801467c:	4614      	mov	r4, r2
 801467e:	4698      	mov	r8, r3
 8014680:	4606      	mov	r6, r0
 8014682:	b118      	cbz	r0, 801468c <_vfiprintf_r+0x18>
 8014684:	6983      	ldr	r3, [r0, #24]
 8014686:	b90b      	cbnz	r3, 801468c <_vfiprintf_r+0x18>
 8014688:	f7ff ff1e 	bl	80144c8 <__sinit>
 801468c:	4b89      	ldr	r3, [pc, #548]	; (80148b4 <_vfiprintf_r+0x240>)
 801468e:	429d      	cmp	r5, r3
 8014690:	d11b      	bne.n	80146ca <_vfiprintf_r+0x56>
 8014692:	6875      	ldr	r5, [r6, #4]
 8014694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014696:	07d9      	lsls	r1, r3, #31
 8014698:	d405      	bmi.n	80146a6 <_vfiprintf_r+0x32>
 801469a:	89ab      	ldrh	r3, [r5, #12]
 801469c:	059a      	lsls	r2, r3, #22
 801469e:	d402      	bmi.n	80146a6 <_vfiprintf_r+0x32>
 80146a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146a2:	f7ff ffaf 	bl	8014604 <__retarget_lock_acquire_recursive>
 80146a6:	89ab      	ldrh	r3, [r5, #12]
 80146a8:	071b      	lsls	r3, r3, #28
 80146aa:	d501      	bpl.n	80146b0 <_vfiprintf_r+0x3c>
 80146ac:	692b      	ldr	r3, [r5, #16]
 80146ae:	b9eb      	cbnz	r3, 80146ec <_vfiprintf_r+0x78>
 80146b0:	4629      	mov	r1, r5
 80146b2:	4630      	mov	r0, r6
 80146b4:	f000 fb4a 	bl	8014d4c <__swsetup_r>
 80146b8:	b1c0      	cbz	r0, 80146ec <_vfiprintf_r+0x78>
 80146ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146bc:	07dc      	lsls	r4, r3, #31
 80146be:	d50e      	bpl.n	80146de <_vfiprintf_r+0x6a>
 80146c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146c4:	b01d      	add	sp, #116	; 0x74
 80146c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ca:	4b7b      	ldr	r3, [pc, #492]	; (80148b8 <_vfiprintf_r+0x244>)
 80146cc:	429d      	cmp	r5, r3
 80146ce:	d101      	bne.n	80146d4 <_vfiprintf_r+0x60>
 80146d0:	68b5      	ldr	r5, [r6, #8]
 80146d2:	e7df      	b.n	8014694 <_vfiprintf_r+0x20>
 80146d4:	4b79      	ldr	r3, [pc, #484]	; (80148bc <_vfiprintf_r+0x248>)
 80146d6:	429d      	cmp	r5, r3
 80146d8:	bf08      	it	eq
 80146da:	68f5      	ldreq	r5, [r6, #12]
 80146dc:	e7da      	b.n	8014694 <_vfiprintf_r+0x20>
 80146de:	89ab      	ldrh	r3, [r5, #12]
 80146e0:	0598      	lsls	r0, r3, #22
 80146e2:	d4ed      	bmi.n	80146c0 <_vfiprintf_r+0x4c>
 80146e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146e6:	f7ff ff8e 	bl	8014606 <__retarget_lock_release_recursive>
 80146ea:	e7e9      	b.n	80146c0 <_vfiprintf_r+0x4c>
 80146ec:	2300      	movs	r3, #0
 80146ee:	9309      	str	r3, [sp, #36]	; 0x24
 80146f0:	2320      	movs	r3, #32
 80146f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80146fa:	2330      	movs	r3, #48	; 0x30
 80146fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80148c0 <_vfiprintf_r+0x24c>
 8014700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014704:	f04f 0901 	mov.w	r9, #1
 8014708:	4623      	mov	r3, r4
 801470a:	469a      	mov	sl, r3
 801470c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014710:	b10a      	cbz	r2, 8014716 <_vfiprintf_r+0xa2>
 8014712:	2a25      	cmp	r2, #37	; 0x25
 8014714:	d1f9      	bne.n	801470a <_vfiprintf_r+0x96>
 8014716:	ebba 0b04 	subs.w	fp, sl, r4
 801471a:	d00b      	beq.n	8014734 <_vfiprintf_r+0xc0>
 801471c:	465b      	mov	r3, fp
 801471e:	4622      	mov	r2, r4
 8014720:	4629      	mov	r1, r5
 8014722:	4630      	mov	r0, r6
 8014724:	f7ff ff93 	bl	801464e <__sfputs_r>
 8014728:	3001      	adds	r0, #1
 801472a:	f000 80aa 	beq.w	8014882 <_vfiprintf_r+0x20e>
 801472e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014730:	445a      	add	r2, fp
 8014732:	9209      	str	r2, [sp, #36]	; 0x24
 8014734:	f89a 3000 	ldrb.w	r3, [sl]
 8014738:	2b00      	cmp	r3, #0
 801473a:	f000 80a2 	beq.w	8014882 <_vfiprintf_r+0x20e>
 801473e:	2300      	movs	r3, #0
 8014740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014748:	f10a 0a01 	add.w	sl, sl, #1
 801474c:	9304      	str	r3, [sp, #16]
 801474e:	9307      	str	r3, [sp, #28]
 8014750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014754:	931a      	str	r3, [sp, #104]	; 0x68
 8014756:	4654      	mov	r4, sl
 8014758:	2205      	movs	r2, #5
 801475a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801475e:	4858      	ldr	r0, [pc, #352]	; (80148c0 <_vfiprintf_r+0x24c>)
 8014760:	f7eb fd56 	bl	8000210 <memchr>
 8014764:	9a04      	ldr	r2, [sp, #16]
 8014766:	b9d8      	cbnz	r0, 80147a0 <_vfiprintf_r+0x12c>
 8014768:	06d1      	lsls	r1, r2, #27
 801476a:	bf44      	itt	mi
 801476c:	2320      	movmi	r3, #32
 801476e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014772:	0713      	lsls	r3, r2, #28
 8014774:	bf44      	itt	mi
 8014776:	232b      	movmi	r3, #43	; 0x2b
 8014778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801477c:	f89a 3000 	ldrb.w	r3, [sl]
 8014780:	2b2a      	cmp	r3, #42	; 0x2a
 8014782:	d015      	beq.n	80147b0 <_vfiprintf_r+0x13c>
 8014784:	9a07      	ldr	r2, [sp, #28]
 8014786:	4654      	mov	r4, sl
 8014788:	2000      	movs	r0, #0
 801478a:	f04f 0c0a 	mov.w	ip, #10
 801478e:	4621      	mov	r1, r4
 8014790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014794:	3b30      	subs	r3, #48	; 0x30
 8014796:	2b09      	cmp	r3, #9
 8014798:	d94e      	bls.n	8014838 <_vfiprintf_r+0x1c4>
 801479a:	b1b0      	cbz	r0, 80147ca <_vfiprintf_r+0x156>
 801479c:	9207      	str	r2, [sp, #28]
 801479e:	e014      	b.n	80147ca <_vfiprintf_r+0x156>
 80147a0:	eba0 0308 	sub.w	r3, r0, r8
 80147a4:	fa09 f303 	lsl.w	r3, r9, r3
 80147a8:	4313      	orrs	r3, r2
 80147aa:	9304      	str	r3, [sp, #16]
 80147ac:	46a2      	mov	sl, r4
 80147ae:	e7d2      	b.n	8014756 <_vfiprintf_r+0xe2>
 80147b0:	9b03      	ldr	r3, [sp, #12]
 80147b2:	1d19      	adds	r1, r3, #4
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	9103      	str	r1, [sp, #12]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	bfbb      	ittet	lt
 80147bc:	425b      	neglt	r3, r3
 80147be:	f042 0202 	orrlt.w	r2, r2, #2
 80147c2:	9307      	strge	r3, [sp, #28]
 80147c4:	9307      	strlt	r3, [sp, #28]
 80147c6:	bfb8      	it	lt
 80147c8:	9204      	strlt	r2, [sp, #16]
 80147ca:	7823      	ldrb	r3, [r4, #0]
 80147cc:	2b2e      	cmp	r3, #46	; 0x2e
 80147ce:	d10c      	bne.n	80147ea <_vfiprintf_r+0x176>
 80147d0:	7863      	ldrb	r3, [r4, #1]
 80147d2:	2b2a      	cmp	r3, #42	; 0x2a
 80147d4:	d135      	bne.n	8014842 <_vfiprintf_r+0x1ce>
 80147d6:	9b03      	ldr	r3, [sp, #12]
 80147d8:	1d1a      	adds	r2, r3, #4
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	9203      	str	r2, [sp, #12]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	bfb8      	it	lt
 80147e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147e6:	3402      	adds	r4, #2
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80148d0 <_vfiprintf_r+0x25c>
 80147ee:	7821      	ldrb	r1, [r4, #0]
 80147f0:	2203      	movs	r2, #3
 80147f2:	4650      	mov	r0, sl
 80147f4:	f7eb fd0c 	bl	8000210 <memchr>
 80147f8:	b140      	cbz	r0, 801480c <_vfiprintf_r+0x198>
 80147fa:	2340      	movs	r3, #64	; 0x40
 80147fc:	eba0 000a 	sub.w	r0, r0, sl
 8014800:	fa03 f000 	lsl.w	r0, r3, r0
 8014804:	9b04      	ldr	r3, [sp, #16]
 8014806:	4303      	orrs	r3, r0
 8014808:	3401      	adds	r4, #1
 801480a:	9304      	str	r3, [sp, #16]
 801480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014810:	482c      	ldr	r0, [pc, #176]	; (80148c4 <_vfiprintf_r+0x250>)
 8014812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014816:	2206      	movs	r2, #6
 8014818:	f7eb fcfa 	bl	8000210 <memchr>
 801481c:	2800      	cmp	r0, #0
 801481e:	d03f      	beq.n	80148a0 <_vfiprintf_r+0x22c>
 8014820:	4b29      	ldr	r3, [pc, #164]	; (80148c8 <_vfiprintf_r+0x254>)
 8014822:	bb1b      	cbnz	r3, 801486c <_vfiprintf_r+0x1f8>
 8014824:	9b03      	ldr	r3, [sp, #12]
 8014826:	3307      	adds	r3, #7
 8014828:	f023 0307 	bic.w	r3, r3, #7
 801482c:	3308      	adds	r3, #8
 801482e:	9303      	str	r3, [sp, #12]
 8014830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014832:	443b      	add	r3, r7
 8014834:	9309      	str	r3, [sp, #36]	; 0x24
 8014836:	e767      	b.n	8014708 <_vfiprintf_r+0x94>
 8014838:	fb0c 3202 	mla	r2, ip, r2, r3
 801483c:	460c      	mov	r4, r1
 801483e:	2001      	movs	r0, #1
 8014840:	e7a5      	b.n	801478e <_vfiprintf_r+0x11a>
 8014842:	2300      	movs	r3, #0
 8014844:	3401      	adds	r4, #1
 8014846:	9305      	str	r3, [sp, #20]
 8014848:	4619      	mov	r1, r3
 801484a:	f04f 0c0a 	mov.w	ip, #10
 801484e:	4620      	mov	r0, r4
 8014850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014854:	3a30      	subs	r2, #48	; 0x30
 8014856:	2a09      	cmp	r2, #9
 8014858:	d903      	bls.n	8014862 <_vfiprintf_r+0x1ee>
 801485a:	2b00      	cmp	r3, #0
 801485c:	d0c5      	beq.n	80147ea <_vfiprintf_r+0x176>
 801485e:	9105      	str	r1, [sp, #20]
 8014860:	e7c3      	b.n	80147ea <_vfiprintf_r+0x176>
 8014862:	fb0c 2101 	mla	r1, ip, r1, r2
 8014866:	4604      	mov	r4, r0
 8014868:	2301      	movs	r3, #1
 801486a:	e7f0      	b.n	801484e <_vfiprintf_r+0x1da>
 801486c:	ab03      	add	r3, sp, #12
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	462a      	mov	r2, r5
 8014872:	4b16      	ldr	r3, [pc, #88]	; (80148cc <_vfiprintf_r+0x258>)
 8014874:	a904      	add	r1, sp, #16
 8014876:	4630      	mov	r0, r6
 8014878:	f3af 8000 	nop.w
 801487c:	4607      	mov	r7, r0
 801487e:	1c78      	adds	r0, r7, #1
 8014880:	d1d6      	bne.n	8014830 <_vfiprintf_r+0x1bc>
 8014882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014884:	07d9      	lsls	r1, r3, #31
 8014886:	d405      	bmi.n	8014894 <_vfiprintf_r+0x220>
 8014888:	89ab      	ldrh	r3, [r5, #12]
 801488a:	059a      	lsls	r2, r3, #22
 801488c:	d402      	bmi.n	8014894 <_vfiprintf_r+0x220>
 801488e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014890:	f7ff feb9 	bl	8014606 <__retarget_lock_release_recursive>
 8014894:	89ab      	ldrh	r3, [r5, #12]
 8014896:	065b      	lsls	r3, r3, #25
 8014898:	f53f af12 	bmi.w	80146c0 <_vfiprintf_r+0x4c>
 801489c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801489e:	e711      	b.n	80146c4 <_vfiprintf_r+0x50>
 80148a0:	ab03      	add	r3, sp, #12
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	462a      	mov	r2, r5
 80148a6:	4b09      	ldr	r3, [pc, #36]	; (80148cc <_vfiprintf_r+0x258>)
 80148a8:	a904      	add	r1, sp, #16
 80148aa:	4630      	mov	r0, r6
 80148ac:	f000 f880 	bl	80149b0 <_printf_i>
 80148b0:	e7e4      	b.n	801487c <_vfiprintf_r+0x208>
 80148b2:	bf00      	nop
 80148b4:	080154bc 	.word	0x080154bc
 80148b8:	080154dc 	.word	0x080154dc
 80148bc:	0801549c 	.word	0x0801549c
 80148c0:	080154fc 	.word	0x080154fc
 80148c4:	08015506 	.word	0x08015506
 80148c8:	00000000 	.word	0x00000000
 80148cc:	0801464f 	.word	0x0801464f
 80148d0:	08015502 	.word	0x08015502

080148d4 <_printf_common>:
 80148d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148d8:	4616      	mov	r6, r2
 80148da:	4699      	mov	r9, r3
 80148dc:	688a      	ldr	r2, [r1, #8]
 80148de:	690b      	ldr	r3, [r1, #16]
 80148e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148e4:	4293      	cmp	r3, r2
 80148e6:	bfb8      	it	lt
 80148e8:	4613      	movlt	r3, r2
 80148ea:	6033      	str	r3, [r6, #0]
 80148ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148f0:	4607      	mov	r7, r0
 80148f2:	460c      	mov	r4, r1
 80148f4:	b10a      	cbz	r2, 80148fa <_printf_common+0x26>
 80148f6:	3301      	adds	r3, #1
 80148f8:	6033      	str	r3, [r6, #0]
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	0699      	lsls	r1, r3, #26
 80148fe:	bf42      	ittt	mi
 8014900:	6833      	ldrmi	r3, [r6, #0]
 8014902:	3302      	addmi	r3, #2
 8014904:	6033      	strmi	r3, [r6, #0]
 8014906:	6825      	ldr	r5, [r4, #0]
 8014908:	f015 0506 	ands.w	r5, r5, #6
 801490c:	d106      	bne.n	801491c <_printf_common+0x48>
 801490e:	f104 0a19 	add.w	sl, r4, #25
 8014912:	68e3      	ldr	r3, [r4, #12]
 8014914:	6832      	ldr	r2, [r6, #0]
 8014916:	1a9b      	subs	r3, r3, r2
 8014918:	42ab      	cmp	r3, r5
 801491a:	dc26      	bgt.n	801496a <_printf_common+0x96>
 801491c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014920:	1e13      	subs	r3, r2, #0
 8014922:	6822      	ldr	r2, [r4, #0]
 8014924:	bf18      	it	ne
 8014926:	2301      	movne	r3, #1
 8014928:	0692      	lsls	r2, r2, #26
 801492a:	d42b      	bmi.n	8014984 <_printf_common+0xb0>
 801492c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014930:	4649      	mov	r1, r9
 8014932:	4638      	mov	r0, r7
 8014934:	47c0      	blx	r8
 8014936:	3001      	adds	r0, #1
 8014938:	d01e      	beq.n	8014978 <_printf_common+0xa4>
 801493a:	6823      	ldr	r3, [r4, #0]
 801493c:	68e5      	ldr	r5, [r4, #12]
 801493e:	6832      	ldr	r2, [r6, #0]
 8014940:	f003 0306 	and.w	r3, r3, #6
 8014944:	2b04      	cmp	r3, #4
 8014946:	bf08      	it	eq
 8014948:	1aad      	subeq	r5, r5, r2
 801494a:	68a3      	ldr	r3, [r4, #8]
 801494c:	6922      	ldr	r2, [r4, #16]
 801494e:	bf0c      	ite	eq
 8014950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014954:	2500      	movne	r5, #0
 8014956:	4293      	cmp	r3, r2
 8014958:	bfc4      	itt	gt
 801495a:	1a9b      	subgt	r3, r3, r2
 801495c:	18ed      	addgt	r5, r5, r3
 801495e:	2600      	movs	r6, #0
 8014960:	341a      	adds	r4, #26
 8014962:	42b5      	cmp	r5, r6
 8014964:	d11a      	bne.n	801499c <_printf_common+0xc8>
 8014966:	2000      	movs	r0, #0
 8014968:	e008      	b.n	801497c <_printf_common+0xa8>
 801496a:	2301      	movs	r3, #1
 801496c:	4652      	mov	r2, sl
 801496e:	4649      	mov	r1, r9
 8014970:	4638      	mov	r0, r7
 8014972:	47c0      	blx	r8
 8014974:	3001      	adds	r0, #1
 8014976:	d103      	bne.n	8014980 <_printf_common+0xac>
 8014978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014980:	3501      	adds	r5, #1
 8014982:	e7c6      	b.n	8014912 <_printf_common+0x3e>
 8014984:	18e1      	adds	r1, r4, r3
 8014986:	1c5a      	adds	r2, r3, #1
 8014988:	2030      	movs	r0, #48	; 0x30
 801498a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801498e:	4422      	add	r2, r4
 8014990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014998:	3302      	adds	r3, #2
 801499a:	e7c7      	b.n	801492c <_printf_common+0x58>
 801499c:	2301      	movs	r3, #1
 801499e:	4622      	mov	r2, r4
 80149a0:	4649      	mov	r1, r9
 80149a2:	4638      	mov	r0, r7
 80149a4:	47c0      	blx	r8
 80149a6:	3001      	adds	r0, #1
 80149a8:	d0e6      	beq.n	8014978 <_printf_common+0xa4>
 80149aa:	3601      	adds	r6, #1
 80149ac:	e7d9      	b.n	8014962 <_printf_common+0x8e>
	...

080149b0 <_printf_i>:
 80149b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149b4:	7e0f      	ldrb	r7, [r1, #24]
 80149b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80149b8:	2f78      	cmp	r7, #120	; 0x78
 80149ba:	4691      	mov	r9, r2
 80149bc:	4680      	mov	r8, r0
 80149be:	460c      	mov	r4, r1
 80149c0:	469a      	mov	sl, r3
 80149c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80149c6:	d807      	bhi.n	80149d8 <_printf_i+0x28>
 80149c8:	2f62      	cmp	r7, #98	; 0x62
 80149ca:	d80a      	bhi.n	80149e2 <_printf_i+0x32>
 80149cc:	2f00      	cmp	r7, #0
 80149ce:	f000 80d8 	beq.w	8014b82 <_printf_i+0x1d2>
 80149d2:	2f58      	cmp	r7, #88	; 0x58
 80149d4:	f000 80a3 	beq.w	8014b1e <_printf_i+0x16e>
 80149d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149e0:	e03a      	b.n	8014a58 <_printf_i+0xa8>
 80149e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149e6:	2b15      	cmp	r3, #21
 80149e8:	d8f6      	bhi.n	80149d8 <_printf_i+0x28>
 80149ea:	a101      	add	r1, pc, #4	; (adr r1, 80149f0 <_printf_i+0x40>)
 80149ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149f0:	08014a49 	.word	0x08014a49
 80149f4:	08014a5d 	.word	0x08014a5d
 80149f8:	080149d9 	.word	0x080149d9
 80149fc:	080149d9 	.word	0x080149d9
 8014a00:	080149d9 	.word	0x080149d9
 8014a04:	080149d9 	.word	0x080149d9
 8014a08:	08014a5d 	.word	0x08014a5d
 8014a0c:	080149d9 	.word	0x080149d9
 8014a10:	080149d9 	.word	0x080149d9
 8014a14:	080149d9 	.word	0x080149d9
 8014a18:	080149d9 	.word	0x080149d9
 8014a1c:	08014b69 	.word	0x08014b69
 8014a20:	08014a8d 	.word	0x08014a8d
 8014a24:	08014b4b 	.word	0x08014b4b
 8014a28:	080149d9 	.word	0x080149d9
 8014a2c:	080149d9 	.word	0x080149d9
 8014a30:	08014b8b 	.word	0x08014b8b
 8014a34:	080149d9 	.word	0x080149d9
 8014a38:	08014a8d 	.word	0x08014a8d
 8014a3c:	080149d9 	.word	0x080149d9
 8014a40:	080149d9 	.word	0x080149d9
 8014a44:	08014b53 	.word	0x08014b53
 8014a48:	682b      	ldr	r3, [r5, #0]
 8014a4a:	1d1a      	adds	r2, r3, #4
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	602a      	str	r2, [r5, #0]
 8014a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a58:	2301      	movs	r3, #1
 8014a5a:	e0a3      	b.n	8014ba4 <_printf_i+0x1f4>
 8014a5c:	6820      	ldr	r0, [r4, #0]
 8014a5e:	6829      	ldr	r1, [r5, #0]
 8014a60:	0606      	lsls	r6, r0, #24
 8014a62:	f101 0304 	add.w	r3, r1, #4
 8014a66:	d50a      	bpl.n	8014a7e <_printf_i+0xce>
 8014a68:	680e      	ldr	r6, [r1, #0]
 8014a6a:	602b      	str	r3, [r5, #0]
 8014a6c:	2e00      	cmp	r6, #0
 8014a6e:	da03      	bge.n	8014a78 <_printf_i+0xc8>
 8014a70:	232d      	movs	r3, #45	; 0x2d
 8014a72:	4276      	negs	r6, r6
 8014a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a78:	485e      	ldr	r0, [pc, #376]	; (8014bf4 <_printf_i+0x244>)
 8014a7a:	230a      	movs	r3, #10
 8014a7c:	e019      	b.n	8014ab2 <_printf_i+0x102>
 8014a7e:	680e      	ldr	r6, [r1, #0]
 8014a80:	602b      	str	r3, [r5, #0]
 8014a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a86:	bf18      	it	ne
 8014a88:	b236      	sxthne	r6, r6
 8014a8a:	e7ef      	b.n	8014a6c <_printf_i+0xbc>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	6820      	ldr	r0, [r4, #0]
 8014a90:	1d19      	adds	r1, r3, #4
 8014a92:	6029      	str	r1, [r5, #0]
 8014a94:	0601      	lsls	r1, r0, #24
 8014a96:	d501      	bpl.n	8014a9c <_printf_i+0xec>
 8014a98:	681e      	ldr	r6, [r3, #0]
 8014a9a:	e002      	b.n	8014aa2 <_printf_i+0xf2>
 8014a9c:	0646      	lsls	r6, r0, #25
 8014a9e:	d5fb      	bpl.n	8014a98 <_printf_i+0xe8>
 8014aa0:	881e      	ldrh	r6, [r3, #0]
 8014aa2:	4854      	ldr	r0, [pc, #336]	; (8014bf4 <_printf_i+0x244>)
 8014aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8014aa6:	bf0c      	ite	eq
 8014aa8:	2308      	moveq	r3, #8
 8014aaa:	230a      	movne	r3, #10
 8014aac:	2100      	movs	r1, #0
 8014aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ab2:	6865      	ldr	r5, [r4, #4]
 8014ab4:	60a5      	str	r5, [r4, #8]
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	bfa2      	ittt	ge
 8014aba:	6821      	ldrge	r1, [r4, #0]
 8014abc:	f021 0104 	bicge.w	r1, r1, #4
 8014ac0:	6021      	strge	r1, [r4, #0]
 8014ac2:	b90e      	cbnz	r6, 8014ac8 <_printf_i+0x118>
 8014ac4:	2d00      	cmp	r5, #0
 8014ac6:	d04d      	beq.n	8014b64 <_printf_i+0x1b4>
 8014ac8:	4615      	mov	r5, r2
 8014aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8014ace:	fb03 6711 	mls	r7, r3, r1, r6
 8014ad2:	5dc7      	ldrb	r7, [r0, r7]
 8014ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014ad8:	4637      	mov	r7, r6
 8014ada:	42bb      	cmp	r3, r7
 8014adc:	460e      	mov	r6, r1
 8014ade:	d9f4      	bls.n	8014aca <_printf_i+0x11a>
 8014ae0:	2b08      	cmp	r3, #8
 8014ae2:	d10b      	bne.n	8014afc <_printf_i+0x14c>
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	07de      	lsls	r6, r3, #31
 8014ae8:	d508      	bpl.n	8014afc <_printf_i+0x14c>
 8014aea:	6923      	ldr	r3, [r4, #16]
 8014aec:	6861      	ldr	r1, [r4, #4]
 8014aee:	4299      	cmp	r1, r3
 8014af0:	bfde      	ittt	le
 8014af2:	2330      	movle	r3, #48	; 0x30
 8014af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014af8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014afc:	1b52      	subs	r2, r2, r5
 8014afe:	6122      	str	r2, [r4, #16]
 8014b00:	f8cd a000 	str.w	sl, [sp]
 8014b04:	464b      	mov	r3, r9
 8014b06:	aa03      	add	r2, sp, #12
 8014b08:	4621      	mov	r1, r4
 8014b0a:	4640      	mov	r0, r8
 8014b0c:	f7ff fee2 	bl	80148d4 <_printf_common>
 8014b10:	3001      	adds	r0, #1
 8014b12:	d14c      	bne.n	8014bae <_printf_i+0x1fe>
 8014b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b18:	b004      	add	sp, #16
 8014b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b1e:	4835      	ldr	r0, [pc, #212]	; (8014bf4 <_printf_i+0x244>)
 8014b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014b24:	6829      	ldr	r1, [r5, #0]
 8014b26:	6823      	ldr	r3, [r4, #0]
 8014b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b2c:	6029      	str	r1, [r5, #0]
 8014b2e:	061d      	lsls	r5, r3, #24
 8014b30:	d514      	bpl.n	8014b5c <_printf_i+0x1ac>
 8014b32:	07df      	lsls	r7, r3, #31
 8014b34:	bf44      	itt	mi
 8014b36:	f043 0320 	orrmi.w	r3, r3, #32
 8014b3a:	6023      	strmi	r3, [r4, #0]
 8014b3c:	b91e      	cbnz	r6, 8014b46 <_printf_i+0x196>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	f023 0320 	bic.w	r3, r3, #32
 8014b44:	6023      	str	r3, [r4, #0]
 8014b46:	2310      	movs	r3, #16
 8014b48:	e7b0      	b.n	8014aac <_printf_i+0xfc>
 8014b4a:	6823      	ldr	r3, [r4, #0]
 8014b4c:	f043 0320 	orr.w	r3, r3, #32
 8014b50:	6023      	str	r3, [r4, #0]
 8014b52:	2378      	movs	r3, #120	; 0x78
 8014b54:	4828      	ldr	r0, [pc, #160]	; (8014bf8 <_printf_i+0x248>)
 8014b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b5a:	e7e3      	b.n	8014b24 <_printf_i+0x174>
 8014b5c:	0659      	lsls	r1, r3, #25
 8014b5e:	bf48      	it	mi
 8014b60:	b2b6      	uxthmi	r6, r6
 8014b62:	e7e6      	b.n	8014b32 <_printf_i+0x182>
 8014b64:	4615      	mov	r5, r2
 8014b66:	e7bb      	b.n	8014ae0 <_printf_i+0x130>
 8014b68:	682b      	ldr	r3, [r5, #0]
 8014b6a:	6826      	ldr	r6, [r4, #0]
 8014b6c:	6961      	ldr	r1, [r4, #20]
 8014b6e:	1d18      	adds	r0, r3, #4
 8014b70:	6028      	str	r0, [r5, #0]
 8014b72:	0635      	lsls	r5, r6, #24
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	d501      	bpl.n	8014b7c <_printf_i+0x1cc>
 8014b78:	6019      	str	r1, [r3, #0]
 8014b7a:	e002      	b.n	8014b82 <_printf_i+0x1d2>
 8014b7c:	0670      	lsls	r0, r6, #25
 8014b7e:	d5fb      	bpl.n	8014b78 <_printf_i+0x1c8>
 8014b80:	8019      	strh	r1, [r3, #0]
 8014b82:	2300      	movs	r3, #0
 8014b84:	6123      	str	r3, [r4, #16]
 8014b86:	4615      	mov	r5, r2
 8014b88:	e7ba      	b.n	8014b00 <_printf_i+0x150>
 8014b8a:	682b      	ldr	r3, [r5, #0]
 8014b8c:	1d1a      	adds	r2, r3, #4
 8014b8e:	602a      	str	r2, [r5, #0]
 8014b90:	681d      	ldr	r5, [r3, #0]
 8014b92:	6862      	ldr	r2, [r4, #4]
 8014b94:	2100      	movs	r1, #0
 8014b96:	4628      	mov	r0, r5
 8014b98:	f7eb fb3a 	bl	8000210 <memchr>
 8014b9c:	b108      	cbz	r0, 8014ba2 <_printf_i+0x1f2>
 8014b9e:	1b40      	subs	r0, r0, r5
 8014ba0:	6060      	str	r0, [r4, #4]
 8014ba2:	6863      	ldr	r3, [r4, #4]
 8014ba4:	6123      	str	r3, [r4, #16]
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bac:	e7a8      	b.n	8014b00 <_printf_i+0x150>
 8014bae:	6923      	ldr	r3, [r4, #16]
 8014bb0:	462a      	mov	r2, r5
 8014bb2:	4649      	mov	r1, r9
 8014bb4:	4640      	mov	r0, r8
 8014bb6:	47d0      	blx	sl
 8014bb8:	3001      	adds	r0, #1
 8014bba:	d0ab      	beq.n	8014b14 <_printf_i+0x164>
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	079b      	lsls	r3, r3, #30
 8014bc0:	d413      	bmi.n	8014bea <_printf_i+0x23a>
 8014bc2:	68e0      	ldr	r0, [r4, #12]
 8014bc4:	9b03      	ldr	r3, [sp, #12]
 8014bc6:	4298      	cmp	r0, r3
 8014bc8:	bfb8      	it	lt
 8014bca:	4618      	movlt	r0, r3
 8014bcc:	e7a4      	b.n	8014b18 <_printf_i+0x168>
 8014bce:	2301      	movs	r3, #1
 8014bd0:	4632      	mov	r2, r6
 8014bd2:	4649      	mov	r1, r9
 8014bd4:	4640      	mov	r0, r8
 8014bd6:	47d0      	blx	sl
 8014bd8:	3001      	adds	r0, #1
 8014bda:	d09b      	beq.n	8014b14 <_printf_i+0x164>
 8014bdc:	3501      	adds	r5, #1
 8014bde:	68e3      	ldr	r3, [r4, #12]
 8014be0:	9903      	ldr	r1, [sp, #12]
 8014be2:	1a5b      	subs	r3, r3, r1
 8014be4:	42ab      	cmp	r3, r5
 8014be6:	dcf2      	bgt.n	8014bce <_printf_i+0x21e>
 8014be8:	e7eb      	b.n	8014bc2 <_printf_i+0x212>
 8014bea:	2500      	movs	r5, #0
 8014bec:	f104 0619 	add.w	r6, r4, #25
 8014bf0:	e7f5      	b.n	8014bde <_printf_i+0x22e>
 8014bf2:	bf00      	nop
 8014bf4:	0801550d 	.word	0x0801550d
 8014bf8:	0801551e 	.word	0x0801551e

08014bfc <__sread>:
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	460c      	mov	r4, r1
 8014c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c04:	f000 fa5a 	bl	80150bc <_read_r>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	bfab      	itete	ge
 8014c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8014c10:	181b      	addge	r3, r3, r0
 8014c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c16:	bfac      	ite	ge
 8014c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c1a:	81a3      	strhlt	r3, [r4, #12]
 8014c1c:	bd10      	pop	{r4, pc}

08014c1e <__swrite>:
 8014c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c22:	461f      	mov	r7, r3
 8014c24:	898b      	ldrh	r3, [r1, #12]
 8014c26:	05db      	lsls	r3, r3, #23
 8014c28:	4605      	mov	r5, r0
 8014c2a:	460c      	mov	r4, r1
 8014c2c:	4616      	mov	r6, r2
 8014c2e:	d505      	bpl.n	8014c3c <__swrite+0x1e>
 8014c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c34:	2302      	movs	r3, #2
 8014c36:	2200      	movs	r2, #0
 8014c38:	f000 f9c8 	bl	8014fcc <_lseek_r>
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c46:	81a3      	strh	r3, [r4, #12]
 8014c48:	4632      	mov	r2, r6
 8014c4a:	463b      	mov	r3, r7
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c52:	f000 b869 	b.w	8014d28 <_write_r>

08014c56 <__sseek>:
 8014c56:	b510      	push	{r4, lr}
 8014c58:	460c      	mov	r4, r1
 8014c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c5e:	f000 f9b5 	bl	8014fcc <_lseek_r>
 8014c62:	1c43      	adds	r3, r0, #1
 8014c64:	89a3      	ldrh	r3, [r4, #12]
 8014c66:	bf15      	itete	ne
 8014c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c72:	81a3      	strheq	r3, [r4, #12]
 8014c74:	bf18      	it	ne
 8014c76:	81a3      	strhne	r3, [r4, #12]
 8014c78:	bd10      	pop	{r4, pc}

08014c7a <__sclose>:
 8014c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c7e:	f000 b8d3 	b.w	8014e28 <_close_r>
	...

08014c84 <__swbuf_r>:
 8014c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c86:	460e      	mov	r6, r1
 8014c88:	4614      	mov	r4, r2
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	b118      	cbz	r0, 8014c96 <__swbuf_r+0x12>
 8014c8e:	6983      	ldr	r3, [r0, #24]
 8014c90:	b90b      	cbnz	r3, 8014c96 <__swbuf_r+0x12>
 8014c92:	f7ff fc19 	bl	80144c8 <__sinit>
 8014c96:	4b21      	ldr	r3, [pc, #132]	; (8014d1c <__swbuf_r+0x98>)
 8014c98:	429c      	cmp	r4, r3
 8014c9a:	d12b      	bne.n	8014cf4 <__swbuf_r+0x70>
 8014c9c:	686c      	ldr	r4, [r5, #4]
 8014c9e:	69a3      	ldr	r3, [r4, #24]
 8014ca0:	60a3      	str	r3, [r4, #8]
 8014ca2:	89a3      	ldrh	r3, [r4, #12]
 8014ca4:	071a      	lsls	r2, r3, #28
 8014ca6:	d52f      	bpl.n	8014d08 <__swbuf_r+0x84>
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	b36b      	cbz	r3, 8014d08 <__swbuf_r+0x84>
 8014cac:	6923      	ldr	r3, [r4, #16]
 8014cae:	6820      	ldr	r0, [r4, #0]
 8014cb0:	1ac0      	subs	r0, r0, r3
 8014cb2:	6963      	ldr	r3, [r4, #20]
 8014cb4:	b2f6      	uxtb	r6, r6
 8014cb6:	4283      	cmp	r3, r0
 8014cb8:	4637      	mov	r7, r6
 8014cba:	dc04      	bgt.n	8014cc6 <__swbuf_r+0x42>
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	f000 f948 	bl	8014f54 <_fflush_r>
 8014cc4:	bb30      	cbnz	r0, 8014d14 <__swbuf_r+0x90>
 8014cc6:	68a3      	ldr	r3, [r4, #8]
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	60a3      	str	r3, [r4, #8]
 8014ccc:	6823      	ldr	r3, [r4, #0]
 8014cce:	1c5a      	adds	r2, r3, #1
 8014cd0:	6022      	str	r2, [r4, #0]
 8014cd2:	701e      	strb	r6, [r3, #0]
 8014cd4:	6963      	ldr	r3, [r4, #20]
 8014cd6:	3001      	adds	r0, #1
 8014cd8:	4283      	cmp	r3, r0
 8014cda:	d004      	beq.n	8014ce6 <__swbuf_r+0x62>
 8014cdc:	89a3      	ldrh	r3, [r4, #12]
 8014cde:	07db      	lsls	r3, r3, #31
 8014ce0:	d506      	bpl.n	8014cf0 <__swbuf_r+0x6c>
 8014ce2:	2e0a      	cmp	r6, #10
 8014ce4:	d104      	bne.n	8014cf0 <__swbuf_r+0x6c>
 8014ce6:	4621      	mov	r1, r4
 8014ce8:	4628      	mov	r0, r5
 8014cea:	f000 f933 	bl	8014f54 <_fflush_r>
 8014cee:	b988      	cbnz	r0, 8014d14 <__swbuf_r+0x90>
 8014cf0:	4638      	mov	r0, r7
 8014cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf4:	4b0a      	ldr	r3, [pc, #40]	; (8014d20 <__swbuf_r+0x9c>)
 8014cf6:	429c      	cmp	r4, r3
 8014cf8:	d101      	bne.n	8014cfe <__swbuf_r+0x7a>
 8014cfa:	68ac      	ldr	r4, [r5, #8]
 8014cfc:	e7cf      	b.n	8014c9e <__swbuf_r+0x1a>
 8014cfe:	4b09      	ldr	r3, [pc, #36]	; (8014d24 <__swbuf_r+0xa0>)
 8014d00:	429c      	cmp	r4, r3
 8014d02:	bf08      	it	eq
 8014d04:	68ec      	ldreq	r4, [r5, #12]
 8014d06:	e7ca      	b.n	8014c9e <__swbuf_r+0x1a>
 8014d08:	4621      	mov	r1, r4
 8014d0a:	4628      	mov	r0, r5
 8014d0c:	f000 f81e 	bl	8014d4c <__swsetup_r>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	d0cb      	beq.n	8014cac <__swbuf_r+0x28>
 8014d14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014d18:	e7ea      	b.n	8014cf0 <__swbuf_r+0x6c>
 8014d1a:	bf00      	nop
 8014d1c:	080154bc 	.word	0x080154bc
 8014d20:	080154dc 	.word	0x080154dc
 8014d24:	0801549c 	.word	0x0801549c

08014d28 <_write_r>:
 8014d28:	b538      	push	{r3, r4, r5, lr}
 8014d2a:	4d07      	ldr	r5, [pc, #28]	; (8014d48 <_write_r+0x20>)
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	4608      	mov	r0, r1
 8014d30:	4611      	mov	r1, r2
 8014d32:	2200      	movs	r2, #0
 8014d34:	602a      	str	r2, [r5, #0]
 8014d36:	461a      	mov	r2, r3
 8014d38:	f000 fa2a 	bl	8015190 <_write>
 8014d3c:	1c43      	adds	r3, r0, #1
 8014d3e:	d102      	bne.n	8014d46 <_write_r+0x1e>
 8014d40:	682b      	ldr	r3, [r5, #0]
 8014d42:	b103      	cbz	r3, 8014d46 <_write_r+0x1e>
 8014d44:	6023      	str	r3, [r4, #0]
 8014d46:	bd38      	pop	{r3, r4, r5, pc}
 8014d48:	20002d30 	.word	0x20002d30

08014d4c <__swsetup_r>:
 8014d4c:	4b32      	ldr	r3, [pc, #200]	; (8014e18 <__swsetup_r+0xcc>)
 8014d4e:	b570      	push	{r4, r5, r6, lr}
 8014d50:	681d      	ldr	r5, [r3, #0]
 8014d52:	4606      	mov	r6, r0
 8014d54:	460c      	mov	r4, r1
 8014d56:	b125      	cbz	r5, 8014d62 <__swsetup_r+0x16>
 8014d58:	69ab      	ldr	r3, [r5, #24]
 8014d5a:	b913      	cbnz	r3, 8014d62 <__swsetup_r+0x16>
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f7ff fbb3 	bl	80144c8 <__sinit>
 8014d62:	4b2e      	ldr	r3, [pc, #184]	; (8014e1c <__swsetup_r+0xd0>)
 8014d64:	429c      	cmp	r4, r3
 8014d66:	d10f      	bne.n	8014d88 <__swsetup_r+0x3c>
 8014d68:	686c      	ldr	r4, [r5, #4]
 8014d6a:	89a3      	ldrh	r3, [r4, #12]
 8014d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d70:	0719      	lsls	r1, r3, #28
 8014d72:	d42c      	bmi.n	8014dce <__swsetup_r+0x82>
 8014d74:	06dd      	lsls	r5, r3, #27
 8014d76:	d411      	bmi.n	8014d9c <__swsetup_r+0x50>
 8014d78:	2309      	movs	r3, #9
 8014d7a:	6033      	str	r3, [r6, #0]
 8014d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d80:	81a3      	strh	r3, [r4, #12]
 8014d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d86:	e03e      	b.n	8014e06 <__swsetup_r+0xba>
 8014d88:	4b25      	ldr	r3, [pc, #148]	; (8014e20 <__swsetup_r+0xd4>)
 8014d8a:	429c      	cmp	r4, r3
 8014d8c:	d101      	bne.n	8014d92 <__swsetup_r+0x46>
 8014d8e:	68ac      	ldr	r4, [r5, #8]
 8014d90:	e7eb      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d92:	4b24      	ldr	r3, [pc, #144]	; (8014e24 <__swsetup_r+0xd8>)
 8014d94:	429c      	cmp	r4, r3
 8014d96:	bf08      	it	eq
 8014d98:	68ec      	ldreq	r4, [r5, #12]
 8014d9a:	e7e6      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d9c:	0758      	lsls	r0, r3, #29
 8014d9e:	d512      	bpl.n	8014dc6 <__swsetup_r+0x7a>
 8014da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014da2:	b141      	cbz	r1, 8014db6 <__swsetup_r+0x6a>
 8014da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014da8:	4299      	cmp	r1, r3
 8014daa:	d002      	beq.n	8014db2 <__swsetup_r+0x66>
 8014dac:	4630      	mov	r0, r6
 8014dae:	f7ff fa2b 	bl	8014208 <_free_r>
 8014db2:	2300      	movs	r3, #0
 8014db4:	6363      	str	r3, [r4, #52]	; 0x34
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f043 0308 	orr.w	r3, r3, #8
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	b94b      	cbnz	r3, 8014de6 <__swsetup_r+0x9a>
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ddc:	d003      	beq.n	8014de6 <__swsetup_r+0x9a>
 8014dde:	4621      	mov	r1, r4
 8014de0:	4630      	mov	r0, r6
 8014de2:	f000 f92b 	bl	801503c <__smakebuf_r>
 8014de6:	89a0      	ldrh	r0, [r4, #12]
 8014de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014dec:	f010 0301 	ands.w	r3, r0, #1
 8014df0:	d00a      	beq.n	8014e08 <__swsetup_r+0xbc>
 8014df2:	2300      	movs	r3, #0
 8014df4:	60a3      	str	r3, [r4, #8]
 8014df6:	6963      	ldr	r3, [r4, #20]
 8014df8:	425b      	negs	r3, r3
 8014dfa:	61a3      	str	r3, [r4, #24]
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	b943      	cbnz	r3, 8014e12 <__swsetup_r+0xc6>
 8014e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e04:	d1ba      	bne.n	8014d7c <__swsetup_r+0x30>
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	0781      	lsls	r1, r0, #30
 8014e0a:	bf58      	it	pl
 8014e0c:	6963      	ldrpl	r3, [r4, #20]
 8014e0e:	60a3      	str	r3, [r4, #8]
 8014e10:	e7f4      	b.n	8014dfc <__swsetup_r+0xb0>
 8014e12:	2000      	movs	r0, #0
 8014e14:	e7f7      	b.n	8014e06 <__swsetup_r+0xba>
 8014e16:	bf00      	nop
 8014e18:	20000180 	.word	0x20000180
 8014e1c:	080154bc 	.word	0x080154bc
 8014e20:	080154dc 	.word	0x080154dc
 8014e24:	0801549c 	.word	0x0801549c

08014e28 <_close_r>:
 8014e28:	b538      	push	{r3, r4, r5, lr}
 8014e2a:	4d06      	ldr	r5, [pc, #24]	; (8014e44 <_close_r+0x1c>)
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	4604      	mov	r4, r0
 8014e30:	4608      	mov	r0, r1
 8014e32:	602b      	str	r3, [r5, #0]
 8014e34:	f000 f976 	bl	8015124 <_close>
 8014e38:	1c43      	adds	r3, r0, #1
 8014e3a:	d102      	bne.n	8014e42 <_close_r+0x1a>
 8014e3c:	682b      	ldr	r3, [r5, #0]
 8014e3e:	b103      	cbz	r3, 8014e42 <_close_r+0x1a>
 8014e40:	6023      	str	r3, [r4, #0]
 8014e42:	bd38      	pop	{r3, r4, r5, pc}
 8014e44:	20002d30 	.word	0x20002d30

08014e48 <__sflush_r>:
 8014e48:	898a      	ldrh	r2, [r1, #12]
 8014e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e4e:	4605      	mov	r5, r0
 8014e50:	0710      	lsls	r0, r2, #28
 8014e52:	460c      	mov	r4, r1
 8014e54:	d458      	bmi.n	8014f08 <__sflush_r+0xc0>
 8014e56:	684b      	ldr	r3, [r1, #4]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dc05      	bgt.n	8014e68 <__sflush_r+0x20>
 8014e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	dc02      	bgt.n	8014e68 <__sflush_r+0x20>
 8014e62:	2000      	movs	r0, #0
 8014e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e6a:	2e00      	cmp	r6, #0
 8014e6c:	d0f9      	beq.n	8014e62 <__sflush_r+0x1a>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e74:	682f      	ldr	r7, [r5, #0]
 8014e76:	602b      	str	r3, [r5, #0]
 8014e78:	d032      	beq.n	8014ee0 <__sflush_r+0x98>
 8014e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	075a      	lsls	r2, r3, #29
 8014e80:	d505      	bpl.n	8014e8e <__sflush_r+0x46>
 8014e82:	6863      	ldr	r3, [r4, #4]
 8014e84:	1ac0      	subs	r0, r0, r3
 8014e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e88:	b10b      	cbz	r3, 8014e8e <__sflush_r+0x46>
 8014e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e8c:	1ac0      	subs	r0, r0, r3
 8014e8e:	2300      	movs	r3, #0
 8014e90:	4602      	mov	r2, r0
 8014e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e94:	6a21      	ldr	r1, [r4, #32]
 8014e96:	4628      	mov	r0, r5
 8014e98:	47b0      	blx	r6
 8014e9a:	1c43      	adds	r3, r0, #1
 8014e9c:	89a3      	ldrh	r3, [r4, #12]
 8014e9e:	d106      	bne.n	8014eae <__sflush_r+0x66>
 8014ea0:	6829      	ldr	r1, [r5, #0]
 8014ea2:	291d      	cmp	r1, #29
 8014ea4:	d82c      	bhi.n	8014f00 <__sflush_r+0xb8>
 8014ea6:	4a2a      	ldr	r2, [pc, #168]	; (8014f50 <__sflush_r+0x108>)
 8014ea8:	40ca      	lsrs	r2, r1
 8014eaa:	07d6      	lsls	r6, r2, #31
 8014eac:	d528      	bpl.n	8014f00 <__sflush_r+0xb8>
 8014eae:	2200      	movs	r2, #0
 8014eb0:	6062      	str	r2, [r4, #4]
 8014eb2:	04d9      	lsls	r1, r3, #19
 8014eb4:	6922      	ldr	r2, [r4, #16]
 8014eb6:	6022      	str	r2, [r4, #0]
 8014eb8:	d504      	bpl.n	8014ec4 <__sflush_r+0x7c>
 8014eba:	1c42      	adds	r2, r0, #1
 8014ebc:	d101      	bne.n	8014ec2 <__sflush_r+0x7a>
 8014ebe:	682b      	ldr	r3, [r5, #0]
 8014ec0:	b903      	cbnz	r3, 8014ec4 <__sflush_r+0x7c>
 8014ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8014ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec6:	602f      	str	r7, [r5, #0]
 8014ec8:	2900      	cmp	r1, #0
 8014eca:	d0ca      	beq.n	8014e62 <__sflush_r+0x1a>
 8014ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ed0:	4299      	cmp	r1, r3
 8014ed2:	d002      	beq.n	8014eda <__sflush_r+0x92>
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f7ff f997 	bl	8014208 <_free_r>
 8014eda:	2000      	movs	r0, #0
 8014edc:	6360      	str	r0, [r4, #52]	; 0x34
 8014ede:	e7c1      	b.n	8014e64 <__sflush_r+0x1c>
 8014ee0:	6a21      	ldr	r1, [r4, #32]
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	47b0      	blx	r6
 8014ee8:	1c41      	adds	r1, r0, #1
 8014eea:	d1c7      	bne.n	8014e7c <__sflush_r+0x34>
 8014eec:	682b      	ldr	r3, [r5, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d0c4      	beq.n	8014e7c <__sflush_r+0x34>
 8014ef2:	2b1d      	cmp	r3, #29
 8014ef4:	d001      	beq.n	8014efa <__sflush_r+0xb2>
 8014ef6:	2b16      	cmp	r3, #22
 8014ef8:	d101      	bne.n	8014efe <__sflush_r+0xb6>
 8014efa:	602f      	str	r7, [r5, #0]
 8014efc:	e7b1      	b.n	8014e62 <__sflush_r+0x1a>
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f04:	81a3      	strh	r3, [r4, #12]
 8014f06:	e7ad      	b.n	8014e64 <__sflush_r+0x1c>
 8014f08:	690f      	ldr	r7, [r1, #16]
 8014f0a:	2f00      	cmp	r7, #0
 8014f0c:	d0a9      	beq.n	8014e62 <__sflush_r+0x1a>
 8014f0e:	0793      	lsls	r3, r2, #30
 8014f10:	680e      	ldr	r6, [r1, #0]
 8014f12:	bf08      	it	eq
 8014f14:	694b      	ldreq	r3, [r1, #20]
 8014f16:	600f      	str	r7, [r1, #0]
 8014f18:	bf18      	it	ne
 8014f1a:	2300      	movne	r3, #0
 8014f1c:	eba6 0807 	sub.w	r8, r6, r7
 8014f20:	608b      	str	r3, [r1, #8]
 8014f22:	f1b8 0f00 	cmp.w	r8, #0
 8014f26:	dd9c      	ble.n	8014e62 <__sflush_r+0x1a>
 8014f28:	6a21      	ldr	r1, [r4, #32]
 8014f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f2c:	4643      	mov	r3, r8
 8014f2e:	463a      	mov	r2, r7
 8014f30:	4628      	mov	r0, r5
 8014f32:	47b0      	blx	r6
 8014f34:	2800      	cmp	r0, #0
 8014f36:	dc06      	bgt.n	8014f46 <__sflush_r+0xfe>
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f3e:	81a3      	strh	r3, [r4, #12]
 8014f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f44:	e78e      	b.n	8014e64 <__sflush_r+0x1c>
 8014f46:	4407      	add	r7, r0
 8014f48:	eba8 0800 	sub.w	r8, r8, r0
 8014f4c:	e7e9      	b.n	8014f22 <__sflush_r+0xda>
 8014f4e:	bf00      	nop
 8014f50:	20400001 	.word	0x20400001

08014f54 <_fflush_r>:
 8014f54:	b538      	push	{r3, r4, r5, lr}
 8014f56:	690b      	ldr	r3, [r1, #16]
 8014f58:	4605      	mov	r5, r0
 8014f5a:	460c      	mov	r4, r1
 8014f5c:	b913      	cbnz	r3, 8014f64 <_fflush_r+0x10>
 8014f5e:	2500      	movs	r5, #0
 8014f60:	4628      	mov	r0, r5
 8014f62:	bd38      	pop	{r3, r4, r5, pc}
 8014f64:	b118      	cbz	r0, 8014f6e <_fflush_r+0x1a>
 8014f66:	6983      	ldr	r3, [r0, #24]
 8014f68:	b90b      	cbnz	r3, 8014f6e <_fflush_r+0x1a>
 8014f6a:	f7ff faad 	bl	80144c8 <__sinit>
 8014f6e:	4b14      	ldr	r3, [pc, #80]	; (8014fc0 <_fflush_r+0x6c>)
 8014f70:	429c      	cmp	r4, r3
 8014f72:	d11b      	bne.n	8014fac <_fflush_r+0x58>
 8014f74:	686c      	ldr	r4, [r5, #4]
 8014f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d0ef      	beq.n	8014f5e <_fflush_r+0xa>
 8014f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f80:	07d0      	lsls	r0, r2, #31
 8014f82:	d404      	bmi.n	8014f8e <_fflush_r+0x3a>
 8014f84:	0599      	lsls	r1, r3, #22
 8014f86:	d402      	bmi.n	8014f8e <_fflush_r+0x3a>
 8014f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f8a:	f7ff fb3b 	bl	8014604 <__retarget_lock_acquire_recursive>
 8014f8e:	4628      	mov	r0, r5
 8014f90:	4621      	mov	r1, r4
 8014f92:	f7ff ff59 	bl	8014e48 <__sflush_r>
 8014f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f98:	07da      	lsls	r2, r3, #31
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	d4e0      	bmi.n	8014f60 <_fflush_r+0xc>
 8014f9e:	89a3      	ldrh	r3, [r4, #12]
 8014fa0:	059b      	lsls	r3, r3, #22
 8014fa2:	d4dd      	bmi.n	8014f60 <_fflush_r+0xc>
 8014fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fa6:	f7ff fb2e 	bl	8014606 <__retarget_lock_release_recursive>
 8014faa:	e7d9      	b.n	8014f60 <_fflush_r+0xc>
 8014fac:	4b05      	ldr	r3, [pc, #20]	; (8014fc4 <_fflush_r+0x70>)
 8014fae:	429c      	cmp	r4, r3
 8014fb0:	d101      	bne.n	8014fb6 <_fflush_r+0x62>
 8014fb2:	68ac      	ldr	r4, [r5, #8]
 8014fb4:	e7df      	b.n	8014f76 <_fflush_r+0x22>
 8014fb6:	4b04      	ldr	r3, [pc, #16]	; (8014fc8 <_fflush_r+0x74>)
 8014fb8:	429c      	cmp	r4, r3
 8014fba:	bf08      	it	eq
 8014fbc:	68ec      	ldreq	r4, [r5, #12]
 8014fbe:	e7da      	b.n	8014f76 <_fflush_r+0x22>
 8014fc0:	080154bc 	.word	0x080154bc
 8014fc4:	080154dc 	.word	0x080154dc
 8014fc8:	0801549c 	.word	0x0801549c

08014fcc <_lseek_r>:
 8014fcc:	b538      	push	{r3, r4, r5, lr}
 8014fce:	4d07      	ldr	r5, [pc, #28]	; (8014fec <_lseek_r+0x20>)
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	4608      	mov	r0, r1
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	602a      	str	r2, [r5, #0]
 8014fda:	461a      	mov	r2, r3
 8014fdc:	f000 f8ba 	bl	8015154 <_lseek>
 8014fe0:	1c43      	adds	r3, r0, #1
 8014fe2:	d102      	bne.n	8014fea <_lseek_r+0x1e>
 8014fe4:	682b      	ldr	r3, [r5, #0]
 8014fe6:	b103      	cbz	r3, 8014fea <_lseek_r+0x1e>
 8014fe8:	6023      	str	r3, [r4, #0]
 8014fea:	bd38      	pop	{r3, r4, r5, pc}
 8014fec:	20002d30 	.word	0x20002d30

08014ff0 <__swhatbuf_r>:
 8014ff0:	b570      	push	{r4, r5, r6, lr}
 8014ff2:	460e      	mov	r6, r1
 8014ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff8:	2900      	cmp	r1, #0
 8014ffa:	b096      	sub	sp, #88	; 0x58
 8014ffc:	4614      	mov	r4, r2
 8014ffe:	461d      	mov	r5, r3
 8015000:	da08      	bge.n	8015014 <__swhatbuf_r+0x24>
 8015002:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015006:	2200      	movs	r2, #0
 8015008:	602a      	str	r2, [r5, #0]
 801500a:	061a      	lsls	r2, r3, #24
 801500c:	d410      	bmi.n	8015030 <__swhatbuf_r+0x40>
 801500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015012:	e00e      	b.n	8015032 <__swhatbuf_r+0x42>
 8015014:	466a      	mov	r2, sp
 8015016:	f000 f863 	bl	80150e0 <_fstat_r>
 801501a:	2800      	cmp	r0, #0
 801501c:	dbf1      	blt.n	8015002 <__swhatbuf_r+0x12>
 801501e:	9a01      	ldr	r2, [sp, #4]
 8015020:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015024:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015028:	425a      	negs	r2, r3
 801502a:	415a      	adcs	r2, r3
 801502c:	602a      	str	r2, [r5, #0]
 801502e:	e7ee      	b.n	801500e <__swhatbuf_r+0x1e>
 8015030:	2340      	movs	r3, #64	; 0x40
 8015032:	2000      	movs	r0, #0
 8015034:	6023      	str	r3, [r4, #0]
 8015036:	b016      	add	sp, #88	; 0x58
 8015038:	bd70      	pop	{r4, r5, r6, pc}
	...

0801503c <__smakebuf_r>:
 801503c:	898b      	ldrh	r3, [r1, #12]
 801503e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015040:	079d      	lsls	r5, r3, #30
 8015042:	4606      	mov	r6, r0
 8015044:	460c      	mov	r4, r1
 8015046:	d507      	bpl.n	8015058 <__smakebuf_r+0x1c>
 8015048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801504c:	6023      	str	r3, [r4, #0]
 801504e:	6123      	str	r3, [r4, #16]
 8015050:	2301      	movs	r3, #1
 8015052:	6163      	str	r3, [r4, #20]
 8015054:	b002      	add	sp, #8
 8015056:	bd70      	pop	{r4, r5, r6, pc}
 8015058:	ab01      	add	r3, sp, #4
 801505a:	466a      	mov	r2, sp
 801505c:	f7ff ffc8 	bl	8014ff0 <__swhatbuf_r>
 8015060:	9900      	ldr	r1, [sp, #0]
 8015062:	4605      	mov	r5, r0
 8015064:	4630      	mov	r0, r6
 8015066:	f7ff f93b 	bl	80142e0 <_malloc_r>
 801506a:	b948      	cbnz	r0, 8015080 <__smakebuf_r+0x44>
 801506c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015070:	059a      	lsls	r2, r3, #22
 8015072:	d4ef      	bmi.n	8015054 <__smakebuf_r+0x18>
 8015074:	f023 0303 	bic.w	r3, r3, #3
 8015078:	f043 0302 	orr.w	r3, r3, #2
 801507c:	81a3      	strh	r3, [r4, #12]
 801507e:	e7e3      	b.n	8015048 <__smakebuf_r+0xc>
 8015080:	4b0d      	ldr	r3, [pc, #52]	; (80150b8 <__smakebuf_r+0x7c>)
 8015082:	62b3      	str	r3, [r6, #40]	; 0x28
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	6020      	str	r0, [r4, #0]
 8015088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801508c:	81a3      	strh	r3, [r4, #12]
 801508e:	9b00      	ldr	r3, [sp, #0]
 8015090:	6163      	str	r3, [r4, #20]
 8015092:	9b01      	ldr	r3, [sp, #4]
 8015094:	6120      	str	r0, [r4, #16]
 8015096:	b15b      	cbz	r3, 80150b0 <__smakebuf_r+0x74>
 8015098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801509c:	4630      	mov	r0, r6
 801509e:	f000 f831 	bl	8015104 <_isatty_r>
 80150a2:	b128      	cbz	r0, 80150b0 <__smakebuf_r+0x74>
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	f023 0303 	bic.w	r3, r3, #3
 80150aa:	f043 0301 	orr.w	r3, r3, #1
 80150ae:	81a3      	strh	r3, [r4, #12]
 80150b0:	89a0      	ldrh	r0, [r4, #12]
 80150b2:	4305      	orrs	r5, r0
 80150b4:	81a5      	strh	r5, [r4, #12]
 80150b6:	e7cd      	b.n	8015054 <__smakebuf_r+0x18>
 80150b8:	08014461 	.word	0x08014461

080150bc <_read_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4d07      	ldr	r5, [pc, #28]	; (80150dc <_read_r+0x20>)
 80150c0:	4604      	mov	r4, r0
 80150c2:	4608      	mov	r0, r1
 80150c4:	4611      	mov	r1, r2
 80150c6:	2200      	movs	r2, #0
 80150c8:	602a      	str	r2, [r5, #0]
 80150ca:	461a      	mov	r2, r3
 80150cc:	f000 f84a 	bl	8015164 <_read>
 80150d0:	1c43      	adds	r3, r0, #1
 80150d2:	d102      	bne.n	80150da <_read_r+0x1e>
 80150d4:	682b      	ldr	r3, [r5, #0]
 80150d6:	b103      	cbz	r3, 80150da <_read_r+0x1e>
 80150d8:	6023      	str	r3, [r4, #0]
 80150da:	bd38      	pop	{r3, r4, r5, pc}
 80150dc:	20002d30 	.word	0x20002d30

080150e0 <_fstat_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	4d07      	ldr	r5, [pc, #28]	; (8015100 <_fstat_r+0x20>)
 80150e4:	2300      	movs	r3, #0
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	4611      	mov	r1, r2
 80150ec:	602b      	str	r3, [r5, #0]
 80150ee:	f000 f821 	bl	8015134 <_fstat>
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	d102      	bne.n	80150fc <_fstat_r+0x1c>
 80150f6:	682b      	ldr	r3, [r5, #0]
 80150f8:	b103      	cbz	r3, 80150fc <_fstat_r+0x1c>
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	bd38      	pop	{r3, r4, r5, pc}
 80150fe:	bf00      	nop
 8015100:	20002d30 	.word	0x20002d30

08015104 <_isatty_r>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4d06      	ldr	r5, [pc, #24]	; (8015120 <_isatty_r+0x1c>)
 8015108:	2300      	movs	r3, #0
 801510a:	4604      	mov	r4, r0
 801510c:	4608      	mov	r0, r1
 801510e:	602b      	str	r3, [r5, #0]
 8015110:	f000 f818 	bl	8015144 <_isatty>
 8015114:	1c43      	adds	r3, r0, #1
 8015116:	d102      	bne.n	801511e <_isatty_r+0x1a>
 8015118:	682b      	ldr	r3, [r5, #0]
 801511a:	b103      	cbz	r3, 801511e <_isatty_r+0x1a>
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	20002d30 	.word	0x20002d30

08015124 <_close>:
 8015124:	4b02      	ldr	r3, [pc, #8]	; (8015130 <_close+0xc>)
 8015126:	2258      	movs	r2, #88	; 0x58
 8015128:	601a      	str	r2, [r3, #0]
 801512a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801512e:	4770      	bx	lr
 8015130:	20002d30 	.word	0x20002d30

08015134 <_fstat>:
 8015134:	4b02      	ldr	r3, [pc, #8]	; (8015140 <_fstat+0xc>)
 8015136:	2258      	movs	r2, #88	; 0x58
 8015138:	601a      	str	r2, [r3, #0]
 801513a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801513e:	4770      	bx	lr
 8015140:	20002d30 	.word	0x20002d30

08015144 <_isatty>:
 8015144:	4b02      	ldr	r3, [pc, #8]	; (8015150 <_isatty+0xc>)
 8015146:	2258      	movs	r2, #88	; 0x58
 8015148:	601a      	str	r2, [r3, #0]
 801514a:	2000      	movs	r0, #0
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	20002d30 	.word	0x20002d30

08015154 <_lseek>:
 8015154:	4b02      	ldr	r3, [pc, #8]	; (8015160 <_lseek+0xc>)
 8015156:	2258      	movs	r2, #88	; 0x58
 8015158:	601a      	str	r2, [r3, #0]
 801515a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801515e:	4770      	bx	lr
 8015160:	20002d30 	.word	0x20002d30

08015164 <_read>:
 8015164:	4b02      	ldr	r3, [pc, #8]	; (8015170 <_read+0xc>)
 8015166:	2258      	movs	r2, #88	; 0x58
 8015168:	601a      	str	r2, [r3, #0]
 801516a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801516e:	4770      	bx	lr
 8015170:	20002d30 	.word	0x20002d30

08015174 <_sbrk>:
 8015174:	4a04      	ldr	r2, [pc, #16]	; (8015188 <_sbrk+0x14>)
 8015176:	6811      	ldr	r1, [r2, #0]
 8015178:	4603      	mov	r3, r0
 801517a:	b909      	cbnz	r1, 8015180 <_sbrk+0xc>
 801517c:	4903      	ldr	r1, [pc, #12]	; (801518c <_sbrk+0x18>)
 801517e:	6011      	str	r1, [r2, #0]
 8015180:	6810      	ldr	r0, [r2, #0]
 8015182:	4403      	add	r3, r0
 8015184:	6013      	str	r3, [r2, #0]
 8015186:	4770      	bx	lr
 8015188:	20002d34 	.word	0x20002d34
 801518c:	20002d38 	.word	0x20002d38

08015190 <_write>:
 8015190:	4b02      	ldr	r3, [pc, #8]	; (801519c <_write+0xc>)
 8015192:	2258      	movs	r2, #88	; 0x58
 8015194:	601a      	str	r2, [r3, #0]
 8015196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801519a:	4770      	bx	lr
 801519c:	20002d30 	.word	0x20002d30

080151a0 <_init>:
 80151a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a2:	bf00      	nop
 80151a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151a6:	bc08      	pop	{r3}
 80151a8:	469e      	mov	lr, r3
 80151aa:	4770      	bx	lr

080151ac <_fini>:
 80151ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ae:	bf00      	nop
 80151b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151b2:	bc08      	pop	{r3}
 80151b4:	469e      	mov	lr, r3
 80151b6:	4770      	bx	lr
